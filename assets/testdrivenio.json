[
    {
        "data": {
            "edit_history_tweet_ids": [
                "1604529424275476480"
            ],
            "text": "What advice would you give your past self at the start of you programming journey?",
            "id": "1604529424275476480",
            "conversation_id": "1604529424275476480"
        }
    },
    {
        "data": {
            "id": "1604167042977890311",
            "attachments": {
                "media_keys": [
                    "3_1604167037827559424"
                ]
            },
            "text": "Python tip:\n\nPythons filter method filters the given iterable with a function that tests each element to be true or not.\n\nSince \"filter\" doesn't create a copy of the iterable but a reference to it, it's faster than using comprehension. \ud83d\udc47 https://t.co/kjCNCorySB",
            "edit_history_tweet_ids": [
                "1604167042977890311"
            ],
            "conversation_id": "1604167042977890311"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1604167037827559424",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkMla_IaMAA2y3p.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1603804653723865088",
            "attachments": {
                "media_keys": [
                    "3_1603804650016485376",
                    "3_1603804649982918656"
                ]
            },
            "text": "Python tip:\n\nPython comes with a built-in drawing library. \nIt provides a virtual canvas on which you can draw with a \"pen\" called turtle. \nThat's where the library got its name - turtle.\nIt was adopted from Logo language and can be a great way to introduce programming to kids.\ud83d\udc47 https://t.co/bZoOwWpFan",
            "edit_history_tweet_ids": [
                "1603804653723865088"
            ],
            "id": "1603804653723865088"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603804650016485376",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkHb1PVaMAAC93H.png"
                },
                {
                    "media_key": "3_1603804649982918656",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkHb1PNaAAA9MlX.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1603442266894258176",
            "id": "1603442266894258176",
            "text": "Python tip:\n\nf-strings are the most popular way to format strings. \nDid you know they can do more than just print out variable values?\n\nFor example, you can do an expression or call a function within them. https://t.co/VlaL2IP5aN",
            "attachments": {
                "media_keys": [
                    "3_1603442262234447872"
                ]
            },
            "edit_history_tweet_ids": [
                "1603442266894258176"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603442262234447872",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkCSPfpVQAANE6x.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1603394198253838336"
            ],
            "text": "Deploying a Django App to Render\n\nhttps://t.co/E7wijPLdYV \n\nAlong with deployment, we'll also look at how to- \n1\u20e3 Configure Postgres\n2\u20e3 Handle static and media files\n3\u20e3 Add a custom domain and enable HTTPS\n\n#Django #WebDev @Render",
            "id": "1603394198253838336",
            "conversation_id": "1603394198253838336"
        }
    },
    {
        "data": {
            "conversation_id": "1603079879356198913",
            "edit_history_tweet_ids": [
                "1603079879356198913"
            ],
            "id": "1603079879356198913",
            "attachments": {
                "media_keys": [
                    "3_1603079875639709696"
                ]
            },
            "text": "Python tip:\n\nWhen you need a counter inside a forloop, you don't need to manually create (and increase) it.\nInstead, you can use enumerate().\n\nThe enumerate() method adds a counter to an iterable and returns the enumerate object. https://t.co/wc9gcm474y"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603079875639709696",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fj9Ip0YVEAA0zn3.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1603027464371978241"
            ],
            "id": "1603027464371978241",
            "text": "Developing a Single Page App with FastAPI and Vue.js \n\nhttps://t.co/erDqB9sPLZ \n\nStep-by-step walkthrough of how to build and containerize a CRUD app with FastAPI, Vue, Docker, and Postgres. You'll wire up token-based auth as well.\n\n(Just updated by @amirtds!\ud83d\udcaa)\n\n#FastAPI #VueJS",
            "conversation_id": "1603027464371978241"
        }
    },
    {
        "data": {
            "text": "Source:\nhttps://t.co/bSIOCfndqL\n\nhttps://t.co/L3nm4dN4Yg",
            "conversation_id": "1602717484955897857",
            "edit_history_tweet_ids": [
                "1602717486004449282"
            ],
            "id": "1602717486004449282"
        }
    },
    {
        "data": {
            "conversation_id": "1602717484955897857",
            "edit_history_tweet_ids": [
                "1602717484955897857"
            ],
            "id": "1602717484955897857",
            "text": "Did you know?\n\nPython was on Mars.\n\nNASA used Python to process images and videos taken during landing."
        }
    },
    {
        "data": {
            "conversation_id": "1602355097119227904",
            "edit_history_tweet_ids": [
                "1602355097119227904"
            ],
            "id": "1602355097119227904",
            "text": "Did you know?\n\nPython is not named after a snake, but after  Monty Python\u2019s Flying Circus, a BBC comedy series from the 1970s. \n\nDjango is not named after a western, but after Django Reinhardt, a Romani-French jazz guitarist."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1601992714182348800"
            ],
            "text": "Python tip:\n\nIf you have two variables pointing to the same object and make a change to one of the variables, the object will change; \n\nthus, the value of the other variable will also change. \ud83d\udc47 https://t.co/n4MdQ4SOxY",
            "id": "1601992714182348800",
            "conversation_id": "1601992714182348800",
            "attachments": {
                "media_keys": [
                    "3_1601992710650351616"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1601992710650351616",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fjtr4fMUUAAcBqO.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1601630336412024833",
            "id": "1601630336412024833",
            "text": "Python tip:\n\nPython identity operator (`is`) and equality operator (`==`) are not the same thing.\n\n`==` compares the value of two objects.\n\n`is` checks if two variables point to the same object in memory. https://t.co/LzQNTV5IYl",
            "attachments": {
                "media_keys": [
                    "3_1601630324273733632"
                ]
            },
            "edit_history_tweet_ids": [
                "1601630336412024833"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1601630324273733632",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjoiS0vUYAAFp2w.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1601267940078518273",
            "attachments": {
                "media_keys": [
                    "3_1601267936403935232"
                ]
            },
            "text": "Python tip:\n\nTuple consumes less memory than a list of the same size \ud83d\udc47 https://t.co/Pl5cvOO97K",
            "edit_history_tweet_ids": [
                "1601267940078518273"
            ],
            "id": "1601267940078518273"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1601267936403935232",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjjYtEuUUAAXt1R.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1600905547498532865"
                ]
            },
            "conversation_id": "1600905552015503362",
            "edit_history_tweet_ids": [
                "1600905552015503362"
            ],
            "id": "1600905552015503362",
            "text": "Python tip:\n\nDon't use pip freeze &gt; requirements.txt.\nYou'll end up with dozens of dependencies you didn't purposefully install and don't know what they do.\n\nInstead, add the requirement manually in requirements.txt. \n\nCompare the two \ud83d\udc47 https://t.co/KzUtoLFBEO"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1600905547498532865",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjePHQ2aMAEtLJD.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1600528067906375681",
            "id": "1600528067906375681",
            "text": "Django tip:\n\nIf you want to create a clickable link in your template, use \"urlize\" filter instead of rendering the same text twice (once for &lt;a&gt; tag and once for text).\n\ud83d\udc47 https://t.co/6q5U5aTRoI",
            "attachments": {
                "media_keys": [
                    "3_1600528063543988233"
                ]
            },
            "edit_history_tweet_ids": [
                "1600528067906375681"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1600528063543988233",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjY3yziVUAkmruu.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1600180775516635137"
            ],
            "text": "Django tip:\n\nIf you want to display alternate text when a variable has no value, you can use \"default\" filter instead of \"if\". \ud83d\udc47 https://t.co/Icl0gKRqTX",
            "attachments": {
                "media_keys": [
                    "3_1600180771310174208"
                ]
            },
            "conversation_id": "1600180775516635137",
            "id": "1600180775516635137"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1600180771310174208",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjT77vJagAAxViR.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1599818383520063488"
                ]
            },
            "conversation_id": "1599818386971631616",
            "edit_history_tweet_ids": [
                "1599818386971631616"
            ],
            "id": "1599818386971631616",
            "text": "Python tip:\n\nYou can set flush=True for the print() function to avoid buffering the output data and forcibly flush it - to see it in the terminal output right away\n\n\ud83d\udc47 https://t.co/PyYlTHbFQj"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599818383520063488",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjOyV_baYAAKl1u.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1599764181258932224",
            "edit_history_tweet_ids": [
                "1599764181258932224"
            ],
            "conversation_id": "1599764181258932224",
            "text": "Automatically Retrying Failed Celery Tasks\n\nhttps://t.co/KNDSZotKVU \n\nCovers how to:\n\n1\u20e3Retry a failed #Celery task (retry method and a decorator argument)\n2\u20e3Use exponential backoff \n3\u20e3Use a class-based task to reuse retry arguments (super cool!)\n\n#Django #Python"
        }
    },
    {
        "data": {
            "conversation_id": "1599456005561389056",
            "edit_history_tweet_ids": [
                "1599456005561389056"
            ],
            "id": "1599456005561389056",
            "attachments": {
                "media_keys": [
                    "3_1599456001781993472"
                ]
            },
            "text": "API security tip:\n\nAdd rate limits to your API - reduce the ability to overwhelm your API with requests and consequently make it non-responsive\n\n\ud83d\udc47 https://t.co/DDQkdm7fHu"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599456001781993472",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjJowmQVEAAkT1J.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1599093611689566209",
            "edit_history_tweet_ids": [
                "1599093611689566209"
            ],
            "id": "1599093611689566209",
            "attachments": {
                "media_keys": [
                    "3_1599093607839191046"
                ]
            },
            "text": "API security tip:\n\nAdd HSTS header to your responses - it instructs the browser to strictly use HTTPS\n\n\ud83d\udc47 https://t.co/oqlE7xIfz7"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599093607839191046",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjEfKfnaUAYzjYK.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1598731224238804993",
            "attachments": {
                "media_keys": [
                    "3_1598731220203864064"
                ]
            },
            "text": "API security tip:\n\nRedirect all HTTP traffic to HTTPS - you don't want to send unencrypted data around\n\n\ud83d\udc47 https://t.co/Cf5wnxAsoi",
            "edit_history_tweet_ids": [
                "1598731224238804993"
            ],
            "id": "1598731224238804993"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598731220203864064",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi_VkweUAAAnAqx.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1598671587015655424",
            "edit_history_tweet_ids": [
                "1598671587015655424"
            ],
            "text": "Serving a Machine Learning Model with FastAPI and Streamlit\n\nhttps://t.co/vKor0Y75bX\n\nServe up a style transfer machine learning model with FastAPI and @StreamLit.\n\nby @amal_ytics \n\n#Python #FastAPI #MachineLearning",
            "conversation_id": "1598671587015655424"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1598368831936028674"
                ]
            },
            "edit_history_tweet_ids": [
                "1598368835744108544"
            ],
            "conversation_id": "1598368835744108544",
            "id": "1598368835744108544",
            "text": "API security tip:\n\nDon't expose the Nginx version in the header - this gives possible attackers information on vulnerabilities of your exact version\n\n\ud83d\udc47 https://t.co/8VuTkN1CK3"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598368831936028674",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi6L---aYAI_INF.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1598338835783491585",
            "edit_history_tweet_ids": [
                "1598338835783491585"
            ],
            "conversation_id": "1598338835783491585",
            "text": "Developing and Testing an Asynchronous API with FastAPI and Pytest \n\nhttps://t.co/SmgsnIb1Ag\n\nLearn how to develop and test an API with FastAPI using Test-driven Development (TDD).\n\n(@amirtds just updated it!! \ud83d\udcaa)\n\n#FastAPI #Testing #Python"
        }
    },
    {
        "data": {
            "id": "1598006449975664640",
            "attachments": {
                "media_keys": [
                    "3_1598006445177393152"
                ]
            },
            "edit_history_tweet_ids": [
                "1598006449975664640"
            ],
            "conversation_id": "1598006449975664640",
            "text": "Python testable code tip:\n\nSeparate your logic from data access and entry points\n\nWhy?\n- fast tests -&gt; use in-memory impl. of data access in tests - as many tests as needed\n- slow tests -&gt; test only happy path when testing whole integration\n- catch wrong usage only by mypy\n\n\ud83d\udc47 https://t.co/yCAaAxe0Xq"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598006445177393152",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi1CZTGVUAAlc6J.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1597946503209037825",
            "id": "1597946503209037825",
            "edit_history_tweet_ids": [
                "1597946503209037825"
            ],
            "text": "Working with Celery and Django Database Transactions\n\nhttps://t.co/5eYiogSPbl \n\nLooks at:\n\n1\u20e3Django DB transactions - autocommit vs. transaction.atomic \n2\u20e3Preventing a Celery task dependent on a database transaction from executing before the commit\n\n#Django"
        }
    },
    {
        "data": {
            "text": "Python testable code tip:\n\nUse same/similar level of abstraction in your tests\n\ne.g., don't mix API and database access\n\n\ud83d\udc47 https://t.co/9yNv9xSmhe",
            "id": "1597644063880400897",
            "edit_history_tweet_ids": [
                "1597644063880400897"
            ],
            "attachments": {
                "media_keys": [
                    "3_1597644057760903169"
                ]
            },
            "conversation_id": "1597644063880400897"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1597644057760903169",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fiv4zkxaMAEnepu.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1597624213887545344",
            "id": "1597624213887545344",
            "text": "Testing Flask Applications with pytest\n\nhttps://t.co/hfiZPLNzwK \n\nThis article details how to:\n\n\ud83d\udd38Write unit and functional tests\n\ud83d\udd38Initialize tests to a known state with test fixtures\n\ud83d\udd38Check code coverage with Coverage .py\n\nby @patkennedy79\n\n#Python #Flask",
            "edit_history_tweet_ids": [
                "1597624213887545344"
            ]
        }
    },
    {
        "data": {
            "text": "Python testable code tip:\n\nKeep signatures of methods simple and implementation independent\n\nWhy?\n- easier refactoring\n- better encapsulation\n- easy to use different implementations\n- ability to use contract tests\n\n\ud83d\udc47 https://t.co/6RON3IJgHl",
            "id": "1597281678388781056",
            "edit_history_tweet_ids": [
                "1597281678388781056"
            ],
            "attachments": {
                "media_keys": [
                    "3_1597281671409111040"
                ]
            },
            "conversation_id": "1597281678388781056"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1597281671409111040",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiqvN6aVEAAa45r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1597226945628213249"
            ],
            "text": "Python Dependency Injection\n\nhttps://t.co/kZDPvMBXTY\n\nLooks at how to use Dependency Injection to decouple and improve the design of a Python application.\n\nby @jangiacomelli\n\n#Python #Programming",
            "id": "1597226945628213249",
            "conversation_id": "1597226945628213249"
        }
    },
    {
        "data": {
            "text": "Python testable code tip:\n\nMake your 3rd party integrations testable by abstracting them behind a simple, replaceable interface\n\nWhy?\n- testable\n- business code is separated from integration - easier &amp; faster testing, no mocking\n- easy to switch to another API\n\n\ud83d\udc47 https://t.co/ll41oNdK53",
            "id": "1596919291185860608",
            "edit_history_tweet_ids": [
                "1596919291185860608"
            ],
            "attachments": {
                "media_keys": [
                    "3_1596919281861636096"
                ]
            },
            "conversation_id": "1596919291185860608"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1596919281861636096",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FilloEJVsAAMzze.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1596556901063733248",
            "edit_history_tweet_ids": [
                "1596556901063733248"
            ],
            "conversation_id": "1596556901063733248",
            "text": "Python testable code tip:\n\nStores should implement behavior, and you should test it with usage as similar to the real one\n\nWhy?\n- tests not touching implementation details\n- better encapsulation \n- easy to replace one implementation with another\n- no need for mocking/patching\n\ud83d\udc47 https://t.co/ejL13QGzaN",
            "attachments": {
                "media_keys": [
                    "3_1596556893811802114"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1596556893811802114",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FigcCTdagAIntaj.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1596194505522548736"
                ]
            },
            "edit_history_tweet_ids": [
                "1596194510455070725"
            ],
            "conversation_id": "1596194510455070725",
            "id": "1596194510455070725",
            "text": "Python testable code tip:\n\nEntities should implement behavior, not just contain data\n\nWhy?\n- testable\n- readable\n- enables refactoring\n- better abstraction\n- better encapsulation\n\n\ud83d\udc47 https://t.co/Zc1ZnoJF0p"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1596194505522548736",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FibSch4aEAAAdWZ.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1595832122220351488"
            ],
            "text": "Python clean test tip:\n\nDifferent outputs should have different tests - even when using parametrize\n\n\ud83d\udc47 https://t.co/4kEsx7XTCH",
            "attachments": {
                "media_keys": [
                    "3_1595832118097383425"
                ]
            },
            "conversation_id": "1595832122220351488",
            "id": "1595832122220351488"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1595832118097383425",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiWI2zhakAEPBm5.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1595469735260323846",
            "attachments": {
                "media_keys": [
                    "3_1595469730638606336"
                ]
            },
            "text": "Python clean test tip:\n\nYour tests should be repeatable in any environment.\n\nThey should be deterministic and always result in the same tests succeeding.\n\n\ud83d\udc47 https://t.co/CTXkcUg7Lh",
            "edit_history_tweet_ids": [
                "1595469735260323846"
            ],
            "id": "1595469735260323846"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1595469730638606336",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiQ_RFCaMAAhxon.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1595107345956077568"
            ],
            "attachments": {
                "media_keys": [
                    "3_1595107342009634816"
                ]
            },
            "id": "1595107345956077568",
            "text": "Python clean test tip:\n\nYour tests should use meaningful data in order to provide examples of how to use your code\n\ne.g. instead of a random string use a real name\n\n\ud83d\udc47 https://t.co/uohU9wBli4",
            "conversation_id": "1595107345956077568"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1595107342009634816",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiL1rSMaEAAALCQ.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1594744953703632896"
                ]
            },
            "conversation_id": "1594744958279221249",
            "edit_history_tweet_ids": [
                "1594744958279221249"
            ],
            "id": "1594744958279221249",
            "text": "Python clean test tip:\n\nMake tests fun.\n\nUse cartoon characters.\n\nUse humour.\n\nUse what you love.\n\n\ud83d\udc47 https://t.co/hzkwdAHsDF"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1594744953703632896",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiGsFgjaEAAYRYm.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Building a Concurrent Web Scraper With Python and Selenium\n\nhttps://t.co/qxyknFCPbU\n\nLooks at how to speed up a Python-based web scraping and crawling script with parallel processing via the multiprocessing library. \n\n#Python #WebScraping #Selenium",
            "conversation_id": "1594689441498599425",
            "edit_history_tweet_ids": [
                "1594689441498599425"
            ],
            "id": "1594689441498599425"
        }
    },
    {
        "data": {
            "conversation_id": "1594382570451795968",
            "id": "1594382570451795968",
            "edit_history_tweet_ids": [
                "1594382570451795968"
            ],
            "attachments": {
                "media_keys": [
                    "3_1594382566383292416"
                ]
            },
            "text": "Python clean test tip:\n\nTests should check the behavior rather than the underlying implementation details.\n\nWhy?\n- easier to understand and maintain\n- more resistant to refactoring\n- closer to real usage\n\n\ud83d\udc47 https://t.co/zBeSUevldM"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1594382566383292416",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiBifylaEAAKQkZ.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Python clean test tip:\n\nA test should not depend on the state of any other tests or external services.\n\n\ud83d\udc47 https://t.co/CeuwG7JmRk",
            "id": "1594020183349551105",
            "edit_history_tweet_ids": [
                "1594020183349551105"
            ],
            "attachments": {
                "media_keys": [
                    "3_1594020178936745985"
                ]
            },
            "conversation_id": "1594020183349551105"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1594020178936745985",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fh8Y6EJUUAEckxg.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Full-text Search in Django with Postgres and Elasticsearch\n\nhttps://t.co/nSHDcSxDFb\n\nJust updated! \ud83d\ude80\n\n\ud83d\udd38Server-side: Python, Django, Django REST Framework,\nPostgres, Elasticsearch\n\ud83d\udd38Client-side: JavaScript, React\n\ud83d\udd38Tools: Docker, Cypress\n\n#Django #Python #WebDev",
            "conversation_id": "1593995343708192769",
            "edit_history_tweet_ids": [
                "1593995343708192769"
            ],
            "id": "1593995343708192769"
        }
    },
    {
        "data": {
            "text": "Python clean test tip:\n\nTests you write should cover:\n\n- all happy paths\n- edge/corner/boundary cases\n- negative test cases\n- security and illegal issues\n\n\ud83d\udc47 https://t.co/mxJOSYV9Ho",
            "id": "1593657800080490497",
            "edit_history_tweet_ids": [
                "1593657800080490497"
            ],
            "attachments": {
                "media_keys": [
                    "3_1593657793633873920"
                ]
            },
            "conversation_id": "1593657800080490497"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1593657793633873920",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fh3PUdsUcAA7-Ou.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1593610254444634116"
            ],
            "id": "1593610254444634116",
            "text": "Asynchronous Tasks with Falcon and Celery\n\nhttps://t.co/c7nYshMzzQ\n\nLooks at how to- \n\n1\u20e3Integrate Celery with the Python-based Falcon web framework. \n2\u20e3Use Docker and Docker Compose to tie everything together\n3\u20e3Test the Celery tasks with unit &amp; integration tests\n\n#Python #WebDev",
            "conversation_id": "1593610254444634116"
        }
    },
    {
        "data": {
            "text": "Python clean test tip:\n\nHide irrelevant data for the test - with pytest you can use fixtures\n\nThis improves readability a lot\n\n\ud83d\udc47 https://t.co/F35vO2wiW5",
            "id": "1593295410919247873",
            "edit_history_tweet_ids": [
                "1593295410919247873"
            ],
            "attachments": {
                "media_keys": [
                    "3_1593295406745587714"
                ]
            },
            "conversation_id": "1593295410919247873"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1593295406745587714",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhyFuxVVEAISc7F.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1593265864400420865",
            "id": "1593265864400420865",
            "edit_history_tweet_ids": [
                "1593265864400420865"
            ],
            "text": "Understanding the Application and Request Contexts in Flask \n\nhttps://t.co/QddEG9AMyT \n\nProvides clarity on how the Application and Request contexts work in Flask.\n\nby @patkennedy79\n\n#Flask #Python"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1592933015591657472"
                ]
            },
            "text": "Python clean test tip:\n\nStructure your tests in an Arrange-Act-Assert way\n\n- Arrange - set-up logic\n- Act - invokes the system you're about to test\n- Assert - verifies that the action of the system under test behaves as expected\n\n\ud83d\udc47 https://t.co/zkoKEXEEYs",
            "conversation_id": "1592933019446177792",
            "edit_history_tweet_ids": [
                "1592933019446177792"
            ],
            "id": "1592933019446177792"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1592933015591657472",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fhs8I1FVIAAzRJN.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1592570630804688896",
            "edit_history_tweet_ids": [
                "1592570630804688896"
            ],
            "attachments": {
                "media_keys": [
                    "3_1592570626836873216"
                ]
            },
            "id": "1592570630804688896",
            "text": "Python clean test tip:\n\nAim for a single assert per test. Tests will be more readable, and it's easier to locate a defect when a test is failing.\n\n\ud83d\udc47 https://t.co/BHetDfYby5"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1592570626836873216",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhnyjBxVQAA4uhh.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1592512988501929986",
            "id": "1592512988501929986",
            "edit_history_tweet_ids": [
                "1592512988501929986"
            ],
            "text": "Pagination in Django\n\nhttps://t.co/0JmYBPS1Ap\n\nLooks at how to add pagination to a Django project.\n\n#Django"
        }
    },
    {
        "data": {
            "id": "1592208242628698112",
            "attachments": {
                "media_keys": [
                    "3_1592208238597971968"
                ]
            },
            "edit_history_tweet_ids": [
                "1592208242628698112"
            ],
            "conversation_id": "1592208242628698112",
            "text": "Python clean test tip:\n\nUse pytest's parametrize decorator when you need multiple cases to prove a single behavior.\n\n\ud83d\udc47 https://t.co/qSmrJPzx8i"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1592208238597971968",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fhio9QYVIAAOTW0.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1592192654380785664"
            ],
            "text": "Flask Stripe Tutorial\n\nhttps://t.co/NqVoaMoTNI\n\nShows how to add Stripe Checkout to a Flask application for accepting one-time payments.\n\n#Flask #Payments @StripeDev",
            "conversation_id": "1592192654380785664",
            "id": "1592192654380785664"
        }
    },
    {
        "data": {
            "text": "Python clean test tip:\n\nClean up resources needed for test after the pytest session is finished -- i.e., drop test database, remove files added to the file system.\n\n\ud83d\udc47 https://t.co/gxGVq49tJW",
            "id": "1591845854780219393",
            "edit_history_tweet_ids": [
                "1591845854780219393"
            ],
            "attachments": {
                "media_keys": [
                    "3_1591845850958815232"
                ]
            },
            "conversation_id": "1591845854780219393"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1591845850958815232",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhdfXhOUYAAUBfA.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1591814788094590979",
            "edit_history_tweet_ids": [
                "1591814788094590979"
            ],
            "conversation_id": "1591814788094590979",
            "text": "Introduction to Django Channels\n\nhttps://t.co/S6nShNNGRH \n\nLearn how to build a real-time application with Django Channels, focusing on how to integrate Django with Django Channels.\n\n#Django"
        }
    },
    {
        "data": {
            "conversation_id": "1591483468256784384",
            "edit_history_tweet_ids": [
                "1591483468256784384"
            ],
            "id": "1591483468256784384",
            "attachments": {
                "media_keys": [
                    "3_1591483464246710272"
                ]
            },
            "text": "Python clean code tip:\n\nChange your module to a package with multiple modules as the complexity and code grows\n\nYou can do that without breaking imports\n\n\ud83d\udc47 https://t.co/hSoO9c0wBo"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1591483464246710272",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhYVx1hVUAAZDur.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1591452060226318337",
            "edit_history_tweet_ids": [
                "1591452060226318337"
            ],
            "id": "1591452060226318337",
            "text": "Just updated the Real-Time Taxi App with Django Channels and Angular course! \ud83d\ude80\n\n\ud83d\udd38Changelog: https://t.co/dzJMxCTxT1\n\ud83d\udd38Code changes: https://t.co/JL5KNVQPCC\n\ud83d\udd38Course: https://t.co/pNGrVOTZI0\n\n#Django #Angular #Docker \ud83d\udc0d \ud83d\udc33"
        }
    },
    {
        "data": {
            "conversation_id": "1591121080873164800",
            "edit_history_tweet_ids": [
                "1591121080873164800"
            ],
            "id": "1591121080873164800",
            "attachments": {
                "media_keys": [
                    "3_1591121076729262081"
                ]
            },
            "text": "Python clean code tip:\n\nUse max() with the key argument to get an object with max value on the attribute\n\n\ud83d\udc47 https://t.co/7ngFg1igL8"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1591121076729262081",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhTMMG0VsAEh6zW.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1591063563723890690",
            "id": "1591063563723890690",
            "edit_history_tweet_ids": [
                "1591063563723890690"
            ],
            "text": "Speeding Up Python with Concurrency, Parallelism, and asyncio\n\nhttps://t.co/1P4LGMX527 \n\n\ud83d\udd38What are concurrency and parallelism?\n\ud83d\udd38Examples of concurrent.futures and asyncio in Python\n\ud83d\udd38How async/await are implemented in .NET, JavaScript, and Rust\n\n#Python #Programming"
        }
    },
    {
        "data": {
            "id": "1590758693078908929",
            "attachments": {
                "media_keys": [
                    "3_1590758689237274627"
                ]
            },
            "edit_history_tweet_ids": [
                "1590758693078908929"
            ],
            "conversation_id": "1590758693078908929",
            "text": "Python clean code tip:\n\nUse timedelta to define duration - e.g., timeouts\n\nWhy?\n\nNo conversion is needed from seconds to e.g. minutes:\n- more readable\n- less likely to set the wrong value\n- tell reader the unit of time\n\n\ud83d\udc47 https://t.co/NsJbXpx0bS"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1590758689237274627",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhOCmYNakAMF_Ah.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1590705247668047877"
            ],
            "text": "Just updated the Real-Time Taxi App with Django Channels and React course! \ud83d\ude80\n\n\ud83d\udd38Changelog: https://t.co/ZoCwQqhQj9\n\ud83d\udd38Code changes: https://t.co/l0MtIBaEIt\n\ud83d\udd38Course: https://t.co/HXTReqcmpb\n\n#Django #ReactJS #Docker \ud83d\udc0d\ud83d\udc33",
            "id": "1590705247668047877",
            "conversation_id": "1590705247668047877"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1590396303317798913"
            ],
            "text": "Python clean code:\n\nAvoid double negatives in your code - e.g., not not_enabled\n\nWhy?\n\nIt hurts readability\n\n\ud83d\udc47 https://t.co/jm2TtNgT6U",
            "attachments": {
                "media_keys": [
                    "3_1590396299320315904"
                ]
            },
            "conversation_id": "1590396303317798913",
            "id": "1590396303317798913"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1590396299320315904",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhI5AgkVUAA1g5Z.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1590348349357830146",
            "edit_history_tweet_ids": [
                "1590348349357830146"
            ],
            "id": "1590348349357830146",
            "text": "Deploying a Django App to Fly\n\nhttps://t.co/SAhP6O03WA\n\nAlong with deploying the Django app, you'll-\n\n1\u20e3Spin up PostgreSQL\n2\u20e3Set up persistent storage via Fly Volumes\n3\u20e3Link a domain name to your app\n3\u20e3Obtain an SSL certificate with Let's Encrypt\n\n#Django @flydotio"
        }
    },
    {
        "data": {
            "id": "1590033915351535617",
            "edit_history_tweet_ids": [
                "1590033915351535617"
            ],
            "attachments": {
                "media_keys": [
                    "3_1590033911459254276"
                ]
            },
            "text": "Python clean code tip:\n\nKeep your entry points (API, Celery jobs, CLI, ...) humble\n\nAbstract logic away from them\n\nWhy?\n- simplify testing\n- easier update to new versions of libraries/frameworks -&gt; they are not touching the business logic\n- more readable\n\n\ud83d\udc47 https://t.co/8516zX05l0",
            "conversation_id": "1590033915351535617"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1590033911459254276",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FhDvawlakAQvObx.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Asynchronous Tasks with Flask and Redis Queue\n\nhttps://t.co/pIH4U0XUcK\n\nThis post looks at how to configure Redis Queue (RQ) to handle long-running tasks in a Flask app.\n\n#WebDev #Python #Flask",
            "id": "1589984798617276416",
            "edit_history_tweet_ids": [
                "1589984798617276416"
            ],
            "conversation_id": "1589984798617276416"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1589671524642217984"
                ]
            },
            "text": "Python clean code tip:\n\nUse .exception() instead of .error() to get traceback logged together with the exception\n\n\ud83d\udc47 https://t.co/QMhb5UWI2U",
            "conversation_id": "1589671528496394241",
            "edit_history_tweet_ids": [
                "1589671528496394241"
            ],
            "id": "1589671528496394241"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1589671524642217984",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fg-l1EfaYAAuwU6.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1589626809850941441",
            "edit_history_tweet_ids": [
                "1589626809850941441"
            ],
            "id": "1589626809850941441",
            "text": "Python 3.11: What's New \n\nhttps://t.co/nddAdOBK22 \n\nby @jangiacomelli \n\nThe most interesting new additions and improvements to the #Python language:\n\n1\u20e3Faster CPython\n2\u20e3Improved type hints\n3\u20e3Better error messages\n4\u20e3Exception notes\n5\u20e3TOML library"
        }
    },
    {
        "data": {
            "conversation_id": "1589309144456081409",
            "attachments": {
                "media_keys": [
                    "3_1589309137787453440"
                ]
            },
            "id": "1589309144456081409",
            "edit_history_tweet_ids": [
                "1589309144456081409"
            ],
            "text": "Python clean code tip:\n\nUse a dictionary to easily switch between different actions instead of IF \n\nVery useful when dealing with enum-like values\n\nWhy?\n- smaller specialized methods for processing\n- one simple path - no branching\n- simple to extend\n\n\ud83d\udc47 https://t.co/ZqkQcdL0hX"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1589309137787453440",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fg5cPYQagAANuWZ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1589274420992172032",
            "id": "1589274420992172032",
            "edit_history_tweet_ids": [
                "1589274420992172032"
            ],
            "text": "Building a CRUD App with FastAPI and MongoDB \n\nhttps://t.co/FCndpMl79f \n\nObjectives:\n\n1\u20e3Develop a RESTful API with Python and #FastAPI\n2\u20e3Interact with @MongoDB asynchronously\n3\u20e3Run MongoDB in the cloud with #MongoDB Atlas\n4\u20e3Deploy a @FastAPI app to Heroku"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1588946747380109315"
                ]
            },
            "edit_history_tweet_ids": [
                "1588946750819426304"
            ],
            "conversation_id": "1588946750819426304",
            "id": "1588946750819426304",
            "text": "Python clean code tip:\n\nUse list comprehensions only for creating new lists - don't use it to replace for loops\n\n\ud83d\udc47 https://t.co/4pqjJwI39G"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588946747380109315",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fg0SpeyakAMwEpE.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1588584363343716353",
            "id": "1588584363343716353",
            "edit_history_tweet_ids": [
                "1588584363343716353"
            ],
            "attachments": {
                "media_keys": [
                    "3_1588584359543836677"
                ]
            },
            "text": "Python clean code tip:\n\nUse a dictionary to remove duplicates from a list and maintain order\n\n\ud83d\udc47 https://t.co/lWjqVuYDxF"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588584359543836677",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvJDu5aEAUVJVY.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1588221976925319168",
            "edit_history_tweet_ids": [
                "1588221976925319168"
            ],
            "attachments": {
                "media_keys": [
                    "3_1588221973192376320"
                ]
            },
            "text": "Python clean code tip:\n\nUse the same concept throughout your code base\n\ne.g., always return Pydantic schema and not a dictionary\n\nWhy?\n- consistency -&gt; readability\n- fewer decisions to make when adding new things\n\n\ud83d\udc47 https://t.co/bJ2RPbNlIZ",
            "conversation_id": "1588221976925319168"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588221973192376320",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fgp_eEiaAAAY6po.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1587859606327287808",
            "edit_history_tweet_ids": [
                "1587859606327287808"
            ],
            "attachments": {
                "media_keys": [
                    "3_1587859585687523328"
                ]
            },
            "text": "Python clean code tip:\n\nAvoid naive datetime objects - use timezone-aware ones instead\n\nUse them always in UTC and only present them to users in their local time zone\n\n\ud83d\udc47 https://t.co/TsXT2KldY0",
            "conversation_id": "1587859606327287808"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1587859585687523328",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fgk14V4akAAVqFG.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1587802722455150596",
            "id": "1587802722455150596",
            "edit_history_tweet_ids": [
                "1587802722455150596"
            ],
            "text": "Working with Static and Media Files in Django\n\nhttps://t.co/NZ5QfpzFSa \n\nThis article looks at how to work with static and media files in a Django project, locally and in production.\n\nby @amal_ytics \n\n#Django"
        }
    },
    {
        "data": {
            "text": "Python clean code tip:\n\nUse tuples to sort by multiple attributes\n\nIt works similarly to sorting strings by alphabet\n\n\ud83d\udc47 https://t.co/PKz6JsBAqf",
            "id": "1587497200439152640",
            "edit_history_tweet_ids": [
                "1587497200439152640"
            ],
            "attachments": {
                "media_keys": [
                    "3_1587497196198322176"
                ]
            },
            "conversation_id": "1587497200439152640"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1587497196198322176",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgfsSf1UYAAF5Ds.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1587425030555795456",
            "edit_history_tweet_ids": [
                "1587425030555795456"
            ],
            "text": "Running Django on DigitalOcean's App Platform \n\nhttps://t.co/679PQNxbna \n\nDigitalOcean's App Platform is a Platform-as-a-Service (PaaS) offering, which (much like Heroku) allows you to deploy an application from a git repository.\n\n#Django #DevOps @DigitalOcean",
            "id": "1587425030555795456"
        }
    },
    {
        "data": {
            "conversation_id": "1587159274593075202",
            "id": "1587159276195282945",
            "text": "Something else? Add it to the comments.\ud83d\udc47",
            "edit_history_tweet_ids": [
                "1587159276195282945"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1587159274593075202",
            "edit_history_tweet_ids": [
                "1587159274593075202"
            ],
            "id": "1587159274593075202",
            "text": "\ud83d\udea8We need your help!\n\nWe're starting to write an advanced Django + HTMX course. We're curious which CSS framework you'd like to see used in the course. \n\nSo, if you were to start a new Django project today, which CSS framework would you use?"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1587134808303730688"
                ]
            },
            "conversation_id": "1587134812191485952",
            "id": "1587134812191485952",
            "edit_history_tweet_ids": [
                "1587134812191485952"
            ],
            "text": "Python clean code tip:\n\nAdd an underscore suffix to your variable/method names when that is shadowing with built-in functions/modules/...\n\nWhy?\n\nTo keep all the context but prevent errors due to shadowing\n\n\ud83d\udc47 https://t.co/ZcqV83OoPL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1587134808303730688",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgaisvuaAAAX9vv.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1587076209489416196"
            ],
            "conversation_id": "1587076209489416196",
            "id": "1587076209489416196",
            "text": "Asynchronous Tasks with Flask and Celery \n\nhttps://t.co/aIo7EQ7MPF \n\nThis post looks at how to configure Celery to handle long-running tasks in a Flask app.\n\n#Flask #WebDev #Python"
        }
    },
    {
        "data": {
            "conversation_id": "1586868952927543296",
            "id": "1586868952927543296",
            "edit_history_tweet_ids": [
                "1586868952927543296"
            ],
            "text": "Just updated the FastAPI TDD course! \ud83d\udc0d\n\n\ud83d\udd38Changelog: https://t.co/CFYzpwGJdm\n\ud83d\udd38Code changes: https://t.co/HjacsK7BaL\n\ud83d\udd38Course: https://t.co/ggQdnFse7C\n\nChanges are minor. Mostly just dependency updates.\n\n10% of profits go back to the FastAPI team! \ud83d\ude80\n\n#FastAPI #Python @tiangolo"
        }
    },
    {
        "data": {
            "text": "Python clean code tip:\n\nDon't allow CORS for all domains - be explicit\n\n\ud83d\udc47 https://t.co/kEaV2Xn1bU",
            "id": "1586772424582131713",
            "edit_history_tweet_ids": [
                "1586772424582131713"
            ],
            "attachments": {
                "media_keys": [
                    "3_1586772420739809281"
                ]
            },
            "conversation_id": "1586772424582131713"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1586772420739809281",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgVZHA2VQAE3T79.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1586718722865201153",
            "edit_history_tweet_ids": [
                "1586718722865201153"
            ],
            "id": "1586718722865201153",
            "text": "Modern Test-Driven Development in Python \nhttps://t.co/bjd4c4IaWI \n\nInterested in how TDD works? \n\nThis guide walks you through the process, using modern tools and techniques, from start to finish.\n\nby @JanGiacomelli\n\n#Python #Testing #TDD #Flask"
        }
    },
    {
        "data": {
            "conversation_id": "1586394939180478464",
            "id": "1586394939180478464",
            "edit_history_tweet_ids": [
                "1586394939180478464"
            ],
            "attachments": {
                "media_keys": [
                    "3_1586394934965604353"
                ]
            },
            "text": "Python clean code tip:\n\nUse join to join multiple string together with desired separator (can be any string)\n\n\ud83d\udc47 https://t.co/Zd1RHEt6vv"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1586394934965604353",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgQBycwakAETzE1.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1586340540282437633",
            "edit_history_tweet_ids": [
                "1586340540282437633"
            ],
            "text": "Django vs. Flask: Which Framework to Choose\n\nhttps://t.co/13pEEnsjj6\n\nLooks at:\n\n\ud83d\udd39Philosophy\n\ud83d\udd39Features\n\ud83d\udd39Security\n\ud83d\udd39Flexibility\n\ud83d\udd39Education\n\ud83d\udd39Open Source\n\ud83d\udd39Hiring\n\ud83d\udd39Use Cases\n\ud83d\udd39Performance\n\n#Django #Flask #Python",
            "id": "1586340540282437633"
        }
    },
    {
        "data": {
            "conversation_id": "1586079148346318848",
            "id": "1586079148346318848",
            "edit_history_tweet_ids": [
                "1586079148346318848"
            ],
            "text": "Just updated the Django TDD course! \ud83d\udc0d\n\n\ud83d\udd38Changelog: https://t.co/2B98ul5M7N\n\ud83d\udd38Code changes: https://t.co/xV4WqkqGA8\n\ud83d\udd38Course: https://t.co/OGxmpKsnfu\n\n(Changes are minor. Mostly just dependency updates.)\n\n#Django #Python #pytest"
        }
    },
    {
        "data": {
            "id": "1586032552514834432",
            "edit_history_tweet_ids": [
                "1586032552514834432"
            ],
            "text": "See DyanamoDB docs: \n\nhttps://t.co/9ZUgcc8yaI",
            "conversation_id": "1586032548903165952"
        }
    },
    {
        "data": {
            "id": "1586032548903165952",
            "edit_history_tweet_ids": [
                "1586032548903165952"
            ],
            "conversation_id": "1586032548903165952",
            "text": "Python clean code tip:\n\nReuse known concepts/approaches when solving your problems\n\nFor example, reuse DyanmoDB last evaluated key for pagination when doing pagination for your postgres queries - keep the concept, keep the naming\n\n\ud83d\udc47 https://t.co/RCrcFhw72p",
            "attachments": {
                "media_keys": [
                    "3_1586032545082155009"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1586032545082155009",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgK4MlPUoAEnAlH.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585963542209245187"
            ],
            "id": "1585963542209245187",
            "text": "Modern Python Environments\n\nhttps://t.co/wHVFK84UBC \n\nLooks at how to simplify:\n\n\ud83d\udd38Python version, dependency, and virtual environment management\n\ud83d\udd38Environments reproducibility\n\nTools: pyenv, venv + pip, venv + pip-tools, Poetry, Pipenv, Docker, Conda\n\nby @jangiacomelli\n\n#Python",
            "conversation_id": "1585963542209245187"
        }
    },
    {
        "data": {
            "text": "Python clean code tip:\n\nExpose minimal needed data on your objects - caller doesn't need to know how you implemented what they need\n\nWhy?\n- better encapsulation\n- easier refactoring\n\n\ud83d\udc47 https://t.co/eJRraMROYR",
            "id": "1585670164221001742",
            "edit_history_tweet_ids": [
                "1585670164221001742"
            ],
            "attachments": {
                "media_keys": [
                    "3_1585670157460205568"
                ]
            },
            "conversation_id": "1585670164221001742"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1585670157460205568",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgFum2JacAAJ2XN.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585629781172932608"
            ],
            "text": "Deploying a Django Application to Elastic Beanstalk\n\nhttps://t.co/P8icK5c1gR \n\nWalks through the process of deploying a production-ready Django application to AWS Elastic Beanstalk.\n\n#Django #Python #AWS",
            "id": "1585629781172932608",
            "conversation_id": "1585629781172932608"
        }
    },
    {
        "data": {
            "id": "1585307774778363905",
            "attachments": {
                "media_keys": [
                    "3_1585307771137687552"
                ]
            },
            "edit_history_tweet_ids": [
                "1585307774778363905"
            ],
            "conversation_id": "1585307774778363905",
            "text": "Python clean code tip:\n\nAvoid checking if the key already exists in a dictionary before using it by using defaultdict\n\n\ud83d\udc47 https://t.co/CKlERHaDwv"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1585307771137687552",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgAlBL5UAAAVRu6.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1585251083680509952",
            "text": "Deploying a Flask App to Render\n\nhttps://t.co/bPaUQFDDMc \n\nProvides a walk-through of how to deploy a Flask app with a Postgres database to production using Render.\n\nby @patkennedy79 \n\n#Python #Flask @Render",
            "edit_history_tweet_ids": [
                "1585251083680509952"
            ],
            "id": "1585251083680509952"
        }
    },
    {
        "data": {
            "id": "1584992905948987392",
            "edit_history_tweet_ids": [
                "1584992905948987392"
            ],
            "conversation_id": "1584992905948987392",
            "text": "Musings on Python Type Hints\n\nhttps://t.co/3phmPVgy5y\n\nby @sgeisenh \n\n#Python"
        }
    },
    {
        "data": {
            "text": "Python clean code tip:\n\nDon't use Any for type hints when the argument must be class\n\nUse type[ClassName] instead\n\nWhy?\n- autocomplete in IDE\n- find issues when type checking not only at run time\n\n\ud83d\udc47 https://t.co/UFpA4fNoIn",
            "id": "1584945392864481282",
            "edit_history_tweet_ids": [
                "1584945392864481282"
            ],
            "attachments": {
                "media_keys": [
                    "3_1584945388901240833"
                ]
            },
            "conversation_id": "1584945392864481282"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1584945388901240833",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ff7bbw3aEAEL-by.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1584882124590845952",
            "id": "1584882124590845952",
            "edit_history_tweet_ids": [
                "1584882124590845952"
            ],
            "text": "Deep Dive into Flask's Application and Request Contexts\n\nhttps://t.co/eRKT5RMt1J\n\nLearn how contexts are processed during request handling in Flask.\n\nby @patkennedy79\n\n#Flask #Python \ud83d\udc0d"
        }
    },
    {
        "data": {
            "conversation_id": "1584582998636101632",
            "id": "1584582998636101632",
            "edit_history_tweet_ids": [
                "1584582998636101632"
            ],
            "attachments": {
                "media_keys": [
                    "3_1584582994878078976",
                    "3_1584582994982973440"
                ]
            },
            "text": "Python clean code tip:\n\nEnforce keyword only-argument with * before the names of your arguments\n\nWhy?\n- to prevent misusage with arguments out of order - the interpreter will raise an exception when positional arguments are used\n\n\ud83d\udc47 https://t.co/YVo9330ugI"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1584582994878078976",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ff2R1p7VIAAj1a8.png"
                },
                {
                    "media_key": "3_1584582994982973440",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ff2R1qUVsAApVaI.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1584524899611131904",
            "edit_history_tweet_ids": [
                "1584524899611131904"
            ],
            "conversation_id": "1584524899611131904",
            "text": "Python Code Quality\n\nhttps://t.co/1eCRkTYCQv\n\nImprove the quality of your Python code with linters, code formatters, and security vulnerability scanners.\n\n1\u20e3What exactly is code quality?\n2\u20e3How do we measure it?\n3\u20e3How do we improve it?\n\nby @jangiacomelli\n\n#Python"
        }
    },
    {
        "data": {
            "conversation_id": "1584220609772670980",
            "id": "1584220609772670980",
            "text": "Python clean code tip:\n\nDon't return a tuple of two objects of the same type from your methods\n\nRather introduce new data structure to return more complex data\n\nWhy?\n\nTo prevent misusage because of switched position - access values by name\n\n\ud83d\udc47 https://t.co/sHnQ1ZW74L",
            "attachments": {
                "media_keys": [
                    "3_1584220605972246529"
                ]
            },
            "edit_history_tweet_ids": [
                "1584220609772670980"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1584220605972246529",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FfxIP2DUcAE6KL7.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1583858222469124096",
            "id": "1583858222469124096",
            "text": "Python clean code tip:\n\nPrefer null/empty/dummy object over null\n\nWhy?\n- avoid IF pollution\n- null doesn't exist in the real world\n\n\ud83d\udc47 https://t.co/fwkfOJWSe0",
            "attachments": {
                "media_keys": [
                    "3_1583858218555432961"
                ]
            },
            "edit_history_tweet_ids": [
                "1583858222469124096"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1583858218555432961",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ffr-qHuUYAEnO5y.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Migrating to a Custom User Model Mid-project in Django\n\nhttps://t.co/8rmo7vMO5f \n\nThis article explains step-by-step how to migrate to a custom User model mid-project in Django.\n\n#Django",
            "id": "1583824838379962370",
            "edit_history_tweet_ids": [
                "1583824838379962370"
            ],
            "conversation_id": "1583824838379962370"
        }
    },
    {
        "data": {
            "text": "Python clean code tip:\n\nUse enumerate when you need to iterate over iterable and have an index at the same time\n\n\ud83d\udc47 https://t.co/NjmGSC3k9t",
            "id": "1583495833814564871",
            "edit_history_tweet_ids": [
                "1583495833814564871"
            ],
            "attachments": {
                "media_keys": [
                    "3_1583495830203293696"
                ]
            },
            "conversation_id": "1583495833814564871"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1583495830203293696",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ffm1EV6UYAArNTG.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1583133450860888064",
            "attachments": {
                "media_keys": [
                    "3_1583133446418726913"
                ]
            },
            "text": "Python clean code tip:\n\nDon\u2019t use random to generate random numbers when you need them to be cryptographically strong\n\nUse secrets instead\n\n\ud83d\udc47 https://t.co/rHch4ue7DQ",
            "edit_history_tweet_ids": [
                "1583133450860888064"
            ],
            "id": "1583133450860888064"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1583133446418726913",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ffhre1HUAAE1a8l.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1583109255036825601",
            "id": "1583109255036825601",
            "edit_history_tweet_ids": [
                "1583109255036825601"
            ],
            "text": "Deploying a Flask Application to Elastic Beanstalk\n\nhttps://t.co/s4QFLGK42h \n\nWalks through the process of deploying a Flask application to AWS Elastic Beanstalk.\n\nby @duplxey\n \n#Flask #Python #AWS"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1582771059358863360"
            ],
            "text": "Python clean code tip:\n\nExpose minimal needed data via your API\n\nWhy?\n- avoid sharing unnecessary data\n- adding fields is non-breaking, removing them is breaking change\n\n\ud83d\udc47 https://t.co/g8v1Xao524",
            "id": "1582771059358863360",
            "conversation_id": "1582771059358863360",
            "attachments": {
                "media_keys": [
                    "3_1582771054665007110"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1582771054665007110",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ffch42oUAAYu9iq.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1582711229629763584"
            ],
            "text": "Deploying a FastAPI Application to Elastic Beanstalk\n\nhttps://t.co/vC10POIyzo \n\nWalks through the process of deploying a FastAPI application to AWS Elastic Beanstalk.\n\nby @duplxey\n\n#FastAPI #Python #AWS @FastAPI",
            "conversation_id": "1582711229629763584",
            "id": "1582711229629763584"
        }
    },
    {
        "data": {
            "conversation_id": "1582408673959505920",
            "id": "1582408673959505920",
            "edit_history_tweet_ids": [
                "1582408673959505920"
            ],
            "attachments": {
                "media_keys": [
                    "3_1582408669328986112"
                ]
            },
            "text": "Python clean code tip:\n\nDon't use string formatting to parametrize queries\n\nUse parameter binding instead\n\nWhy?\n\nTo prevent SQL injection\n\n\ud83d\udc47 https://t.co/XQEHxUAgXs"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1582408669328986112",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FfXYTQDaUAA4cLy.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1582344031316549633",
            "id": "1582344031316549633",
            "edit_history_tweet_ids": [
                "1582344031316549633"
            ],
            "text": "Moving from Flask to FastAPI \n\nhttps://t.co/nwGQhI8v92 \n\nInterested in moving from Flask to FastAPI? This article compares and contrasts common patterns in both Flask and FastAPI.\n\nby @amal_ytics \n\n#Flask #FastAPI #Python"
        }
    },
    {
        "data": {
            "conversation_id": "1582046283987943428",
            "edit_history_tweet_ids": [
                "1582046283987943428"
            ],
            "attachments": {
                "media_keys": [
                    "3_1582046280100220929"
                ]
            },
            "id": "1582046283987943428",
            "text": "Python clean code tip:\n\nUse the simplest possible arguments for your methods\n\nWhy?\n\nYou can pass them directly from your entry points (API, Celery jobs, ...) - no need for unnecessarily loading of complex objects etc.\n\n\ud83d\udc47 https://t.co/DV929jtlp8"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1582046280100220929",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FfSOta-aEAE-lW6.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1581982554030505984",
            "id": "1581982554030505984",
            "text": "Concurrent Web Scraping with Selenium Grid and Docker Swarm \n\nhttps://t.co/QW9od0C0D0\n\nLooks at how to run a Python and Selenium-based web scraper in parallel with Selenium Grid and Docker Swarm on Digital Ocean.\n\n#Python #Selenium #Docker #WebScraping @digitalocean",
            "edit_history_tweet_ids": [
                "1581982554030505984"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1581741325497421825",
            "id": "1581741325497421825",
            "edit_history_tweet_ids": [
                "1581741325497421825"
            ],
            "text": "FastAPI - stable enough for production grade, scalable app? (discussion)\n\nhttps://t.co/mI2oA6e25d\n\n#FastAPI #Python"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1581683891278008320"
                ]
            },
            "edit_history_tweet_ids": [
                "1581683894968995841"
            ],
            "conversation_id": "1581683894968995841",
            "id": "1581683894968995841",
            "text": "Python clean code tip:\n\nUse HTTPStatus for status codes instead of magic numbers\n\n\ud83d\udc47 https://t.co/PpSDQBIYYn"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1581683891278008320",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FfNFHnaVUAAW4ng.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Rapid Prototyping with Django, htmx, and Tailwind CSS \n\nhttps://t.co/77U9GGtmlq \n\nLooks at how to add htmx and Tailwind CSS to Django to reduce the amount of time it takes to create and style an interactive front-end.\n\nby @amal_ytics \n \n#Django #TailwindCSS @htmx_org",
            "id": "1581612056582627328",
            "edit_history_tweet_ids": [
                "1581612056582627328"
            ],
            "conversation_id": "1581612056582627328"
        }
    },
    {
        "data": {
            "conversation_id": "1581321509033107457",
            "edit_history_tweet_ids": [
                "1581321509033107457"
            ],
            "attachments": {
                "media_keys": [
                    "3_1581321504725565441"
                ]
            },
            "id": "1581321509033107457",
            "text": "Python clean code tip:\n\nUse casefold when comparing two strings case insensitive\n\nWhy? \n\nIt removes all case distinctions in strings\n\n\ud83d\udc47 https://t.co/LfzSAvC5iD"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1581321504725565441",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FfH7h8TagAEBgM6.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1581275111155412992",
            "edit_history_tweet_ids": [
                "1581275111155412992"
            ],
            "id": "1581275111155412992",
            "text": "Permissions in Django  \n\nhttps://t.co/cypF3pweMW \n\nLooks at how to leverage Django's default permission system to assign permissions to users and groups.\n\nby @MOluwole\n\n#Python #Django"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1580959116544966656"
                ]
            },
            "conversation_id": "1580959121242587137",
            "id": "1580959121242587137",
            "edit_history_tweet_ids": [
                "1580959121242587137"
            ],
            "text": "Python clean code tip:\n\nUse _ and __ prefixes for non-public methods/functions - all that is not intended for use outside of module/class\n\nWhy?\n- to enable/simplify refactoring\n- to not show them in autocompletes\n- to communicate it's not for external use\n\n\ud83d\udc47 https://t.co/kF3a7PgGaw"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1580959116544966656",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FfCx8LIUAAAgyTM.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1580930708897349632",
            "id": "1580930708897349632",
            "edit_history_tweet_ids": [
                "1580930708897349632"
            ],
            "text": "Running Python in the Browser with WebAssembly from \n\nhttps://t.co/H29h9rDLaH \n\nBuild a Python code editor in the browser using WebAssembly (WASM), via Pyodide, and CodeMirror.\n\nby @amirtds\n\n#Python @Pyodide"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1580596727328841729"
                ]
            },
            "conversation_id": "1580596731170783233",
            "id": "1580596731170783233",
            "edit_history_tweet_ids": [
                "1580596731170783233"
            ],
            "text": "Python clean code tip:\n\nUse decorators to do something before/after your method/function call\n\n\ud83d\udc47 https://t.co/QY1X9V8PTM"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1580596727328841729",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fe9oWWGUoAEHmaY.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Docker for Beginners \n\nhttps://t.co/yntdWvE5RL \n\nProvides an overview of what Docker is, how it's used, and the basic Docker commands, so you can get up and running with Docker quickly.\n\nby @GirlLovesToCode \n\n#Docker @Docker",
            "conversation_id": "1580524418287423491",
            "edit_history_tweet_ids": [
                "1580524418287423491"
            ],
            "id": "1580524418287423491"
        }
    },
    {
        "data": {
            "id": "1580300542827339776",
            "edit_history_tweet_ids": [
                "1580300542827339776"
            ],
            "conversation_id": "1580300542827339776",
            "text": "All The Ways To Introspect Python Objects at Runtime\n\nhttps://t.co/rEcGlIkKzW\n\n#Python"
        }
    },
    {
        "data": {
            "conversation_id": "1580234345004294144",
            "edit_history_tweet_ids": [
                "1580234345004294144"
            ],
            "text": "Python clean code tip:\n\nDon't separate parts of your code with comments\n\nIntroduce new methods instead\n\n\ud83d\udc47 https://t.co/pTsURXIrlG",
            "attachments": {
                "media_keys": [
                    "3_1580234340662771727"
                ]
            },
            "id": "1580234345004294144"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1580234340662771727",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fe4ewqkUAA8fEND.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1580179397432471553",
            "edit_history_tweet_ids": [
                "1580179397432471553"
            ],
            "id": "1580179397432471553",
            "text": "Dockerizing Flask with Postgres, Gunicorn, and Nginx\n\nhttps://t.co/gwYiD3YIiA\n\nThis tutorial details how to configure Flask to run on Docker along with Postgres, Nginx, and Gunicorn.\n\n(Just updated! \ud83d\ude80)\n\n\ud83d\udc0d\ud83d\udc33\n\n#Flask #Python #Docker"
        }
    },
    {
        "data": {
            "conversation_id": "1579871958044246017",
            "id": "1579871958044246017",
            "text": "Python clean code tip:\n\nKeep your API endpoints simple and fast - move all the unnecessary logic to background tasks\n\nWhy?\n- prevent API timeouts\n- enable retries\n- simplify testing (no need for the API to run)\n\n\ud83d\udc47 https://t.co/Qpcoub6Arn",
            "attachments": {
                "media_keys": [
                    "3_1579871953502212096"
                ]
            },
            "edit_history_tweet_ids": [
                "1579871958044246017"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1579871953502212096",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FezVK9MaEAAzweo.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1579828487283965964",
            "text": "Rapid Prototyping with Flask, htmx, and Tailwind CSS \n\nhttps://t.co/Mozm6CzES7 \n\nLooks at how to add htmx and #TailwindCSS to Flask to reduce the amount of time it takes to create and style an interactive front-end.\n\nby @amal_ytics \n \n#Flask @htmx_org",
            "edit_history_tweet_ids": [
                "1579828487283965964"
            ],
            "conversation_id": "1579828487283965964"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1579509570010914824"
            ],
            "text": "Python clean code tip:\n\nAvoid arguments with default values - be explicit\n\nWhy? \n\nThis often results in a working system that is just slightly off the expectation\n\n\ud83d\udc47 https://t.co/w4w3XoNWoX",
            "attachments": {
                "media_keys": [
                    "3_1579509565775024129"
                ]
            },
            "conversation_id": "1579509570010914824",
            "id": "1579509570010914824"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1579509565775024129",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FeuLlNtaEAE1Q9Z.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1579462991921451008",
            "id": "1579462991921451008",
            "edit_history_tweet_ids": [
                "1579462991921451008"
            ],
            "text": "Deploying a Django App to Dokku on a DigitalOcean Droplet \n\nhttps://t.co/wq5yIOkXNA \n\nThis tutorial looks at how to securely deploy a Django application to Dokku on a DigitalOcean droplet.\n\n#Django @DigitalOcean @Dokku"
        }
    },
    {
        "data": {
            "conversation_id": "1579171543724457985",
            "edit_history_tweet_ids": [
                "1579171543724457985"
            ],
            "id": "1579171543724457985",
            "text": "Async Views in Django 3.1\n\nhttps://t.co/r9Khr43Slk\n\nWe refreshed this post, adding a few examples that simulate more of a real-world scenario.\n\n#Django #WebDev"
        }
    },
    {
        "data": {
            "conversation_id": "1579147179934904320",
            "edit_history_tweet_ids": [
                "1579147179934904320"
            ],
            "attachments": {
                "media_keys": [
                    "3_1579147176172625923"
                ]
            },
            "id": "1579147179934904320",
            "text": "Python clean code tip:\n\nDefine abstract class attributes for your mixins\n\n\ud83d\udc47 https://t.co/iJpU6pvNdb"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1579147176172625923",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FepB_XPUoAM3CcU.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1578784795450314753"
            ],
            "text": "Python clean code tip:\n\nUse singledispatch instead of is instance\n\n\ud83d\udc47 https://t.co/8qF2A2f7CO",
            "id": "1578784795450314753",
            "conversation_id": "1578784795450314753",
            "attachments": {
                "media_keys": [
                    "3_1578784789405933569"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1578784789405933569",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fej4ZrVUoAEQdds.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1578736869822853120"
            ],
            "text": "Python Project Workflow\n\nhttps://t.co/uhPiDDx0kk\n\nConfigure GitHub Actions and Poetry to:\n\n1\u20e3run tests for your package  - on every push\n2\u20e3check code quality - on every push\n3\u20e3publish the package to PyPI - on every release\n\nby @jangiacomelli\n \n#Python",
            "conversation_id": "1578736869822853120",
            "id": "1578736869822853120"
        }
    },
    {
        "data": {
            "conversation_id": "1578422405869228033",
            "edit_history_tweet_ids": [
                "1578422405869228033"
            ],
            "attachments": {
                "media_keys": [
                    "3_1578422401242497024"
                ]
            },
            "id": "1578422405869228033",
            "text": "Python clean code tip:\n\nAlways use paginated queries\n\nUse \"last evaluated record\" approach to paginate instead of offset\n\nThis way you limit database load per single query\n\n\ud83d\udc47 https://t.co/IijPkjg2Cu"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1578422401242497024",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Feeuz6OUAAA2nwI.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1578378868746067968",
            "edit_history_tweet_ids": [
                "1578378868746067968"
            ],
            "text": "Developing a Single Page App with FastAPI and React \n\nhttps://t.co/09k3RMp4wQ \n\nLearn how to:\n\n\ud83d\udd38Develop a RESTful API with #Python and \n@FastAPI\n\ud83d\udd38Manage state operations with #React Context API and Hooks\n\ud83d\udd38Connect a React frontend to a FastAPI backend",
            "id": "1578378868746067968"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1578060019412500485"
            ],
            "text": "Python clean code tip:\n\nAvoid doing things in only one environment (e.g., production because of rate limits of external API)\n\nRather use interface and dummy implementation together with mapping\n\n\ud83d\udc47 https://t.co/CjejIxSMBx",
            "attachments": {
                "media_keys": [
                    "3_1578060015255945222"
                ]
            },
            "conversation_id": "1578060019412500485",
            "id": "1578060019412500485"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1578060015255945222",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FeZlOROUAAYgerR.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1578005348069376000",
            "edit_history_tweet_ids": [
                "1578005348069376000"
            ],
            "id": "1578005348069376000",
            "text": "Building a CRUD App with FastAPI, MongoDB, and Beanie ODM\n\nhttps://t.co/zqUlU9SBfh \n\n#FastAPI @roman_the_right @FastAPI #Python"
        }
    },
    {
        "data": {
            "id": "1577697630519709696",
            "edit_history_tweet_ids": [
                "1577697630519709696"
            ],
            "attachments": {
                "media_keys": [
                    "3_1577697625645936640"
                ]
            },
            "text": "Python Clean Code Tip:\n\nUse __post_init__ hook when working with dataclasses to apply preconditions to ensure the integrity of your objects.\n\n\ud83d\udc47 https://t.co/csnGldxt1M",
            "conversation_id": "1577697630519709696"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1577697625645936640",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FeUboauacAAIWhj.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1577671339552526336",
            "text": "https://t.co/CorvtIFYqG",
            "edit_history_tweet_ids": [
                "1577671343092518917"
            ],
            "id": "1577671343092518917"
        }
    },
    {
        "data": {
            "conversation_id": "1577671339552526336",
            "edit_history_tweet_ids": [
                "1577671341532217346"
            ],
            "id": "1577671341532217346",
            "text": "https://t.co/68pYPl84QK"
        }
    },
    {
        "data": {
            "conversation_id": "1577671339552526336",
            "edit_history_tweet_ids": [
                "1577671339552526336"
            ],
            "text": "Building a Single Page Application with Python and Pyodide - Part 1 \n\nhttps://t.co/jyhxXM4Nr2\n\nCreate an application that fetches data from a remote file, manipulates the data with Pandas, and renders it in the browser.\n\nby @amirtds\n\n#Python @Pyodide #Pandas",
            "id": "1577671339552526336"
        }
    },
    {
        "data": {
            "id": "1577335241123180544",
            "attachments": {
                "media_keys": [
                    "3_1577335236891148288"
                ]
            },
            "text": "Python clean code tip:\n\nAvoid using ambiguous abbreviations\n\nDon't try to come up with your own abbreviations. It's better for a variable to have a longer name than a confusing name.\n\n\ud83d\udc47 https://t.co/ZSOCdRYHuw",
            "edit_history_tweet_ids": [
                "1577335241123180544"
            ],
            "conversation_id": "1577335241123180544"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1577335236891148288",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FePSCnaagAAq2RA.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1577301224390594560",
            "edit_history_tweet_ids": [
                "1577301224390594560"
            ],
            "conversation_id": "1577301224390594560",
            "text": "Parallelism, Concurrency, and AsyncIO in Python - by example\n\nhttps://t.co/1vUrkMMz6a\n\nLooks at how to speed up CPU-bound and IO-bound operations with multiprocessing, threading, and AsyncIO and when you should use each.\n\nby @amal_ytics \n\n#Python"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1576972853815414785"
            ],
            "text": "Python Clean Code Tip:\n\nDon't use \"magic numbers\".\n\nMagic numbers are strange numbers that appear in code that do not have a clear meaning.\n\n\ud83d\udc47 https://t.co/Z9iTZABeA0",
            "id": "1576972853815414785",
            "conversation_id": "1576972853815414785",
            "attachments": {
                "media_keys": [
                    "3_1576972850241490948"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1576972850241490948",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FeKIc78UUAQwPek.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1576937692016758795",
            "edit_history_tweet_ids": [
                "1576937692016758795"
            ],
            "id": "1576937692016758795",
            "text": "Deep Dive Into Flask Guide\n\nhttps://t.co/RhZSpml9OX\n\nCovers topics like:\n\n1\u20e3The Application and Request Contexts\n2\u20e3Werkzeug\n3\u20e3Sessions\n4\u20e3Security\n5\u20e3Testing\n6\u20e3Asynchronous route handlers\n\nDeveloped by \n@patkennedy79\n\n#Flask @PalletsTeam"
        }
    },
    {
        "data": {
            "conversation_id": "1576610465211625475",
            "edit_history_tweet_ids": [
                "1576610465211625475"
            ],
            "attachments": {
                "media_keys": [
                    "3_1576610460996362240"
                ]
            },
            "id": "1576610465211625475",
            "text": "Python Clean Code Tip:\n\nKeep your arguments at a minimum.\nIdeally, your functions should only have one to two arguments. If you need to provide more arguments to the function, you can create a config object which you pass to the function or split it into multiple functions.\n\n\ud83d\udc47 https://t.co/xV5rBLscWe"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1576610460996362240",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FeE-3GzaYAAh3dF.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1576248072903876609"
                ]
            },
            "edit_history_tweet_ids": [
                "1576248077308104705"
            ],
            "conversation_id": "1576248077308104705",
            "id": "1576248077308104705",
            "text": "Python Clean Code Tip:\n\nFunctions should only perform a single task\nHint: If your function contains the keyword 'and', you can probably split it into two functions.\n\n\ud83d\udc47 https://t.co/Ajd2eNVYIo"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1576248072903876609",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fd_1RV9UYAE_axz.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1575885686682460164"
                ]
            },
            "conversation_id": "1575885690604240897",
            "edit_history_tweet_ids": [
                "1575885690604240897"
            ],
            "id": "1575885690604240897",
            "text": "Python Clean Code Tip:\n\nDon't add redundant context.\n\nDo not add unnecessary data to variable names, especially if you're working with classes.\n\n\ud83d\udc47 https://t.co/xGeyQV8wu4"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1575885686682460164",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fd6rrsFUoAQTwYE.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Working with Django and Celery\n\nhttps://t.co/viiR7OAsSs\n\nGuide:\n\n1\u20e3 Asynchronous Tasks with Django and Celery\n2\u20e3 Periodic Tasks in Django with Celery and Docker\n3\u20e3 Automatically Retrying Failed Celery Tasks\n4\u20e3 Working with Celery and Database Transactions\n\n#Django #Celery",
            "id": "1575863258396794880",
            "edit_history_tweet_ids": [
                "1575863258396794880"
            ],
            "conversation_id": "1575863258396794880"
        }
    },
    {
        "data": {
            "conversation_id": "1575550713001758720",
            "edit_history_tweet_ids": [
                "1575550713001758720"
            ],
            "text": "Refurb\n\nhttps://t.co/AOtVa7vcuz\n\nA tool for refurbishing and modernizing Python codebases.\n\n#Python",
            "id": "1575550713001758720"
        }
    },
    {
        "data": {
            "conversation_id": "1575523302038470657",
            "edit_history_tweet_ids": [
                "1575523302038470657"
            ],
            "text": "Python Clean Code Tip:\n\nDon't use flags in functions.\nFlags are variables passed to functions, which the function uses to determine its behavior. \n\nThis should be avoided - functions should only perform a single task. \n\nSplit your function into smaller functions.\n\n\ud83d\udc47 https://t.co/OptYvMyC0X",
            "attachments": {
                "media_keys": [
                    "3_1575523297445711872"
                ]
            },
            "id": "1575523302038470657"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1575523297445711872",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fd1iF2-akAAgyNV.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1575480526357483520",
            "edit_history_tweet_ids": [
                "1575480526357483520"
            ],
            "conversation_id": "1575480526357483520",
            "text": "The Complete Python Development Guide\n\nhttps://t.co/816EWFyrnD\n\nWant to take your Python development to the next level?\n\nDevelop Python apps with confidence by mastering the tools needed to ship well-tested, high-quality code.\n\nby @jangiacomelli\n\n#Python"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1575160914135089152"
            ],
            "text": "Python Clean Code Tip:\n\nCheck the quality of your code inside your CI pipeline.\n\n- flake8 - style guide enforcer\n- black - code formatting\n- isort - optimize imports\n- bandit - check for security vulnerabilities\n- safety - check for security vulnerabilities of dependencies\n\n\ud83d\udc47 https://t.co/sUCK1T0n7Z",
            "attachments": {
                "media_keys": [
                    "3_1575160909953400832"
                ]
            },
            "conversation_id": "1575160914135089152",
            "id": "1575160914135089152"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1575160909953400832",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdwYgIXagAAuvX1.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1575110967847178241"
            ],
            "id": "1575110967847178241",
            "text": "Pytest for Beginners \n\nhttps://t.co/7jcvHLYtVD \n\nThis article looks at the very basics of using pytest for testing Python code.\n\nby @GirlLovesToCode \n\n#Python #pytest @pytestdotorg",
            "conversation_id": "1575110967847178241"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1574798523630903297"
                ]
            },
            "edit_history_tweet_ids": [
                "1574798528345300994"
            ],
            "conversation_id": "1574798528345300994",
            "id": "1574798528345300994",
            "text": "Python Clean Code Tip:\n\nUse dataclasses when only storing attributes inside your class instances to reduce the amount of boilerplate code.\n\n\ud83d\udc47 https://t.co/5e831gEX58"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1574798523630903297",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdrO6eHUYAEQxrt.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1574758821234610182",
            "id": "1574758821234610182",
            "edit_history_tweet_ids": [
                "1574758821234610182"
            ],
            "text": "Testing Pinia Data Stores in Vue \n\nhttps://t.co/3PwULJokb8 \n\nThis tutorial describes how to test Pinia data stores in a Vue application.\n\nby @patkennedy79 \n\n#VueJS #Pinia"
        }
    },
    {
        "data": {
            "conversation_id": "1574436137002999808",
            "attachments": {
                "media_keys": [
                    "3_1574436133383311360"
                ]
            },
            "text": "Python Clean Code Tip:\n\nUse sum to sum the values of all elements inside an iterable instead of a for loop.\nWhy?\nDon't re-invent the wheel!\nsum is much faster\n\ud83d\udc47 https://t.co/1HNSeJwBye",
            "edit_history_tweet_ids": [
                "1574436137002999808"
            ],
            "id": "1574436137002999808"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1574436133383311360",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdmFUlPaEAAgW2U.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1574390205481881600"
            ],
            "id": "1574390205481881600",
            "text": "\ud83e\udd73 \nFrom now on you can follow us on LinkedIn as well\n\ud83e\udd73 \n\nhttps://t.co/GRppZ2Qz6x",
            "conversation_id": "1574390205481881600"
        }
    },
    {
        "data": {
            "conversation_id": "1574073749414244352",
            "id": "1574073749414244352",
            "edit_history_tweet_ids": [
                "1574073749414244352"
            ],
            "attachments": {
                "media_keys": [
                    "3_1574073745861287937"
                ]
            },
            "text": "Python Clean Code Tip:\n\nUse __all__ to define exported members of your package.\n\nHint: IDEs will do a much better job at importing and autocomplete.\n\n\ud83d\udc47 https://t.co/xn4zZf2uZO"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1574073745861287937",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fdg7u2hUoAE7mBM.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1573712356537819136",
            "text": "Building a Flask API with APIFairy   \n\nhttps://t.co/dqCWbcFnvu \n\nby @patkennedy79 \n\n#Flask #Python #WebDev",
            "edit_history_tweet_ids": [
                "1573712356537819136"
            ],
            "conversation_id": "1573712356537819136"
        }
    },
    {
        "data": {
            "conversation_id": "1573711364433924097",
            "edit_history_tweet_ids": [
                "1573711364433924097"
            ],
            "text": "Python Clean Code Tip:\n\nUse chained comparison when you need to check whether some variable is between MIN and MAX values.\n\n\ud83d\udc47 https://t.co/qBtHHx1MvV",
            "attachments": {
                "media_keys": [
                    "3_1573711360831401984"
                ]
            },
            "id": "1573711364433924097"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1573711360831401984",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdbyJRFaMAAkA8X.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1573348987549396992",
            "edit_history_tweet_ids": [
                "1573348987549396992"
            ],
            "text": "Python Clean Code Tip:\n\nUse operator overloading to enable the usage of operators such as +, -, /, *, ... on your instances.\n\n\ud83d\udc47 https://t.co/YG5SqxeDfH",
            "attachments": {
                "media_keys": [
                    "3_1573348983824871424"
                ]
            },
            "id": "1573348987549396992"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1573348983824871424",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdWokJiacAA3QMe.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1573145851781857281"
            ],
            "text": "What is Python's \"self\" Argument, Anyway?\n\nhttps://t.co/Bvc7MhYg0M\n\nby @Martin_Heinz_ \n\n#Python",
            "conversation_id": "1573145851781857281",
            "id": "1573145851781857281"
        }
    },
    {
        "data": {
            "conversation_id": "1572986594264780800",
            "edit_history_tweet_ids": [
                "1572986594264780800"
            ],
            "attachments": {
                "media_keys": [
                    "3_1572986590192107522"
                ]
            },
            "id": "1572986594264780800",
            "text": "Python Clean Code Tip:\n\nUse preconditions to ensure the integrity of your objects.\n\n\ud83d\udc47 https://t.co/sptB3JuiCU"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572986590192107522",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdRe-EDagAIVx3h.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1572624198396411907",
            "edit_history_tweet_ids": [
                "1572624198396411907"
            ],
            "conversation_id": "1572624198396411907",
            "text": "Python Clean Code Tip:\n\nWhen your module becomes too big you can restructure it to a package while keeping all the imports from the module as they were.\n\n\ud83d\udc47 https://t.co/JMulQ3noYJ",
            "attachments": {
                "media_keys": [
                    "3_1572624194265059329"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572624194265059329",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdMVX2BakAEzoxH.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1572279262505275392"
            ],
            "conversation_id": "1572279262505275392",
            "id": "1572279262505275392",
            "text": "Heroku Alternatives for Python-based Applications \n\nhttps://t.co/TW3Z4zJghc \n\nLearn what the best Heroku alternatives (and their pros and cons) are."
        }
    },
    {
        "data": {
            "conversation_id": "1572261811491336193",
            "attachments": {
                "media_keys": [
                    "3_1572261807657742336"
                ]
            },
            "text": "Python Clean Code Tip:\n\nUse HTTPStatus from http (it's inside the standard library) to avoid \"magic\" numbers for statuses inside your code.\n\n\ud83d\udc47 https://t.co/Tm0S1CUIhX",
            "edit_history_tweet_ids": [
                "1572261811491336193"
            ],
            "id": "1572261811491336193"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572261807657742336",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdHLyKtacAAxENZ.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1571899418487721991"
                ]
            },
            "edit_history_tweet_ids": [
                "1571899422510043139"
            ],
            "conversation_id": "1571899422510043139",
            "id": "1571899422510043139",
            "text": "Python Clean Code Tip:\n\nAvoid using the variable/parameter type inside your variable/parameter name. Use type hints instead.\n\n\ud83d\udc47 https://t.co/W0fSkoMfHr"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571899418487721991",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdCCMV2akAc93mt.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Building a Single Page Application with Python and Pyodide - Part 1 \n\nhttps://t.co/jyhxXM4Nr2\n\nCreate an application that fetches data from a remote file, manipulates the data with Pandas, and renders it in the browser\n\nby @amirtds\n  \n#Python @Pyodide #Pandas",
            "id": "1571858748649472000",
            "edit_history_tweet_ids": [
                "1571858748649472000"
            ],
            "conversation_id": "1571858748649472000"
        }
    },
    {
        "data": {
            "conversation_id": "1571537034745090051",
            "attachments": {
                "media_keys": [
                    "3_1571537030429151233"
                ]
            },
            "id": "1571537034745090051",
            "edit_history_tweet_ids": [
                "1571537034745090051"
            ],
            "text": "Python Clean Code Tip:\n\nUse *in* to check whether an iterable contains a specific element.\n\n\ud83d\udc47 https://t.co/8bSXrqsKO6"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571537030429151233",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc84mlIaEAEokJ4.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1571174646816591872",
            "attachments": {
                "media_keys": [
                    "3_1571174642664214529"
                ]
            },
            "text": "Python Clean Code Tip:\n\nUse upper case names for constants\n\n\ud83d\udc47 https://t.co/nZq7dSHiDQ",
            "edit_history_tweet_ids": [
                "1571174646816591872"
            ],
            "conversation_id": "1571174646816591872"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571174642664214529",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc3vA1gaEAEiqPl.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571135103824441344"
            ],
            "id": "1571135103824441344",
            "text": "Developing an API with FastAPI and GraphQL\n\nhttps://t.co/Jb224jxBRi\n\nby @MOluwole\n\nCovers how to:\n\n1\u20e3Use the Orator ORM to interact with a Postgres database\n2\u20e3Integrate #GraphQL into a #FastAPI app with Graphene\n3\u20e3Test a GraphQL API with #pytest\n\n#Python",
            "conversation_id": "1571135103824441344"
        }
    },
    {
        "data": {
            "conversation_id": "1570812261027180544",
            "attachments": {
                "media_keys": [
                    "3_1570812256455393280"
                ]
            },
            "id": "1570812261027180544",
            "edit_history_tweet_ids": [
                "1570812261027180544"
            ],
            "text": "Python Clean Code Tip:\n\nAvoid empty except blocks -&gt; try-except-pass.\n\nThey lead to hard-to-find bugs.\n\n\ud83d\udc47 https://t.co/3fJWU2HFxy"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570812256455393280",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcylbLragAAxrf_.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1570776604200275969",
            "text": "CSRF Protection in Flask\n\nhttps://t.co/o8SoMpmpBh\n\nThis article looks at how to prevent CSRF attacks in Flask. \n\n1\u20e3What is CSRF?\n2\u20e3What does a CSRF attack look like?\n3\u20e3How can you prevent CSRF attacks?\n\nby @amal_ytics \n\n#Flask #Python #WebDev",
            "edit_history_tweet_ids": [
                "1570776604200275969"
            ],
            "id": "1570776604200275969"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1570449867235000320"
                ]
            },
            "text": "Python Clean Code Tip:\n\nAvoid using too many attributes on a single object. Try to cluster them to improve cohesion, reduce coupling, and improve readability\n\n\ud83d\udc47 https://t.co/N9kIRiGMV7",
            "conversation_id": "1570449871060242434",
            "edit_history_tweet_ids": [
                "1570449871060242434"
            ],
            "id": "1570449871060242434"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570449867235000320",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fctb1WoaAAAyRVY.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1570087484461314050",
            "edit_history_tweet_ids": [
                "1570087484461314050"
            ],
            "attachments": {
                "media_keys": [
                    "3_1570087479428120576"
                ]
            },
            "text": "Python Clean Code Tip:\n\nAvoid setting attributes of your objects outside of the constructor. Instead, implement methods that map to real-world concepts.\n\nWhy?\nTo ensure attributes exist and are easily discoverable.\n\n\ud83d\udc47 https://t.co/pEuDpAADyt",
            "conversation_id": "1570087484461314050"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570087479428120576",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcoSPm2aAAA3ljt.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1570057222796738560",
            "id": "1570057222796738560",
            "edit_history_tweet_ids": [
                "1570057222796738560"
            ],
            "text": "Coupling Flask with a front-end framework like #React, #Vue, or #Svelte? \n\nUse session cookies for auth (even cross-domain).\n\nWhy?\n\n1\u20e3It's easier\n2\u20e3It's safer than using JWTs and localStorage\n\nhttps://t.co/ajwMmAq9o9\n\nby @pydantic\n\n#Flask"
        }
    },
    {
        "data": {
            "text": "Python Clean Code Tip:\n\nAvoid using floats when you need precise results. Use Decimal instead.\ne.g. prices\n\n\ud83d\udc47 https://t.co/NKgJm0cpJm",
            "id": "1569725114341814272",
            "edit_history_tweet_ids": [
                "1569725114341814272"
            ],
            "attachments": {
                "media_keys": [
                    "3_1569725110336241664"
                ]
            },
            "conversation_id": "1569725114341814272"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569725110336241664",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcjIq8yaQAARoQP.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1569671542329466882",
            "id": "1569671542329466882",
            "text": "Python Type Checking\n\nUse type hints to annotate expected types for variables, function parameters, and function returns.\n\nhttps://t.co/gMM2e0rbfB\n\n1\u20e3What is type checking?\n2\u20e3Why do we need it?\n3\u20e3What's the difference between static and runtime type checking?\n\nby @JanGiacomelli",
            "edit_history_tweet_ids": [
                "1569671542329466882"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1569362707450843136",
            "id": "1569362707450843136",
            "text": "Python Clean Code Tip:\n\nBe consistent with the order of parameters for similar functions/methods.\n\nDon't confuse your readers.\n\n\ud83d\udc47 https://t.co/RIjCuLovZq",
            "attachments": {
                "media_keys": [
                    "3_1569362703495602176"
                ]
            },
            "edit_history_tweet_ids": [
                "1569362707450843136"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569362703495602176",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fcd_EGGaIAA7KNL.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1569316977449074689"
            ],
            "text": "The Definitive Guide to Celery and FastAPI - new course!\n\nhttps://t.co/NBtVrzNZfZ\n\nLearn how to add Celery to a FastAPI application to provide asynchronous task processing.\n\nJust updated! \ud83d\ude80\ud83d\udcaa\u2728\n\n10% of profits go back to the @FastAPI team! \ud83d\ude80\n\n#FastAPI #Python",
            "id": "1569316977449074689",
            "conversation_id": "1569316977449074689"
        }
    },
    {
        "data": {
            "conversation_id": "1569000321976004608",
            "edit_history_tweet_ids": [
                "1569000321976004608"
            ],
            "attachments": {
                "media_keys": [
                    "3_1569000316582137857"
                ]
            },
            "id": "1569000321976004608",
            "text": "Python Clean Code Tip:\n\nUse min to find an element with minimal value inside an iterable. You can provide a custom function as a key argument to serve as a key for the min comparison\n\n\ud83d\udc47 https://t.co/C10wZo7XJb"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569000316582137857",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcY1eZpakAEyIDu.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1568971797508362240",
            "edit_history_tweet_ids": [
                "1568971797508362240"
            ],
            "id": "1568971797508362240",
            "text": "Securing FastAPI with JWT Token-based Authentication\n\nhttps://t.co/u8Tkva1fIY\n\nLooks at how to enable authentication using  PyJWT to sign, encode, and decode JSON Web Tokens.\n\n#FastAPI"
        }
    },
    {
        "data": {
            "id": "1568637949184712708",
            "edit_history_tweet_ids": [
                "1568637949184712708"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568637944520671232"
                ]
            },
            "text": "Python Clean Code Tip:\n\nFavor real objects over primitive types such as dictionaries.\n\nWhy?\n\nIt's easier to type https://t.co/KhyjYCFNSh rather than user['name']\nYou'll get help from your IDE\nYou can actually check your code before it runs with mypy\nIt makes your code more clear https://t.co/bAkXMqpBma",
            "conversation_id": "1568637949184712708"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568637944520671232",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcTr5khagAAgtyn.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1568584107147366400"
            ],
            "text": "Documenting Python Code and Projects\n\nhttps://t.co/TRhb7ypNSo\n\nThis article answers these questions:\n\n1\u20e3Why do you need to document your Python code\n2\u20e3What should your project documentation include?\n3\u20e3How do you write and generate documentation?\n\nby @JanGiacomelli\n\n#Python",
            "id": "1568584107147366400",
            "conversation_id": "1568584107147366400"
        }
    },
    {
        "data": {
            "conversation_id": "1568275546538405889",
            "attachments": {
                "media_keys": [
                    "3_1568275541010321410"
                ]
            },
            "text": "Python Clean Code Tip:\n\nAvoid storing things like secret keys, passwords, connection strings, and API keys inside your code. Instead, use a secrets management solution like AWS Secrets Manager or Vault\n\n\ud83d\udc47 https://t.co/G6OnIDfa7M",
            "edit_history_tweet_ids": [
                "1568275546538405889"
            ],
            "id": "1568275546538405889"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568275541010321410",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcOiS6PakAIrc0i.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1568233412242055168"
            ],
            "text": "Coupling Django with a front-end framework like #React, #Vue, or #Angular? \n\nUse session cookies for auth (even cross-domain).\n\nWhy?\n\n\ud83d\udd38It's easier since Django has a powerful built-in auth framework\n\ud83d\udd38It's safer than using JWTs and localStorage\n\nhttps://t.co/Yg4XmTs5Bd\n\n#Django",
            "conversation_id": "1568233412242055168",
            "id": "1568233412242055168"
        }
    },
    {
        "data": {
            "conversation_id": "1567913157418696704",
            "edit_history_tweet_ids": [
                "1567913157418696704"
            ],
            "text": "Python Clean Code Tip:\n\nUse docstrings to document usage of your modules, classes, and functions\n\n\ud83d\udc47 https://t.co/Zxps7k4p9o",
            "attachments": {
                "media_keys": [
                    "3_1567913153086001152"
                ]
            },
            "id": "1567913157418696704"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567913153086001152",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcJYtKBakAANIA8.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567883529505095680",
            "id": "1567883529505095680",
            "text": "Wondering which authentication method to choose for your application?\n\nCheck out this list of web authentication methods with pros and cons and possible vulnerabilities for each.\n\nby @amal_ytics\n\nhttps://t.co/VjbJv0gh0f\n\n#Python #CyberSecurity #JavaScript",
            "edit_history_tweet_ids": [
                "1567883529505095680"
            ]
        }
    },
    {
        "data": {
            "id": "1567550786242215936",
            "attachments": {
                "media_keys": [
                    "3_1567550780919660544"
                ]
            },
            "text": "Python clean code tip:\n\nUse Protocol to define the interface required by your function/method instead of using real objects. \n\nThis way, your function/method defines what it needs.\n\n\ud83d\udc47 https://t.co/YGhjaJIDsz",
            "edit_history_tweet_ids": [
                "1567550786242215936"
            ],
            "conversation_id": "1567550786242215936"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567550780919660544",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcEPIUgaQAAhsZW.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567487739527925762",
            "edit_history_tweet_ids": [
                "1567487739527925762"
            ],
            "id": "1567487739527925762",
            "text": "Continuous Delivery in an Agile World \n\nhttps://t.co/xjB5rbxFPn \n\nCovers:\n\n1\u20e3What's Continuous Delivery?\n2\u20e3Why is it a competitive advantage?\n3\u20e3What does the process look like?\n\nby @gasparevitta\n\n#DevOps"
        }
    },
    {
        "data": {
            "id": "1567188381981089792",
            "attachments": {
                "media_keys": [
                    "3_1567188377379966983"
                ]
            },
            "text": "Python clean code tip:\n\nUse enums to group related constants.\nWhy?\nAutocomplete\nStatic type checking\n\ud83d\udc47 https://t.co/AEq7pfuOGN",
            "edit_history_tweet_ids": [
                "1567188381981089792"
            ],
            "conversation_id": "1567188381981089792"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567188377379966983",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb_FhqHakActB8z.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567152979442016260",
            "id": "1567152979442016260",
            "edit_history_tweet_ids": [
                "1567152979442016260"
            ],
            "text": "Using Hypothesis and Schemathesis to Test FastAPI \n\nhttps://t.co/SkG1dS9zkf \n\nby @amal_ytics\n\n#FastAPI #Testing"
        }
    },
    {
        "data": {
            "text": "Python clean code tip:\n\nUse contract testing when you want to verify the same behavior for different implementations.\n\n\ud83d\udc47 https://t.co/DWMus5Btvk",
            "id": "1566825995415392257",
            "edit_history_tweet_ids": [
                "1566825995415392257"
            ],
            "attachments": {
                "media_keys": [
                    "3_1566825990394826753"
                ]
            },
            "conversation_id": "1566825995415392257"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566825990394826753",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb5779ZVUAErTgE.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1566463605175754754"
            ],
            "text": "Python clean test tip:\n\nA test should not depend on the state of any other tests or external services.\n\n\ud83d\udc47 https://t.co/LWCdU7KuEg",
            "id": "1566463605175754754",
            "conversation_id": "1566463605175754754",
            "attachments": {
                "media_keys": [
                    "3_1566463600897581056"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566463600897581056",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb0yWHUUYAAXbQz.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Adding Social Authentication to Django\n\nhttps://t.co/eAbbGKCbow\n\nLooks at how to add social auth to a Django app with Django Allauth.\n\nby @amal_ytics\n\n#Django #Python #WebDev",
            "conversation_id": "1566441070581485568",
            "edit_history_tweet_ids": [
                "1566441070581485568"
            ],
            "id": "1566441070581485568"
        }
    },
    {
        "data": {
            "id": "1566101217570222080",
            "attachments": {
                "media_keys": [
                    "3_1566101212747145217"
                ]
            },
            "text": "Python clean test tip:\n\nFor the most part, the tests you write should cover:\nall happy paths\nedge/corner/boundary cases\nnegative test cases\nsecurity and illegal issues\n\ud83d\udc47 https://t.co/lAXbAxtxrB",
            "edit_history_tweet_ids": [
                "1566101217570222080"
            ],
            "conversation_id": "1566101217570222080"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566101212747145217",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbvowWQaIAEe-7W.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565738832275746816",
            "attachments": {
                "media_keys": [
                    "3_1565738827263938560"
                ]
            },
            "id": "1565738832275746816",
            "edit_history_tweet_ids": [
                "1565738832275746816"
            ],
            "text": "Python clean code tip:\n\nUse dependency injection to simplify testing\n\n\ud83d\udc47 https://t.co/2LuwsSktr1"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565738827263938560",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbqfKvIakAAY4qf.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565734166876012545"
            ],
            "text": "Continuously Deploying Django to Linode with Docker and GitHub Actions \n\nhttps://t.co/NXOQgX5Yk2 \n\nLooks at how to configure GitHub Actions to continuously deploy a Django and Docker application to Linode.\n\n#Django @Linode",
            "id": "1565734166876012545",
            "conversation_id": "1565734166876012545"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565376445773660165"
            ],
            "conversation_id": "1565376442245865473",
            "id": "1565376445773660165",
            "text": "You can find this and other tips here:        \n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "id": "1565376442245865473",
            "attachments": {
                "media_keys": [
                    "3_1565376437955096577"
                ]
            },
            "text": "Python tip\n\nYou can configure custom encoders for selected types to customize the serialization of creation type across multiple schemas\n\ne.g. customize date serialization\n\n\ud83d\udc47 https://t.co/iQ10Ywvmel",
            "edit_history_tweet_ids": [
                "1565376442245865473"
            ],
            "conversation_id": "1565376442245865473"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565376437955096577",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FblVk5wUcAES0_0.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1565343316644085760",
            "edit_history_tweet_ids": [
                "1565343316644085760"
            ],
            "conversation_id": "1565343316644085760",
            "text": "Generating a Static Site with Flask and Deploying it to Netlify \n\nhttps://t.co/MuiotCEKgh \n\nLeverage the JAMstack with Python and Flask by creating a static site and deploying it to Netlify.\n\nby @patkennedy79\n\n#Flask #JAMStack #DevOps @Netlify"
        }
    },
    {
        "data": {
            "conversation_id": "1565083893740584960",
            "text": "Learn Vue by Building and Deploying a CRUD App\n\nhttps://t.co/Upets43r8i\n\n@patkennedy79 just updated the course, moving from-\n\n\ud83d\udd38Vue CLI to Vue build tools (using Vite)\n\ud83d\udd38Jest to Vitest\n\ud83d\udd38Vuex to Pinia\n\n\ud83d\udcaa\ud83d\ude80\u2728\n\n#Vue #JavaScript #Testing",
            "edit_history_tweet_ids": [
                "1565083893740584960"
            ],
            "id": "1565083893740584960"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565014056607461376"
            ],
            "conversation_id": "1565014053935665152",
            "id": "1565014056607461376",
            "text": "You can find this and other tips here:      \n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565014053935665152"
            ],
            "text": "FastAPI tip\n\nYou can use a wildcard validator in Pydantic schemas to prevent non-printable characters in all of your request bodies\n\nJust inherit all your schemas from your BaseModel\n\n(e.g., prevent literal nulls that can be a security issue)\n\n\ud83d\udc47 https://t.co/rh76bbfIHU",
            "id": "1565014053935665152",
            "conversation_id": "1565014053935665152",
            "attachments": {
                "media_keys": [
                    "3_1565014050123030528"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565014050123030528",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbgL_J4UIAACpPu.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564651667185840130",
            "edit_history_tweet_ids": [
                "1564651670096658432"
            ],
            "id": "1564651670096658432",
            "text": "You can find this and other tips here:    \n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "conversation_id": "1564651667185840130",
            "edit_history_tweet_ids": [
                "1564651667185840130"
            ],
            "attachments": {
                "media_keys": [
                    "3_1564651662714609664"
                ]
            },
            "id": "1564651667185840130",
            "text": "Flask Tip\n\nIn Flask, flash messages can be categorized to allow different styling (success, error, info) using get_flashed_messages(with_categories=true)\n\n\ud83d\udc47 https://t.co/sxRxOZMElq"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564651662714609664",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbbCZblUIAAKgqB.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564613426491670529",
            "edit_history_tweet_ids": [
                "1564613426491670529"
            ],
            "text": "Production Django Deployments on Heroku\n\nhttps://t.co/KPEdOHmaEF\n\nTips and tricks for simplifying the process of deploying, maintaining, and scaling a production-grade Django app on Heroku.\n\n#Django #DevOps #WebDev",
            "id": "1564613426491670529"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1564289280280653824"
            ],
            "conversation_id": "1564289278263275523",
            "id": "1564289280280653824",
            "text": "You can find this and other tips here:  \n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "id": "1564289278263275523",
            "edit_history_tweet_ids": [
                "1564289278263275523"
            ],
            "attachments": {
                "media_keys": [
                    "3_1564289274563874816"
                ]
            },
            "text": "Flask Tip\n\nIn Flask, the `get_flashed_messages()` function is used to retrieve all the flash messages (from the session).\n\nget_flashed_messages() is available in the Jinja templates\n\n\ud83d\udc47 https://t.co/INFBfO9wl4",
            "conversation_id": "1564289278263275523"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564289274563874816",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbV4zqhVUAAayDb.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Developing a Single Page App with Flask and Vue\n\nhttps://t.co/g0QqIVdEIg\n\nStep-by-step walkthrough of how to set up a basic CRUD app with Vue and Flask.\n\n#Python #Flask #JavaScript #VueJS",
            "id": "1564243743355686913",
            "edit_history_tweet_ids": [
                "1564243743355686913"
            ],
            "conversation_id": "1564243743355686913"
        }
    },
    {
        "data": {
            "conversation_id": "1563926889571332096",
            "id": "1563926892394139648",
            "edit_history_tweet_ids": [
                "1563926892394139648"
            ],
            "text": "You can find this and other tips here:\n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "conversation_id": "1563926889571332096",
            "id": "1563926889571332096",
            "edit_history_tweet_ids": [
                "1563926889571332096"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563926885339627521"
                ]
            },
            "text": "Flask Tip - Message Flashing\n\nFlash messages are used to provide useful information to the user based on their actions with the app.\n\nIn Flask, the `flash()` function is used to create a flash message to be displayed in the next request (when the list of stocks is displayed)\n\n\ud83d\udc47 https://t.co/IsNeTYJuN1"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563926885339627521",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbQvN1daAAESYrF.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1563650842351513600"
            ],
            "id": "1563650842351513600",
            "text": "Deploying a Flask and Vue App to Heroku with Docker and Gitlab CI \n\nhttps://t.co/U9vVUVxBFF\n\n\ud83d\udd38Containerize #Flask + #Vue using a Docker multi-stage build\n\ud83d\udd38Deploy an app to Heroku with Docker\n\ud83d\udd38Configure GitLab CI to deploy Docker images to Heroku\n\n#Python #JavaScript #DevOps",
            "conversation_id": "1563650842351513600"
        }
    },
    {
        "data": {
            "conversation_id": "1563564501756022785",
            "edit_history_tweet_ids": [
                "1563564503908110336"
            ],
            "id": "1563564503908110336",
            "text": "You can find this and other tips here:         \n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "text": "Flask Tip\n\nHow does redirect() work in Flask?\n\nCheck the log messages from the Flask development server when adding data\n\nThe status code 302 (Found) is used to redirect the user to a new URL that is specified in the header field of the response.\n\n\ud83d\udc47 https://t.co/c6meGxCL90",
            "id": "1563564501756022785",
            "edit_history_tweet_ids": [
                "1563564501756022785"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563564497641820160"
                ]
            },
            "conversation_id": "1563564501756022785"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563564497641820160",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbLloGFaUAAQALy.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1563265065713029120",
            "id": "1563265065713029120",
            "edit_history_tweet_ids": [
                "1563265065713029120"
            ],
            "text": "Building Modern Python API Backends in 2022\n\nhttps://t.co/DTXWTsZEll\n\nLovely, opinionated guide on the tools (like FastAPI, pytest, Celery, black, isort, mypy, and flake8) and methodologies (12 factor) used for developing backend Python-based apps."
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here:       \n\nhttps://t.co/aaDPvCoXPq  \n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1563202113399705600",
            "edit_history_tweet_ids": [
                "1563202116771909632"
            ],
            "id": "1563202116771909632"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1563202113399705600"
            ],
            "text": "Flask Tip\n\nIn Flask, the redirect() function is used to redirect a user to a different URL.\n\nredirect() can greatly improve the navigation through a site by automatically redirecting users to the expected pages.\n\n\ud83d\udc47 https://t.co/yGqb4Qtrpn",
            "id": "1563202113399705600",
            "conversation_id": "1563202113399705600",
            "attachments": {
                "media_keys": [
                    "3_1563202109730082817"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563202109730082817",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbGcCV6aUAEWwxZ.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1563197793098874881"
            ],
            "text": "The Definitive Guide to #Celery and #Django\n\nJust updated!\n\nhttps://t.co/n9sxbaWpqo\n\nCovers everything from debugging failed tasks to adding WebSocket support with Django Channels to best practices &amp; performance tuning. There's a deep dive into testing &amp; Test-Driven Development.",
            "id": "1563197793098874881",
            "conversation_id": "1563197793098874881"
        }
    },
    {
        "data": {
            "conversation_id": "1563145707569131526",
            "edit_history_tweet_ids": [
                "1563145707569131526"
            ],
            "id": "1563145707569131526",
            "text": "How To Keep Track Of Packages For Your Django Project With Pip-Tools\n\nhttps://t.co/DShILyyT9j\n\nYou don't have to rely on pip freeze to manage your project requirements.\n\nby @aliceridgway404 \n\n#Django"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1562839732324671488"
            ],
            "conversation_id": "1562839730039160832",
            "id": "1562839732324671488",
            "text": "You can find this and other tips here:     \n\nhttps://t.co/aaDPvCoXPq \n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "conversation_id": "1562839730039160832",
            "id": "1562839730039160832",
            "text": "Flask Tip\n\nIn Flask, the `url_for()` function can be passed an argument to specify the variable part of a URL\n\n\ud83d\udc47 https://t.co/WEt53mJLUk",
            "attachments": {
                "media_keys": [
                    "3_1562839726125912066"
                ]
            },
            "edit_history_tweet_ids": [
                "1562839730039160832"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562839726125912066",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbBSc1yakAIczWP.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Accepting Payments with Stripe, Vue, and Flask \n\nhttps://t.co/8hR5yBIjMu\n\nIn this tutorial, you'll develop a web app for selling books using:\n\n\ud83d\udd38Stripe (for payment processing)\n\ud83d\udd38Vue (the client-side app)\n\ud83d\udd38Flask (the server-side API).\n\n#Python #JavaScript #Payments #Vue",
            "id": "1562785490457153536",
            "edit_history_tweet_ids": [
                "1562785490457153536"
            ],
            "conversation_id": "1562785490457153536"
        }
    },
    {
        "data": {
            "text": "Django and Pydantic \n\nhttps://t.co/9TbYRpnBLP \n\nIntegrate Pydantic with a Django application using the Pydantic-Django and Django Ninja packages.\n\n#Django #Pydantic",
            "id": "1562590157119062016",
            "edit_history_tweet_ids": [
                "1562590157119062016"
            ],
            "conversation_id": "1562590157119062016"
        }
    },
    {
        "data": {
            "conversation_id": "1562477117966667776",
            "id": "1562477120504209409",
            "edit_history_tweet_ids": [
                "1562477120504209409"
            ],
            "text": "You can find this and other tips here:   \n\nhttps://t.co/aaDPvCoXPq \n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1562477117966667776"
            ],
            "attachments": {
                "media_keys": [
                    "3_1562477113646534659"
                ]
            },
            "id": "1562477117966667776",
            "text": "Flask Tip\n\nIn Flask, the url_for() function builds the URL to a specific function.\n\nurl_for() is really useful in templates to easily include URLs\n\n\ud83d\udc47 https://t.co/nHSFBFg32E",
            "conversation_id": "1562477117966667776"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562477113646534659",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa8IqBCUUAMKkSe.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here: \n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1562114950189187072",
            "edit_history_tweet_ids": [
                "1562114954580611072"
            ],
            "id": "1562114954580611072"
        }
    },
    {
        "data": {
            "id": "1562114953443954690",
            "edit_history_tweet_ids": [
                "1562114953443954690"
            ],
            "text": "See the whole example:\n\nhttps://t.co/5aWFa5fXS7",
            "conversation_id": "1562114950189187072"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1562114950189187072"
            ],
            "text": "Flask Tip\n\nFlask-Session works great with a Redis database!\n\nAfter configuring the interface to Redis, the `session` object can be used (but data is stored on the server!)\n\n\ud83d\udc47 https://t.co/FpcqNvOQ5d",
            "attachments": {
                "media_keys": [
                    "3_1562114946305236998"
                ]
            },
            "conversation_id": "1562114950189187072",
            "id": "1562114950189187072"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562114946305236998",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa2_RGjaIAYLtQE.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1562066525120610304"
            ],
            "text": "Sessions in Flask \n\nhttps://t.co/SIQnBR2dtn \n\nShows how sessions work in Flask and looks at an example of storing a user's email address in the session object.\n\nby @patkennedy79\n\n#Flask #Python @PalletsTeam",
            "conversation_id": "1562066525120610304",
            "id": "1562066525120610304"
        }
    },
    {
        "data": {
            "conversation_id": "1561752556807680000",
            "text": "You can find this and other tips here:  https://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "edit_history_tweet_ids": [
                "1561752561258213377"
            ],
            "id": "1561752561258213377"
        }
    },
    {
        "data": {
            "id": "1561752560125755392",
            "edit_history_tweet_ids": [
                "1561752560125755392"
            ],
            "conversation_id": "1561752556807680000",
            "text": "Learn more in this post:\n\nhttps://t.co/GpAdnWMD3s"
        }
    },
    {
        "data": {
            "id": "1561752559013965824",
            "edit_history_tweet_ids": [
                "1561752559013965824"
            ],
            "conversation_id": "1561752556807680000",
            "text": "You can continue to use the `session` object as you normally would with the built-in client-side session implementation."
        }
    },
    {
        "data": {
            "conversation_id": "1561752556807680000",
            "edit_history_tweet_ids": [
                "1561752557986656266"
            ],
            "id": "1561752557986656266",
            "text": "Flask-Session uses Flask's *Session Interface*, which provides a simple way to replace Flask's built-in session implementation."
        }
    },
    {
        "data": {
            "conversation_id": "1561752556807680000",
            "id": "1561752556807680000",
            "edit_history_tweet_ids": [
                "1561752556807680000"
            ],
            "text": "Flask Tip\n\nHow do server-side sessions work with the Flask-Session extension?\n\n\ud83e\uddf5 \ud83d\udc47"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1561700596503175170"
            ],
            "conversation_id": "1561700596503175170",
            "id": "1561700596503175170",
            "text": "Introduction to Machine Learning Reliability Engineering\n\nhttps://t.co/Hm57bz8UDf\n\nThis article looks at the roles and responsibilities of a Machine Learning Reliability Engineer (MLRE).\n\n#MachineLearning #MLOps"
        }
    },
    {
        "data": {
            "conversation_id": "1561390168896335872",
            "text": "You can find this and other tips here:\n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "edit_history_tweet_ids": [
                "1561390172184641536"
            ],
            "id": "1561390172184641536"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1561390171131883520"
            ],
            "conversation_id": "1561390168896335872",
            "id": "1561390171131883520",
            "text": "Cons:\n- Difficult to set up and scale\n- Increased complexity since session state must be managed"
        }
    },
    {
        "data": {
            "conversation_id": "1561390168896335872",
            "edit_history_tweet_ids": [
                "1561390170011684864"
            ],
            "id": "1561390170011684864",
            "text": "Pros:\n- Sensitive data is stored on the server, not in the web browser\n- Store as much session data as you want without worrying about the cookie size\n- Sessions can easily be terminated by the Flask app"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1561390168896335872"
            ],
            "text": "Flask Tip - Server-Side Sessions\n\nServer-side sessions store the data associated with the session on the **server** in a particular data storage solution.\n\n\ud83e\uddf5 \ud83d\udc47",
            "conversation_id": "1561390168896335872",
            "id": "1561390168896335872"
        }
    },
    {
        "data": {
            "conversation_id": "1561353493839073280",
            "id": "1561353493839073280",
            "edit_history_tweet_ids": [
                "1561353493839073280"
            ],
            "text": "Adding Social Authentication to Flask\n\nhttps://t.co/KGXYibTNcu\n\nLooks at how to add social auth, with GitHub and Twitter, to a Flask application with Flask-Dance.\n\nby @amal_ytics\n\n#Flask #Python #WebDev"
        }
    },
    {
        "data": {
            "conversation_id": "1561027788110303232",
            "edit_history_tweet_ids": [
                "1561027792627675137"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1561027792627675137"
        }
    },
    {
        "data": {
            "conversation_id": "1561027788110303232",
            "text": "When setting the data in the session, specify that the sessions should be permanent (time will be based on PERMANENT_SESSION_LIFETIME).",
            "edit_history_tweet_ids": [
                "1561027791570993152"
            ],
            "id": "1561027791570993152"
        }
    },
    {
        "data": {
            "conversation_id": "1561027788110303232",
            "edit_history_tweet_ids": [
                "1561027790484680705"
            ],
            "id": "1561027790484680705",
            "text": "However, if you want to change the life of the session object, define the PERMANENT_SESSION_LIFETIME configuration variable after creating the Flask app."
        }
    },
    {
        "data": {
            "conversation_id": "1561027788110303232",
            "edit_history_tweet_ids": [
                "1561027788110303232"
            ],
            "text": "Flask Tip - Sessions\n\nBy default, the `session` object in Flask remains in place until the browser is closed.\n\ud83e\uddf5\ud83d\udc47 https://t.co/QDWjJOfjya",
            "attachments": {
                "media_keys": [
                    "3_1561027784444588033"
                ]
            },
            "id": "1561027788110303232"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561027784444588033",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fanif9BVsAEKM1U.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Python tip:\n\nYou can write an if-else inside the print statement.\n(It must include else). https://t.co/9HZMXatmlM",
            "id": "1560665403176628225",
            "edit_history_tweet_ids": [
                "1560665403176628225"
            ],
            "attachments": {
                "media_keys": [
                    "3_1560665398202486784"
                ]
            },
            "conversation_id": "1560665403176628225"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560665398202486784",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaiY6TEaUAAFwaz.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1560615253817303043",
            "edit_history_tweet_ids": [
                "1560615253817303043"
            ],
            "id": "1560615253817303043",
            "text": "Adding Charts to Django with Chart.js\n\nhttps://t.co/mimQwk4PYC \n\nLooks at how to add interactive charts to Django with Chart.js.\n\n#Django #JavaScript #Python"
        }
    },
    {
        "data": {
            "conversation_id": "1560303012286935040",
            "id": "1560303014392446976",
            "edit_history_tweet_ids": [
                "1560303014392446976"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1560303008176799750"
                ]
            },
            "edit_history_tweet_ids": [
                "1560303012286935040"
            ],
            "conversation_id": "1560303012286935040",
            "id": "1560303012286935040",
            "text": "Python tip:\n\nYou can use all() to check if all elements in iterable are True. https://t.co/WcZNu0qerH"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560303008176799750",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FadPUbBaAAYTJN8.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1560259951683158016",
            "edit_history_tweet_ids": [
                "1560259951683158016"
            ],
            "id": "1560259951683158016",
            "text": "Running Flask on Docker Swarm \n\nhttps://t.co/PnbV6PrG7u \n\nLooks at how to spin up a Docker Swarm cluster on DigitalOcean and then configure a microservice, powered by Flask and Postgres, to run on it.\n\n#Python #Flask #Docker @DigitalOcean"
        }
    },
    {
        "data": {
            "id": "1559940625939976194",
            "edit_history_tweet_ids": [
                "1559940625939976194"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1559940623905730561"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1559940619614961664"
                ]
            },
            "edit_history_tweet_ids": [
                "1559940623905730561"
            ],
            "conversation_id": "1559940623905730561",
            "id": "1559940623905730561",
            "text": "Python tip:\n\nYou can use any() to check if any element in iterable is True. https://t.co/zZFDb8j6Ab"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559940619614961664",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaYFuobaQAA6NzX.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559893518226755585",
            "id": "1559893518226755585",
            "text": "Serving Static Files from Flask with WhiteNoise and Amazon CloudFront \n\nhttps://t.co/lzsM81Rymb \n\nLooks at how to manage static files with Flask and WhiteNoise. You'll also configure Amazon CloudFront to get the best possible performance.\n\n#Python #Flask #AWS",
            "edit_history_tweet_ids": [
                "1559893518226755585"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559578237285826562",
            "id": "1559578239827595269",
            "edit_history_tweet_ids": [
                "1559578239827595269"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "text": "Python tip:\n\nIn Python, individual values can evaluate as either True or False.\nValues that evaluate to True are \"Truthy\", and values that evaluate to False are \"Falsy\".\n\nBy default, object is considered Truthy, unless its __bool__() method returns False or __len__() returns 0 \ud83d\udc47 https://t.co/tUvS4yK1gY",
            "id": "1559578237285826562",
            "edit_history_tweet_ids": [
                "1559578237285826562"
            ],
            "attachments": {
                "media_keys": [
                    "3_1559578233603260416"
                ]
            },
            "conversation_id": "1559578237285826562"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559578233603260416",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaS8I_VagAASzME.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1559530263457193984",
            "edit_history_tweet_ids": [
                "1559530263457193984"
            ],
            "conversation_id": "1559530263457193984",
            "text": "Running Spark with Docker Swarm on DigitalOcean\n\nhttps://t.co/XYVAgoHJ3y\n\nLooks at how to deploy Apache Spark, an open-source cluster computing framework for large-scale data processing, to a Docker Swarm Cluster on DigitalOcean.\n\n#Docker #Spark @DigitalOcean"
        }
    },
    {
        "data": {
            "id": "1559215852171710465",
            "edit_history_tweet_ids": [
                "1559215852171710465"
            ],
            "conversation_id": "1559215850070343680",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1559215846391615488"
                ]
            },
            "conversation_id": "1559215850070343680",
            "id": "1559215850070343680",
            "edit_history_tweet_ids": [
                "1559215850070343680"
            ],
            "text": "Python tip:\n\nYou can compute sum of the counts in Counter with total(). https://t.co/0rVV3wwsfV"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559215846391615488",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaNyjRxVEAAHJtz.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1559171770292310016",
            "text": "Distributed Testing with Selenium Grid and Docker\n\nhttps://t.co/6jD05VuD8u\n\nLooks at how to distribute automated tests across a number of machines with Selenium Grid to a Docker Swarm Cluster on DigitalOcean.\n\n#Docker #Selenium @DigitalOcean",
            "edit_history_tweet_ids": [
                "1559171770292310016"
            ],
            "conversation_id": "1559171770292310016"
        }
    },
    {
        "data": {
            "conversation_id": "1558942468208484354",
            "edit_history_tweet_ids": [
                "1558942468208484354"
            ],
            "id": "1558942468208484354",
            "text": "Server-side Sessions in Flask \n\nhttps://t.co/GpAdnWM5dU \n\nLooks at how server-side sessions can be used in Flask with Flask-Session and Redis.\n\nby @patkennedy79\n\n#Flask #Python #WebDev"
        }
    },
    {
        "data": {
            "id": "1558853464557400064",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "edit_history_tweet_ids": [
                "1558853464557400064"
            ],
            "conversation_id": "1558853462271864832"
        }
    },
    {
        "data": {
            "conversation_id": "1558853462271864832",
            "edit_history_tweet_ids": [
                "1558853462271864832"
            ],
            "text": "Python tip:\n\nYou can use Counter to subtract the contents of one iterable from the other.\n\nThe result will be a dictionary with keys from both iterables, with values first_value - second_value. https://t.co/EH5BO5YZ8s",
            "attachments": {
                "media_keys": [
                    "3_1558853458001743873"
                ]
            },
            "id": "1558853462271864832"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558853458001743873",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaIo9f0VUAE9l-w.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1558491075777466368",
            "edit_history_tweet_ids": [
                "1558491075777466368"
            ],
            "conversation_id": "1558491073458339840",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "id": "1558491073458339840",
            "attachments": {
                "media_keys": [
                    "3_1558491069813501952"
                ]
            },
            "text": "Python tip:\n\nTo find which elements are most common in an iterable, you can use 'Counter.most_common'.\n\nThe counter returns a list of tuples, and each tuple contains the element and the element count. https://t.co/5HcUnHcvsk",
            "edit_history_tweet_ids": [
                "1558491073458339840"
            ],
            "conversation_id": "1558491073458339840"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558491069813501952",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaDfXunaMAAYPgs.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Effectively Using Django REST Framework Serializers\n\nA look at how to use Django REST Framework (DRF) serializers more efficiently and effectively by example.\n\nhttps://t.co/Ito1BfMQAm\n\n#Django",
            "id": "1558442204594671616",
            "edit_history_tweet_ids": [
                "1558442204594671616"
            ],
            "conversation_id": "1558442204594671616"
        }
    },
    {
        "data": {
            "conversation_id": "1558128690080260097",
            "id": "1558128692341403658",
            "edit_history_tweet_ids": [
                "1558128692341403658"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1558128686351929349"
                ]
            },
            "edit_history_tweet_ids": [
                "1558128690080260097"
            ],
            "conversation_id": "1558128690080260097",
            "id": "1558128690080260097",
            "text": "Python tip:\n\nSet is one of four built-in data structures that can be used to hold a collection of objects.\n\nSet doesn't allow duplicated objects.\n\nIt doesn't preserve the order of the objects, meaning you can't refer to them with an index, and order of the set may vary each time. https://t.co/6MrfzWMX4n"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558128686351929349",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ-VyPBaUAUyaDk.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1558079597043908609"
            ],
            "text": "What is Werkzeug? \n\nhttps://t.co/wh6YD7MlYC \n\nby @patkennedy79\n\nLearn what Werkzeug is and how Flask uses it for its core HTTP functionality.\n\n#Flask #Python @PalletsTeam",
            "conversation_id": "1558079597043908609",
            "id": "1558079597043908609"
        }
    },
    {
        "data": {
            "conversation_id": "1557766302361853953",
            "edit_history_tweet_ids": [
                "1557766305931206656"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1557766305931206656"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1557766304798756864"
            ],
            "conversation_id": "1557766302361853953",
            "id": "1557766304798756864",
            "text": "source: https://t.co/ua70uAHLAw"
        }
    },
    {
        "data": {
            "id": "1557766302361853953",
            "attachments": {
                "media_keys": [
                    "3_1557766297366429696"
                ]
            },
            "edit_history_tweet_ids": [
                "1557766302361853953"
            ],
            "conversation_id": "1557766302361853953",
            "text": "Did you know?\n\nTo get Zen of Python in your code, you can import it with `import this`.\n\nHere's the whole Zen of Python \ud83d\udc47 https://t.co/G8lujKFlye"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557766297366429696",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ5MMa2aAAAzF9T.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1557717338119700481",
            "edit_history_tweet_ids": [
                "1557717338119700481"
            ],
            "text": "HTML Over WebSockets \n\nhttps://t.co/N36WKzjAAt \n\nThis article looks at a new approach for achieving a Single-page Application (SPA) -- HTML over WebSockets.\n\nby @androsfenollosa\n \n#WebDev #WebSockets #Django",
            "conversation_id": "1557717338119700481"
        }
    },
    {
        "data": {
            "conversation_id": "1557403903482032129",
            "edit_history_tweet_ids": [
                "1557403912323612672"
            ],
            "id": "1557403912323612672",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1557403906237288448"
                ]
            },
            "edit_history_tweet_ids": [
                "1557403909726998535"
            ],
            "conversation_id": "1557403903482032129",
            "id": "1557403909726998535",
            "text": "If you inspect the 'https://t.co/dsyXeO75BL' file, you'll notice it's gibrish.\n\n That's because the creators used rot13, meaning each letter is shifted for 13 places.  Here's how a part of that gibrish in `https://t.co/HWxFg5ysPG` looks like: https://t.co/SR1blVSF4f"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557403906237288448",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ0CmesUUAASbMJ.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1557403903482032129",
            "edit_history_tweet_ids": [
                "1557403903482032129"
            ],
            "conversation_id": "1557403903482032129",
            "text": "Did you know? \ud83e\uddf5\n\nThe Zen of Python is a collection of 19 \"guiding principles\" for writing Python.\nIt's actually a part of Python standard library, you can find it in `https://t.co/dsyXeOpePT` file."
        }
    },
    {
        "data": {
            "text": "Integrating Mailchimp with Django \n\nhttps://t.co/zCZJk8YiKI \n\nIntegrate Mailchimp with Django for newsletters and transactional emails.\n\n#Django #AWS @Mailchimp_API",
            "id": "1557375408311619586",
            "edit_history_tweet_ids": [
                "1557375408311619586"
            ],
            "conversation_id": "1557375408311619586"
        }
    },
    {
        "data": {
            "conversation_id": "1557108989925773316",
            "edit_history_tweet_ids": [
                "1557108989925773316"
            ],
            "id": "1557108989925773316",
            "text": "How to Choose the Right Python Concurrency API\n\nhttps://t.co/Y2D3ANRiW8\n\nPython's standard library offers 3 concurrency APIs. How do you know which API to use in your project?\n\nby @SuperFastPython \n\n#Python"
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1557041525615316992",
            "edit_history_tweet_ids": [
                "1557041525615316992"
            ],
            "conversation_id": "1557041521672978434"
        }
    },
    {
        "data": {
            "conversation_id": "1557041521672978434",
            "id": "1557041524348620803",
            "edit_history_tweet_ids": [
                "1557041524348620803"
            ],
            "text": "isdigit() method returns True only if all characters in a string are digits (arabic numbers 0-9).\n\nOther numeric values, such as fractions, chinese and roman numbers, return False for isdigit() method whether they return True for isnumeric() method."
        }
    },
    {
        "data": {
            "conversation_id": "1557041521672978434",
            "attachments": {
                "media_keys": [
                    "3_1557041516429774850"
                ]
            },
            "id": "1557041521672978434",
            "edit_history_tweet_ids": [
                "1557041521672978434"
            ],
            "text": "Python tip:\n\nThe difference between isdigit() and isnumeric() string methods \ud83e\uddf5\n\nA string can be recognized as numeric, but not as a digit. https://t.co/OoXUnJ8MAH"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557041516429774850",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZu5AndVEAIdKwA.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Testing in Python\n\nhttps://t.co/agc9katlTw\u2026\n\nLooks at some tools and techniques that help make testing in Python easier.\n\nCovers:\n\n\ud83d\udd38pytest\n\ud83d\udd38Mocking\n\ud83d\udd38Code Coverage\n\ud83d\udd38Mutation Testing\n\ud83d\udd38Hypothesis\n\ud83d\udd38Type Checking\n\nby @JanGiacomelli\n\n#Python #Testing",
            "id": "1556987362051330053",
            "edit_history_tweet_ids": [
                "1556987362051330053"
            ],
            "conversation_id": "1556987362051330053"
        }
    },
    {
        "data": {
            "conversation_id": "1556679134235230208",
            "id": "1556679136478785537",
            "edit_history_tweet_ids": [
                "1556679136478785537"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "id": "1556679134235230208",
            "edit_history_tweet_ids": [
                "1556679134235230208"
            ],
            "conversation_id": "1556679134235230208",
            "text": "Python tip:\n\nPython defines tuple with commas, not parenthesis. Parenthesis are there just to make a tuple clearer.\n\nUnpacking - splitting the tuple's variables into individual variables - can be done in a single line \ud83d\udc47 https://t.co/tFng30sGKe",
            "attachments": {
                "media_keys": [
                    "3_1556679130045124608"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556679130045124608",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZpva8-akAAxdra.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1556633368950890497",
            "id": "1556633368950890497",
            "edit_history_tweet_ids": [
                "1556633368950890497"
            ],
            "text": "Asynchronous Tasks with Falcon and Celery\n\nhttps://t.co/c7nYshMzzQ\n\nLooks at how to- \n\n1\u20e3Integrate Celery with the Python-based Falcon web framework. \n2\u20e3Use Docker and Docker Compose to tie everything together\n3\u20e3Test the Celery tasks with unit &amp; integration tests\n\n#Python #WebDev"
        }
    },
    {
        "data": {
            "conversation_id": "1556316744851267585",
            "id": "1556316746977779712",
            "edit_history_tweet_ids": [
                "1556316746977779712"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1556316744851267585"
            ],
            "text": "Python tip:\n\nYou can merge dictionaries into a third one in one line by simply using **.\n\nSince Python 3.9, you can also use | operator. https://t.co/2PD8TFqLg5",
            "attachments": {
                "media_keys": [
                    "3_1556316740807983104"
                ]
            },
            "conversation_id": "1556316744851267585",
            "id": "1556316744851267585"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556316740807983104",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZkl1H3agAAsjan.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Developing and Testing an Asynchronous API with FastAPI and Pytest \n\nhttps://t.co/SmgsnIb1Ag\n\nLearn how to develop and test an API with FastAPI using Test-driven Development (TDD).\n\n#FastAPI #Testing #Python",
            "id": "1556288943016009730",
            "edit_history_tweet_ids": [
                "1556288943016009730"
            ],
            "conversation_id": "1556288943016009730"
        }
    },
    {
        "data": {
            "conversation_id": "1555954356125462528",
            "id": "1555954358004912128",
            "edit_history_tweet_ids": [
                "1555954358004912128"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1555954352488980480"
                ]
            },
            "conversation_id": "1555954356125462528",
            "edit_history_tweet_ids": [
                "1555954356125462528"
            ],
            "id": "1555954356125462528",
            "text": "Python tip:\n\nIf you want to find out if a value is between two other values, don't use and operator.\n\nYou can simplify it like this: https://t.co/U1fua1GwLj"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555954352488980480",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZfcPWLUIAAVKFE.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1555928706136231939"
            ],
            "id": "1555928706136231939",
            "text": "The MLOps Toolkit  \n\nhttps://t.co/hLfYXMLd1F \n\nLooks at how MLOps fits into the machine learning lifecycle, focusing on tools for developing, deploying, and serving ML models.\n\n#MachineLearning #MLOps",
            "conversation_id": "1555928706136231939"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1555591973306007552"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1555591970541604864",
            "id": "1555591973306007552"
        }
    },
    {
        "data": {
            "conversation_id": "1555591970541604864",
            "id": "1555591970541604864",
            "text": "Python tip:\n\nYou can use else statement with a for loop. \nElse clause is executed if the loop is not terminated with a break statement.\n\n*This only works if the forloop includes a conditional statement. https://t.co/Nu1IaxA0pB",
            "attachments": {
                "media_keys": [
                    "3_1555591966607364097"
                ]
            },
            "edit_history_tweet_ids": [
                "1555591970541604864"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555591966607364097",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZaSptkVUAE8x31.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1555229586061164545"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1555229583632658438",
            "id": "1555229586061164545"
        }
    },
    {
        "data": {
            "id": "1555229583632658438",
            "edit_history_tweet_ids": [
                "1555229583632658438"
            ],
            "attachments": {
                "media_keys": [
                    "3_1555229579702194176"
                ]
            },
            "text": "Django tip:\n\nDjango DateField and DateTimeField have two methods that will return next or previous object with respect to the date(time) field.\n\nThose methods are:\n- get_next_by_[date_field]() \n- get_previous_by_[date_field]()\n\n(The field must not have null=True for this to work) https://t.co/NDthGbvFWL",
            "conversation_id": "1555229583632658438"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555229579702194176",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZVJEBJUUAAX37i.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1555193456011923456"
            ],
            "text": "Running Flask on Kubernetes\n\nhttps://t.co/6P9qfxOcin\n\nLooks at how to deploy a Flask microservice (along with Postgres) to a Kubernetes cluster.\n\n#Flask #DevOps #Kubernetes",
            "id": "1555193456011923456",
            "conversation_id": "1555193456011923456"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1554867196525809664"
            ],
            "conversation_id": "1554867194617507840",
            "id": "1554867196525809664",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1554867190771625985"
                ]
            },
            "edit_history_tweet_ids": [
                "1554867194617507840"
            ],
            "conversation_id": "1554867194617507840",
            "id": "1554867194617507840",
            "text": "Django tip:\n\nYou can create an empty query set with none(). https://t.co/ImR8m4yPjN"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554867190771625985",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZP_eNLaMAETWqm.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1554504809142956034",
            "edit_history_tweet_ids": [
                "1554504809142956034"
            ],
            "conversation_id": "1554504807464837123",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1554504803233202177"
                ]
            },
            "conversation_id": "1554504807464837123",
            "edit_history_tweet_ids": [
                "1554504807464837123"
            ],
            "id": "1554504807464837123",
            "text": "Did you know?\n\nPython has a library called freegames that allows you to play classic games like Pacman, Snake, Maze, Simon Says... https://t.co/da96WC01b8"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554504803233202177",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZK14eZagAEwO8F.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1554463787776081926",
            "text": "Storing Django Static and Media Files on Amazon S3 \n\nhttps://t.co/3uC4hc7FeL\n\nConfigure Django to load and serve up static and media files, public and private, via an Amazon S3 bucket.\n\n#Django  #Python #S3",
            "edit_history_tweet_ids": [
                "1554463787776081926"
            ],
            "id": "1554463787776081926"
        }
    },
    {
        "data": {
            "conversation_id": "1554142420878577665",
            "edit_history_tweet_ids": [
                "1554142423244472320"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1554142423244472320"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1554142420878577665"
            ],
            "attachments": {
                "media_keys": [
                    "3_1554142416940433408"
                ]
            },
            "id": "1554142420878577665",
            "text": "Django tip:\n\nAt the beginning of a new Django project, you should always set up a custom model, even if you don't plan on customizing the default model.\n\nThat should be done before creating or running any migrations. https://t.co/TdLJqpomqI",
            "conversation_id": "1554142420878577665"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554142416940433408",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZFsS0QaAAA4fhE.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1554135646498762752",
            "edit_history_tweet_ids": [
                "1554135646498762752"
            ],
            "id": "1554135646498762752",
            "text": "Class-based vs Function-based Views in Django  \n\nhttps://t.co/hy51CmsDCf \n\nCompare and contrast and dive into the pros and cons of using Django's-\n\n\ud83d\udd38Function-based views\n\ud83d\udd38Class-based views\n\ud83d\udd38Generic class-based views\n\n#Django"
        }
    },
    {
        "data": {
            "text": "Test-driven development and Docker are super popular in the last few years:\n\nhttps://t.co/Zhv1gySjIm\n\nhttps://t.co/4cVwtZO3KL",
            "id": "1553780029221670913",
            "edit_history_tweet_ids": [
                "1553780029221670913"
            ],
            "conversation_id": "1553780025479929856"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553780027942060032"
            ],
            "conversation_id": "1553780025479929856",
            "id": "1553780027942060032",
            "text": "Python is always a good choice:\n\nhttps://t.co/b6wT1IfV9d\n\nand don't forget the tests:\n\nTest-driven development and Docker are super popular in the last few years:"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553780026763792384"
            ],
            "text": "Are you interested in Django, Flask or FastAPI?\n\nhttps://t.co/2SZcPR2Xsv\n\nhttps://t.co/Rq36wSjIjx\n\nhttps://t.co/LeowohddoI",
            "id": "1553780026763792384",
            "conversation_id": "1553780025479929856"
        }
    },
    {
        "data": {
            "conversation_id": "1553780025479929856",
            "edit_history_tweet_ids": [
                "1553780025479929856"
            ],
            "text": "https://t.co/anw72Nv4Ce tip:\n\nTips on Twitter slip out of memory quickly.\nYou can check all the tips on https://t.co/aaDPvCoXPq\n\nYou can even browse them by topic \ud83e\uddf5",
            "id": "1553780025479929856"
        }
    },
    {
        "data": {
            "id": "1553763816726351872",
            "text": "Running Vault and Consul on Kubernetes \n\nhttps://t.co/uMKbLIHafQ\n\nA walk through guide on how to provision a highly-available @HashiCorp Vault and Consul cluster on Kubernetes with TLS.\n\nMain dependencies:\n\n\u23fa Vault v1.7.1\n\u23fa Consul v1.9.5\n\u23fa #Kubernetes v1.21.0\n\n#HashiCorp #k8s",
            "edit_history_tweet_ids": [
                "1553763816726351872"
            ],
            "conversation_id": "1553763816726351872"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553417647282278400"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1553417645210615810",
            "id": "1553417647282278400"
        }
    },
    {
        "data": {
            "text": "Python tip:\n\nInstead of trying to keep your imports in order by hand, you can use the isort library. https://t.co/OMENX5xs98",
            "id": "1553417645210615810",
            "edit_history_tweet_ids": [
                "1553417645210615810"
            ],
            "attachments": {
                "media_keys": [
                    "3_1553417641364459520"
                ]
            },
            "conversation_id": "1553417645210615810"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553417641364459520",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY7ZHU1akAACB8L.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1553393562372296705",
            "edit_history_tweet_ids": [
                "1553393562372296705"
            ],
            "text": "Automating Performance Testing in Django \n\nhttps://t.co/nhqI6FddoA\n\nThis post looks at how to:\n\n\ud83d\udd38Test the number of queries executed by a request along with the duration of the queries\n\ud83d\udd38Prevent N+1 queries using the nplusone package\n\n#Django #Python #Testing",
            "id": "1553393562372296705"
        }
    },
    {
        "data": {
            "conversation_id": "1553055248734126080",
            "id": "1553055258125139973",
            "edit_history_tweet_ids": [
                "1553055258125139973"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "conversation_id": "1553055248734126080",
            "id": "1553055255696674816",
            "edit_history_tweet_ids": [
                "1553055255696674816"
            ],
            "attachments": {
                "media_keys": [
                    "3_1553055251489779713"
                ]
            },
            "text": "According to Django docs, imports should be grouped in the following order:\n\n1. future\n2. standard library\n3. third-party libraries\n4. other Django components\n5. local Django component\n6. try/excepts https://t.co/Yhu3JF0cNT"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553055251489779713",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY2PhdWacAE1WqQ.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1552986588799451138",
            "edit_history_tweet_ids": [
                "1552986588799451138"
            ],
            "conversation_id": "1552986588799451138",
            "text": "Dockerizing FastAPI with Postgres, Uvicorn, and Traefik\n\nhttps://t.co/E8OifHgTf7\n\nLook at how to set up FastAPI with Postgres, Uvicorn, and Docker. For production environments, we'll add on Gunicorn, Traefik, and Let's Encrypt.\n\nby @pydantic\n \n#FastAPI #Python @Traefik"
        }
    },
    {
        "data": {
            "conversation_id": "1552692862961483776",
            "id": "1552692865167663111",
            "edit_history_tweet_ids": [
                "1552692865167663111"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "conversation_id": "1552692862961483776",
            "edit_history_tweet_ids": [
                "1552692864043581440"
            ],
            "text": "Reading their philosophy may help you better understand how Django works and why it works the way it does: https://t.co/w6rJokrJSX",
            "id": "1552692864043581440"
        }
    },
    {
        "data": {
            "text": "Did you know? \ud83e\uddf5\n\nDjango has its own design philosophy that heavily impacts the way Django is and was developed.\nThe philosophy includes principles like loose coupling, \"Explicit is better than implicit\", and DRY.",
            "id": "1552692862961483776",
            "edit_history_tweet_ids": [
                "1552692862961483776"
            ],
            "conversation_id": "1552692862961483776"
        }
    },
    {
        "data": {
            "conversation_id": "1552649450279079938",
            "id": "1552649450279079938",
            "edit_history_tweet_ids": [
                "1552649450279079938"
            ],
            "text": "Dockerizing Flask with Postgres, Gunicorn, and Nginx\n\nhttps://t.co/gwYiD3Yat2\n\nThis tutorial details how to configure Flask to run on Docker along with Postgres, Nginx, and Gunicorn.\n\n\ud83d\udc0d\ud83d\udc33\n\n#Flask #Python #Docker"
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1552330486449860608",
            "edit_history_tweet_ids": [
                "1552330486449860608"
            ],
            "conversation_id": "1552330482830159872"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1552330479000760320"
                ]
            },
            "conversation_id": "1552330482830159872",
            "edit_history_tweet_ids": [
                "1552330482830159872"
            ],
            "id": "1552330482830159872",
            "text": "Did you know?\n\nThere's a Python library called art you can use to create ASCII art (visual shape made from special characters or letters). https://t.co/SsKtw8F60X"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552330479000760320",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYr8WJbaMAASLzl.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1551968094456688640",
            "edit_history_tweet_ids": [
                "1551968096537022465"
            ],
            "id": "1551968096537022465",
            "text": "Read more about Django permissions:\nhttps://t.co/cypF3pweMW"
        }
    },
    {
        "data": {
            "conversation_id": "1551968094456688640",
            "id": "1551968094456688640",
            "edit_history_tweet_ids": [
                "1551968094456688640"
            ],
            "attachments": {
                "media_keys": [
                    "3_1551968089675141120"
                ]
            },
            "text": "Django tip:\n\nYou can add custom permissions to a Django model (you still have to enforce it in the views) \ud83d\udc47 https://t.co/WCSrYFfroL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551968089675141120",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYmywT_UEAA7aIP.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Asynchronous Tasks with FastAPI and Celery\n\nhttps://t.co/B6X9IsakxR\n\nLooks at how to configure Celery to handle long-running tasks in a FastAPI app.\n\n#FastAPI #Python @FastAPI",
            "id": "1551911184626065408",
            "edit_history_tweet_ids": [
                "1551911184626065408"
            ],
            "conversation_id": "1551911184626065408"
        }
    },
    {
        "data": {
            "text": "Read more about Django permissions:\nhttps://t.co/cypF3pweMW",
            "id": "1551605706826006528",
            "edit_history_tweet_ids": [
                "1551605706826006528"
            ],
            "conversation_id": "1551605705177964544"
        }
    },
    {
        "data": {
            "id": "1551605705177964544",
            "edit_history_tweet_ids": [
                "1551605705177964544"
            ],
            "attachments": {
                "media_keys": [
                    "3_1551605701423730688"
                ]
            },
            "text": "Django tip:\n\nA perms variable is available by default in a Django template, meaning you can render the content based on the permissions: https://t.co/H1dwEeAEoZ",
            "conversation_id": "1551605705177964544"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551605701423730688",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYhpKijVEAAwdCF.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1551551042940465152"
            ],
            "text": "Creating a Custom User Model in Django\n\nhttps://t.co/jlMbZ2qXF0 \n\nThis post explains step-by-step how to create a custom User model in Django so that an email address can be used as the primary user identifier instead of a username.\n\n#Django #Python",
            "id": "1551551042940465152",
            "conversation_id": "1551551042940465152"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1551243317102661634"
            ],
            "id": "1551243317102661634",
            "text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14",
            "conversation_id": "1551243314648690688"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1551243311054462976"
                ]
            },
            "text": "Django tip:\n\nTo enforce permissions in function-based views, you can use the permission_required decorator \ud83d\udc47 https://t.co/3qef3StjSe",
            "conversation_id": "1551243314648690688",
            "edit_history_tweet_ids": [
                "1551243314648690688"
            ],
            "id": "1551243314648690688"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551243311054462976",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYcfkpOaIAAOTBQ.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1551206429222117378",
            "id": "1551206429222117378",
            "edit_history_tweet_ids": [
                "1551206429222117378"
            ],
            "text": "Dockerizing Masonite with Postgres, Gunicorn, and Nginx \n\nhttps://t.co/BP8VOd9Hxs\n\n(Updated the tutorial to support Masonite 4! \u2728)\n\n@masoniteproject #Python #webdev"
        }
    },
    {
        "data": {
            "conversation_id": "1550880931207995392",
            "text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14",
            "edit_history_tweet_ids": [
                "1550880933255221248"
            ],
            "id": "1550880933255221248"
        }
    },
    {
        "data": {
            "conversation_id": "1550880931207995392",
            "id": "1550880931207995392",
            "edit_history_tweet_ids": [
                "1550880931207995392"
            ],
            "attachments": {
                "media_keys": [
                    "3_1550880927252787201"
                ]
            },
            "text": "Django tip:\n\nTo enforce permissions in class-based views, you can use the PermissionRequiredMixin from django.contrib.auth.mixins \ud83d\udc47 https://t.co/YKBAvaZ0of"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550880927252787201",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYXV_IXUsAEeT8A.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1550852091534577671",
            "id": "1550852091534577671",
            "edit_history_tweet_ids": [
                "1550852091534577671"
            ],
            "text": "Microservices and Team Culture\n\nhttps://t.co/MR1Da1MPTd \n\n\ud83d\udd38Explains the concept of microservices\n\ud83d\udd38Looks at the kind of team culture or practices that are required in order to successfully adopt a microservices architecture design approach\n\nby @LuKE9ine\n\n#Microservices"
        }
    },
    {
        "data": {
            "conversation_id": "1550556115867504645",
            "edit_history_tweet_ids": [
                "1550556115867504645"
            ],
            "id": "1550556115867504645",
            "text": "Logging in Python: A Developer\u2019s Guide \n\nhttps://t.co/y7Qqph0m9H \n\nvia @getsentry \n\n#Python"
        }
    },
    {
        "data": {
            "conversation_id": "1550518541870174208",
            "id": "1550518546253225984",
            "edit_history_tweet_ids": [
                "1550518546253225984"
            ],
            "text": "Read more about Django permissions:\nhttps://t.co/cypF3pweMW"
        }
    },
    {
        "data": {
            "conversation_id": "1550518541870174208",
            "id": "1550518541870174208",
            "edit_history_tweet_ids": [
                "1550518541870174208"
            ],
            "attachments": {
                "media_keys": [
                    "3_1550518537516490752"
                ]
            },
            "text": "Django tip:\n\nInstead of handling permissions for a single user, you can use groups and group-level permissions \ud83d\udc47 https://t.co/MxFcx5Cg0h"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550518537516490752",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYSMZRZUIAAHwEH.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1550495349726494720",
            "text": "Running Flower in Production\n\nhttps://t.co/2usVdmQ1Xe\n\nLooks at how to configure Flower (Celery monitoring tool) with basic authentication running behind Nginx with Docker.\n\n(Just updated! \ud83d\ude80)\n\n#Python #Celery #DevOps",
            "edit_history_tweet_ids": [
                "1550495349726494720"
            ],
            "id": "1550495349726494720"
        }
    },
    {
        "data": {
            "id": "1550156154642518016",
            "edit_history_tweet_ids": [
                "1550156154642518016"
            ],
            "conversation_id": "1550156152499245057",
            "text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14"
        }
    },
    {
        "data": {
            "id": "1550156152499245057",
            "edit_history_tweet_ids": [
                "1550156152499245057"
            ],
            "conversation_id": "1550156152499245057",
            "text": "Django tip:\n\nYou can check if a user has permission with the has_perm() method. https://t.co/TL35JddWiZ",
            "attachments": {
                "media_keys": [
                    "3_1550156148942053376"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550156148942053376",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYNCzewUIAAWiCG.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1550119640679845894"
            ],
            "conversation_id": "1550119640679845894",
            "id": "1550119640679845894",
            "text": "Setting up a Private PyPI Server\n\nhttps://t.co/JLWG5kRswp \n\nLooks at how to set up your own private PyPI server using pypiserver, a PyPI compatible server, and Docker, hosted on an AWS EC2 instance.\n\n(just updated! \ud83d\udcaa)\n\n#Python #PyPI #Docker"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1549793765027905536"
            ],
            "text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14",
            "conversation_id": "1549793762766860288",
            "id": "1549793765027905536"
        }
    },
    {
        "data": {
            "id": "1549793762766860288",
            "edit_history_tweet_ids": [
                "1549793762766860288"
            ],
            "conversation_id": "1549793762766860288",
            "text": "Django tip:\n\nWith django.contrib.auth, Django automatically creates add, change, delete and view permissions for each Django model.\nEach permission is named like this: {app}.{action}_{model_name}\n\nYou can also see (and set) those permissions in Django admin \ud83d\udc47 https://t.co/KcDRcGtq5o",
            "attachments": {
                "media_keys": [
                    "3_1549793759063588864"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1549793759063588864",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYH5NnQaQAAd-U5.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1549764705392132098"
            ],
            "conversation_id": "1549764705392132098",
            "id": "1549764705392132098",
            "text": "Flask Stripe Subscriptions\n\nhttps://t.co/zvgRAEMiKm\n\nSet up and collect monthly recurring subscription payments with Flask and Stripe.\n\n(Just updated! \ud83d\udcaa)\n\n#Flask #Python #WebDev @StripeDev"
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1549431374196527104",
            "edit_history_tweet_ids": [
                "1549431374196527104"
            ],
            "conversation_id": "1549431369922592776"
        }
    },
    {
        "data": {
            "conversation_id": "1549431369922592776",
            "edit_history_tweet_ids": [
                "1549431373156724736"
            ],
            "id": "1549431373156724736",
            "text": "Source: https://t.co/cypF3pOo14"
        }
    },
    {
        "data": {
            "id": "1549431372166885376",
            "edit_history_tweet_ids": [
                "1549431372166885376"
            ],
            "text": "Authentication answers the question 'who are you?' while authorization answers 'what can you do?'.",
            "conversation_id": "1549431369922592776"
        }
    },
    {
        "data": {
            "text": "Authentication is the process of confirming if a user has access to a system. \n\nAuthorization pertains to what the \"authenticated\" user can do in a system.",
            "id": "1549431371013074946",
            "edit_history_tweet_ids": [
                "1549431371013074946"
            ],
            "conversation_id": "1549431369922592776"
        }
    },
    {
        "data": {
            "text": "Do you know the difference between authentication and authorization?\n\ud83e\uddf5",
            "id": "1549431369922592776",
            "edit_history_tweet_ids": [
                "1549431369922592776"
            ],
            "conversation_id": "1549431369922592776"
        }
    },
    {
        "data": {
            "conversation_id": "1549400298120253454",
            "text": "Guide to Unit Testing Vue Components  \n\n(just refreshed the article)\n\n\ud83d\udd38Why you should write unit tests\n\ud83d\udd38What you should (and should not) unit test\n\ud83d\udd38How to write unit tests\n\nby @patkennedy79\n \nhttps://t.co/hTSRMSnpYs\n\n#Vue #JavaScript #testing",
            "edit_history_tweet_ids": [
                "1549400298120253454"
            ],
            "id": "1549400298120253454"
        }
    },
    {
        "data": {
            "id": "1549068989287899137",
            "edit_history_tweet_ids": [
                "1549068989287899137"
            ],
            "conversation_id": "1549068987484385281",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "conversation_id": "1549068987484385281",
            "edit_history_tweet_ids": [
                "1549068987484385281"
            ],
            "id": "1549068987484385281",
            "attachments": {
                "media_keys": [
                    "3_1549068983978332161"
                ]
            },
            "text": "Did you know?\n\nThere's a Python library that tells you jokes. https://t.co/JS4VJ9UWpr"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1549068983978332161",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FX9mCJqakAE6wqT.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1548777335696117760",
            "id": "1548777335696117760",
            "text": "Summary of common code smells\n\nhttps://t.co/2xiGCDI8tn",
            "edit_history_tweet_ids": [
                "1548777335696117760"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1548706603020734464",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "edit_history_tweet_ids": [
                "1548706605494984705"
            ],
            "id": "1548706605494984705"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1548706598746738688"
                ]
            },
            "text": "Python tip:\n\nOne of the types Pythons typing module provides is a TypedDict. \n\nTypedDict specifies a dictionary type with a certain set of keys, where each key is associated with a value of a consistent type. https://t.co/DZPDfRKPsc",
            "conversation_id": "1548706603020734464",
            "edit_history_tweet_ids": [
                "1548706603020734464"
            ],
            "id": "1548706603020734464"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1548706598746738688",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FX4ccjeaUAA1c2S.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1548677374274899971",
            "edit_history_tweet_ids": [
                "1548677374274899971"
            ],
            "id": "1548677374274899971",
            "text": "Async in Flask 2.0 \n\nhttps://t.co/Y6PQAzSMTa \n\nThis article looks at Flask 2.0's new async functionality and how to leverage it in your Flask projects.\n\nby @patkennedy79\n \n#Flask #Python"
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1548344217029619714",
            "edit_history_tweet_ids": [
                "1548344219085176832"
            ],
            "id": "1548344219085176832"
        }
    },
    {
        "data": {
            "id": "1548344217029619714",
            "attachments": {
                "media_keys": [
                    "3_1548344212982464517"
                ]
            },
            "text": "Python tip:\n\nAlthough Pythons typing module provides types for type hinting, you're not limited only to them.\n\nYou can use any other type. For example, UUID \ud83d\udc47 https://t.co/JAuXyPWs0M",
            "edit_history_tweet_ids": [
                "1548344217029619714"
            ],
            "conversation_id": "1548344217029619714"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1548344212982464517",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXzS27TaAAUkKwY.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1548318059370205186"
            ],
            "id": "1548318059370205186",
            "text": "Dockerizing Django with Postgres, Gunicorn, and Traefik\n\nhttps://t.co/0A0C13jjfE \n\nLooks at how to set up Django with Postgres and Docker. For production environments, we'll add on Gunicorn, Traefik, and Let's Encrypt.\n\nby @pydantic\n\n#Django #Python @Traefik @LetsEncrypt",
            "conversation_id": "1548318059370205186"
        }
    },
    {
        "data": {
            "conversation_id": "1547981825292701698",
            "id": "1547981828610748416",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "edit_history_tweet_ids": [
                "1547981828610748416"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547981825292701698",
            "id": "1547981825292701698",
            "edit_history_tweet_ids": [
                "1547981825292701698"
            ],
            "attachments": {
                "media_keys": [
                    "3_1547981821543006208"
                ]
            },
            "text": "Python tip:\n\nTo enforce type hints, you can use mypy.\nmypy is a static type checker for Python. \n\nFor example, if we use the `List[float]` type hint for the function parameter and then provide a dictionary in a function call, this is what would happen when running mypy \ud83d\udc47 https://t.co/QF7XNWCTcL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547981821543006208",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXuJQ9_VQAAL5WG.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547619441118044160",
            "edit_history_tweet_ids": [
                "1547619443626217475"
            ],
            "id": "1547619443626217475",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1547619441118044160"
            ],
            "text": "Python tip:\n\nSince version 3.5, Python supports type hints.\nThey aren't enforced by Python, but there are third-party tools that check them (mypy, IDEs).\n\nNone of the examples below produces an error, although only one gives the correct result \ud83d\udc47\n\nType hints can help with that. https://t.co/wnrlJhhq55",
            "id": "1547619441118044160",
            "conversation_id": "1547619441118044160",
            "attachments": {
                "media_keys": [
                    "3_1547619436885995521"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547619436885995521",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXo_rZ8UcAEr2Qx.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1547571672005242882"
            ],
            "text": "OAuth2 in Python \n\nhttps://t.co/RfVES8xM68 \n\nThis article first provides an overview of Oauth2 concepts and then looks at how to implement OAuth2 with OAuthLib.\n\n#Python",
            "conversation_id": "1547571672005242882",
            "id": "1547571672005242882"
        }
    },
    {
        "data": {
            "text": "Review of Flask, From a Django Developer\n\nhttps://t.co/6tA20w8L57\n\nAre you familiar with Django, but you want to give Flask a try? \n\nThis article compares different aspects of both frameworks, so you can decide which one suits your needs.\n\nby @francofgp \n\n#Flask #Django #WebDev",
            "id": "1547292676264951810",
            "edit_history_tweet_ids": [
                "1547292676264951810"
            ],
            "conversation_id": "1547292676264951810"
        }
    },
    {
        "data": {
            "id": "1547257052568768513",
            "edit_history_tweet_ids": [
                "1547257052568768513"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1547257050257768448"
        }
    },
    {
        "data": {
            "conversation_id": "1547257050257768448",
            "edit_history_tweet_ids": [
                "1547257050257768448"
            ],
            "id": "1547257050257768448",
            "attachments": {
                "media_keys": [
                    "3_1547257046349017088"
                ]
            },
            "text": "Did you know?\n\nThere's a Python library that you can use to access and parse data from Wikipedia. https://t.co/hYu30RlEjq"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547257046349017088",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXj2Ff_acAAjX1E.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1547220713634992128"
            ],
            "conversation_id": "1547220713634992128",
            "id": "1547220713634992128",
            "text": "Permissions in Django Rest Framework \n\nhttps://t.co/fXRNOXRm3X \n\nThis article looks at:\n\n\ud83d\udd38How DRF permissions work\n\ud83d\udd38The differences between 'has_permission' and 'has_object_permission'\n\ud83d\udd38When to use 'has_permission' and 'has_object_permission'\n\nby @GirlLovesToCode\n\n#Django \ud83d\udc0d"
        }
    },
    {
        "data": {
            "conversation_id": "1546894664657420289",
            "edit_history_tweet_ids": [
                "1546894666377101312"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1546894666377101312"
        }
    },
    {
        "data": {
            "conversation_id": "1546894664657420289",
            "edit_history_tweet_ids": [
                "1546894664657420289"
            ],
            "id": "1546894664657420289",
            "attachments": {
                "media_keys": [
                    "3_1546894661104861187"
                ]
            },
            "text": "Did you know?\n\nPython Standard Library includes module cmath that provides access to mathematical functions for complex numbers. https://t.co/p2430bt7JE"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546894661104861187",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXesf5wagAMinz4.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546852822746107905",
            "id": "1546852822746107905",
            "edit_history_tweet_ids": [
                "1546852822746107905"
            ],
            "text": "Developing RESTful APIs with Django REST Framework\n - new course!\n\nhttps://t.co/sIRe4wYTcf\n\n1\u20e3Views, Routers, and Serializers\n2\u20e3Auth and throttling\n3\u20e3Filters, pagination, and Browsable API\n4\u20e3Documenting, versioning, and deployment\n\nby @GirlLovesToCode \n\n#Django @RestFramework"
        }
    },
    {
        "data": {
            "conversation_id": "1546587239559438347",
            "id": "1546587239559438347",
            "edit_history_tweet_ids": [
                "1546587239559438347"
            ],
            "text": "Test-Driven Development helps:\n\n1. Reduce costs, bugs, coupling\n2. Make refactoring &amp; rewriting easier &amp; faster (\"make it work\" w/ red &amp; green stages, then refactor \"to make it right\")\n3. Increase confidence that the code works as expected\n\nhttps://t.co/LBUPvwfPIf\n\n#tdd #testing"
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1546532275885854720",
            "edit_history_tweet_ids": [
                "1546532278201122817"
            ],
            "id": "1546532278201122817"
        }
    },
    {
        "data": {
            "id": "1546532275885854720",
            "attachments": {
                "media_keys": [
                    "3_1546532271595069440"
                ]
            },
            "text": "Python tip:\n\nPython standard library includes an uuid module that you can use to generate a Universally Unique Identifier.\n\nThere are 4 different versions of UUID the module can produce (v 1, 3, 4, and 5).\n\nFunction uuid4 produces a random UUID and is probably used the most. https://t.co/6I8zzCc1yu",
            "edit_history_tweet_ids": [
                "1546532275885854720"
            ],
            "conversation_id": "1546532275885854720"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546532271595069440",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXZi6DoaIAAmMuU.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546490063537807362",
            "id": "1546490063537807362",
            "edit_history_tweet_ids": [
                "1546490063537807362"
            ],
            "text": "Dockerizing Flask with Postgres, Gunicorn, and Traefik \n\nhttps://t.co/57r1gNxI10 \n\nLooks at how to set up Flask with Postgres and Docker. For production environments, we'll add on Gunicorn, Traefik, and Let's Encrypt.\n\nby @pydantic\n\n#Flask #Python @Traefik"
        }
    },
    {
        "data": {
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1546169887483039750",
            "edit_history_tweet_ids": [
                "1546169889781850114"
            ],
            "id": "1546169889781850114"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1546169883159048192"
                ]
            },
            "conversation_id": "1546169887483039750",
            "id": "1546169887483039750",
            "edit_history_tweet_ids": [
                "1546169887483039750"
            ],
            "text": "Python tip:\n\nPython standard library includes a webbrowser module that allows you to open a web-based document in a browser.\n\ud83d\udc47 https://t.co/q8Z53716Il"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546169883159048192",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXUZURgaMAAi5n6.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546135230863523840",
            "edit_history_tweet_ids": [
                "1546135230863523840"
            ],
            "id": "1546135230863523840",
            "text": "Deep Dive Into Flask Guide\n\nhttps://t.co/RhZSpmCLdx\n\nCovers topics like:\n\n1\u20e3The Application and Request Contexts\n2\u20e3Werkzeug\n3\u20e3Sessions\n4\u20e3Security\n5\u20e3Testing\n6\u20e3Asynchronous route handlers\n\nDeveloped by @patkennedy79\n \n#Flask @PalletsTeam"
        }
    },
    {
        "data": {
            "conversation_id": "1545944550954475521",
            "edit_history_tweet_ids": [
                "1545944550954475521"
            ],
            "id": "1545944550954475521",
            "text": "Asynchronous Tasks with Django and Celery\n\nhttps://t.co/m0ljbuKqHA\n\nObjectives:\n\n\ud83d\udd38Integrate Celery into a Django app and create tasks\n\ud83d\udd38Containerize Django, Celery, and Redis with Docker\n\ud83d\udd38Test a Celery task with both unit and integration tests\n\n#Django #Python"
        }
    },
    {
        "data": {
            "conversation_id": "1545807499852681216",
            "id": "1545807502410821632",
            "edit_history_tweet_ids": [
                "1545807502410821632"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "id": "1545807499852681216",
            "edit_history_tweet_ids": [
                "1545807499852681216"
            ],
            "attachments": {
                "media_keys": [
                    "3_1545807495608020992",
                    "3_1545807495498588163"
                ]
            },
            "text": "Python tip:\n\nDid you know you can generate a complete HTML page with a yearly calendar using Python? https://t.co/yokgWEA326",
            "conversation_id": "1545807499852681216"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1545807495608020992",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXPPuiraMAAB24n.png"
                },
                {
                    "media_key": "3_1545807495498588163",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXPPuiRUYAM6Lqq.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1545445113564114944",
            "id": "1545445118538547200",
            "edit_history_tweet_ids": [
                "1545445118538547200"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1545445109478879232"
                ]
            },
            "edit_history_tweet_ids": [
                "1545445113564114944"
            ],
            "conversation_id": "1545445113564114944",
            "id": "1545445113564114944",
            "text": "Python tip:\n\nYou can get a year\u2019s calendar in a multi-line string using Python's Calendar module.\n\nYou need to provide the year, and you can impact how it looks with optional parameters.\n\nYou can use formatyear to get the string or pryear to directly print the output. https://t.co/63NEZ0KqVw"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1545445109478879232",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXKGI5JacAA0Dl9.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1545389604454674433"
            ],
            "conversation_id": "1545389604454674433",
            "id": "1545389604454674433",
            "text": "Working with Django and Celery\n\nhttps://t.co/viiR7OSC6A\n\nGuide:\n\n1\u20e3 Asynchronous Tasks with Django and Celery\n2\u20e3 Periodic Tasks in Django with Celery and Docker\n3\u20e3 Automatically Retrying Failed Celery Tasks\n4\u20e3 Working with Celery and Database Transactions\n\n#Django #Celery"
        }
    },
    {
        "data": {
            "conversation_id": "1545082723697455104",
            "id": "1545082725845319680",
            "edit_history_tweet_ids": [
                "1545082725845319680"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "text": "Python tip:\n\nPython's Calendar module lets you get a month\u2019s calendar in a multi-line string.\nRequired parameters are the year and the month.\n\nYou can use formatmonth to generate the string or prmonth to directly print it. https://t.co/uMBzS0atOB",
            "id": "1545082723697455104",
            "edit_history_tweet_ids": [
                "1545082723697455104"
            ],
            "attachments": {
                "media_keys": [
                    "3_1545082720032018432"
                ]
            },
            "conversation_id": "1545082723697455104"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1545082720032018432",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXE8jDQaUAATDJ0.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1544720339644530689",
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "edit_history_tweet_ids": [
                "1544720339644530689"
            ],
            "conversation_id": "1544720337207562240"
        }
    },
    {
        "data": {
            "conversation_id": "1544720337207562240",
            "id": "1544720337207562240",
            "edit_history_tweet_ids": [
                "1544720337207562240"
            ],
            "attachments": {
                "media_keys": [
                    "3_1544720332766199810"
                ]
            },
            "text": "Python tip:\n\nYou can get a list of all months, containing all the dates for a year with a yeardatescalendar.\n\nYou need to provide the date and width as arguments.\n\nThe return looks like this: \n[list of months[month[week[datetime object]]]] https://t.co/N1WlI3lO5a"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544720332766199810",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW_y9VfaQAIkWSq.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1544692782090035201",
            "text": "Continuously Deploying Django to DigitalOcean with Docker and GitLab\n\nhttps://t.co/6kLYi5SfXD\n\nObjectives:\n\n\ud83d\udd38Deploy #Django to DigitalOcean with #Docker\n\ud83d\udd38Configure GitLab CI to continuously deploy Django to DigitalOcean\n\ud83d\udd38Configure @DigitalOcean's Managed Databases",
            "edit_history_tweet_ids": [
                "1544692782090035201"
            ],
            "conversation_id": "1544692782090035201"
        }
    },
    {
        "data": {
            "conversation_id": "1544418253677666309",
            "id": "1544418253677666309",
            "text": "Parallelism, Concurrency, and AsyncIO in Python - by example\n\nhttps://t.co/1vUrkMMz6a\n\nLooks at how to speed up CPU-bound and IO-bound operations with multiprocessing, threading, and AsyncIO and when you should use each.\n\nby @pydantic\n\n#Python",
            "edit_history_tweet_ids": [
                "1544418253677666309"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1544357947274559488",
            "edit_history_tweet_ids": [
                "1544357949199757312"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "id": "1544357949199757312"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1544357943398715392"
                ]
            },
            "conversation_id": "1544357947274559488",
            "id": "1544357947274559488",
            "edit_history_tweet_ids": [
                "1544357947274559488"
            ],
            "text": "Python tip:\n\nTo get a list of the weeks in a certain month, INCLUDING weekday numbers, you can use monthdays2calendar.\n\nYou need to provide the date and month as arguments.\n\nA list of lists, each containing seven tuples of day numbers and weekday numbers, is returned. https://t.co/dktuH7kHTM"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544357943398715392",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW6pXf5VUAAOx3v.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1544067636354498560",
            "edit_history_tweet_ids": [
                "1544067636354498560"
            ],
            "id": "1544067636354498560",
            "text": "The Complete Python Development Guide\n\nhttps://t.co/816EWFQ2Md\n\nWant to take your Python development to the next level?\n\nDevelop Python apps with confidence by mastering the tools needed to ship well-tested, high-quality code.\n\nby @jangiacomelli\n\n#Python"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1543995561665527809"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "conversation_id": "1543995558834348032",
            "id": "1543995561665527809"
        }
    },
    {
        "data": {
            "conversation_id": "1543995558834348032",
            "id": "1543995558834348032",
            "edit_history_tweet_ids": [
                "1543995558834348032"
            ],
            "attachments": {
                "media_keys": [
                    "3_1543995554828812289"
                ]
            },
            "text": "Python tip:\n\nTo get a list of the weeks in a certain month, you can use the monthdatescalendar.\n\nYou need to provide the date and month as arguments.\n\nA list of lists, each containing 7 https://t.co/JA2fLO1bHw objects is returned. https://t.co/NTglCSHjMd"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543995554828812289",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1fxtRagAEiqvH.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1543633170385752065",
            "id": "1543633172273176576",
            "edit_history_tweet_ids": [
                "1543633172273176576"
            ],
            "text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14"
        }
    },
    {
        "data": {
            "text": "Python tip:\n\nTo get complete dates (including a day in a week) for a certain month, you can use the itermonthdays4 function.\n\nReturned days will be tuples, consisting of a year, a month, a day of the month, and a week day number. https://t.co/2mBww1Xj4P",
            "id": "1543633170385752065",
            "edit_history_tweet_ids": [
                "1543633170385752065"
            ],
            "attachments": {
                "media_keys": [
                    "3_1543633166455676930"
                ]
            },
            "conversation_id": "1543633170385752065"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543633166455676930",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWwWL7YaIAIvJTR.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1543588944117383170",
            "id": "1543588944117383170",
            "edit_history_tweet_ids": [
                "1543588944117383170"
            ],
            "text": "Behavior-Driven Development with Django and Aloe \n\nhttps://t.co/4fs73Qqx4Q\n\nObjectives:\n\n- Describe and practice behavior-driven development (BDD)\n- Explain how to implement BDD in a new project\n- Test your Django applications using Aloe\n\n#Django #Python #Testing"
        }
    },
    {
        "data": {
            "conversation_id": "1543309030898241536",
            "id": "1543309030898241536",
            "edit_history_tweet_ids": [
                "1543309030898241536"
            ],
            "text": "Built-in Permission Classes in Django Rest Framework \n\nhttps://t.co/1UqVppOTR9 \n\nby @GirlLovesToCode\n \n#Django"
        }
    }
]