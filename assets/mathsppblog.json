[
    {
        "data": {
            "id": "1603784961911390209",
            "conversation_id": "1603784955926118402",
            "text": "These are two simpler examples of what ChatGPT got right \ud83d\udc47\n\nBut I saw amazing results with things like:\n\n - asyncio\n - list comprehensions\n - decorators\n - dunder methods\n - ... https://t.co/ON2Z4irWfy",
            "attachments": {
                "media_keys": [
                    "3_1603784947721969665",
                    "3_1603784947973627907"
                ]
            },
            "edit_history_tweet_ids": [
                "1603784961911390209"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603784947721969665",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkHJ6akWIAEpMXb.jpg"
                },
                {
                    "media_key": "3_1603784947973627907",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkHJ6bgWIAM2nuO.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1603784955926118402",
            "edit_history_tweet_ids": [
                "1603784955926118402"
            ],
            "id": "1603784955926118402",
            "text": "Today I ran a Python \ud83d\udc0d REPL inside ChatGPT!\n\nI documented the amazing things ChatGPT knew and did and I also took note of its silly mistakes...\n\nHere's a read-up:\n\nhttps://t.co/AVZ5lxqGbo"
        }
    },
    {
        "data": {
            "id": "1603709489726869505",
            "conversation_id": "1603709489726869505",
            "edit_history_tweet_ids": [
                "1603709489726869505"
            ],
            "text": "Spent some time playing with #ChatGPT this morning.\n\nAsked it to interpret my Python \ud83d\udc0d code.\n\nIt even understands async code!\n\nMaybe @willmcgugan should've hired ChatGPT instead of me \ud83e\udd37\n\nBlog post coming out soon (\ud83d\udd17https://t.co/KBf3Rsdnil) https://t.co/3yrgYa89Ec",
            "attachments": {
                "media_keys": [
                    "3_1603708846752546816"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603708846752546816",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkGEswXWQAAwak7.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "7_1601262106233520133"
                ]
            },
            "text": "After a lot of tinkering, filing bugs and fixing them, and a couple of headaches, I have my Secret Santa \ud83c\udf85 app in a state I enjoy.\n\nBelow \ud83d\udc47 is a demo.\n\nLink to the code: https://t.co/g95axXRAOw https://t.co/HzxvbTksXc",
            "id": "1601262212450258944",
            "conversation_id": "1601262212450258944",
            "edit_history_tweet_ids": [
                "1601262212450258944"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1601262106233520133",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1601172373276749824"
            ],
            "id": "1601172373276749824",
            "conversation_id": "1601172373276749824",
            "text": "Python \ud83d\udc0d continues to be a game-changer in the world of programming. From its robust libraries to its versatile capabilities, this language never ceases to impress me.\n\nHow do YOU feel?\n\n#python #coding #programming"
        }
    },
    {
        "data": {
            "text": "Another Secret Santa \ud83c\udf81\ud83c\udf85 app update.\n\nI reworked the way the matches are generated to be much faster and I improved the display of the results a little bit.\n\nFor this last change I thought it would be fun to record the screen and then present a timelapse of what I did \ud83d\udc47 https://t.co/sPs2p4lnEz",
            "id": "1600548826192162816",
            "conversation_id": "1600548826192162816",
            "attachments": {
                "media_keys": [
                    "7_1600548713910485006"
                ]
            },
            "edit_history_tweet_ids": [
                "1600548826192162816"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1600548713910485006",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "text": "TL;DR:\n\nPython \ud83d\udc0d:\n\n \ud83d\udc49 support for OOP and many other paradigms\n \ud83d\udc49 dynamically-typed\n \ud83d\udc49 big standard library\n \ud83d\udc49 huge, active ecosystem\n \ud83d\udc49 popular for ML and data science\n \ud83d\udc49 low barrier to entry for beginners...\n \ud83d\udc49 and huge potential for experienced devs!",
            "id": "1600499946414907398",
            "conversation_id": "1600499911690166275",
            "edit_history_tweet_ids": [
                "1600499946414907398"
            ]
        }
    },
    {
        "data": {
            "id": "1600499943562690561",
            "conversation_id": "1600499911690166275",
            "edit_history_tweet_ids": [
                "1600499943562690561"
            ],
            "text": "As I've heard @reuvenmlerner put it so many times, Python is a language with low floors and very high ceilings.\n\nIn other words, the barrier to entry is very low and the potential is very high!"
        }
    },
    {
        "data": {
            "id": "1600499941247537157",
            "conversation_id": "1600499911690166275",
            "text": "Overall, Python \ud83d\udc0d is a versatile language that can be used for many different purposes.\n\nWhether you're a beginner looking to learn to code or an experienced developer looking to build a complex application, Python is worth considering.",
            "edit_history_tweet_ids": [
                "1600499941247537157"
            ]
        }
    },
    {
        "data": {
            "id": "1600499939070681090",
            "edit_history_tweet_ids": [
                "1600499939070681090"
            ],
            "conversation_id": "1600499911690166275",
            "text": "Python \ud83d\udc0d is also a VERY popular language for data science and machine learning.\n\nIt has powerful libraries like keras, TensorFlow, and scikit-learn, that make it easy to build and train machine learning models."
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d also has a vibrant ecosystem of third-party libraries and frameworks that you can use to extend its functionality.\n\nSome of the most popular ones include:\n\ud83d\udc49 Django \ud83c\udf10 for web development\n\ud83d\udc49 NumPy \ud83e\uddee for scientific computing\n\ud83d\udc49 Pandas \ud83d\udc3c for data analysis",
            "id": "1600499936952549376",
            "conversation_id": "1600499911690166275",
            "edit_history_tweet_ids": [
                "1600499936952549376"
            ]
        }
    },
    {
        "data": {
            "text": "Another key feature of Python \ud83d\udc0d is its large standard library, which provides many common tools that you can use in your code without having to write them yourself.\n\nThis means you can do a lot with just a few lines of code.\n\nIt's all just one `import` away.",
            "id": "1600499934725275650",
            "edit_history_tweet_ids": [
                "1600499934725275650"
            ],
            "conversation_id": "1600499911690166275"
        }
    },
    {
        "data": {
            "text": "As a wise uncle once said, https://t.co/c55H22EPjJ",
            "attachments": {
                "media_keys": [
                    "16_1600499923363012608"
                ]
            },
            "id": "1600499932003274759",
            "edit_history_tweet_ids": [
                "1600499932003274759"
            ],
            "conversation_id": "1600499911690166275"
        },
        "includes": {
            "media": [
                {
                    "media_key": "16_1600499923363012608",
                    "type": "animated_gif"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d is also a dynamically-typed language, which means you don't have to specify the data type of a variable when you declare it.\n\nThis makes it easy to quickly write and test code.\n\n(It can also make your code more difficult to read if you don't think things through.)",
            "edit_history_tweet_ids": [
                "1600499919931990021"
            ],
            "id": "1600499919931990021",
            "conversation_id": "1600499911690166275"
        }
    },
    {
        "data": {
            "id": "1600499917348392962",
            "conversation_id": "1600499911690166275",
            "edit_history_tweet_ids": [
                "1600499917348392962"
            ],
            "text": "One of the key features of Python \ud83d\udc0d is its support for OOP, which is a way of organizing your code into classes and objects.\n\nThis makes it easy to create modular and reusable code.\n\nHowever, Python is very flexible because it supports many other paradigms."
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d is a high-level, interpreted language that is easy to learn and use.\n\nIt's a great language for beginners because it has a simple syntax and reads like English.",
            "id": "1600499914252886017",
            "edit_history_tweet_ids": [
                "1600499914252886017"
            ],
            "conversation_id": "1600499911690166275"
        }
    },
    {
        "data": {
            "text": "How is Python \ud83d\udc0d as a programming language?\n\nIf someone asked me that question, this is what I would say \ud83d\udc47\n\nTake a look and let me know what I'm missing or what you would actually remove!",
            "id": "1600499911690166275",
            "conversation_id": "1600499911690166275",
            "edit_history_tweet_ids": [
                "1600499911690166275"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1599821807292293121"
            ],
            "id": "1599821807292293121",
            "text": "Now you can remove names that you didn't mean to add to the draw!\n\nWhat is the next feature that I should build? \u2692\ufe0f https://t.co/EbMVJNFmCK",
            "conversation_id": "1599077776648065025",
            "attachments": {
                "media_keys": [
                    "7_1599821590396649472"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1599821590396649472",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1599803248613158913"
            ],
            "attachments": {
                "media_keys": [
                    "3_1599803231512760330"
                ]
            },
            "id": "1599803248613158913",
            "conversation_id": "1599077776648065025",
            "text": "Added a nice custom footer \ud83d\udc47\n\nNext, I think I'll work on the ability to remove people from the list of entrants. https://t.co/UZvL3RmIgE"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599803231512760330",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjOkkBzXEAol8yK.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "7_1599094253627613184"
                ]
            },
            "conversation_id": "1599077776648065025",
            "edit_history_tweet_ids": [
                "1599094499879239680"
            ],
            "text": "Played around a bit with the messaging system to create the results screen in a better way.\n\nNow I also have a \u201creset draw\u201d button to create a new draw.\n\nI have some layout issues to fix now, though. https://t.co/exc1Tj6HOz",
            "id": "1599094499879239680"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1599094253627613184",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1599087984011538435"
            ],
            "id": "1599087984011538435",
            "text": "Progress is being made \ud83d\udcaa\n\nNow, I have a little check to see if I try to add the same person twice.\n\nI also have a basic results screen that shows the result of the draw. https://t.co/HtLtDFbOgY",
            "conversation_id": "1599077776648065025",
            "attachments": {
                "media_keys": [
                    "7_1599087820072783873"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1599087820072783873",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I banged my head against the new failing tests and the bug for a while, then I called it a day.\n\nI will keep writing about my progress here:\n\nhttps://t.co/wyFpgN7rdq",
            "id": "1599077949856133121",
            "edit_history_tweet_ids": [
                "1599077949856133121"
            ],
            "conversation_id": "1598634598220681219"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1599077776648065025"
            ],
            "attachments": {
                "media_keys": [
                    "7_1599077659081953280"
                ]
            },
            "id": "1599077776648065025",
            "conversation_id": "1599077776648065025",
            "text": "Yesterday I started developing a Secret Santa \ud83c\udf85 app with Textual.\n\nThen, I got sidetracked because I found a bug and started fixing it.\n\nNow, I'm going to keep working on the app.\n\nThis is a video of what I have so far:\n\n\ud83d\udc49 a welcome screen\n\ud83d\udc49 a screen to add names to the draw https://t.co/4LhJ19P1qd"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1599077659081953280",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1598705391738552321",
            "conversation_id": "1598634598220681219",
            "edit_history_tweet_ids": [
                "1598705391738552321"
            ],
            "text": "\ud83d\ude0c nothing like writing a couple of failing tests... https://t.co/Vc71uCydTR",
            "attachments": {
                "media_keys": [
                    "3_1598705370398064640"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598705370398064640",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi--EGcWAAAZKmI.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "16_1598678298090938368"
                ]
            },
            "conversation_id": "1598634598220681219",
            "edit_history_tweet_ids": [
                "1598678306282414080"
            ],
            "text": "Gotta take a detour here.\n\nFound the source of the bug and I think I know how to fix it.\n\nLet me add some (failing) tests and see if I can fix them. https://t.co/HzG0Xm33Iw",
            "id": "1598678306282414080"
        },
        "includes": {
            "media": [
                {
                    "media_key": "16_1598678298090938368",
                    "type": "animated_gif"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1598634598220681219",
            "id": "1598669354404646912",
            "text": "This video also shows a nice debugging \u201ctrick\u201d I do (and everyone else does):\n\nGive different background colours to your widgets to make sure you know what is in front of what, the size of each thing, etc.",
            "edit_history_tweet_ids": [
                "1598669354404646912"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1598634598220681219",
            "edit_history_tweet_ids": [
                "1598669350977896449"
            ],
            "id": "1598669350977896449",
            "attachments": {
                "media_keys": [
                    "7_1598669042306498561"
                ]
            },
            "text": "Hit a bug and also had my lunch break \ud83c\udf74\n\nThe bug: I have a Vertical container with `height: auto`, meaning it should be tall enough to hold its children.\n\nIn the video, I keep removing child labels and the container gets shorter, until it stretches wildly when it has 0 children. https://t.co/NYkxn5IFBg"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1598669042306498561",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Alright, so names can be added now!\n\nLet me add a \u201cGenerate \ud83c\udf81\u201d button and v0.0.0.0.0.1 of the app will be finished! https://t.co/sE5DVIissF",
            "attachments": {
                "media_keys": [
                    "7_1598643504254779393"
                ]
            },
            "id": "1598643703471562753",
            "edit_history_tweet_ids": [
                "1598643703471562753"
            ],
            "conversation_id": "1598634598220681219"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1598643504254779393",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1598634598220681219",
            "edit_history_tweet_ids": [
                "1598641183504433153"
            ],
            "id": "1598641183504433153",
            "attachments": {
                "media_keys": [
                    "3_1598640919242235905"
                ]
            },
            "text": "Looking much better now!\n\nNow, I'm gonna start with just letting the user type a bunch of names and then generate the draw from those. https://t.co/Ebh3HOmz52"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598640919242235905",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi-DcjLWYAEgEDK.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1598634598220681219",
            "edit_history_tweet_ids": [
                "1598636594642165761"
            ],
            "id": "1598636594642165761",
            "attachments": {
                "media_keys": [
                    "7_1598636577277755392"
                ]
            },
            "text": "If I run the app in development mode, I can live-edit the CSS and see what the changes look like! \u2728 https://t.co/N4k298YIEX"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1598636577277755392",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1598634598220681219",
            "conversation_id": "1598634598220681219",
            "text": "Today I'll be working on a Secret Santa \ud83c\udf85 app.\n\nI'll be building it with Textual.\n\nThis is my starting point, a welcome screen: https://t.co/h8xL5sBEGa",
            "attachments": {
                "media_keys": [
                    "3_1598634580373917703"
                ]
            },
            "edit_history_tweet_ids": [
                "1598634598220681219"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598634580373917703",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi99rlDX0AcfW4T.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1595724827087802370"
                ]
            },
            "conversation_id": "1595724934436868098",
            "edit_history_tweet_ids": [
                "1595724934436868098"
            ],
            "text": "Did you know that Python \ud83d\udc0d can round to the nearest tens, hundreds, thousands, etc?\n\nSee the examples below \ud83d\udc47\n\nWhat are the results missing here?\n\n&gt;&gt;&gt; num = 9182.7365\n&gt;&gt;&gt; round(num, -1)\n???\n&gt;&gt;&gt; round(num, -2)\n??? https://t.co/6R2aFkOkL3",
            "id": "1595724934436868098"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1595724827087802370",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiUnRpXXEAIbil8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1593554547494060033"
                ]
            },
            "conversation_id": "1593554788561653762",
            "id": "1593554788561653762",
            "text": "Having fun at @textualizeio, playing with squares and rectangles \ud83d\ude43 https://t.co/MH7pcYSJdU",
            "edit_history_tweet_ids": [
                "1593554788561653762"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1593554547494060033",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fh1xav2XgAEcSjZ.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1591130992244244480"
            ],
            "id": "1591130992244244480",
            "conversation_id": "1591130992244244480",
            "text": "So stoked!\n\nStarting from next week, if Textual breaks, you know whose fault it was \ud83d\ude43 https://t.co/N4sa0jieDA"
        }
    },
    {
        "data": {
            "conversation_id": "1590837026383106049",
            "id": "1590839454352429058",
            "text": "On top of everything, I don't even really know what this means because \u201cyou invented Python\u201d isn't even the typical \u201cmax grade\u201d.\n\nEvery single day I learn something new about Python!\nAnd I'm sure even the members of the Python core team learn new things relatively frequently..!",
            "edit_history_tweet_ids": [
                "1590839454352429058"
            ]
        }
    },
    {
        "data": {
            "id": "1590837026383106049",
            "edit_history_tweet_ids": [
                "1590837026383106049"
            ],
            "text": "I can't believe this interview question: \ud83e\udd26\n\n\u201cWhat is the level of your Python \ud83d\udc0d coding skill \u2013 say on a scale of 1-10 with 1 being beginner and 10 \"you invented Python?\"\u201d\n\nHonestly, who asks this in an interview question? \ud83d\ude21\n\nHow would you answer this, if you really had to?",
            "conversation_id": "1590837026383106049"
        }
    },
    {
        "data": {
            "conversation_id": "1590781232253530112",
            "edit_history_tweet_ids": [
                "1590781232253530112"
            ],
            "text": "Hey @nathanbarry, can we get a monospaced font for ConvertKit (broadcasts), please? \ud83d\ude4f\n\nIt would add so much value to creators like me, who dabble in the world of programming.\n\nIf it were Christmas and you were Santa, I'd even ask for a \u201ccode snippet\u201d block for emails \ud83d\ude01\ud83d\ude01",
            "id": "1590781232253530112"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1588863098848710656"
            ],
            "text": "Just in case Twitter goes under \u2620\ufe0f, join me and 15,000 others in the Mathspp Insider \ud83d\udce7\n\nIt's the newsletter that is taking your Python \ud83d\udc0d skills to the next level \ud83d\ude80\n\nSign up here \ud83d\udc47\n\nhttps://t.co/DOWZZCNEMI",
            "conversation_id": "1588863098848710656",
            "id": "1588863098848710656"
        }
    },
    {
        "data": {
            "id": "1588590685762224129",
            "edit_history_tweet_ids": [
                "1588590685762224129"
            ],
            "conversation_id": "1588589939100241920",
            "text": "TL;DR:\n\n \ud83d\udc49 Python \ud83d\udc0d functions take their parameters by position and/or name;\n \ud83d\udc49 keyword parameters come after positional ones;\n \ud83d\udc49 `*` forces parameters to its right to be keyword-only; and\n \ud83d\udc49 `/` forces parameters to its left to be positional-only."
        }
    },
    {
        "data": {
            "conversation_id": "1588589939100241920",
            "id": "1588590683052310528",
            "text": "If you enjoy diagrams like this, go ahead and retweet \ud83d\udd01 the first tweet of this mini thread to help me out \ud83d\ude4f\n\nI teach Python \ud83d\udc0d on the internet and I will teach YOU, if you want. You just have to follow me @mathsppblog \ud83d\ude09\n\nhttps://t.co/NT6Et1EyCx",
            "edit_history_tweet_ids": [
                "1588590683052310528"
            ]
        }
    },
    {
        "data": {
            "id": "1588589963079450625",
            "edit_history_tweet_ids": [
                "1588589963079450625"
            ],
            "attachments": {
                "media_keys": [
                    "3_1588589882502512641"
                ]
            },
            "conversation_id": "1588589939100241920",
            "text": "Finally, `/` and `*` can be mixed together for maximum havoc!\n\nTo the left of `/`, positional-only.\n\nTo the right of `*`, keyword-only.\n\nBetween the 2? Whatever you prefer! https://t.co/qzsMTgkzoc"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588589882502512641",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvOFNhXgAEn8CZ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1588589957349679105"
            ],
            "id": "1588589957349679105",
            "text": "If you decide to include a `/` in your parameter list, then the `/` says that all the parameters to the left of `/` must be passed in by position.\n\nThey become positional-only parameters.\n\nThe ones to the right of `/` can be positional or keyword, it is up to the user. https://t.co/NIUf7AXImZ",
            "conversation_id": "1588589939100241920",
            "attachments": {
                "media_keys": [
                    "3_1588589696401260547"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588589696401260547",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvN6YPXwAMolyR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1588589951028932608",
            "edit_history_tweet_ids": [
                "1588589951028932608"
            ],
            "attachments": {
                "media_keys": [
                    "3_1588589516184592384"
                ]
            },
            "conversation_id": "1588589939100241920",
            "text": "If you decide to include a `*` in your parameter list, then the `*` says that all the parameters to the right of `*` must be passed in by name.\n\nThey become keyword-only parameters.\n\nThe ones to the left of `*` can be positional or keyword, it is up to the user. https://t.co/wQewhpbX5F"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588589516184592384",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvNv44XoAAU5wh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "A regular parameter list only lists the names of the parameters.\n\nYou choose which ones you pass in by position, and which ones you pass in by name.\n\nHowever, when a parameter is used by name, all others to the right must be by name as well.\n\nE.g., f(1, arg2=2, 3) does NOT work. https://t.co/6sg95xhM0q",
            "attachments": {
                "media_keys": [
                    "3_1588589227369005057"
                ]
            },
            "id": "1588589945534701568",
            "edit_history_tweet_ids": [
                "1588589945534701568"
            ],
            "conversation_id": "1588589939100241920"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588589227369005057",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvNfE9XgAEgWQv.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d functions take positional and keyword arguments.\n\nYou can tell Python to force arguments to be either positional-only or keyword-only.\n\nHere is how \ud83d\udc47 https://t.co/hg6NLQpDgN",
            "attachments": {
                "media_keys": [
                    "3_1588589052634308610",
                    "3_1588589065951236097",
                    "3_1588589079427514375",
                    "3_1588589087992283136"
                ]
            },
            "id": "1588589939100241920",
            "edit_history_tweet_ids": [
                "1588589939100241920"
            ],
            "conversation_id": "1588589939100241920"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1588589052634308610",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvNU6BXoAIRAvi.jpg"
                },
                {
                    "media_key": "3_1588589065951236097",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvNVroX0AEMmPC.jpg"
                },
                {
                    "media_key": "3_1588589079427514375",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvNWd1XgAcH6aE.jpg"
                },
                {
                    "media_key": "3_1588589087992283136",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgvNW9vXgAALWiB.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1587740371622285312"
            ],
            "attachments": {
                "media_keys": [
                    "3_1587740321173078016"
                ]
            },
            "text": "Here is a diagram showing various types of function signatures in Python \ud83d\udc0d https://t.co/VB7VQw3HUp",
            "conversation_id": "1587740371622285312",
            "id": "1587740371622285312"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1587740321173078016",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgjJaO8WAAA4kMI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1587103170903384065"
                ]
            },
            "conversation_id": "1587103556947136513",
            "id": "1587103556947136513",
            "text": "Here is a question you probably can't answer \ud83d\udc47\n\nThat is fine, though.\nTomorrow, I send out a newsletter issue about a method you can use to estimate the answer to this question, and many others.\n\nSign up here \ud83d\udc49 https://t.co/DOWZZCN6Xa https://t.co/4Id8X7EXef",
            "edit_history_tweet_ids": [
                "1587103556947136513"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1587103170903384065",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FgaF7NOXoAETkrt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1585922240797093888",
            "conversation_id": "1585922223788810240",
            "edit_history_tweet_ids": [
                "1585922240797093888"
            ],
            "text": "These are the steps I suggest to a newcomer to programming/Python \ud83d\udc0d.\n\nWhat would you suggest if you were in my place?"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585922238271946753"
            ],
            "text": "Another thing I always recommend, and that I do myself, is this:\n\nEvery once in a while (say, after every couple of chapters), ask yourself \u201cWhat have I learned so far?\u201d, and then use those things to create a new small program.",
            "conversation_id": "1585922223788810240",
            "id": "1585922238271946753"
        }
    },
    {
        "data": {
            "conversation_id": "1585922223788810240",
            "id": "1585922235528712192",
            "text": "By making these changes to the code you wrote, you get to exercise your understanding of the things you are learning...\n\nAnd like pretty much everything else, getting better at programming involves a lot of practice!",
            "edit_history_tweet_ids": [
                "1585922235528712192"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585922232810758144"
            ],
            "text": "You should try to modify the code you just wrote.\n\nDid you just write code to create a random number between 1 and 100? Change it to create a random number between 2 and 200.\n\nDid you ask for the user to input their first name?\nThen, also ask for the user's last name.",
            "id": "1585922232810758144",
            "conversation_id": "1585922223788810240"
        }
    },
    {
        "data": {
            "text": "Going through a coding book isn't like reading your average novel.\n\nYou should read the book and the explanations, write the code ON YOUR OWN, and then, you should do what I think is the most important thing...",
            "id": "1585922230029930496",
            "conversation_id": "1585922223788810240",
            "edit_history_tweet_ids": [
                "1585922230029930496"
            ]
        }
    },
    {
        "data": {
            "id": "1585922227241091072",
            "edit_history_tweet_ids": [
                "1585922227241091072"
            ],
            "text": "For someone with no coding experience, I think one of the best ways to start is by following a beginner book.\n\nI often recommend \u201cAutomate the Boring Stuff with Python\u201d, which is available for free at https://t.co/fsvLUsPEl9",
            "conversation_id": "1585922223788810240"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585922223788810240"
            ],
            "id": "1585922223788810240",
            "text": "Someone just DM'd me, asking how to start learning Python \ud83d\udc0d\n\nHere's what I replied \ud83d\udc47",
            "conversation_id": "1585922223788810240"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585600581510594561"
            ],
            "id": "1585600581510594561",
            "text": "What's something you did that made you a better Python \ud83d\udc0d programmer indirectly?\n\nI'll start: learning another programming language.",
            "conversation_id": "1585600581510594561"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1583716269756362753"
            ],
            "attachments": {
                "media_keys": [
                    "3_1583716265641889792"
                ]
            },
            "text": "Sorry folks, I've been busy. https://t.co/jCktUVPXhj",
            "conversation_id": "1583716269756362753",
            "id": "1583716269756362753"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1583716265641889792",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ffp9jX6X0AAFVQ9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1580965832288763905",
            "edit_history_tweet_ids": [
                "1580965832288763905"
            ],
            "text": "Had *so much fun* presenting at my very first Dyalog user meeting.\n\nIt was a wonderful conference!\n\nI'll be back soon with Python \ud83d\udc0d  content for you. In the meantime, give APL a chance. I did and I don't regret it \ud83d\ude09 https://t.co/Yc2aGPQktw",
            "conversation_id": "1580965832288763905"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1577318549760217091"
            ],
            "attachments": {
                "media_keys": [
                    "3_1577317295411568642"
                ]
            },
            "id": "1577318549760217091",
            "conversation_id": "1577318549760217091",
            "text": "\ud83d\udce8 new issue sent to +15,000:\n\nPartial function application is a technique that lets you derive useful functions from other existing functions.\n\n15k Insiders just learned about it with 3 concrete examples &amp; exercises.\n\nMissed the issue? Grab it here \ud83d\udc47\n\nhttps://t.co/KtzNdBOSVt https://t.co/uHaUwugliW"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1577317295411568642",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FePBuSMWIAIWbxU.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1575832598797901824"
            ],
            "id": "1575832598797901824",
            "text": "I hope you enjoy the book, @JonAzpiroz \ud83e\udd17\n\nhttps://t.co/TaFBbA5xvK",
            "conversation_id": "1566003697955778560"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1575760129890435072"
            ],
            "text": "TL;DR:\n\nA function definition has:\n\n - its defining keyword\n - the function name\n - a (possibly empty) parameter list\n - a colon to start the body\n - a docstring with a function description\n - the function body to do stuff\n - a return statement to give results back",
            "conversation_id": "1575760120100884487",
            "id": "1575760129890435072"
        }
    },
    {
        "data": {
            "text": "This was the gist of how you define a function in Python \ud83d\udc0d\n\nDid I forget anything? Let me know \ud83d\udc47\n\nIf you liked this short thread, follow me @mathsppblog.\n\nI'm helping you take your Python \ud83d\udc0d skills to the next level \ud83d\ude80",
            "edit_history_tweet_ids": [
                "1575760128581713922"
            ],
            "id": "1575760128581713922",
            "conversation_id": "1575760120100884487"
        }
    },
    {
        "data": {
            "text": "Functions typically have return statments.\n\nReturn statements signal the end of the function &amp; the data that comes off of the function.\n\nIf your function computes some result, you probably will use a return statement to give it back to the function user.",
            "id": "1575760127235334144",
            "conversation_id": "1575760120100884487",
            "edit_history_tweet_ids": [
                "1575760127235334144"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1575760125880672257"
            ],
            "id": "1575760125880672257",
            "conversation_id": "1575760120100884487",
            "text": "The function body is indented once with respect to the header and contains the code that runs when the function is called.\n\nBefore the body, it is customary to see a docstring, a comment that describes the function.\n\nYour IDE will show you the docstring when you use the function."
        }
    },
    {
        "data": {
            "conversation_id": "1575760120100884487",
            "id": "1575760124563562497",
            "text": "The list of parameters starts and ends respectively with ( &amp; ).\n\nBetween the parens, you write a comma-separated list of parameters.\n\nThe parameters are the data your function receives.\n\nThe parameter list can be empty, in which case you just have `():` next to the function name.",
            "edit_history_tweet_ids": [
                "1575760124563562497"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1575760123233968129"
            ],
            "id": "1575760123233968129",
            "conversation_id": "1575760120100884487",
            "text": "The header starts with the keyword `def`, which is how Python \ud83d\udc0d knows we are about to define a function.\n\nThen, we have the function name, which should be descriptive.\n\nAfter that, we have the list of parameters.\n\nAfter the list of parameters, a colon."
        }
    },
    {
        "data": {
            "text": "To define a function in Python you need two main parts:\n\n - the header\n - the body\n\nThe header gives defines how the function is called and the arguments it needs.\n\nThe body is the code that does stuff.",
            "id": "1575760121833168896",
            "edit_history_tweet_ids": [
                "1575760121833168896"
            ],
            "conversation_id": "1575760120100884487"
        }
    },
    {
        "data": {
            "conversation_id": "1575760120100884487",
            "edit_history_tweet_ids": [
                "1575760120100884487"
            ],
            "id": "1575760120100884487",
            "attachments": {
                "media_keys": [
                    "3_1575760117768896518"
                ]
            },
            "text": "This is a complete diagram of how you define a function in Python \ud83d\udc0d https://t.co/Mb0631efCK"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1575760117768896518",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fd45enbXwAYwrhx.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I couldn't make it...\n\nI was supposed to be at the FIRST PyCon in my home country where I was going to give a talk @PyConPT.\n\nSadly, I had a family emergency.\n(Everything is fine, now! \ud83d\ude2e\u200d\ud83d\udca8)\n\nI decided to record my talk.\nI hope you enjoy it \ud83d\udc47\n\nhttps://t.co/vb3qq6XsZq",
            "id": "1575185875910041600",
            "conversation_id": "1575185875910041600",
            "edit_history_tweet_ids": [
                "1575185875910041600"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1574387419440238594"
            ],
            "id": "1574387419440238594",
            "conversation_id": "1574387419440238594",
            "text": "In a fantasy job market, what startup would you join?\n\nFor me, it would be @textualizeio \n\nBut it's no fantasy! I'll be joining @willmcgugan and the others to help them build Textual. The TUI framework for #Python that will eat some of the browser's lunch!\n\nCan't wait to start \ud83d\udd25 https://t.co/8UfMOCIffl"
        }
    },
    {
        "data": {
            "id": "1573378414169538562",
            "edit_history_tweet_ids": [
                "1573378414169538562"
            ],
            "attachments": {
                "media_keys": [
                    "3_1573378405805998082"
                ]
            },
            "conversation_id": "1573378414169538562",
            "text": "Use the built-in `help` in Python \ud83d\udc0d!\n\nIt works with functions, classes, methods, etc!\n\nYou will learn a ton by using it. https://t.co/1Wi5xepn5P"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1573378405805998082",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdXDUu9WQAIvE1m.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "When do you take a piece of code you've written and decide it should be a function?",
            "id": "1573264356346839043",
            "edit_history_tweet_ids": [
                "1573264356346839043"
            ],
            "conversation_id": "1573264356346839043"
        }
    },
    {
        "data": {
            "id": "1573072178718842881",
            "conversation_id": "1573072178718842881",
            "text": "Code in MS PowerPoint with syntax highlighting \u2728\u2728\n\n 1. Copy your code from VS Code\n 2. Paste your code into your PP slide\n\nThe video below shows me doing it for some Python \ud83d\udc0d code.\n\n(May work with other editors! Let me know if it does!) https://t.co/aqq97DuWlz",
            "attachments": {
                "media_keys": [
                    "7_1573071790502559744"
                ]
            },
            "edit_history_tweet_ids": [
                "1573072178718842881"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1573071790502559744",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1572865253242802176"
                ]
            },
            "edit_history_tweet_ids": [
                "1572865795574595584"
            ],
            "conversation_id": "1572865795574595584",
            "id": "1572865795574595584",
            "text": "\ud83c\udf89\ud83c\udf89\ud83c\udf89\n\nMy article on Python packaging is the first Google result for \u201cPython packaging 2022\u201d! \ud83c\udfc5\n\nI'm so happy :P https://t.co/MQFoCxU3VJ"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572865253242802176",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdPwnUsXkAAtBe1.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1572575421362835458",
            "text": "TL;DR:\n\n \ud83d\udc49 functions are tools;\n \ud83d\udc49 functions have purposes;\n \ud83d\udc49 we use the function because we want its functionality;\n \ud83d\udc49 using a function is \u201ccalling a function\u201d;\n \ud83d\udc49 functions may accept data they need; and\n \ud83d\udc49 functions may \u201creturn\u201d useful results back.",
            "edit_history_tweet_ids": [
                "1572575441038508035"
            ],
            "id": "1572575441038508035"
        }
    },
    {
        "data": {
            "conversation_id": "1572575421362835458",
            "edit_history_tweet_ids": [
                "1572575439394320385"
            ],
            "text": "Feel free to comment with your own explanations.\n\nWould you have said something differently?\n\nWhat / why?",
            "id": "1572575439394320385"
        }
    },
    {
        "data": {
            "text": "In a short thread, this is what a function is.\n\nI hope this cleared some doubts for you and let me know if it didn't.\n\nFollow me @mathsppblog if you want to improve your Python \ud83d\udc0d knowledge.\n\nAnd btw, retweet the thread so others can learn from this!",
            "id": "1572575437615669248",
            "conversation_id": "1572575421362835458",
            "edit_history_tweet_ids": [
                "1572575437615669248"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1572575436294557697"
            ],
            "text": "We say that these functions \u201creturn\u201d things.\n\nFor example, the function `sorted` returns a sorted list.\n\nThe function `print`, on the other hand, does not return the string.\n\nNo.\n\nIt affects the environment we are in by printing the string to the screeen.",
            "id": "1572575436294557697",
            "conversation_id": "1572575421362835458"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1572575417621532672"
                ]
            },
            "conversation_id": "1572575421362835458",
            "edit_history_tweet_ids": [
                "1572575434570596352"
            ],
            "text": "Some functions \u201cdo things\u201d for you.\n\nFor example, the function `print` puts information on the screen.\n\nOther functions also \u201cdo things\u201d, but to the data you give them.\n\nFor example, the function `sorted` takes a list and gives back the list in sorted order. https://t.co/JZj3Oj7MDb",
            "id": "1572575434570596352"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572575417621532672",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdLpAq3X0AABtwk.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1572575433169801217",
            "conversation_id": "1572575421362835458",
            "edit_history_tweet_ids": [
                "1572575433169801217"
            ],
            "text": "As you can see above, functions sometimes accept data.\n\nThis data might be needed by the function to fulfil its purpose.\n\nJust like a screwdriver is useless if you do not give it a screw to turn.\n\nAbove, I passed a string to `print` so it could print it on the screen."
        }
    },
    {
        "data": {
            "text": "Different programming languages might call functions in different ways.\n\nA common way, which is how Python \ud83d\udc0d and JavaScript do it, for example, is to write the name of the function and then parenthesis. https://t.co/zSz6Z4Artu",
            "attachments": {
                "media_keys": [
                    "3_1572575406238179329"
                ]
            },
            "id": "1572575431328518145",
            "conversation_id": "1572575421362835458",
            "edit_history_tweet_ids": [
                "1572575431328518145"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572575406238179329",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdLpAAdXoAEMLTZ.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1572575425733214211"
            ],
            "text": "In programming, when you use a function we say you \u201ccall it\u201d.\n\n\u201cCalling a function\u201d just means that: using the functionality of that function.",
            "conversation_id": "1572575421362835458",
            "id": "1572575425733214211"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1572575424353288193"
            ],
            "text": "A function in programming is just like that.\n\nIt is a tool with a well-defined purpose.\n\nWhenever you need to do that _thing_, you reach for that tool \u2013 that function.",
            "id": "1572575424353288193",
            "conversation_id": "1572575421362835458"
        }
    },
    {
        "data": {
            "conversation_id": "1572575421362835458",
            "edit_history_tweet_ids": [
                "1572575422835224576"
            ],
            "id": "1572575422835224576",
            "text": "A function in programming is just like any tool, like a screwdriver.\n\nA screwdriver has a specific purpose: to turn screws.\n\nSo, whenever you need to tighten or loosen a screw, you reach for a screwdriver."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1572575421362835458"
            ],
            "conversation_id": "1572575421362835458",
            "id": "1572575421362835458",
            "text": "What is a function in programming?\n\nWhat's the point? What are they for?"
        }
    },
    {
        "data": {
            "text": "Erick liked the email \ud83d\ude09 https://t.co/K2MizBwYG6",
            "attachments": {
                "media_keys": [
                    "3_1572543216083259393"
                ]
            },
            "edit_history_tweet_ids": [
                "1572543221376647171"
            ],
            "id": "1572543221376647171",
            "conversation_id": "1572305106103685121"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572543216083259393",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdLLuSyX0AEfNJN.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1572490828999712768",
            "id": "1572490828999712768",
            "text": "If your life depended on it, could you convince me there's a language better than Python \ud83d\udc0d?\n\nJust kidding, I understand programming languages are just tools and you have to pick the best tool for the job.\n\nJust kidding!\n\nI know Python \ud83d\udc0d is the best language, period \ud83d\ude01\ud83d\ude02",
            "edit_history_tweet_ids": [
                "1572490828999712768"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1572305106103685121",
            "id": "1572305108242677760",
            "text": "I ended today's issue in suspense, though.\n\nI'll only send the \"best\" solution to the challenge next week.\n\nYou can still join 15,000 others who improve their Python \ud83d\udc0d knowledge every week \ud83d\udc47\n\nhttps://t.co/DOWZZCN6Xa",
            "edit_history_tweet_ids": [
                "1572305108242677760"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1572305102580465666"
                ]
            },
            "conversation_id": "1572305106103685121",
            "id": "1572305106103685121",
            "text": "I just sent it \ud83d\udce8\n\nThe latest issue of the Mathspp Insider is out.\n\nIn it, we solve a simple problem like a Python \ud83d\udc0d beginner would.\n\nThen, we go over successive improvements to the solution.\n\nWe cover:\n\n - iterables\n - zip\n - ordering tuples\n - grouped assignments\n - ... https://t.co/4H5oLTGcrz",
            "edit_history_tweet_ids": [
                "1572305106103685121"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572305102580465666",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdHzKQ3XwAI-41g.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1572246730359332864"
                ]
            },
            "edit_history_tweet_ids": [
                "1572246733664718848"
            ],
            "conversation_id": "1572246733664718848",
            "id": "1572246733664718848",
            "text": "Python \ud83d\udc0d beginners make this \u201cmistake\u201d:\n\nThey use `range(len(some_list))` in their `for` loops...\n\nBut _almost always_ that is not what they want.\n\nIn Python \ud83d\udc0d, you can iterate directly over lists \ud83d\udc47 https://t.co/BDbjGymW91"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572246730359332864",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdG-EjZWYAAxLx6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1572162558664081409"
                ]
            },
            "edit_history_tweet_ids": [
                "1572162697562554369"
            ],
            "conversation_id": "1572120908004823040",
            "id": "1572162697562554369",
            "text": "Silly me, the result was so long that the image doesn't show it.\n\nHere's a shorter example:\n\nIf you're in the Python \ud83d\udc0d REPL, `_` refers to the result of the last expression. https://t.co/8tDdAMcP2F"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572162558664081409",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdFxhHZXgAEEeR7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "If you're in the Python \ud83d\udc0d REPL, `_` refers to the result of the last expression. https://t.co/znoHcW28vG",
            "attachments": {
                "media_keys": [
                    "3_1572120904250937345"
                ]
            },
            "id": "1572120908004823040",
            "conversation_id": "1572120908004823040",
            "edit_history_tweet_ids": [
                "1572120908004823040"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572120904250937345",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdFLognX0AEvI6N.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1571942729516716032",
            "edit_history_tweet_ids": [
                "1571942729516716032"
            ],
            "attachments": {
                "media_keys": [
                    "3_1571942725330649090"
                ]
            },
            "conversation_id": "1571942729516716032",
            "text": "What's happening to my Python \ud83d\udc0d dictionary?\n\nWhere did my keys and values go?!\n\n@somacdivad @willmcgugan no spoilers, please \ud83d\ude36 https://t.co/onLefUgNAn"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571942725330649090",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdCplIaXwAI-RL_.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1571758515768762368",
                    "3_1571758528628391936"
                ]
            },
            "edit_history_tweet_ids": [
                "1571758533028511744"
            ],
            "conversation_id": "1571758533028511744",
            "id": "1571758533028511744",
            "text": "Use functools.cache to add a simple cache to your Python \ud83d\udc0d functions.\n\nHere, I'm using it to prevent recursion from branching like crazy.\n\nCompare the images \u2b05\ufe0f\u27a1\ufe0f https://t.co/srl8Mahjet"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571758515768762368",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdACCuUXoAAONgp.jpg"
                },
                {
                    "media_key": "3_1571758528628391936",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdACDeOWAAA_7hI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571580390912950272"
            ],
            "id": "1571580390912950272",
            "text": "Remember:\n\nDecorators are usually a function with a nested function inside.\n\nIf your decorator receives arguments, then it is going to be a function with a function inside, with a function inside.\n\n\ud83e\udd2f\ud83e\udd2f",
            "conversation_id": "1571580380938911745"
        }
    },
    {
        "data": {
            "text": "Decorators are fun \ud83d\ude09\n\nIt just takes some practise.\n\nI'll write an explanation of this that is more comprehensive in this week's newsletter issue.\n\nIf you aren't a Mathspp Insider yet, join 15k others now:\n\nhttps://t.co/DOWZZCNEMI",
            "id": "1571580389432631296",
            "edit_history_tweet_ids": [
                "1571580389432631296"
            ],
            "conversation_id": "1571580380938911745"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1571580376744689668"
                ]
            },
            "conversation_id": "1571580380938911745",
            "id": "1571580387419193349",
            "text": "In order to implement the decorator `print_args`, you need:\n\n - an outer function `print_args` that accepts the string prefix;\n - an inner function `decorator` that will be the decorator returned; and\n - an inner inner function `wrapped` that is your decorated function. https://t.co/Aak6HoENWw",
            "edit_history_tweet_ids": [
                "1571580387419193349"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571580376744689668",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc9gBqvXgAQF6fs.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "So, we see that what comes after the @ is the callable that receives the function.\n\nHence, if your decorator accepts arguments, it must return a callable to serve as the actual decorator.\n\nThat's because, without syntactic sugar, this is what `print_args` does: https://t.co/pdKiDfMHwV",
            "attachments": {
                "media_keys": [
                    "3_1571580364434411528"
                ]
            },
            "id": "1571580385548435459",
            "conversation_id": "1571580380938911745",
            "edit_history_tweet_ids": [
                "1571580385548435459"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571580364434411528",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc9gA84XkAgAF5F.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571580382969208832"
            ],
            "attachments": {
                "media_keys": [
                    "3_1571580352765853697"
                ]
            },
            "id": "1571580382969208832",
            "conversation_id": "1571580380938911745",
            "text": "Decorators in Python can be applied with the at operator @.\n\nHowever, that is just syntactic sugar!\n\nUsing the @ before or calling the decorator after is the same thing: https://t.co/BkN3B9iTYd"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571580352765853697",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc9gARaXgAElswT.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1571580340363214850"
                ]
            },
            "edit_history_tweet_ids": [
                "1571580380938911745"
            ],
            "conversation_id": "1571580380938911745",
            "id": "1571580380938911745",
            "text": "Python \ud83d\udc0d decorators are usually 2 nested functions.\n\nIf you need a decorator with arguments, then it's 3.\n\nBut how do those work? https://t.co/oipHTcuQeK"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571580340363214850",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc9f_jNWQAIBoC3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1571501900238839812",
            "conversation_id": "1571501900238839812",
            "edit_history_tweet_ids": [
                "1571501900238839812"
            ],
            "text": "It's Sunday but I'm getting some work done.\n\nSadly, it is not Python \ud83d\udc0d related...\n\nBut I'm listening to my \u201cDeep Focus\u201d playlist, which really puts me in the zone.\n\nIt's mostly tracks by @HansZimmer, if I'm being honest \ud83e\udd23\n\nhttps://t.co/rnkSZmfRRg"
        }
    },
    {
        "data": {
            "text": "What was the first Python \ud83d\udc0d version you used?\n\nMe?\n2.7",
            "id": "1571191663552335872",
            "edit_history_tweet_ids": [
                "1571191663552335872"
            ],
            "conversation_id": "1571191663552335872"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1570855580943761408"
            ],
            "attachments": {
                "media_keys": [
                    "3_1570855574895476738"
                ]
            },
            "text": "@EduardodMexico The reason that instance of `C` doesn't go away is because it is referenced by `_`.\n\nIn a REPL, you can use `_` to refer to the last result \ud83d\udc47\n\nYou would know this if you read my free book Pydon'ts...\n\nAfter all, I have a chapter that teaches tricks like these in the REPL! \ud83d\ude09 https://t.co/iyyOwkYbuf",
            "conversation_id": "1570855578896945153",
            "id": "1570855580943761408"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570855574895476738",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FczM0pcWQAIi8i0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1570855578896945153",
            "id": "1570855578896945153",
            "text": "Garbage collection and the REPL interact in a funky way in Python \ud83d\udc0d\n\nBelow is a class `C` whose instances say goodbye when they are deleted.\n\nAn instance cannot be garbage collected if it was the last result in the REPL!\n\nHats off to @EduardodMexico for teaching me this. https://t.co/ubVCXFdn7A",
            "attachments": {
                "media_keys": [
                    "3_1570855561834422274"
                ]
            },
            "edit_history_tweet_ids": [
                "1570855578896945153"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570855561834422274",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FczMz4yWYAIZCGF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1570790893510082561",
            "conversation_id": "1570790893510082561",
            "text": "The first \ud83d\udc0d context manager I learned was to open files.\n\nIt _always_ looked like this:\n\nwith open(filepath, mode) as f:\n    ...\n\nThat is why I thought that \u201cf\u201d was a special name...\n\nBut that \u201cf\u201d has nothing special! It can be ANY variable name: https://t.co/ns6P9SL6bw",
            "attachments": {
                "media_keys": [
                    "3_1570790889361907713"
                ]
            },
            "edit_history_tweet_ids": [
                "1570790893510082561"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570790889361907713",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcyR_dDWIAEQpY9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1570493192709210113",
            "edit_history_tweet_ids": [
                "1570493192709210113"
            ],
            "attachments": {
                "media_keys": [
                    "3_1570493188128874497"
                ]
            },
            "conversation_id": "1570493192709210113",
            "text": "Want your function to ONLY accept positional arguments?\n\nIn Python \ud83d\udc0d, you can do that by ending your parameter list with `/`.\n\nHere is a demo of this functionality \ud83d\udc47\n\nTrying to use a keyword parameter raises an error! https://t.co/EeE670INDD"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570493188128874497",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcuDO9iXoAEW1ff.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1570427669711306752",
            "edit_history_tweet_ids": [
                "1570427669711306752"
            ],
            "text": "Learn Python \ud83d\udc0d with examples.\n\nMy YouTube channel features short \u26a1 videos where I explain bits and pieces about Python.\n\nYou know what they say...\n\nOne video a day improves your Python right away.\n\nhttps://t.co/bz3Qe2p37l",
            "conversation_id": "1570427669711306752"
        }
    },
    {
        "data": {
            "text": "Files in Python \ud83d\udc0d can be opened in different modes:\n\n - normal text mode\n - or binary mode (\"b\")\n\nThey can also be opened to:\n\n - read only (\"r\")\n - write only (\"w\")\n - append only (\"a\")\n\nAdd a \"+\" to read &amp; write or read &amp; append.\n\nExamples \ud83d\udc47 https://t.co/772jtb9SfM",
            "attachments": {
                "media_keys": [
                    "3_1570344205226070017"
                ]
            },
            "edit_history_tweet_ids": [
                "1570344208916963328"
            ],
            "id": "1570344208916963328",
            "conversation_id": "1570344208916963328"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570344205226070017",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fcr7vA-X0AEoydJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1570130805460013059",
            "edit_history_tweet_ids": [
                "1570130805460013059"
            ],
            "id": "1570130805460013059",
            "attachments": {
                "media_keys": [
                    "3_1570130801211179010"
                ]
            },
            "text": "You can force your functions to accept some parameters as positional only in Python \ud83d\udc0d\n\nTo do that, use a `/` after the parameters that must be positional only. https://t.co/zwkWBg1ngw"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570130801211179010",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fco5pREXgAIe2XM.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1570038693125136384"
            ],
            "attachments": {
                "media_keys": [
                    "3_1570038689446625289"
                ]
            },
            "id": "1570038693125136384",
            "conversation_id": "1570038693125136384",
            "text": "Do not use useless lambdas in Python \ud83d\udc0d\n\nLambdas are VERY useful in Python.\n\nHowever, if a lambda looks like `lambda x: f(x)`, then you don't need it.\n\nJust use `f` instead.\n\nHere is an example: https://t.co/rpJxsuAtfx"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570038689446625289",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fcnl3qAWAAkbktA.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1569971413641043969"
            ],
            "attachments": {
                "media_keys": [
                    "3_1569971392535269376"
                ]
            },
            "id": "1569971413641043969",
            "conversation_id": "1569971413641043969",
            "text": "Good feedback feels great!\n\nJim @ames_deann\n replied to yesterday's Mathspp Insider email with this:\n\n\u201cI love your [Mathspp Insider] emails: practical and concisely written \u201cbytes\u201d of knowledge that I can immediately apply to my coding\u201d\n\n\ud83d\udd17 https://t.co/DOWZZCN6Xa https://t.co/Gx9BlfO8pi"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569971392535269376",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcmoqdeXEAARtoU.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1569946588394528768"
            ],
            "attachments": {
                "media_keys": [
                    "3_1569946584430821376"
                ]
            },
            "id": "1569946588394528768",
            "conversation_id": "1569946588394528768",
            "text": "Use `collections.ChainMap` to combine dictionaries in Python \ud83d\udc0d without merging.\n\nThis combined result gets updated automatically.\n\nUseful, for e.g., to combine configuration levels. https://t.co/QUMLjgPUBg"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569946584430821376",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcmSGcFWQAAVAvR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1569795532394045441"
            ],
            "attachments": {
                "media_keys": [
                    "3_1569795370598678528"
                ]
            },
            "text": "Some of you mentioned, in the comments, the method `dict.update`.\n\nThat is the same as `|=`, except that the method `.update` works in all Python 3, not just in Python 3.9+!\n\nThanks for adding this info, folks! https://t.co/vqNu8hd63U",
            "id": "1569795532394045441",
            "conversation_id": "1569603325225537536"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569795370598678528",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FckIkoqWQAAEsUh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1569768409088380935"
                ]
            },
            "id": "1569768413215576066",
            "edit_history_tweet_ids": [
                "1569768413215576066"
            ],
            "text": "You can force your users to use some arguments as keyword-only in Python \ud83d\udc0d\n\nFor that, include `*` in the list of parameters. https://t.co/XjFngDOyWu",
            "conversation_id": "1569768413215576066"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569768409088380935",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcjwDRNX0AcmeR_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1569676283629522946"
            ],
            "id": "1569676283629522946",
            "text": "You can get a sample of the content here \ud83d\udc47\n\nIn this past issue I walk you through the first decorator I ever wrote in Python \ud83d\udc0d\n\nhttps://t.co/GKYglHyoPU",
            "conversation_id": "1569676282178174979"
        }
    },
    {
        "data": {
            "text": "The most recent Mathspp Insider \ud83d\udc0d\ud83d\udcdd issue is out \ud83d\udce8\n\nIn this issue, I wrote about `functools.wraps` and why you'd want to use it.\n\nJoin 15k other Insiders who are learning to write beautiful Python code:\n\nhttps://t.co/DOWZZCN6Xa",
            "id": "1569676282178174979",
            "edit_history_tweet_ids": [
                "1569676282178174979"
            ],
            "conversation_id": "1569676282178174979"
        }
    },
    {
        "data": {
            "text": "Merging two dictionaries in Python \ud83d\udc0d\n\nIn 3 ways:\n\n \ud83d\udfe2 using the splat operator `**`\n \ud83d\udfe1 using the pipe operator `|` (Python 3.9+)\n \ud83d\udd34 updating a dict in-place with `|` (also Python 3.9+) https://t.co/VPw6TZvq4R",
            "attachments": {
                "media_keys": [
                    "3_1569603321719099392"
                ]
            },
            "edit_history_tweet_ids": [
                "1569603325225537536"
            ],
            "id": "1569603325225537536",
            "conversation_id": "1569603325225537536"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569603321719099392",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FchZ561XEAAt3J8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1568995559322656769",
            "conversation_id": "1568995559322656769",
            "text": "What is the result of the final `next(it)`?\n\nPython \ud83d\udc0d iterators power `for` loops, one of the best tools in Python \ud83d\udc0d https://t.co/WmpZcwgqN9",
            "attachments": {
                "media_keys": [
                    "3_1568995555400884227"
                ]
            },
            "edit_history_tweet_ids": [
                "1568995559322656769"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568995555400884227",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcYxJQ3WIAMrlRb.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1568935765652000769",
            "edit_history_tweet_ids": [
                "1568935765652000769"
            ],
            "id": "1568935765652000769",
            "text": "`enumerate` is one of the nicest built-ins in Python \ud83d\udc0d and beginners often do not use it.\n\nIt's so important, there's a whole chapter about it in my book.\n\nThis thread can serve as a short introduction \ud83d\udc47 https://t.co/guRHJlfd9A"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1568589142271074306"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568589138823184385"
                ]
            },
            "text": "Generators in Python \ud83d\udc0d are lazy \ud83d\ude34\n\nThey only produce their values when they are needed.\n\nIf you need all the values from a generator, use the built-in `list`.\n\nPRO TIP: if you use `list` around a generator expression, you actually meant to use a list comprehension. https://t.co/WUEVRrBnrK",
            "id": "1568589142271074306",
            "conversation_id": "1568589142271074306"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568589138823184385",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcS_gtIXgAEB1vh.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1568522209240424451",
            "edit_history_tweet_ids": [
                "1568522209240424451"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568522050330828800"
                ]
            },
            "conversation_id": "1568518675568771072",
            "text": "I do not know how to copy &amp; paste \ud83d\ude43\n\nThe piece of code above uses `gen` out of the blue.\n\nObviously, I meant to assign the generator to it.\n\nHere is the code, fixed: https://t.co/scOEK4kUzw"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568522050330828800",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcSCfpBWIAAC6sf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1568518671865192449"
                ]
            },
            "text": "Generator expressions in Python \ud83d\udc0d are just like list comprehensions.\n\nBut instead of using [], you use ().\n\nThen, the generator will produce your values _when_ you ask it to: https://t.co/j2aa14dXiM",
            "id": "1568518675568771072",
            "conversation_id": "1568518675568771072",
            "edit_history_tweet_ids": [
                "1568518675568771072"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568518671865192449",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcR_a_QXoAEc-lF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1568318847580622851",
            "conversation_id": "1568318847580622851",
            "edit_history_tweet_ids": [
                "1568318847580622851"
            ],
            "text": "Save the code below as a Python \ud83d\udc0d script.\n\nNotice that the code prints itself.\n\nEXACTLY the same.\n\nHow cool is that? https://t.co/6upC8icCYO",
            "attachments": {
                "media_keys": [
                    "3_1568318844267073538"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568318844267073538",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcPJrfcXEAItzP6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1568264038739484674",
            "conversation_id": "1568264031752048643",
            "edit_history_tweet_ids": [
                "1568264038739484674"
            ],
            "text": "If you want to learn more about decorators, I will be giving a remote workshop on this topic.\n\nThe workshop will be Saturday, 3rd December, 4pm UTC.\n\nOnly 30 spots available.\n\nhttps://t.co/slmfp4rpYd"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1568264028249591808"
                ]
            },
            "id": "1568264036780744704",
            "edit_history_tweet_ids": [
                "1568264036780744704"
            ],
            "text": "The job of `functools.wraps` is to preserve this meta information.\n\nIt preserves things like the function name and the docstring.\n\nHow do you do that, though?\n\nJust decorate your wrapper function! https://t.co/N3JopwhNYo",
            "conversation_id": "1568264031752048643"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568264028249591808",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcOX0x3XEAADBC7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1568264013737299968"
                ]
            },
            "edit_history_tweet_ids": [
                "1568264034511888391"
            ],
            "conversation_id": "1568264031752048643",
            "id": "1568264034511888391",
            "text": "Look at the example below.\n\nI defined a simple decorator and then applied it to a function of mine.\n\nMy function loses important meta information: https://t.co/FSdRnvkGCm"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568264013737299968",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcOXz7zXEAA7Y6Q.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1568264031752048643",
            "edit_history_tweet_ids": [
                "1568264031752048643"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568263999321526276"
                ]
            },
            "conversation_id": "1568264031752048643",
            "text": "There is one thing you should probably do EVERY TIME you define a Python \ud83d\udc0d decorator.\n\nAnd that is: use the `functools.wraps` decorator!\n\nWhy? https://t.co/rarJ3Xeels"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568263999321526276",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcOXzGGX0AQ2VoB.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1568155270592724992",
                    "3_1568155270617993220",
                    "3_1568155270601138178",
                    "3_1568155270592741376"
                ]
            },
            "conversation_id": "1568155288502501376",
            "edit_history_tweet_ids": [
                "1568155288502501376"
            ],
            "text": "I created a Python \ud83d\udc0d bot that uses @StableDiffusion to tweet beautiful images periodically!\n\nHere are some examples:\n\n \ud83d\ude97 Luxurious sports car\n \ud83c\udf0d Galaxy digital art\n \ud83e\uded6 Witch making a potion\n \u2699\ufe0f Steampunk digital art\n\nFollow @stablediffbot for more and suggest your own prompts! https://t.co/syBlmBewoi",
            "id": "1568155288502501376"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568155270592724992",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcM06QBWAAA6-KJ.png"
                },
                {
                    "media_key": "3_1568155270617993220",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcM06QHXkAQfxZG.png"
                },
                {
                    "media_key": "3_1568155270601138178",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcM06QDWYAIlYIC.png"
                },
                {
                    "media_key": "3_1568155270592741376",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcM06QBWQAA00su.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "The obvious alternative?\n\nDo regular string formatting and convert in the end: https://t.co/8uDzXlHvgn",
            "id": "1567864422634250245",
            "conversation_id": "1567864420771954689",
            "attachments": {
                "media_keys": [
                    "3_1567864417102057472"
                ]
            },
            "edit_history_tweet_ids": [
                "1567864422634250245"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567864417102057472",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcIsYWVX0AAmIIo.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567864420771954689"
            ],
            "attachments": {
                "media_keys": [
                    "3_1567864405475352576"
                ]
            },
            "text": "f-strings cannot be used with bytes sequences in Python \ud83d\udc0d\n\nIf you want to format a bytes sequence, the old %-style is the only thing that works: https://t.co/0P70AHkU9n",
            "conversation_id": "1567864420771954689",
            "id": "1567864420771954689"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567864405475352576",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcIsXrBWYAAZcyc.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567785932077649920"
            ],
            "id": "1567785932077649920",
            "text": "That's not what I meant \ud83e\udd23 https://t.co/X8NtVpio7u",
            "conversation_id": "1567785932077649920"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1567530918243405825"
                ]
            },
            "text": "Deleting a file with Python \ud83d\udc0d is simple. https://t.co/0PiWwBbVXQ",
            "id": "1567530922190192640",
            "conversation_id": "1567530922190192640",
            "edit_history_tweet_ids": [
                "1567530922190192640"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567530918243405825",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcD9EKRXEAE8OfN.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1567231685934153728",
            "edit_history_tweet_ids": [
                "1567231685934153728"
            ],
            "attachments": {
                "media_keys": [
                    "3_1567231682473861120"
                ]
            },
            "conversation_id": "1567231685934153728",
            "text": "Everyone knows the formula for the area of a triangle:\n\nLength of the base times the height divided by two.\n\nWhat if you know all of the side lengths, but none of the heights?\n\nEnter Heron's formula \ud83d\udc47 https://t.co/R0waQzWdGY"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567231682473861120",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb_s6WKXoAA70Ca.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567197128765612034",
            "id": "1567197128765612034",
            "text": "What's something a beginner would do in 6-8 lines of Python \ud83d\udc0d that a more proficient user would do in 3 or less?",
            "edit_history_tweet_ids": [
                "1567197128765612034"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1567139578200432640"
                ]
            },
            "edit_history_tweet_ids": [
                "1567139581614608390"
            ],
            "conversation_id": "1567139581614608390",
            "id": "1567139581614608390",
            "text": "Python \ud83d\udc0d functions can expect an arbitrary number of positional arguments.\n\nTo do that, add `*` to the left of a parameter.\n\nThat parameter will be a tuple with all arguments passed in.\n\nTypically, we call it `*args`, but \u201cargs\u201d is not a special word. https://t.co/xb4roXFH56"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567139578200432640",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb-ZJLAXoAAMngL.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1567063835126775809"
                ]
            },
            "conversation_id": "1567063838956175362",
            "id": "1567063838956175362",
            "text": "Python \ud83d\udc0d has the infamous \u201cf-strings\u201d.\n\nBut did you know of \u201cr-strings\u201d?\n\nR stands for Raw.\n\nIn r-strings, all characters are interpreted literally.\n\nUsed, for example, in Windows paths or regular expressions: https://t.co/lwCuJLcown",
            "edit_history_tweet_ids": [
                "1567063838956175362"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567063835126775809",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb9UQWEXwAEokjs.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1566869303126855680",
            "conversation_id": "1566869303126855680",
            "edit_history_tweet_ids": [
                "1566869303126855680"
            ],
            "text": "You can use the Python \ud83d\udc0d built-in `max` to find the longest word in a list.\n\nYou just need to use the keyword argument `key=len`.\n\nHere is the longest word in a list of 170,000+ English words.\n\nBonus points for you if you know what it means \ud83d\ude35 https://t.co/L6t658OcZN",
            "attachments": {
                "media_keys": [
                    "3_1566869299813310465"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566869299813310465",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb6jU5jWYAEEUZ4.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1566777243380113410",
            "edit_history_tweet_ids": [
                "1566777243380113410"
            ],
            "attachments": {
                "media_keys": [
                    "3_1566777232370143233"
                ]
            },
            "conversation_id": "1566777236035870720",
            "text": "The switch `-q` opens the REPL Quietly.\n\nWhat this means is that it opens the REPL without displaying all the version/platform information.\n\nI use it when recording videos and demoing stuff (thanks @learn_byexample!) https://t.co/BMzD8gpWvH"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566777232370143233",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb5Pl3mXkAEM5wB.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1566777222056255496"
                ]
            },
            "edit_history_tweet_ids": [
                "1566777241324888070"
            ],
            "conversation_id": "1566777236035870720",
            "id": "1566777241324888070",
            "text": "The switch `-i` stands for Interactive.\n\nBy running your code with `-i`, after the script is done, you get a REPL session with the variables and functions from that script.\n\nUseful to play around with functions you just defined. https://t.co/zEaO7Awvra"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566777222056255496",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb5PlRLWIAgEeEH.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1566777236035870720",
            "edit_history_tweet_ids": [
                "1566777239609511941"
            ],
            "id": "1566777239609511941",
            "attachments": {
                "media_keys": [
                    "3_1566777211058798592"
                ]
            },
            "text": "The switch `-m` runs a module as a script.\n\nThis will run an installed module's section that is inside `if __name__ == \"__main__\":`.\n\nThe one I use the most is the module `timeit` to measure execution time. https://t.co/naROIZ4rCi"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566777211058798592",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb5PkoNWQAAXaXp.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "The switch `-c` runs code directly from the command line.\n\nIt doesn't open the REPL, and it is convenient for short, one-off expressions.\n\nThe result isn't printed by default, so don't forget your `print`! https://t.co/kvwXvscK4L",
            "attachments": {
                "media_keys": [
                    "3_1566777199713304578"
                ]
            },
            "edit_history_tweet_ids": [
                "1566777237818441728"
            ],
            "id": "1566777237818441728",
            "conversation_id": "1566777236035870720"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566777199713304578",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb5Pj98XwAI_hUK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1566777187491094534"
                ]
            },
            "edit_history_tweet_ids": [
                "1566777236035870720"
            ],
            "conversation_id": "1566777236035870720",
            "id": "1566777236035870720",
            "text": "The Python \ud83d\udc0d command has many different switches.\n\nHere are the 4 switches I use the most: https://t.co/Navo2i1fg7"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566777187491094534",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb5PjQaXoAYRleg.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "If your module \u201cyourmodule\u201d has a file `__main__.py`, then `python -m yourmodule` will actually run the **whole** file `yourmodule/__main__.py`.\n\nThanks for the added info, @rochacbruno \n\nhttps://t.co/1hCAo6JHsg",
            "id": "1566703018778804226",
            "conversation_id": "1566685105065791489",
            "edit_history_tweet_ids": [
                "1566703018778804226"
            ]
        }
    },
    {
        "data": {
            "id": "1566685108542836737",
            "conversation_id": "1566685105065791489",
            "edit_history_tweet_ids": [
                "1566685108542836737"
            ],
            "text": "Another one from the Standard Library is the module `calendar`.\n\nWhen used with `-m`, you can print the calendar for a month or for a whole year! https://t.co/mPMuX5p5YG",
            "attachments": {
                "media_keys": [
                    "3_1566685099382505473"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566685099382505473",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb37zBeXgAEEGP1.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "The library `rich` is a nice module that also makes heavy use of `-m`.\n\nIf you use `-m` with its submodules, you typically get an example of what that module does.\n\nHere is a screenshot of me using `python -m rich.palette` and `python -m rich.progress`. https://t.co/4qzHaOMeXW",
            "attachments": {
                "media_keys": [
                    "3_1566685102834343937"
                ]
            },
            "id": "1566685106777079808",
            "edit_history_tweet_ids": [
                "1566685106777079808"
            ],
            "conversation_id": "1566685105065791489"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566685102834343937",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb37zOVWYAEl2ie.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1566685087458070528"
                ]
            },
            "conversation_id": "1566685105065791489",
            "id": "1566685105065791489",
            "text": "Python \ud83d\udc0d has a switch `-m` that \u201cruns library module as a script\u201d.\n\nMany modules from the standard library have useful script versions.\n\nIn your own code, the `-m` switch will run the `if __name__ == \"__main__\"`  section of your code. https://t.co/xBauScaLyx",
            "edit_history_tweet_ids": [
                "1566685105065791489"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566685087458070528",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb37yVDXEAAbFoP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1566568650139729920",
            "edit_history_tweet_ids": [
                "1566568650139729920"
            ],
            "attachments": {
                "media_keys": [
                    "3_1566568457709166598"
                ]
            },
            "conversation_id": "1566568650139729920",
            "text": "Apparently, people love free stuff.\n\n(I think it helps that the free stuff is good \u2728)\n\n@blackmagic_so says my tweet sharing my free Python \ud83d\udc0d book is completely off the charts!\n\nThe orange lines are the average performance of my tweets! They look completely flat here\ud83e\udd23 https://t.co/h2sPj39kWP"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566568457709166598",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb2RtlYWIAYDWiS.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1566365686733176834"
                ]
            },
            "text": "Thanks for the overwhelming response! In the last 24h my free Python \ud83d\udc0d book was downloaded over 2.5k times!\n\nIf only 1 of those 2,500 learns something and gains a deeper appreciation for Python...\n\nThen my mission is successful!\n\n(Book link on my Twitter profile.) https://t.co/ey5xrJYFL9",
            "id": "1566365689153216518",
            "conversation_id": "1566365689153216518",
            "edit_history_tweet_ids": [
                "1566365689153216518"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566365686733176834",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbzZSwoXgAImPzJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "@KrMa_TZ is in it to win it:\n\nhttps://t.co/UKbPQnk2R2",
            "id": "1566052801167462402",
            "conversation_id": "1566003697955778560",
            "edit_history_tweet_ids": [
                "1566052801167462402"
            ]
        }
    },
    {
        "data": {
            "id": "1566003697955778560",
            "conversation_id": "1566003697955778560",
            "text": "I learned Python \ud83d\udc0d on the Internet for free.\n\nThat's why my Pydon'ts book is free:\n\n\ud83d\udc49 +300 pages\n\ud83d\udc49 +25 chapters\n\ud83d\udc49 Available for $0\n\ud83d\udc49 Always growing\n\nI can't do the hard work for you, but I can make it *easier*!\n\nLink on my profile!",
            "edit_history_tweet_ids": [
                "1566003697955778560"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565792511796322306"
            ],
            "attachments": {
                "media_keys": [
                    "3_1565792492565454848"
                ]
            },
            "text": "My new favourite way of programming:\n\nLet the framework guess what I'm trying to do.\n\ncc @textualize https://t.co/Ik9bsyv86U",
            "conversation_id": "1565792511796322306",
            "id": "1565792511796322306"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565792492565454848",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbrP-d9WYAACq9H.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Best tip to ace that Python \ud83d\udc0d interview question: https://t.co/XTPKm8s73a",
            "id": "1565690031800475649",
            "conversation_id": "1565690031800475649",
            "attachments": {
                "media_keys": [
                    "3_1565690027933310976"
                ]
            },
            "edit_history_tweet_ids": [
                "1565690031800475649"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565690027933310976",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbpyyPdWIAAvMsY.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1565661857427472385",
            "conversation_id": "1565661857427472385",
            "text": "You can use `str.replace` to do string replacements.\n\nBe careful, however, if you need to do many replacements in a row.\n\nIn that case, using `str.maketrans` might be better. https://t.co/Ihovhpfv6T",
            "attachments": {
                "media_keys": [
                    "3_1565661853153460225"
                ]
            },
            "edit_history_tweet_ids": [
                "1565661857427472385"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565661853153460225",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbpZKQOXgAEfL90.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565422861732483072"
            ],
            "conversation_id": "1565422845064368130",
            "id": "1565422861732483072",
            "text": "The fact that the `StopIteration` was being swallowed by the generator actually looked like a bug and now the bug is fixed!\n\nToday I can sleep in peace!"
        }
    },
    {
        "data": {
            "id": "1565422860360884225",
            "conversation_id": "1565422845064368130",
            "text": "PEP 479 essentially says that there were weird interactions with StopIteration inside generators and those are now handled correctly.\n\nThis makes sense, because the `StopIteration` that was being raised inside the generator did not have the appropriate semantic meaning.",
            "edit_history_tweet_ids": [
                "1565422860360884225"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565422845064368130",
            "id": "1565422858926424067",
            "text": "The next thing I did was go look up the changes in Python 3.7 to see if the behaviour had been changed.\n\nI opened the page \u201cWhat's new in Python 3.7?\u201d and searched the page for \u201cgenerator\u201d...\n\nI found out that \u201cPEP 479 is enabled for all code in Python 3.7 [...]\u201d",
            "edit_history_tweet_ids": [
                "1565422858926424067"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565422845064368130",
            "edit_history_tweet_ids": [
                "1565422856686735361"
            ],
            "id": "1565422856686735361",
            "attachments": {
                "media_keys": [
                    "3_1565422825158180864",
                    "3_1565422840786067457"
                ]
            },
            "text": "But here's the twist!\n\nI tested it on my phone with a Python 3.6 REPL and on my computer I only have Python 3.7 through 3.10.\n\nIn none of my computer REPLs I could get my example to work.\n\nHere is the examples on my phone and on my computer: https://t.co/V20avEtJwI"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565422825158180864",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbl_w_jXgAAM97P.jpg"
                },
                {
                    "media_key": "3_1565422840786067457",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbl_x5xWIAE8i7r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1565422853855608834",
            "edit_history_tweet_ids": [
                "1565422853855608834"
            ],
            "conversation_id": "1565422845064368130",
            "text": "So, generators _are_ iterators, and probably that is why the `StopIteration` seems to be drowning inside the generator expression.\n\nMy thought?\n\nMaybe the generator expression is taking that `StopIteration` to mean \u201cthe generator is done\u201d."
        }
    },
    {
        "data": {
            "text": "But generators are iterators!\n\nHow can you know?\n\nAn iterator is an object that:\n\n - returns itself when `iter` is called on it;\n - returns successive items when passed to `next`, raising `StopIteration` to say there are no more items.\n\nAnd this is exactly what generators do \ud83d\udc47 https://t.co/CSIrP2QhPf",
            "id": "1565422851917750273",
            "conversation_id": "1565422845064368130",
            "edit_history_tweet_ids": [
                "1565422851917750273"
            ],
            "attachments": {
                "media_keys": [
                    "3_1565422810486476800"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565422810486476800",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbl_wI5XEAAGkS0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565422850474901508"
            ],
            "id": "1565422850474901508",
            "text": "- each iteration calls `__next__` on the instance to get the next value; and\n - when `__next__` raises `StopIteration` the loop knows it's over.\n\nSo that is what `StopIteration` is for.\n\nNow, the thing is, the more common _iterables_ are not _iterators_...",
            "conversation_id": "1565422845064368130"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565422849099272195"
            ],
            "conversation_id": "1565422845064368130",
            "text": "In the example above we do not _see_ the `StopIteration`.\n\nIt is Python that handles it in the background:\n\n - the loop calls `__iter__` to create an iterator out of the `MyIter` instance;\n - turns out `MyIter()` is _already_ an iterator, so `__iter__` returns self;\n\nThen:",
            "id": "1565422849099272195"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1565422795542102024"
                ]
            },
            "conversation_id": "1565422845064368130",
            "text": "I was thinking about what this meant...\n\nSo, I started by thinking about `StopIteration`.\n\n`StopIteration` is the exception iterators should raise to signal they're done.\n\nHere is an example: https://t.co/QuaQzKzd45",
            "edit_history_tweet_ids": [
                "1565422847245287431"
            ],
            "id": "1565422847245287431"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565422795542102024",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbl_vROWAAgpOLO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565422845064368130",
            "id": "1565422845064368130",
            "text": "I found this \ud83d\udc47 and was confused.\n\nWhy the heck doesn't the generator expression raise an error as well?!\n\nI decided to dig a bit deeper and here are my findings.\n\nYou won't believe how it ended \ud83e\udd21 I swear this isn't \u201cclickbait\u201d \ud83e\udd23 https://t.co/dr6xNIuug3",
            "attachments": {
                "media_keys": [
                    "3_1565422779587067907"
                ]
            },
            "edit_history_tweet_ids": [
                "1565422845064368130"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565422779587067907",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbl_uVyXgAMpCzG.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Turns out, there's always more to the story!\n\nLearn more \ud83d\udc47\n\nhttps://t.co/yksEa1RH5a",
            "id": "1565410337901387778",
            "conversation_id": "1564965270325698565",
            "edit_history_tweet_ids": [
                "1565410337901387778"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565284617174794240",
            "text": "How many weeks are there in 31 days?\n\n4 weeks and 3 days.\n\nHow many days are there in 126 hours?\n\n5 days and 6 hours.\n\nHow many hours are there in 375 minutes?\n\n6 hours and 15 minutes.\n\nThat is what `divmod` does in Python \ud83d\udc0d: integer division and remainder. https://t.co/OHgQNcMMS6",
            "edit_history_tweet_ids": [
                "1565284617174794240"
            ],
            "id": "1565284617174794240",
            "attachments": {
                "media_keys": [
                    "3_1565284613475508227"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565284613475508227",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbkCEA6XoAM38-3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1564965266605350912"
                ]
            },
            "text": "The tuples in Python \ud83d\udc0d are not defined by the parenthesis.\n\nIt's the commas. https://t.co/mlswxHCRmo",
            "id": "1564965270325698565",
            "conversation_id": "1564965270325698565",
            "edit_history_tweet_ids": [
                "1564965270325698565"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564965266605350912",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbffnlHWIAAdYvD.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1564873162344595456"
            ],
            "attachments": {
                "media_keys": [
                    "3_1564873158880071680"
                ]
            },
            "id": "1564873162344595456",
            "text": "Python \ud83d\udc0d iterators raise `StopIteration` when they become empty.\n\nBut something funky happens inside generator expressions! https://t.co/mugdpts9FZ",
            "conversation_id": "1564873162344595456"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564873158880071680",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbeL2NGXEAAzda_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564653454731186179",
            "id": "1564653454731186179",
            "text": "The Python \ud83d\udc0d range always has a `stop` argument.\n\nIf you need to count numbers starting at a given point but _without_ specifying a stopping value, use `itertools.count`.\n\nYou can also specify a `step` value. https://t.co/uKc9HD9xpR",
            "attachments": {
                "media_keys": [
                    "3_1564653451010785280"
                ]
            },
            "edit_history_tweet_ids": [
                "1564653454731186179"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564653451010785280",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbbEBhgWQAAcFp1.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1564510744665899008",
            "edit_history_tweet_ids": [
                "1564510744665899008"
            ],
            "conversation_id": "1564510744665899008",
            "text": "I'll be announcing something new in a couple of hours.\n\nIt's about Python \ud83d\udc0d, in case you are wondering \ud83d\ude43\n\nSadly, it's something w/ limited availability, so I'm announcing it to the Mathspp Insiders first.\n\nJoin now &amp; you'll be the first to know too!\n\nhttps://t.co/DOWZZCN6Xa"
        }
    },
    {
        "data": {
            "id": "1564332586243080193",
            "edit_history_tweet_ids": [
                "1564332586243080193"
            ],
            "attachments": {
                "media_keys": [
                    "3_1564332582929670145"
                ]
            },
            "conversation_id": "1564332586243080193",
            "text": "For a programming language using indentation instead of braces, Python \ud83d\udc0d does play fast &amp; loose with spaces... \ud83e\udd23 https://t.co/ChVrP5IbDu"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564332582929670145",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbWgMiwXoAEhrOK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1564240490408591360",
            "attachments": {
                "media_keys": [
                    "3_1564240486814056449"
                ]
            },
            "edit_history_tweet_ids": [
                "1564240490408591360"
            ],
            "conversation_id": "1564240490408591360",
            "text": "Python \ud83d\udc0d strings have a method `.replace`.\n\nThis method replaces strings with other strings, but you can specify a maximum number of replacements. https://t.co/GLYEx5HkGl"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564240486814056449",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbVMb1_WAAEygoU.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "TL;DR:\n\n - `str.removeprefix` removes a string from the beginning:\n   - don't care about partial matches\n   - don't care about repeated matches\n - `str.lstrip` removes all given characters from the left of a string\n\nCan you guess what `removesuffix` and `rstrip` do?",
            "id": "1564148399494111232",
            "conversation_id": "1564148392971960322",
            "edit_history_tweet_ids": [
                "1564148399494111232"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564148392971960322",
            "id": "1564148398227324930",
            "text": "I hope this short thread was useful.\n\nIf it was, follow me @mathsppblog for more and retweet so others learn too \ud83d\ude4f\n\nDon't forget to check my free Python book that helps you write elegant Python code (link in the Twitter profile!).",
            "edit_history_tweet_ids": [
                "1564148398227324930"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564148392971960322",
            "id": "1564148396549603328",
            "text": "The method `.lstrip` is very different.\n\nThe string arguments represents \u201call characters I want to get rid of\u201d, regardless of order and quantity.\n\nThen, `.lstrip` will get rid of all those characters on the left of the string.\n\nHere are two examples: https://t.co/G4u4YFfPwp",
            "attachments": {
                "media_keys": [
                    "3_1564148389704613894"
                ]
            },
            "edit_history_tweet_ids": [
                "1564148396549603328"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564148389704613894",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbT4rFhXwAYfUzE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "The method `.removeprefix` was added in Python \ud83d\udc0d 3.9 and does what it says on the tin.\n\nYou give it a prefix and if the original string starts with that, it removes it.\n\nIt just removes it once, and only if the prefix is 100% present: https://t.co/lwgpWOgqYs",
            "id": "1564148394796453890",
            "attachments": {
                "media_keys": [
                    "3_1564148379525025794"
                ]
            },
            "edit_history_tweet_ids": [
                "1564148394796453890"
            ],
            "conversation_id": "1564148392971960322"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564148379525025794",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbT4qfmXkAIPTPh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1564148392971960322",
            "conversation_id": "1564148392971960322",
            "text": "The Python \ud83d\udc0d string methods `.lstrip` and `.removeprefix` look very similar.\n\nBut they do very different things!\n\nLet me explain. https://t.co/f9lfTUV0WR",
            "edit_history_tweet_ids": [
                "1564148392971960322"
            ],
            "attachments": {
                "media_keys": [
                    "3_1564148368355491842"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564148368355491842",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbT4p1_WAAIw4Eb.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1563970194149621762",
            "edit_history_tweet_ids": [
                "1563970194149621762"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563970191054233603"
                ]
            },
            "conversation_id": "1563970194149621762",
            "text": "You can deduplicate a list of values in two ways.\n\nPython \ud83d\udc0d has sets, and those don't have duplicates...\n\nBut sets do not preserve order.\n\nIf you _need_ the order to be preserved, use `dict.fromkeys`! https://t.co/LTMUXRa1Jj"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563970191054233603",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbRWmj0WYAM55MR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1563878085942022144",
            "conversation_id": "1563878085942022144",
            "text": "Python \ud83d\udc0d integers / floats have a method `as_integer_ratio`.\n\nThis gives you a numerator and denominator to produce that exact number.\n\nHowever, \u201cexact\u201d may not mean what you expect: https://t.co/1WUItFkuib",
            "edit_history_tweet_ids": [
                "1563878085942022144"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563878082284601345"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563878082284601345",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbQC1H6XwAErNgW.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1563785980833939456",
            "edit_history_tweet_ids": [
                "1563785980833939456"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563785977730064384"
                ]
            },
            "conversation_id": "1563785980833939456",
            "text": "I just found out that you can convert Python \ud83d\udc0d floats to hexadecimal.\n\nFrom a mathematician's point of view, this doesn't surprise me.\n\nFloats are floats, who cares if it's base 10, 16, or 42 \ud83e\udd37\n\nBut as a (Python) programmer, I find this very curious!\n\nDid you know this? https://t.co/YOliShyQkf"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563785977730064384",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbOvD7tWYAA8nF-.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "You can't call methods on Python \ud83d\udc0d integers / floats directly.\n\n(I guess it's because the dot `.` \u201ccould\u201d be a decimal point..?)\n\nInstead, what you can do is wrap the integer / float in parenthesis.\n\nThen, you can call the methods you want: https://t.co/vtayzIGTND",
            "id": "1563607811329777664",
            "attachments": {
                "media_keys": [
                    "3_1563607807844163585"
                ]
            },
            "conversation_id": "1563607811329777664",
            "edit_history_tweet_ids": [
                "1563607811329777664"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563607807844163585",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbMNBFKUIAEiKTb.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1563245420976885763",
            "text": "The Python \ud83d\udc0d string method `.rjust` JUSTifies text on the Right.\n\nYou give it a width and Python does the rest...\n\nYou can also specify a character to fill the empty space...\n\nAnd you can do all this with string formatting as well...\n\n(Who can guess what `.ljust` does?!) https://t.co/gRdn4wi32O",
            "edit_history_tweet_ids": [
                "1563245420976885763"
            ],
            "id": "1563245420976885763",
            "attachments": {
                "media_keys": [
                    "3_1563245416740560898"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563245416740560898",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbHDbJGUIAIRagX.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1563153371347177472"
            ],
            "id": "1563153371347177472",
            "text": "Here's a quick recap:\n\n 1. `dict` accepts an iterable that contains key, value pairs;\n 2. use keyword arguments in `dict` if you want string keys; and\n 3. `.fromkeys` gives the same value (default is `None`) to a bunch of keys.\n\nIn what other ways can you create a Python \ud83d\udc0d dict?",
            "conversation_id": "1563153357359181824"
        }
    },
    {
        "data": {
            "id": "1563153369531039750",
            "edit_history_tweet_ids": [
                "1563153369531039750"
            ],
            "conversation_id": "1563153357359181824",
            "text": "These are just 3 ways of creating a Python dictionary.\n\nNext Tuesday, I'll send out a Mathspp Insider article talking about all the ways in which you can create dictionaries in Python \ud83d\udc0d\n\nJoin 13k others to keep learning:\n\nhttps://t.co/DOWZZCNEMI"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1563153366985080834"
            ],
            "conversation_id": "1563153357359181824",
            "attachments": {
                "media_keys": [
                    "3_1563153353705750528"
                ]
            },
            "text": "The class method `.fromkeys` has a gotcha associated with it, though.\n\nBe careful when using mutable values, because the value isn't copied to each key.\n\nIt's exactly the same object used over and over: https://t.co/WjoSKgBqJo",
            "id": "1563153366985080834"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563153353705750528",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbFvsXkXgAATTUA.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1563153364636299267",
            "conversation_id": "1563153357359181824",
            "text": "#3 class method `dict.fromkeys`\n\nThe class method `dict.fromkeys` accepts an iterable and a value, and produces a dictionary where all keys have that value.\n\nBy default, that value is `None`: https://t.co/ZL2rynMRnU",
            "edit_history_tweet_ids": [
                "1563153364636299267"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563153343152889856"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563153343152889856",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbFvrwQXoAAceU8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#2 keyword arguments\n\nYou can use the keyword arguments to `dict` to define key, value pairs in your dictionary!\n\nHowever, this only works if your keys are valid variable names: https://t.co/6uJ5ZkoOxA",
            "id": "1563153362090340362",
            "conversation_id": "1563153357359181824",
            "edit_history_tweet_ids": [
                "1563153362090340362"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563153331673088000"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563153331673088000",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbFvrFfXwAA8Xj5.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1563153357359181824",
            "text": "#1 an iterable of key, value pairs.\n\nThe built-in `dict` can take an iterable with key, value pairs.\n\nUseful, for example, when you have a bunch of keys and a bunch of values that you put together with `zip`: https://t.co/GtiJQgbl11",
            "edit_history_tweet_ids": [
                "1563153359929872387"
            ],
            "id": "1563153359929872387",
            "attachments": {
                "media_keys": [
                    "3_1563153319492722688"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563153319492722688",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbFvqYHWIAANz7M.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1563153357359181824"
            ],
            "attachments": {
                "media_keys": [
                    "3_1563153308570853376"
                ]
            },
            "id": "1563153357359181824",
            "text": "Here are 3 ways in which you can create a Python \ud83d\udc0d dictionary.\n\nI bet you never used the last one \ud83e\udd14 https://t.co/epBuYv7pv5",
            "conversation_id": "1563153357359181824"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563153308570853376",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbFvpvbXoAARE2b.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Use `!r` in Python \ud83d\udc0d f-strings to distinguish some data types from others.\n \nBy using `!r`, you tell Python to use the unambiguous representation of an object, instead of its pretty string.\n\nThis is equivalent to using the built-in `repr` explicitly.\n \nExamples \ud83d\udc47 https://t.co/WZ0CWHbDcw",
            "id": "1563061204280434688",
            "attachments": {
                "media_keys": [
                    "3_1563061200879063040"
                ]
            },
            "conversation_id": "1563061204280434688",
            "edit_history_tweet_ids": [
                "1563061204280434688"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1563061200879063040",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbEb4XiXkAAEBtf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1562883030850478088",
            "text": "Here is a Python \ud83d\udc0d challenge for you.\n\nThe built-in `range` can be sliced and it returns an updated range.\n\nImplement a function `slice_range` that accepts a range, a slice, and returns the new corresponding range.\n\nHere are some examples: https://t.co/ajngsRXjYq",
            "edit_history_tweet_ids": [
                "1562883030850478088"
            ],
            "id": "1562883030850478088",
            "attachments": {
                "media_keys": [
                    "3_1562883027084230656"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562883027084230656",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbB51SbXwAAOoWE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1562790939394879489",
            "attachments": {
                "media_keys": [
                    "3_1562790935620161536"
                ]
            },
            "text": "Python \ud83d\udc0d ranges are extremely useful and versatile.\n\nYou can slice ranges, and they return NEW ranges with updates boundaries.\n\nThat blew my mind \ud83e\udd2f when I found out... https://t.co/rT8E3OCtAA",
            "edit_history_tweet_ids": [
                "1562790939394879489"
            ],
            "conversation_id": "1562790939394879489"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562790935620161536",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbAmE2_XEAA0u44.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1562715019715915781",
            "edit_history_tweet_ids": [
                "1562715019715915781"
            ],
            "conversation_id": "1562714998757277696",
            "text": "Here is a quick summary:\n\nReverse a Python list with:\n\n 1. the built-in `reversed` that will notice changes to the original list;\n 2. slicing `[::-1]` that creates a copy of the original list; and\n 3. the method `.reverse` that reverses a list in place."
        }
    },
    {
        "data": {
            "conversation_id": "1562714998757277696",
            "edit_history_tweet_ids": [
                "1562715018009124865"
            ],
            "text": "There you have it, three ways in which you can reverse a Python list.\n\nI hope this was useful and, if it was, follow me @mathsppblog for more daily Python knowledge \ud83d\ude09\n\nExtra internet points if you retweet this thread for me \ud83d\ude4f",
            "id": "1562715018009124865"
        }
    },
    {
        "data": {
            "conversation_id": "1562714998757277696",
            "edit_history_tweet_ids": [
                "1562715015500922883"
            ],
            "text": "#3: the method `.reverse`:\n\nLists have a method `.reverse` that reverses the list IN PLACE.\n\nWhat this means is that you do not get a return value with the reversed list...\n\nInstead, the list itself gets turned around \ud83d\ude43 https://t.co/kIZUmJKxqQ",
            "id": "1562715015500922883",
            "attachments": {
                "media_keys": [
                    "3_1562714995200327680"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562714995200327680",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa_hAi4XgAAT3Q2.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1562715013873250304",
            "text": "Slicing is very powerful and useful, and that is why I wrote a whole chapter of my free book \u201cPydon'ts\u201d on the subject.\n\nThe link to the free book is in my Twitter profile and the chapter can also be read online:\n\nhttps://t.co/B2buRRBihY",
            "edit_history_tweet_ids": [
                "1562715013873250304"
            ],
            "conversation_id": "1562714998757277696"
        }
    },
    {
        "data": {
            "conversation_id": "1562714998757277696",
            "edit_history_tweet_ids": [
                "1562715011554115584"
            ],
            "text": "Notice that slices are not \u201clinked\u201d to the original list.\n\nThat's because slicing creates a copy of the list.\n\nSo, if you change the elements in a given index, the reversed list will not notice: https://t.co/YMwz4JgQgO",
            "id": "1562715011554115584",
            "attachments": {
                "media_keys": [
                    "3_1562714983187767296"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562714983187767296",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa_g_2IWYAA6xVS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1562714998757277696",
            "text": "Slices in Python \ud83d\udc0d are regular objects, so you can also name them.\n\nThus, you could go as far as creating a named slice to reverse lists, and then use it: https://t.co/kdWEQ4NJ1A",
            "edit_history_tweet_ids": [
                "1562715009322405889"
            ],
            "id": "1562715009322405889",
            "attachments": {
                "media_keys": [
                    "3_1562714971338940416"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562714971338940416",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa_g_J_XoAAZxRt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1562714998757277696",
            "id": "1562715006822916098",
            "text": "#2: slicing with `[::-1]`:\n\nThe slicing syntax with brackets `[]` and colons `:` accepts a \u201cstep\u201d that can be negative.\n\nIf the \u201cstart\u201d and \u201cstop\u201d are omitted and the \u201cstep\u201d is -1, we get a copy in the reverse order: https://t.co/5kflU0wOPf",
            "attachments": {
                "media_keys": [
                    "3_1562714960270065664"
                ]
            },
            "edit_history_tweet_ids": [
                "1562715006822916098"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562714960270065664",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa_g-gwWAAA3c7o.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1562714998757277696",
            "text": "The `list_reverseiterator` object that is returned is \u201clinked\u201d to the original list...\n\nSo, if you change the original list, the reverse iterator will notice: https://t.co/BmSpayiXp9",
            "edit_history_tweet_ids": [
                "1562715004100431872"
            ],
            "id": "1562715004100431872",
            "attachments": {
                "media_keys": [
                    "3_1562714949297872896"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562714949297872896",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa_g934XoAAkYJC.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1562714998757277696",
            "id": "1562715001412268033",
            "edit_history_tweet_ids": [
                "1562715001412268033"
            ],
            "text": "#1: the built-in `reversed`:\n\nThe built-in `reversed` accepts a sequence and returns an object that knows how to iterate over that sequence IN REVERSE.\n\nHence, `reversed`.\n\nNotice it doesn't return a list: https://t.co/Dr3tXKJ5Wt",
            "attachments": {
                "media_keys": [
                    "3_1562714936454909952"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562714936454909952",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa_g9ICXkAAgfTM.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1562714923406344192"
                ]
            },
            "conversation_id": "1562714998757277696",
            "text": "Here are 3 simple ways in which you can reverse a Python \ud83d\udc0d list.\n\nLet's see how they are different. https://t.co/mAWZARL9xe",
            "edit_history_tweet_ids": [
                "1562714998757277696"
            ],
            "id": "1562714998757277696"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1562714923406344192",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa_g8XbWQAAKBMr.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Modification of the evil code that @dabeaz shared yesterday(?).\n\nhttps://t.co/ufIXZbRzKF",
            "edit_history_tweet_ids": [
                "1562000381864968192"
            ],
            "conversation_id": "1561999718401572864",
            "id": "1562000381864968192"
        }
    },
    {
        "data": {
            "text": "I have too much fun doing what shouldn't be done \ud83e\udd21\n\nLo and behold, the Collatz conjecture in a weird Python \ud83d\udc0d dialect \ud83d\ude43 https://t.co/Kp7F2YSO60",
            "id": "1561999718401572864",
            "attachments": {
                "media_keys": [
                    "3_1561999714328911872"
                ]
            },
            "edit_history_tweet_ids": [
                "1561999718401572864"
            ],
            "conversation_id": "1561999718401572864"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561999714328911872",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa1Wdt_WIAA8ULF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1561995412348747777"
            ],
            "attachments": {
                "media_keys": [
                    "3_1561995279150321665"
                ]
            },
            "id": "1561995412348747777",
            "conversation_id": "1561765223408730116",
            "text": "Tried writing my own factorial version using this dialect.\n\nIt was an interesting exercise \ud83d\ude43 https://t.co/7zcxnVoVMc"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561995279150321665",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fa1SbjqXkAE_WEP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1561812514006093825",
            "edit_history_tweet_ids": [
                "1561812514006093825"
            ],
            "text": "I spend way too much time in the Python \ud83d\udc0d Standard Library source code...\n\nJust now, I found a tiny piece of code in the module CSV that my ignorant self feels could be improved.\n\nIs this PR-worthy?\nWhat if I find 10 things like this?\nOr 100? https://t.co/6m1N1beKnl",
            "id": "1561812514006093825",
            "attachments": {
                "media_keys": [
                    "3_1561812125466624001"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561812125466624001",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fayr2nBWAAEf8kw.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "@dabeaz In the lambda `loop`, `n` is the value for which we still have to compute the factorial.\n\nIt goes down with each call.\n\n`r0` is the accumulated factorial that grows as we reduce the value of `n`.\n\nDoes this make sense?",
            "id": "1561765232229457922",
            "conversation_id": "1561765223408730116",
            "edit_history_tweet_ids": [
                "1561765232229457922"
            ]
        }
    },
    {
        "data": {
            "id": "1561765230304174085",
            "edit_history_tweet_ids": [
                "1561765230304174085"
            ],
            "attachments": {
                "media_keys": [
                    "3_1561765218648297472"
                ]
            },
            "conversation_id": "1561765223408730116",
            "text": "@dabeaz The function `fact` defines `loop` in its body, which is a tail recursive factorial.\n\nI commented ou the successive calls below.\n\nRemember that the 3rd arguments of sub, mul, and eqv, can be read as what happens after that operation. https://t.co/JlZjQxyK63"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561765218648297472",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FayBMRgXkAAxVSY.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "@dabeaz Alright, we are halfway there!\n\nNow, we just need to understand how David put everything together to implement the factorial function.\n\nYou still with me? \ud83d\udcaa",
            "id": "1561765228840353792",
            "conversation_id": "1561765223408730116",
            "edit_history_tweet_ids": [
                "1561765228840353792"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1561765223408730116",
            "edit_history_tweet_ids": [
                "1561765227120791553"
            ],
            "text": "@dabeaz The fourth lambda is a bit more interesting but also crazier.\n\nIt implements conditionals.\n\n(I have no idea what \u201cbnz\u201d means, though \ud83e\udd37)\n\nThe first argument is the Boolean value, then:\n\n - if the Boolean is `True`, we call `c`\n - if it is `False`, we call the alternative `a` https://t.co/QryRjynKOu",
            "id": "1561765227120791553",
            "attachments": {
                "media_keys": [
                    "3_1561765192022769664"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561765192022769664",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FayBKuUWQAAlai0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1561765225183027208",
            "conversation_id": "1561765223408730116",
            "text": "@dabeaz Let us start by looking at the four lambdas at the top.\n\nThe first three are quite similar to each other:\n\nTake the first two arguments, operate on them, and recursively call `c` with the result.\n\nSo, David is going to chain operations by doing these crazy recursive calls. https://t.co/nrvjpBPGBH",
            "edit_history_tweet_ids": [
                "1561765225183027208"
            ],
            "attachments": {
                "media_keys": [
                    "3_1561765180324847618"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561765180324847618",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FayBKCvWIAI7iS3.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1561765223408730116",
            "edit_history_tweet_ids": [
                "1561765223408730116"
            ],
            "attachments": {
                "media_keys": [
                    "3_1561765167028912129"
                ]
            },
            "text": "I just found another Python \ud83d\udc0d monstrosity.\n\nThis one was brought to you by the infamous @dabeaz...\n\nBut what does it do?\n\nSit tight, here we go \ud83e\uddd1\u200d\ud83d\ude80 https://t.co/CuCyniodKJ",
            "id": "1561765223408730116"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561765167028912129",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FayBJRNWQAECKrr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1560945777832239104",
            "id": "1561394376902729728",
            "edit_history_tweet_ids": [
                "1561394376902729728"
            ],
            "text": "What's the caveat associated with this example?"
        }
    },
    {
        "data": {
            "text": "I am going to submit a couple of Python \ud83d\udc0d talk proposals to @PyjamasConf.\n\nDo you have any suggestions you'd like me to consider as well..? https://t.co/8xXXGFYCLZ",
            "id": "1561036455983579139",
            "edit_history_tweet_ids": [
                "1561036455983579139"
            ],
            "conversation_id": "1561036455983579139"
        }
    },
    {
        "data": {
            "conversation_id": "1560945777832239104",
            "edit_history_tweet_ids": [
                "1560945777832239104"
            ],
            "text": "Everyone knows the string method `.split` in Python \ud83d\udc0d\n\nBut did you know you can specify the maximum number of splits?\n\nHere is how you get the first three words in a sentence: https://t.co/ZbKetSq7Vq",
            "id": "1560945777832239104",
            "attachments": {
                "media_keys": [
                    "3_1560945774762115072"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560945774762115072",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FamX6XJXwAAqVQq.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1560588856256122881",
                    "3_1560588856239349760"
                ]
            },
            "text": "I love font ligatures.\n\nFirst time I saw them, it was in the context of Haskell and I thought they were really beautiful!\n\nNaturally, I started using them with Python \ud83d\udc0d\n\nBut I've heard good arguments against them, so I think I'll stop using them \ud83d\ude22\n\nHere are some examples \ud83d\udc47 https://t.co/KNxkmXNdN8",
            "edit_history_tweet_ids": [
                "1560589660862066688"
            ],
            "conversation_id": "1560589660862066688",
            "id": "1560589660862066688"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560588856256122881",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FahTS-GUUAEOTOE.jpg"
                },
                {
                    "media_key": "3_1560588856239349760",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FahTS-CUYAA2gF-.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "For reference, here is the naive solution I wrote before posting the challenge.\n\nIt is a simple solution and the quality isn't nowhere close to some of the things shared in the comments! https://t.co/k4QODzMFtJ",
            "id": "1560208738220392448",
            "conversation_id": "1557625401031233536",
            "edit_history_tweet_ids": [
                "1560208738220392448"
            ],
            "attachments": {
                "media_keys": [
                    "3_1560208451917303808"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560208451917303808",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fab5UhgX0AA8grH.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1560173944476520448",
            "edit_history_tweet_ids": [
                "1560173946317807616"
            ],
            "attachments": {
                "media_keys": [
                    "3_1560173940953202688"
                ]
            },
            "text": "You could also achieve this particular effect by using `str.partition`.\n\nThat would likely be more appropriate...\n\nBut that doesn't mean the key ideas shown above are not worth understanding \ud83d\ude09 https://t.co/8fwljZMwVo",
            "id": "1560173946317807616"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560173940953202688",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FabZ7uJWQAAlzGS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1560173944476520448",
            "attachments": {
                "media_keys": [
                    "3_1560173928760360965"
                ]
            },
            "text": "Did you know you can combine `compress` and `accumulate` from the Python \ud83d\udc0d itertools and write really powerful things?\n\nFor example, you can use them to extract a comment from code, or to extract the code before a comment.\n\nStudying these ideas can be really eye-opening: https://t.co/QH9YaxTe7v",
            "edit_history_tweet_ids": [
                "1560173944476520448"
            ],
            "conversation_id": "1560173944476520448"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560173928760360965",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FabZ7AuWQAU9LMw.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559891827863560193",
            "text": "Did you know you can set a default argument to be a lambda function in Python \ud83d\udc0d?\n\nThis can be useful, for example, when a function can have some pre- or post-processing...\n\nNot saying you should, but you could!\n\nHere's an example \ud83d\udc47 https://t.co/PdPQSAjeeS",
            "edit_history_tweet_ids": [
                "1559891827863560193"
            ],
            "id": "1559891827863560193",
            "attachments": {
                "media_keys": [
                    "3_1559891823941795842"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559891823941795842",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaXZWWYWQAITVrR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1559837007584583682"
            ],
            "conversation_id": "1559837003973287936",
            "attachments": {
                "media_keys": [
                    "3_1559837000466927616"
                ]
            },
            "text": "Finally, if you want your chunks to always have the same size, you can use `strict=True` in `zip`!\n\nThis will make your `chunk` function error if the chunk size doesn't divide evenly!\n\nHowever, this only works in Python 3.10+ https://t.co/uXF6CVimPP",
            "id": "1559837007584583682"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559837000466927616",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaWnfNBXkAA6xg9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1559837005730701321",
            "edit_history_tweet_ids": [
                "1559837005730701321"
            ],
            "conversation_id": "1559837003973287936",
            "attachments": {
                "media_keys": [
                    "3_1559836987011506178"
                ]
            },
            "text": "The code above has a limitation, though.\n\nAnd that is: it ignores the last elements if the chunk size doesn't divide evenly into the length of the iterable.\n\nSometimes this is ok... Sometimes, it is not.\n\nIf you use https://t.co/SlEF2boxYV_longest, you get the opposite behaviour: https://t.co/cYJJoFd1vx"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559836987011506178",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaWnea5WIAIg7pm.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559837003973287936",
            "id": "1559837003973287936",
            "text": "Do you need to chunk a Python \ud83d\udc0d list or another iterable into groups of `n` items?\n\nFor example, do you need to split a list of integers into groups of 4 integers?\n\nYou can do that with the built-in `zip`: https://t.co/i4pxtTMAd9",
            "attachments": {
                "media_keys": [
                    "3_1559836973782765568"
                ]
            },
            "edit_history_tweet_ids": [
                "1559837003973287936"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559836973782765568",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaWndpnXkAAxHdl.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559510926260375556",
            "edit_history_tweet_ids": [
                "1559510926260375556"
            ],
            "attachments": {
                "media_keys": [
                    "3_1559510308884041731"
                ]
            },
            "text": "I am preparing one or two Python \ud83d\udc0d remote workshops for September.\n\nMy newsletter subscribers will have a say on what topic(s) I choose, and I will be sending out the form shortly!\n\nSo, you still have a bit to subscribe (https://t.co/32yn3xZkqE) to help me decide!\n\nSee you soon! https://t.co/pBkwxpw349",
            "id": "1559510926260375556"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559510308884041731",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaR-XQCX0AMd1ht.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "What is this dark magic?\n\nIt's the power of the methods `translate` and `maketrans`!\n\nThere's a chapter about them in my free book Pydon'ts.\n\nThe link is in my profile!",
            "id": "1559259155764072448",
            "conversation_id": "1559259154014953472",
            "edit_history_tweet_ids": [
                "1559259155764072448"
            ]
        }
    },
    {
        "data": {
            "text": "Remove punctuation from a string in 2 lines of Python \ud83d\udc0d!\n\nIngredients:\n\n - the module `string`\n - the str methods `translate` and `maketrans`\n - the dictionary method `fromkeys` https://t.co/cRW55FGFba",
            "id": "1559259154014953472",
            "attachments": {
                "media_keys": [
                    "3_1559259150177247232"
                ]
            },
            "edit_history_tweet_ids": [
                "1559259154014953472"
            ],
            "conversation_id": "1559259154014953472"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559259150177247232",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaOZ748XoAAAnwt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559195232931037185",
            "edit_history_tweet_ids": [
                "1559195232931037185"
            ],
            "text": "Did you know the sentence \"the quick brown fox jumps over the lazy dog\" has the 26 letters of the alphabet?\n\nYou can easily check that in Python \ud83d\udc0d with sets!\n\nWe use `A &gt;= B` to mean \"A contains everything in B\". https://t.co/s5Fg9somgf",
            "id": "1559195232931037185",
            "attachments": {
                "media_keys": [
                    "3_1559195229659533313"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559195229659533313",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaNfzOdXEAEYHTy.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d sets use the comparison operators for set containment operations.\n\nFor example, `setA &lt; setB` means:\n\n\"Is the set A strictly contained in the set B?\"\n\nCan you guess what `setA &gt; setB` means? https://t.co/xqxOMrGZnX",
            "id": "1559105648373252097",
            "attachments": {
                "media_keys": [
                    "3_1559105645407780864"
                ]
            },
            "conversation_id": "1559105648373252097",
            "edit_history_tweet_ids": [
                "1559105648373252097"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559105645407780864",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaMOUvHWQAA9C7z.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "If you don't want to miss it, subscribe to the Mathspp Insider here:\n\nhttps://t.co/DOWZZCN6Xa\n\nLearn today what you'll need tomorrow \ud83d\ude09",
            "id": "1559088232725467138",
            "conversation_id": "1559088230666063872",
            "edit_history_tweet_ids": [
                "1559088232725467138"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559088230666063872",
            "edit_history_tweet_ids": [
                "1559088230666063872"
            ],
            "attachments": {
                "media_keys": [
                    "3_1559088228631822337"
                ]
            },
            "text": "Last week I posted an algorithmic challenge for you!\n\nYou had to implement an integer spiral grid.\n\nI got many replies!\n\nIn tomorrow's edition of the Mathspp Insider, I'm going to be analysing your code and sharing Python \ud83d\udc0d tips. https://t.co/2CdOwgQIB6",
            "id": "1559088230666063872"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559088228631822337",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaL-e8kXwAErn39.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1558800130467368961",
            "edit_history_tweet_ids": [
                "1558800130467368961"
            ],
            "attachments": {
                "media_keys": [
                    "3_1558800126818369537"
                ]
            },
            "text": "The Python \ud83d\udc0d built-in `set` has many common set operations.\n\nThe set difference is represented with `-`:\n\n`C = setA - setB`\n\nC contains the items of A that are not in B.\n\nAn example: https://t.co/e1Zx0cRKVE",
            "id": "1558800130467368961"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558800126818369537",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaH4dNrXwAEsaeH.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1558799885616484352",
            "edit_history_tweet_ids": [
                "1558799885616484352"
            ],
            "attachments": {
                "media_keys": [
                    "3_1558799882445529091"
                ]
            },
            "text": "The Python \ud83d\udc0d built-in `set` has many common set operations.\n\nThe set difference is represented with `-`:\n\n`C = setA - setB`\n\nC contains the items of A that are not in B.\n\nAn example: https://t.co/3aK04z3aXM",
            "id": "1558799885616484352"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558799882445529091",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaH4O_UWIAMYzqP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1558528080330870784"
                ]
            },
            "conversation_id": "1558528083912712193",
            "text": "Python \ud83d\udc0d defines many useful constants in the module `string`.\n\nIf you ever need the Latin alphabet, use it! https://t.co/1KtGaSakDD",
            "edit_history_tweet_ids": [
                "1558528083912712193"
            ],
            "id": "1558528083912712193"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558528080330870784",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaEBCBiX0AAsL_n.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Do you know any other ridiculous ways of creating a string with the alphabet?\n\nIf you do, share them above!\n\nLet's see who can figure out the weirdest one of them all!\n\nI owe this one to @ZechCodes.",
            "id": "1558350164108115970",
            "conversation_id": "1558350162199777281",
            "edit_history_tweet_ids": [
                "1558350164108115970"
            ]
        }
    },
    {
        "data": {
            "id": "1558350162199777281",
            "attachments": {
                "media_keys": [
                    "3_1558350158911373313"
                ]
            },
            "text": "One of the reasons why I love Python \ud83d\udc0d is...\n\nIt makes my life easy!\n\nI can be lazy all I want!\n\nFor example, why would I write down the 26 letters of the latin alphabet...\n\nWhen I can just tell Python to compute them for me! \ud83e\udd21 https://t.co/IEAMdSGSpp",
            "edit_history_tweet_ids": [
                "1558350162199777281"
            ],
            "conversation_id": "1558350162199777281"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558350158911373313",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaBfNomWAAEnFXU.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "It makes me very happy to see so many folks deriving value from this packaging article! https://t.co/wjyEXVmXJO",
            "id": "1558272442845609984",
            "conversation_id": "1558272442845609984",
            "edit_history_tweet_ids": [
                "1558272442845609984"
            ]
        }
    },
    {
        "data": {
            "id": "1558171992586702849",
            "edit_history_tweet_ids": [
                "1558171992586702849"
            ],
            "attachments": {
                "media_keys": [
                    "3_1558171988526505985"
                ]
            },
            "conversation_id": "1558171992586702849",
            "text": "Python \ud83d\udc0d f-strings can be parametrised.\n\nDid you know that?\n\nThis is useful, for example, when you want to align a bunch of values...\n\nBut you need to compute the width dynamically!\n\nHere is an example with values in a column. https://t.co/BN9Qto82wU"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558171988526505985",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ-9KwMWIAEyoNs.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1558086688538333186",
            "id": "1558086688538333186",
            "text": "Are you familiar with Python \ud83d\udc0d f-strings?\n\nWhen using f-strings, you can specify a fixed-width field, and you can align your data inside it.\n\nHere are the three alignment options:\n\n - left;\n - centre; and\n - right. https://t.co/xV1j1d5N5V",
            "attachments": {
                "media_keys": [
                    "3_1558086685153452035"
                ]
            },
            "edit_history_tweet_ids": [
                "1558086688538333186"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1558086685153452035",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ9vlcXWYAM0bd5.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1557625402729893888",
            "attachments": {
                "media_keys": [
                    "3_1557625397893906432"
                ]
            },
            "text": "My function returns a \u201cmatrix\u201d as a list of lists.\n\nYou can also return a NumPy matrix.\n\nI'm using the auxiliary function `print_grid` to print it decently.\n\nIf you want, you can use the function `print_grid`, included below.\n(The code is in the ALT text of the image.) https://t.co/yPjwpLOO2F",
            "edit_history_tweet_ids": [
                "1557625402729893888"
            ],
            "conversation_id": "1557625401031233536"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557625397893906432",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ3MC_aXwAA-JaF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Here is a Python \ud83d\udc0d algorithm challenge for you.\n\nYour task is to implement a function `involute` that produces the pattern shown below.\n\nIt's the pattern of a \u201cspiral of integers\u201d \ud83d\udc47\n\nReply with your code and then I'll write a comparison of all submissions. https://t.co/6Wybp1CDhn",
            "id": "1557625401031233536",
            "attachments": {
                "media_keys": [
                    "3_1557625387190026241"
                ]
            },
            "conversation_id": "1557625401031233536",
            "edit_history_tweet_ids": [
                "1557625401031233536"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557625387190026241",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ3MCXiXgAEYbCp.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "The module `bisect` has four more methods: `bisect_left`, `bisect_right`, `insort_left`, and `insort_right`...\n\nThe `_left` and `_right` where to place ties (elements that are equal).\n\nThe methods `bisect` and `insort` match their `_right` variants.",
            "id": "1557370604059348992",
            "conversation_id": "1557367701252734976",
            "edit_history_tweet_ids": [
                "1557370604059348992"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1557367698002247680"
                ]
            },
            "text": "The function `bisect` tells you where a value _would_ go...\n\nBut if you want to insert it, `bisect` can also do that for you!\n\nJust use the method `insort` \ud83d\udc47 https://t.co/zKNPLvkvpW",
            "edit_history_tweet_ids": [
                "1557367703052115968"
            ],
            "conversation_id": "1557367701252734976",
            "id": "1557367703052115968"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557367698002247680",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZzhq4gXgAAEu8g.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1557367701252734976",
            "id": "1557367701252734976",
            "edit_history_tweet_ids": [
                "1557367701252734976"
            ],
            "text": "Are you familiar with the module `bisect` from the Python \ud83d\udc0d standard library?\n\nIt is a small module to help you work with sorted lists.\n\nIf you have a sorted list and a new value, you can find the index where the new value would go \ud83d\udc47 https://t.co/rSR4tVT0va",
            "attachments": {
                "media_keys": [
                    "3_1557367686174310400"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557367686174310400",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZzhqMcXgAACBt9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1557327952634855426",
            "edit_history_tweet_ids": [
                "1557327952634855426"
            ],
            "attachments": {
                "media_keys": [
                    "3_1557327949401133060"
                ]
            },
            "text": "Have you heard of floating point errors?\n\nThey can be a nuisance!\n\nIn Python \ud83d\udc0d, you can get around them by making use of `fractions.Fraction`!\n\nHere is a simple example \ud83d\udc47 https://t.co/lPa9HMuGQa",
            "id": "1557327952634855426"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557327949401133060",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZy9hNbXkAQZg1h.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1557005066581823491"
                ]
            },
            "text": "Did you know that Python \ud83d\udc0d 3.10 introduced the keyword argument `strict` in `zip`?\n\nIf your iterables _should_ have the same length, you can signal so with `strict=True`.\n\nThis makes it so that a `ValueError` is raised if the iterables have different lengths: https://t.co/LaINx73pIL",
            "id": "1557005070235058177",
            "conversation_id": "1557005070235058177",
            "edit_history_tweet_ids": [
                "1557005070235058177"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557005066581823491",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZuX29MX0AMVRj7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1556915962141708288"
            ],
            "attachments": {
                "media_keys": [
                    "3_1556915958656237568"
                ]
            },
            "id": "1556915962141708288",
            "text": "Here is a Python \ud83d\udc0d quiz for you!\n\nTake a look at the function `f` below.\n\nWhat is the result of `f(4, 3)`?\n\n(`f` only works on Python 3.10+ because of the match statement.)\n\n\ud83e\udd21 https://t.co/PPPn6FoEki",
            "conversation_id": "1556915962141708288"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556915958656237568",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZtG0MTXgAAQQc2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1556707089099247622",
            "id": "1556707089099247622",
            "edit_history_tweet_ids": [
                "1556707089099247622"
            ],
            "text": "Do you know how to use the second argument of `itertools.accumulate` in Python \ud83d\udc0d?\n\nThe second argument is a function that must accept two arguments.\n\nHere are examples of calling `accumulate` with different second arguments \ud83d\udc47\n\nCan you see what's happening? https://t.co/vxoKtlU1WL",
            "attachments": {
                "media_keys": [
                    "3_1556707085433323531"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556707085433323531",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZqI2K6WQAsBONH.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1556646444588847108",
            "edit_history_tweet_ids": [
                "1556646444588847108"
            ],
            "conversation_id": "1556646444588847108",
            "attachments": {
                "media_keys": [
                    "3_1556646440771928066"
                ]
            },
            "text": "Python \ud83d\udc0d has a nice tool called `itertools.accumulate`.\n\nWhat does it do?\n\nIt accepts an iterable and returns partial sums lazily.\n\nIf you need all partial sums immediately, use `list`: https://t.co/3UskTOlyBY"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556646440771928066",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZpRsL8WQAI07bP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1556555349309767681",
            "text": "By this time tomorrow, 13,000 readers of the Mathspp Insider will get the full explanation in their inbox.\n\nIf you want to become a better programmer, you should subscribe too \ud83d\ude09\n\nhttps://t.co/DOWZZCN6Xa",
            "edit_history_tweet_ids": [
                "1556555349309767681"
            ],
            "conversation_id": "1556555347413852163"
        }
    },
    {
        "data": {
            "conversation_id": "1556555347413852163",
            "edit_history_tweet_ids": [
                "1556555347413852163"
            ],
            "attachments": {
                "media_keys": [
                    "3_1556555344150675456"
                ]
            },
            "text": "Did you know that the Python \ud83d\udc0d `functools.reduce` and `itertools.accumulate` are related?\n\nThis relationship may not be obvious at first...\n\n(Heck, they are in different modules!)\n\nBut once you see it, there is no going back.\n\nHere is a hint: https://t.co/qYDMOf1bC6",
            "id": "1556555347413852163"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556555344150675456",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZn-1qlWQAA6IHz.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1555997661039321088"
            ],
            "attachments": {
                "media_keys": [
                    "3_1555997657167953920"
                ]
            },
            "id": "1555997661039321088",
            "conversation_id": "1555997661039321088",
            "text": "Do you know the pain of being in the Python \ud83d\udc0d REPL...\n\nYou write a huge expression, it takes a long time to run, and you forgot to assign the result?!\n\nHappens to me all the time \ud83d\ude05\n\nIn those cases, use `_` to recover the last result you got! https://t.co/Hro8JQ7sXZ"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555997657167953920",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZgDoArWAAA_Umw.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1555952862349459457"
                ]
            },
            "text": "What is short-circuiting in programming?\n\nIt is when you have a binary logical operation that returns its value without checking the right side, because the result is already known.\n\nShort-circuiting can be really useful!\n\nHere is a Python \ud83d\udc0d example showing it in action: https://t.co/4sBUkdaS13",
            "id": "1555952866283720707",
            "conversation_id": "1555952866283720707",
            "edit_history_tweet_ids": [
                "1555952866283720707"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555952862349459457",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZfa4m-XgAEs0gi.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1555866057314865152",
            "edit_history_tweet_ids": [
                "1555866057314865152"
            ],
            "attachments": {
                "media_keys": [
                    "3_1555866042605477890",
                    "3_1555866054206918656"
                ]
            },
            "conversation_id": "1555866057314865152",
            "text": "The Python \ud83d\udc0d interpreter can run with the flag `-q`.\n\nCan you guess what it does?\n\n`q` stands for `quiet`, and if you start the REPL with `python -q`, it won't print the copyright and version info: https://t.co/xD5W9bVMtm"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555866042605477890",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZeL7COXoAItDz0.jpg"
                },
                {
                    "media_key": "3_1555866054206918656",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZeL7tcXkAATQF9.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1555619924487426048",
            "id": "1555619924487426048",
            "edit_history_tweet_ids": [
                "1555619924487426048"
            ],
            "text": "You can run your Python \ud83d\udc0d programs with the flag `-i`.\n\nWhat for?\n\nAfter the program runs, a REPL starts and you have access to all your script variables!\n\nAt this point, you can Interactively Inspect your program state.\n\n(That's what `-i` stands for.) https://t.co/H0jtBwrfSv",
            "attachments": {
                "media_keys": [
                    "3_1555619920599289857"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555619920599289857",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZasE2TXkAEn6SI.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "You can run Python \ud83d\udc0d with the flag `-c` to run a short line of code directly.\n\nUseful if you are too lazy to drop into the REPL, run your code, and then exit!\n\nHere is a short example: https://t.co/ciuFkBraLA",
            "id": "1555560785207771138",
            "attachments": {
                "media_keys": [
                    "3_1555560782141837312"
                ]
            },
            "conversation_id": "1555560785207771138",
            "edit_history_tweet_ids": [
                "1555560785207771138"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555560782141837312",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZZ2SiYX0AAbLmJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1555527830603239430",
            "text": "For a bonus tip, see @guilatrova 's tweet on a similar tip.\n\nHats off to @learn_byexample and @gjmos as well for some interesting follow-up remarks!\n\nhttps://t.co/8zDrVhC2Bf",
            "edit_history_tweet_ids": [
                "1555527834185129991"
            ],
            "id": "1555527834185129991"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1555527827017064448"
                ]
            },
            "conversation_id": "1555527830603239430",
            "text": "Using `in` is a great tip but it isn't always a suitable alternative!\n\nThe operator `or` short-circuits, which means it stops comparing as soon as it finds a `True`.\n\nThis isn't the case if you use `in` \ud83d\udc47 https://t.co/VqcRW6ImCB",
            "edit_history_tweet_ids": [
                "1555527832360701961"
            ],
            "id": "1555527832360701961"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555527827017064448",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZZYUS-WYAAtyws.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1555527830603239430"
            ],
            "conversation_id": "1555527830603239430",
            "attachments": {
                "media_keys": [
                    "3_1555527814350360576"
                ]
            },
            "text": "Do you want to check if a Python \ud83d\udc0d variable matches one of several possible values?\n\nInstead of writing a big chain of `or` and equalities `==`, use the `in` operator! https://t.co/Xz6rCGwx7a",
            "id": "1555527830603239430"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555527814350360576",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZZYTjyX0AA2yKa.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1555490197311201281",
            "id": "1555490199341334529",
            "edit_history_tweet_ids": [
                "1555490199341334529"
            ],
            "text": "Pros vs Cons?\n\nCons: I don't love is the startup time of the software.\n\nPros:\n - the cameraman mode (the webcam follows me!)\n - the customisation options\n - I look great even with my terrible lighting setup\n\nHere's a link if you're interested \ud83d\udc47\n\nhttps://t.co/C63vNFaZRA"
        }
    },
    {
        "data": {
            "conversation_id": "1555490197311201281",
            "id": "1555490197311201281",
            "edit_history_tweet_ids": [
                "1555490197311201281"
            ],
            "text": "The team at @get_lumina sent me their AI-powered webcam to try.\n\nI've been using it for the past 2 weeks and it's been a great experience.\n\nIt is now my default webcam.\n\nHere is an example video I recorded with the Lumina webcam \ud83d\udc47\nDon't I look good? \u2728\n\nhttps://t.co/DWJDL4w7wf"
        }
    },
    {
        "data": {
            "text": "Many have replied, talking about things like a frozen dataclass and a namedtuple!\n\nThanks a lot for all of your insights, those are great tools from the standard library...\n\nBut I was showing how to create an immutable object _from scratch_!",
            "edit_history_tweet_ids": [
                "1555478670990606340"
            ],
            "conversation_id": "1555088698512916480",
            "id": "1555478670990606340"
        }
    },
    {
        "data": {
            "conversation_id": "1555088698512916480",
            "edit_history_tweet_ids": [
                "1555088702279335936"
            ],
            "attachments": {
                "media_keys": [
                    "3_1555088695157575680"
                ]
            },
            "text": "Finally, to define the attributes we actually care about and to make those immutable...\n\nWe inherit from `tuple`, save the attributes as tuple values, and use properties to fetch them!\n\nHere is what the `Person` implementation looks like \ud83d\udc47\n\nQuite cool, right? https://t.co/3JE6yJRh9B",
            "id": "1555088702279335936"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555088695157575680",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZTI7dUX0AAXASC.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1555088698512916480",
            "edit_history_tweet_ids": [
                "1555088700396244993"
            ],
            "attachments": {
                "media_keys": [
                    "3_1555088681945415680"
                ]
            },
            "text": "There are two key steps.\n\nThe first one is setting `__slots__` to the empty list `[]`.\n\nBy setting `__slots__` to the empty list, we make it so that no attributes can be assigned to our class: https://t.co/gIHwq3w7IH",
            "id": "1555088700396244993"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555088681945415680",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZTI6sGWQAAOxsU.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1555088698512916480",
            "edit_history_tweet_ids": [
                "1555088698512916480"
            ],
            "conversation_id": "1555088698512916480",
            "attachments": {
                "media_keys": [
                    "3_1555088670553739264"
                ]
            },
            "text": "How can you define an immutable object in Python \ud83d\udc0d?\n\nIt is not obvious, but it can be done.\n\nCome with me, let's create an immutable `Person` object \ud83d\ude80 https://t.co/DiiH4p3GqC"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555088670553739264",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZTI6BqXEAAVb1v.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1554942737308426245",
            "id": "1554942740479328257",
            "edit_history_tweet_ids": [
                "1554942740479328257"
            ],
            "text": "As a rule of thumb, `__repr__` should return a string that will let you know with 100% certainty what you are looking at.\n\nIdeally, it would be something you could copy &amp; paste to create a new, equal object of that same type.\n\nHere is an example of a good VS bad `__repr__`: https://t.co/Wemou8vOIe",
            "attachments": {
                "media_keys": [
                    "3_1554942733055365120"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554942733055365120",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZRELWHXEAAXUD7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1554942739065749505"
            ],
            "conversation_id": "1554942737308426245",
            "text": "As you can see, `__str__` was called with `print`:\n\n`__str__` is used for the pretty representation of an object.\n\n`__repr__`, on the other hand, is used automatically when an object is inside containers.\n\n`__repr__` is supposed to be unambiguous and useful for debugging.",
            "id": "1554942739065749505"
        }
    },
    {
        "data": {
            "conversation_id": "1554942737308426245",
            "edit_history_tweet_ids": [
                "1554942737308426245"
            ],
            "attachments": {
                "media_keys": [
                    "3_1554942717892956160"
                ]
            },
            "text": "The Python \ud83d\udc0d dunder methods `__str__` and `__repr__` are responsible for creating string versions of your objects.\n\nThey have different purposes, and that is why they are called in different situations.\n\nHere is a small example in the session \ud83d\udc47 https://t.co/HER9aL2Kbu",
            "id": "1554942737308426245"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554942717892956160",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZREKdoXEAAPMin.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "\u201cHuge difference in speed and readability!\u201d\n\nThat's what Jeremy wrote when they started using list comprehensions at their work.\n\nYou can write better \u2728 Python \ud83d\udc0d code like Jeremy!\n\nJust check out my ebook \u201cComprehending Comprehensions\u201d \ud83d\ude09\n\nhttps://t.co/3tfAXbSOat",
            "edit_history_tweet_ids": [
                "1554519661022269442"
            ],
            "conversation_id": "1554519661022269442",
            "id": "1554519661022269442"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1554363899079806976"
            ],
            "conversation_id": "1554363899079806976",
            "attachments": {
                "media_keys": [
                    "3_1554363895497768961"
                ]
            },
            "text": "Python \ud83d\udc0d indexing supports slicing with `[:]` and `[::]`...\n\nBut did you know you can create `slice` objects?\n\nYou can even name your slices! \ud83d\udc47 https://t.co/LZzHFc3NOn",
            "id": "1554363899079806976"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554363895497768961",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZI1ukLWQAE3uMH.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1554233791023120389",
            "edit_history_tweet_ids": [
                "1554233791023120389"
            ],
            "conversation_id": "1554233791023120389",
            "attachments": {
                "media_keys": [
                    "3_1554233787550244866"
                ]
            },
            "text": "Do you need to call a Python \ud83d\udc0d function over all combinations of some values?\n\nYou can do that with `starmap` and `product`, two tools from the module `itertools`.\n\nHere is an example: https://t.co/hLFyaFIMGa"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554233787550244866",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZG_ZSTXoAI59sQ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1554146275213320193",
            "text": "As a (Python \ud83d\udc0d) programmer, what areas of maths interest you the most?\n\nFor me, I love everything-graphs!",
            "edit_history_tweet_ids": [
                "1554146275213320193"
            ],
            "id": "1554146275213320193"
        }
    },
    {
        "data": {
            "id": "1554026928918626305",
            "attachments": {
                "media_keys": [
                    "3_1554026925756239873"
                ]
            },
            "edit_history_tweet_ids": [
                "1554026928918626305"
            ],
            "conversation_id": "1554026928918626305",
            "text": "Did you know Python \ud83d\udc0d has a matrix multiplication operator?\n\nIt was added in Python 3.5 and it is `@`.\n\nIt's just that built-in types do nothing with it \ud83e\udd37\n\nIf you want to use `@` with your own objects, just implement `__matmul__` / `__rmatmul__` / `__imatmul__`: https://t.co/BSH7Y7wWlf"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554026925756239873",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZEDQWEX0AE-3va.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553899303340576771"
            ],
            "attachments": {
                "media_keys": [
                    "7_1553898834404728832"
                ]
            },
            "id": "1553899303340576771",
            "text": "Do you use VS Code in your Python \ud83d\udc0d programming?\n\nI just discovered that you can CTRL + click on multiple locations to edit multiple locations at the same time!\n\n@vscodetips, how about that? https://t.co/17Yvy71jNn",
            "conversation_id": "1553899303340576771"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1553898834404728832",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1553688194977243139",
            "conversation_id": "1553688194977243139",
            "text": "Python \ud83d\udc0d has the built-in type `bytearray`.\n\nIt's just like the type `bytes`, but it's mutable.\n\nHave you ever used it for something? https://t.co/wUJXvBTTW2",
            "edit_history_tweet_ids": [
                "1553688194977243139"
            ],
            "attachments": {
                "media_keys": [
                    "3_1553688191886049283"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553688191886049283",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY_PLcEWQAMXhVd.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553644134103146496"
            ],
            "id": "1553644134103146496",
            "text": "Thank you so much for your support!\n\nLet's gooo \ud83d\ude80 https://t.co/CJavRSzLDH",
            "conversation_id": "1553644134103146496"
        }
    },
    {
        "data": {
            "conversation_id": "1551336014651834368",
            "id": "1553550507251306497",
            "edit_history_tweet_ids": [
                "1553550507251306497"
            ],
            "text": "I still have to work on the 5 chapters missing.\n\nHere is what the ToC looks like, so far \ud83d\udc47 https://t.co/zFC4r3ZzAq",
            "attachments": {
                "media_keys": [
                    "3_1553550483498967042",
                    "3_1553550496744488963"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553550483498967042",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY9R7wWXoAIy5fH.png"
                },
                {
                    "media_key": "3_1553550496744488963",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY9R8hsWQAMSbAn.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1551336014651834368",
            "edit_history_tweet_ids": [
                "1553550058628472832"
            ],
            "text": "It's past 2am here and my brain is essentially asleep.\n\nEven though I had the 100+ tweets from my series, I decided I'd rewrite the explanations and create even more exercises...\n\nSo, that means today I was only able to have 8 out of 13 chapters out.",
            "id": "1553550058628472832"
        }
    },
    {
        "data": {
            "text": "@PyOhio Done! Thanks to everyone \n\nHere are the relevant links:\n\n\ud83e\uddd1\u200d\ud83d\udcbb the slides: https://t.co/vxPbokoEKg\n\n\ud83d\udcfd\ufe0f video recording: https://t.co/DWJDL4w7wf\n\n\ud83d\udcd6 the book: https://t.co/3tfAXbSOat",
            "id": "1553452511473844225",
            "conversation_id": "1553397095540965378",
            "edit_history_tweet_ids": [
                "1553452511473844225"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553425952063066113"
            ],
            "conversation_id": "1553397095540965378",
            "text": "@PyOhio @jugmac00 \ud83d\udcfd\ufe0f\ud83d\udd34\n\nI'll be ON in 30 minutes: https://t.co/2fkskw8B9V",
            "id": "1553425952063066113"
        }
    },
    {
        "data": {
            "conversation_id": "1553397095540965378",
            "id": "1553397095540965378",
            "edit_history_tweet_ids": [
                "1553397095540965378"
            ],
            "text": "It's happening! @PyOhio is happening right now.\n\nI'll be ON in two and a half hours at this link: https://t.co/2fkskw8B9V\n\nMeanwhile, catch some of the other talks at https://t.co/QltE9DUlTy\n\n@jugmac00's was my favourite so far, settling the debate on the % of codecov to aim for. https://t.co/PxOlM1F4Xk",
            "attachments": {
                "media_keys": [
                    "3_1553397042889752576"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553397042889752576",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY7GYViWAAAhafJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1553343271446913025",
                    "3_1553343273950912514",
                    "3_1553343276740222976",
                    "3_1553343279319629825"
                ]
            },
            "text": "Later today I'll be speaking at @PyOhio, helping you get your black belt in comprehension-fu.\n\nI put up a whole performance just for you, but I need your feedback after you watch it!\n\nWill I see you there? There is still time to register (for free!) :)\n\nHere is a sneak peek \ud83d\udc47 https://t.co/1s0rOmroBL",
            "edit_history_tweet_ids": [
                "1553343282054397954"
            ],
            "conversation_id": "1553343282054397954",
            "id": "1553343282054397954"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553343271446913025",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY6VebTWIAEv4O2.jpg"
                },
                {
                    "media_key": "3_1553343273950912514",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY6VekoWIAI33ok.jpg"
                },
                {
                    "media_key": "3_1553343276740222976",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY6VevBXoAAQYDq.jpg"
                },
                {
                    "media_key": "3_1553343279319629825",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY6Ve4oWQAEDgeW.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1553298722062229504",
            "conversation_id": "1553298722062229504",
            "text": "Hey there \ud83d\udc4b,\n\nI'm Rodrigo, a Python \ud83d\udc0d aficionado and an indie author.\n\nFollow me if you are interested in:\n\n\ud83d\udc0d Python\n\ud83d\udc40 Learning in public\n\ud83d\udc0d Python\n\ud83e\udde0 Mathematics\n\ud83d\udc0d Python\n\nOh, and sometimes, I also tweet about Python \ud83d\udc0d!\n\nI'll see you around \ud83d\ude80",
            "edit_history_tweet_ids": [
                "1553298722062229504"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1553054266012712960",
            "id": "1553054269250715651",
            "edit_history_tweet_ids": [
                "1553054269250715651"
            ],
            "text": "Btw, if you know of any crazy and wild list comprehensions, send them to me and I'll include them in the \u201cDo not try this at home\u201d chapter \ud83d\ude02\ud83d\ude09\n\nAnd while you're at it, get the book here \u2192 https://t.co/s0RpceMxf2\n\nJust crossed 40 pre-sales! \u2764\ufe0f"
        }
    },
    {
        "data": {
            "conversation_id": "1553054266012712960",
            "edit_history_tweet_ids": [
                "1553054266012712960"
            ],
            "attachments": {
                "media_keys": [
                    "3_1553053699156709379"
                ]
            },
            "text": "It's not an exciting screenshot, but here is a screenshot of the table of contents of the \u201cComprehending Comprehensions\u201d ebook.\n\nMany of you asked for it, and I obliged! \ud83d\udc47\n\nThese are the top-level chapters. https://t.co/Y2XEq7eE4Q",
            "id": "1553054266012712960"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553053699156709379",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY2OHGdXkAMEqGO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553008991445422082"
            ],
            "id": "1553008991445422082",
            "conversation_id": "1553008987800571904",
            "text": "Generator expressions are a very powerful Python \ud83d\udc0d feature.\n\nLuckily for you, I teach you about this in the ebook I am releasing tomorrow! \ud83d\ude09\n\nIt's 40% off until tomorrow.\n\nhttps://t.co/iXEdzLpmta"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1553008989683818501"
            ],
            "attachments": {
                "media_keys": [
                    "3_1553008984310910976"
                ]
            },
            "id": "1553008989683818501",
            "conversation_id": "1553008987800571904",
            "text": "You are also likely to find this pattern with generator expressions, which are more common than `filter`.\n\nIn that case, you just need to make sure to parenthesise the generator expression: https://t.co/7ZOJjiFOAL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553008984310910976",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY1lcWrXkAAYTF-.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1553008987800571904",
            "edit_history_tweet_ids": [
                "1553008987800571904"
            ],
            "attachments": {
                "media_keys": [
                    "3_1553008970624802817"
                ]
            },
            "conversation_id": "1553008987800571904",
            "text": "The Python \ud83d\udc0d built-in `next` fetches the next value of a generator.\n\nThis is useful, for example, to fetch the first element that satisfies a condition.\n\nBut, if no values satisfy the restriction, `next` raises an error!\n\nYou can use the 2nd argument to provide a default value. https://t.co/i4iqj8cdoe"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1553008970624802817",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FY1lbjsWIAEy4hK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1552761099111522304"
            ],
            "conversation_id": "1552761097215696896",
            "text": "I knew this, but I had forgotten it!\n\nI stumbled upon this when working on my comprehensions ebook, \u201cComprehending Comprehensions\u201d.\n\nDo you think this should be explained in the book?\n\nhttps://t.co/iXEdzLpmta",
            "id": "1552761099111522304"
        }
    },
    {
        "data": {
            "id": "1552761097215696896",
            "attachments": {
                "media_keys": [
                    "3_1552761093952503814"
                ]
            },
            "text": "The Python \ud83d\udc0d built-in `map` doesn't get much love nowadays...\n\nI'd say, mainly because of list comprehensions...\n\nBut `map` is awesome!\n\nDid you know it can take multiple iterables, and it fetches an argument from each iterable? https://t.co/lL3DPr3YTb",
            "edit_history_tweet_ids": [
                "1552761097215696896"
            ],
            "conversation_id": "1552761097215696896"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552761093952503814",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYyD_PIWAAYswHM.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1552726215039062023"
            ],
            "id": "1552726215039062023",
            "text": "Lots of people want to know how to create Python \ud83d\udc0d packages, which is awesome!\n\nI wrote a question on Stack Overflow and answered it myself with the findings of my latest article.\n\nI hope this serves many of you.\n\nhttps://t.co/70VKv4PvHE",
            "conversation_id": "1552726215039062023"
        }
    },
    {
        "data": {
            "conversation_id": "1552540755092185088",
            "text": "Internet fame doesn't last long! Look at me, at the #10 spot now :P\n\nFor those interested, the article linked is this one: https://t.co/qfI0vGfxjq\n\nIf you want to stay up to date with the stuff I write, you should check out Mathspp Insider: https://t.co/6qSQvHbcHC https://t.co/0R4zhoTtdh",
            "edit_history_tweet_ids": [
                "1552647442943787009"
            ],
            "id": "1552647442943787009",
            "attachments": {
                "media_keys": [
                    "3_1552646558092365828"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552646558092365828",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYwb0XzUEAQoL5o.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I am so excited to be speaking at the VERY FIRST PYCON in Portugal, my home country!\n\nWill I see you there? https://t.co/FYyVfn5Ka9",
            "id": "1552545291026530310",
            "conversation_id": "1552545291026530310",
            "edit_history_tweet_ids": [
                "1552545291026530310"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1552540755092185088",
            "edit_history_tweet_ids": [
                "1552545209703096322"
            ],
            "text": "Someone pinch me, the internet is being nice?\n\n\u201cThis is really nicely written; kudos to the author for compiling a great deal of information in a readable format.\u201d\n\n\u201cdelivered as promised!\u201d\n\n\u201cVery well written , thanks!!\u201d\n\n\u201cExcellent and very informative post\u201d\n\n\ud83d\ude0a\ud83d\ude33",
            "id": "1552545209703096322"
        }
    },
    {
        "data": {
            "id": "1552540755092185088",
            "attachments": {
                "media_keys": [
                    "3_1552540643603398658"
                ]
            },
            "edit_history_tweet_ids": [
                "1552540755092185088"
            ],
            "conversation_id": "1552540755092185088",
            "text": "Look who made it to the front page of Hacker News \ud83d\ude1b https://t.co/g8VaCho6zh"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552540643603398658",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYu7fVlWQAIacRy.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1552478613664055296",
            "edit_history_tweet_ids": [
                "1552478613664055296"
            ],
            "text": "Take a look at this article if you want to know about all the dunder methods that Python has. https://t.co/UWvN7RiIyq",
            "id": "1552478613664055296"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1552302428753641477"
            ],
            "id": "1552302428753641477",
            "conversation_id": "1539140936336392193",
            "text": "I'll wrap this up for now.\n\nI took this whole thread and wrote it down, more thoroughly, in an article.\n\nFeel free to bookmark that article and use it as a reference!\n\nhttps://t.co/qfI0vFXWrS"
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "id": "1552299266999197702",
            "edit_history_tweet_ids": [
                "1552299266999197702"
            ],
            "text": "I got some cool badges there!\n\nI gotta say, this was one of THE most satisfying steps of the whole thing! https://t.co/QdDg7OyBz4",
            "attachments": {
                "media_keys": [
                    "3_1552254136464318470"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552254136464318470",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYq26bUWIAYMkAG.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1552252388974755845",
            "edit_history_tweet_ids": [
                "1552252388974755845"
            ],
            "conversation_id": "1552252388974755845",
            "text": "How do you create a Python \ud83d\udc0d package?\n\nHow to publish it? How to set up CI/CD?\n\nHow do you check code coverage?\n\nMost importantly, how do you add those cute badges to your README file?\n\nI was writing a thread on this, now I turned it into an article \ud83d\udc47\n\nhttps://t.co/qfI0vFXWrS"
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d has `functools.partial` that lets you \u201cfreeze\u201d arguments to functions.\n\nFor example, want to create a function that reads binary strings and converts to integers?\n\nFreeze the argument `base` in the built-in `int`: https://t.co/sQL122UYnL",
            "id": "1552041848226578433",
            "attachments": {
                "media_keys": [
                    "3_1552041844606910465"
                ]
            },
            "edit_history_tweet_ids": [
                "1552041848226578433"
            ],
            "conversation_id": "1552041848226578433"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552041844606910465",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYn11ahWQAEJ-Y_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1551906549551042560",
            "text": "The Python \ud83d\udc0d book \u201cComprehending Comprehensions\u201d will be out this Saturday!\n\nIt covers:\n\n - list comprehensions (simple, nested, common use cases, ...)\n - set and dict comprehensions\n - generator expressions\n - and more!\n\nGet it now for 40% off \ud83d\ude09\n\nhttps://t.co/3tfAXbSOat https://t.co/ZWrjU6rNTj",
            "edit_history_tweet_ids": [
                "1551906549551042560"
            ],
            "id": "1551906549551042560",
            "attachments": {
                "media_keys": [
                    "3_1551905901610766337"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551905901610766337",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYl6MfZXkAEysaH.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1551683743139627010",
            "edit_history_tweet_ids": [
                "1551683743139627010"
            ],
            "attachments": {
                "media_keys": [
                    "3_1551683738974801921"
                ]
            },
            "conversation_id": "1551683743139627010",
            "text": "Here's a neat trick for your Python \ud83d\udc0d classes.\n\nWhen defining `__repr__`, you can use:\n\n - `type(self).__name__` to get the string name of your class; and\n - use `vars(self).values()` to access all the attributes of the instance.\n\nAnd it works neatly for subclasses! \ud83d\udc47 https://t.co/wIgT3eYH05"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551683738974801921",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYiwI7FX0AE63E_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1551570050787774464"
            ],
            "text": "Am I reaching the end of this whole endeavour?\n\nWhat else is there left to do?\n\nI am going to add a bunch of colourful badges to the README file... But is there anything left I should check / try to do?",
            "id": "1551570050787774464"
        }
    },
    {
        "data": {
            "id": "1551569664970571776",
            "attachments": {
                "media_keys": [
                    "3_1551569428856410114"
                ]
            },
            "text": "@codecov @coveragepy Of course I messed up the YAML syntax on my first try!\n\nBut look at that!\n\nGitHub Actions published to PyPI for me! Now you can get extendedjson 0.1.3 \ud83d\ude43 https://t.co/JIZp7tWtAx",
            "edit_history_tweet_ids": [
                "1551569664970571776"
            ],
            "conversation_id": "1539140936336392193"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551569428856410114",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYhILMtXkAIQzRo.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "id": "1551561544860700672",
            "edit_history_tweet_ids": [
                "1551561544860700672"
            ],
            "text": "@codecov @coveragepy The final step I want to go over is publishing automatically to PyPI.\n\nThankfully, I have seen example workflows that do this (and I'm sure there are actions out there that already do it!) but I want to do it by hand.\n\nSo, new workflow = new YAML file in .github/workflows..."
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "text": "Ok, code coverage is back at 100%.\n\nNow I'll integrate with @codecov.\n\nI log in into their website, update the workflow, and that's it! I think... \u231b\n\nAnd yeah, I did it!\nI had to change @coveragepy to write the report as XML, but then it all worked. https://t.co/CJE4q518qz",
            "edit_history_tweet_ids": [
                "1551560198413762561"
            ],
            "id": "1551560198413762561",
            "attachments": {
                "media_keys": [
                    "3_1551560189018574855"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551560189018574855",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYg_xXoXEAc-hAz.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1551521160705327105"
            ],
            "text": "I have some CI set up, but I just noticed the checks passed and I only have 77% code coverage...\n\nI think I'll set code coverage to fail when under 100%...\n\nAnd then, I'll also integrate GH Actions with some nice code coverage tools! \u2728\n\nJust give me a second!",
            "id": "1551521160705327105"
        }
    },
    {
        "data": {
            "id": "1551510565545287681",
            "conversation_id": "1539140936336392193",
            "text": "So, in order to make sure tox knows what environments to run, I needed to add a `[gh-actions]` section to the file `tox.ini`.\n\nBut it was just a mapping of Python versions and environments \ud83d\udc47 https://t.co/EJiGM1CDaI",
            "edit_history_tweet_ids": [
                "1551510565545287681"
            ],
            "attachments": {
                "media_keys": [
                    "3_1551510551670431744"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551510551670431744",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYgSoGGWIAA89Yl.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1551510561678139392"
            ],
            "text": "But as I was writing this, one obvious advantage came to mind:\n\nGitHub Actions CI can run in parallel, so this is faster than letting tox go over all the Python environments successively.\n\nThis is also useful if we have other things to be done per each Python version.",
            "id": "1551510561678139392"
        }
    },
    {
        "data": {
            "text": "tox can make use of a plugin `tox-gh-actions` to only run specific environments from within the action, if I tell the action to run on multiple Python versions.\n\nAt first, I thought \u201cwhat's the point if tox already goes through the environments separately...",
            "id": "1551510559597727745",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1551510559597727745"
            ]
        }
    },
    {
        "data": {
            "id": "1551509630806892545",
            "attachments": {
                "media_keys": [
                    "3_1551509335703945221"
                ]
            },
            "edit_history_tweet_ids": [
                "1551509630806892545"
            ],
            "conversation_id": "1539140936336392193",
            "text": "I got some tests to run on GitHub Actions!\n\nI set it up so that CI runs when there are commits to the main branch or PRs against the main branch.\n\nThe first CI run was successful because it was not set up properly, so it was essentially a no-op \ud83e\udd23\n\nHere's why: https://t.co/UbQv2YfSdo"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551509335703945221",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYgRhURWAAUBGzS.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1551500148991295493"
            ],
            "id": "1551500148991295493",
            "text": "So, it looks like GitHub actions are defined in YAML files that live in the folder .github/workflows.\n\nLet me start with a `build.yml` file that will run `tox` and code coverage checks and whatnot.",
            "conversation_id": "1539140936336392193"
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1551499987799969792"
            ],
            "text": "Alright, I'm finally finishing this off!\n\nI just want to add CI/CD to this with GitHub Actions.\n\nI'll be doing a lot of copying and pasting from projects that do similar things.\n\nI'll also use the GitHub Actions docs if needed.\n\nhttps://t.co/YKLs8zzOza\nhttps://t.co/jiX5p0VBy5",
            "id": "1551499987799969792"
        }
    },
    {
        "data": {
            "conversation_id": "1551336014651834368",
            "id": "1551336019357835265",
            "edit_history_tweet_ids": [
                "1551336019357835265"
            ],
            "text": "I took all the feedback you folks gave me during this really long journey!\n\nI fixed and improved many exercises, and created even more exercises to cover all topics really well!\n\nThe book releases next Saturday, just in time for my @PyOhio talk on the same subject \ud83d\ude09"
        }
    },
    {
        "data": {
            "conversation_id": "1551336014651834368",
            "id": "1551336014651834368",
            "text": "Day 100/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nWe made it \ud83e\udd73\ud83c\udf89\ud83c\udf8a\n\nWe reached the end! And, with it, I'd like to announce my book on comprehending comprehensions!\n\n100+ exercises on all-things-comprehensions!\n\nAnd 40% OFF for now!!\n\nhttps://t.co/3tfAXbSOat https://t.co/4T7j2TuVzR",
            "attachments": {
                "media_keys": [
                    "3_1551335305587949569"
                ]
            },
            "edit_history_tweet_ids": [
                "1551336014651834368"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551335305587949569",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYdzPbkXgAEesNt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1551166829816578050",
            "attachments": {
                "media_keys": [
                    "3_1551166826788409344"
                ]
            },
            "edit_history_tweet_ids": [
                "1551166829816578050"
            ],
            "conversation_id": "1551166829816578050",
            "text": "Playing around with Python \ud83d\udc0d?\n\nNeed to inspect an instance of a custom object..?\n\nUse `vars`! It will show you the instance attributes and values. https://t.co/fR1Zwst0X8"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551166826788409344",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYbaArIX0AAqyum.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Kudos to @gjmos for prompting me to tweet this and to @willmcgugan for teaching me this.\n\nThe other tweet about list comp speed:\n\nhttps://t.co/1ZMLf2sMvn",
            "id": "1550947051852238856",
            "conversation_id": "1550946630546882560",
            "edit_history_tweet_ids": [
                "1550947051852238856"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1550946630546882560",
            "id": "1550946630546882560",
            "edit_history_tweet_ids": [
                "1550946630546882560"
            ],
            "text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSome days ago I asked why list comprehensions tend to be faster than loops.\n\nThe experiment below shows that the fact that we explicitly call `lst.append` in the loop takes a LOT of time! https://t.co/xGWr8VRzw5",
            "attachments": {
                "media_keys": [
                    "3_1550946627153715208"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550946627153715208",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYYRvXkWYAgdTHM.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Only 2 days left!\n\nYou can get this bundle of Python \ud83d\udc0d books by me, @learn_byexample, @tw_lgiordani, and @driscollis for FREE!\n\nAfter you get the books, let us know your feedback \ud83d\udcaa\n\nhttps://t.co/W0lCU7u6qg",
            "id": "1550801755318910976",
            "conversation_id": "1550801755318910976",
            "edit_history_tweet_ids": [
                "1550801755318910976"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1550617466149261312"
            ],
            "attachments": {
                "media_keys": [
                    "3_1550617462865018886"
                ]
            },
            "id": "1550617466149261312",
            "conversation_id": "1550617466149261312",
            "text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nToday I want to share two common patterns I use a lot:\n\n - using a list comprehension to draw many random numbers; and\n - using `sum` and a generator expression to count values.\n\nLet us roll a die: https://t.co/vWloKNWrvP"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550617462865018886",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYTmXfCWQAYv0NC.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1550157666537848832",
            "text": "If three minutes and a half is too much for you, I also have a written version of the talk.\n\nYou can read it here:\n\nhttps://t.co/Gb45ookVQx",
            "edit_history_tweet_ids": [
                "1550157668085628928"
            ],
            "id": "1550157668085628928"
        }
    },
    {
        "data": {
            "id": "1550157666537848832",
            "edit_history_tweet_ids": [
                "1550157666537848832"
            ],
            "conversation_id": "1550157666537848832",
            "text": "Sadly, EuroPython 2022 is over.\n\nIt was my first (Python \ud83d\udc0d) conference in person and I absolutely loved it!\n\nNone of my talks got accepted, but I did give a lightning \u26a1 talk.\n\nIt was called \u201cSmoosh all the things\u201d.\n\nHere is the video recording:\n\nhttps://t.co/hYQ3X84R4E"
        }
    },
    {
        "data": {
            "id": "1550063077915299840",
            "edit_history_tweet_ids": [
                "1550063077915299840"
            ],
            "conversation_id": "1550063076015329281",
            "attachments": {
                "media_keys": [
                    "3_1550063072689242113"
                ]
            },
            "text": "Of course that this can be mixed and matched with the other built-ins I mentioned.\n\nWe can figure out who is:\n\n - the heaviest (Bob)\n - the lightest (Charles)\n - the tallest (Diana)\n - the shortest (Alice) https://t.co/r7CE5AblpL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550063072689242113",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYLuJusXwAElaj6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1550063076015329281",
            "edit_history_tweet_ids": [
                "1550063076015329281"
            ],
            "attachments": {
                "media_keys": [
                    "3_1550063059091292162"
                ]
            },
            "text": "The Python \ud83d\udc0d built-ins `sorted`, `max`, and `min`, all accept a keyword argument `key`.\n\nThis `key` functions lets you determine how things are ordered.\n\nThis is useful when **not** ordering numbers directly.\n\nHere is an example where we find the heaviest person in a list: https://t.co/VuKNprNCXe",
            "id": "1550063076015329281"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550063059091292162",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYLuI8CXgAIw4o9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1549820756615372804"
            ],
            "conversation_id": "1549820756615372804",
            "text": "What's a Python \ud83d\udc0d dunder method you have been trying to learn?",
            "id": "1549820756615372804"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1549118845591474177"
            ],
            "conversation_id": "1549118845591474177",
            "attachments": {
                "media_keys": [
                    "3_1549118842114392066"
                ]
            },
            "text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nYou verify that list comprehensions are faster than loops (in general).\n\nJust take a look at the timing results below, obtained with `python -m timeit`.\n\nBut why are list comps faster..? https://t.co/kGQwKvZ0o0",
            "id": "1549118845591474177"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1549118842114392066",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FX-TYRsXwAIxWIX.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1548657801144291329",
            "edit_history_tweet_ids": [
                "1548685197746511873"
            ],
            "text": "I wrote an explanation of how this works here:\n\nhttps://t.co/oxaAFgPOeq",
            "id": "1548685197746511873"
        }
    },
    {
        "data": {
            "conversation_id": "1548657801144291329",
            "text": "Credit to eztab on Reddit:\n\nhttps://t.co/ik0yGvWRwt",
            "edit_history_tweet_ids": [
                "1548657803115495425"
            ],
            "id": "1548657803115495425"
        }
    },
    {
        "data": {
            "id": "1548657801144291329",
            "attachments": {
                "media_keys": [
                    "3_1548657797621055488"
                ]
            },
            "edit_history_tweet_ids": [
                "1548657801144291329"
            ],
            "conversation_id": "1548657801144291329",
            "text": "Python \ud83d\udc0d is a really elegant language.\n\nAnd yet, it can also give birth to monstrosities like the one below.\n\nI recommend you take a sit before taking a look at the code...\n\nThe program below prints `\"Hello, world!\"` in Python 3.9+! https://t.co/fQTKBvVePe"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1548657797621055488",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FX3wD9HXgAAJwq7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1548594377966108672"
            ],
            "conversation_id": "1548594377966108672",
            "attachments": {
                "media_keys": [
                    "3_1548594374925328384"
                ]
            },
            "text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSuppose you want to find an item (in a list, for example) that satisfies a condition.\n\nUsing `any`, `:=`, and a generator expression, you can find the first element that satisfies the condition: https://t.co/9rYuLN7C4Y",
            "id": "1548594377966108672"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1548594374925328384",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FX22YRKXoAAv_MP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1548368814848364545"
            ],
            "id": "1548368814848364545",
            "text": "I wrote a more verbose and detailed explanation of the horrendous (but intriguing) Python \ud83d\udc0d program that Ned shared a couple of days ago.\n\nIf you are unsure how this crazy program prints \u201cHello, world\u201d, give this a read!\n\nhttps://t.co/sFS9qPhgyh",
            "conversation_id": "1548368814848364545"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1548218651618074626"
                ]
            },
            "text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSay you have a collection.\n\nWith `all` and a generator expression it is easy to check if all values satisfy a condition.\n\nWith `:=`, you can also find the **first** item that does not satisfy your condition: https://t.co/15DhuujNvU",
            "id": "1548218656122753026",
            "conversation_id": "1548218656122753026",
            "edit_history_tweet_ids": [
                "1548218656122753026"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1548218651618074626",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXxgqSxUYAIvb2Z.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547992190898515970",
            "id": "1547992195071762437",
            "edit_history_tweet_ids": [
                "1547992195071762437"
            ],
            "text": "However, the built-in `next` accepts a second argument.\n\nThis second argument is the default value you get if `next` cannot grab a next item: https://t.co/KfiMtUY37d",
            "attachments": {
                "media_keys": [
                    "3_1547992186645405698"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547992186645405698",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXuSsTAUYAIjqW_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547992190898515970",
            "text": "The only caveat to bear in mind is what happens if nothing satisfies the condition.\n\nIn that case, Python raises a `StopIteration` error: https://t.co/II82bvMA2f",
            "edit_history_tweet_ids": [
                "1547992193150754817"
            ],
            "id": "1547992193150754817",
            "attachments": {
                "media_keys": [
                    "3_1547992175274631171"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547992175274631171",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXuSropUIAMX8l2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nHere's a SUPER useful pattern with generator expressions:\n\nUse `next` and an `if` when you want the **first** object that satisfies a condition.\n\nLet's go \ud83d\ude80 https://t.co/CkTWzlqaCj",
            "id": "1547992190898515970",
            "attachments": {
                "media_keys": [
                    "3_1547992163056701445"
                ]
            },
            "edit_history_tweet_ids": [
                "1547992190898515970"
            ],
            "conversation_id": "1547992190898515970"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547992163056701445",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXuSq7IVUAUvw-r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1547729770619711488"
            ],
            "conversation_id": "1547493884384710656",
            "attachments": {
                "media_keys": [
                    "16_1547729762742743041"
                ]
            },
            "text": "Bonus points: what's wrong with this code?\n\nThe code works fine for this case, but can you find an example of a bag of words for which the anagrams are wrongly computed? https://t.co/gJeY3ZCug6",
            "id": "1547729770619711488"
        },
        "includes": {
            "media": [
                {
                    "media_key": "16_1547729762742743041",
                    "type": "animated_gif"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1547580286006751240"
            ],
            "attachments": {
                "media_keys": [
                    "3_1547580282743640064"
                ]
            },
            "id": "1547580286006751240",
            "text": "Really nice poster session by @fharper on the benefits of working on your personal brand as a developer!\n\nAnd the poster itself looks really cool! \ud83d\udc47 https://t.co/vwo3OltrOo",
            "conversation_id": "1547580286006751240"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547580282743640064",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXocEVZVUAAWmML.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 99/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThis is the toughest exercise so far! I think..?\n\nThis code aggregates anagrams from a bag of words.\n\nLet's go \ud83d\ude80 https://t.co/J6zcVxf9OS",
            "id": "1547493884384710656",
            "conversation_id": "1547493884384710656",
            "edit_history_tweet_ids": [
                "1547493884384710656"
            ],
            "attachments": {
                "media_keys": [
                    "3_1547493880416829440"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547493880416829440",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXnNfDpWAAABA3y.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1547228704455233542",
            "edit_history_tweet_ids": [
                "1547228704455233542"
            ],
            "attachments": {
                "media_keys": [
                    "3_1547228701804437504"
                ]
            },
            "conversation_id": "1547144749219553283",
            "text": "Was at a discussion panel earlier, lots of interesting back and forth between the audience and the core members who replied to all the questions!\n\nNow it's time for @reuvenmlerner to tell me \"What happens when you import a module?\". https://t.co/9uoEvcGsKf"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547228701804437504",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXjcToVXoAA2tsE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1547170095474135040"
                ]
            },
            "conversation_id": "1547144749219553283",
            "text": "Now it's time to learn a bit about packaging Python packages.\n\nWhat a horror story Vin\u00edcius just shared about dependencies that broke last minute! \ud83d\ude28\ud83d\ude31\n\n#EuroPython2022 https://t.co/AAtcmiLyV7",
            "edit_history_tweet_ids": [
                "1547171202497757184"
            ],
            "id": "1547171202497757184"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547170095474135040",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXinASvX0AA_Srt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1547158798074351643",
            "conversation_id": "1547144749219553283",
            "text": "\u201cYou can also do bad things with a spoon, but people don't hate spoons...\nDon't quote me on that.\u201d\n\n\u2015 @pyblogsal",
            "edit_history_tweet_ids": [
                "1547158798074351643"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547144749219553283",
            "id": "1547158241322434560",
            "edit_history_tweet_ids": [
                "1547158241322434560"
            ],
            "text": "@europython When I started writing Python code, I remember error messages scared me a lot...\n\nI really appreciate the work that's being put in making these messages more accurate and easier to understand!\n\nThanks for the work &amp; the talk, @pyblogsal!\n\n#EuroPython2022 https://t.co/1ndNhq7Z3A",
            "attachments": {
                "media_keys": [
                    "3_1547157806800932874"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547157806800932874",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXib0_3XkAosiqh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1547146436541906945"
            ],
            "attachments": {
                "media_keys": [
                    "3_1547145357838123008"
                ]
            },
            "id": "1547146436541906945",
            "conversation_id": "1547144749219553283",
            "text": "@europython At the keynote \u201cPython's role in unlocking the secrets of the Universe with the James Webb Space Telescope\u201d by Dr. Patrick Kavanagh.\n\nHere's a quote from the talk:\n\n\u201cI have never given a Python talk before, so I'm not sure if I'm supposed to show Python code.\u201d\n\n#europython2022 https://t.co/EvvTsxom39"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547145357838123008",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXiQgX3WAAApjsx.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "So stoked about all the @europython talks!\n\nTell no one, but I got to the opening session a couple minutes late \ud83d\ude14\n\nI love the \"happy to hug\", \"happy to handshake\", \"elbow bumps only\", and \"I like my distance\" stickers! https://t.co/41App1b46U",
            "id": "1547144749219553283",
            "attachments": {
                "media_keys": [
                    "3_1547144741753688064"
                ]
            },
            "conversation_id": "1547144749219553283",
            "edit_history_tweet_ids": [
                "1547144749219553283"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547144741753688064",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXiP8gxXkAAPyJS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1547131521575931904",
            "attachments": {
                "media_keys": [
                    "3_1547131516488220673"
                ]
            },
            "edit_history_tweet_ids": [
                "1547131521575931904"
            ],
            "conversation_id": "1547131519826903041",
            "text": "Dictionary comprehensions work in the same way as list comprehensions.\n\nHowever, instead of a single value on the left, you have three things:\n\n - an expression to build the key;\n - a colon `:`; and\n - an expression to build the value.\n\nHere are some examples: https://t.co/vGp1tddkzd"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547131516488220673",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXiD6s0XgAEU14v.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547131519826903041",
            "edit_history_tweet_ids": [
                "1547131519826903041"
            ],
            "attachments": {
                "media_keys": [
                    "3_1547131504328937473"
                ]
            },
            "text": "Day 98/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThere is one other comprehension you haven't met...\n\nIt also uses `{}` instead of `[]`.\n\nCan you guess what it is..?\n\nI'm talking about dictionary comprehensions, that build dictionaries instead of lists! https://t.co/VV35fhzAzR",
            "id": "1547131519826903041"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547131504328937473",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXiD5_hXkAE9qIT.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546958857666269184"
            ],
            "conversation_id": "1546958857666269184",
            "attachments": {
                "media_keys": [
                    "3_1546958853811703808"
                ]
            },
            "text": "Day 97/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nHere are some exercises on set comprehensions!\n\nAgain: set comprehensions are JUST like list comprehensions...\n\nBut they start and end with `{}` instead of `[]`!\n\nLet's go \ud83d\ude80 https://t.co/4fNicTuunp",
            "id": "1546958857666269184"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546958853811703808",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXfm4aOXkAAToHN.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1546868508864151557",
            "edit_history_tweet_ids": [
                "1546868508864151557"
            ],
            "attachments": {
                "media_keys": [
                    "3_1546868505760464899"
                ]
            },
            "conversation_id": "1546868508864151557",
            "text": "Python \ud83d\udc0d has some objects with really cool custom string formatting!\n\nFor example, `datetime.datetime`!\n\nHere's a nice example \ud83d\udc47\n\nThanks, @puppy_ninja! https://t.co/tpJA2ckfqW"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546868505760464899",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXeUtdgXgAMAGs5.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546859914592665607",
            "edit_history_tweet_ids": [
                "1546859920842170380"
            ],
            "attachments": {
                "media_keys": [
                    "3_1546859768333074434"
                ]
            },
            "text": "And last, but not least, the link to The Indie Python Extravaganza bundle on @leanpub , free for the duration of the @europython conference!\n\nThis bundle has books by me, @tw_lgiordani, @driscollis, @learn_byexample \ud83d\udc4d\n\nhttps://t.co/W0lCU7u6qg https://t.co/2q1GaW82Xs",
            "id": "1546859920842170380"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546859768333074434",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXeMw4DWAAIuG4T.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546859916765306880"
            ],
            "id": "1546859916765306880",
            "conversation_id": "1546859914592665607",
            "text": "The slides on GitHub \u2192 https://t.co/vxPbokoEKg\n\nThe tutorial will be available as a series of articles on my blog, of which there are 2 already:\n\n - https://t.co/staAVeck4o\n - https://t.co/IaX8vblpDc\n\nIf you attended, please give me feedback! \u2192 https://t.co/7AWZuBxdGC"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546859914592665607"
            ],
            "conversation_id": "1546859914592665607",
            "attachments": {
                "media_keys": [
                    "3_1546858528463360003"
                ]
            },
            "text": "Another day at @europython!\n\nThe morning started with my tutorial \u201cPython objects under the hood\u201d!\n\nI had a lot of fun, so thanks for that!\n\nHere are the links to the slides and all the other resources \ud83d\udc47 https://t.co/MNF8Hj0Qf2",
            "id": "1546859914592665607"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546858528463360003",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXeLotLXkAMoiDq.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546503873933852674"
            ],
            "id": "1546503873933852674",
            "text": "@nedbat Obviously, the first class `Person` shouldn't be there.\n\nI copied it by mistake...\n\nhttps://t.co/x2f5vr5apW",
            "conversation_id": "1546491779238739970"
        }
    },
    {
        "data": {
            "conversation_id": "1546491779238739970",
            "id": "1546491779238739970",
            "edit_history_tweet_ids": [
                "1546491779238739970"
            ],
            "text": "Yesterday, @nedbat tweeted a really weird piece of code and there was a lot to learn from there!\n\nString formatting is used very often in Python.\n\nDid you know you can implement formatting for your own objects as well?\n\nJust implement the dunder method `__format__` \ud83d\udc47 https://t.co/Y8eU4fBjNI",
            "attachments": {
                "media_keys": [
                    "3_1546491775480651776"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546491775480651776",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXY-E32WYAA1OwF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546481053556154368",
            "id": "1546481053556154368",
            "text": "Enjoying @europython a lot and it's just the first day!\n\nWent to the \u201cproperty-based testing with Hypothesis\u201d tutorial in the morning by @seifertm0, was GREAT! \ud83c\udf89\n\nNow at the TDD workshop by @tw_lgiordani.\n\n\u201cThis is the most important slide.\u201d\n\u2015 Leonardo\n\nBack to paying attention! https://t.co/VixdzGgvWo",
            "attachments": {
                "media_keys": [
                    "3_1546480959528337408"
                ]
            },
            "edit_history_tweet_ids": [
                "1546481053556154368"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546480959528337408",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXY0PTSXgAAVcwX.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546409635174879232"
            ],
            "conversation_id": "1546409635174879232",
            "attachments": {
                "media_keys": [
                    "3_1546409629533589505"
                ]
            },
            "text": "Let the games begin!\n\nAlready jumped on @llanga, met @tw_lgiordani, the organiser team, and even people who are not on Twitter so I couldn't tag them \ud83d\ude02\n\nNote to self: buy the ticket on time so I get a nicely-printed badge next time! https://t.co/504K0oM1UY",
            "id": "1546409635174879232"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546409629533589505",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXXzXWWX0AEEZTI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546249080485076994",
            "id": "1546256429429948416",
            "edit_history_tweet_ids": [
                "1546256429429948416"
            ],
            "text": "So yeah, this was more or less my journey through unravelling what was going on.\n\nDid I do good, @nedbat?"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1546256083349635072"
                ]
            },
            "conversation_id": "1546249080485076994",
            "text": "Of course, at this point, we are just using `__format__` as the setter for that property, so might as well define a setter properly. For the property.\n\nI properly set a setter for the property \ud83e\udd23\n\nOf course, at this point, the program isn't that crazy anymore. https://t.co/hWCSB4uKE5",
            "edit_history_tweet_ids": [
                "1546256179680133123"
            ],
            "id": "1546256179680133123"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546256083349635072",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXVntyPXgAAyjkj.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546249080485076994",
            "id": "1546255332300787712",
            "edit_history_tweet_ids": [
                "1546255332300787712"
            ],
            "text": "The intricacy here is that we are using a closure so that \u201c.prop\u201d remembers what needs to be printed.\n\nBy using an auxiliary variable, we could define `prop` as a \u201cproper\u201d property \ud83d\udc47... https://t.co/GaHBPF0Hje",
            "attachments": {
                "media_keys": [
                    "3_1546255297932677120"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546255297932677120",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXVnAEVX0AAnYpK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546249080485076994",
            "id": "1546254676861255680",
            "edit_history_tweet_ids": [
                "1546254676861255680"
            ],
            "text": "whenever we try to access `.prop`, we call that lambda.\n\nBut what does the lambda do..?\n\nIt prints the format `fmt` that was passed in to the dunder method `__format__`!\n\nWhich, in our code example, is \u201cHello, world!\u201d."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546254675044868096"
            ],
            "id": "1546254675044868096",
            "conversation_id": "1546249080485076994",
            "text": "Then, we set `C.prop` to `property(...)`.\n\n`property` is a built-in that is typically used as a decorator... But decorators are just syntactic sugar and they can be called directly \ud83e\udd37\n\nSo, the lambda inside is what becomes the property.\n\nIn other words, ..."
        }
    },
    {
        "data": {
            "text": "Not sure if that is ALWAYS the case in situations with weird metaclasses or lots of inheritance, but in this simple case, they are the same thing.\n\nSo, `self.__class__` is just a way of accessing the original `C` class.\n\nBecause we have proper names, we can access it directly: https://t.co/JSPd5B31OK",
            "id": "1546253908372324352",
            "conversation_id": "1546249080485076994",
            "edit_history_tweet_ids": [
                "1546253908372324352"
            ],
            "attachments": {
                "media_keys": [
                    "3_1546253868979331072"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546253868979331072",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXVls5EWIAALwy7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546253562665209862"
            ],
            "id": "1546253562665209862",
            "conversation_id": "1546249080485076994",
            "text": "Now we need to understand what the line with `self.__class__.prop = ...` is doing.\n\nLet us start with the assignment target, `self.__class__.prop`.\n\n`self.__class__` is just the type of `self`, which is `C`.\n\nIn fact, `type(self)` and `self.__class__` are the same here."
        }
    },
    {
        "data": {
            "conversation_id": "1546249080485076994",
            "edit_history_tweet_ids": [
                "1546252659098787840"
            ],
            "text": "You can learn more about the details of how proper custom string formatting works in this article: https://t.co/hP3PkwBRYV\n\nI swear my examples hurt less than this \ud83e\udd23\n\nBut let us not lose track of what we are doing.\n\nWe are inside `__format__` now...",
            "id": "1546252659098787840"
        }
    },
    {
        "data": {
            "text": "Then, the expression `f\"{C_instance:Hello, world!}\"` calls the dunder method `__format__` with two arguments:\n\n - `self`, which is the instance; and\n - the format specification which is everything to the right of `:`.\n\nIn this case, the string \"Hello, world!\"",
            "edit_history_tweet_ids": [
                "1546252431172018176"
            ],
            "conversation_id": "1546249080485076994",
            "id": "1546252431172018176"
        }
    },
    {
        "data": {
            "text": "That's why the annotation is there!\n\nBut that's just a very convoluted way of doing things!\n\nWe can actually get rid of the whole function, and just do \u201cstandard\u201d string formatting \ud83d\udc47 https://t.co/85E9Q1kDoS",
            "id": "1546252013045956608",
            "attachments": {
                "media_keys": [
                    "3_1546251998726610945"
                ]
            },
            "edit_history_tweet_ids": [
                "1546252013045956608"
            ],
            "conversation_id": "1546249080485076994"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546251998726610945",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXVkAB1WYAET0t0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546249080485076994",
            "edit_history_tweet_ids": [
                "1546252009484992515"
            ],
            "text": "So, it is by calling `__format__` that we populate `prop` with something.\n\nSo, how do we call `__format__`?\n\n`__format__` is the dunder method responsible for doing custom string formatting, so we need to format the instance of C into a string...",
            "id": "1546252009484992515"
        }
    },
    {
        "data": {
            "text": "Now, let's try to understand what the very last line `C_instance.prop` actually triggers the print!\n\nSo, the program ends with us accessing the attribute `prop`, but when was that defined?\n\nWell, it wasn't set inside `__init__`, for example...\n\nIt was set inside `__format__`.",
            "id": "1546251490150555649",
            "edit_history_tweet_ids": [
                "1546251490150555649"
            ],
            "conversation_id": "1546249080485076994"
        }
    },
    {
        "data": {
            "conversation_id": "1546249080485076994",
            "id": "1546251219806584833",
            "text": "The name `C` appears three times, but the two last times they represent an instance of the class.\n\nSo, semantically, it's kind of as if we were doing this \ud83d\udc47\n\nWe get rid of the decorator by creating an instance and giving it a name in the usual way. https://t.co/6oKjHhNzpj",
            "attachments": {
                "media_keys": [
                    "3_1546251196582821888"
                ]
            },
            "edit_history_tweet_ids": [
                "1546251219806584833"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546251196582821888",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXVjRVnXgAAxP2j.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546250639067549697"
            ],
            "id": "1546250639067549697",
            "text": "Now there are three moments here to understand:\n\n 1. first we define the class C and immediately afterwards we do C = C() with the decorator;\n 2. we (use a convoluted string annotation to) call the dunder method __format__ to set a property in C; and\n 3. we get the property.",
            "conversation_id": "1546249080485076994"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1546250136581447685"
                ]
            },
            "text": "First thing to do is assign slightly less terrible names to things that we care about.\n\nIn this version below \ud83d\udc47 the only things that remained `_` are things that are throwaways and which we do not care about. https://t.co/0NO9EHhtxZ",
            "edit_history_tweet_ids": [
                "1546250145691570177"
            ],
            "conversation_id": "1546249080485076994",
            "id": "1546250145691570177"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546250136581447685",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXViTozWIAUBS0y.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "This insane program prints \u201cHello, world!\u201d, but how?\n\nCome with me as I unravel this madness. https://t.co/gfjDj4xXkH",
            "id": "1546249080485076994",
            "conversation_id": "1546249080485076994",
            "edit_history_tweet_ids": [
                "1546249080485076994"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546236581463396354"
            ],
            "id": "1546236581463396354",
            "text": "The Python \ud83d\udc0d dunder method `__init__` was the first dunder method I ever learned.\n\nAt the time, I didn't even know it was a dunder method! \ud83d\ude01\n\nI published an article explaining it and with exercises.\n\nLet me know your thoughts \ud83d\udc47\n\nhttps://t.co/IaX8vblpDc",
            "conversation_id": "1546236581463396354"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546092856690999297"
            ],
            "conversation_id": "1546092856690999297",
            "attachments": {
                "media_keys": [
                    "3_1546092640600576000"
                ]
            },
            "text": "Apparently, coding Python \ud83d\udc0d blindfolded makes you forget about the useful predicate methods that strings have...\n\nThis is a screenshot from my @PyjamasConf talk, coming soon to a circus near y\u2015ahem, to a streaming service near you. https://t.co/EHc8Bzm8LL",
            "id": "1546092856690999297"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546092640600576000",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXTTEKjX0AAPzT3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1546044327037739008",
            "edit_history_tweet_ids": [
                "1546044327037739008"
            ],
            "conversation_id": "1546044325070622725",
            "text": "Sets can be iterated over like lists, but sets are great when you want to do a lot of membership checking.\n\nYou can read more about sets in this blog article of mine: https://t.co/FplbyYnQmW\n\nI'll tell you more about set comprehensions in my list comps course, so see you there!"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1546044321639579648"
                ]
            },
            "text": "Day 96/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nWhat's the cue that tells you you are building a **list** comprehension..?\n\nIt's the `[]` around the code `f(value) for value in iterator`, right?\n\nSwap `[]` with `{}` and you get set comprehensions! https://t.co/um6B32esjL",
            "edit_history_tweet_ids": [
                "1546044325070622725"
            ],
            "conversation_id": "1546044325070622725",
            "id": "1546044325070622725"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546044321639579648",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXSnHoZWQAAmYwV.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546002804803833856",
            "text": "I'm really lazy...\n\nI needed a list with month names...\n\nPython \ud83d\udc0d has got my back!\n\nA list of month names in the current locale is just an import away! https://t.co/CAvhMXnnX0",
            "edit_history_tweet_ids": [
                "1546002804803833856"
            ],
            "id": "1546002804803833856",
            "attachments": {
                "media_keys": [
                    "3_1546002801293250560"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546002801293250560",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXSBW1DX0AA_Vyg.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1545885535859888128"
            ],
            "id": "1545885535859888128",
            "text": "In the example above, I consumed the iterator by using the built-in `list`.\n\nHowever, in real code, if you use the generator expression, you probably don't want to use the built-in `list` afterwards.\n\nI'll write more on this in my list comp course, so stay tuned!",
            "conversation_id": "1545885534022778880"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1545885530579165185"
                ]
            },
            "text": "Day 95/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\n**Generator** expressions create lazy iterators.\n\nWhen creating a generator expression, bear in mind that it becomes _empty_ when you consume it!\n\n(\"Consuming\" kinda means to use its values...) https://t.co/BaRniPtyQN",
            "id": "1545885534022778880",
            "conversation_id": "1545885534022778880",
            "edit_history_tweet_ids": [
                "1545885534022778880"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1545885530579165185",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXQWsxmWYAExSIc.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1545704088473567234",
            "edit_history_tweet_ids": [
                "1545704088473567234"
            ],
            "text": "I love that Python \ud83d\udc0d comes with batteries included.\n\nOne of my favourite modules is `collections`, with which you can do a lot of cool stuff!\n\nUsing `collections.deque`, it's really easy to get the last N lines of a file!\n\nCheck it out \ud83d\udc47 https://t.co/sBkfAdfWC3",
            "id": "1545704088473567234",
            "attachments": {
                "media_keys": [
                    "3_1545704084988219392"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1545704084988219392",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXNxrQGX0AAmQW9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1545051844237410307",
            "id": "1545051844237410307",
            "edit_history_tweet_ids": [
                "1545051844237410307"
            ],
            "text": "I submitted 4 talks / tutorials to @DjangoConEurope !\n\nSadly, none of them got accepted!\n\nMaybe next time \ud83d\ude01\n\nMeanwhile, if you go to the conference, be sure to go out and eat a \u201cfrancesinha\u201d, a typical (~ local) dish.\n\nI hope you enjoy Porto, it's a beautiful city!"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1544739503616696324"
                ]
            },
            "conversation_id": "1544739507056115716",
            "text": "However, if you pass a generator expression to `all`, you will apply the condition to one value at a time,\nand `all` will know to stop as soon as you find a `False`.\n\nThis means you can save a lot of time if your list is big or if the `False`s show up early!\n\nHere's an example: https://t.co/S7wjghl86k",
            "edit_history_tweet_ids": [
                "1544739514177970176"
            ],
            "id": "1544739514177970176"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544739503616696324",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXAEZOeWIAQzaJ6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "So, imagine you have a bunch of values and you want to check if they all satisfy a condition.\n\nYou can pass a list comprehension to `all`.\n\nThat will apply the condition to **all** the values, and only then check if they are `all` true.",
            "id": "1544739512726740994",
            "conversation_id": "1544739507056115716",
            "edit_history_tweet_ids": [
                "1544739512726740994"
            ]
        }
    },
    {
        "data": {
            "id": "1544739511342710784",
            "edit_history_tweet_ids": [
                "1544739511342710784"
            ],
            "conversation_id": "1544739507056115716",
            "text": "Generators (and generator expressions) are awesome for many reasons.\n\nOne of them is that, because they are lazy, some functions can save time when doing computations!\n\nFor example, the function `all` can return `False` **as soon** as it finds a value `False`, right?"
        }
    },
    {
        "data": {
            "conversation_id": "1544739507056115716",
            "text": "In the snippet above you can find _generator expressions_.\n\nGenerator expressions are like list comprehensions, but _lazy_.\n\nWhat does that mean?\n\nIt means they only compute the values that are needed **when** they are needed. https://t.co/VAvMwDoTXQ",
            "edit_history_tweet_ids": [
                "1544739509140656129"
            ],
            "id": "1544739509140656129",
            "attachments": {
                "media_keys": [
                    "3_1544739491168096257"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544739491168096257",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXAEYgGXkAEVUhW.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1544739507056115716",
            "edit_history_tweet_ids": [
                "1544739507056115716"
            ],
            "text": "Day 94/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comprehensions are usually passed directly to functions like `min`, `all`, or `join`.\n\nIn these situations, you often see the list comprehensions _without_ the `[]`...\n\nBut what are those? \ud83d\udd0e https://t.co/bbQra5VSyZ",
            "id": "1544739507056115716",
            "attachments": {
                "media_keys": [
                    "3_1544739478748762113"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544739478748762113",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXAEXx1XkAETEgF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I made a mistake in one of the code snippets up there.\n\nWhen calling `super()` inside `__init__`, I shouldn't have included `self`.\n\nHowever, taking `self` from the arguments to `super().__init__` doesn't change the error/output.\n\nhttps://t.co/MaoQM61qrK",
            "id": "1544267450925072387",
            "edit_history_tweet_ids": [
                "1544267450925072387"
            ],
            "conversation_id": "1543964703432605696"
        }
    },
    {
        "data": {
            "id": "1544087685647802368",
            "attachments": {
                "media_keys": [
                    "3_1544087681453506562"
                ]
            },
            "edit_history_tweet_ids": [
                "1544087685647802368"
            ],
            "conversation_id": "1544087685647802368",
            "text": "Day 93/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comprehensions are often used directly as arguments to other functions.\n\nFor example, as arguments to functions like `min`, `all`, or `join`.\n\nKeep this in mind for tomorrow...\n\nLet's go \ud83d\ude80 https://t.co/6T66wBeEa1"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544087681453506562",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW2zkLsXwAI7HPo.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1543964725012201474",
            "edit_history_tweet_ids": [
                "1543964725012201474"
            ],
            "conversation_id": "1543964703432605696",
            "text": "@raymondh The key learning points here, are:\n\n - __init__ initialises an instance...\n - but first it was created with __new__\n - __init__ is a no-op for immutables...\n - so if you want to customise subclasses of immutable types, you need to override __new__"
        }
    },
    {
        "data": {
            "text": "@raymondh I hope you enjoyed this thread.\n\nFollow me @mathsppblog for more Python \ud83d\udc0d knowledge!\n\nI've been obsessing with list comprehensions, but I can teach you other things \ud83e\udd23\n\nSee you around! And remember:",
            "id": "1543964723619717120",
            "conversation_id": "1543964703432605696",
            "edit_history_tweet_ids": [
                "1543964723619717120"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1543964703432605696",
            "edit_history_tweet_ids": [
                "1543964722277613569"
            ],
            "text": "@raymondh Go ahead and play around with the code, to get comfortable with these ideas!\n\nI have a bonus challenge for you:\n\nI'm setting the relative tolerance in `__init__`.\n\nWhat would be different if I did it in `__new__`?",
            "id": "1543964722277613569"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1543964720251764736"
            ],
            "conversation_id": "1543964703432605696",
            "attachments": {
                "media_keys": [
                    "3_1543964699183685632"
                ]
            },
            "text": "@raymondh Now that this is set up, we can use `math.isclose` to implement the tolerant equality comparison: https://t.co/JcEsiNYyAT",
            "id": "1543964720251764736"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964699183685632",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1DtrCWIAAX9v2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "@raymondh Floats can't handle the `rel_tol` argument!\n\nSo, what we need to do is:\n\n - implement `TolerantFloat.__new__` to intercept `float.__new__`;\n - call `float.__new__` only with the value, not the `rel_tol`; and then\n - initialise the tolerant float with its relative tolerance. https://t.co/mbLl6dQp3Y",
            "id": "1543964718439796737",
            "conversation_id": "1543964703432605696",
            "edit_history_tweet_ids": [
                "1543964718439796737"
            ],
            "attachments": {
                "media_keys": [
                    "3_1543964687720652800"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964687720652800",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1DtAVWIAAL5El.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1543964716984320001",
            "conversation_id": "1543964703432605696",
            "text": "@raymondh So, the issue is that the dunder method `float.__new__` is being called, because we didn't define one for `TolerantFloat`.\n\nAnd when that's being called, it receives the arguments `0.5` and `rel_tol=0.1`, because that's what we passed in...\n\nHowever,",
            "edit_history_tweet_ids": [
                "1543964716984320001"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1543964715528978435"
            ],
            "id": "1543964715528978435",
            "text": "@raymondh This error message can look puzzling, but that's because something else is happening in the background...\n\n`__init__` **initialises your instance**, but first the instance had to be created...\n\nAnd **the dunder method `__new__` is responsible for _creating_ the instance**.",
            "conversation_id": "1543964703432605696"
        }
    },
    {
        "data": {
            "id": "1543964713809285120",
            "attachments": {
                "media_keys": [
                    "3_1543964677230788610"
                ]
            },
            "text": "@raymondh Alas, this doesn't work when you try it.\n\nIt says floats expect up to 1 argument, and you are giving it 2: https://t.co/wCygog1zYl",
            "edit_history_tweet_ids": [
                "1543964713809285120"
            ],
            "conversation_id": "1543964703432605696"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964677230788610",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1DsZQXgAItFN0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1543964712081281025",
            "attachments": {
                "media_keys": [
                    "3_1543964666275282945"
                ]
            },
            "edit_history_tweet_ids": [
                "1543964712081281025"
            ],
            "conversation_id": "1543964703432605696",
            "text": "@raymondh How do we do this?\n\nMy first instinct would be to modify `__init__` to accept the relative tolerance and to save it for later.\n\nSomething along these lines: https://t.co/7yKGMgNT3v"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964666275282945",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1DrwcXwAEtVJ9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1543964655328051201"
                ]
            },
            "conversation_id": "1543964703432605696",
            "text": "@raymondh When checking for equality, use a tolerance that allows wiggle room for floating point errors.\n\nSomething like this: https://t.co/hUXIyQt0os",
            "edit_history_tweet_ids": [
                "1543964710323847168"
            ],
            "id": "1543964710323847168"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964655328051201",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1DrHqWQAEbiVO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1543964708964818944",
            "conversation_id": "1543964703432605696",
            "text": "So, as you can see, `__init__` does nothing for the built-in immutable types...\n\nNow, let's borrow inspiration from @raymondh and suppose we want to do the following:\n\nLet's create a `float` subclass with a nice property:",
            "edit_history_tweet_ids": [
                "1543964708964818944"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1543964644490067969"
                ]
            },
            "text": "Notice how I tried to (re-)initialize `x` and nothing happened!\n\nThis is different from what happens to, say, a list object: https://t.co/BbaOtfkV7O",
            "edit_history_tweet_ids": [
                "1543964707241037824"
            ],
            "conversation_id": "1543964703432605696",
            "id": "1543964707241037824"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964644490067969",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1DqfSXwAEH_QS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1543964633123491842"
                ]
            },
            "text": "The first thing I want to show you is that `__init__`, the method that **initialises class instances**, does nothing for immutable objects.\n\nIn other words, I'll show that for immutable types, `__init__` is a no-op.\n\nJust take a look at the REPL session below: https://t.co/4rXZqLbBTz",
            "id": "1543964705332629505",
            "conversation_id": "1543964703432605696",
            "edit_history_tweet_ids": [
                "1543964705332629505"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964633123491842",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1Dp08XkAI8kAr.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1543964703432605696",
            "attachments": {
                "media_keys": [
                    "3_1543964621719085056"
                ]
            },
            "edit_history_tweet_ids": [
                "1543964703432605696"
            ],
            "conversation_id": "1543964703432605696",
            "text": "What is `__new__` for?\n\nThe Python \ud83d\udc0d docs say \"__new__() is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize instance creation.\"...\n\nWhat does that mean?!\n\nLet me explain \ud83d\ude80 https://t.co/PZDeOELmfb"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543964621719085056",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW1DpKdWIAAOghk.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Now, here's a bonus \ud83c\udf1f\u2728 exercise.\n\nInstead of stuffing everything in a single comprehension, write the code above in two passes:\n\n - convert everything to floats and filter out `None`s; then\n - format everything as desired.\n\nDoes it look better? https://t.co/4sUBYPX8Kb",
            "id": "1543726319703408641",
            "attachments": {
                "media_keys": [
                    "3_1543726314686914562"
                ]
            },
            "edit_history_tweet_ids": [
                "1543726319703408641"
            ],
            "conversation_id": "1543726317761449984"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543726314686914562",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWxq53lWIAIv3Yr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1543726317761449984"
            ],
            "attachments": {
                "media_keys": [
                    "3_1543726303253340161"
                ]
            },
            "id": "1543726317761449984",
            "conversation_id": "1543726317761449984",
            "text": "Day 92/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThis exercise will mix filtering with conditional expressions!\n\nYou got some data about percentages.\n\nYou want to format all in the same way, ignoring missing values.\n\nGood luck \ud83d\ude80 https://t.co/EjSheEZEiG"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543726303253340161",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWxq5M_XoAEYUVu.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "In other words, if the two women are not there and I say\n\n\u201cOh dang, I should've stayed at the bus stop\u201d,\n\nI'm being illogical!\n\nThat statement does not follow from a logical deduction!\n\nAnd I am very fond of logical deductions \ud83d\ude0e",
            "id": "1543540080362639360",
            "conversation_id": "1543540066752012294",
            "edit_history_tweet_ids": [
                "1543540080362639360"
            ]
        }
    },
    {
        "data": {
            "text": "So, what I want you to really pay attention to is this apparent asymmetry:\n\n - The 2 women are there \u21d2 I made the right call in going home.\n\n - The 2 women are not there \u21d2 I *don't know* if I made the right call or not.",
            "id": "1543540079033040909",
            "conversation_id": "1543540066752012294",
            "edit_history_tweet_ids": [
                "1543540079033040909"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1543540066752012294",
            "text": "No!\n\nThere would be many possible explanations for the absence of the two women:\n\n - they started walking to their destination;\n\n - they caught a different bus;\n\n - they called an Uber;\n\n - \u2026",
            "edit_history_tweet_ids": [
                "1543540077762068482"
            ],
            "id": "1543540077762068482"
        }
    },
    {
        "data": {
            "text": "But bear with me for a second.\n\nWhat if, when I got to the stop for the second time, the two women weren't there?\n\nWould I be able to conclude I made the wrong choice, because the bus showed up while I was at home?",
            "id": "1543540076507979776",
            "conversation_id": "1543540066752012294",
            "edit_history_tweet_ids": [
                "1543540076507979776"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1543540066752012294",
            "text": "Then, at 3:05pm, the (next) bus showed up.\n\nAnd we took it.",
            "edit_history_tweet_ids": [
                "1543540075287511042"
            ],
            "id": "1543540075287511042"
        }
    },
    {
        "data": {
            "text": "At 2:55pm I walk to the bus stop again and guess who I saw?\n\nThe same two women, still waiting for the bus\u2026\n\nAnd when I saw them, I concluded I made the right choice!\n\nThe bus hadn't come yet, so I spent a nicer time waiting at home rather than at the bus stop.",
            "id": "1543540074004025345",
            "conversation_id": "1543540066752012294",
            "edit_history_tweet_ids": [
                "1543540074004025345"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1543540072724717569"
            ],
            "id": "1543540072724717569",
            "text": "The stop is awfully close to my home and so it was really easy to go back inside and wait there.\n\nI decided to go back home.\n\nSadly, the two women had nowhere else to go, so they just had to sit there and hope the bus would come soon.",
            "conversation_id": "1543540066752012294"
        }
    },
    {
        "data": {
            "text": "I started wondering whether the 2:05pm bus was late or if it simply wasn't coming!\n\nAnd so I was faced with a choice:\n\n - sit there, under the heat, waiting for a possibly late bus, or for the 3:05pm bus; or\n\n - go back home for 30min and come back to catch the 3:05pm bus.",
            "edit_history_tweet_ids": [
                "1543540071328092160"
            ],
            "conversation_id": "1543540066752012294",
            "id": "1543540071328092160"
        }
    },
    {
        "data": {
            "text": "When I got to the stop, two women were sitting there, clearly waiting for the same bus as me.\n\nAnd we waited.\n\n2:05pm and no bus in sight.\n\n2:15pm and still no bus\u2026\n\n2:25pm and still no bus!",
            "id": "1543540070057132038",
            "conversation_id": "1543540066752012294",
            "edit_history_tweet_ids": [
                "1543540070057132038"
            ]
        }
    },
    {
        "data": {
            "id": "1543540068689842176",
            "edit_history_tweet_ids": [
                "1543540068689842176"
            ],
            "conversation_id": "1543540066752012294",
            "text": "It was Sunday, and on Sundays the bus has a reduced schedule.\n\nThere is one bus per hour, and they show up approximately at 5min past the hour.\n\nSo, at 1:55pm, I walked to the bus stop for the 2:05pm bus, with plenty of breathing in case the bus was running early."
        }
    },
    {
        "data": {
            "text": "The other day, I waited over 1h for the bus.\n\nHere's what that taught me about logic: https://t.co/FYbwqFSKln",
            "id": "1543540066752012294",
            "attachments": {
                "media_keys": [
                    "3_1543540064000557056"
                ]
            },
            "edit_history_tweet_ids": [
                "1543540066752012294"
            ],
            "conversation_id": "1543540066752012294"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543540064000557056",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWvBgptWQAA1JP3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1543349067929063424"
                ]
            },
            "text": "Day 91/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThis one is just an exercise on conditionals!\n\nNotice how we unpack values in the loop, directly...\n\nLet's go \ud83d\ude80 https://t.co/5XYEHxQP0E",
            "id": "1543349071775207424",
            "conversation_id": "1543349071775207424",
            "edit_history_tweet_ids": [
                "1543349071775207424"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543349067929063424",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWsTzN5XkAABWAy.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1543191263436066816",
            "text": "Will you be joining me at @PyOhio 2022 online?\n\nIt's free to register and attend online!\n\nBut that would be worthless if it weren't for the many great talks lined up!\n\nAnd I'll also be giving a talk! \ud83e\udd2a\n\nSee you there?",
            "edit_history_tweet_ids": [
                "1543191263436066816"
            ],
            "conversation_id": "1543191263436066816"
        }
    },
    {
        "data": {
            "conversation_id": "1543008827519418369",
            "id": "1543009951353896960",
            "text": "Forgot to include the comment, but the point of the second piece of code is to take a string and only take every other character from it!\n\nThat's why we go from\n\nHELLO world to EL ol\n   ^   ^  ^   ^  ^",
            "edit_history_tweet_ids": [
                "1543009951353896960"
            ]
        }
    },
    {
        "data": {
            "id": "1543008827519418369",
            "attachments": {
                "media_keys": [
                    "3_1543008824063320066"
                ]
            },
            "edit_history_tweet_ids": [
                "1543008827519418369"
            ],
            "conversation_id": "1543008827519418369",
            "text": "Day 90/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comprehensions can contain `if`s, conditionals.\n\nThey can be filters, if after loops...\n\nOr they can be conditional expressions, to create different values.\n\nUse them in the next exercise \ud83d\ude80 https://t.co/9cxyN3gO5k"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543008824063320066",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWneWauWYAIBIO2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d (and many programming languages) have expressions and statements.\n\nHow would you explain the difference?\n\nWhat if you are talking to a non-programmer?\n\nHow would you give them an intuitive notion of the difference?",
            "id": "1542826610889474052",
            "conversation_id": "1542826610889474052",
            "edit_history_tweet_ids": [
                "1542826610889474052"
            ]
        }
    },
    {
        "data": {
            "text": "To conclude, beware of a source of confusion:\n\n - conditional expressions in the beginning; vs\n - using `if` after a `for` to filter values.\n\nThey do different things, and\n\n - the former always looks like `... if ... else ...`; while\n - the latter _cannot_ have an `else`.",
            "id": "1542633641230180358",
            "conversation_id": "1542633129999056897",
            "edit_history_tweet_ids": [
                "1542633641230180358"
            ]
        }
    },
    {
        "data": {
            "id": "1542633136269545473",
            "attachments": {
                "media_keys": [
                    "3_1542633127620890624"
                ]
            },
            "edit_history_tweet_ids": [
                "1542633136269545473"
            ],
            "conversation_id": "1542633129999056897",
            "text": "At this point, the classic list comprehension pattern arises and you can rewrite the loop above as a list comprehension.\n\nTo give you a hand, I did it for you below.\n\nWhen using a conditional expression, I like to have the conditional expression by itself. https://t.co/gmORoxa7WK"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542633127620890624",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWiIqAaX0AAr3DP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1542633129999056897",
            "id": "1542633134029737984",
            "edit_history_tweet_ids": [
                "1542633134029737984"
            ],
            "text": "Notice how, in the example above, we always want to append to the final list.\n\nIt's just that we want to append one of two different things, depending on `n % 2`.\n\nThis is where a conditional expression comes in: https://t.co/Jm0qQuiHcC",
            "attachments": {
                "media_keys": [
                    "3_1542633117311188994"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542633117311188994",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWiIpaAWQAIc_KS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1542633129999056897",
            "id": "1542633131756457984",
            "edit_history_tweet_ids": [
                "1542633131756457984"
            ],
            "text": "List comprehensions start with an expression that modifies values.\n\nTypically, you always modify values in the same way, with the same function or formula.\n\nHowever, sometimes you may want to adapt the modification to the value itself.\n\nHere's an example: https://t.co/UwEZDdg0bO",
            "attachments": {
                "media_keys": [
                    "3_1542633106766761986"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542633106766761986",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWiIoyuXEAIcOlr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1542633129999056897"
            ],
            "id": "1542633129999056897",
            "text": "Day 89/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's talk about using conditional expressions with list comprehensions.\n\nThis will let us write more flexible comprehensions.\n\nLet's go \ud83d\ude80",
            "conversation_id": "1542633129999056897"
        }
    },
    {
        "data": {
            "id": "1542290623587356674",
            "edit_history_tweet_ids": [
                "1542290623587356674"
            ],
            "conversation_id": "1539140936336392193",
            "text": "As pointed out in a reply, I can configure tox to fail if code coverage is below a certain threshold.\n\nFor example, I could have tox fail if coverage is under 100:\n\nI just need to add `--fail-under 100` to my `coverage report -m` command...\n\nNot for now\n\nhttps://t.co/aNkN9R5dte"
        }
    },
    {
        "data": {
            "conversation_id": "1542287072492457984",
            "text": "Day 88/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nUsing `zip` in a `for` loop is a very common pattern to put together multiple sources of data.\n\nWhat if you use a `zip` together with a nested list comprehension?\n\nGive it a try \ud83d\ude80 https://t.co/f30xPD8urY",
            "edit_history_tweet_ids": [
                "1542287072492457984"
            ],
            "id": "1542287072492457984",
            "attachments": {
                "media_keys": [
                    "3_1542287069657153537"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542287069657153537",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWdN6yCXwAEHmdU.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "id": "1542282472792137730",
            "text": "They say a picture is worth a thousand words...\n\nI did it! 100% code coverage!\n\nDon't tell anyone I only had to cover 23 statements \ud83e\udd23 https://t.co/kjMza8ncOL",
            "attachments": {
                "media_keys": [
                    "3_1542282359374024709"
                ]
            },
            "edit_history_tweet_ids": [
                "1542282472792137730"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542282359374024709",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWdJom3XEAUI-mk.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1542174833705877506",
            "text": "In Python \ud83d\udc0d, you can import multiple things from a module with a comma-separated list.\n\nYou can also rename things by using an `import ... as ...` statement.\n\nDid you know you can mix the two? https://t.co/3TKpq39e7S",
            "edit_history_tweet_ids": [
                "1542174833705877506"
            ],
            "id": "1542174833705877506",
            "attachments": {
                "media_keys": [
                    "3_1542174830937661445"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542174830937661445",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWbn1oOWYAUMoaR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1541893474815016961"
                ]
            },
            "text": "Day 87/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nUsing `zip` in a `for` loop is a very common pattern to put together two sources of data.\n\nThis pattern can also be translated into a list comprehension with `zip`!\n\nYou try it :)\n\nLet's go \ud83d\ude80 https://t.co/bkWj64exqC",
            "id": "1541893477918818304",
            "conversation_id": "1541893477918818304",
            "edit_history_tweet_ids": [
                "1541893477918818304"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541893474815016961",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWXn8i_XgAEi0Xw.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1541856382328213511",
            "conversation_id": "1539140936336392193",
            "text": "Or is tox just to automate the generation of the report..?\n\nI'm not 100% sure of that.\n\nHowever, I do NOT have 100% code coverage, so let me work on that...",
            "edit_history_tweet_ids": [
                "1541856382328213511"
            ]
        }
    },
    {
        "data": {
            "text": "Alright, there's nothing special about adding https://t.co/rWUpWyyG0G to tox, it's just a matter of adding the dependency and the correct commands...\n\nHowever, there's something I'm not getting...\n\nDo I want tox to complain if code coverage isn't 100%?",
            "id": "1541856170184511488",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1541856170184511488"
            ]
        }
    },
    {
        "data": {
            "text": "Ok ok, this looks simple enough!\n\nI just pip installed coverage and I already have my first coverage report!\n\nTurns out it was dead simple to use https://t.co/rWUpWyyG0G. @nedbat must be doing something right \ud83d\ude02\n\nNow let's see if I can have tox run this for me... https://t.co/SqMorXB29S",
            "id": "1541726809347297281",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1541726809347297281"
            ],
            "attachments": {
                "media_keys": [
                    "3_1541726221305782274"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541726221305782274",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWVP1HHWIAI32zc.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1541722561402249216"
                ]
            },
            "text": "Done and dusted \u2728\u2728\n\nCode quality 10/10!\n\nNow I want to set up code coverage!\n\nI hope this isn't too hard to set up\ud83e\udd1e https://t.co/LLeBv0RQYX",
            "id": "1541722629224251392",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1541722629224251392"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541722561402249216",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWVMgE6WIAAuU1B.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1541717317196857344",
            "edit_history_tweet_ids": [
                "1541717317196857344"
            ],
            "attachments": {
                "media_keys": [
                    "3_1541717275379732480"
                ]
            },
            "conversation_id": "1539140936336392193",
            "text": "I started with a simple tox configuration, just to see how it works.\n\nI enabled black and pytest.\n\nAfter that, I included more things: flake8, pylint, and the mccabe complexity checker.\n\nNow it blows in my face because my current code quality sucks!\n\nLet's fix this! https://t.co/iFpNDI8gyx"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541717275379732480",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWVHsY8XkAAERwa.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1541587463335968770",
            "id": "1541587463335968770",
            "edit_history_tweet_ids": [
                "1541587463335968770"
            ],
            "text": "Day 86/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nI have a folder with a bunch of CSV files with data.\n\nI want to collect all of those, but I want them grouped by original folder!\n\nCan you do it with a nested list comprehension?\n\nLet's go \ud83d\ude80 https://t.co/bBpzZYsZGB",
            "attachments": {
                "media_keys": [
                    "3_1541587459821260801"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541587459821260801",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWTRoITX0AEqJvf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1541157625739493377",
            "conversation_id": "1541157625739493377",
            "text": "Day 85/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nDid they also force you to memorise the times table when you were in school?\n\nAll you need is a nested list comprehension!\n\nCan you build the correct list comprehension?\n\nLet's go \ud83d\ude80 https://t.co/uGessGURRo",
            "edit_history_tweet_ids": [
                "1541157625739493377"
            ],
            "attachments": {
                "media_keys": [
                    "3_1541157623399157760"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541157623399157760",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWNKsW2XkAAmnN6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 84/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSome emoji are composed of simpler emoji that are connected by a \u201cglue\u201d.\n\nJust see the example below!\n\nAlso, can you rewrite the outer loop + the inner `map` as a nested list comprehension?\n\nLet's go \ud83d\ude80 https://t.co/4ykCJ5uFUB",
            "id": "1540824181914337280",
            "conversation_id": "1540824181914337280",
            "edit_history_tweet_ids": [
                "1540824181914337280"
            ],
            "attachments": {
                "media_keys": [
                    "3_1540824179385278465"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1540824179385278465",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWIbbXGXoAEDbGg.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1540816994320191488"
            ],
            "id": "1540816994320191488",
            "text": "All the `tox.ini` files I've seen have an option `isolated_build = True`.\n\n(Although I've only looked at 2 files \ud83d\ude43)\n\nHad to go search the tox docs to understand if I need that, or not...\n\nBecause I'm using Poetry to build the package, I do need that setting\ud83d\udc4d",
            "conversation_id": "1539140936336392193"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1540812730483056641"
            ],
            "conversation_id": "1539140936336392193",
            "text": "because Poetry can list (development) dependencies in `pyproject.toml`...\n\nBut Poetry/pyproject.toml is for the dependencies you are going to use directly while developing/using the package.\n\n`tox.ini` is for all the dependencies that `tox` needs, even if there's overlap.",
            "id": "1540812730483056641"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1540812728549376001"
            ],
            "id": "1540812728549376001",
            "conversation_id": "1539140936336392193",
            "text": "I have been looking at a fairly simple `tox.ini` file to try and understand how that works.\n\nI see the section `deps` with the dependencies that tox needs, and for a while I wasn't sure how the dependencies in `tox.ini` relates to the dependencies listed in `pyproject.toml`,"
        }
    },
    {
        "data": {
            "id": "1540809576332812295",
            "edit_history_tweet_ids": [
                "1540809576332812295"
            ],
            "conversation_id": "1539140936336392193",
            "text": "Now I want to set up tox to automate testing and linting and formatting and whatnot.\n\nIt's a shame that tox can't be configured from `pyproject.toml` quite yet...\n\nIt kind of can, but not in native TOML syntax, so I'll just go with a tox.ini file (https://t.co/1cue9XA5gf)"
        }
    },
    {
        "data": {
            "id": "1540804824345653249",
            "edit_history_tweet_ids": [
                "1540804824345653249"
            ],
            "conversation_id": "1539140936336392193",
            "attachments": {
                "media_keys": [
                    "16_1540804806729535488"
                ]
            },
            "text": "Next up I did something that maybe I should've done earlier:\n\nAdd tests!\n\nPoetry already created the `tests` directory AND a test file, so I really just need to put some tests in there!\n\nIt feels nice when all your tests pass \ud83d\udc4d https://t.co/ATkktICwbE"
        },
        "includes": {
            "media": [
                {
                    "media_key": "16_1540804806729535488",
                    "type": "animated_gif"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1540695833800212481",
            "conversation_id": "1540695833800212481",
            "text": "The Python \ud83d\udc0d programming language got its name from the Monty Python comedy group...\n\nSo it's quite fitting that the Python language has some humour hidden!\n\nOpen your Python REPL and try typing this in \ud83d\udc47 https://t.co/ppH9mR2zPU",
            "edit_history_tweet_ids": [
                "1540695833800212481"
            ],
            "attachments": {
                "media_keys": [
                    "3_1540695831728295938"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1540695831728295938",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWGmsi0XEAIvYAZ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1540474625271922688"
                ]
            },
            "text": "Day 83/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comps \u2665\ufe0f grids!\n\nGrids span in two directions:\n\n - left/right\n - up/down\n\nSuppose the outer list comp controls the up/down...\n\nAnd the inner list comp controls the left/right.\n\nNow solve this \ud83d\ude80 https://t.co/rmIBRBGcbn",
            "edit_history_tweet_ids": [
                "1540474627612463104"
            ],
            "conversation_id": "1540474627612463104",
            "id": "1540474627612463104"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1540474625271922688",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWDdgojWAAAyaiy.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1540286548247199750",
            "conversation_id": "1540286544199749633",
            "text": "I'm talking about a free Python \ud83d\udc0d book.\n\n25+ chapters that will help you understand how to use some powerful features of Python.\n\nI can't do the hard work for you, but I can make it easier :)\n\nIf you want to upgrade your Python skills, just follow the link in my profile \ud83d\udcaa",
            "edit_history_tweet_ids": [
                "1540286548247199750"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1540286544199749633"
            ],
            "id": "1540286544199749633",
            "text": "Any plans for the weekend? \ud83c\udfaf\ud83d\udcc6\n\nI have been - and will continue to - tend to family.\n\nIf YOUR plans involve studying Python \ud83d\udc0d, I can help!\n\nAnd I'm not even talking about my list comprehension obsession!",
            "conversation_id": "1540286544199749633"
        }
    },
    {
        "data": {
            "conversation_id": "1540000759521099777",
            "edit_history_tweet_ids": [
                "1540000759521099777"
            ],
            "attachments": {
                "media_keys": [
                    "3_1540000756992032771"
                ]
            },
            "text": "Day 82/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nNested list comprehensions are great when you need to work with (2D) grids.\n\nCan you help me create a chessboard?\n\nLet's go \ud83d\ude80 https://t.co/ix18UygZ9b",
            "id": "1540000759521099777"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1540000756992032771",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FV8uh3pXwAMSL_M.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1539671676870221824"
            ],
            "conversation_id": "1539140936336392193",
            "text": "I was trying to use `scriv github-release` to make the release, but something's not working on my end :/\n\nThe documentation wasn't very clear on how the command should be used, so I opened an issue (https://t.co/gidxQKutfn).\n\nThen, I made the release by hand \ud83e\udd1a",
            "id": "1539671676870221824"
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "id": "1539652242499784704",
            "edit_history_tweet_ids": [
                "1539652242499784704"
            ],
            "text": "I think it's reasonable to publish a release (0.1.0) as my next step, but first:\n\nLet's spruce up the README:\n\n - add instructions on how to install\n - give a short usage example\n\nI'll also create the CHANGELOG file.\n\nThen I'll publish the release v0.1.0 on GH."
        }
    },
    {
        "data": {
            "conversation_id": "1539649258307330050",
            "text": "Yesterday I started tweeting about the whole process of setting a Python \ud83d\udc0d package.\n\nI'm learning much of this stuff as I go (and writing about it) so it's taking some time!\n\nToday I'll try to get some more stuff done!\n\nWish me luck \ud83e\udd1e https://t.co/dOvImWKXsc",
            "edit_history_tweet_ids": [
                "1539649258307330050"
            ],
            "id": "1539649258307330050"
        }
    },
    {
        "data": {
            "conversation_id": "1539608171534319623",
            "edit_history_tweet_ids": [
                "1539608171534319623"
            ],
            "text": "Day 81/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's write a nested list comprehension!\n\nLet's go \ud83d\ude80\n\n(Bonus points if you can tell me what `casefold` does!) https://t.co/ZTLIQfN4O6",
            "id": "1539608171534319623",
            "attachments": {
                "media_keys": [
                    "3_1539608168656936960"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539608168656936960",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FV3JeOIWIAAWg_x.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1539287204035428355",
            "text": "By the way, this thread is just a high-level overview of what I have been doing.\n\nWhile figuring this out and writing this thread, I have also been writing a more complete blog post!\n\nI'll share the link as soon as this is finished \ud83d\udc4d",
            "edit_history_tweet_ids": [
                "1539287204035428355"
            ],
            "conversation_id": "1539140936336392193"
        }
    },
    {
        "data": {
            "text": "I'm going to take a short break now.\n\nI'll keep going tomorrow:\n\n - Setting up tests.\n - Checking code coverage.\n - CI/CD (running tests, building, uploading to PyPI).\n\nSee you there?",
            "id": "1539287202148102150",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1539287202148102150"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1539285568718249984"
                ]
            },
            "text": "After I publish a new package to PyPI, I always like doing a victory lap:\n\n 1. Open a terminal.\n 2. Use pip to install my package.\n 3. Import it in the Python REPL.\n 4. Exit Python.\n 5. Uninstall my package.\n\nIt just feels nice \ud83d\ude01 https://t.co/keasQlSOk0",
            "edit_history_tweet_ids": [
                "1539285586745368576"
            ],
            "conversation_id": "1539140936336392193",
            "id": "1539285586745368576"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539285568718249984",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVykEbtWIAAvwFR.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "@nedbat Now we're in a position to publish the actual package to the real PyPI.\n\nThis is fairly similar to publishing to TestPyPI, so make sure to grab an API key, build the package, and then publish!\n\nAnd there it goes, it's live on PyPI! https://t.co/ClLJriJqcT",
            "id": "1539283414519619589",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1539283414519619589"
            ],
            "attachments": {
                "media_keys": [
                    "3_1539283403106881536"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539283403106881536",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVyiGYLXEAAIRTj.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "id": "1539279160991940611",
            "text": "Now I can populate the package with the actual code.\n\nAs I make changes to the code, I want to document them in a changelog, so I'm gonna go ahead and also add scriv by @nedbat as a devt dependency.\n\nConfigure scriv, commit the code, add the changelog entry, done.",
            "edit_history_tweet_ids": [
                "1539279160991940611"
            ]
        }
    },
    {
        "data": {
            "id": "1539258845427552258",
            "edit_history_tweet_ids": [
                "1539258845427552258"
            ],
            "conversation_id": "1539140936336392193",
            "attachments": {
                "media_keys": [
                    "3_1539258833662578690"
                ]
            },
            "text": "Then, go to your account settings and create an API key.\n\nWe are going to configure Poetry to know about TestPyPI and give it your credentials.\n\nAfter that, we build the package (stub) and we publish it to TestPyPI!\n\nLook, here is the stub already online \ud83d\udc47 https://t.co/C6MlS667f7"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539258833662578690",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVyLwP3XEAII1dU.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Now I want to test the building and uploading of the package.\n\nAfter all, I want to be able to distribute my package with everyone out there!\n\nFirst things first, create an account on TestPyPI if you ain't got one!\n\nhttps://t.co/IBxqyqM22q",
            "id": "1539258573343051776",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1539258573343051776"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1539243604782243840"
            ],
            "id": "1539243604782243840",
            "text": "Next up, I want to set up some pre-commit hooks.\n\nA couple of boring ones about files and whitespace and line endings...\n\nBut also one for `black` and another one for `isort`.\nI like my code to be formatted consistently :D\n\nHad to check how to do this \ud83d\udc49 https://t.co/T007aA8dv8"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "16_1539226936089710593"
                ]
            },
            "text": "Ok, I've done the next step enough times already:\n\nSet up a (GitHub) repo.\n\nLet's init, commit what we have, and push to remote!\n\n_My_ repo is now live:\n\nhttps://t.co/TuEN5S6ZET https://t.co/vkNBmHLogF",
            "id": "1539226945380032513",
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1539226945380032513"
            ]
        },
        "includes": {
            "media": [
                {
                    "preview_image_url": "https://pbs.twimg.com/tweet_video_thumb/FVxuvkJXEAEfshQ.jpg",
                    "variants": [
                        {
                            "bit_rate": 0,
                            "content_type": "video/mp4",
                            "url": "https://video.twimg.com/tweet_video/FVxuvkJXEAEfshQ.mp4"
                        }
                    ],
                    "type": "animated_gif",
                    "media_key": "16_1539226936089710593"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1539225077966950401"
            ],
            "text": "Alright, so we're using Poetry for dep. management.\n\nLet's create a new project with\n\n```\npoetry new your_project_folder\n```\n\nMove inside the folder, and install your dependencies with\n\n```\npoetry install\n```\n\nI won't be adding any dependencies just yet.",
            "conversation_id": "1539140936336392193",
            "id": "1539225077966950401"
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "text": "Right now, that code is just a random file on my filesystem, among dozens of other random files with bits and bobs of Python code.\n\nTherefore, the first thing I want to do is to set up the folder structure for the project.\n\nAnd, and dependency management.\n\nI'll use Poetry.",
            "edit_history_tweet_ids": [
                "1539147237577588736"
            ],
            "id": "1539147237577588736"
        }
    },
    {
        "data": {
            "text": "Ok, so if you are creating a package, you have (an idea for) some code you want to share...\n\nIn my case, I already have most of the code.\n\nI want to package my mechanism that makes it easy to extend JSON to arbitrary Python objects.\n\nhttps://t.co/GNkJrONbPI",
            "id": "1539146798454947840",
            "edit_history_tweet_ids": [
                "1539146798454947840"
            ],
            "conversation_id": "1539140936336392193"
        }
    },
    {
        "data": {
            "conversation_id": "1539140936336392193",
            "edit_history_tweet_ids": [
                "1539140936336392193"
            ],
            "id": "1539140936336392193",
            "attachments": {
                "media_keys": [
                    "3_1539140452758298625"
                ]
            },
            "text": "How do you set up a Python \ud83d\udc0d package?\n\nHow do you set up CI/CD with testing and code coverage?\n\nHow do you publish a package to PyPI?\n\nI don't know \ud83e\udd37\n\nBut today I'll be finding out and tweeting my findings in this thread.\n\nCome join me \ud83d\ude09 https://t.co/YCUvWWAwP4"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539140452758298625",
                    "url": "https://pbs.twimg.com/media/FVwgFkoXoAEoaq-.jpg",
                    "type": "photo",
                    "alt_text": "The back of a delivery truck stuffed with cardboard packages, piled on top of each other. Photo by Claudio Schwarz on Unsplash."
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539018549989187584",
            "edit_history_tweet_ids": [
                "1539018553331965952"
            ],
            "id": "1539018553331965952",
            "attachments": {
                "media_keys": [
                    "3_1539018547715883010"
                ]
            },
            "text": "Nested list comprehensions are at the frontier of what are acceptable list comprehensions.\n\nThey are great when all the list comprehensions involved are short and straightforward.\n\nBy the way, when nesting list comprehensions, you may want to split them across multiple lines: https://t.co/3PJENV2gqW"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539018547715883010",
                    "url": "https://pbs.twimg.com/media/FVuxNw9XwAIoMnk.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539018549989187584",
            "edit_history_tweet_ids": [
                "1539018551369007104"
            ],
            "id": "1539018551369007104",
            "attachments": {
                "media_keys": [
                    "3_1539018536856825856"
                ]
            },
            "text": "List comprehensions are expressions: it's code that evaluates to a result.\n\nList comprehensions can contain arbitrary expressions on the left...\n\nSo, list comprehensions can be nested!\n\nTo nest list comprehensions, focus on one list comprehension at a time!\n\nExample \ud83d\udc47 https://t.co/kypk27GSmU"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539018536856825856",
                    "url": "https://pbs.twimg.com/media/FVuxNIgXsAAfLCP.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1539018549989187584",
            "id": "1539018549989187584",
            "text": "Day 80/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nDid you know that list comprehensions can be nested?\n\nIt's not as bad as it sounds, I'll show you.\n\nLet's go \ud83d\ude80",
            "edit_history_tweet_ids": [
                "1539018549989187584"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1538873345948753922",
            "id": "1538873349518008320",
            "text": "This is something you can even verify if you look under the hood.\n\nJust import the module `dis` and ask it to disassemble your function.\n\nIf you take a look at the bytecode, you will see that it:\n\n - \u201cloads the constant `None`\u201d; and\n - \u201creturns it\u201d. https://t.co/VvX4pzS5SK",
            "attachments": {
                "media_keys": [
                    "3_1538873343780261888"
                ]
            },
            "edit_history_tweet_ids": [
                "1538873349518008320"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FVstJyJXEAAbpFd.jpg",
                    "media_key": "3_1538873343780261888",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1538873347756392454",
            "conversation_id": "1538873345948753922",
            "edit_history_tweet_ids": [
                "1538873347756392454"
            ],
            "text": "In a similar way, all the functions you define return SOMETHING.\n\nIf you don't tell your function to return anything, it will return `None` for you!\n\nLet me show you: https://t.co/YxWnp8ED5K",
            "attachments": {
                "media_keys": [
                    "3_1538873332694761472"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1538873332694761472",
                    "url": "https://pbs.twimg.com/media/FVstJI2XwAAvlwY.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1538873345948753922"
            ],
            "attachments": {
                "media_keys": [
                    "3_1538873322309656576"
                ]
            },
            "id": "1538873345948753922",
            "conversation_id": "1538873345948753922",
            "text": "ALL Python \ud83d\udc0d functions return SOMETHING.\n\nEven those that look like they return nothing.\n\nIf a function returns \"nothing\", it actually returns `None`. https://t.co/d656lMRbG2"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FVstIiKXoAA_Kb9.jpg",
                    "media_key": "3_1538873322309656576",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "If you are unsure whether the list comprehensions above are good or not...\n\nTake a look at what I wrote yesterday.\n\nIt should clear some doubts:\n\nhttps://t.co/rkhgSOibjr",
            "id": "1538806402537476098",
            "conversation_id": "1538806398989086720",
            "edit_history_tweet_ids": [
                "1538806402537476098"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1538806396489281536"
                ]
            },
            "edit_history_tweet_ids": [
                "1538806400742215681"
            ],
            "conversation_id": "1538806398989086720",
            "id": "1538806400742215681",
            "text": "Now, take a look at this related piece of code.\n\nIs this a good list comprehension?\n\nHow would you rewrite it as a proper loop? https://t.co/A4mJW9PJj5"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FVrwQ8DXsAAHI11.jpg",
                    "type": "photo",
                    "media_key": "3_1538806396489281536"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1538806385428791296"
                ]
            },
            "id": "1538806398989086720",
            "edit_history_tweet_ids": [
                "1538806398989086720"
            ],
            "text": "Day 79/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nTake a look at the loop below.\n\nHow would you rewrite it as a list comprehension?\n\nAnd would it be \"good\" Python code? https://t.co/wZcQRatP8c",
            "conversation_id": "1538806398989086720"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1538806385428791296",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVrwQS2WAAATDF3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1538206487398457344",
            "conversation_id": "1538206477726404609",
            "edit_history_tweet_ids": [
                "1538206487398457344"
            ],
            "text": "Because you used a list comprehension to build a list that you just ignored!\n\nSo, for now, remember: list comprehensions should produce no side-effects.\n\nAnd let us end with a quiz:\n\nWhat's the output of the code below? https://t.co/Bdu8w7s6mT",
            "attachments": {
                "media_keys": [
                    "3_1538206475310534656"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1538206475310534656",
                    "url": "https://pbs.twimg.com/media/FVjOo7gXEAAZdBx.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "What's the issue here?\n\nThe issue is that the list comprehension is producing side-effects:\n\nAs a side-effect to the list comprehension running, the list called `squares` is growing!\n\nThat's a big no no!\n\nOn top of that, you are defeating the purpose of list comps, because ...",
            "edit_history_tweet_ids": [
                "1538206486022737922"
            ],
            "id": "1538206486022737922",
            "conversation_id": "1538206477726404609"
        }
    },
    {
        "data": {
            "text": "So, list comprehensions produce no side-effects by themselves...\n\nAnd that's also why you are typically advised against doing work in list comprehensions that produces side-effects.\n\nFor example, I see many people replying to my list comp exercises with something similar to this: https://t.co/ziJc82WyDS",
            "id": "1538206484370161665",
            "conversation_id": "1538206477726404609",
            "attachments": {
                "media_keys": [
                    "3_1538206465491607564"
                ]
            },
            "edit_history_tweet_ids": [
                "1538206484370161665"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FVjOoW7WIAwRecW.jpg",
                    "media_key": "3_1538206465491607564",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1538206482206179328",
            "conversation_id": "1538206477726404609",
            "edit_history_tweet_ids": [
                "1538206482206179328"
            ],
            "text": "List comprehensions provide just that:\n\nList comps provide a way to transform iterables into new lists without having a single side-effect!\n\nThis is not true for the equivalent `for`-loop.\n\nCheck the two examples below.\nThe `for` loop produces a variable as a side-effect. https://t.co/DmnE3npLOv",
            "attachments": {
                "media_keys": [
                    "3_1538206441722589184",
                    "3_1538206453722406912"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1538206441722589184",
                    "url": "https://pbs.twimg.com/media/FVjOm-YXsAAlKm3.jpg",
                    "type": "photo"
                },
                {
                    "media_key": "3_1538206453722406912",
                    "url": "https://pbs.twimg.com/media/FVjOnrFWYAAZ0l8.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1538206480519790593",
            "conversation_id": "1538206477726404609",
            "edit_history_tweet_ids": [
                "1538206480519790593"
            ],
            "text": "Purity of what?\n\nPurity of results and behaviour.\n\nIn functional programming you are not supposed to produce side-effects.\n\nProper discussion would make for a huge thread, so let's stick with this:\n\nIn functional programming, we (typically) don't want side-effects."
        }
    },
    {
        "data": {
            "id": "1538206479110512641",
            "edit_history_tweet_ids": [
                "1538206479110512641"
            ],
            "conversation_id": "1538206477726404609",
            "text": "The first thing that you need to understand is what the core of functional programming is.\n\nAnd while a bad CS class might make you think functional programming is all about `map` and `filter` and things like that...\n\nThat's not what FP is about!\n\nFP is about purity..."
        }
    },
    {
        "data": {
            "conversation_id": "1538206477726404609",
            "edit_history_tweet_ids": [
                "1538206477726404609"
            ],
            "id": "1538206477726404609",
            "text": "Day 78/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nDid you know that list comprehensions are actually a great tool for functional programming?\n\nAnd this doesn't have to be something scary, I'll explain what I mean.\n\nLet's go \ud83d\ude80"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1537811770139623425"
            ],
            "id": "1537811770139623425",
            "conversation_id": "1537811387883339776",
            "text": "I am of the opinion that `reduce`'s complexity is overestimated and its value underestimated.\n\nLuckily for you, I have written an article where I explain how `reduce` really works \ud83d\udc47\n\nThis is precisely one of the (more advanced) examples I give.\n\nhttps://t.co/ajExTX2Tdh"
        }
    },
    {
        "data": {
            "text": "Problem: fetch data inside nested dictionaries.\n\nSolution: use `reduce` to reduce the chain of keys into the successive (sub-)dictionaries.\n\nHere is my solution: https://t.co/Wuax47l3iU https://t.co/QQpxIa15Sb",
            "attachments": {
                "media_keys": [
                    "3_1537811358691078147"
                ]
            },
            "id": "1537811387883339776",
            "conversation_id": "1537811387883339776",
            "edit_history_tweet_ids": [
                "1537811387883339776"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1537811358691078147",
                    "url": "https://pbs.twimg.com/media/FVdnSHZXsAMoGFr.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1537709410574815233",
            "text": "Day 77/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use list comprehensions to implement a `deepcopy` for lists?\n\nThis exercise even has a bit of recursion! https://t.co/QrYdR9U079",
            "edit_history_tweet_ids": [
                "1537709410574815233"
            ],
            "id": "1537709410574815233",
            "attachments": {
                "media_keys": [
                    "3_1537709408138018819"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1537709408138018819",
                    "url": "https://pbs.twimg.com/media/FVcKjz_XwAMPOlR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1537347505922445317"
            ],
            "id": "1537347505922445317",
            "conversation_id": "1537347033803153409",
            "text": "Weird \ud83d\ude15\nThe second emoji there should've been\n\n&gt;&gt;&gt; chr(0x1f90c)\n'\ud83e\udd0c'\n\n@VittoStack @FrancescoCiull4 is this a conspiracy against Italians?"
        }
    },
    {
        "data": {
            "text": "Day 76/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to find the codepoints of some simple emoji? https://t.co/fdw6zuxh6Q",
            "id": "1537347033803153409",
            "conversation_id": "1537347033803153409",
            "attachments": {
                "media_keys": [
                    "3_1537347031399809024"
                ]
            },
            "edit_history_tweet_ids": [
                "1537347033803153409"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FVXA-tcWQAAAuW5.jpg",
                    "media_key": "3_1537347031399809024",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 75/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to get attributes dynamically? https://t.co/720Sg2EouO",
            "attachments": {
                "media_keys": [
                    "3_1536984638429732865"
                ]
            },
            "edit_history_tweet_ids": [
                "1536984640937938944"
            ],
            "id": "1536984640937938944",
            "conversation_id": "1536984640937938944"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1536984638429732865",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVR3YqbWIAET3Xx.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 74/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to learn new string methods?\n\nIn Python 3.10, there are 12 predicate methods. Do you know all of them? https://t.co/bHVP84zE22",
            "attachments": {
                "media_keys": [
                    "3_1536622244679630853"
                ]
            },
            "id": "1536622247032590336",
            "edit_history_tweet_ids": [
                "1536622247032590336"
            ],
            "conversation_id": "1536622247032590336"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1536622244679630853",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVMtykgXwAUTj5S.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1536355919507988481",
            "edit_history_tweet_ids": [
                "1536356517166841856"
            ],
            "id": "1536356517166841856",
            "text": "I have a detailed article with the ins and outs of comparison chaining on my blog.\n\nIt also contains some suggestions of things to do and things NOT to do.\n\nhttps://t.co/d8DkbiBk1p"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1536355919507988481"
            ],
            "id": "1536355919507988481",
            "text": "Chaining comparisons CAN be useful.\n\nI like it a lot.\n\nBut if you are not careful, you can run into weird situations.\n\nFor example, chaining `==` gives \u201call equal\u201d, but chaining `!=` does NOT give \u201call different\u201d. https://t.co/e867uGMuJZ https://t.co/HT8Qr5ZdG4",
            "conversation_id": "1536355919507988481",
            "attachments": {
                "media_keys": [
                    "3_1536355756194373634"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FVI7a5iXoAITFT0.jpg",
                    "type": "photo",
                    "media_key": "3_1536355756194373634"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1536259852758040577"
                ]
            },
            "edit_history_tweet_ids": [
                "1536259855530528768"
            ],
            "conversation_id": "1536259855530528768",
            "id": "1536259855530528768",
            "text": "Day 73/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to swap keys and values in a dictionary?\n\nUse `dict` and a list comprehension.\n\nSoon, we'll see an even better way of doing this! https://t.co/um4XjaQerR"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FVHkMlZWQAEJdB3.jpg",
                    "type": "photo",
                    "media_key": "3_1536259852758040577"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 72/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to read and trim all the lines of a text file? https://t.co/bFJUXeZtsf",
            "attachments": {
                "media_keys": [
                    "3_1536027071121612801"
                ]
            },
            "id": "1536027073453735936",
            "conversation_id": "1536027073453735936",
            "edit_history_tweet_ids": [
                "1536027073453735936"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1536027071121612801",
                    "url": "https://pbs.twimg.com/media/FVEQe6OWYAEZwRF.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "My free Python book \u201cPydon'ts\u201d has over 110 \u2b50\u2b50\u2b50\u2b50\u2b50 reviews.\n\nIf you don't know why, take a look at the review I quoted \ud83d\udc4c\n\nIf you are convinced already, get the book here: https://t.co/RzImwaLUOJ https://t.co/JwUO0unQWj",
            "id": "1535934575670706176",
            "conversation_id": "1535934575670706176",
            "edit_history_tweet_ids": [
                "1535934575670706176"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1535375291291471875",
            "id": "1535375298874703875",
            "text": "Using 1-letter variable names in list comprehensions can be useful.\n\nJust make sure that's ok in the context you are doing that.\n\nYou may have to adhere to a coding style that is very much against 1-letter variable names!\n\nI hope this helps \ud83d\udcaa",
            "edit_history_tweet_ids": [
                "1535375298874703875"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1535375291291471875",
            "edit_history_tweet_ids": [
                "1535375296890818561"
            ],
            "id": "1535375296890818561",
            "attachments": {
                "media_keys": [
                    "3_1535375288204505091"
                ]
            },
            "text": "In other words, these variables are fairly short-lived and only matter in that single place.\n\nSo, if you have a fairly long list comprehension, I think it is fairly reasonable to shorten the names of the variables a bit.\n\nHere is an example: https://t.co/eF1mwBsHl8"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1535375288204505091",
                    "url": "https://pbs.twimg.com/media/FU6_sJpXsAMgcqm.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Strive to use descriptive names as often as possible.\n\nHowever, list comprehensions lend themselves to a bit more flexibility, in my opinion.\n\nThe auxiliary variables (like `age` above) only exist inside the list comprehension.",
            "id": "1535375295569702920",
            "edit_history_tweet_ids": [
                "1535375295569702920"
            ],
            "conversation_id": "1535375291291471875"
        }
    },
    {
        "data": {
            "text": "Overall, you should always use descriptive names.\n\nAs a simplified example, compare the two list comprehensions below:\n\nBecause of the descriptive names, it becomes much easier to understand what is going on in the second list comp! https://t.co/yL0mUR6gnM",
            "attachments": {
                "media_keys": [
                    "3_1535375273482403841"
                ]
            },
            "edit_history_tweet_ids": [
                "1535375293942218752"
            ],
            "id": "1535375293942218752",
            "conversation_id": "1535375291291471875"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1535375273482403841",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FU6_rSzWQAE6IEO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1535375292633686016"
            ],
            "text": "Naming things is the hardest problem in programming.\n\nThat's something I've heard people say quite a bit \ud83d\ude01\n\nBecause naming can be quite difficult, I wrote an article that can help you with that:\n\nhttps://t.co/jzH3Q6EneA",
            "id": "1535375292633686016",
            "conversation_id": "1535375291291471875"
        }
    },
    {
        "data": {
            "conversation_id": "1535375291291471875",
            "edit_history_tweet_ids": [
                "1535375291291471875"
            ],
            "text": "Day 71/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's talk about naming variables inside a list comprehension.\n\nLet's go \ud83d\ude80",
            "id": "1535375291291471875"
        }
    },
    {
        "data": {
            "text": "Now you know what to do with a long list comprehension.\n\nI hope you are not super tired of list comprehensions yet!\n\nThis series is almost over!",
            "id": "1535016183988117537",
            "edit_history_tweet_ids": [
                "1535016183988117537"
            ],
            "conversation_id": "1535016174496407555"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1535016171216461825"
                ]
            },
            "conversation_id": "1535016174496407555",
            "edit_history_tweet_ids": [
                "1535016181924519955"
            ],
            "text": "- the loop goes on a new line by itself and aligned with the main expression; and\n - the closing bracket `]` goes in a new line, with the indentation of the line where the `[` is.\n\nIf there are more loops or if there are conditions, they all get their own lines: https://t.co/sOF0oyedUs",
            "id": "1535016181924519955"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FU15EynWYAEAxpA.jpg",
                    "media_key": "3_1535016171216461825",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1535016180573954050",
            "conversation_id": "1535016174496407555",
            "text": "When a list comprehension is too long, `black` splits it:\n\n - the opening bracket `[` stays right where it is;\n - the main expression goes on a new line by itself and is indentend with respect to the line where the `[` is;",
            "edit_history_tweet_ids": [
                "1535016180573954050"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1535016159115894808"
                ]
            },
            "edit_history_tweet_ids": [
                "1535016178451636237"
            ],
            "conversation_id": "1535016174496407555",
            "id": "1535016178451636237",
            "text": "As for categories 2. and 3., you can do whatever you want.\n\nI do both:\n\n - I use `black` to format my code consistently; but\n - I try to write my code already in the style that `black` likes.\n\nFor list comprehensions, I think it looks pretty nifty: https://t.co/R31EDLn9ut"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FU15EFiWYBg6lu-.jpg",
                    "type": "photo",
                    "media_key": "3_1535016159115894808"
                }
            ]
        }
    },
    {
        "data": {
            "text": "In my opinion, you shouldn't be in category 1.\n\nAs I have written before, code style matters:\n\nhttps://t.co/5NdbnWGOzY",
            "id": "1535016177155596290",
            "conversation_id": "1535016174496407555",
            "edit_history_tweet_ids": [
                "1535016177155596290"
            ]
        }
    },
    {
        "data": {
            "id": "1535016175826001938",
            "conversation_id": "1535016174496407555",
            "text": "When it comes to formatting, there are three ways to go about it:\n\n 1. Don't worry with code formatting **at all*.\n 2. Applying a consistent (personal) style.\n 3. Letting an auto-formatter do the heavy lifting.",
            "edit_history_tweet_ids": [
                "1535016175826001938"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1535016174496407555",
            "text": "What to do when you have a list comprehension that is too long?\n\nThis is day 70/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80",
            "edit_history_tweet_ids": [
                "1535016174496407555"
            ],
            "id": "1535016174496407555"
        }
    },
    {
        "data": {
            "conversation_id": "1534679211302178816",
            "edit_history_tweet_ids": [
                "1534679217547485187"
            ],
            "id": "1534679217547485187",
            "attachments": {
                "media_keys": [
                    "3_1534679200233316355"
                ]
            },
            "text": "With these rules of thumb in mind, here are some list comprehensions that I think are OK:\n\nAnd remember, these are just _rules of thumb_.\n\nUse your best judgement and consider the context when writing a list comprehension! https://t.co/FrkYzyS2sz"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534679200233316355",
                    "url": "https://pbs.twimg.com/media/FUxGmf4WYAM5KJ4.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1534679211302178816",
            "edit_history_tweet_ids": [
                "1534679216217784321"
            ],
            "id": "1534679216217784321",
            "text": "Usually, this is what I go for:\n\n - If the list comp has no `if`s\n   - and the main expression is simple, I go up to 3 loops; but\n   - if the main expression is long or complex, I go up to 2 loops.\n - If the list comp has an `if`, I only use a single loop and an `if`."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1534679214439407616"
            ],
            "id": "1534679214439407616",
            "conversation_id": "1534679211302178816",
            "text": "I have a couple of rules of thumb I follow when writing list comps.\n\nI use those to decide if my list comp is decent or too complicated.\n\nNow, obviously, readability is in the eye of the beholder.\n\nTherefore, depending on the context, my rules of thumb may not make much sense."
        }
    },
    {
        "data": {
            "conversation_id": "1534679211302178816",
            "edit_history_tweet_ids": [
                "1534679212568850432"
            ],
            "id": "1534679212568850432",
            "attachments": {
                "media_keys": [
                    "3_1534679208336695297"
                ]
            },
            "text": "List comprehensions can become ugly, quickly.\n\nAnd if they do, they lose their appeal.\n\nA list comprehension that is too long is tough to understand.\n\nWant an example?\n\nJust look at the list comprehension in the image below. https://t.co/WDPGx9K9bD"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534679208336695297",
                    "url": "https://pbs.twimg.com/media/FUxGm-EWIAEPOmC.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1534679211302178816",
            "edit_history_tweet_ids": [
                "1534679211302178816"
            ],
            "text": "How long should a list comprehension be?\n\nThis is day 69/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80",
            "conversation_id": "1534679211302178816"
        }
    },
    {
        "data": {
            "conversation_id": "1534182962303991810",
            "id": "1534182976786993153",
            "text": "I hope you enjoyed this write-up.\n\nFeel free to leave your thoughts below!\n\nAnd follow me @mathsppblog for more Python knowledge.\n\nBtw, all my threads can be read on my blog: https://t.co/bF07zerCkC",
            "edit_history_tweet_ids": [
                "1534182976786993153"
            ]
        }
    },
    {
        "data": {
            "id": "1534182975377661952",
            "edit_history_tweet_ids": [
                "1534182975377661952"
            ],
            "conversation_id": "1534182962303991810",
            "text": "Do you see what I mean?\n\nList comprehensions emphasise the data transformation.\n\nWhy?\n\nBecause that's the main thing, the most important thing.\n\nAnd that, in my opinion, is the best argument in favour of list comprehensions."
        }
    },
    {
        "data": {
            "text": "Fine, but if list comprehensions are just a shorter version of that recipe, why is the order different?\n\nList comprehensions switch up the order to highlight the only thing that changes:\n\nThe way in which we modify the original elements!",
            "id": "1534182973955792897",
            "edit_history_tweet_ids": [
                "1534182973955792897"
            ],
            "conversation_id": "1534182962303991810"
        }
    },
    {
        "data": {
            "text": "A list comprehension takes that recipe and makes it shorter.\n\nHere is the comparison side-by-side: https://t.co/11ymyTKoIa",
            "attachments": {
                "media_keys": [
                    "3_1534182959938473986"
                ]
            },
            "id": "1534182972236111873",
            "edit_history_tweet_ids": [
                "1534182972236111873"
            ],
            "conversation_id": "1534182962303991810"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534182959938473986",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUqDRguXEAI8Rwm.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1534182962303991810",
            "id": "1534182970726449153",
            "text": "We have this recipe that is fairly easy to understand.\n\nNot only that, it is also fairly common.\n\nGoing over a list and creating a new one is a common task.\n\nSo, Python decided to take that recipe and make it shorter!\n\nThat's where list comprehensions come in.",
            "edit_history_tweet_ids": [
                "1534182970726449153"
            ]
        }
    },
    {
        "data": {
            "text": "In other words, when you have a task like this:\n\n\u201cTake a list with values and build a new list of modified values\u201d,\n\nYou just have to fill in the blanks in this code: https://t.co/Cq9xsuiKjb",
            "attachments": {
                "media_keys": [
                    "3_1534182949796577282"
                ]
            },
            "id": "1534182968792588289",
            "edit_history_tweet_ids": [
                "1534182968792588289"
            ],
            "conversation_id": "1534182962303991810"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534182949796577282",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUqDQ68WAAIOvXA.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1534182962303991810",
            "edit_history_tweet_ids": [
                "1534182967404281858"
            ],
            "id": "1534182967404281858",
            "text": "Notice that the descriptions of the 2 tasks are the same!\n\nWhat's the only difference?\n\nThe way in which we _modify_ the original values:\n\n - For the squares, we took a number and squared it with `num ** 2`.\n - For the months, we took a name and sliced it with `month[:3]`."
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1534182938836877312"
                ]
            },
            "text": "Easy enough, right?\n\nLet's go with another example.\n\nI have a list of months and I want another list with the first 3 letters.\n\nHere is the code in a `for` loop:\n\nHow does this work?\n\n - create an empty list;\n - iterate over the source list; and\n - append the modified values. https://t.co/uTA0lhY22b",
            "id": "1534182965722374144",
            "conversation_id": "1534182962303991810",
            "edit_history_tweet_ids": [
                "1534182965722374144"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUqDQSHWQAACkUZ.jpg",
                    "media_key": "3_1534182938836877312"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1534182962303991810",
            "edit_history_tweet_ids": [
                "1534182963709104128"
            ],
            "id": "1534182963709104128",
            "attachments": {
                "media_keys": [
                    "3_1534182925910016001"
                ]
            },
            "text": "Let me pick a very simple example.\n\nI have a list of numbers and I want to create another list with the squares.\n\nHere is the code in a `for` loop:\n\nHow does this work?\n\n - create an empty list;\n - iterate over the source list; and\n - append the modified values. https://t.co/L1QOi6EXkl"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534182925910016001",
                    "url": "https://pbs.twimg.com/media/FUqDPh9WAAEFs83.png",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1534182962303991810",
            "text": "Why are list comprehensions good?\n\nWhy are list comprehensions useful?\n\nThis is day 68/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80",
            "edit_history_tweet_ids": [
                "1534182962303991810"
            ],
            "id": "1534182962303991810"
        }
    },
    {
        "data": {
            "id": "1533723138780979203",
            "conversation_id": "1533723138780979203",
            "edit_history_tweet_ids": [
                "1533723138780979203"
            ],
            "text": "Day 67/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/wA8rlsjyh2",
            "attachments": {
                "media_keys": [
                    "3_1533723135798820864"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1533723135798820864",
                    "url": "https://pbs.twimg.com/media/FUjhEOUWQAAiOyB.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1533360750693163008",
            "text": "Day 66/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/Z0lDgYNShS",
            "edit_history_tweet_ids": [
                "1533360750693163008"
            ],
            "id": "1533360750693163008",
            "attachments": {
                "media_keys": [
                    "3_1533360748528910336"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1533360748528910336",
                    "url": "https://pbs.twimg.com/media/FUeXegiXwAAo_IS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1532998364106719234",
            "id": "1532998365461479424",
            "text": "Or they must be defined outside the list comprehension.\n\nThus, if you order things the wrong way, you will be using variables before they are defined.\n\nFor example, here is a list comprehension that can't work: https://t.co/AqwglPDkD3",
            "attachments": {
                "media_keys": [
                    "3_1532998361569189889"
                ]
            },
            "edit_history_tweet_ids": [
                "1532998365461479424"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FUZN4z6WYAED9Sq.jpg",
                    "media_key": "3_1532998361569189889",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 65/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nWhen writing list comprehensions, recall that the nesting increases from left to right.\n\nThis means that the names you iterate over/use in the conditions must be defined on the left...",
            "id": "1532998364106719234",
            "conversation_id": "1532998364106719234",
            "edit_history_tweet_ids": [
                "1532998364106719234"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1532635983266684930",
            "edit_history_tweet_ids": [
                "1532640900475764742"
            ],
            "id": "1532640900475764742",
            "text": "It's the second time I have issues with my system. This should have been posted yesterday...\n\nI deeply apologise and I'll keep a closer look on what I'm doing \ud83d\udc40"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1532635983266684930"
            ],
            "attachments": {
                "media_keys": [
                    "3_1532635980888432640"
                ]
            },
            "text": "Day 64/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/2TXVe9Fgdq",
            "id": "1532635983266684930",
            "conversation_id": "1532635983266684930"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUUETerWYAAy0rJ.jpg",
                    "media_key": "3_1532635980888432640"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1531911206457442304",
            "conversation_id": "1531911206457442304",
            "edit_history_tweet_ids": [
                "1531911206457442304"
            ],
            "text": "Day 63/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/jptOoxaiDC",
            "attachments": {
                "media_keys": [
                    "3_1531911203899027456"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1531911203899027456",
                    "url": "https://pbs.twimg.com/media/FUJxH5_XsAAeT4l.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Funny! I noticed that whatever 3 flowers I pick, one is sure to be blue!\n\nAt this point, I got even closer to them and added:\n\nOh, so that means that whatever 3 flowers I pick, one must be yellow, right?\n\nAm I right? Or am I wrong?\n\nhttps://t.co/bMaXirdQOn",
            "id": "1531628244704714753",
            "conversation_id": "1531628242574184449",
            "edit_history_tweet_ids": [
                "1531628244704714753"
            ]
        }
    },
    {
        "data": {
            "text": "Mike: I don't know if you noticed, but every flower in that garden is either blue, red, or yellow.\n\nSundeep: Indeed! And there _are_ flowers of each of those colours...\n\nMike: Right. And I realised that whatever 3 flowers I pick, one is sure to be red.\n\nThen Sundeep replied:",
            "id": "1531628243555606529",
            "conversation_id": "1531628242574184449",
            "edit_history_tweet_ids": [
                "1531628243555606529"
            ]
        }
    },
    {
        "data": {
            "text": "I overheard Mike @driscollis and Sundeep @learn_byexample talking the other day.\n\nI thought they were talking about Python \ud83d\udc0d, but they were not!\n\nThey were talking about a beautiful garden they had visited.\n\nI got closer, and this is what I heard them say:",
            "id": "1531628242574184449",
            "edit_history_tweet_ids": [
                "1531628242574184449"
            ],
            "conversation_id": "1531628242574184449"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1531548816192806912"
            ],
            "id": "1531548816192806912",
            "text": "Day 62/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/v8gZLXk97n",
            "conversation_id": "1531548816192806912",
            "attachments": {
                "media_keys": [
                    "3_1531548813751726080"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FUEniBfXsAA7_FJ.jpg",
                    "type": "photo",
                    "media_key": "3_1531548813751726080"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1531186432630480897"
            ],
            "attachments": {
                "media_keys": [
                    "3_1531186430231433220"
                ]
            },
            "text": "Day 61/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/oMIQ6WwbzO",
            "id": "1531186432630480897",
            "conversation_id": "1531186432630480897"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FT_d8hrX0AQwQTZ.jpg",
                    "media_key": "3_1531186430231433220"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1530824032576217089"
                ]
            },
            "edit_history_tweet_ids": [
                "1530824035155722241"
            ],
            "conversation_id": "1530824035155722241",
            "id": "1530824035155722241",
            "text": "Day 60/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/NY1geAlE2b"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FT6UWNNWIAEMMvO.jpg",
                    "type": "photo",
                    "media_key": "3_1530824032576217089"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1530461649794125824",
            "id": "1530461649794125824",
            "text": "Day 59/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/AP5egHdVj1",
            "attachments": {
                "media_keys": [
                    "3_1530461647193706497"
                ]
            },
            "edit_history_tweet_ids": [
                "1530461649794125824"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FT1KwmdXEAEsd9D.jpg",
                    "media_key": "3_1530461647193706497",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1530099263363067906",
            "edit_history_tweet_ids": [
                "1530099263363067906"
            ],
            "id": "1530099263363067906",
            "attachments": {
                "media_keys": [
                    "3_1530099260884193280"
                ]
            },
            "text": "Day 57/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/tRdQH5Cd8j"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1530099260884193280",
                    "url": "https://pbs.twimg.com/media/FTwBK8QXEAAKzeT.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1529736876034228228"
            ],
            "attachments": {
                "media_keys": [
                    "3_1529736873425371137"
                ]
            },
            "text": "Day 56/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/0VOH6aylbc",
            "id": "1529736876034228228",
            "conversation_id": "1529736876034228228"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FTq3lNxWAAEsAqT.jpg",
                    "media_key": "3_1529736873425371137"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1529497591217537026",
            "edit_history_tweet_ids": [
                "1529497591217537026"
            ],
            "text": "I will be giving a short talk at @PyOhio !\n\nCan anyone guess the topic?\n\nHint \ud83d\udca1: I've been tweeting A LOT about it \ud83d\ude43",
            "conversation_id": "1529497591217537026"
        }
    },
    {
        "data": {
            "text": "Day 55/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/EBkdUYbv5d",
            "attachments": {
                "media_keys": [
                    "3_1529374486214197248"
                ]
            },
            "edit_history_tweet_ids": [
                "1529374488621723648"
            ],
            "id": "1529374488621723648",
            "conversation_id": "1529374488621723648"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1529374486214197248",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FTlt_gNXwAAus0h.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1529107037094912000"
            ],
            "id": "1529107037094912000",
            "text": "I just realised there was an issue with the scheduling of days 55, 56, and 57, of the 100 days of list comprehensions.\n\nI apologise for that!\n\nI will post them in the coming days.",
            "conversation_id": "1529107037094912000"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1529012111757688834"
            ],
            "id": "1529012111757688834",
            "text": "Day 58/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/2rP7mwx9pW",
            "conversation_id": "1529012111757688834",
            "attachments": {
                "media_keys": [
                    "3_1529012109278945280"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FTgkaY7XoAAG5-y.jpg",
                    "type": "photo",
                    "media_key": "3_1529012109278945280"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1527685342928715776",
            "id": "1527685342928715776",
            "text": "Want to learn how to write more Pythonic code?\n\nIf so, all you have to do is check my ebook Pydon'ts.\n\nIt is a WIP, but it already covers plenty of Python features and how to use them.\n\nIt's a free ebook, by the way.\n\nWant the link?\n\nIt's in my Twitter bio.",
            "edit_history_tweet_ids": [
                "1527685342928715776"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1527639288904548353",
            "id": "1527639288904548353",
            "text": "How to learn Python \ud83d\udc0d in 3 easy steps:\n\n Step 1: don't learn Python.\n\n Step 2: don't learn Python.\n\n Step 3: learn Python.\n\nDid I forget anything?",
            "edit_history_tweet_ids": [
                "1527639288904548353"
            ]
        }
    },
    {
        "data": {
            "text": "Day 54/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/cpJWpk0XTO",
            "id": "1527562549608206336",
            "conversation_id": "1527562549608206336",
            "attachments": {
                "media_keys": [
                    "3_1527562547242708993"
                ]
            },
            "edit_history_tweet_ids": [
                "1527562549608206336"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FTL-CxiXsAEoHHU.jpg",
                    "media_key": "3_1527562547242708993",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1527307602110971905",
            "conversation_id": "1527307602110971905",
            "edit_history_tweet_ids": [
                "1527307602110971905"
            ],
            "text": "Have you ever contributed to open source?\n\nRecently, I have been slowly trying to fix issue 2073 of `rich`.\n\nI have been documenting my journey on my blog: my doubts, my guesses, my approach to solving the issue.\n\nFeel free to give it a read:\n\nhttps://t.co/nVBfxCrxJm"
        }
    },
    {
        "data": {
            "text": "Day 53/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nThe nesting in list comprehensions can also contain `if`s!\n\nThis means you can filter at multiple levels.\n\nRemember: when nesting, write from left to right.\n\nThe diagram below should help you: https://t.co/qPbl3kqDDT",
            "id": "1527200147104575489",
            "conversation_id": "1527200147104575489",
            "attachments": {
                "media_keys": [
                    "3_1527200144294289408"
                ]
            },
            "edit_history_tweet_ids": [
                "1527200147104575489"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FTG0cJWWIAAom83.jpg",
                    "media_key": "3_1527200144294289408",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1526945212299366403",
            "conversation_id": "1526945212299366403",
            "edit_history_tweet_ids": [
                "1526945212299366403"
            ],
            "text": "Do you like listening to music while coding?\n\nTo me, the right music can really help me get in the zone \u2013 that zone of deep focus where time flies by.\n\nI have been creating a hand-curated playlist based off of powerful soundtracks \ud83d\udc47\n\nhttps://t.co/QOWd2WUlEa\n\nSuggestions?"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1526837777647943680"
            ],
            "attachments": {
                "media_keys": [
                    "3_1526837775101743104"
                ]
            },
            "text": "Day 52/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/LSmmrgKoR3",
            "conversation_id": "1526837777647943680",
            "id": "1526837777647943680"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1526837775101743104",
                    "url": "https://pbs.twimg.com/media/FTBq3e6WUAAlq3r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1526698875943325696"
                ]
            },
            "id": "1526699749382004737",
            "edit_history_tweet_ids": [
                "1526699749382004737"
            ],
            "text": "Today I woke up to a notification saying someone had bought my free Python book for $50! \ud83e\udd2f\n\nThat's insane!\n\nI appreciate all of your support, thank you so much \ud83d\ude80\n\nIf you also want to get my (free) book (for free), here's the link: https://t.co/RzImwaLUOJ https://t.co/oiLXXlkPWH",
            "conversation_id": "1526699749382004737"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1526698875943325696",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FS_sifOXEAAA3np.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1526582824358354944",
            "edit_history_tweet_ids": [
                "1526582824358354944"
            ],
            "text": "I created a niche tool to share Python \ud83d\udc0d code.\n\nYou paste code in and get a link to the code.\n\nThe links never expire!\n\nThe URL encodes the code, so the URL works forever \u2013 no accounts, sign-ups, whatever.\n\nHere is an example link to some Python code:\n\nhttps://t.co/AUYpMQ0Qk9",
            "conversation_id": "1526582824358354944"
        }
    },
    {
        "data": {
            "conversation_id": "1526475382186188800",
            "id": "1526475382186188800",
            "text": "Day 51/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/CK6l86fQIZ",
            "attachments": {
                "media_keys": [
                    "3_1526475379426398210"
                ]
            },
            "edit_history_tweet_ids": [
                "1526475382186188800"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FS8hRR0XEAIpGTa.jpg",
                    "media_key": "3_1526475379426398210",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1526220437763522562",
            "text": "Every now and then I post a problem on my blog.\n\nI try to do that every 2 weeks.\n\nLast week I published problem #60.\n\nIt's an interesting problem.\n\nPeople sent me a couple of nice solutions already.\n\nHow about you give it a go?\n\nhttps://t.co/mW3iCCh0q3",
            "edit_history_tweet_ids": [
                "1526220437763522562"
            ],
            "id": "1526220437763522562"
        }
    },
    {
        "data": {
            "conversation_id": "1526112993972473857",
            "id": "1526112995813871617",
            "text": "By the way, this is the halfway mark!\n\nToday is day 50 of 100!\n\nExcellent work you are doing \ud83d\udcaa\n\nFollow me @mathsppblog for more! Or don't!\n\nBut don't give up now!\n\nThis is how it all started... \ud83d\udc47\n\nhttps://t.co/Si6m7Uu5I4",
            "edit_history_tweet_ids": [
                "1526112995813871617"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1526112991426519040"
                ]
            },
            "conversation_id": "1526112993972473857",
            "edit_history_tweet_ids": [
                "1526112993972473857"
            ],
            "text": "Day 50/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/vjpvxqD744",
            "id": "1526112993972473857"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FS3XrhUWIAAb1LN.jpg",
                    "media_key": "3_1526112991426519040",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1525954103767142403",
            "text": "I am over the moon!\n\n@europython just dropped me an email saying my tutorial on how Python \ud83d\udc0d objects work under the hood just got accepted!\n\nI look forward to attending EuroPython and sharing all my knowledge with you!\n\nSee you there?",
            "edit_history_tweet_ids": [
                "1525954103767142403"
            ],
            "id": "1525954103767142403"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1525750607361069058"
                ]
            },
            "edit_history_tweet_ids": [
                "1525750609672028163"
            ],
            "conversation_id": "1525750609672028163",
            "id": "1525750609672028163",
            "text": "Day 49/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/hHX1G4aOBR"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FSyOF_eX0AIms7S.jpg",
                    "type": "photo",
                    "media_key": "3_1525750607361069058"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1525388224239218690",
            "edit_history_tweet_ids": [
                "1525388224239218690"
            ],
            "id": "1525388224239218690",
            "attachments": {
                "media_keys": [
                    "3_1525388221932249091"
                ]
            },
            "text": "Day 48/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/ADv7CNhhJD"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1525388221932249091",
                    "url": "https://pbs.twimg.com/media/FStEgYjWIAMcQEy.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1525025818174541824"
            ],
            "attachments": {
                "media_keys": [
                    "3_1525025815066468353"
                ]
            },
            "text": "Day 47/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nList comprehensions can contain nested loops.\n\nWhen nesting in a list comp, the loops should be written from left to right.\n\nThe diagram below summarises this information. https://t.co/aHFQrZARId",
            "id": "1525025818174541824",
            "conversation_id": "1525025818174541824"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FSn65hxWYAEoZ65.jpg",
                    "media_key": "3_1525025815066468353"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1524663456238125057"
                ]
            },
            "text": "Day 46/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/HNcHlcMXiN",
            "id": "1524663458675179520",
            "conversation_id": "1524663458675179520",
            "edit_history_tweet_ids": [
                "1524663458675179520"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FSixVd8XwAEoakg.jpg",
                    "media_key": "3_1524663456238125057"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1524301052618629122",
            "edit_history_tweet_ids": [
                "1524301052618629122"
            ],
            "id": "1524301052618629122",
            "attachments": {
                "media_keys": [
                    "3_1524301049938554883"
                ]
            },
            "text": "Day 45/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UzNaHX6mIn"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1524301049938554883",
                    "url": "https://pbs.twimg.com/media/FSdnupRXsAMol1P.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1523938672915226624"
                ]
            },
            "id": "1523938675263954944",
            "edit_history_tweet_ids": [
                "1523938675263954944"
            ],
            "text": "Day 44/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/FrcokBlG5H",
            "conversation_id": "1523938675263954944"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1523938672915226624",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FSYeJhqXoAAzfe1.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1523576273813086213",
            "conversation_id": "1523576273813086213",
            "edit_history_tweet_ids": [
                "1523576273813086213"
            ],
            "text": "Day 43/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/HXvg22qGG4",
            "attachments": {
                "media_keys": [
                    "3_1523576271254528000"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1523576271254528000",
                    "url": "https://pbs.twimg.com/media/FSTUi-RXIAA1gOI.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1523213898102546433"
                ]
            },
            "edit_history_tweet_ids": [
                "1523213900417691650"
            ],
            "conversation_id": "1523213900417691650",
            "id": "1523213900417691650",
            "text": "Day 42/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/V5dH9yDkS3"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FSOK-FFXIAEWfHc.jpg",
                    "type": "photo",
                    "media_key": "3_1523213898102546433"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1523048551160623104"
            ],
            "text": "I just wanted to remind you that all my threads end up on my blog!\n\nYou can read this thread (slightly edited) here:\n\nhttps://t.co/X2mz19n051 https://t.co/1C4eHfDait",
            "conversation_id": "1523048551160623104",
            "id": "1523048551160623104"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1522851497930903553"
                ]
            },
            "conversation_id": "1522851500271325185",
            "edit_history_tweet_ids": [
                "1522851500271325185"
            ],
            "text": "Day 41/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/tinypW7tMn",
            "id": "1522851500271325185"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FSJBXnPX0AEucoh.jpg",
                    "media_key": "3_1522851497930903553",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1522683659362385922",
            "edit_history_tweet_ids": [
                "1522683684322750464"
            ],
            "id": "1522683684322750464",
            "text": "TL;DR:\n\nIf a problem can be split into subproblems and the subproblems are similar to the original problem...\n\n... then recursion might be appropriate!\n\nAlso:\n\n - Recursion happens when you solve the subproblems.\n - Recursion needs a base case that you write first in the code."
        }
    },
    {
        "data": {
            "id": "1522683682972180483",
            "edit_history_tweet_ids": [
                "1522683682972180483"
            ],
            "text": "This was a tiny toy example of recursion.\n\nThere are many other things to be said about recursion, but I hope this gave you an overview of the concept.\n\nIf you enjoyed this thread, follow me @mathsppblog!\n\nAlso, retweet the beginning of the thread so others learn too! \ud83d\ude09",
            "conversation_id": "1522683659362385922"
        }
    },
    {
        "data": {
            "text": "Does this function work?\n\nWell, we can try it out...\n\nAnd it does seem like it is working!\n\nHere you go, a recursive function that we built together!\n\nI really like to think that the recursive part is asking someone for help.\n\nDoes that analogy make sense to you? https://t.co/bctEBhGi3u",
            "attachments": {
                "media_keys": [
                    "3_1522683655591804928"
                ]
            },
            "id": "1522683681072111616",
            "conversation_id": "1522683659362385922",
            "edit_history_tweet_ids": [
                "1522683681072111616"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1522683655591804928",
                    "url": "https://pbs.twimg.com/media/FSGot5zXwAALc3E.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1522683678987632644"
            ],
            "id": "1522683678987632644",
            "text": "Is this making any sense?\n\nCan you see what I'm getting at?\n\nLet's take this receipt example and translate it to Python \ud83d\udc0d.\n\nMy function takes a stack of receipts (a list of receipts) and another receipt and looks for it.\n\nHere it is, with lots of comments: https://t.co/cuAa7T3x7W",
            "conversation_id": "1522683659362385922",
            "attachments": {
                "media_keys": [
                    "3_1522683644141314050"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FSGotPJXIAIRBaB.jpg",
                    "type": "photo",
                    "media_key": "3_1522683644141314050"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1522683677649612801",
            "edit_history_tweet_ids": [
                "1522683677649612801"
            ],
            "text": "I don't need to split the stack in half again...\n\nI barely even have a _stack_, it's just a single receipt!\n\nI just look at the receipt and check if it's the one I'm looking for.\n\nIf it is, good. I found it!\n\nIf it's not, I'll wait for my family members to report back to me.",
            "conversation_id": "1522683659362385922"
        }
    },
    {
        "data": {
            "conversation_id": "1522683659362385922",
            "id": "1522683676320051201",
            "text": "In the world of recursion, we call it the base case.\n\nSay I had plenty of family members around and I kept splitting the stack in half.\n\nI split, and split, and split, and suddenly I look at my stack: it's a single receipt.\n\nWell, that's easy to handle, right?",
            "edit_history_tweet_ids": [
                "1522683676320051201"
            ]
        }
    },
    {
        "data": {
            "text": "Because it's when you start with one problem:\n\nLook for a receipt in a stack of receipts.\n\nAnd you create multiple problems:\n\nLook for a receipt in the two stacks of receipts.\n\nThe other ingredient missing tells you when to stop splitting the stack in half.",
            "edit_history_tweet_ids": [
                "1522683674944282625"
            ],
            "id": "1522683674944282625",
            "conversation_id": "1522683659362385922"
        }
    },
    {
        "data": {
            "conversation_id": "1522683659362385922",
            "id": "1522683673547616256",
            "text": "So, this is a big part of recursion.\n\nIf a problem you have can be split into smaller problems, and the smaller problems still look like the original...\n\nThat's a good candidate for recursion.\n\nThe part where you split the problem into smaller ones is the recursive part.\n\nWhy?",
            "edit_history_tweet_ids": [
                "1522683673547616256"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1522683659362385922",
            "id": "1522683672125661186",
            "text": "Task: find a specific receipt in a stack of receipts.\n\nStrategy:\n\n 1. split stack in two halves;\n 2. give one half to someone and ask for help; and\n 3. look for the specific receipt in my stack of receipts.\n\nNotice how the 3rd bullet point of the strategy matches the task.",
            "edit_history_tweet_ids": [
                "1522683672125661186"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1522683670729039874"
            ],
            "id": "1522683670729039874",
            "text": "But these look like the same task, don't they?\n\nSo, why did I ask for help? Was it even worth it?\n\nYes it was!\n\nWhy?\n\nBecause now I have a much smaller stack to look through!\n\nSo, I have a subproblem (a smaller problem) that looks pretty much like the original problem.",
            "conversation_id": "1522683659362385922"
        }
    },
    {
        "data": {
            "text": "I started the example with this sentence:\n\n\u201cSo, I took my stack of receipts and started looking for it...\u201d\n\nAnd just now, after asking for help a couple of times, I wrote this:\n\n\u201cThen, I took the stack I kept for myself and I looked for the receipt in there.\u201d\n\nRight?",
            "id": "1522683669365805056",
            "conversation_id": "1522683659362385922",
            "edit_history_tweet_ids": [
                "1522683669365805056"
            ]
        }
    },
    {
        "data": {
            "id": "1522683667973300224",
            "conversation_id": "1522683659362385922",
            "text": "Can you guess what I did?\n\nI split the stack in half again and asked someone else to help me.\n\nThen, I took the stack I kept for myself and I looked for the receipt in there.\n\nAnd here's the key idea!",
            "edit_history_tweet_ids": [
                "1522683667973300224"
            ]
        }
    },
    {
        "data": {
            "text": "Easy:\n\n 1. I split the stack of receipts in half;\n 2. I went looking for my brother; and\n 3. I gave him half of the receipts and asked for help with those.\n\nThe other half, I kept for myself, and started looking for the receipt there.\n\nBut I was in a hurry!\n\nSo, what did I do?",
            "id": "1522683666534703104",
            "conversation_id": "1522683659362385922",
            "edit_history_tweet_ids": [
                "1522683666534703104"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1522683659362385922",
            "id": "1522683665121259520",
            "text": "Easy:\n\n 1. I split the stack of receipts in half;\n 2. I went looking for my girlfriend; and\n 3. I gave her half of the receipts and asked for help with those.\n\nThe other half, I kept for myself and started looking for the receipt there.\n\nBut I was in a hurry!\n\nSo, what did I do?",
            "edit_history_tweet_ids": [
                "1522683665121259520"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1522683663770607616"
            ],
            "id": "1522683663770607616",
            "text": "The other day, I had to look for a receipt for something I had purchased.\n\nI didn't remember the address of the store and I needed to go there again.\n\nSo, I took my stack of receipts and started looking for it...\n\nBut the stack was big and I was in a hurry!\n\nSo, what did I do?",
            "conversation_id": "1522683659362385922"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1522683662319374337"
            ],
            "id": "1522683662319374337",
            "conversation_id": "1522683659362385922",
            "text": "Recursion is useful in _certain_ types of problems.\n\nRecursion is mostly useful when:\n\n 1. you have a big problem;\n 2. that big problem can be split into smaller subproblems; and\n 3. the smaller subproblems look like the big problem.\n\nBut what kind of problem looks like that?"
        }
    },
    {
        "data": {
            "conversation_id": "1522683659362385922",
            "edit_history_tweet_ids": [
                "1522683660889116672"
            ],
            "id": "1522683660889116672",
            "text": "When people think of recursion, people think of functions that call themselves.\n\nAfter all, recursion is about self-reference.\n\nSomething that is recursive is something that depends on itself.\n\nTherefore, a recursive function will call itself.\n\nBut how? And why?"
        }
    },
    {
        "data": {
            "text": "Recently I tweeted a thread that explained recursion.\n\nIn case you missed it, I included it here \ud83d\udc47\n\nBut that was mostly a joke.\n\nIn this thread, I'll try to explain recursion with a real life example.\n\nLet's go \ud83d\ude80\n\nhttps://t.co/TVzuEVdJIA",
            "id": "1522683659362385922",
            "conversation_id": "1522683659362385922",
            "edit_history_tweet_ids": [
                "1522683659362385922"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1522489113483558914",
            "id": "1522489113483558914",
            "text": "Day 40/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/YYkQeUJz8b",
            "attachments": {
                "media_keys": [
                    "3_1522489110971174917"
                ]
            },
            "edit_history_tweet_ids": [
                "1522489113483558914"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FSD3x6nWUAU7mwk.jpg",
                    "media_key": "3_1522489110971174917",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I write some pretty decent Python \ud83d\udc0d threads from time to time.\n\nNow I have a system that posts my threads automatically to my blog.\n\nSo... You can find some of my old threads here \ud83d\udc47\n\nDo you remember any thread from the past that you'd like me to upload?\n\nhttps://t.co/bF07zerCkC",
            "id": "1522303222702039041",
            "conversation_id": "1522303222702039041",
            "edit_history_tweet_ids": [
                "1522303222702039041"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1522126731229941760"
                ]
            },
            "text": "Day 39/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UbSTQ6LWOi",
            "id": "1522126733943750658",
            "conversation_id": "1522126733943750658",
            "edit_history_tweet_ids": [
                "1522126733943750658"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FR-uMo4WUAAP5mD.jpg",
                    "media_key": "3_1522126731229941760"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 38/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/lG4h5M6xoN",
            "attachments": {
                "media_keys": [
                    "3_1521764336544493568"
                ]
            },
            "id": "1521764338847174660",
            "edit_history_tweet_ids": [
                "1521764338847174660"
            ],
            "conversation_id": "1521764338847174660"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1521764336544493568",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FR5kmfeXsAAhXvz.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 37/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/aSNy4jb3ku",
            "id": "1521401962171965447",
            "conversation_id": "1521401962171965447",
            "attachments": {
                "media_keys": [
                    "3_1521401959449862145"
                ]
            },
            "edit_history_tweet_ids": [
                "1521401962171965447"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FR0bBXmXoAEGnrR.jpg",
                    "media_key": "3_1521401959449862145",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I wanted the populated example to be super simple, but I could include more interesting examples below.\n\nDo you have any suggestions?",
            "id": "1521320554665746432",
            "conversation_id": "1521320320443064320",
            "edit_history_tweet_ids": [
                "1521320554665746432"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1521320320443064320",
            "edit_history_tweet_ids": [
                "1521320320443064320"
            ],
            "id": "1521320320443064320",
            "text": "I created a PyScript playground for you to have fun with Python \ud83d\udc0d in the browser.\n\nIt has a couple of buttons and divs for you to play with.\n\nIt's what I've been using to test a couple of things, so I thought I'd make it available for you too.\n\nhttps://t.co/J6fIbTq06Y"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1521039564562911234"
            ],
            "attachments": {
                "media_keys": [
                    "3_1521039562314854400"
                ]
            },
            "id": "1521039564562911234",
            "conversation_id": "1521039564562911234",
            "text": "Day 36/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/7oBX0lmt9n"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FRvRbFEXsAAv-_g.jpg",
                    "media_key": "3_1521039562314854400",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1520864441541312514"
            ],
            "text": "Here is a slightly more involved example:\n\nIt combines Python and JavaScript:\n\n - I defined a Python function that creates a nice timestamp and writes it to an element with a given ID\n - I used JavaScript's `setInterval` to run that function every second\n\nhttps://t.co/QY6uLVkUW4",
            "id": "1520864441541312514",
            "conversation_id": "1520864438416461824"
        }
    },
    {
        "data": {
            "id": "1520864438416461824",
            "edit_history_tweet_ids": [
                "1520864438416461824"
            ],
            "conversation_id": "1520864438416461824",
            "text": "Now you can run Python \ud83d\udc0d code in your HTML!\n\nYou just need to use the &lt;py-script&gt; tag, and that's it! \n\nI wrote a short TIL describing how you can start using it.\n\nThe post itself uses PyScript to print a timestamp formatted with Python's `datetime`.\n\nhttps://t.co/gr3QZgGuMX"
        }
    },
    {
        "data": {
            "text": "The method `setdefault` of Python \ud83d\udc0d dictionaries lets you set a default value for a key.\n\nIn the example below, I use it to change the default value of a keyword argument of the built-in `print`. https://t.co/EUBSP4780d",
            "attachments": {
                "media_keys": [
                    "3_1520769278986932224"
                ]
            },
            "id": "1520769282111639553",
            "edit_history_tweet_ids": [
                "1520769282111639553"
            ],
            "conversation_id": "1520769282111639553"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1520769278986932224",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRrbmhNX0AA6TvY.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Day 35/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/PcukxYtzgy",
            "attachments": {
                "media_keys": [
                    "3_1520677169273483271"
                ]
            },
            "edit_history_tweet_ids": [
                "1520677171643170816"
            ],
            "id": "1520677171643170816",
            "conversation_id": "1520677171643170816"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1520677169273483271",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRqH1ByXsAcW4-1.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1520468283845083137",
            "edit_history_tweet_ids": [
                "1520468283845083137"
            ],
            "id": "1520468283845083137",
            "text": "I can take it!\n\nJust drop a reply below with some honest, constructive criticism of my work. No praises!\n\nIt could be about my tweets, my blog articles, my book, ...\n\nJust drop a reply with something that, in your opinion, I can improve \ud83d\ude80\n\nThank you so much!"
        }
    },
    {
        "data": {
            "text": "That's why I had 4 exercises that looked so similar.\n\nDo you think my motivation makes sense?\n\nJust reply with your thoughts on this!\n\nAs a bonus task, here are four short snippets.\n\nSome are `filter`s, some are list comprehensions: rewrite them as the other type of expression. https://t.co/oimosCCMsJ",
            "attachments": {
                "media_keys": [
                    "3_1520382526031863811"
                ]
            },
            "id": "1520382541940895747",
            "conversation_id": "1520382534902759426",
            "edit_history_tweet_ids": [
                "1520382541940895747"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1520382526031863811",
                    "url": "https://pbs.twimg.com/media/FRl72iLXIAMs_G5.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I think this quote from Alan Perlis is very eye opening.\n\nI am especially fond of the comparison to Shakespeare!\n\nIdioms are useful because they are pieces of code that convey a specific idea.\n\nAn idea that is bigger as a whole than the lines of code that write it. https://t.co/sj96DqkOcG",
            "attachments": {
                "media_keys": [
                    "3_1520382532646227969"
                ]
            },
            "id": "1520382540057620482",
            "edit_history_tweet_ids": [
                "1520382540057620482"
            ],
            "conversation_id": "1520382534902759426"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1520382532646227969",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRl7260WUAE-MeA.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I am a huge proponent of understand **how** and **why** things work.\n\nAfter all, memorising something is very different from learning it.\n\nBut there is value in making things automatic.\n\nThe 4 exercises were about converting `filter`s &lt;&gt; list comprehensions automatically.",
            "id": "1520382538715484160",
            "conversation_id": "1520382534902759426",
            "edit_history_tweet_ids": [
                "1520382538715484160"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1520382481622614018",
                    "3_1520382491898560514",
                    "3_1520382502111690752",
                    "3_1520382514283651072"
                ]
            },
            "text": "Over the past four days I asked you to take a look at:\n\n - two usages of `filter`; and\n - a list comprehension.\n\nI asked for the similarities and for the differences.\n\nHere are those four exercises: https://t.co/tdg5mqqR9o",
            "id": "1520382536828035072",
            "conversation_id": "1520382534902759426",
            "edit_history_tweet_ids": [
                "1520382536828035072"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRl7z8vXwAIRJdD.jpg",
                    "media_key": "3_1520382481622614018"
                },
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRl70jBWQAIu_8r.jpg",
                    "media_key": "3_1520382491898560514"
                },
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRl71JEWQAArHkK.jpg",
                    "media_key": "3_1520382502111690752"
                },
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRl712aXoAAy8J8.jpg",
                    "media_key": "3_1520382514283651072"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1520382529395646464"
                ]
            },
            "conversation_id": "1520382534902759426",
            "id": "1520382534902759426",
            "text": "Day 34/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nList comprehensions with conditions tend to be good replacements for the built-in `filter`.\n\nBut... Is that it?\n\nIf so, why did I spend 4 days with `filter`/list comprehension comparisons? https://t.co/9GXOR7a8OM",
            "edit_history_tweet_ids": [
                "1520382534902759426"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRl72utWYAAylRy.jpg",
                    "media_key": "3_1520382529395646464"
                }
            ]
        }
    },
    {
        "data": {
            "text": "What are your plans for this weekend?\n\nAny Python \ud83d\udc0d learning/coding at all?\n\nI have to go and study the module `pathlib`.\n\n(I'm actually working this weekend as if it were Mon/Tue, because I'll be off Mon/Tue \ud83d\ude43)",
            "edit_history_tweet_ids": [
                "1520128037177675780"
            ],
            "id": "1520128037177675780",
            "conversation_id": "1520128037177675780"
        }
    },
    {
        "data": {
            "id": "1519952417747517440",
            "conversation_id": "1519952417747517440",
            "edit_history_tweet_ids": [
                "1519952417747517440"
            ],
            "text": "Day 33/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code and compare the three snippets...\n\nWhat do you see?\n\nDon't dispair. Tomorrow I'll explain my insistence on this. https://t.co/blZPwzZomS",
            "attachments": {
                "media_keys": [
                    "3_1519952395446505472",
                    "3_1519952406062186496",
                    "3_1519952415654563840"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1519952395446505472",
                    "url": "https://pbs.twimg.com/media/FRf0po4X0AAGpJV.jpg",
                    "type": "photo"
                },
                {
                    "media_key": "3_1519952406062186496",
                    "url": "https://pbs.twimg.com/media/FRf0qQbWQAA6ibk.jpg",
                    "type": "photo"
                },
                {
                    "media_key": "3_1519952415654563840",
                    "url": "https://pbs.twimg.com/media/FRf0q0KWUAAOXVn.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519743511335251969"
            ],
            "conversation_id": "1519743509779173377",
            "id": "1519743511335251969",
            "text": "Spoilers:\n\n - install `rich` by @willmcgugan;\n - write two lines of code;\n - enjoy beautiful tracebacks when your code goes crazy; and\n - you can also enable beautiful tracebacks when logging with `rich`.\n\nI wonder what I'll learn about `rich` tomorrow... \ud83e\udd14"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519743509779173377"
            ],
            "conversation_id": "1519743509779173377",
            "id": "1519743509779173377",
            "text": "Python \ud83d\udc0d tracebacks look so dull and dense...\n\nThankfully, today I learned how to make them **beautiful**!\n\nI wrote a short article on how to do it, so you can do it to.\n(But don't worry, it's not like it's hard to set up...)\n\nhttps://t.co/Gf9eOx9k8V"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1519590007714959360",
                    "3_1519590019908128768",
                    "3_1519590032847212545"
                ]
            },
            "conversation_id": "1519590035095437313",
            "id": "1519590035095437313",
            "text": "Day 32/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/4oeVsw6s0B",
            "edit_history_tweet_ids": [
                "1519590035095437313"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRarD5YVUAAkyRn.jpg",
                    "media_key": "3_1519590007714959360"
                },
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRarEmzaUAAoC09.jpg",
                    "media_key": "3_1519590019908128768"
                },
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRarFXAVEAEZRZV.jpg",
                    "media_key": "3_1519590032847212545"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519437492801445889"
            ],
            "id": "1519437492801445889",
            "text": "Spoilers:\n\n - install `rich` by @willmcgugan;\n - copy a couple of lines of code from the `rich` docs;\n - enjoy beautiful logging in your console.\n\nIt is so simple, it makes me wonder why people don't talk about this more.",
            "conversation_id": "1519437491291492355"
        }
    },
    {
        "data": {
            "text": "Logging in Python \ud83d\udc0d can be done with the module `logging`.\n\nTIL how to do **beautiful** logging.\nIt's so pretty, I wish my code errors just so I can see all the colours.\n\nI wrote a short article on how to do it!\n\nIt's surprisingly simple to set up.\n\nhttps://t.co/GFBa5x1ot8",
            "id": "1519437491291492355",
            "conversation_id": "1519437491291492355",
            "edit_history_tweet_ids": [
                "1519437491291492355"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519381151181324288"
            ],
            "conversation_id": "1519381134408396800",
            "id": "1519381151181324288",
            "text": "Go ahead and give that a read!\n\nOne of the main takeaways is that you **don't** need to learn all of Python.\n\nYou just need to learn a bit and start practising and building things.\n\nThen, keep learning, bit by bit, gradually...\n\nAnd you will keep improving \ud83d\ude80"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519381149637914633"
            ],
            "text": "I actually wrote an article a couple of months ago about this subject.\n\nIn it, I describe how I go about navigating those numbers and always learning something new without suffering from paralysis by analysis:\n\nhttps://t.co/mY8pxRKN8B",
            "id": "1519381149637914633",
            "conversation_id": "1519381134408396800"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519381148212031488"
            ],
            "text": "So, as you can see, Python really is huge and there is a LOT to learn.\n\nIn fact, I think you will never learn **ALL** of it.\n\nBut that's fine.\n\nIn fact, I am of the opinion that mastering Python is impossible, and that's actually OK.\n\nThe point is not to know it all.",
            "conversation_id": "1519381134408396800",
            "id": "1519381148212031488"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519381146689224704"
            ],
            "text": "And if all of this isn't enough, you can always head over to PyPI, the Python Package Index.\n\nOn PyPI you can find all the packages that people have published for others to use.\n\nAs of writing this thread, there are 371,830 projects on PyPI!\n\nThat's a lot of code \ud83d\ude01",
            "conversation_id": "1519381134408396800",
            "id": "1519381146689224704"
        }
    },
    {
        "data": {
            "conversation_id": "1519381134408396800",
            "text": "There is also the standard library, which is also huge!\n\nThe Python Standard Library has almost 250 modules!\n\nBut over 200 modules! That's why they say Python has \u201cbatteries included\u201d...\n\nThose are some big batteries! \ud83e\udd23\n\nhttps://t.co/6b7QJON1LO",
            "edit_history_tweet_ids": [
                "1519381144994779136"
            ],
            "id": "1519381144994779136"
        }
    },
    {
        "data": {
            "conversation_id": "1519381134408396800",
            "edit_history_tweet_ids": [
                "1519381143623188481"
            ],
            "id": "1519381143623188481",
            "text": "And these counts I presented exclude things like dunder methods, which are also quite a few...\n\nSo, learning all of this will take you some time!"
        }
    },
    {
        "data": {
            "text": "But also ljust, lower, lstrip, maketrans, partition, removeprefix, removesuffix, replace, rfind, rindex, rjust, rpartition, rsplit, rstrip, split, splitlines, startswith, strip, swapcase, title, translate, upper, and zfill!\n\nThat's a lot of string methods...",
            "id": "1519381142121631748",
            "conversation_id": "1519381134408396800",
            "edit_history_tweet_ids": [
                "1519381142121631748"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1519381134408396800",
            "edit_history_tweet_ids": [
                "1519381140720791552"
            ],
            "id": "1519381140720791552",
            "text": "Strings have 47 methods!\n\ncapitalize, casefold, center, count, encode, endswith, expandtabs, find, format, format_map, index, isalnum, isalpha, isascii, isdecimal, isdigit, isidentifier, islower, isnumeric, isprintable, isspace, istitle, isupper, join, ..."
        }
    },
    {
        "data": {
            "conversation_id": "1519381134408396800",
            "text": "And strings?!\n\nDon't even get me started on strings.\n\nHow many methods do you think strings have?\n\nCare to take a guess?\n\nDrumroll, please...",
            "edit_history_tweet_ids": [
                "1519381139202392064"
            ],
            "id": "1519381139202392064"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519381137742831623"
            ],
            "text": "Python 3.10 has many built-in types and they come with many methods:\n\n - floats have 7 methods and integers have 10;\n - lists have 11 methods (and tuples have 2);\n - dictionaries also have 11 methods;\n - sets have 17 methods (but frozensets only 8);",
            "id": "1519381137742831623",
            "conversation_id": "1519381134408396800"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519381135880597505"
            ],
            "attachments": {
                "media_keys": [
                    "3_1519381131682062336"
                ]
            },
            "text": "Python 3.10 has 71 built-in functions.\n\nThe built-in functions are the functions that you can use without having to import anything.\n\nAmong them you can find `print` or `int`...\n\nBut also `compile` or `__import__`. https://t.co/bveqEkimA2",
            "conversation_id": "1519381134408396800",
            "id": "1519381135880597505"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1519381131682062336",
                    "url": "https://pbs.twimg.com/media/FRXtFthXIAAamEZ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Python \ud83d\udc0d is a huge language:\n\n - it has many built-in functions;\n - it has a rich set of built-in types + their methods;\n - it has a great standard library;\n - it has a HUGE ecosystem;\n - ...\n\nThere's always something to keep you busy!\n\nLet me tell you exactly _how_ busy:",
            "id": "1519381134408396800",
            "conversation_id": "1519381134408396800",
            "edit_history_tweet_ids": [
                "1519381134408396800"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519227653835923456"
            ],
            "id": "1519227653835923456",
            "text": "Day 31/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/1j67LJPKGj",
            "conversation_id": "1519227653835923456",
            "attachments": {
                "media_keys": [
                    "3_1519227632352743425",
                    "3_1519227641924050944",
                    "3_1519227651642343424"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FRVhe39X0AEfB05.jpg",
                    "type": "photo",
                    "media_key": "3_1519227632352743425"
                },
                {
                    "url": "https://pbs.twimg.com/media/FRVhfbnWYAAnpYx.jpg",
                    "type": "photo",
                    "media_key": "3_1519227641924050944"
                },
                {
                    "url": "https://pbs.twimg.com/media/FRVhf_0XwAATq8O.jpg",
                    "type": "photo",
                    "media_key": "3_1519227651642343424"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1518984288317972481",
            "conversation_id": "1518984288317972481",
            "edit_history_tweet_ids": [
                "1518984288317972481"
            ],
            "text": "When you write about something, how do you go about making corrections or further clarifications?\n\nOn my blog, I just edit the article(s) in question. That's easy.\n\nBut what about Twitter content? E.g., tweets/threads are not editable. What's the best way to go about it?"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1518865228779474944",
                    "3_1518865239307128832",
                    "3_1518865248463302657"
                ]
            },
            "text": "Day 30/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/fd2cHNceSx",
            "id": "1518865250560495617",
            "conversation_id": "1518865250560495617",
            "edit_history_tweet_ids": [
                "1518865250560495617"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRQX4NcX0AAXp7s.jpg",
                    "media_key": "3_1518865228779474944"
                },
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRQX40qXEAAzZvq.jpg",
                    "media_key": "3_1518865239307128832"
                },
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRQX5WxXMAEdHRI.jpg",
                    "media_key": "3_1518865248463302657"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1518684133668622343",
            "conversation_id": "1518684114634907648",
            "text": "TL;DR:\n\nWhen writing code:\n\n - don't check if you *really* have a duck (`type`);\n - instead, check if you have something that looks enough like a duck (`isinstance`).\n\nI hope this made sense!\n\nRetweet the beginning of the thread if it did \ud83d\ude80\n\nAnd I'll see you around \ud83d\udc4b",
            "edit_history_tweet_ids": [
                "1518684133668622343"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1518684132104146944"
            ],
            "text": "I hope this thread cleared some doubts you might have had about `isinstance` and/or duck typing in Python.\n\nIf you have questions, feel free to ask them at the beginning of the thread.\n\nI like writing about Python, so follow me @mathsppblog if you like reading about Python \ud83d\ude09",
            "conversation_id": "1518684114634907648",
            "id": "1518684132104146944"
        }
    },
    {
        "data": {
            "conversation_id": "1518684114634907648",
            "id": "1518684130665541640",
            "text": "Most of the times, you don't need a specific type, so no need to use `type`.\n\nYou just need things that _look_ like those types, hence you use `isinstance`.\n\nCan you go back to some code you wrote previously and find a check with `type` that you can replace with `isinstance`?",
            "edit_history_tweet_ids": [
                "1518684130665541640"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1518684128799084551"
            ],
            "attachments": {
                "media_keys": [
                    "3_1518684111875067905"
                ]
            },
            "text": "With me so far?\n\nBecause this is the essence of duck typing!\n\nIf something walks like a duck and quacks like a duck, just pretend it's a duck and get it over with.\n\nHow do we check, in Python \ud83d\udc0d, if something looks like a duck?\n\nWe use `isinstance`: https://t.co/Aqu7F16YJh",
            "id": "1518684128799084551",
            "conversation_id": "1518684114634907648"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRNzJ0ZX0AE-5Vv.jpg",
                    "media_key": "3_1518684111875067905"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1518684127406563329",
            "conversation_id": "1518684114634907648",
            "edit_history_tweet_ids": [
                "1518684127406563329"
            ],
            "text": "Instances of `Pos` behave pretty much like floats, so maybe we could change the function `sqrt`.\n\nInstead of checking if we really **have** floats or integers...\n\nWe can just check if the argument **looks** like a float or an integer!\n\nIf it does, compute the square root!"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1518684096788062211"
                ]
            },
            "conversation_id": "1518684114634907648",
            "id": "1518684125481340928",
            "text": "How can I use `pow` and string formatting with instances of `Pos`?\n\nBecause, for the purposes of `pow` and formatting, `Pos` objects look *a lot* like floats.\n\n`pow` works on instances of `Pos`...\n\nSo, can I compute square roots of my instances of `Pos`?\n\nAs of now, not really: https://t.co/DqrYmX54iw",
            "edit_history_tweet_ids": [
                "1518684125481340928"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRNzI8MWYAMGm9c.jpg",
                    "media_key": "3_1518684096788062211"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1518684123606433794"
            ],
            "attachments": {
                "media_keys": [
                    "3_1518684084322586625"
                ]
            },
            "text": "In other words, you don't really *need* the argument to be *really* an `int` or a `float`.\n\nFor example, imagine I create a toy class for positive floats only.\n\nNotice how little I wrote to define `Pos` below...\n\nAnd yet, I can already do plenty with `Pos` objects: https://t.co/WXUJDVIJno",
            "id": "1518684123606433794",
            "conversation_id": "1518684114634907648"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRNzINwWUAEGYLq.jpg",
                    "media_key": "3_1518684084322586625"
                }
            ]
        }
    },
    {
        "data": {
            "text": "But when you write code like this, you are not taking into account Python's duck typing.\n\nWhat's duck typing?\n\n\"If it walks like a duck and it quacks like a duck, then it must be a duck.\"",
            "edit_history_tweet_ids": [
                "1518684122209820674"
            ],
            "id": "1518684122209820674",
            "conversation_id": "1518684114634907648"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1518684072448507907"
                ]
            },
            "conversation_id": "1518684114634907648",
            "edit_history_tweet_ids": [
                "1518684120406269957"
            ],
            "text": "The error above may be surprising.\n\nI called `sqrt` and get an error in `**`/`pow`..?\n\nSo, maybe you should check the type of the argument.\n\nLet's check if it's an integer or a float, and if it's not, we complain more accurately.\n\nThat's when you might think of using `type`: https://t.co/nwXM3UJQnw",
            "id": "1518684120406269957"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FRNzHhhWQAMnk_l.jpg",
                    "media_key": "3_1518684072448507907",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "This also means that, when you write a function, you can't tell what types of arguments you'll get.\n\nE.g., I may write a function to compute square roots of numbers.\n\nI want numbers.\n\nBut nothing stops you from calling my function with a string: https://t.co/QHacH5zA7R",
            "attachments": {
                "media_keys": [
                    "3_1518684061425967104"
                ]
            },
            "id": "1518684118560686080",
            "edit_history_tweet_ids": [
                "1518684118560686080"
            ],
            "conversation_id": "1518684114634907648"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1518684061425967104",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRNzG4dXoAAfYKL.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "\u201cPython is a dynamically typed language.\u201d\n\nWhat does this mean?\n\nIt means that the types of things are dynamic \u2013 they can change.\n\nFor example, a variable `x` can start by holding a string, which can then change into an integer, and then into a list: https://t.co/CElkOSUL4i",
            "attachments": {
                "media_keys": [
                    "3_1518684049673539585"
                ]
            },
            "edit_history_tweet_ids": [
                "1518684116778110978"
            ],
            "id": "1518684116778110978",
            "conversation_id": "1518684114634907648"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1518684049673539585",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRNzGMrX0AE_qYV.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1518684114634907648",
            "text": "Python \ud83d\udc0d has 2 built-ins that are often misused: `type` and `isinstance`.\n\nThe built-in `type` tells you the type of an object...\n\nSo, many beginners think you should use `type` to check the type of an object.\n\nSounds reasonable!\n\nBut here's why you should use `isinstance`: https://t.co/NkSHfWmGpD",
            "edit_history_tweet_ids": [
                "1518684114634907648"
            ],
            "id": "1518684114634907648",
            "attachments": {
                "media_keys": [
                    "3_1518684038441193472"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1518684038441193472",
                    "url": "https://pbs.twimg.com/media/FRNzFi1X0AAFyEc.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1518502835423518720",
            "edit_history_tweet_ids": [
                "1518502835423518720"
            ],
            "id": "1518502835423518720",
            "attachments": {
                "media_keys": [
                    "3_1518502832743366658"
                ]
            },
            "text": "Day 28/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nThe simplest form of a list comprehension is a good substitute for the built-in `map`. https://t.co/eiMl3yfrQs"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1518502832743366658",
                    "url": "https://pbs.twimg.com/media/FRLOR_AXwAIXCs2.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1518288648961155074",
            "id": "1518289262634061824",
            "text": "That's it!\n\nI hope you found my example enlightening.\n\nTo recap, recursion is based on:\n - a base case; and\n - the recursive step.\n\nIf you enjoyed this explanation, consider retweeting the first tweet to help others understand recursion!\n\nCheers \ud83d\ude80",
            "edit_history_tweet_ids": [
                "1518289262634061824"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1518288648961155074",
            "edit_history_tweet_ids": [
                "1518288908978728964"
            ],
            "id": "1518288908978728964",
            "text": "If recursion is a concept you don't understand yet, I strongly recommend you start by reading a thread I wrote on the subject \ud83d\udc47\n\nIf you already get recursion, you can go to the next tweet.\n\nhttps://t.co/TVzuEVdJIA"
        }
    },
    {
        "data": {
            "conversation_id": "1518288648961155074",
            "edit_history_tweet_ids": [
                "1518288648961155074"
            ],
            "id": "1518288648961155074",
            "text": "I have gotten multiple requests to explain recursion.\n\nRecursion is a maths/computer science concept and it goes beyond Python \ud83d\udc0d, or JavaScript, or whatever language you use.\n\nLet me explain recursion with an example \ud83d\udc47"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1518140484505460736"
            ],
            "attachments": {
                "media_keys": [
                    "3_1518140457259311104",
                    "3_1518140471683465223",
                    "3_1518140481884102657"
                ]
            },
            "id": "1518140484505460736",
            "conversation_id": "1518140484505460736",
            "text": "Day 28/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/YnzLjNCEj8"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FRGEs9IXIAAtXFw.jpg",
                    "media_key": "3_1518140457259311104",
                    "type": "photo"
                },
                {
                    "url": "https://pbs.twimg.com/media/FRGEty3WQAczBRa.jpg",
                    "media_key": "3_1518140471683465223",
                    "type": "photo"
                },
                {
                    "url": "https://pbs.twimg.com/media/FRGEuY3XoAEVU6P.jpg",
                    "media_key": "3_1518140481884102657",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Oh hey, we are 30,000 strong!\n\nIf you are new around, welcome \ud83d\udc4b\n\nMy name is Rodrigo and most of my tweets revolve around Python \ud83d\udc0d\n\nI sprinkle some maths \ud83e\udde0 and ML \ud83e\udd16 and other things here and there.\n\nLet's get to know each other. AMA!",
            "edit_history_tweet_ids": [
                "1517840200675778560"
            ],
            "id": "1517840200675778560",
            "conversation_id": "1517840200675778560"
        }
    },
    {
        "data": {
            "conversation_id": "1517778092932177922",
            "edit_history_tweet_ids": [
                "1517778092932177922"
            ],
            "id": "1517778092932177922",
            "attachments": {
                "media_keys": [
                    "3_1517778069918003200",
                    "3_1517778081309769728",
                    "3_1517778090780471296"
                ]
            },
            "text": "Day 27/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/dfhtiPrKmy"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1517778069918003200",
                    "url": "https://pbs.twimg.com/media/FRA7HPFXMAAjxEg.jpg",
                    "type": "photo"
                },
                {
                    "media_key": "3_1517778081309769728",
                    "url": "https://pbs.twimg.com/media/FRA7H5hXwAA7QrQ.jpg",
                    "type": "photo"
                },
                {
                    "media_key": "3_1517778090780471296",
                    "url": "https://pbs.twimg.com/media/FRA7IczXMAAvTo2.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1517603908553740290",
            "edit_history_tweet_ids": [
                "1517603908553740290"
            ],
            "text": "Do you have Python \ud83d\udc0d plans for this weekend?\n\nOr will you write 0 lines of code during the weekend?\n\nBoth answers are 110% fine \ud83d\ude01\n\nI will try to squeeze in a bit of open source work \ud83d\udcaa",
            "id": "1517603908553740290"
        }
    },
    {
        "data": {
            "conversation_id": "1517415699869753344",
            "id": "1517415699869753344",
            "text": "Day 26/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/I37O7C75dG",
            "attachments": {
                "media_keys": [
                    "3_1517415678021672960",
                    "3_1517415687022653440",
                    "3_1517415697776877569"
                ]
            },
            "edit_history_tweet_ids": [
                "1517415699869753344"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQ7xhQEXIAAVCut.png",
                    "media_key": "3_1517415678021672960",
                    "type": "photo"
                },
                {
                    "url": "https://pbs.twimg.com/media/FQ7xhxmXMAAz5l9.jpg",
                    "media_key": "3_1517415687022653440",
                    "type": "photo"
                },
                {
                    "url": "https://pbs.twimg.com/media/FQ7xiZqXoAE0QjW.jpg",
                    "media_key": "3_1517415697776877569",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1517213106849693696"
                ]
            },
            "conversation_id": "1517213109530034176",
            "id": "1517213109530034176",
            "text": "There's 3 main ways to iterate over a dictionary in Python \ud83d\udc0d.\n\nUse:\n\n - `.keys` to go over the keys;\n - `.values` to go over the values;\n - `.items` to go over the key, value pairs.\n\nIterating directly over the dictionary with `for foo in d:` iterates over the keys. https://t.co/ghMoIwzi8Y",
            "edit_history_tweet_ids": [
                "1517213109530034176"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQ45SDpXwAAUH6y.jpg",
                    "media_key": "3_1517213106849693696"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1517053314948640768",
            "text": "Day 25/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/Gc4My4DbYS",
            "edit_history_tweet_ids": [
                "1517053314948640768"
            ],
            "id": "1517053314948640768",
            "attachments": {
                "media_keys": [
                    "3_1517053292798521344",
                    "3_1517053302545997824",
                    "3_1517053312796876805"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1517053292798521344",
                    "url": "https://pbs.twimg.com/media/FQ2n7p6XsAAUqLi.png"
                },
                {
                    "type": "photo",
                    "media_key": "3_1517053302545997824",
                    "url": "https://pbs.twimg.com/media/FQ2n8OOWYAAUv9H.jpg"
                },
                {
                    "type": "photo",
                    "media_key": "3_1517053312796876805",
                    "url": "https://pbs.twimg.com/media/FQ2n80aWYAU5QIH.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1516690901619421184"
                ]
            },
            "text": "Day 24/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UmRtb9q8HN",
            "id": "1516690904026947588",
            "conversation_id": "1516690904026947588",
            "edit_history_tweet_ids": [
                "1516690904026947588"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQxeVtkXsAAp9uw.jpg",
                    "media_key": "3_1516690901619421184"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1516548199233863685",
            "edit_history_tweet_ids": [
                "1516548199233863685"
            ],
            "text": "**SPOILER**\n\nI just wanted to give a shout-out to @ZechCodes who solved this and recorded the solution.\n\nI just have a question...\n\nWhy haven't you eaten those chocolates yet? \ud83e\udd23\n\nhttps://t.co/Mvh9632O8Q",
            "conversation_id": "1516482044708241415"
        }
    },
    {
        "data": {
            "id": "1516482049896501250",
            "conversation_id": "1516482044708241415",
            "text": "@MOI_OrlandoFL @iconparkorlando Give this puzzle your best shot and let me know how it goes!\n\nMaybe record yourself solving it? \ud83d\ude03\n\nIf you manage to solve this, I'll add you to the list of solvers of the puzzle \ud83d\udc47\n\nhttps://t.co/YYyFtiVbBo",
            "edit_history_tweet_ids": [
                "1516482049896501250"
            ]
        }
    },
    {
        "data": {
            "text": "@MOI_OrlandoFL @iconparkorlando Coins can only move forward!\n\n - Heads can only go right; and\n - Tails can only go left.\n\nCoins can only move one space at a time...\n\nOr jump once over a different coin: https://t.co/lY3ys6B3th",
            "id": "1516482048092946436",
            "conversation_id": "1516482044708241415",
            "attachments": {
                "media_keys": [
                    "3_1516482042493640705"
                ]
            },
            "edit_history_tweet_ids": [
                "1516482048092946436"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQugYgsXoAE_TL3.jpg",
                    "media_key": "3_1516482042493640705",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1516482044708241415",
            "edit_history_tweet_ids": [
                "1516482046679568391"
            ],
            "text": "@MOI_OrlandoFL @iconparkorlando What is the challenge?\n\nTo swap the two groups of coins!\n\n - the 3 Heads should go to the right; and\n - the 3 Tails should go to the left.\n\nBut you can only move the coins in a specific way!",
            "id": "1516482046679568391"
        }
    },
    {
        "data": {
            "text": "I have a puzzle for you \ud83e\udde0\ud83e\udd2f\n\nI solved this at the Museum of Illusions lobby @MOI_OrlandoFL, at @iconparkorlando.\n\nYou can play this yourself in your head, or with 6 coins:\n\n3 Heads and 3 Tails.\n\nLay them out like this, with a space in the middle: https://t.co/OY7qwN6rmM",
            "attachments": {
                "media_keys": [
                    "3_1516482030611091457"
                ]
            },
            "id": "1516482044708241415",
            "edit_history_tweet_ids": [
                "1516482044708241415"
            ],
            "conversation_id": "1516482044708241415"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1516482030611091457",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQugX0bWUAEnc7M.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1516408594232659983"
            ],
            "attachments": {
                "poll_ids": [
                    "1516408593813225485"
                ]
            },
            "conversation_id": "1516408594232659983",
            "id": "1516408594232659983",
            "text": "I was going to submit a couple of Python \ud83d\udc0d talks to a Python conference.\n\nI was a bit shocked \ud83d\ude31 to find out that speakers also have to pay a full conference ticket.\n\nAm I being cheap?!\n\nWhat do you think? Conference speakers should...\n\nFeel free to reply w/ your views."
        }
    },
    {
        "data": {
            "conversation_id": "1516328520259153927",
            "text": "Day 24/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/uaLo9J5qmC",
            "edit_history_tweet_ids": [
                "1516328520259153927"
            ],
            "id": "1516328520259153927",
            "attachments": {
                "media_keys": [
                    "3_1516328517843230721"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1516328517843230721",
                    "url": "https://pbs.twimg.com/media/FQsUwMzXIAEavsM.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1516042873577345024",
            "id": "1516042874843979783",
            "text": "I've been training myself to use them in a specific situation:\n\n - when I want to collect things; and\n - the only operations I need are\n   - membership checking;\n   - adding/removing things.\n\nI always used lists for this, but sets are more appropriate.\n\nI rarely use frozen sets.",
            "edit_history_tweet_ids": [
                "1516042874843979783"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1516042873577345024"
            ],
            "id": "1516042873577345024",
            "text": "Do you ever use Python \ud83d\udc0d sets?\n\nWhat for?\n\nWhat about frozen sets?",
            "conversation_id": "1516042873577345024"
        }
    },
    {
        "data": {
            "text": "Day 23/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/6qnrlzqETa",
            "id": "1515966129835020294",
            "conversation_id": "1515966129835020294",
            "attachments": {
                "media_keys": [
                    "3_1515966127561662464"
                ]
            },
            "edit_history_tweet_ids": [
                "1515966129835020294"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQnLKTzWYAAgIKg.jpg",
                    "media_key": "3_1515966127561662464",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1515603753008869378"
                ]
            },
            "conversation_id": "1515603757375098882",
            "id": "1515603757375098882",
            "text": "Day 22/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/ixwrZwgB2n",
            "edit_history_tweet_ids": [
                "1515603757375098882"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQiBlVZXsAIhXg-.jpg",
                    "media_key": "3_1515603753008869378"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1515318097577717782"
            ],
            "id": "1515318097577717782",
            "conversation_id": "1515318096281620488",
            "text": "For me, one huge thing would be how to use `for` loops properly!\n\nI took way too long to learn about `zip`, `enumerate`, what iterables are, etc..."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1515318096281620488"
            ],
            "text": "What is something that you took tooooooo long to learn in Python \ud83d\udc0d...\n\nBut would learn right away if you started over?",
            "id": "1515318096281620488",
            "conversation_id": "1515318096281620488"
        }
    },
    {
        "data": {
            "text": "Day 21/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/BP21I8dHlD",
            "attachments": {
                "media_keys": [
                    "3_1515241351356497925"
                ]
            },
            "id": "1515241353629868032",
            "edit_history_tweet_ids": [
                "1515241353629868032"
            ],
            "conversation_id": "1515241353629868032"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1515241351356497925",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQc3-yCWQAUmK-J.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1515060237442691080"
            ],
            "text": "But wait!\n\nThere is one example left!\n\nCan you tell me what the result is?\n\nAnd can you justify it with the help of the built-in `ord`?\n\nGive it a shot \ud83d\ude80",
            "conversation_id": "1515060216232132609",
            "id": "1515060237442691080"
        }
    },
    {
        "data": {
            "text": "TL;DR:\n\n - for words, think of a dictionary (the book) as a mnemonic;\n - strings are compared char by char;\n - short strings come first (\"car\" vs \"carnivore\");\n - characters are ordered by their Unicode code point;\n - the built-in `ord` returns the code point of a char.",
            "id": "1515060236003983363",
            "edit_history_tweet_ids": [
                "1515060236003983363"
            ],
            "conversation_id": "1515060216232132609"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1515060234007552006"
            ],
            "attachments": {
                "media_keys": [
                    "3_1515060213786853385"
                ]
            },
            "id": "1515060234007552006",
            "conversation_id": "1515060216232132609",
            "text": "The 1 comes before the 2 in the Unicode standard, so `\"10\" &lt; \"2.5\"` evaluates to `True`.\n\n**Attention**: this shows that comparing strings that contain numbers is **different** from comparing the numbers themselves.\n\nThis can be misleading, because some times the results agree: https://t.co/VBDWyEGVlA"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQaTPMAXwAkHNMJ.jpg",
                    "media_key": "3_1515060213786853385",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1515060232631767041",
            "edit_history_tweet_ids": [
                "1515060232631767041"
            ],
            "text": "With this in mind, you should be able to answer the next examples.\n\nNow, let us tackle the comparison `\"10\" &lt; \"2.5\"`.\n\nIn the Unicode standard, the digits 0 to 9 have consecutive code points.\n\nSo, when comparing `\"10\"` to `\"2.5\"`, we start with comparing the `\"1\"` and the `\"2\"`:",
            "conversation_id": "1515060216232132609"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1515060230551388162"
            ],
            "attachments": {
                "media_keys": [
                    "3_1515060203007483917"
                ]
            },
            "text": "So, in other words, Python didn't come up with random ids for all the characters.\n\nIt actually borrows those ids from the Unicode standard.\n\nHow can you check the codepoint of a character?\n\nWith the `ord` built-in: https://t.co/xBRmDMKGkA",
            "id": "1515060230551388162",
            "conversation_id": "1515060216232132609"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQaTOj2XoA0mOjw.png",
                    "media_key": "3_1515060203007483917"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1515060216232132609",
            "edit_history_tweet_ids": [
                "1515060229091860494"
            ],
            "id": "1515060229091860494",
            "text": "So, the solution that people came up with is to attach an integer to each character.\n\nThink of it like an id.\n\nThen, when comparing characters, we compare the associated ids instead.\n\nIn reality, the id of each character is its Unicode code point..."
        }
    },
    {
        "data": {
            "conversation_id": "1515060216232132609",
            "edit_history_tweet_ids": [
                "1515060227686678530"
            ],
            "text": "The thing that comes first is actually the upper case R!\n\nWhy?\n\nPython can compare _any_ two strings.\n\nEven strings that don't have letters, for example.\n\nAnd all those strings need to be comparable to each other.",
            "id": "1515060227686678530"
        }
    },
    {
        "data": {
            "text": "Well, now we can't just think about dictionaries.\n\nWhy is that?\n\nBecause `\"Rice\"` and `\"corn\"` are capitalised differently.\n\nSo, we need to know what comes first:\n\n - an upper case R?\n - or a lower case C?",
            "id": "1515060226260709387",
            "edit_history_tweet_ids": [
                "1515060226260709387"
            ],
            "conversation_id": "1515060216232132609"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1515060192702042113"
                ]
            },
            "id": "1515060224280907778",
            "edit_history_tweet_ids": [
                "1515060224280907778"
            ],
            "text": "Now we are ready to tackle the next set of examples:\n\nWhat is the result of `\"Rice\" &lt;= \"corn\"`? https://t.co/nJvgL7Szrw",
            "conversation_id": "1515060216232132609"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1515060192702042113",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQaTN9dXEAEPuSK.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1515060222913617926"
            ],
            "text": "What about `\"car\" &gt; \"carnivore\"`?\n\n - both start with C;\n - 2nd letter of both is A; and\n - 3rd letter of both is R.\n\nBut then, one word ends and the other continues...\n\nWhat comes first in the dictionary?\n\nThe short one!\n\nSo `\"car\" &gt; \"carnivore\"` is actually false.",
            "conversation_id": "1515060216232132609",
            "id": "1515060222913617926"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1515060221449805829"
            ],
            "text": "- \"bar\" starts with B.\n - \"acorn\" starts with A.\n\nSo, `\"bar\" &gt; \"acorn\"` is `True`.\n\nWhat about `\"dice\" &gt; \"dolphin\"`?\n\nThink about it.\n\nThey start with the same letter, D.\n\nBut then, \"dice\" has an I and \"dolphin\" has an O.\n\nI comes before O, so \"dice\" comes before \"dolphin\".",
            "id": "1515060221449805829",
            "conversation_id": "1515060216232132609"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1515060183155810313"
                ]
            },
            "conversation_id": "1515060216232132609",
            "edit_history_tweet_ids": [
                "1515060219549790210"
            ],
            "text": "That's why I like looking at `str1 &lt; str2` and reading:\n\n\u201cDoes `str1` come **before** `str2` in the dictionary?\u201d\n\nAnd I look at `str1 &gt; str2` and I read:\n\n\u201cDoes `str1` come **after** `str2` in the dictionary?\"\n\nWith this in mind, what are the results of the comparisons below? https://t.co/7uxL3a1zme",
            "id": "1515060219549790210"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQaTNZ5XIAktqfu.png",
                    "media_key": "3_1515060183155810313",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1515060216232132609",
            "id": "1515060218073423876",
            "text": "Have you ever seen a dictionary? The book kind?\n\nThat book with thousands of words and their meanings.\n\nHow are words ordered in there?\n\nIn alphabetical order, right?\n\nFirst, we have all the words starting with A.\n\nThen, all the words starting with B.\n\nAnd so on...",
            "edit_history_tweet_ids": [
                "1515060218073423876"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1515060216232132609",
            "id": "1515060216232132609",
            "text": "How are strings ordered in Python \ud83d\udc0d?\n\nHow do the operators &lt;, &lt;=, &gt;=, and &gt;, work for strings?\n\nYou can find a couple of examples below.\n\nCan you tell what the outputs will be? https://t.co/4WV533JMsi",
            "attachments": {
                "media_keys": [
                    "3_1515060172607180807"
                ]
            },
            "edit_history_tweet_ids": [
                "1515060216232132609"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQaTMymX0AcjtcO.jpg",
                    "media_key": "3_1515060172607180807",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1514971147368120330",
            "conversation_id": "1514971147368120330",
            "text": "Mike is sharing his Python 101 book for free for a limited time!\n\nWhat a cool offer!\n\nIf you pair Mike's book with my Pydon'ts book (link in my profile) here is what will happen to your Python skills:\n\n\ud83d\ude80\ud83d\ude80\ud83d\ude80\n\nThey will take off!\n\nThere is NO excuse for you to not learn Python \ud83d\udc0d https://t.co/mFoxR2ATP9",
            "edit_history_tweet_ids": [
                "1514971147368120330"
            ]
        }
    },
    {
        "data": {
            "id": "1514878960521338881",
            "conversation_id": "1514878960521338881",
            "text": "Day 20/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nList comprehensions can include filters.\n\nThese filters let you only use the values that you want.\n\nHere is a diagram comparing the loop + if + append to a list comprehension \ud83d\udc47 https://t.co/ckAybn8lis",
            "attachments": {
                "media_keys": [
                    "3_1514878957732118536"
                ]
            },
            "edit_history_tweet_ids": [
                "1514878960521338881"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514878957732118536",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQXuYslWQAg2dm9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514632584030048269",
            "edit_history_tweet_ids": [
                "1514632584030048269"
            ],
            "id": "1514632584030048269",
            "text": "I need your help.\n\nI have a Discord server with 500+ people interested in (Python) programming.\n\nHow do I turn that into a **community**?\n\nHow do I get people to talk, help each other, ask questions..?\n\nRight now, it's just... Silent \ud83e\udd23"
        }
    },
    {
        "data": {
            "id": "1514516598043914240",
            "conversation_id": "1514516598043914240",
            "text": "Day 19/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the two snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/qr6V2cnLgO",
            "attachments": {
                "media_keys": [
                    "3_1514516585335115781",
                    "3_1514516595997085701"
                ]
            },
            "edit_history_tweet_ids": [
                "1514516598043914240"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514516585335115781",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSkz2NWUAUPbGd.jpg"
                },
                {
                    "media_key": "3_1514516595997085701",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSk0d7XEAUCupS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1514154210375487493"
            ],
            "id": "1514154210375487493",
            "text": "Day 18/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the two snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/S68ihTi3O6",
            "conversation_id": "1514154210375487493",
            "attachments": {
                "media_keys": [
                    "3_1514154197914169346",
                    "3_1514154208349593602"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQNbOH3XMAI1FYQ.png",
                    "type": "photo",
                    "media_key": "3_1514154197914169346"
                },
                {
                    "url": "https://pbs.twimg.com/media/FQNbOuvXIAIY86Q.jpg",
                    "type": "photo",
                    "media_key": "3_1514154208349593602"
                }
            ]
        }
    },
    {
        "data": {
            "text": "In the last 6 hours, more than 1200 people downloaded my free Python \ud83d\udc0d book.\n\nIt is an honour that YOU are trusting ME to help you master Python!\n\nAlso, huge shout-out to @svpino for helping me reach a massive audience!\n\nLet's go \ud83d\ude80 https://t.co/Lxyohs2m7J",
            "id": "1513950861453627406",
            "edit_history_tweet_ids": [
                "1513950861453627406"
            ],
            "conversation_id": "1513950861453627406"
        }
    },
    {
        "data": {
            "id": "1513791816776228866",
            "conversation_id": "1513791816776228866",
            "text": "Day 17/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the two snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/Q0r2mcgmL4",
            "attachments": {
                "media_keys": [
                    "3_1513791804277202945",
                    "3_1513791814612013059"
                ]
            },
            "edit_history_tweet_ids": [
                "1513791816776228866"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513791804277202945",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQIRoCXXIAEhS8p.png"
                },
                {
                    "media_key": "3_1513791814612013059",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQIRoo3X0AMYct7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "@f But wait, there is even MORE!\n\nMy original snippet of code wasn't like this.\n\nThere was a subtle (but not so subtle!) difference.\n\nHere is the original code: https://t.co/swzha7ysUn\n\nCan you spot the differences?\n\nCan you explain them?\n\nHint: look at the final result.",
            "id": "1513621673698013184",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621673698013184"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621672087203843"
            ],
            "text": "@f Here are some of the things we have seen:\n\n - callable classes\n - custom operators for classes (the `|`)\n - decorators (and classes as decorators)\n - `*args` and `**kwargs`\n - function composition\n - lambdas\n - and more!\n\nFollow me @mathsppblog for more \ud83d\ude09",
            "id": "1513621672087203843",
            "conversation_id": "1513621619373137924"
        }
    },
    {
        "data": {
            "id": "1513621670719852544",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621670719852544"
            ],
            "text": "@f This is a lot to digest!\n\nMy number 1 advice?\n\nWrite the code and play with it.\n\nAdd prints.\n\nTest your understanding.\n\nFor your convenience, this thread is on my site.\n\nThis means you can bookmark the link or go there and copy &amp; paste the code: https://t.co/bF07zerCkC"
        }
    },
    {
        "data": {
            "conversation_id": "1513621619373137924",
            "text": "@f This is the pattern of decorators!\n\nInstead of doing the final assignment by hand, after making the functions go through `F`, I can just write `@F` at the top.\n\nBy writing the `@F`, Python does that assignment for me.",
            "edit_history_tweet_ids": [
                "1513621668974968836"
            ],
            "id": "1513621668974968836"
        }
    },
    {
        "data": {
            "id": "1513621667473408000",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621667473408000"
            ],
            "text": "@f Now, take a look at the pattern that emerges!\n\nI took the functions `add_two` and `divide_3_floor` and tweaked them.\n\nInstead of letting them be vanilla functions, I added some functionality.\n\nI decorated them with some bells and whistles.\n\nI **decorated** them..."
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621616915271684"
                ]
            },
            "conversation_id": "1513621619373137924",
            "id": "1513621665376256002",
            "text": "@f They could've gone through `F` like `str` did:\n\nBecause I only care about the cool version of these functions, I can reuse the same name.\n\n(For `s` and `str` I used two names: `s = F(str)`.) https://t.co/NDV3MR0d9r",
            "edit_history_tweet_ids": [
                "1513621665376256002"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF211CWUAQzyFU.jpg",
                    "media_key": "3_1513621616915271684"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621663262421002"
            ],
            "id": "1513621663262421002",
            "text": "The final piece of the puzzle is the `@F` on top of the definitions of `add_two` and `divide_3_floor`:\n\nBy using the keyword `def` I can create regular Python functions, right?\n\nBut I want these to be cool functions I can combine.\n\nSo, they need to go through `F`.\n\nBut how? https://t.co/E71rbLgynB",
            "conversation_id": "1513621619373137924",
            "attachments": {
                "media_keys": [
                    "3_1513621607260078080"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF21REXwAAYIV2.png",
                    "type": "photo",
                    "media_key": "3_1513621607260078080"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621597806071810"
                ]
            },
            "text": "In the end, we just add the `F` around that so that the lambda can also be combined with other things.\n\nThe lambda, by itself, is a regular lambda.\n\nIf I put it inside an `F`, we get one of these cool things that can be combined with each other: https://t.co/hhrvv0Ps8t",
            "id": "1513621661404250130",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621661404250130"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF20t2XEAIiZal.jpg",
                    "media_key": "3_1513621597806071810"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621659508518921"
            ],
            "attachments": {
                "media_keys": [
                    "3_1513621587160969223"
                ]
            },
            "text": "We could define a regular function with `def` and whatnot, but I opted for something leaner.\n\nBy using a `lambda`, I can write a function that wraps `self` and `other`: https://t.co/YJmkuXgZ7U",
            "id": "1513621659508518921",
            "conversation_id": "1513621619373137924"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF20GMXsAc0X3G.jpg",
                    "media_key": "3_1513621587160969223"
                }
            ]
        }
    },
    {
        "data": {
            "text": "What are we missing?\n\nNot too much, now!\n\nRemember how instances of `F` are created?\n\nWe need to feed `F` with a function.\n\nSo, in order to combine `F(int)` with `F(bin)`, which are `self` and `other`, respectively, we need to wrap them in a function.",
            "id": "1513621658044612610",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621658044612610"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621576960389122"
                ]
            },
            "id": "1513621656320847876",
            "edit_history_tweet_ids": [
                "1513621656320847876"
            ],
            "text": "And we want the whole thing to be an `F`.\n\nWhy?\n\nSo that we can later combine that _again_ if we want to!\n\nThat explains part of what is going on: https://t.co/SINPQWq4LW",
            "conversation_id": "1513621619373137924"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621576960389122",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2zgMXMAIl8th.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621566596202505"
                ]
            },
            "text": "Inside `__or__`, after writing `F(int) | F(bin)`, these are the arguments:\n\n - `self` is `F(int)`; and\n - `other` is `F(bin)`.\n\nWe want the combination to be an `F` that calls `bin` after calling `int`:\n\nWe want the function inside `other` after the function inside `self`. https://t.co/TDWe5TlTZa",
            "id": "1513621654664097804",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621654664097804"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2y5lWQAkqTRc.jpg",
                    "media_key": "3_1513621566596202505"
                }
            ]
        }
    },
    {
        "data": {
            "text": "When we write `F(int) | F(bin)`, we want to combine the `F(int)` with the `F(bin)`.\n\nAlso, when we write `F(int) | F(bin)`, the dunder `__or__` is called.\n\nWhen that happens, we go inside the `__or__` that looks like this:\n\nWhat's what? https://t.co/LSVaz2ebwu",
            "attachments": {
                "media_keys": [
                    "3_1513621556160831498"
                ]
            },
            "edit_history_tweet_ids": [
                "1513621652839571457"
            ],
            "id": "1513621652839571457",
            "conversation_id": "1513621619373137924"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621556160831498",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2yStXIAoRINE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621546396536835"
                ]
            },
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621651090518027"
            ],
            "text": "Remember that `F`s are supposed to look like functions.\n\nWhen we combine two `F`s, we want to create a new one that represents the two `F`s in succession.\n\nLet us use the built-ins `int` and `bin` to see what happens when we do `F(int) | F(bin)`. https://t.co/YXz3Stjdkx",
            "id": "1513621651090518027"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2xuVX0AMD7xH.jpg",
                    "media_key": "3_1513621546396536835",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1513621649702146056",
            "edit_history_tweet_ids": [
                "1513621649702146056"
            ],
            "conversation_id": "1513621619373137924",
            "text": "By implementing `__or__`, we hijack the operator `|` and we get to use it for whatever we want!\n\nIn this case, we want `|` to be able to combine instances of `F` with each other.\n\nHow do we do that?\n\n\u201cSimple\u201d:"
        }
    },
    {
        "data": {
            "text": "Now we know what is going on with `__call__`...\n\nBut what's up with `__or__`..?\n\nThe dunder method `__or__` is what is called when we use `|` next to instances of `F`.\n\nBut what gives?",
            "id": "1513621648313884675",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621648313884675"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621646925512710"
            ],
            "text": "One good thing you can do is modify `__call__` to print `args` and `kwargs` before the `return`.\n\nThat will help you visualise things!\n\nIt's also something I do very often:\n\nI tweak the code I'm studying to see what is really going on.",
            "id": "1513621646925512710",
            "conversation_id": "1513621619373137924"
        }
    },
    {
        "data": {
            "text": "By using `*args` and `**kwargs` again, we are trying to unpack the arguments we got so far.\n\nBy unpacking those arguments, we pass them down to `self.f`, which is the original function:\n\nCan you trace the journey that the `15` makes? https://t.co/DbIHAQw9Cg",
            "attachments": {
                "media_keys": [
                    "3_1513621535583617037"
                ]
            },
            "id": "1513621645109383172",
            "edit_history_tweet_ids": [
                "1513621645109383172"
            ],
            "conversation_id": "1513621619373137924"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621535583617037",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2xGDXwA0ODyE.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Now we can understand the signature of `__call__`:\n\n`def __call__(self, *args, **kwargs)`\n\nBut there is more!\n\nWhat about the body of the definition?\n\nWhy do we use `*args` and `**kwargs` again..? https://t.co/FZxA7HPrs9",
            "attachments": {
                "media_keys": [
                    "3_1513621527341772805"
                ]
            },
            "id": "1513621643394007050",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621643394007050"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621527341772805",
                    "url": "https://pbs.twimg.com/media/FQF2wnWXMAUl6rt.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "This cool behaviour comes from using `*` and `**` on the left of the parameters.\n\nThe words `args` and `kwargs` are just the common choice in Python!\n\nWe can pick other names: https://t.co/v85OuWm93S",
            "attachments": {
                "media_keys": [
                    "3_1513621517615173638"
                ]
            },
            "edit_history_tweet_ids": [
                "1513621641519058945"
            ],
            "id": "1513621641519058945",
            "conversation_id": "1513621619373137924"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621517615173638",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2wDHXEAYwqQp.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621639669465089"
            ],
            "id": "1513621639669465089",
            "text": "Similarly, by using `**kwargs`, a function can receive however many **keyword** arguments:\n\nOh, by the way, here is an important remark: https://t.co/MylhBTBCxc",
            "conversation_id": "1513621619373137924",
            "attachments": {
                "media_keys": [
                    "3_1513621507179696136"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2vcPWUAgfxEg.jpg",
                    "type": "photo",
                    "media_key": "3_1513621507179696136"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621619373137924",
            "text": "So, we have to plan for _any_ and _all_ cases!\n\nHow do we do that?\n\nWith `*args` and `**kwargs`.\n\nBy using `*args`, a function can receive however many **positional** arguments: https://t.co/hnT7pzZimD",
            "edit_history_tweet_ids": [
                "1513621637698146306"
            ],
            "id": "1513621637698146306",
            "attachments": {
                "media_keys": [
                    "3_1513621497310593024"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1513621497310593024",
                    "url": "https://pbs.twimg.com/media/FQF2u3eXwAAM_bi.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621636309786629"
            ],
            "text": "But the original functions might be **arbitrary** functions, right?\n\nThe original function can be a function with 0 or 3 arguments.\n\nIt can be a function with an argument called `this_is_just_an_argument`.\n\nWe can't _guess_ how many/what arguments we'll have...",
            "conversation_id": "1513621619373137924",
            "id": "1513621636309786629"
        }
    },
    {
        "data": {
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621634627817475"
            ],
            "id": "1513621634627817475",
            "attachments": {
                "media_keys": [
                    "3_1513621487047131136"
                ]
            },
            "text": "So, what's the behaviour of `s` when we call it with `s(...)`?\n\nTo understand that, we need to look at `__call__`.\n\nFirst, let us understand the signature:\n\nWhat do the `*args*` and `**kwargs` do?\n\nThink with me:\n\nInstances of `F` must act like the original functions, right? https://t.co/8R4n7X03E5"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621487047131136",
                    "url": "https://pbs.twimg.com/media/FQF2uRPXwAA3RHF.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621477102342149"
                ]
            },
            "text": "In other words, after I write `s = F(str)`, I need to be able to write `s(...)`.\n\nI need to be able to call `s` (hence, callable).\n\nThat is why I needed to implement the dunder method `__call__`.\n\nThe dunder method `__call__` is responsible for making instances of `F` callable. https://t.co/A0bpMzhqBK",
            "id": "1513621632950091781",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621632950091781"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2tsMWUAUvMVD.jpg",
                    "media_key": "3_1513621477102342149"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621619373137924",
            "id": "1513621631561834507",
            "text": "Then, the instance of `F` just stores that function in `self.f`.\n\nWhy?\n\nFor later use \ud83d\ude43\n\nThe idea is that instances of `F` **behave** like the functions passed in originally.\n\nSo, if an instance of `F` must behave like a function, it must be callable.\n\nCall-huh?",
            "edit_history_tweet_ids": [
                "1513621631561834507"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621467614826506"
                ]
            },
            "conversation_id": "1513621619373137924",
            "id": "1513621629506670600",
            "text": "The class `F` only expects an argument `f`.\n\nI used a lowercase `f`, not because I wanted to be mysterious, but because `f` is mathematician-speak for a function.\n\nSo, to create an instance of `F`, I just feed it a function.\n\nSo, `s = F(str)` creates an `F` out of `str`. https://t.co/LMu9mq1HFf",
            "edit_history_tweet_ids": [
                "1513621629506670600"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2tI2WUAo2HVm.png",
                    "media_key": "3_1513621467614826506"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621627627614229"
            ],
            "id": "1513621627627614229",
            "text": "Did you notice how I defined `s`?\n\nI created `s` by taking the built-in `str` and putting it through `F`.\n\nBut what IS `F`?\n\nIt's just a class I created, right?\n\nBut it's a very special class \ud83d\ude09 https://t.co/VMZdQcNYgl",
            "conversation_id": "1513621619373137924",
            "attachments": {
                "media_keys": [
                    "3_1513621458290941955"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2smHXIAM7feL.png",
                    "type": "photo",
                    "media_key": "3_1513621458290941955"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Formally speaking, the operator pipe `|` is being used to do function composition.\n\nIn other words, by using `|` I have another way of composing functions in a convenient way.\n\nBut I lied \ud83d\ude05 `add_two`, `divide_3_floor`, and `s`, aren't \u201cfunctions\u201d per se...",
            "id": "1513621626268618763",
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621626268618763"
            ]
        }
    },
    {
        "data": {
            "text": "In my code, I wrote `f = add_two | divide_3_floor | s`.\n\nSo, when I write `f(7)`, it actually means something else: https://t.co/6b67OrE6UC",
            "id": "1513621624397963266",
            "conversation_id": "1513621619373137924",
            "attachments": {
                "media_keys": [
                    "3_1513621448287526913"
                ]
            },
            "edit_history_tweet_ids": [
                "1513621624397963266"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2sA2XIAEQg6y.jpg",
                    "media_key": "3_1513621448287526913",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621623026376709"
            ],
            "id": "1513621623026376709",
            "conversation_id": "1513621619373137924",
            "text": "The `|` is doing some \u201cmagic\u201d I asked it to do, this is not default behaviour in Python.\n\n`f = g | h` means that the function `f` corresponds to calling `h` after calling `g`.\n\nSo, `f(x)` actually means `h(g(x))`."
        }
    },
    {
        "data": {
            "conversation_id": "1513621619373137924",
            "edit_history_tweet_ids": [
                "1513621621327765511"
            ],
            "id": "1513621621327765511",
            "attachments": {
                "media_keys": [
                    "3_1513621437122285579"
                ]
            },
            "text": "Let us start... from the end!\n\nThe assignment to `f` takes 3 functions:\n\n - `add_two`\n - `divide_3_floor`\n - `s`\n\nand then combines them.\n\nThe `|` is in charge of doing this combination, but what combination is this? https://t.co/nVCzkxclp4"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621437122285579",
                    "url": "https://pbs.twimg.com/media/FQF2rXQXEAs6tnW.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621619373137924"
            ],
            "id": "1513621619373137924",
            "text": "Here is some Python \ud83d\udc0d code using\n\n - decorators\n - callable classes\n - custom operators\n - \u201cfunctional\u201d function composition\n - arbitrary args and kwargs\n\nHere is a breakdown of everything that is going on \ud83d\udc47 https://t.co/s0gHVvl9wD",
            "conversation_id": "1513621619373137924",
            "attachments": {
                "media_keys": [
                    "3_1513621426154135558"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2quZWYAYhl_2.jpg",
                    "type": "photo",
                    "media_key": "3_1513621426154135558"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621437772451849"
            ],
            "text": "@f But wait, there is even MORE!\n\nMy original snippet of code wasn't like this.\n\nThere was a subtle (but not so subtle!) difference.\n\nHere is the original code: https://t.co/swzha7xV4P\n\nCan you spot the differences?\n\nCan you explain them?\n\nHint: look at the final result.",
            "conversation_id": "1513621382818680840",
            "id": "1513621437772451849"
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "text": "@f Here are some of the things we have seen:\n\n - callable classes\n - custom operators for classes (the `|`)\n - decorators (and classes as decorators)\n - `*args` and `**kwargs`\n - function composition\n - lambdas\n - and more!\n\nFollow me @mathsppblog for more \ud83d\ude09",
            "edit_history_tweet_ids": [
                "1513621436325376011"
            ],
            "id": "1513621436325376011"
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "id": "1513621434907639813",
            "text": "@f This is a lot to digest!\n\nMy number 1 advice?\n\nWrite the code and play with it.\n\nAdd prints.\n\nTest your understanding.\n\nFor your convenience, this thread is on my site.\n\nThis means you can bookmark the link or go there and copy &amp; paste the code: https://t.co/bF07zerCkC",
            "edit_history_tweet_ids": [
                "1513621434907639813"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "text": "@f This is the pattern of decorators!\n\nInstead of doing the final assignment by hand, after making the functions go through `F`, I can just write `@F` at the top.\n\nBy writing the `@F`, Python does that assignment for me.",
            "edit_history_tweet_ids": [
                "1513621433456414720"
            ],
            "id": "1513621433456414720"
        }
    },
    {
        "data": {
            "text": "@f Now, take a look at the pattern that emerges!\n\nI took the functions `add_two` and `divide_3_floor` and tweaked them.\n\nInstead of letting them be vanilla functions, I added some functionality.\n\nI decorated them with some bells and whistles.\n\nI **decorated** them...",
            "id": "1513621431908810757",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621431908810757"
            ]
        }
    },
    {
        "data": {
            "id": "1513621430059118598",
            "edit_history_tweet_ids": [
                "1513621430059118598"
            ],
            "attachments": {
                "media_keys": [
                    "3_1513621380557852674"
                ]
            },
            "conversation_id": "1513621382818680840",
            "text": "@f They could've gone through `F` like `str` did:\n\nBecause I only care about the cool version of these functions, I can reuse the same name.\n\n(For `s` and `str` I used two names: `s = F(str)`.) https://t.co/2GCVHkp4TC"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621380557852674",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2oEiWUAIccqJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621427689250828"
            ],
            "id": "1513621427689250828",
            "attachments": {
                "media_keys": [
                    "3_1513621370084675586"
                ]
            },
            "text": "The final piece of the puzzle is the `@F` on top of the definitions of `add_two` and `divide_3_floor`:\n\nBy using the keyword `def` I can create regular Python functions, right?\n\nBut I want these to be cool functions I can combine.\n\nSo, they need to go through `F`.\n\nBut how? https://t.co/TIyGKNdT8c"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621370084675586",
                    "url": "https://pbs.twimg.com/media/FQF2ndhWUAIsUcY.png",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621425797713926"
            ],
            "id": "1513621425797713926",
            "attachments": {
                "media_keys": [
                    "3_1513621360542687238"
                ]
            },
            "text": "In the end, we just add the `F` around that so that the lambda can also be combined with other things.\n\nThe lambda, by itself, is a regular lambda.\n\nIf I put it inside an `F`, we get one of these cool things that can be combined with each other: https://t.co/1InWI5dgvD"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621360542687238",
                    "url": "https://pbs.twimg.com/media/FQF2m5-XIAYLnWS.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "We could define a regular function with `def` and whatnot, but I opted for something leaner.\n\nBy using a `lambda`, I can write a function that wraps `self` and `other`: https://t.co/kdUVcJoyui",
            "attachments": {
                "media_keys": [
                    "3_1513621350354755588"
                ]
            },
            "edit_history_tweet_ids": [
                "1513621423826350086"
            ],
            "id": "1513621423826350086",
            "conversation_id": "1513621382818680840"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621350354755588",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2mUBXoAQIuqE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "What are we missing?\n\nNot too much, now!\n\nRemember how instances of `F` are created?\n\nWe need to feed `F` with a function.\n\nSo, in order to combine `F(int)` with `F(bin)`, which are `self` and `other`, respectively, we need to wrap them in a function.",
            "id": "1513621422442258442",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621422442258442"
            ]
        }
    },
    {
        "data": {
            "text": "And we want the whole thing to be an `F`.\n\nWhy?\n\nSo that we can later combine that _again_ if we want to!\n\nThat explains part of what is going on: https://t.co/P2mFg5oWx4",
            "attachments": {
                "media_keys": [
                    "3_1513621338635874306"
                ]
            },
            "id": "1513621420768649224",
            "edit_history_tweet_ids": [
                "1513621420768649224"
            ],
            "conversation_id": "1513621382818680840"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621338635874306",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2loXXsAItJ3O.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621328548487179"
                ]
            },
            "text": "Inside `__or__`, after writing `F(int) | F(bin)`, these are the arguments:\n\n - `self` is `F(int)`; and\n - `other` is `F(bin)`.\n\nWe want the combination to be an `F` that calls `bin` after calling `int`:\n\nWe want the function inside `other` after the function inside `self`. https://t.co/K52SJB7Yj4",
            "id": "1513621419007041543",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621419007041543"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2lCyWYAsQjLT.jpg",
                    "media_key": "3_1513621328548487179"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621416742166537"
            ],
            "id": "1513621416742166537",
            "attachments": {
                "media_keys": [
                    "3_1513621319522344965"
                ]
            },
            "text": "When we write `F(int) | F(bin)`, we want to combine the `F(int)` with the `F(bin)`.\n\nAlso, when we write `F(int) | F(bin)`, the dunder `__or__` is called.\n\nWhen that happens, we go inside the `__or__` that looks like this:\n\nWhat's what? https://t.co/OHGhARXtvu"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621319522344965",
                    "url": "https://pbs.twimg.com/media/FQF2khKWYAUxqLW.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621414863118344"
            ],
            "attachments": {
                "media_keys": [
                    "3_1513621308826861575"
                ]
            },
            "text": "Remember that `F`s are supposed to look like functions.\n\nWhen we combine two `F`s, we want to create a new one that represents the two `F`s in succession.\n\nLet us use the built-ins `int` and `bin` to see what happens when we do `F(int) | F(bin)`. https://t.co/V7MwHwQ6e2",
            "id": "1513621414863118344",
            "conversation_id": "1513621382818680840"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2j5UWQAcx1-u.jpg",
                    "media_key": "3_1513621308826861575"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1513621413319618566",
            "edit_history_tweet_ids": [
                "1513621413319618566"
            ],
            "text": "By implementing `__or__`, we hijack the operator `|` and we get to use it for whatever we want!\n\nIn this case, we want `|` to be able to combine instances of `F` with each other.\n\nHow do we do that?\n\n\u201cSimple\u201d:",
            "conversation_id": "1513621382818680840"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621411969081348"
            ],
            "id": "1513621411969081348",
            "conversation_id": "1513621382818680840",
            "text": "Now we know what is going on with `__call__`...\n\nBut what's up with `__or__`..?\n\nThe dunder method `__or__` is what is called when we use `|` next to instances of `F`.\n\nBut what gives?"
        }
    },
    {
        "data": {
            "id": "1513621410555600897",
            "conversation_id": "1513621382818680840",
            "text": "One good thing you can do is modify `__call__` to print `args` and `kwargs` before the `return`.\n\nThat will help you visualise things!\n\nIt's also something I do very often:\n\nI tweak the code I'm studying to see what is really going on.",
            "edit_history_tweet_ids": [
                "1513621410555600897"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621294973083660"
                ]
            },
            "text": "By using `*args` and `**kwargs` again, we are trying to unpack the arguments we got so far.\n\nBy unpacking those arguments, we pass them down to `self.f`, which is the original function:\n\nCan you trace the journey that the `15` makes? https://t.co/8BEFmQFgCI",
            "id": "1513621408613609474",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621408613609474"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2jFtWYAwnQY1.png",
                    "media_key": "3_1513621294973083660"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621406881300488"
            ],
            "id": "1513621406881300488",
            "attachments": {
                "media_keys": [
                    "3_1513621285447913487"
                ]
            },
            "text": "Now we can understand the signature of `__call__`:\n\n`def __call__(self, *args, **kwargs)`\n\nBut there is more!\n\nWhat about the body of the definition?\n\nWhy do we use `*args` and `**kwargs` again..? https://t.co/OPdprurWtV"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621285447913487",
                    "url": "https://pbs.twimg.com/media/FQF2iiOX0A8C3LB.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621275851296772"
                ]
            },
            "text": "This cool behaviour comes from using `*` and `**` on the left of the parameters.\n\nThe words `args` and `kwargs` are just the common choice in Python!\n\nWe can pick other names: https://t.co/nUTseJxDn9",
            "id": "1513621405006540803",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621405006540803"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2h-eXEAQmPaM.jpg",
                    "media_key": "3_1513621275851296772"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621265466249217"
                ]
            },
            "id": "1513621403253321740",
            "edit_history_tweet_ids": [
                "1513621403253321740"
            ],
            "text": "Similarly, by using `**kwargs`, a function can receive however many **keyword** arguments:\n\nOh, by the way, here is an important remark: https://t.co/kk6XUT2Po1",
            "conversation_id": "1513621382818680840"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621265466249217",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQF2hXyX0AEbLKh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "So, we have to plan for _any_ and _all_ cases!\n\nHow do we do that?\n\nWith `*args` and `**kwargs`.\n\nBy using `*args`, a function can receive however many **positional** arguments: https://t.co/4beTmgIAZw",
            "attachments": {
                "media_keys": [
                    "3_1513621255961853961"
                ]
            },
            "id": "1513621401269329922",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621401269329922"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621255961853961",
                    "url": "https://pbs.twimg.com/media/FQF2g0YWQAk_uZI.png",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621399839068170"
            ],
            "text": "But the original functions might be **arbitrary** functions, right?\n\nThe original function can be a function with 0 or 3 arguments.\n\nIt can be a function with an argument called `this_is_just_an_argument`.\n\nWe can't _guess_ how many/what arguments we'll have...",
            "conversation_id": "1513621382818680840",
            "id": "1513621399839068170"
        }
    },
    {
        "data": {
            "text": "So, what's the behaviour of `s` when we call it with `s(...)`?\n\nTo understand that, we need to look at `__call__`.\n\nFirst, let us understand the signature:\n\nWhat do the `*args*` and `**kwargs` do?\n\nThink with me:\n\nInstances of `F` must act like the original functions, right? https://t.co/73VUfEBXVZ",
            "attachments": {
                "media_keys": [
                    "3_1513621245547499521"
                ]
            },
            "id": "1513621397993664522",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621397993664522"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621245547499521",
                    "url": "https://pbs.twimg.com/media/FQF2gNlX0AEJ9fc.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621396282347521"
            ],
            "attachments": {
                "media_keys": [
                    "3_1513621234042515465"
                ]
            },
            "text": "In other words, after I write `s = F(str)`, I need to be able to write `s(...)`.\n\nI need to be able to call `s` (hence, callable).\n\nThat is why I needed to implement the dunder method `__call__`.\n\nThe dunder method `__call__` is responsible for making instances of `F` callable. https://t.co/4S48XKqqpy",
            "conversation_id": "1513621382818680840",
            "id": "1513621396282347521"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1513621234042515465",
                    "url": "https://pbs.twimg.com/media/FQF2fiuXsAkxxvh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1513621394780823556",
            "conversation_id": "1513621382818680840",
            "text": "Then, the instance of `F` just stores that function in `self.f`.\n\nWhy?\n\nFor later use \ud83d\ude43\n\nThe idea is that instances of `F` **behave** like the functions passed in originally.\n\nSo, if an instance of `F` must behave like a function, it must be callable.\n\nCall-huh?",
            "edit_history_tweet_ids": [
                "1513621394780823556"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "id": "1513621392712945675",
            "text": "The class `F` only expects an argument `f`.\n\nI used a lowercase `f`, not because I wanted to be mysterious, but because `f` is mathematician-speak for a function.\n\nSo, to create an instance of `F`, I just feed it a function.\n\nSo, `s = F(str)` creates an `F` out of `str`. https://t.co/AjZ5Ssj0Np",
            "attachments": {
                "media_keys": [
                    "3_1513621224336855041"
                ]
            },
            "edit_history_tweet_ids": [
                "1513621392712945675"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2e-kXEAEsXCm.png",
                    "media_key": "3_1513621224336855041",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Did you notice how I defined `s`?\n\nI created `s` by taking the built-in `str` and putting it through `F`.\n\nBut what IS `F`?\n\nIt's just a class I created, right?\n\nBut it's a very special class \ud83d\ude09 https://t.co/8FdYRRvhuw",
            "attachments": {
                "media_keys": [
                    "3_1513621213679132682"
                ]
            },
            "id": "1513621390871646213",
            "conversation_id": "1513621382818680840",
            "edit_history_tweet_ids": [
                "1513621390871646213"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513621213679132682",
                    "url": "https://pbs.twimg.com/media/FQF2eW3XIAoHcYG.png",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621389500108800"
            ],
            "conversation_id": "1513621382818680840",
            "id": "1513621389500108800",
            "text": "Formally speaking, the operator pipe `|` is being used to do function composition.\n\nIn other words, by using `|` I have another way of composing functions in a convenient way.\n\nBut I lied \ud83d\ude05 `add_two`, `divide_3_floor`, and `s`, aren't \u201cfunctions\u201d per se..."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513621387847639043"
            ],
            "attachments": {
                "media_keys": [
                    "3_1513621200647434244"
                ]
            },
            "text": "In my code, I wrote `f = add_two | divide_3_floor | s`.\n\nSo, when I write `f(7)`, it actually means something else: https://t.co/VWiAL9TXs7",
            "conversation_id": "1513621382818680840",
            "id": "1513621387847639043"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1513621200647434244",
                    "url": "https://pbs.twimg.com/media/FQF2dmUXMAQmFRX.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "id": "1513621386484502531",
            "text": "The `|` is doing some \u201cmagic\u201d I asked it to do, this is not default behaviour in Python.\n\n`f = g | h` means that the function `f` corresponds to calling `h` after calling `g`.\n\nSo, `f(x)` actually means `h(g(x))`.",
            "edit_history_tweet_ids": [
                "1513621386484502531"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1513621190505639940"
                ]
            },
            "edit_history_tweet_ids": [
                "1513621384756436995"
            ],
            "conversation_id": "1513621382818680840",
            "id": "1513621384756436995",
            "text": "Let us start... from the end!\n\nThe assignment to `f` takes 3 functions:\n\n - `add_two`\n - `divide_3_floor`\n - `s`\n\nand then combines them.\n\nThe `|` is in charge of doing this combination, but what combination is this? https://t.co/N6ZsylLNBM"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2dAiXsAQ7SCf.jpg",
                    "type": "photo",
                    "media_key": "3_1513621190505639940"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513621382818680840",
            "id": "1513621382818680840",
            "text": "Here is some Python \ud83d\udc0d code using\n\n - decorators\n - callable classes\n - custom operators\n - \u201cfunctional\u201d function composition\n - arbitrary args and kwargs\n\nHere is a breakdown of everything that is going on \ud83d\udc47 https://t.co/SA9GSaLPJO",
            "attachments": {
                "media_keys": [
                    "3_1513621178488967171"
                ]
            },
            "edit_history_tweet_ids": [
                "1513621382818680840"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQF2cTxX0AMoB5l.jpg",
                    "media_key": "3_1513621178488967171",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513429425894928386"
            ],
            "attachments": {
                "media_keys": [
                    "3_1513429422413594628"
                ]
            },
            "id": "1513429425894928386",
            "conversation_id": "1513429424582107141",
            "text": "And that's the data transformation!\n\nSuppose you want to square a bunch of numbers.\n\nIf you use a `for` loop with `.append` calls, the squaring is going to be hidden in the middle of all that.\n\nIf you use a list comprehension, the squaring is very visible! https://t.co/5y7HhkfbEl"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FQDICouWQAQ8W84.jpg",
                    "media_key": "3_1513429422413594628",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1513429424582107141",
            "edit_history_tweet_ids": [
                "1513429424582107141"
            ],
            "id": "1513429424582107141",
            "text": "Day 16/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nWhy would someone bother with list comprehensions?\n\nThe main argument in favour of list comprehensions has to do with what they highlight..."
        }
    },
    {
        "data": {
            "text": "Day 15/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/EtAa2u1GSW",
            "id": "1513067029703671813",
            "conversation_id": "1513067029703671813",
            "attachments": {
                "media_keys": [
                    "3_1513067027195432962"
                ]
            },
            "edit_history_tweet_ids": [
                "1513067029703671813"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FP9-cdVXEAIDBh6.jpg",
                    "media_key": "3_1513067027195432962",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1512704639371776004",
            "id": "1512704639371776004",
            "text": "Day 14/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/Mas4uS9O04",
            "attachments": {
                "media_keys": [
                    "3_1512704637014618115"
                ]
            },
            "edit_history_tweet_ids": [
                "1512704639371776004"
            ]
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FP402ktXsAMOpxl.jpg",
                    "media_key": "3_1512704637014618115",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1512495768300572674",
            "conversation_id": "1512495768300572674",
            "edit_history_tweet_ids": [
                "1512495768300572674"
            ],
            "text": "Here is some Python \ud83d\udc0d code with a bunch of interesting things going on:\n\n\ud83d\udccc decorators\n\ud83d\udccc callable classes\n\ud83d\udccc custom operators\n\ud83d\udccc \u201cfunctional\u201d function composition\n\ud83d\udccc arbitrary args and kwargs\n\nPick this code apart and study it!\n\nI'll explain it in a thread later \ud83d\ude09 https://t.co/pUhKWslfLD",
            "attachments": {
                "media_keys": [
                    "3_1512495764685168648"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512495764685168648",
                    "url": "https://pbs.twimg.com/media/FP124mpXoAgs1Of.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1512342254060457984",
            "edit_history_tweet_ids": [
                "1512342254060457984"
            ],
            "id": "1512342254060457984",
            "attachments": {
                "media_keys": [
                    "3_1512342251258712065"
                ]
            },
            "text": "Day 13/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/1HBQuGDgxT"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512342251258712065",
                    "url": "https://pbs.twimg.com/media/FPzrQ8kXEAEDxt4.jpg",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "text": "You can get it yourself (for free, duh!).\n\nThe link is in my Twitter profile.\n\nJust click on my name @mathsppblog or on my face and it's right there.\n\nWhen the checkout page opens, just type \"0\" to pay nothing for the book.\n\nYou should be able to download it right away \ud83d\ude03",
            "edit_history_tweet_ids": [
                "1512148713577275401"
            ],
            "id": "1512148713577275401",
            "conversation_id": "1512148712155500552"
        }
    },
    {
        "data": {
            "id": "1512148712155500552",
            "edit_history_tweet_ids": [
                "1512148712155500552"
            ],
            "conversation_id": "1512148712155500552",
            "text": "I started learning Python \ud83d\udc0d almost 10 years ago.\n\nWhen I started out, I _only_ used free resources.\n\nAfter all, I was just a kid and didn't even have money!\n\nThose generous people taught me almost everything I know!\n\nI want to give back, and that's why MY Python book is free."
        }
    },
    {
        "data": {
            "conversation_id": "1512087364406951937",
            "edit_history_tweet_ids": [
                "1512087385227464709"
            ],
            "id": "1512087385227464709",
            "text": "Sorry for the long ramble!\n\nHere are three key takeaways:\n\n - lists in `for` loops _can_ be modified but _shouldn't_;\n - Boolean values can be used as integers; and\n - `True` corresponds to `1` and `False` corresponds to `0`.\n\nFollow me @mathsppblog for more hilarious code bugs!"
        }
    },
    {
        "data": {
            "text": "This particular situation arose because I made a mistake when writing my program.\n\nAnd also because I didn't triple-check my code.\n\nBut one key thing we learn from this is that we shouldn't append to lists that are being used in `for` loops.\n\nThat's typically a bad idea!",
            "id": "1512087383562354693",
            "conversation_id": "1512087364406951937",
            "edit_history_tweet_ids": [
                "1512087383562354693"
            ]
        }
    },
    {
        "data": {
            "text": "`True &gt; 10` is `False`, and so is `False &gt; 10`.\n\nThus, after 5 more iterations, `numbers` becomes:\n\n`[42, 73, 0, 16, 10,\n True, True, False, True, False,\n False, False, False, False, False]`\n\nSo, we reach a point where we keep appending `False` to the list, over and over again.",
            "edit_history_tweet_ids": [
                "1512087381934968845"
            ],
            "id": "1512087381934968845",
            "conversation_id": "1512087364406951937"
        }
    },
    {
        "data": {
            "text": "After the first 5 iterations, `numbers` becomes this:\n\n`[42, 73, 0, 16, 10, True, True, False, True, False]`\n\nThen, `idx` goes from 5 to 9:\n\nWe take those 5 Boolean values and compare them with 10:",
            "id": "1512087380244643841",
            "conversation_id": "1512087364406951937",
            "edit_history_tweet_ids": [
                "1512087380244643841"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1512087364406951937",
            "edit_history_tweet_ids": [
                "1512087378566864897"
            ],
            "id": "1512087378566864897",
            "text": "In other words, when need be, we can\n\n - look at `False` as if it were `0`; and\n - look at `True` as if it were `1`.\n\nThus, when `num` is `True` and we do the comparison `num &gt; 10`, Python does the comparison `1 &gt; 10`.\n\nThe result, we know, is `False`."
        }
    },
    {
        "data": {
            "conversation_id": "1512087364406951937",
            "id": "1512087376876564487",
            "text": "Therefore, later down the road, when `idx` becomes `5`, `num` becomes `True`.\n\nSo, if `num` is `True`, why doesn't `num &gt; 10` raise an error?\n\nBecause Boolean values in Python \ud83d\udc0d (that is, `True` and `False`) can also be seen as integers!",
            "edit_history_tweet_ids": [
                "1512087376876564487"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1512087375245045760"
            ],
            "conversation_id": "1512087364406951937",
            "id": "1512087375245045760",
            "text": "Then, we add the results of those comparisons to the same list!\n\nIn the first iteration, we have:\n\n - idx = 0\n - num = 42\n - num &gt; 10 = True\n\nSo, we append `True` to the list.\n\nThen, the list `numbers` becomes `[42, 73, 0, 16, 10, True]`."
        }
    },
    {
        "data": {
            "id": "1512087373617655809",
            "edit_history_tweet_ids": [
                "1512087373617655809"
            ],
            "conversation_id": "1512087364406951937",
            "text": "It may look weird, but it makes sense:\n\nThe loop adds Booleans to the list because the expression inside `numbers.append(...)` is a comparison: `num &gt; 10`.\n\nSo, for the first 5 iterations, we go over the original numbers in the list...\n\nAnd check which ones are greater than 10."
        }
    },
    {
        "data": {
            "conversation_id": "1512087364406951937",
            "text": "If you run this program, you'll be flooded with output \ud83d\udc47\n\nThat's because we're iterating over a list that keeps growing!\n\nBut the output looks interesting, doesn't it?\n\nFor the first 5 lines, `num` is one of the original numbers.\n\nThen, `num` becomes a Boolean value?!\n\nWhy/how? https://t.co/vuojWZopO1",
            "edit_history_tweet_ids": [
                "1512087371268845573"
            ],
            "id": "1512087371268845573",
            "attachments": {
                "media_keys": [
                    "3_1512087361227673604"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1512087361227673604",
                    "url": "https://pbs.twimg.com/media/FPwDcZNVUAQ4RAp.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1512087369234538506"
            ],
            "id": "1512087369234538506",
            "text": "Let us clean this up a bit more.\n\nFirst, notice that the list `is_big` isn't really used, so we can get rid of it.\n\nThen, we can add some `print` calls to see what is happening real time:\n\nWhat are the successive values that `numbers` takes? https://t.co/iOIE9akPQP",
            "conversation_id": "1512087364406951937",
            "attachments": {
                "media_keys": [
                    "3_1512087348279795719"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FPwDbo-UYAc0_Ds.jpg",
                    "type": "photo",
                    "media_key": "3_1512087348279795719"
                }
            ]
        }
    },
    {
        "data": {
            "text": "This script never finishes!\n\n(By the way, use Ctrl + C to interrupt an infinite loop!)\n\nCan you see why?\n\nLet me rewrite that `for` loop with a `while` loop that does more or less the same thing \ud83d\udc47\n\nCan you see now what is happening? https://t.co/cZcw13U4Uu",
            "attachments": {
                "media_keys": [
                    "3_1512087337160695838"
                ]
            },
            "id": "1512087366747385863",
            "conversation_id": "1512087364406951937",
            "edit_history_tweet_ids": [
                "1512087366747385863"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512087337160695838",
                    "url": "https://pbs.twimg.com/media/FPwDa_jUYB4PK3O.png",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1512087325622169609"
                ]
            },
            "text": "Yesterday I posted a Python \ud83d\udc0d code snippet with a major typo \ud83d\udc47\n\nLet's explore this accident.\n\nQuestion \u2753: what's the behaviour of this script? https://t.co/FSyiRtNf6T",
            "id": "1512087364406951937",
            "conversation_id": "1512087364406951937",
            "edit_history_tweet_ids": [
                "1512087364406951937"
            ]
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPwDaUkUcAkXruo.png",
                    "media_key": "3_1512087325622169609"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1511979864538165249"
            ],
            "attachments": {
                "media_keys": [
                    "3_1511979862130577410"
                ]
            },
            "id": "1511979864538165249",
            "conversation_id": "1511979864538165249",
            "text": "Day 12/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/3xrf0isD2Z"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FPuhrH3WUAIzwwX.jpg",
                    "media_key": "3_1511979862130577410",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1511867428518744067",
            "edit_history_tweet_ids": [
                "1511867428518744067"
            ],
            "id": "1511867428518744067",
            "text": "\ud83d\udea8 MAJOR typo alert \ud83e\udd26\n\nThe loop was supposed to be:\n\nis_big = []\nfor num in numbers:\n    is_big.append(num &gt; 10)\n\nI am _very_ sorry for the terrible typo \ud83d\ude29\nWith the typo, the program actually goes into an infinite loop! https://t.co/nqe3k1IgtG"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1511617475779174401"
                ]
            },
            "id": "1511617478039904257",
            "edit_history_tweet_ids": [
                "1511617478039904257"
            ],
            "text": "Day 11/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UafVHoI16q",
            "conversation_id": "1511617478039904257"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1511617475779174401",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPpYFdgXIAEAOvm.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "The original thread had a typo in the bullet point regarding the mutability of lists.\n\nAs we all know, lists are mutable = their contents CAN change.",
            "id": "1511400945426571267",
            "conversation_id": "1511342969990823937",
            "edit_history_tweet_ids": [
                "1511400945426571267"
            ]
        }
    },
    {
        "data": {
            "text": "Key takeaways:\n\n\ud83d\udccc `[:]` copies sliced object\n\ud83d\udccc lists are mutable, i.e., their contents CAN change\n\ud83d\udccc useful, for example, when you want to modify a list &amp; also keep the original\n\ud83d\udccc irrelevant for strings because strings are immutable, i.e., their contents can't change",
            "edit_history_tweet_ids": [
                "1511400724286038018"
            ],
            "id": "1511400724286038018",
            "conversation_id": "1511342969990823937"
        }
    },
    {
        "data": {
            "text": "Key takeaways:\n\n\ud83d\udccc `[:]` copies sliced object\n\ud83d\udccc lists are mutable, i.e., their contents can't change\n\ud83d\udccc useful, for example, when you want to modify a list &amp; also keep the original\n\ud83d\udccc irrelevant for strings because strings are immutable, i.e., their contents can't change",
            "id": "1511342980212445192",
            "edit_history_tweet_ids": [
                "1511342980212445192"
            ],
            "conversation_id": "1511342969990823937"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1511342978756919308"
            ],
            "id": "1511342978756919308",
            "text": "Was this thread a waste of time?\n\nIf not, retweet it and follow @mathsppblog for more Python \ud83d\udc0d knowledge!\n\nThis thread, together with all my other threads, can be found on my website: https://t.co/bF07zerCkC.\n\nYou can go there and bookmark this thread if you need it for later!",
            "conversation_id": "1511342969990823937"
        }
    },
    {
        "data": {
            "text": "That is why it never makes sense to make a copy of a string.\n\nYou can't change it either way, so might as well use the original string from the start!\n\nDid this make sense?\n\nI hope so \ud83e\udd1e",
            "id": "1511342977343537167",
            "edit_history_tweet_ids": [
                "1511342977343537167"
            ],
            "conversation_id": "1511342969990823937"
        }
    },
    {
        "data": {
            "id": "1511342975464484866",
            "conversation_id": "1511342969990823937",
            "text": "It doesn't make sense to get a copy of a string because strings are _immutable_!\n\nWhat does this mean?\n\nIt means that the contents of a string never change!\n\nFor example, haven't you noticed how `.upper` returns a _new_ string?\n\nYou never modify the original string! https://t.co/MBhsKzpyQX",
            "attachments": {
                "media_keys": [
                    "3_1511342967210098697"
                ]
            },
            "edit_history_tweet_ids": [
                "1511342975464484866"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1511342967210098697",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPlea9ZXwAkKs03.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1511342973648351246"
            ],
            "attachments": {
                "media_keys": [
                    "3_1511342954748727310"
                ]
            },
            "id": "1511342973648351246",
            "conversation_id": "1511342969990823937",
            "text": "Sometimes you need a copy of a list because lists are _mutable_.\n\nThis means that the contents of a list can change!\n\nSo, if you want to modify a list but also keep its original values, you need a copy.\n\nBut this doesn't make sense for strings!\n\nCan you see why? https://t.co/ZaYJLy2YOS"
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FPleaO-WUA4SCzB.jpg",
                    "media_key": "3_1511342954748727310",
                    "type": "photo"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1511342971697905664"
            ],
            "id": "1511342971697905664",
            "text": "Recall that slices do a copy of the sliced chunk.\n\nIf you are using a full slice `my_str[:]`, that means you are getting the whole string.\n\nSo, why wouldn't you just use `my_str`..?\n\nWhy do you need a _copy_ of your string?\n\nSometimes you _do_ need a copy of a list: https://t.co/eQA1X6y9VA",
            "conversation_id": "1511342969990823937",
            "attachments": {
                "media_keys": [
                    "3_1511342943151472641"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "url": "https://pbs.twimg.com/media/FPleZjxWQAE1nsk.jpg",
                    "type": "photo",
                    "media_key": "3_1511342943151472641"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1511342969990823937"
            ],
            "attachments": {
                "media_keys": [
                    "3_1511342926936301575"
                ]
            },
            "text": "Yesterday I challenged your Python \ud83d\udc0d knowledge!\n\nI asked:\n\nWhy is it always 100% unnecessary to use a full slice `[:]` with a string?\n\nNow it's time I give you the answer!\n\nLet's go \ud83d\ude80 https://t.co/ShHz7UCXF9",
            "conversation_id": "1511342969990823937",
            "id": "1511342969990823937"
        },
        "includes": {
            "media": [
                {
                    "type": "photo",
                    "media_key": "3_1511342926936301575",
                    "url": "https://pbs.twimg.com/media/FPleYnXWYAcrfrj.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1511255097745022980",
            "conversation_id": "1511255097745022980",
            "text": "Day 10/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/rmrb5TrJvZ",
            "attachments": {
                "media_keys": [
                    "3_1511255095522045953"
                ]
            },
            "edit_history_tweet_ids": [
                "1511255097745022980"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1511255095522045953",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPkOgJ2XMAEQiGZ.jpg"
                }
            ]
        }
    }
]