[
    {
        "data": {
            "id": "1604829921812979712",
            "edit_history_tweet_ids": [
                "1604829921812979712"
            ],
            "text": "Wow 6 years of Pybites today! It flew by, so time to pause and reflect - article below.\n\nProud @juliansequeira of what we achieved and excited for what's next in 2023! https://t.co/liLc9ZoILL",
            "conversation_id": "1604829921812979712"
        }
    },
    {
        "data": {
            "id": "1603794331168657408",
            "attachments": {
                "media_keys": [
                    "3_1603749151300358146"
                ]
            },
            "text": "A quick way to get the change stats from this commit message line: https://t.co/RfYUJcoxc8",
            "edit_history_tweet_ids": [
                "1603794331168657408"
            ],
            "conversation_id": "1603794331168657408"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603749151300358146",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkGpWygXkAIHCek.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1603745993677328384"
                ]
            },
            "conversation_id": "1603747533544644613",
            "id": "1603747533544644613",
            "edit_history_tweet_ids": [
                "1603747533544644613"
            ],
            "text": "Given a string representing one Unicode character, ord() returns an integer representing the Unicode code point of that character:\n\n#python https://t.co/7ZQw9TrAXM"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603745993677328384",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FkGme_cX0AAQoz8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1603465124299284480",
            "edit_history_tweet_ids": [
                "1603465124299284480"
            ],
            "id": "1603465124299284480",
            "text": "FastAPI for Machine Learning: Live coding an ML web application. https://t.co/rEtmKus1WV via @YouTube"
        }
    },
    {
        "data": {
            "conversation_id": "1603422204288442370",
            "text": "New article: \n\nBuilding a\u00a0500\u00a0line API regression test suite https://t.co/DauI6Te3i7 \n\n#python #testing #APIs",
            "edit_history_tweet_ids": [
                "1603422204288442370"
            ],
            "id": "1603422204288442370"
        }
    },
    {
        "data": {
            "conversation_id": "1603373239128002560",
            "edit_history_tweet_ids": [
                "1603373239128002560"
            ],
            "text": "Check out my latest article: Teachers aren't the only ones who teach. As a developer you're expected to do so too ... https://t.co/4cSr0FuFOZ via @LinkedIn",
            "id": "1603373239128002560"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1603332649606647808"
            ],
            "conversation_id": "1603332649606647808",
            "id": "1603332649606647808",
            "text": "I had a blast interviewing @DataMovesHer on our @Pybites podcast.\n\nWe talk about her DS journey + some cool data projects she has built + the importance of building an audience\n\nhttps://t.co/ETgyVUFarR \n\n\ud83d\ude0e \ud83e\udd77 \ud83d\udc0d \ud83c\udfa7 \u2615 \ud83c\udf89 \ud83d\ude0d\n\nEnjoy!"
        }
    },
    {
        "data": {
            "conversation_id": "1603081166088806407",
            "edit_history_tweet_ids": [
                "1603081166088806407"
            ],
            "id": "1603081166088806407",
            "text": "I wrote a new article about 5 cool ways I'm using #GitHub Actions at the moment:\n\nhttps://t.co/OMx9IdZuif\n\nI hope you can adopt one or more. Also happy to hear what Actions are staples for you ..."
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1603006742920568833"
                ]
            },
            "conversation_id": "1603006813376487427",
            "id": "1603006813376487427",
            "edit_history_tweet_ids": [
                "1603006813376487427"
            ],
            "text": "You can use the literal_eval() function from the ast module to parse a string into a #Python object. \n\nHere I get a nested list from a string: https://t.co/Avz1G1QSDZ"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1603006742920568833",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fj8GI7xWIAEHnWb.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Programmer productivity tip (and reminder): \n\nIf you\u2019re stuck on a problem for too long, take a break (walks are awesome!) \n\nYou will come back to the problem refreshed and with new insights.",
            "id": "1602957644100435968",
            "edit_history_tweet_ids": [
                "1602957644100435968"
            ],
            "conversation_id": "1602957644100435968"
        }
    },
    {
        "data": {
            "text": "Transposing a matrix ...\n\nnumpy makes this a breeze - numpy.transpose(matrix) - but you can also use the zip() built-in function, leveraging the fact that it iterates over several iterables in parallel, producing new tuples with an item from each one.\n\n#Python #tips https://t.co/q1ynPY3Twv",
            "id": "1602747936357715969",
            "edit_history_tweet_ids": [
                "1602747936357715969"
            ],
            "attachments": {
                "media_keys": [
                    "3_1602666655422844928"
                ]
            },
            "conversation_id": "1602747936357715969"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1602666655422844928",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fj3Q1PHXkAAZOFL.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#pybobtips",
            "id": "1602734282425995264",
            "edit_history_tweet_ids": [
                "1602734282425995264"
            ],
            "conversation_id": "1602660862778548229"
        }
    },
    {
        "data": {
            "conversation_id": "1602660862778548229",
            "attachments": {
                "media_keys": [
                    "3_1602589979116453889"
                ]
            },
            "id": "1602660862778548229",
            "edit_history_tweet_ids": [
                "1602660862778548229"
            ],
            "text": "The other day (in the #AdventOfCode) I was given strings like \"1 + 2\" and \"3 * 4\".\n\nHow do you perform these operations without using eval()?\n\nYou can use the operator module in #Python: https://t.co/1HbERK5bnm"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1602589979116453889",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fj2LGFnWQAEN7_r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1602626812512706561",
            "text": "I usually leave __init__.py empty or put at most version + logging in there, however I see some libraries / packages have the complete implementation in there, pros / cons? \n\n#Python",
            "edit_history_tweet_ids": [
                "1602626812512706561"
            ],
            "conversation_id": "1602626812512706561"
        }
    },
    {
        "data": {
            "conversation_id": "1602588700914978819",
            "id": "1602588700914978819",
            "text": "I learned about the \"least common multiple\" the other day which is the least possible number that is divisible by all the numbers in a list of numbers.\n\nFor example, the LCM of 2, 3, and 4 == 12. \n\n#Python has a function in the math module to conveniently calculate this for you: https://t.co/8BbrgswEGb",
            "attachments": {
                "media_keys": [
                    "3_1602588409037574147"
                ]
            },
            "edit_history_tweet_ids": [
                "1602588700914978819"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1602588409037574147",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fj2JqsnX0AMcdMk.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1602299262918090755",
            "text": "Built with AssemblyAI - IronScribe https://t.co/WzscMl7eKr &lt; last year I learned a lot building this tool (Django, Assembly AI, Celery, JS and more)\n\nBuilding projects is the best way to learn!\n\n#python #developer",
            "edit_history_tweet_ids": [
                "1602299262918090755"
            ],
            "id": "1602299262918090755"
        }
    },
    {
        "data": {
            "conversation_id": "1601490444105715712",
            "edit_history_tweet_ids": [
                "1601490444105715712"
            ],
            "id": "1601490444105715712",
            "text": "I've completed \"Cathode-Ray Tube\" - Day 10 - Advent of Code 2022 https://t.co/VAStQTqBvv #AdventOfCode"
        }
    },
    {
        "data": {
            "conversation_id": "1601265048973824004",
            "edit_history_tweet_ids": [
                "1601265048973824004"
            ],
            "text": "See this Instagram video by @pybites https://t.co/oww7m2viBk",
            "id": "1601265048973824004"
        }
    },
    {
        "data": {
            "id": "1600799036755578880",
            "edit_history_tweet_ids": [
                "1600799036755578880"
            ],
            "text": "This week we talk about #developer #mindfulness https://t.co/AllZ6kBo7Q",
            "conversation_id": "1600799036755578880"
        }
    },
    {
        "data": {
            "id": "1600798880731652096",
            "edit_history_tweet_ids": [
                "1600798880731652096"
            ],
            "text": "I've completed \"Treetop Tree House\" - Day 8 - Advent of Code 2022 https://t.co/Kms7kC058U #AdventOfCode",
            "conversation_id": "1600798880731652096"
        }
    },
    {
        "data": {
            "id": "1600033707913613312",
            "text": "I just completed \"Tuning Trouble\" - Day 6 - Advent of Code 2022 https://t.co/kxUT834tgq #AdventOfCode &lt; easier than yesterday :)\n\nStarted using template == saves time!",
            "edit_history_tweet_ids": [
                "1600033707913613312"
            ],
            "conversation_id": "1600033707913613312"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1600024047294844928"
            ],
            "text": "Make a namedtuple with type hints \ud83d\ude0d\n\n#pybobtips https://t.co/HSjOTiQrL9",
            "id": "1600024047294844928",
            "conversation_id": "1600024047294844928",
            "attachments": {
                "media_keys": [
                    "3_1600023663843201027"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1600023663843201027",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjRtC4OX0AM6RsK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1599865047219462144",
            "edit_history_tweet_ids": [
                "1599865047219462144"
            ],
            "text": "I just completed \"Supply Stacks\" - Day 5 - Advent of Code 2022 https://t.co/D0FwYACUpW #AdventOfCode",
            "conversation_id": "1599865047219462144"
        }
    },
    {
        "data": {
            "conversation_id": "1599815231957409792",
            "id": "1599815231957409792",
            "edit_history_tweet_ids": [
                "1599815231957409792"
            ],
            "attachments": {
                "media_keys": [
                    "3_1599815218959466510"
                ]
            },
            "text": "If you want to add extra attributes when saving a Django ModelForm, you can save the form with \"commit=False\".\n\nI commonly use this to set a foreign key field, see example below.\n\n#Django #pybobtips https://t.co/YuZ0yTg2nL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599815218959466510",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjOvdyhXwA4IVCX.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1599742130074828801",
            "id": "1599742130074828801",
            "text": "What is you want to find the common element(s) across more than two sets? \n\nYou can &amp; multiple sets or use set.intersection().\n\n#python #tips https://t.co/cqfgfQHIPp",
            "attachments": {
                "media_keys": [
                    "3_1599682156573458434"
                ]
            },
            "edit_history_tweet_ids": [
                "1599742130074828801"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599682156573458434",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjM2cigXgAIesyX.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1599709826325487616"
            ],
            "text": "Thanks @aj_kerrigan for showing my (through AoC) that this particular snippet can be shortened to:\n\n&gt;&gt;&gt; string.ascii_letters\n'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'",
            "id": "1599709826325487616",
            "conversation_id": "1599681870307827712"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1599695888259039233"
            ],
            "text": "Another use of the underscore is a \"throwaway variable\".\n\nIf you just want to do something N times, without the need of using a loop variable, you can use the range() built-in like this: https://t.co/AiINAUqe71 https://t.co/ngCQpFa1ZE",
            "attachments": {
                "media_keys": [
                    "3_1599695751839465473"
                ]
            },
            "conversation_id": "1599695888259039233",
            "id": "1599695888259039233"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599695751839465473",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjNCz40XwAEwHoy.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1599694963453087745",
            "text": "You should not shadow #Python keywords, but I just really wanted to use from and to in my code. \n\nPossible workaround: append an _ to the variable names, so from_ and to_ (or think a bit harder if you can use a more descriptive variable names).\n\n#pybobtips",
            "edit_history_tweet_ids": [
                "1599694963453087745"
            ],
            "id": "1599694963453087745"
        }
    },
    {
        "data": {
            "id": "1599687028064804864",
            "edit_history_tweet_ids": [
                "1599687028064804864"
            ],
            "text": "Python makes talking about code easier.\n\nE.g. how do you call these things dir() just listed? \n\nOften you can just say \"objects\", because in #Python everything is an object :)\n\nMeaning: https://t.co/cqT57Gg0Pk\n\n#pythonmusings",
            "conversation_id": "1599687028064804864"
        }
    },
    {
        "data": {
            "id": "1599681870307827712",
            "edit_history_tweet_ids": [
                "1599681870307827712"
            ],
            "conversation_id": "1599681870307827712",
            "text": "The string module makes it easy to get the ranges a-z + A-Z (and more) for use as constants.\n\n#python #tips https://t.co/oBHdt2oJS4",
            "attachments": {
                "media_keys": [
                    "3_1599681800573534209"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1599681800573534209",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FjM2H0TXwAECHUN.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1599327164406542336"
            ],
            "conversation_id": "1599327164406542336",
            "id": "1599327164406542336",
            "text": "I just completed \"Camp Cleanup\" - Day 4 - Advent of Code 2022 https://t.co/Tb2tmGa3jR #AdventOfCode &lt;&lt; much fun so far, looking forward comparing solutions later today ..."
        }
    },
    {
        "data": {
            "id": "1599302754320588800",
            "text": "Favorite part is learning / getting inspiration from other solutions when solving the puzzle https://t.co/tWhJ7wb5pa",
            "edit_history_tweet_ids": [
                "1599302754320588800"
            ],
            "conversation_id": "1599302754320588800"
        }
    },
    {
        "data": {
            "conversation_id": "1599101770398957568",
            "edit_history_tweet_ids": [
                "1599101770398957568"
            ],
            "id": "1599101770398957568",
            "text": "I just completed \"Rucksack Reorganization\" - Day 3 - Advent of Code 2022 https://t.co/Y4XHlwVDiC #AdventOfCode"
        }
    },
    {
        "data": {
            "id": "1598862584458911746",
            "attachments": {
                "media_keys": [
                    "3_1598696865838645251"
                ]
            },
            "edit_history_tweet_ids": [
                "1598862584458911746"
            ],
            "conversation_id": "1598862584458911746",
            "text": "Mocking out datetimes can be tough!\n\nSay you'd use @ patch('https://t.co/jlxAzSZ0ro', obj) in your test, only to have it break when the import in the code changes :(\n\nLuckily there is a library called FreezeGun that works around this issue by thoroughly faking #Python datetimes: https://t.co/5appfKaqa4"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598696865838645251",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi-2VEfXwAMFXaz.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1598808226245615632"
            ],
            "text": "No more need for \"with open(...\", you can use pathlib now \ud83d\udc0d\ud83d\ude0d https://t.co/QbCgXZ0ycw",
            "id": "1598808226245615632",
            "conversation_id": "1598808226245615632",
            "attachments": {
                "media_keys": [
                    "3_1598696321682112513"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598696321682112513",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi-11ZWWAAE78XH.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1598663617506734080",
            "text": "How do you use imports in #Python?\n\nimport pathlib\n...\npathlib.Path(...\n\nor:\n\nfrom pathlib import Path\n...\nPath(...\n\n... and why?",
            "edit_history_tweet_ids": [
                "1598663617506734080"
            ],
            "id": "1598663617506734080"
        }
    },
    {
        "data": {
            "id": "1598651955605372928",
            "edit_history_tweet_ids": [
                "1598651955605372928"
            ],
            "conversation_id": "1598651955605372928",
            "text": "Extract Method makes your code more reusable and readable. Here is one I did today ...\n\n#python #refactoring https://t.co/TbbqrfgnlW",
            "attachments": {
                "media_keys": [
                    "3_1598651800323850240"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598651800323850240",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi-NV6XXgAADnl2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Going live next week ... https://t.co/j6CxNwiMHy",
            "id": "1598648381504720897",
            "edit_history_tweet_ids": [
                "1598648381504720897"
            ],
            "conversation_id": "1598648381504720897"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1598595496666624002"
            ],
            "id": "1598595496666624002",
            "text": "A debugging tale https://t.co/tiJumOpp0z",
            "conversation_id": "1598595496666624002"
        }
    },
    {
        "data": {
            "id": "1598563798339788800",
            "edit_history_tweet_ids": [
                "1598563798339788800"
            ],
            "conversation_id": "1598563798339788800",
            "text": "I wrote a code tip image API ~ a year ago, but never really \"finished\" a decent first version. \n\nI did last week and made the repo public so we can all learn + contribute:\nhttps://t.co/f4ey34xpy7\n\nFastAPI, SQLModel, Alembic, Pybites-carbon, boto3, and more ...\n \n#python #project https://t.co/aIkHr94v14",
            "attachments": {
                "media_keys": [
                    "3_1598562170106793990"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598562170106793990",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi870vyX0AYd5ne.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1598561495427735552"
                ]
            },
            "text": "What's coming on the @Pybites platform? An SQLModel Learning Path!\n\nYou'll end up building an API to track your workouts. \n\nFixing all N exercises (probably ~6) you will be able to have this Streamlit front-end working with it ...\n\nAs excited as me?\n\n#project #python #coding https://t.co/zi3XLnhIEG",
            "conversation_id": "1598562113852608512",
            "edit_history_tweet_ids": [
                "1598562113852608512"
            ],
            "id": "1598562113852608512"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598561495427735552",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi87NeaWYAAkXnj.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "It is indeed liberating to just open issues, document your thoughts and fixes. Documentation built-in! But you can also leave things for later and come back.\n\nBtw TIL: if you put certain keywords in your PR (e.g. fixes issue &lt;int&gt;) it will autoclose the issue.\n\n#developer #github https://t.co/WhfeMwVnLf",
            "id": "1598561378058457088",
            "edit_history_tweet_ids": [
                "1598561378058457088"
            ],
            "conversation_id": "1598561378058457088"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1598386056944050176"
                ]
            },
            "conversation_id": "1598491388399669248",
            "edit_history_tweet_ids": [
                "1598491388399669248"
            ],
            "id": "1598491388399669248",
            "text": "You can use list.index() to find the first match of a string, for multiple matches you can use enumerate().\n\n#python #tips https://t.co/msP8ZSG1oL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598386056944050176",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi6bpnIWYAAQtbM.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1598417018772160513",
            "id": "1598417018772160513",
            "text": "I've completed \"Calorie Counting\" - Day 1 - Advent of Code 2022 https://t.co/D2CGlU5kYG #AdventOfCode &lt;&lt; you should join, it's pretty cool!",
            "edit_history_tweet_ids": [
                "1598417018772160513"
            ]
        }
    },
    {
        "data": {
            "text": "Forgot the ALT, snippet: https://t.co/6UtiUQ4xMh",
            "id": "1598386451267420164",
            "edit_history_tweet_ids": [
                "1598386451267420164"
            ],
            "conversation_id": "1598385748247543820"
        }
    },
    {
        "data": {
            "conversation_id": "1598385748247543820",
            "attachments": {
                "media_keys": [
                    "3_1598385537236303883"
                ]
            },
            "text": "You can use request.getfixturevalue() to lookup a fixture by string. This is handy when parametrizing them.\n\n#python #pytest https://t.co/1XS4dvBxfB",
            "edit_history_tweet_ids": [
                "1598385748247543820"
            ],
            "id": "1598385748247543820"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598385537236303883",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi6bLXEXgAsw1BH.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1598285570496557057"
            ],
            "text": "Do you want to speed up your use of emojis in your writing? Maybe EmojiSearcher can help:\n\nhttps://t.co/oxy6PjY5iU\n\n$ emo tada rocket snake smile bicep\nCopied \ud83c\udf89 \ud83d\ude80 \ud83d\udc0d \ud83d\ude04 \ud83d\udcaa to clipboard\n\n(emo is a shell alias btw)\n\n#python #opensource",
            "conversation_id": "1598285570496557057",
            "id": "1598285570496557057"
        }
    },
    {
        "data": {
            "conversation_id": "1598242914647576576",
            "edit_history_tweet_ids": [
                "1598242914647576576"
            ],
            "text": "Getting into this flow today of \"issue first development\" - already feels like a great way of doing things \ud83c\udf89\ud83d\udca1 https://t.co/qJSCVoqjb2",
            "id": "1598242914647576576"
        }
    },
    {
        "data": {
            "id": "1598238309884788736",
            "edit_history_tweet_ids": [
                "1598238309884788736"
            ],
            "conversation_id": "1598238309884788736",
            "text": "Keeping the #python #tips up here, what cool themes / topics would you appreciate seeing more of from me in your feed?"
        }
    },
    {
        "data": {
            "conversation_id": "1598121954564706307",
            "edit_history_tweet_ids": [
                "1598121954564706307"
            ],
            "id": "1598121954564706307",
            "attachments": {
                "media_keys": [
                    "3_1598013181896556573"
                ]
            },
            "text": "You can open a file with 'x' (exclusive creation) to prevent overwriting it if it already exists.\n\n#python #tips https://t.co/FGvghXBdRt"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598013181896556573",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi1IhbVWAB0mv2B.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1598012948718419979"
                ]
            },
            "text": "Two ways to flatten a list (iterable) or lists (iterables). \n\nThe sum() way is quite obscure, I prefer itertools.chain.from_iterable() as it more clearly shows intent. \n\nFor deeper nesting you will need recursion.\n\n#python #tips https://t.co/9txSTG5Wo0",
            "conversation_id": "1598072881086230529",
            "edit_history_tweet_ids": [
                "1598072881086230529"
            ],
            "id": "1598072881086230529"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598012948718419979",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi1IT2rWAAs9ueQ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1598012468445741057",
            "edit_history_tweet_ids": [
                "1598012468445741057"
            ],
            "attachments": {
                "media_keys": [
                    "3_1598012419783131157"
                ]
            },
            "text": "#Python classmethods are handy to provide multiple constructors to your classes: https://t.co/Vdp5808PWo",
            "conversation_id": "1598012468445741057"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1598012419783131157",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fi1H1EPWABUp7tn.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1597936794729074690",
            "id": "1597993217659928577",
            "edit_history_tweet_ids": [
                "1597993217659928577"
            ],
            "text": "I saw it on Mastodon first, but also thanks @pythonbytes for sharing this, definitely something to adopt!\n\nThanks so much @simonw for sharing as always."
        }
    },
    {
        "data": {
            "id": "1597936794729074690",
            "edit_history_tweet_ids": [
                "1597936794729074690"
            ],
            "conversation_id": "1597936794729074690",
            "text": "Awesome talk: Increase your productivity on personal projects with comprehensive docs ... \nhttps://t.co/ayqeVVYrSv \n\n#python #developer"
        }
    },
    {
        "data": {
            "id": "1597878930626969600",
            "edit_history_tweet_ids": [
                "1597878930626969600"
            ],
            "conversation_id": "1597878930626969600",
            "text": "Who is doing the #AdventOfCode this year?"
        }
    },
    {
        "data": {
            "conversation_id": "1597590590631415808",
            "id": "1597590590631415808",
            "text": "Really cool idea!\n\n#GitHub #Python #opensource https://t.co/usI3bob8vu",
            "edit_history_tweet_ids": [
                "1597590590631415808"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1597516384279339008"
                ]
            },
            "conversation_id": "1597516506912665601",
            "id": "1597516506912665601",
            "edit_history_tweet_ids": [
                "1597516506912665601"
            ],
            "text": "Create a new dictionary with keys from iterable and values set to value.\n\n#python #tips https://t.co/wKqbRggkaP"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1597516384279339008",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiuEr__WIAAi70Q.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1597456178468245505",
            "text": "0.6.0 is up on PyPI now \ud83d\ude0e\n\nI copied this emoji from my .preferences file:\n\n$ emo cool\nCopied \ud83d\ude0e to clipboard https://t.co/srDllGeX33",
            "edit_history_tweet_ids": [
                "1597456178468245505"
            ],
            "conversation_id": "1597456178468245505"
        }
    },
    {
        "data": {
            "conversation_id": "1597455855620075520",
            "id": "1597455855620075520",
            "edit_history_tweet_ids": [
                "1597455855620075520"
            ],
            "text": "The nice thing about blogging / content creation, apart from helping others, is that you build up your own reference.\n\nI used this video (I produced &gt; 1 year ago) to automatically update a package on PyPI by pushing a git tag:\n\nhttps://t.co/lnFU2UGXtc"
        }
    },
    {
        "data": {
            "conversation_id": "1597173433728905216",
            "edit_history_tweet_ids": [
                "1597189182958768128"
            ],
            "id": "1597189182958768128",
            "text": "Or ... TIL: plain Unix: date +%U"
        }
    },
    {
        "data": {
            "id": "1597174275680923648",
            "edit_history_tweet_ids": [
                "1597174275680923648"
            ],
            "conversation_id": "1597152673056575488",
            "text": "Did I forget the screenshot? lol https://t.co/ByJjQipj93",
            "attachments": {
                "media_keys": [
                    "3_1597174235218190337"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1597174235218190337",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FipNgTaWIAEg6Ea.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1597174125097013249",
            "edit_history_tweet_ids": [
                "1597174125097013249"
            ],
            "id": "1597174125097013249",
            "text": "If I had to summarize Dale Carnegie's 'How to Stop Worrying and Start Living' in just two words it would be:\n\nGet Busy.\n\nI think Mihaly Csikszentmihalyi calls it the \"Flow\" state.\n\nGoing deep with coding is soooo nice for that \ud83e\uddd8\ud83e\uddd8\ud83e\uddd8\n\n#MondayMindset"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1597173433728905216"
            ],
            "conversation_id": "1597173433728905216",
            "id": "1597173433728905216",
            "text": "I often wonder what week it is, hence I made this #Python alias:\n\n$ alias whatweek\nwhatweek='python3.9 -c \"from datetime import date; print(https://t.co/2cx0UCJtjP().isocalendar().week)\"'\n$ whatweek\n48"
        }
    },
    {
        "data": {
            "conversation_id": "1597152673056575488",
            "id": "1597161927884488704",
            "text": "Result ...\n\n#python #project #emoji https://t.co/TlJYk33PVO",
            "attachments": {
                "media_keys": [
                    "7_1597161665010798592"
                ]
            },
            "edit_history_tweet_ids": [
                "1597161927884488704"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1597161665010798592",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1597157789650268162"
            ],
            "id": "1597157789650268162",
            "text": "Love that progress graph \ud83d\ude0d https://t.co/MFyuaywYsL",
            "conversation_id": "1597157789650268162"
        }
    },
    {
        "data": {
            "id": "1597157642769612801",
            "edit_history_tweet_ids": [
                "1597157642769612801"
            ],
            "text": "#Django https://t.co/EvWRCvuWZD",
            "conversation_id": "1597157642769612801"
        }
    },
    {
        "data": {
            "conversation_id": "1597156490368159744",
            "id": "1597156490368159744",
            "text": "New week, new opportunities, what are you working on? \ud83d\udd25\n\nI just wrote a test suite for one of our FastAPI / SQLModel apps: https://t.co/f4ey34xXnF\n\nHighly needed and overall a pleasant experience \ud83e\uddd8",
            "edit_history_tweet_ids": [
                "1597156490368159744"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1597152673056575488",
            "edit_history_tweet_ids": [
                "1597152673056575488"
            ],
            "id": "1597152673056575488",
            "text": "I designed a new feature for one of my projects \"document first\", that is, I started by outlining it in the Readme and worked backwards writing the code \ud83c\udf89\n\nIt was an amazing experience \ud83d\ude0e\n\nInspiration: https://t.co/3HwwoLvGDa"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1597148872693932032"
                ]
            },
            "text": "The str.replace() method takes an optional count argument so you for example can only replace the first match: https://t.co/2TThwUnGlo",
            "conversation_id": "1597148883402264581",
            "edit_history_tweet_ids": [
                "1597148883402264581"
            ],
            "id": "1597148883402264581"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1597148872693932032",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fio2cApWYAAiE2u.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1596745493593620482",
            "id": "1596745493593620482",
            "edit_history_tweet_ids": [
                "1596745493593620482"
            ],
            "attachments": {
                "media_keys": [
                    "3_1596745461808959488"
                ]
            },
            "text": "You can get the type hints for an object using get_type_hints() from the typing module. https://t.co/G47fpr1exP"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1596745461808959488",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FijHiZ_XEAAIQLx.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1596168811715399680",
            "id": "1596168811715399680",
            "edit_history_tweet_ids": [
                "1596168811715399680"
            ],
            "attachments": {
                "media_keys": [
                    "3_1596168735009669124"
                ]
            },
            "text": "If you want to convert a dictionary to a query string in #Python you can use urllib.parse.urlencode() https://t.co/HfODI8KQwe"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1596168735009669124",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fia7AfPWAAQ5Wsk.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1596078351793655809",
            "edit_history_tweet_ids": [
                "1596078351793655809"
            ],
            "text": "Might wanna tune in to @Bleachin's amazing mixes one day ... \n\nListening (coding) to:\nhttps://t.co/gwX5kJ85bc \n\n#music #coding #drumandbass",
            "id": "1596078351793655809"
        }
    },
    {
        "data": {
            "text": "I am not leaving Twitter (yet haha), but I do post Python + developer related stuff on Fosstodon now:\n\nhttps://t.co/ydiUBJNwbT",
            "id": "1595714394922549249",
            "edit_history_tweet_ids": [
                "1595714394922549249"
            ],
            "conversation_id": "1595714394922549249"
        }
    },
    {
        "data": {
            "text": "Updated it to also load in the latest toots from Fosstodon",
            "id": "1595682463166218240",
            "edit_history_tweet_ids": [
                "1595682463166218240"
            ],
            "conversation_id": "1595129713818673152"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1595682084995072000"
                ]
            },
            "edit_history_tweet_ids": [
                "1595682112585211905"
            ],
            "conversation_id": "1595682112585211905",
            "id": "1595682112585211905",
            "text": "Overall I prefer dictionary comprehensions but for some scenarios dict() can be useful, it accepts both a mapping as well as an iterable.\n\n#Python #tips https://t.co/3QrHaJvm7d"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1595682084995072000",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiUAZuqWAAAOXSP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1595129713818673152"
            ],
            "text": "How to create a self updating #GitHub Readme https://t.co/xWso5FXDce",
            "conversation_id": "1595129713818673152",
            "id": "1595129713818673152"
        }
    },
    {
        "data": {
            "conversation_id": "1594646393074995201",
            "id": "1594646393074995201",
            "text": "You can use an else on a while loop which will hit if the loop runs normally. \n\nIf the loop is terminated prematurely though (using break or return), the code in the else won't execute. \n\nThis construct can also be used with a for loop.\n\n#Python #tips https://t.co/bBJ4FnOGGT",
            "attachments": {
                "media_keys": [
                    "3_1594646270731247616"
                ]
            },
            "edit_history_tweet_ids": [
                "1594646393074995201"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1594646270731247616",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FiFSVZ1WYAA6hAl.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1592778468827492354",
            "edit_history_tweet_ids": [
                "1592778468827492354"
            ],
            "text": "Had a fun conversation with Yujian on our #podcast, he shared some great insights. \n\nMain takeaways: the difference between being a #developer and an #entrepreneur + the #mindset you have to have to continue growing.\n\nEnjoy! https://t.co/QcjHhpSjgt",
            "conversation_id": "1592778468827492354"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1592451639012913153"
            ],
            "text": "I just cracked Bite 363. Movie Theater (Refactoring) - and now I challenge you!  https://t.co/qxPVVVpDfR \n#Python #CodeChallenges",
            "id": "1592451639012913153",
            "conversation_id": "1592451639012913153"
        }
    },
    {
        "data": {
            "conversation_id": "1591003919001751552",
            "id": "1591003919001751552",
            "edit_history_tweet_ids": [
                "1591003919001751552"
            ],
            "text": "The cool thing about imposter syndrome is that you do come out stronger. \n\nDon't avoid it, embrace it!"
        }
    },
    {
        "data": {
            "conversation_id": "1590323074725216257",
            "id": "1590323074725216257",
            "edit_history_tweet_ids": [
                "1590323074725216257"
            ],
            "text": "Wrote another article, thanks @aj_kerrigan for telling us about sys.stdlib_module_names - neat! https://t.co/JURec7MZyp"
        }
    },
    {
        "data": {
            "text": "Just got Copilot working in NeoVim - wicked tool!\n\nhttps://t.co/Jtggl04VpP",
            "id": "1590267549060837376",
            "edit_history_tweet_ids": [
                "1590267549060837376"
            ],
            "conversation_id": "1590267549060837376"
        }
    },
    {
        "data": {
            "conversation_id": "1589968886530998273",
            "edit_history_tweet_ids": [
                "1589968886530998273"
            ],
            "id": "1589968886530998273",
            "text": "I enjoy writing for our blog, here is an article about clean code in #Python: https://t.co/cSSCaM3D5n"
        }
    },
    {
        "data": {
            "conversation_id": "1589512237227839490",
            "text": "Happy Monday Pythonistas, what will you be working on this week? \ud83d\udca1\u2615\ufe0f\n\n@R_E_Beer's amazing job on our new Typer learning path on our platform inspired me to get the SQLModel up there too \ud83c\udf89\ud83c\udfa7\n\nThanks Robin \ud83d\ude4f",
            "edit_history_tweet_ids": [
                "1589512237227839490"
            ],
            "id": "1589512237227839490"
        }
    },
    {
        "data": {
            "conversation_id": "1588436035037724675",
            "edit_history_tweet_ids": [
                "1588436035037724675"
            ],
            "id": "1588436035037724675",
            "text": "So happy to hear Sherry, thank you!\n\ud83d\ude0d\ud83d\udd25\ud83d\udca1\ud83d\ude4f\ud83d\ude80 https://t.co/pVPPBFhTwZ"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585603678806892544"
            ],
            "conversation_id": "1585603678806892544",
            "id": "1585603678806892544",
            "text": "The role of luck https://t.co/oPi0nHp7ph #podcast #developer #career"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1585220541673517057"
            ],
            "text": "A timer decorator measuring the start and end timings of a function's execution, printing the duration. \n\nAs per best practice I use @wraps to preserve the function's metadata (e.g. docstring). \n\n#Python #tips https://t.co/nzEwBjnmdT",
            "id": "1585220541673517057",
            "conversation_id": "1585220541673517057",
            "attachments": {
                "media_keys": [
                    "3_1585219776594452480"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1585219776594452480",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ff_U_OrWIAAO2l5.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "If #Python exception chaining gets confusing you can use \"raise from None\" to suppress the initial exception, keeping the second one. Sometimes you might want this extra detail though. Example: https://t.co/LdIOCVZzE5",
            "id": "1584869471155388417",
            "edit_history_tweet_ids": [
                "1584869471155388417"
            ],
            "attachments": {
                "media_keys": [
                    "3_1584869106821611522"
                ]
            },
            "conversation_id": "1584869471155388417"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1584869106821611522",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Ff6WDj-XwAIk5LC.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1584840418218627072"
            ],
            "conversation_id": "1584840418218627072",
            "id": "1584840418218627072",
            "text": "\ud83c\udf89\ud83d\ude4f\ud83d\ude0d\ud83d\udc0d https://t.co/nlWTSbCTgR"
        }
    },
    {
        "data": {
            "text": "Technology and Mindset with new PDM Coach @HughTipping - great conversation and insights!\n\nhttps://t.co/7YJipaqIIA \n\n#Python #mindset #coaching #developer #stoicism",
            "id": "1582971779806425090",
            "edit_history_tweet_ids": [
                "1582971779806425090"
            ],
            "conversation_id": "1582971779806425090"
        }
    },
    {
        "data": {
            "conversation_id": "1578335755025326080",
            "edit_history_tweet_ids": [
                "1578358172829769729"
            ],
            "id": "1578358172829769729",
            "text": "Explained dunder (magic) methods (\ud83d\ude0d) and exception handling.\n\nFavorite moment: 1 + 'a' raises an exception in Python, not so in JavaScript \ud83d\ude2e"
        }
    },
    {
        "data": {
            "text": "I love teaching #Python, so gratifying!",
            "id": "1578335755025326080",
            "edit_history_tweet_ids": [
                "1578335755025326080"
            ],
            "conversation_id": "1578335755025326080"
        }
    },
    {
        "data": {
            "text": "It's #Hacktoberfest again, what are you working on / contributing to?\n\n#python #opensource",
            "id": "1577731319756460072",
            "edit_history_tweet_ids": [
                "1577731319756460072"
            ],
            "conversation_id": "1577731319756460072"
        }
    },
    {
        "data": {
            "conversation_id": "1575458454734606338",
            "edit_history_tweet_ids": [
                "1575458454734606338"
            ],
            "id": "1575458454734606338",
            "text": "Had a blast interviewing @zenxone, author of my favorite #Django book \ud83d\ude0d https://t.co/oDAaTAuJ9I"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1573555988631805952"
            ],
            "conversation_id": "1573555988631805952",
            "id": "1573555988631805952",
            "text": "Amazing interview, some really useful / applicable insights, super valuable for people seeking a job / career change. \n\nAll this while keeping it entertaining \ud83c\udf89\n\nThanks @Bleachin and @juliansequeira - no, \"I did not notice how little you prepared\" hahaha https://t.co/R0Tqr6556k"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1572872415440678912"
            ],
            "text": "What #Python libraries are you using this week? Anything new / cool you're learning?",
            "id": "1572872415440678912",
            "conversation_id": "1572872415440678912"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1572838165596995585"
            ],
            "text": "** unpacking is pretty elegant in #Python. Did you know you can use it to make a dataclass instance from a dictionary for example? https://t.co/4akvLeKpAk",
            "id": "1572838165596995585",
            "conversation_id": "1572838165596995585",
            "attachments": {
                "media_keys": [
                    "3_1572838160530345984"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572838160530345984",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdPX-UeXEAAz6jh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1572837169613443072"
                ]
            },
            "conversation_id": "1572837247203901441",
            "id": "1572837247203901441",
            "edit_history_tweet_ids": [
                "1572837247203901441"
            ],
            "text": "importlib.metadata is a nice (Standard Lib) module that lets you easily get package metadata\n\n#Python #tips https://t.co/JtsVA31m67"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572837169613443072",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdPXEpBXEAApcVw.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1572616814395359235"
                ]
            },
            "conversation_id": "1572616824713265158",
            "edit_history_tweet_ids": [
                "1572616824713265158"
            ],
            "id": "1572616824713265158",
            "text": "You can chain methods in #Python by having them return \"self\".\n\nAs elegant as it reads (libraries like pandas and sqlalchemy use method chaining), do keep in mind that it can be more difficult to debug methods that are chained. https://t.co/XrnFbof6ZJ"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572616814395359235",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdMOqR3XgAMJ5tf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Amazed you can actually do this with #Python's Standard Library \ud83d\udc0d\ud83d\ude0d\n\n$ python https://t.co/Hz6HXKmDx7 run-server\nUnknown command: 'run-server'. Did you mean runserver? https://t.co/ukExBrToSg",
            "id": "1572616056987852800",
            "edit_history_tweet_ids": [
                "1572616056987852800"
            ],
            "attachments": {
                "media_keys": [
                    "3_1572616033051066369"
                ]
            },
            "conversation_id": "1572616056987852800"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1572616033051066369",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FdMN8zIXwAEe7dp.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571761491153494020"
            ],
            "text": "And forgot to mention: fzf in Vim to navigate my project files super fast!",
            "conversation_id": "1571034443737092096",
            "id": "1571761491153494020"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571761399445200896"
            ],
            "text": "Totally need to recommend Hypermodern #Python in this context:\n\nhttps://t.co/LtruE1rgfn\n\nWas reading it again, so much in there!",
            "id": "1571761399445200896",
            "conversation_id": "1571034443737092096"
        }
    },
    {
        "data": {
            "conversation_id": "1571034443737092096",
            "text": "I will list a few (not necessarily only as per \"lately\")\n\n- Shell aliases: https://t.co/pnB7vyFaMw\n\n- Run pyflakes before saving a file in #Vim: https://t.co/a9MeAjNVF8\n\n- Use pre-commit to automate code quality: https://t.co/6XGvbBaBfD\n\n- Using a debugger to write #Python code.",
            "edit_history_tweet_ids": [
                "1571042800648728576"
            ],
            "id": "1571042800648728576"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571034443737092096"
            ],
            "text": "What is your favorite #Python #developer tool you discovered lately and why? \ud83d\udd25\ud83d\udca1\ud83c\udfa7\n\nPlease let me know, hoping to find productivity hacks and potential for software / code quality improvements in this thread ... \ud83d\udcaa\ud83d\ude4f",
            "conversation_id": "1571034443737092096",
            "id": "1571034443737092096"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571028947701493761"
            ],
            "text": "collections.Counter() is one of my favorite #Python data structures, it's so concise :) https://t.co/CekqteJ4Gr",
            "id": "1571028947701493761",
            "conversation_id": "1571028947701493761",
            "attachments": {
                "media_keys": [
                    "3_1571028867602694144"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571028867602694144",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc1qbnFXwAApHmc.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1571024995673055234",
            "id": "1571028350512267264",
            "edit_history_tweet_ids": [
                "1571028350512267264"
            ],
            "text": "For got the ALT code, you can copy it here though: https://t.co/7JSdPOKyB3"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1571027988506103810"
            ],
            "text": "#Python's sorted() returns a new sorted copy, the original list does not change. \n\nCalling sort() on a list on the other hand changes the list values \"in place\" (returning None). \n\nA simple example that shows the difference: https://t.co/zwO8NuMtUU",
            "attachments": {
                "media_keys": [
                    "3_1571027916674170881"
                ]
            },
            "conversation_id": "1571027988506103810",
            "id": "1571027988506103810"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571027916674170881",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc1pkQmWAAEHwLE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1571024995673055234",
            "attachments": {
                "media_keys": [
                    "3_1571024491018420224"
                ]
            },
            "text": "I love tuple unpacking (although here we apply it to a list). Did you know you can discard one or more values with _ / *_ -&gt; looks really elegant \ud83d\ude0d\ud83d\udc0d\n\nAlso note I wrote this code in the debugger, I cannot live without it these days, it makes me a lot faster.\n\n#Python #tips https://t.co/hWuMVTOY6a",
            "edit_history_tweet_ids": [
                "1571024995673055234"
            ],
            "id": "1571024995673055234"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1571024491018420224",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fc1mc3CXgAA90ls.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1570695849767997442",
            "edit_history_tweet_ids": [
                "1570695849767997442"
            ],
            "id": "1570695849767997442",
            "text": "Love this library, often my go to now if I need a simple yet beautiful graph!\n\n#dataviz #javascript https://t.co/mcYtzqWhUj"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1570447032753745920"
            ],
            "text": "I had a blast, thanks @TonyaSims for sharing your story on our podcast, very inspiring \ud83d\ude0d https://t.co/SJQjXCLvA7",
            "conversation_id": "1570447032753745920",
            "id": "1570447032753745920"
        }
    },
    {
        "data": {
            "conversation_id": "1570336403703345152",
            "id": "1570336403703345152",
            "edit_history_tweet_ids": [
                "1570336403703345152"
            ],
            "text": "&gt; This is why #Python is often called \"executable pseudocode.\" \ud83d\ude0d\n\n- quote from Bruce Eckel's \"Strong Typing vs. Strong Testing\" which is a great read."
        }
    },
    {
        "data": {
            "id": "1570031543103688706",
            "attachments": {
                "media_keys": [
                    "3_1570031448937095174"
                ]
            },
            "text": "#Python's zfill() string method is useful to fill a string with zeros.\n\nAlternatively you could also use an f-string: https://t.co/eh618pR75h",
            "edit_history_tweet_ids": [
                "1570031543103688706"
            ],
            "conversation_id": "1570031543103688706"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570031448937095174",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcnfSNAWYAY0tAg.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1570019529622781952"
                ]
            },
            "conversation_id": "1570019536350453761",
            "id": "1570019536350453761",
            "edit_history_tweet_ids": [
                "1570019536350453761"
            ],
            "text": "Newspaper3k is a really cool #Python library to scrape articles.\n\nBelow a quick example how the main features work.\n\nMore info: https://t.co/JmaoWGMEVr https://t.co/yEti6kkxa0"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1570019529622781952",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcnUcaGXgAAmB6r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1569986629208604674",
            "attachments": {
                "media_keys": [
                    "3_1569986605485592577"
                ]
            },
            "text": "Two ways to go from a date string to a datetime object in #Python: https://t.co/mgBHJUA8Pu",
            "edit_history_tweet_ids": [
                "1569986629208604674"
            ],
            "id": "1569986629208604674"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569986605485592577",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fcm2f-IXEAEOO57.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1569978894580588544"
                ]
            },
            "edit_history_tweet_ids": [
                "1569978933155708929"
            ],
            "conversation_id": "1569978933155708929",
            "id": "1569978933155708929",
            "text": "You can use zlib's crc32() to compute a (CRC or Cyclic Redundancy Check) checksum of data. The result is an unsigned 32-bit integer: https://t.co/A0EHBgzk9x"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569978894580588544",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcmvfIxWIAA72SJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1569758098033725440",
            "edit_history_tweet_ids": [
                "1569758098033725440"
            ],
            "text": "Mac users: if git starts freaking out, upgrade to OS 12.6\n\nIf git still freaks out (or goes into recursive install) after the upgrade, run this:\n\nsudo xcode-select -switch /Library/Developer/CommandLineTools\n\nThat did it for me. Solution found here:\nhttps://t.co/f02fiS0jdS",
            "conversation_id": "1569758098033725440"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1569555012971335680"
                ]
            },
            "conversation_id": "1569555209893855232",
            "id": "1569555209893855232",
            "edit_history_tweet_ids": [
                "1569555209893855232"
            ],
            "text": "You can give sorted() a callable for the optional key argument that determines how to sort. Same for min() / max(). \n\nHere we change it to sort and take the min / max based on the length of the string.\n\n#Python #tips https://t.co/c0DpHZ1BDr"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569555012971335680",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fcgt9-uXEAANnIA.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1569229128548913152",
            "edit_history_tweet_ids": [
                "1569245684188205058"
            ],
            "attachments": {
                "media_keys": [
                    "3_1569245655528243200"
                ]
            },
            "id": "1569245684188205058",
            "text": "Another example I found the other day: https://t.co/avNruAvmkO"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569245655528243200",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FccUnAcWAAAFLbd.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1569224756611661824",
            "id": "1569229302482489344",
            "edit_history_tweet_ids": [
                "1569229302482489344"
            ],
            "text": "Forgot the ALT of the image, code is here: https://t.co/tfv7RNLZfh"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1569229120080330754"
                ]
            },
            "conversation_id": "1569229128548913152",
            "edit_history_tweet_ids": [
                "1569229128548913152"
            ],
            "id": "1569229128548913152",
            "text": "Since #Python 3.8 there is new syntax := that assigns values to variables as part of a larger expression. It's called \"the walrus operator\". \n\nIn this example we use it in a listcomp avoiding a duplicated call to the double() function: https://t.co/plckcGxTJw"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569229120080330754",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FccFkhGWQAIrqda.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1569224756611661824",
            "attachments": {
                "media_keys": [
                    "3_1569224698168332288"
                ]
            },
            "text": "You can use decode() / encode() in #Python to go from bytes to strings and vice versa: https://t.co/GkVtuuhUzD",
            "edit_history_tweet_ids": [
                "1569224756611661824"
            ],
            "id": "1569224756611661824"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1569224698168332288",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FccBjIMX0AApKqr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1569224278976905217"
            ],
            "text": "Do you prefer single-quoted or double-quoted strings in #Python?",
            "id": "1569224278976905217",
            "conversation_id": "1569224278976905217"
        }
    },
    {
        "data": {
            "conversation_id": "1569222899986227200",
            "edit_history_tweet_ids": [
                "1569222899986227200"
            ],
            "text": "I also really like this quote:\n\n\"The true test of good code is how easy it is to change it\"\n\n- Martin Fowler\n\nIndeed! Good code can be changed without too much hassle or side effects.\n\nAnd yep you guessed right, reading Refactoring 2nd ed :)\n\n#programming #quote",
            "id": "1569222899986227200"
        }
    },
    {
        "data": {
            "text": "\u201cI'm not a great programmer; I'm just a good programmer with great habits.\u201d\n\u2015 Kent Beck\n\nVery true, habits are everything!\n\n#programming #quote",
            "conversation_id": "1569190061760970754",
            "edit_history_tweet_ids": [
                "1569190061760970754"
            ],
            "id": "1569190061760970754"
        }
    },
    {
        "data": {
            "text": "Another datetime example: https://t.co/gb1dmO6ufD",
            "id": "1568513026206179330",
            "edit_history_tweet_ids": [
                "1568513026206179330"
            ],
            "conversation_id": "1568513023576350722"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1568513023576350722"
            ],
            "text": "In #Python default argument values are evaluated once upon module load.\n\nThis means that if all_numbers is not provided in the example below, it keeps appending to the same default list that was initiated when the program started! https://t.co/WCGgVNlmJD",
            "id": "1568513023576350722",
            "conversation_id": "1568513023576350722",
            "attachments": {
                "media_keys": [
                    "3_1568512962201063425"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568512962201063425",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcR6OpGXEAE_0Gc.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1568507701491032064",
            "id": "1568507701491032064",
            "text": "How to log #Python errors with debug information?\n\nlogging.exception() will output a stack trace alongside the error message you specify: https://t.co/5hlfd1ZlCu",
            "attachments": {
                "media_keys": [
                    "3_1568507663905964034"
                ]
            },
            "edit_history_tweet_ids": [
                "1568507701491032064"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568507663905964034",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcR1aPaXwAInJ2j.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Forgot the ALT code, here it is:\nhttps://t.co/5rFT5qgnpN",
            "id": "1568256560845012993",
            "edit_history_tweet_ids": [
                "1568256560845012993"
            ],
            "conversation_id": "1568245284999667713"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1568256401415323648"
            ],
            "conversation_id": "1568254550003560448",
            "id": "1568256401415323648",
            "text": "Forgot the ALT code, here it is: https://t.co/kAg4Y5NOX6"
        }
    },
    {
        "data": {
            "text": "I love #Python's list comprehensions (\"listcomps\"). \n\nSet and dict comprehensions are beautiful too \ud83d\ude0d\ud83d\udc0d\n\nHere is a dictionary comprehension (\"dictcomp\") to swap keys + values of a dictionary: https://t.co/pnTQE6skID",
            "id": "1568256114663342080",
            "edit_history_tweet_ids": [
                "1568256114663342080"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568255931812560899"
                ]
            },
            "conversation_id": "1568256114663342080"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568255931812560899",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcOQdgSWQAMF5kJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1568254550003560448",
            "id": "1568254550003560448",
            "edit_history_tweet_ids": [
                "1568254550003560448"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568254537760231425"
                ]
            },
            "text": "functools.partial() lets you put a basic wrapper around (\"freeze\") an existing function so that you can set a default value where there normally wouldn't be one.\n\nHere we make our own print() defaulting the \"end\" keyword to a comma (instead of the default newline)\n\n#Python #tips https://t.co/UAtQlV4fQL"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568254537760231425",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcOPMXCX0AEbLi8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1568245284999667713"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568244966849126400"
                ]
            },
            "id": "1568245284999667713",
            "text": "Similar to the operator module's itemgetter() I posted about the other day, you can also use attrgetter() \n\nIt returns a callable object that fetches attr from its operand - https://t.co/AAC0Yo5hOo\n\nThis is pretty useful when sorting objects (example below).\n\n#Python #tips https://t.co/0nZPkRiK2T",
            "conversation_id": "1568245284999667713"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568244966849126400",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcOGfQnWIAAfP-Z.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1568196950314319872",
            "id": "1568196950314319872",
            "edit_history_tweet_ids": [
                "1568196950314319872"
            ],
            "text": "Finally picked up Fluent #Python again, what an amazing book!"
        }
    },
    {
        "data": {
            "id": "1568146931779502080",
            "text": "@juliansequeira \ud83c\udf89\ud83c\udfa7\ud83c\udf77\ud83c\udf77\ud83c\udf77 - who would have thought when we wrote those initial articles. Let's keep going!",
            "edit_history_tweet_ids": [
                "1568146931779502080"
            ],
            "conversation_id": "1567886958667472897"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1568133891248033793"
                ]
            },
            "conversation_id": "1568133899653357569",
            "id": "1568133899653357569",
            "edit_history_tweet_ids": [
                "1568133899653357569"
            ],
            "text": "You can use sys.version_info to check the #Python version that is running. \n\nSometimes I see it compared to a (major, minor) tuple to use certain features based on version: https://t.co/3nIypj3tnE"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568133891248033793",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcMhdzwXEAE7MCI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1568133501790175232"
            ],
            "id": "1568133501790175232",
            "text": "On a related note I wrote an article a while back when to write classes and why it matters:\nhttps://t.co/fxPH0hMMJV",
            "conversation_id": "1568133499395121152"
        }
    },
    {
        "data": {
            "text": "You can make a class callable in #Python by adding the __call__() dunder method. \n\nThis way a class can work as a function while taking advantage of typical class features like keeping state. https://t.co/zPDg4wF8sp",
            "id": "1568133499395121152",
            "edit_history_tweet_ids": [
                "1568133499395121152"
            ],
            "attachments": {
                "media_keys": [
                    "3_1568132670919512064"
                ]
            },
            "conversation_id": "1568133499395121152"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1568132670919512064",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcMgWxrXkAA0pwW.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1567895633599647744",
            "edit_history_tweet_ids": [
                "1567895633599647744"
            ],
            "conversation_id": "1567895630881718273",
            "text": "A nice example of the Zen of #Python's:\n\nErrors should never pass silently.\nUnless explicitly silenced."
        }
    },
    {
        "data": {
            "conversation_id": "1567895630881718273",
            "edit_history_tweet_ids": [
                "1567895630881718273"
            ],
            "text": "Nice to see zip() got a \"strict\" keyword argument since 3.10:\nhttps://t.co/7dY9kP8kud\n\n&gt; Without the strict=True argument, any bug that results in iterables of different lengths will be silenced, possibly manifesting as a hard-to-find bug in another part of the program. https://t.co/4OHaDhnWH8",
            "attachments": {
                "media_keys": [
                    "3_1567895522760921090"
                ]
            },
            "id": "1567895630881718273"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567895522760921090",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcJIq78XEAIcuj3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567886958667472897",
            "edit_history_tweet_ids": [
                "1567886958667472897"
            ],
            "text": "Wow &gt; 5 years of @Pybites already, #Python's datetime makes it easy to calculate: https://t.co/rFOH4Fwmto",
            "attachments": {
                "media_keys": [
                    "3_1567886934273302528"
                ]
            },
            "id": "1567886958667472897"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567886934273302528",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcJA3BVWIAAXx_o.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567884756058083331"
            ],
            "conversation_id": "1567884756058083331",
            "id": "1567884756058083331",
            "text": "Hey Pythonista friends, what are you working on this week? Any cool #Python modules or tricks you picked up?"
        }
    },
    {
        "data": {
            "id": "1567819994842497024",
            "edit_history_tweet_ids": [
                "1567819994842497024"
            ],
            "conversation_id": "1567819686229712897",
            "text": "@jpluimers @learn_byexample ALT works great on these, thanks again!"
        }
    },
    {
        "data": {
            "text": "Sometimes you need a bit of tolerance in your tests, for example when dealing with floats.\n\npytest's approx() asserts that two numbers (or two sets of numbers) are equal to each other within some tolerance which is perfect for this: https://t.co/muNnrksHh1",
            "id": "1567819686229712897",
            "edit_history_tweet_ids": [
                "1567819686229712897"
            ],
            "attachments": {
                "media_keys": [
                    "3_1567818868738908161"
                ]
            },
            "conversation_id": "1567819686229712897"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567818868738908161",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcIC9FdWYAEBn4Y.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "In case you wonder about my code images:\n\n1. I use: https://t.co/N8LaPHIVKe\n\n2. via CLI: https://t.co/RL6A0BJEhB\n\n3. with shell alias:\nfunction carb {\n    (carbon -c -b \\#A0D6B4 -w bw -d dest_dir)\n}\n\n(-c = from clipboard, -b = custom color, -w = style image control buttons)",
            "id": "1567798559449255937",
            "edit_history_tweet_ids": [
                "1567798559449255937"
            ],
            "conversation_id": "1567797599767347200"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567797599767347200"
            ],
            "attachments": {
                "media_keys": [
                    "3_1567797561712431105"
                ]
            },
            "id": "1567797599767347200",
            "text": "Often you don't need a regex, #Python's string methods cover a lot! https://t.co/KfFejbQoZy",
            "conversation_id": "1567797599767347200"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567797561712431105",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcHvk2mX0AEA3ja.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567789055525404674",
            "attachments": {
                "media_keys": [
                    "3_1567788258272202752"
                ]
            },
            "id": "1567789055525404674",
            "edit_history_tweet_ids": [
                "1567789055525404674"
            ],
            "text": "Ever wondered how pathlib.Path() overloads the \"/\" in an operation like:\n\nPath(dirname) / filename\n\nAccording to this SO answer https://t.co/lx9OT4gHV4, the Path class implements the __truediv__ dunder method.\n\nThe power of #Python's data model!\n\n(Code snippet from SO thread) https://t.co/fOtckkQcwx"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567788258272202752",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcHnHUlX0AAxrhl.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567787138535538690",
            "attachments": {
                "media_keys": [
                    "3_1567787128901324800"
                ]
            },
            "text": "Here is how you can create a gif image using the imageio library: https://t.co/ETlVZxTwct",
            "edit_history_tweet_ids": [
                "1567787138535538690"
            ],
            "id": "1567787138535538690"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567787128901324800",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcHmFlWX0AAp-ef.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1567780132969906177",
            "edit_history_tweet_ids": [
                "1567780132969906177"
            ],
            "conversation_id": "1567780132969906177",
            "text": "Who has used #Python's 3.10 \"Pattern Matching\" (match / case statement) and how? Seeking some examples here ... thanks."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567514607660552195"
            ],
            "text": "Does below picture seem familiar to you?\n\nDon't worry, imposter syndrome is real, but it's ok. It's also a driving force to keep improving every day and stay humble.\n\nBesides, \"actual impostors don't get impostor syndrome\" - https://t.co/KLLb86BQRb\n\n#developer #impostersyndrome https://t.co/5iprLR8LuG",
            "id": "1567514607660552195",
            "conversation_id": "1567514607660552195",
            "attachments": {
                "media_keys": [
                    "3_1567507924821442563"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567507924821442563",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcDoJxGXgAMfr-Y.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python sets are great to deduplicate values but do note that they don't preserve order as lists do: https://t.co/KD9aXmWrQw",
            "id": "1567502042758782976",
            "edit_history_tweet_ids": [
                "1567502042758782976"
            ],
            "attachments": {
                "media_keys": [
                    "3_1567501920645832709"
                ]
            },
            "conversation_id": "1567502042758782976"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567501920645832709",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcDisRzWYAUBbGa.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567473890464604163"
            ],
            "text": "I have mostly used the \"Declarative Mapping way\" of defining models in SQLAlchemy:\nhttps://t.co/Rbh5vYpNu5\n\nHowever if you want to define a model from say a dataclass, the \"Classical Mapping\" is a powerful alternative. \n\nExample below and here:\nhttps://t.co/26MJHvpprJ https://t.co/CthgW1pJPU",
            "id": "1567473890464604163",
            "conversation_id": "1567473890464604163",
            "attachments": {
                "media_keys": [
                    "3_1567473696230543360"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567473696230543360",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcDJBZqXEAAn9S_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567470003632410625"
            ],
            "text": "Using split(\"\\n\") to split a text into lines can return odd results if you are on Windows or an (older) Apple computer which use \\r\\n and \\r for newlines respectively. \n\nIn those instances, splitlines() has you covered.\n\n#Python #tips https://t.co/ULVa6aRiLU",
            "attachments": {
                "media_keys": [
                    "3_1567469952277401605"
                ]
            },
            "conversation_id": "1567470003632410625",
            "id": "1567470003632410625"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567469952277401605",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcDFneWX0AUJig-.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1566761709070589953",
            "id": "1567421787486420992",
            "edit_history_tweet_ids": [
                "1567421787486420992"
            ],
            "text": "Added a pre-commit hook to update the index automatically when I add new tips :)\n\nhttps://t.co/FFyQnDUdtn"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1567420199711678464"
                ]
            },
            "text": "You can use the time module to get a Unix timestamp in #Python. \n\nAnd you use use datetime.fromtimestamp() to convert it into a datetime object: https://t.co/amwOBbX8rh",
            "conversation_id": "1567420208150618113",
            "edit_history_tweet_ids": [
                "1567420208150618113"
            ],
            "id": "1567420208150618113"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567420199711678464",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcCYXfmWIAA_vNz.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567418855189790720",
            "edit_history_tweet_ids": [
                "1567418855189790720"
            ],
            "text": "A datetime.timedelta object has a convenient total_seconds() method to get the time difference. You can use \"seconds\" for a rounded int: https://t.co/VRi6kTtkrx",
            "attachments": {
                "media_keys": [
                    "3_1567418793206452224"
                ]
            },
            "id": "1567418855189790720"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567418793206452224",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FcCXFn9XkAAFbFe.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1567188172626444289"
                ]
            },
            "conversation_id": "1567188218122043393",
            "edit_history_tweet_ids": [
                "1567188218122043393"
            ],
            "id": "1567188218122043393",
            "text": "In #Python you can name a slice using the slice() built-in function: https://t.co/EIxnrzd4B9"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567188172626444289",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb_FVvWXwAEWhZ4.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1567186686425153537"
                ]
            },
            "conversation_id": "1567186760521629698",
            "id": "1567186760521629698",
            "edit_history_tweet_ids": [
                "1567186760521629698"
            ],
            "text": "Use the #Python built-ins functions!\n\n- any(iterable) - Return True if any element of the iterable is true.\n- all(iterable) - Return True if all elements of the iterable are true\n\nReads like English \ud83d\ude0d https://t.co/4sN34ZXMqX"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567186686425153537",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb_D_O0XwAE_d_T.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1567148211306991616",
            "id": "1567148211306991616",
            "edit_history_tweet_ids": [
                "1567148211306991616"
            ],
            "attachments": {
                "media_keys": [
                    "3_1567146777622581250"
                ]
            },
            "text": "Using the right data structure can impact performance.\n\nA deque (collections module) is a list-like container with fast appends and pops on either end.\n\nHere we compare a deque to a list and see that with former inserts + deletes at the beginning are much faster.\n\n#Python #tips https://t.co/lj6nCczWt7"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567146777622581250",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb-fsO8XkAILA98.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567106789182693381"
            ],
            "text": "How readable are your variable names? In our new podcast episode I provide some tips: https://t.co/d3WCWlu2nG",
            "id": "1567106789182693381",
            "conversation_id": "1567106789182693381"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567106651009830914"
            ],
            "text": "Join myself and @juliansequeira next week for live #developer #mindset training ... https://t.co/2CWvBoiT8n",
            "id": "1567106651009830914",
            "conversation_id": "1567106651009830914"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1567060609627312134"
            ],
            "text": "Set operations are a powerful feature, they will make your code more concise (see example below - no loops!)\n\nAnd as sets are implemented using hash tables, you can generally expect O(1) performance \ud83d\ude2e\n\n#Python #tips https://t.co/ck1YrvnAw8",
            "attachments": {
                "media_keys": [
                    "3_1567060597921005568"
                ]
            },
            "conversation_id": "1567060609627312134",
            "id": "1567060609627312134"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567060597921005568",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb9RT6iXwAAUA8f.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1567057188622835712"
                ]
            },
            "text": "itertools.count() makes an iterator that returns evenly spaced values starting from a number. You can also give it a \"step\" argument.\n\n#Python #tips https://t.co/7AWBKERApQ",
            "conversation_id": "1567057198806667265",
            "edit_history_tweet_ids": [
                "1567057198806667265"
            ],
            "id": "1567057198806667265"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1567057188622835712",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb9ONd6WIAAHOgr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1566828880249364485",
            "attachments": {
                "media_keys": [
                    "3_1566828836486012928"
                ]
            },
            "edit_history_tweet_ids": [
                "1566828880249364485"
            ],
            "conversation_id": "1566828880249364485",
            "text": "You can use a lambda (anonymous) function to sort a dictionary by value, but using operator's itemgetter() is nice too.\n\n#Python #tips https://t.co/0M5RRfqYdl"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566828836486012928",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb5-hn6WYAAxr3V.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1566827156050743297",
            "attachments": {
                "media_keys": [
                    "3_1566826939314225152"
                ]
            },
            "text": "If you need the index inside a loop in #Python, use the enumerate() built-in function. \n\nYou can even give it a start keyword arg: https://t.co/hcfxBF21h8",
            "edit_history_tweet_ids": [
                "1566827156050743297"
            ],
            "conversation_id": "1566827156050743297"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566826939314225152",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb58zMZWQAAcUa7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1566761709070589953"
            ],
            "id": "1566761709070589953",
            "text": "I started a new repo for all the code snippets I am posting here: https://t.co/qG4lo0Ktev\n\n#Python #tips #code",
            "conversation_id": "1566761709070589953"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1566760827704774658"
            ],
            "text": "I also built a little tool to quickly find emojis from the command line and copy them to the OS clipboard:\nhttps://t.co/B2tMjWjqHv",
            "id": "1566760827704774658",
            "conversation_id": "1566746524909977602"
        }
    },
    {
        "data": {
            "conversation_id": "1566746524909977602",
            "id": "1566746524909977602",
            "text": "You want emojis in Python? Check out the emoji library (PyPI): https://t.co/H5fRymL0tn",
            "attachments": {
                "media_keys": [
                    "3_1566746099502780416"
                ]
            },
            "edit_history_tweet_ids": [
                "1566746524909977602"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566746099502780416",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb4zRsoXkAAl0k1.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Here is a video I did on how to use it: https://t.co/tAoKp5wOsJ",
            "conversation_id": "1566727863042285571",
            "edit_history_tweet_ids": [
                "1566727948698361857"
            ],
            "id": "1566727948698361857"
        }
    },
    {
        "data": {
            "text": "I love poetry but use it less these days. For packaging flit is awesome too!\n\n$ flit build\n$ flit publish\n\n#python #packaging",
            "id": "1566727863042285571",
            "edit_history_tweet_ids": [
                "1566727863042285571"
            ],
            "conversation_id": "1566727863042285571"
        }
    },
    {
        "data": {
            "conversation_id": "1566701626181689349",
            "edit_history_tweet_ids": [
                "1566701626181689349"
            ],
            "text": "You can enforce \"keyword-only\" arguments in #Python by adding a * in the function arguments, arguments after this can only be supplied as keyword arguments: https://t.co/1pIOvdMIiZ",
            "attachments": {
                "media_keys": [
                    "3_1566701538801864704"
                ]
            },
            "id": "1566701626181689349"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566701538801864704",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb4Kv7FX0AAhvNc.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1566440518313181184",
            "attachments": {
                "media_keys": [
                    "3_1566440446716530690"
                ]
            },
            "text": "Since #Python 3.8 an = specifier was added to f-strings so that it will show both the variable name as well as the value it holds, for example: https://t.co/8Y7MTmsN2D",
            "edit_history_tweet_ids": [
                "1566440518313181184"
            ],
            "conversation_id": "1566440518313181184"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566440446716530690",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fb0dSXRX0AI6dH8.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1566358917059338240"
            ],
            "id": "1566358917059338240",
            "text": "@aj_kerrigan also mentioned in The Programmer's Brain, have you read it?",
            "conversation_id": "1566357679664152578"
        }
    },
    {
        "data": {
            "conversation_id": "1566357679664152578",
            "text": "I am finishing \"A Philosophy of Software Design\" by John K. Ousterhout - great book on software design and managing complexity in your code. I'll post some notes later this week ...\n\n#software #books #developer",
            "edit_history_tweet_ids": [
                "1566357679664152578"
            ],
            "id": "1566357679664152578"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1566356882415095808"
            ],
            "attachments": {
                "media_keys": [
                    "3_1566356625165885441"
                ]
            },
            "id": "1566356882415095808",
            "text": "str.title() usually works just fine, but in this example it does not work well for \"let's\" and \"isn't\".\n\nIn those instances you can use string.capwords() which will get you the desired result.\n\n#Python #tips https://t.co/Zo9F1KT2Hs",
            "conversation_id": "1566356882415095808"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566356625165885441",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbzRDTqXoAELL3i.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1566350530095489025"
                ]
            },
            "edit_history_tweet_ids": [
                "1566350710639235072"
            ],
            "conversation_id": "1566350481802280962",
            "id": "1566350710639235072",
            "text": "= much shorter + generator = more performant. https://t.co/DUcsleOvkl"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1566350530095489025",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbzLghwWIAEUAMl.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1566350481802280962",
            "text": "Retrieving note files, first go:\n\ndef get_notes(notes_dir):\n    return [\n        notes_dir / file\n        for file in os.listdir(notes_dir)\n        if file.endswith(\".md\")\n    ]\n\n\ud83e\udd14let's use #Python pathlib:\n\ndef get_notes(notes_dir):\n    yield from notes_dir.glob(\"*.md\")\n\n\ud83d\ude2e\ud83d\ude0d\ud83d\udc0d",
            "edit_history_tweet_ids": [
                "1566350481802280962"
            ],
            "conversation_id": "1566350481802280962"
        }
    },
    {
        "data": {
            "conversation_id": "1565983362765955072",
            "id": "1565983362765955072",
            "edit_history_tweet_ids": [
                "1565983362765955072"
            ],
            "attachments": {
                "media_keys": [
                    "3_1565983320357355520"
                ]
            },
            "text": "What if you are not sure your csv file has a header?\n\nIt turns out that the csv module has a Sniffer class that can figure it out for you!\n\nhttps://t.co/CgQWD4y00G\n\n#Python #tips https://t.co/gnCbExa0hO"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565983320357355520",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbt9iG4WQAAs1BZ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Here is how to replace all vowels from a text while keeping a count of the number of replacements made:\n\nYou can use re.subn() to do regex replacing. It returns a tuple of the new (replaced) string and the number of replacements made.\n\n#Python #regex https://t.co/0VJdp4dlSW",
            "id": "1565971862294827010",
            "edit_history_tweet_ids": [
                "1565971862294827010"
            ],
            "attachments": {
                "media_keys": [
                    "3_1565971853381963776"
                ]
            },
            "conversation_id": "1565971862294827010"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565971853381963776",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbtzGpEXkAA-X31.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python's pathlib is awesome ... many things you can do but today I used these two nice methods to get home + current working directories: https://t.co/9B2AuqUeSe",
            "id": "1565938272571990016",
            "edit_history_tweet_ids": [
                "1565938272571990016"
            ],
            "attachments": {
                "media_keys": [
                    "3_1565938082851000321"
                ]
            },
            "conversation_id": "1565938272571990016"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565938082851000321",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbtUY8CXEAE570o.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "If you like the code images I post, I generate those with https://t.co/kLhxe9iEN9 - an awesome website!\n\nA while ago I made a command line script to make this even easier:\nhttps://t.co/RL6A0BJEhB\n\n~/.zshrc\nalias carb=\"carbon -c -d $HOME/Downloads\"\n\n#teaching #Python #opensource",
            "conversation_id": "1565623948594876416",
            "edit_history_tweet_ids": [
                "1565623948594876416"
            ],
            "id": "1565623948594876416"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1565623186334654465"
                ]
            },
            "text": "New in #Python 3.3: inspect.signature\n\n&gt; The Signature object represents the call signature of a callable object and its return annotation. To retrieve a Signature object, use the signature() function.\n\nhttps://t.co/9qRmV3e0MD\n\nI often use the dir() built-in to inspect objects. https://t.co/5HfZszzX7d",
            "conversation_id": "1565623364550541313",
            "edit_history_tweet_ids": [
                "1565623364550541313"
            ],
            "id": "1565623364550541313"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565623186334654465",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbo1_jGXoAEvLh4.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565622103495286785",
            "text": "\ud83d\udc4b new followers! I am Bob and I tweet about #Python, #developer and #mindset related topics (and occasionally about the #books I read). Thanks for the follow and hit me up if you have specific questions ...",
            "edit_history_tweet_ids": [
                "1565622103495286785"
            ],
            "id": "1565622103495286785"
        }
    },
    {
        "data": {
            "conversation_id": "1565621297543057409",
            "edit_history_tweet_ids": [
                "1565621297543057409"
            ],
            "id": "1565621297543057409",
            "attachments": {
                "media_keys": [
                    "3_1565621101069307904"
                ]
            },
            "text": "Here is how you can run a function every 5 minutes in #Python (Standard Library vs PyPI package): https://t.co/GZHyrlUh4L"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565621101069307904",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbo0GK4XkAA_1Nb.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565311883640463360",
            "edit_history_tweet_ids": [
                "1565311883640463360"
            ],
            "text": "New PyBites podcast:\nHow to get more things done consistently? https://t.co/gpBqZW0mwq \n#productivity #WorkLifeBalance",
            "id": "1565311883640463360"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1565248172796043264"
            ],
            "text": "You use:\n\nif __name__ == \"__main__\":\n\n... to write code that only executes if the module (script) is called directly, not when it gets imported into another module. You typically use it at the end of your script.\n\n#python #tips https://t.co/onAUSiYqyf",
            "attachments": {
                "media_keys": [
                    "3_1565247630179008515"
                ]
            },
            "conversation_id": "1565248172796043264",
            "id": "1565248172796043264"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565247630179008515",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbjgbTZXgAM1HH9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1565246871345438721",
            "edit_history_tweet_ids": [
                "1565246871345438721"
            ],
            "attachments": {
                "media_keys": [
                    "3_1565246791716667394"
                ]
            },
            "id": "1565246871345438721",
            "text": "You can use the abstractmethod decorator to force derived classes to implement certain methods.\n\n#python #tips https://t.co/MwdAHWh59c"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1565246791716667394",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fbjfqf4XgAIWmm8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1564908952336343040"
            ],
            "text": "Here are two ways to pluralize words in #Python: https://t.co/RuvhOvdjZm",
            "id": "1564908952336343040",
            "conversation_id": "1564908952336343040",
            "attachments": {
                "media_keys": [
                    "3_1564908930794459136"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564908930794459136",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbesYZ3XEAAISDv.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564669445800431616",
            "text": "Going live on Facebook the 12th to talk about #developer #mindset and what makes @pybites approach unique and effective ... https://t.co/2CWvBoiT8n",
            "edit_history_tweet_ids": [
                "1564669445800431616"
            ],
            "id": "1564669445800431616"
        }
    },
    {
        "data": {
            "conversation_id": "1564653256000823297",
            "text": "I had the pleasure to talk with @aj_kerrigan on our show about the fascinating Programmer's Brain book. \n\nWe discuss some lessons from the book that any #Python #developer will greatly benefit from!\n\nEnjoy: https://t.co/3MMSaxabAY",
            "edit_history_tweet_ids": [
                "1564653256000823297"
            ],
            "id": "1564653256000823297"
        }
    },
    {
        "data": {
            "conversation_id": "1564522017436712960",
            "text": "Really inspiring what @Ry_Austin did with us in PDM! https://t.co/oRJIiq5I6V",
            "edit_history_tweet_ids": [
                "1564522017436712960"
            ],
            "id": "1564522017436712960"
        }
    },
    {
        "data": {
            "conversation_id": "1564517895907966976",
            "attachments": {
                "media_keys": [
                    "3_1564517689380507648"
                ]
            },
            "text": "Did you know about this nice \"dunder method shortcut\"?\n\nFunctools' total_ordering decorator: write 2 comparison magic methods, get 5 in return :) https://t.co/rdfD1gGQjV",
            "edit_history_tweet_ids": [
                "1564517895907966976"
            ],
            "id": "1564517895907966976"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564517689380507648",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbZIjKBXEAAA3Cf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564517460321116161",
            "edit_history_tweet_ids": [
                "1564517460321116161"
            ],
            "attachments": {
                "media_keys": [
                    "3_1564517417577062405"
                ]
            },
            "id": "1564517460321116161",
            "text": "#Python has so many cool string methods, and new ones get added regularly: https://t.co/6WUBnfbW7q"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1564517417577062405",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FbZITVeXoAUTfrN.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1564294585035231233",
            "edit_history_tweet_ids": [
                "1564294585035231233"
            ],
            "text": "Awesome book, congrats + great work! Also honored to have written the forward for it :)\n\n#Django #developer #books https://t.co/kNzgJHvYxH",
            "id": "1564294585035231233"
        }
    },
    {
        "data": {
            "text": "What are you coding in #Python today?",
            "conversation_id": "1561633961322942464",
            "edit_history_tweet_ids": [
                "1561633961322942464"
            ],
            "id": "1561633961322942464"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1561294681249648642"
                ]
            },
            "conversation_id": "1561294918923993088",
            "edit_history_tweet_ids": [
                "1561294918923993088"
            ],
            "id": "1561294918923993088",
            "text": "Love looking at source, #Django's slugify: https://t.co/ztePL46a3T https://t.co/LiHYCOYU3m"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561294681249648642",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FarVPZGXkAIL4lQ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1561292212452859904",
            "edit_history_tweet_ids": [
                "1561292212452859904"
            ],
            "text": "Fascinating thing about highly successful #entrepreneurs is that they calculate the worst case scenario. They don't like losing so they protect the downside.",
            "id": "1561292212452859904"
        }
    },
    {
        "data": {
            "conversation_id": "1561291546481262593",
            "edit_history_tweet_ids": [
                "1561291546481262593"
            ],
            "id": "1561291546481262593",
            "text": "What do you often forget when coding?\n\nOne thing I often overlook is adding enctype=\"multipart/form-data\" to my HTML form when I want file upload support :)"
        }
    },
    {
        "data": {
            "text": "Use colors in your terminal without #Python libraries (of course usually you would go with colorama or rich) https://t.co/FCKEjEfG3u",
            "id": "1561268549565517824",
            "edit_history_tweet_ids": [
                "1561268549565517824"
            ],
            "attachments": {
                "media_keys": [
                    "3_1561268507907706881"
                ]
            },
            "conversation_id": "1561268549565517824"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1561268507907706881",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Faq9b5zX0AESJ1f.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1560976200910209024"
            ],
            "attachments": {
                "media_keys": [
                    "3_1560976098925678592"
                ]
            },
            "id": "1560976200910209024",
            "text": "There is a module for everything in #Python!\n\nConvert Markdown syntax into HTML\n\nhttps://t.co/k9xRA3rw9l https://t.co/raUaDDBog0",
            "conversation_id": "1560976200910209024"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560976098925678592",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FamzfddXEAA-BGN.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1560971483400257536",
            "edit_history_tweet_ids": [
                "1560971483400257536"
            ],
            "conversation_id": "1560970898911420418",
            "text": "Another one I picked up again recently and gives me so much inspiration is: https://t.co/rHFWwkhAaM\n\n#business #entrepreneur"
        }
    },
    {
        "data": {
            "text": "Need to get some more steps in this weekend? \n\nTune in to our podcast: https://t.co/oONjlZJAsj\n\n#Python #developer #mindset",
            "id": "1560970898911420418",
            "edit_history_tweet_ids": [
                "1560970898911420418"
            ],
            "conversation_id": "1560970898911420418"
        }
    },
    {
        "data": {
            "id": "1560662072782094336",
            "edit_history_tweet_ids": [
                "1560662072782094336"
            ],
            "conversation_id": "1560527214889914368",
            "text": "Better / correction: drop the lambda! \n\nhttps://t.co/ZEWgSn31i4\n\n=&gt; key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower).\n\nThanks for the reminder @BKorren https://t.co/rjkWrj79j4",
            "attachments": {
                "media_keys": [
                    "3_1560661812680740864"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560661812680740864",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaiVpl9aUAA4Uod.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Introducing a project template for modern #Python packages https://t.co/sB5ZX8OZZd",
            "id": "1560546342111531008",
            "edit_history_tweet_ids": [
                "1560546342111531008"
            ],
            "conversation_id": "1560546342111531008"
        }
    },
    {
        "data": {
            "id": "1560527214889914368",
            "edit_history_tweet_ids": [
                "1560527214889914368"
            ],
            "attachments": {
                "media_keys": [
                    "3_1560527139920920576"
                ]
            },
            "text": "Sort files by creation date in #Python: https://t.co/cUQn6lOPnR",
            "conversation_id": "1560527214889914368"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560527139920920576",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FagbKm1XwAAPpA0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1560238563362496518"
            ],
            "conversation_id": "1560238563362496518",
            "id": "1560238563362496518",
            "text": "0 podcasts last week, 2 this week! https://t.co/e7qEpRCQaD"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1560212522434760704"
                ]
            },
            "text": "#Python, am I on Windows? https://t.co/fzS97NuBqG",
            "conversation_id": "1560212562704203777",
            "edit_history_tweet_ids": [
                "1560212562704203777"
            ],
            "id": "1560212562704203777"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560212522434760704",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fab9BdXXEAAKa8Z.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1560189370204028929",
            "id": "1560190065657221120",
            "edit_history_tweet_ids": [
                "1560190065657221120"
            ],
            "attachments": {
                "media_keys": [
                    "3_1560189887273472003"
                ]
            },
            "text": "Btw 3.10 introduced the \"strict\" keyword for the zip() built-in function, so it now warns you if the passed in iterables are not of the same length: https://t.co/pfSb7GMNgD"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560189887273472003",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fabob60XkAMFCM4.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1560189370204028929"
            ],
            "attachments": {
                "media_keys": [
                    "3_1560189130893672449"
                ]
            },
            "id": "1560189370204028929",
            "text": "#Python #tips: make a dict of two iterables (assuming same length, if not look into itertools' zip_longest) https://t.co/ZOj5ysoucC",
            "conversation_id": "1560189370204028929"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1560189130893672449",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/Fabnv5FXwAEs3Zv.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1560171403176861696"
            ],
            "conversation_id": "1560171403176861696",
            "id": "1560171403176861696",
            "text": "Very cool #vim trick \ud83d\udcaa\n\n\" opens the file under cursor in new vertical split window\nnmap gf :vertical wincmd f&lt;CR&gt;\n\nIt even ignores the extension so typing gf while on a string called 20220817104446, it manages to open a file called https://t.co/Jk1k2DmkKy \ud83d\ude2e"
        }
    },
    {
        "data": {
            "id": "1559860984835178496",
            "attachments": {
                "media_keys": [
                    "3_1559860958264266754"
                ]
            },
            "edit_history_tweet_ids": [
                "1559860984835178496"
            ],
            "conversation_id": "1559860984835178496",
            "text": "#Python template strings are a nice way to build up your strings beforehand: https://t.co/XX8fJaEIRX"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559860958264266754",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaW9RuxXkAI-QDE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559821246333943810",
            "id": "1559821246333943810",
            "edit_history_tweet_ids": [
                "1559821246333943810"
            ],
            "text": "As a #developer spend a good hour a week optimizing your tooling, the effect this has on your #productivity will compound over time.\n\nToday I am setting up a simple (command line) Zettelkasten flow to take better notes. \n\nWhat about you?"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1559586442636132357"
            ],
            "id": "1559586442636132357",
            "text": "Check out this episode if you want to learn more about #Python type hints ... https://t.co/pFYjBRqOwB",
            "conversation_id": "1559586442636132357"
        }
    },
    {
        "data": {
            "id": "1559218151623122944",
            "edit_history_tweet_ids": [
                "1559218151623122944"
            ],
            "text": "For non-tech #reading @Scribd is really good, so many #books on that service, happy there is a Netflix for books in the end :)",
            "conversation_id": "1559218151623122944"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1559217924107370496"
            ],
            "text": "And what are you reading this week?",
            "id": "1559217924107370496",
            "conversation_id": "1559122580925202432"
        }
    },
    {
        "data": {
            "conversation_id": "1559217844813971456",
            "text": "What is your favorite #Python library or open source project and why?",
            "edit_history_tweet_ids": [
                "1559217844813971456"
            ],
            "id": "1559217844813971456"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1559131762386780162"
            ],
            "id": "1559131762386780162",
            "text": "Book tip: Outdoor kids in an inside world (Rinella) - @juliansequeira",
            "conversation_id": "1559122381242859521"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1559124475953700864"
            ],
            "text": "#Python #tips: did you know that functools.partial() lets you put a basic wrapper around an existing function? Here is an example of how we could use it for print(): https://t.co/JTDwZKax0G",
            "id": "1559124475953700864",
            "conversation_id": "1559124475953700864",
            "attachments": {
                "media_keys": [
                    "3_1559124361768013824"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1559124361768013824",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FaMfWK_XEAANpvd.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1559122580925202432",
            "edit_history_tweet_ids": [
                "1559122580925202432"
            ],
            "id": "1559122580925202432",
            "text": "Started reading The Programmer's Brain: What Every Programmer Needs to Know about Cognition - fascinating and already seems a staple / programmer must read."
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1559122381242859521"
            ],
            "text": "Weekend win: being in nature makes you genuinely happy. Do more of that.",
            "conversation_id": "1559122381242859521",
            "id": "1559122381242859521"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1558015771518926848"
            ],
            "text": "Be careful ... 10 packages have been removed from the #Python Package Index (PyPI) because they were found harvesting data - https://t.co/tfj7Nd2OL0",
            "conversation_id": "1558015771518926848",
            "id": "1558015771518926848"
        }
    },
    {
        "data": {
            "conversation_id": "1557977909943484416",
            "edit_history_tweet_ids": [
                "1557977909943484416"
            ],
            "text": "From the #Python uppercase convention of constants you wouldn't override them, but nothing stops you either!\n\nSince 3.8 we can have mypy yell at you though :)\nhttps://t.co/9c4iBPmX6I https://t.co/PImAITUSh3",
            "attachments": {
                "media_keys": [
                    "3_1557977622637944832"
                ]
            },
            "id": "1557977909943484416"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557977622637944832",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ8MZK1XoAA5Uxh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1557716585212743681",
            "edit_history_tweet_ids": [
                "1557716585212743681"
            ],
            "id": "1557716585212743681",
            "text": "Another nice quote from the Robust #Python book: \n\n\"This is the mark of robust code; you are making it increasingly harder for #developers to make mistakes, which reduces their error rates, which reduces the number of bugs users will experience.\""
        }
    },
    {
        "data": {
            "conversation_id": "1557671922879660032",
            "edit_history_tweet_ids": [
                "1557671922879660032"
            ],
            "attachments": {
                "media_keys": [
                    "3_1557671884640161797"
                ]
            },
            "id": "1557671922879660032",
            "text": "\"Errors should never pass silently\", but sometimes you really want to mute an exception.\n\nYou can do so with contextlib's suppress context manager, see below.\n\n#Python #tips https://t.co/lD4QEO3llk"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557671884640161797",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZ32U4CXEAUDhga.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1557269429729329157",
            "edit_history_tweet_ids": [
                "1557269429729329157"
            ],
            "attachments": {
                "media_keys": [
                    "3_1557269371822784512"
                ]
            },
            "id": "1557269429729329157",
            "text": "How to remove items from a list while iterating? You can use a list comprehension. In this example we remove uneven numbers using one: https://t.co/u7HLyUl7RY"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1557269371822784512",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZyIPi8XwAAADa9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1556925656784674817",
            "id": "1556925656784674817",
            "text": "#python #tip: if you need to use a slice more than once you can define and reuse it as a slice object = more DRY (don't repeat yourself): https://t.co/Z7H8ez6ZU7",
            "attachments": {
                "media_keys": [
                    "3_1556925560290508800"
                ]
            },
            "edit_history_tweet_ids": [
                "1556925656784674817"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556925560290508800",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZtPjFLXgAALrl1.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1556561749763149829",
            "edit_history_tweet_ids": [
                "1556561749763149829"
            ],
            "attachments": {
                "media_keys": [
                    "3_1556561696440950785"
                ]
            },
            "text": "The atexit module defines functions to register and unregister cleanup functions. \n\nFunctions thus registered are automatically executed upon normal interpreter termination.\n\n#python #tip https://t.co/BLSVr1CpmU",
            "conversation_id": "1556561749763149829"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1556561696440950785",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZoEnatXoAEDyJI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1555484382114217984"
            ],
            "text": "You can use the #Python textwrap module to wrap text to columns: https://t.co/jM3TQozjsx",
            "id": "1555484382114217984",
            "conversation_id": "1555484382114217984",
            "attachments": {
                "media_keys": [
                    "3_1555484234613227520"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1555484234613227520",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZYwq4nXgAAXfLQ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1555477328981024770",
            "edit_history_tweet_ids": [
                "1555477328981024770"
            ],
            "conversation_id": "1555477328981024770",
            "text": "ACCURE is doing some really cool things, you might want to check them out: https://t.co/hyoWiseWhc"
        }
    },
    {
        "data": {
            "id": "1554839497048727552",
            "attachments": {
                "media_keys": [
                    "7_1554839400823013377"
                ]
            },
            "edit_history_tweet_ids": [
                "1554839497048727552"
            ],
            "conversation_id": "1554839497048727552",
            "text": "Did you know @FastAPI got some ideas, like dependency injection, from front-end frameworks? \ud83d\ude2e\ud83e\udd2f\n\nYou can listen to Sebasti\u00e1n Ramirez talk about this on our podcast here:\n\nhttps://t.co/3HwwoLv8NC https://t.co/Lis6HsFgSt"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1554839400823013377",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1554766146825584640"
            ],
            "text": "What happens if an API returns unix timestamps?\n\nWell, you can use #Python's datetime.fromtimestamp to convert them into datetime objects :) https://t.co/CeaRN1B8Yk",
            "attachments": {
                "media_keys": [
                    "3_1554766110616158210"
                ]
            },
            "conversation_id": "1554766146825584640",
            "id": "1554766146825584640"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554766110616158210",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZOjikQXgAIjp60.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1554738460354805761",
            "edit_history_tweet_ids": [
                "1554738460354805761"
            ],
            "attachments": {
                "media_keys": [
                    "3_1554738108113063938"
                ]
            },
            "id": "1554738460354805761",
            "text": "Stay tuned for another @Pybites #tips book \ud83c\udf89\n\nNot Python, not dev, no! #Career and #minset, the often overlooked critical skills you'll need to succeed as a #developer \ud83d\udcaa\n\nAs we're building the product as we speak, what should we absolutely add to make it awesome for you? \ud83d\udca1 https://t.co/RJSVrj24La"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554738108113063938",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZOKEmzXkAIh0na.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1554731674579222529"
            ],
            "text": "Reading this book to learn more about #Python type hints btw",
            "id": "1554731674579222529",
            "conversation_id": "1554452517471363072"
        }
    },
    {
        "data": {
            "conversation_id": "1554452517471363072",
            "id": "1554452517471363072",
            "text": "\"Once you start to accept the ephemeral nature of your code, you start to realize that it\u2019s not enough to write bug-free code for the present; you need to enable the codebase\u2019s future owners to be able to change your code with confidence.\"\n\n- Robust Python book (Patrick Viafore)",
            "edit_history_tweet_ids": [
                "1554452517471363072"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1554088743484678148"
                ]
            },
            "edit_history_tweet_ids": [
                "1554088766075244546"
            ],
            "conversation_id": "1554088766075244546",
            "id": "1554088766075244546",
            "text": "math.ceil rounds a number upward to its nearest integer\n\n#python #tips https://t.co/jqYsSyKS72"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1554088743484678148",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FZE7enDWYAQlV3L.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1552892294650597376",
            "edit_history_tweet_ids": [
                "1552892294650597376"
            ],
            "text": "Did you know you can run some startup code before entering the #Python REPL? Here is how to do it: https://t.co/RUYboqc6Ub",
            "attachments": {
                "media_keys": [
                    "3_1552892227210338304"
                ]
            },
            "id": "1552892294650597376"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552892227210338304",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYz7QMlWYAAnFp6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1552601127656595456",
            "id": "1552601127656595456",
            "text": "You can open a web browser in #Python simply by doing this: https://t.co/lzcl1MQt8S",
            "attachments": {
                "media_keys": [
                    "3_1552601098208296965"
                ]
            },
            "edit_history_tweet_ids": [
                "1552601127656595456"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552601098208296965",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYvyeQiWQAUDEDS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1552337438177169409",
            "edit_history_tweet_ids": [
                "1552337438177169409"
            ],
            "id": "1552337438177169409",
            "attachments": {
                "media_keys": [
                    "3_1552337070483558401"
                ]
            },
            "text": "Nice article:\nhttps://t.co/21ezruF0er\n\n&gt; isinstance is usually the preferred way to compare types. It\u2019s not only faster but also considers inheritance, which is often the desired behavior.\n\n#python #tips https://t.co/kUyJcxNDWX"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1552337070483558401",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYsCV0nX0AERC7S.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1552244286044999680"
            ],
            "id": "1552244286044999680",
            "text": "Another Bite \ud83c\udf89\nCode more #Python \ud83d\udc0d\ud83d\udcaa https://t.co/7DwiMcKJ8m",
            "conversation_id": "1552244286044999680"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1552244188158246914"
            ],
            "id": "1552244188158246914",
            "text": "Great resource! https://t.co/Ase3MwmLJf",
            "conversation_id": "1552244188158246914"
        }
    },
    {
        "data": {
            "conversation_id": "1552206223432351744",
            "id": "1552206223432351744",
            "edit_history_tweet_ids": [
                "1552206223432351744"
            ],
            "text": "If you need a simple HTTP Server, for example to serve files from a directory, easy to do with #Python: \n\npython3 -m http.server\n\n=&gt; browse to http://localhost:8000/"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1552205911300636672"
            ],
            "text": "My future (now present) self profusely thanking myself for documenting the AWS Lambda creation process well, now that new Bite exercises require new ones \ud83d\ude05\n\nRemember: spending an hour on docs early can save you tens (if not hundreds) of hours later on!",
            "id": "1552205911300636672",
            "conversation_id": "1552205911300636672"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1551836084895731712"
                ]
            },
            "conversation_id": "1551836960683171840",
            "id": "1551836960683171840",
            "edit_history_tweet_ids": [
                "1551836960683171840"
            ],
            "text": "importlib.metadata is a nice (Standard Lib) module that lets you easily get package metadata.\n\nHow do I know? I saw @JnyJny use it the other day to dynamically get the version in __init__.py :)\n\nSo also a reminder: read source code, you'll a lot of cool stuff!\n\n#python #tips https://t.co/cwGEWFL9jy"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1551836084895731712",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYk6sn3X0AAIdQD.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1550463973979570177",
            "id": "1550463973979570177",
            "text": "Did you know you can make a dataclass instance from a dictionary? Just use ** unpacking: https://t.co/kqyqlnKZpd",
            "attachments": {
                "media_keys": [
                    "3_1550463939548430344"
                ]
            },
            "edit_history_tweet_ids": [
                "1550463973979570177"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550463939548430344",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYRavQHWQAgOeSa.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Nice quote I just read in Programmer's Weekly:\n\n\"Good software, like wine, takes time.\" - Joel Spolsky",
            "conversation_id": "1550175879380320259",
            "edit_history_tweet_ids": [
                "1550175879380320259"
            ],
            "id": "1550175879380320259"
        }
    },
    {
        "data": {
            "text": "Currently reading The Missing README https://t.co/NEuQ2ZbR2b - thanks @Se7enSquared.\n\n#developer #books",
            "id": "1550137183452921857",
            "edit_history_tweet_ids": [
                "1550137183452921857"
            ],
            "conversation_id": "1550137183452921857"
        }
    },
    {
        "data": {
            "conversation_id": "1550100859228459008",
            "id": "1550100859228459008",
            "text": "With dataclasses you can use the __post_init__() hook to do some post constructor processing.\n\n#Python #tips https://t.co/0LbSVYLAkw",
            "attachments": {
                "media_keys": [
                    "3_1550100847924764673"
                ]
            },
            "edit_history_tweet_ids": [
                "1550100859228459008"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1550100847924764673",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYMQgiaWYAEqSY4.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1549785020436545537",
            "edit_history_tweet_ids": [
                "1549785343209226242"
            ],
            "text": "wow those metrics! https://t.co/Axn9Wmk3T0",
            "attachments": {
                "media_keys": [
                    "3_1549785307620458498"
                ]
            },
            "id": "1549785343209226242"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1549785307620458498",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FYHxhrLWQAInWt6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1549785020436545537"
            ],
            "text": "New Pybites article by @RHelmstedter (thanks!):\n \nA Case Study in Refactoring #Python: Clean Code Is Often Faster - enjoy! \n\nhttps://t.co/3HxE6Dn1zW",
            "conversation_id": "1549785020436545537",
            "id": "1549785020436545537"
        }
    },
    {
        "data": {
            "id": "1549441015370731527",
            "edit_history_tweet_ids": [
                "1549441015370731527"
            ],
            "text": "Always cracks me up :)\n\n&gt;&gt;&gt; from __future__ import braces\n  File \"&lt;stdin&gt;\", line 1\nSyntaxError: not a chance\n\n#Python",
            "conversation_id": "1549441015370731527"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1548983238798049281"
                ]
            },
            "text": "Use #Python itertools.accumulate and enumerate to calculate a running average: https://t.co/b3VYKgmxis",
            "conversation_id": "1549298997340172288",
            "edit_history_tweet_ids": [
                "1549298997340172288"
            ],
            "id": "1549298997340172288"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1548983238798049281",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FX8YDH-XgAEQDB9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1549073167506984960"
            ],
            "text": "What flake8 rules do you mute at times?\n \nTwo I can think of are W391, E501 - any other? \n\n#Python",
            "id": "1549073167506984960",
            "conversation_id": "1549073167506984960"
        }
    },
    {
        "data": {
            "conversation_id": "1548914734619049984",
            "id": "1548914734619049984",
            "text": "TIL: #Python re.sub() needs \"flags\" to be a keyword (not positional) argument: https://t.co/OtFyDegPgF",
            "attachments": {
                "media_keys": [
                    "3_1548914670593052673"
                ]
            },
            "edit_history_tweet_ids": [
                "1548914734619049984"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1548914670593052673",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FX7Zr7gXEAEF0kI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1547962150693380097"
            ],
            "text": "I just cracked Bite 16. PyBites date generator - and now I challenge you!  \nhttps://t.co/vKlvbUticf\n#Python #CodeChallenges",
            "id": "1547962150693380097",
            "conversation_id": "1547962150693380097"
        }
    },
    {
        "data": {
            "conversation_id": "1547850149434535937",
            "attachments": {
                "media_keys": [
                    "3_1547850090231898112"
                ]
            },
            "text": "TIL list.extend() receives an iterable which means you can give it a generator as well. Beautiful #Python \ud83d\ude0d https://t.co/JxJtQTDPdu",
            "edit_history_tweet_ids": [
                "1547850149434535937"
            ],
            "id": "1547850149434535937"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547850090231898112",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXsRdMnUIAAjz8g.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547562713567485952",
            "edit_history_tweet_ids": [
                "1547562713567485952"
            ],
            "id": "1547562713567485952",
            "attachments": {
                "media_keys": [
                    "3_1547561796835221505"
                ]
            },
            "text": "Get a list of countries in #Python using the pycountry package: https://t.co/pay2Z6gSiH"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547561796835221505",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXoLQUBUIAEGFrV.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1547125552661905410"
                ]
            },
            "conversation_id": "1547170723877138432",
            "edit_history_tweet_ids": [
                "1547170723877138432"
            ],
            "id": "1547170723877138432",
            "text": "You can use \"while True\" to make an infinite loop, for example to keep asking a user for input.\n\n#python #tips https://t.co/yaAkKmerQT"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547125552661905410",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXh-fj1XwAI5AC_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1547130430801018882",
            "edit_history_tweet_ids": [
                "1547130430801018882"
            ],
            "id": "1547130430801018882",
            "text": "Does writer's block exist?\n\nHad a bit of trouble finding motivation this week.\n\nBut motivation is not a magical button.\n\nUsually you just have to sit down and start doing the work, motivation will follow ..."
        }
    },
    {
        "data": {
            "conversation_id": "1547122692792504320",
            "id": "1547130120871223298",
            "edit_history_tweet_ids": [
                "1547130120871223298"
            ],
            "text": "Reminder to self: keep doing varied reading over morning coffee, always finding cool new things :)"
        }
    },
    {
        "data": {
            "conversation_id": "1547129963865833475",
            "edit_history_tweet_ids": [
                "1547129963865833475"
            ],
            "id": "1547129963865833475",
            "text": "+ code reviewing, two impactful learning experiences as a #developer! https://t.co/v5xXgaSrVU"
        }
    },
    {
        "data": {
            "conversation_id": "1547122692792504320",
            "edit_history_tweet_ids": [
                "1547122692792504320"
            ],
            "text": "You can use textblob for spelling correction as well \ud83d\udca1 https://t.co/KrYzGIKG2h",
            "attachments": {
                "media_keys": [
                    "3_1547122042650198022"
                ]
            },
            "id": "1547122692792504320"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1547122042650198022",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXh7TQBXgAYa5sr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1546744684365627393"
            ],
            "text": "In #Python you can chain comparison operators. \n\nInstead of writing \"1 &lt; a and a &lt; 10\" you can write \"1 &lt; a &lt; 10\" which is a bit more concise. https://t.co/10KkxZsfbL",
            "id": "1546744684365627393",
            "conversation_id": "1546744684365627393",
            "attachments": {
                "media_keys": [
                    "3_1546744639809626112"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1546744639809626112",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FXckDg4XoAA9BGV.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1546743628034441217",
            "edit_history_tweet_ids": [
                "1546743628034441217"
            ],
            "id": "1546743628034441217",
            "text": "Copy a file to the clipboard, paste it to a webpage -&gt; auto-uploads to AWS S3 bucket ... \n\nThe topic of my next blog post ... \n\n#python #aws #javascript"
        }
    },
    {
        "data": {
            "text": "Chart.js \ud83d\ude0d\n\nHere is how to do it:\nhttps://t.co/TF0PavVIrV https://t.co/qBk7FY1g5G",
            "conversation_id": "1546405311413616641",
            "edit_history_tweet_ids": [
                "1546405311413616641"
            ],
            "id": "1546405311413616641"
        }
    },
    {
        "data": {
            "id": "1544751197793521665",
            "edit_history_tweet_ids": [
                "1544751197793521665"
            ],
            "conversation_id": "1544751197793521665",
            "text": "An example of scratching your own itch and starting simple when creating a #Python app ... https://t.co/ZQLlsD31vo"
        }
    },
    {
        "data": {
            "text": "We had a blast, fun episode, some really valuable #career tips: https://t.co/dLoN4SP91o",
            "conversation_id": "1544750977278005255",
            "edit_history_tweet_ids": [
                "1544750977278005255"
            ],
            "id": "1544750977278005255"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1544598041486835713"
            ],
            "conversation_id": "1544598041486835713",
            "id": "1544598041486835713",
            "text": "Very true, don't get stuck in tutorial hell, build, (deliberately) practice, every single day. \n\nThat's the path to becoming a programmer / developer. https://t.co/Jgk4DRrSHG"
        }
    },
    {
        "data": {
            "conversation_id": "1544584975265284099",
            "edit_history_tweet_ids": [
                "1544589543348862979"
            ],
            "id": "1544589543348862979",
            "text": "\u2753\n\nWhat are some other emojis you often use in code reviews?"
        }
    },
    {
        "data": {
            "conversation_id": "1544584975265284099",
            "id": "1544584975265284099",
            "edit_history_tweet_ids": [
                "1544584975265284099"
            ],
            "text": "Thanks @Se7enSquared for sharing this resource: https://t.co/jF9G9dd3sN \n\n... as a way to sound more friendly and not come across as being harsh in code reviews \ud83d\ude03\ud83d\udca1\n\n#developer #codereview #communication"
        }
    },
    {
        "data": {
            "conversation_id": "1544574198013739010",
            "edit_history_tweet_ids": [
                "1544574198013739010"
            ],
            "attachments": {
                "media_keys": [
                    "3_1544574158125817856"
                ]
            },
            "id": "1544574198013739010",
            "text": "Important #Python fact: assigning a mutable object makes a copy by reference (alias), it does not create a new object. We can see that by using the id() built-in: https://t.co/jLtz51KZQx"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544574158125817856",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW9uA2hWYAAfrGb.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1544197186468159491",
            "edit_history_tweet_ids": [
                "1544197186468159491"
            ],
            "conversation_id": "1544197186468159491",
            "text": "#Python #tip: convert a date string to datetime and vice versa: https://t.co/SvWM8O7Npi",
            "attachments": {
                "media_keys": [
                    "3_1544197123180199938"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1544197123180199938",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FW4XGh5WAAI4mxU.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Wanna do some more #shorts, #Python / #developer prefs for these? Thanks https://t.co/mjo8qNbh18",
            "conversation_id": "1544196863338872832",
            "edit_history_tweet_ids": [
                "1544196863338872832"
            ],
            "id": "1544196863338872832"
        }
    },
    {
        "data": {
            "text": "The #Python datetime and calendar modules are pretty amazing \ud83d\udc0d\n\nHere is how you get the current weekday (number and name).\n\nHappy Monday \ud83d\ude04 https://t.co/6hJW2waoA8",
            "id": "1543853506351742976",
            "edit_history_tweet_ids": [
                "1543853506351742976"
            ],
            "attachments": {
                "media_keys": [
                    "3_1543853487854845953"
                ]
            },
            "conversation_id": "1543853506351742976"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1543853487854845953",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWzekUjWAAEc9Ze.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1542800879903981568"
            ],
            "text": "Super nice recipe to make a download csv option (action) in your #Django admin (this whole cookbook is awesome!)\nhttps://t.co/i7xXgSZwv5",
            "conversation_id": "1542800879903981568",
            "id": "1542800879903981568"
        }
    },
    {
        "data": {
            "conversation_id": "1542753608785174528",
            "id": "1542753608785174528",
            "text": "More #python #tips: you can use csv.DictReader() to process rows in a csv file as dictionaries, much nicer \ud83d\ude0d https://t.co/lvGdBYiBwd",
            "attachments": {
                "media_keys": [
                    "3_1542753540980056065"
                ]
            },
            "edit_history_tweet_ids": [
                "1542753608785174528"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542753540980056065",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWj2K_IXoAEPOaU.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1542751552292765697",
            "text": "Love it when people contribute to our blog and code repos :) https://t.co/h4yGXZDdFA",
            "edit_history_tweet_ids": [
                "1542751552292765697"
            ],
            "id": "1542751552292765697"
        }
    },
    {
        "data": {
            "conversation_id": "1542414332771926022",
            "text": "Another Bite, have fun!\nKeep calm and code in Python \ud83d\udc0d\ud83d\udcaa https://t.co/L6JAVuB7ql",
            "edit_history_tweet_ids": [
                "1542414332771926022"
            ],
            "id": "1542414332771926022"
        }
    },
    {
        "data": {
            "conversation_id": "1542411745599299588",
            "attachments": {
                "media_keys": [
                    "3_1542411628376891392"
                ]
            },
            "text": "You can make a dictionary from a keys iterator. You can give it a different value as well, but don't give it a mutable object \ud83d\ude05\n\n#python #tips https://t.co/N0xwznuvUa",
            "edit_history_tweet_ids": [
                "1542411745599299588"
            ],
            "id": "1542411745599299588"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542411628376891392",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWe_NDbWIAAxgnu.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Create a list of current year months, you can use zfill to prepend the month numbers with a 0\n\n#python #tips https://t.co/uniGXW4fle",
            "id": "1542087961369534465",
            "edit_history_tweet_ids": [
                "1542087961369534465"
            ],
            "attachments": {
                "media_keys": [
                    "3_1542087694729232384"
                ]
            },
            "conversation_id": "1542087961369534465"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1542087694729232384",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWaYlojWQAA6RG3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1541822432947888130"
            ],
            "text": "Automating the Boring Stuff and Plotting Student Data - https://t.co/aW1vNaXyQV - thank you @RHelmstedter, amazing article + project! https://t.co/fOmoQymuta",
            "attachments": {
                "media_keys": [
                    "3_1541822300135325696"
                ]
            },
            "conversation_id": "1541822432947888130",
            "id": "1541822432947888130"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541822300135325696",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWWnNopXgAAxCGo.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1541820774323048459",
            "attachments": {
                "media_keys": [
                    "3_1541820324244848640"
                ]
            },
            "text": "difflib is a really handy #Python Standard Library module to find similar words.\n\nHere I use its SequenceMatcher() for example to show alternatives for misspelled words.\n\n#Django's https://t.co/Hz6HXKmDx7 was actually enriched using this :) https://t.co/KvlXiNU2Bl",
            "edit_history_tweet_ids": [
                "1541820774323048459"
            ],
            "id": "1541820774323048459"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541820324244848640",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWWlan4XgAAYkAY.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1541669215815475202"
            ],
            "attachments": {
                "media_keys": [
                    "3_1541667810564268032"
                ]
            },
            "id": "1541669215815475202",
            "text": "I \ud83d\udc93 #Django for its nice abstractions. \n\nTake forms for example ...\n\nIf you want to add custom validation - which in part is already covered by the type of fields you define in your model - you can override your ModelForm's clean() method throwing a ValidationError exception: https://t.co/7FdL1WMPDW",
            "conversation_id": "1541669215815475202"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1541667810564268032",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWUatKJWYAABxjn.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1541370925618176001",
            "text": "30 min cardio + Python Kindle reading done first thing in the morning.\n\nJocko Willink's discipline == freedom is so true!",
            "edit_history_tweet_ids": [
                "1541370925618176001"
            ],
            "id": "1541370925618176001"
        }
    },
    {
        "data": {
            "id": "1540314114353922048",
            "edit_history_tweet_ids": [
                "1540314114353922048"
            ],
            "attachments": {
                "media_keys": [
                    "3_1540314028135911426"
                ]
            },
            "text": "TIL a new way of looking up multiple keys in a dict, reading  @fluentpython always teaches you new beautiful ways of doing things in #Python!\n\n(I knew about set operations but it did not occur to me to use them with dicts per se) https://t.co/QUrxmT6RZi",
            "conversation_id": "1540314114353922048"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1540314028135911426",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FWBLcpmXkAIxeA3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1540242505295433728",
            "edit_history_tweet_ids": [
                "1540242505295433728"
            ],
            "conversation_id": "1540242365683744770",
            "text": "https://t.co/HayfyZmK7t"
        }
    },
    {
        "data": {
            "text": "#Python tooling :)\n\n$ alarm -b -M \"meeting\" -m 33\nPlaying alarm in 33 minutes\n$ \n\n(Will read the word meeting to me 3 times in 33 minutes)",
            "id": "1540242365683744770",
            "edit_history_tweet_ids": [
                "1540242365683744770"
            ],
            "conversation_id": "1540242365683744770"
        }
    },
    {
        "data": {
            "conversation_id": "1539866929158127616",
            "id": "1539866931603423233",
            "edit_history_tweet_ids": [
                "1539866931603423233"
            ],
            "text": "Check out @Pybites merch here: https://t.co/mUjAjHJslh"
        }
    },
    {
        "data": {
            "id": "1539866929158127616",
            "attachments": {
                "media_keys": [
                    "3_1539866551448371200"
                ]
            },
            "edit_history_tweet_ids": [
                "1539866929158127616"
            ],
            "conversation_id": "1539866929158127616",
            "text": "It's still early, let's get some more #Python coding done, lift some careers up.\n\nThings we love to do every day.\n\nAnd even better with a mug that constantly reminds you of that :) https://t.co/77fp4bguIp"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1539866551448371200",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FV60eFCWAAA3p1b.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "We challenge you! :) https://t.co/a2faNDlGuz",
            "id": "1539531070114242563",
            "edit_history_tweet_ids": [
                "1539531070114242563"
            ],
            "conversation_id": "1539531070114242563"
        }
    },
    {
        "data": {
            "conversation_id": "1539528194306490368",
            "text": "Great for Python devs that wanna reduce JS coding ;)\n\nOn that note you also might wanna check out @mikeabrahamsen's Flask Meld project: \nhttps://t.co/jOyjHIeYQK https://t.co/N10EK40Vaw",
            "edit_history_tweet_ids": [
                "1539528194306490368"
            ],
            "id": "1539528194306490368"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1539317958039642121"
            ],
            "id": "1539317958039642121",
            "text": "I used it today for a project, blown away by the elegant interface, thanks @tiangolo \ud83d\ude0d https://t.co/4KRAMEmcLz",
            "conversation_id": "1539317958039642121"
        }
    },
    {
        "data": {
            "text": "Curious to hear what about #Python imports makes them so confusing for some people? Relative vs absolute import, running Python in the wrong location (not using -m), packaging, other? Let me know, maybe it's time to produce some training ...",
            "conversation_id": "1538796090245398531",
            "edit_history_tweet_ids": [
                "1538796090245398531"
            ],
            "id": "1538796090245398531"
        }
    },
    {
        "data": {
            "id": "1537880257688051714",
            "edit_history_tweet_ids": [
                "1537880257688051714"
            ],
            "conversation_id": "1537880257688051714",
            "text": "No better experience for our fellow programmers than #teaching by live coding! \n \nThe code is only half of it, the amount of subtle tips and tricks is super valuable.\n \nAnd getting stuck is the best part, it shows REAL dev life you won't get from tutorials.\n \n#developer #Python"
        }
    },
    {
        "data": {
            "id": "1537794537745178627",
            "edit_history_tweet_ids": [
                "1537794537745178627"
            ],
            "text": "What is the ONE thing that is holding you back right now from completely kicking ass in your #career using #Python / #coding skills? \n\nI would love to hear and see how I can help you overcome it ...",
            "conversation_id": "1537794537745178627"
        }
    },
    {
        "data": {
            "text": "As always great fun recording @juliansequeira https://t.co/LGrJlsjsUL",
            "conversation_id": "1537794457021587456",
            "edit_history_tweet_ids": [
                "1537794457021587456"
            ],
            "id": "1537794457021587456"
        }
    },
    {
        "data": {
            "id": "1537738953259892739",
            "edit_history_tweet_ids": [
                "1537738953259892739"
            ],
            "text": "\u2764\ufe0four \ud83e\udd77\ud83e\udd77\ud83e\udd77 https://t.co/rqOXyDQLFM",
            "conversation_id": "1537738953259892739"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1537313714306748417"
            ],
            "text": "#Python is getting better and better! \n\nDid you see the better error messages? https://t.co/nZ8tPTnTkn",
            "conversation_id": "1536921720711430147",
            "id": "1537313714306748417"
        }
    },
    {
        "data": {
            "text": "Since #Python 3.9 there are two new useful string methods: https://t.co/cDgyCZDm1e",
            "id": "1536921720711430147",
            "edit_history_tweet_ids": [
                "1536921720711430147"
            ],
            "attachments": {
                "media_keys": [
                    "3_1536921674620321795"
                ]
            },
            "conversation_id": "1536921720711430147"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1536921674620321795",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVQ-Hr9XwAM5930.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1536739567092523010",
            "edit_history_tweet_ids": [
                "1536739567092523010"
            ],
            "conversation_id": "1536739567092523010",
            "text": "Check out our new a blog article where we create a beautiful #graph in #Django using real platform data - enjoy!\n\nhttps://t.co/TF0PavVIrV\n\n#Python #Datavisualization #chartjs https://t.co/A8vI2ygGKV",
            "attachments": {
                "media_keys": [
                    "3_1536739247734018048"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1536739247734018048",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVOYNC2WUAAZ5fg.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1536342093659983872"
                ]
            },
            "text": "Cool #Python module: requests-cache\n\nIt caches requests responses boosting its performance. Easy to use - see example below.\n\nDocs: https://t.co/aWVa1WzhBw \nArticle: https://t.co/S21hP0AYPX https://t.co/LRhvQHiOiT",
            "conversation_id": "1536343213920833537",
            "edit_history_tweet_ids": [
                "1536343213920833537"
            ],
            "id": "1536343213920833537"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1536342093659983872",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FVIu_ooVUAAFF2A.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Specially when you learn it while live coding ;)",
            "edit_history_tweet_ids": [
                "1534817637301198848"
            ],
            "conversation_id": "1534784930005278720",
            "id": "1534817637301198848"
        }
    },
    {
        "data": {
            "conversation_id": "1534784930005278720",
            "id": "1534785278027608065",
            "text": "Thanks @JnyJny :)",
            "edit_history_tweet_ids": [
                "1534785278027608065"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1534784714778845186"
                ]
            },
            "conversation_id": "1534784930005278720",
            "text": "Once you have a pathlib.Path object you don't have to use a context manager to write to a file, it already comes with write_bytes() / write_text() methods that can do this.\n\n#Python #tips https://t.co/JtxLtpFhWS",
            "id": "1534784930005278720",
            "edit_history_tweet_ids": [
                "1534784930005278720"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534784714778845186",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUymkQMXoAIad6X.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1534479035140644864",
            "attachments": {
                "media_keys": [
                    "3_1534478980513939456"
                ]
            },
            "conversation_id": "1534479035140644864",
            "text": "You can call requests' HTTP methods with the \"headers\" keyword argument which in this case we needed to be able to programmatically download one of our blog articles.\n \n#Python #tips https://t.co/WJeH2NTx7F",
            "edit_history_tweet_ids": [
                "1534479035140644864"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534478980513939456",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUuQgLTWQAAlzzT.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1534115899157905409",
            "text": "`pip install pybites-pysource` might make this easier",
            "edit_history_tweet_ids": [
                "1534115899157905409"
            ],
            "conversation_id": "1534082542277640192"
        }
    },
    {
        "data": {
            "text": "Worth reading the datetime module source code for more examples of nice classmethod / alternate constructor examples btw.",
            "conversation_id": "1534082542277640192",
            "id": "1534115825975705600",
            "edit_history_tweet_ids": [
                "1534115825975705600"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1534082463496122368"
                ]
            },
            "conversation_id": "1534082542277640192",
            "text": "You can use #Python datetime's combine classmethod (alternate constructor) to create a datetime object from date and time objects: https://t.co/39yaCE5Dk6",
            "edit_history_tweet_ids": [
                "1534082542277640192"
            ],
            "id": "1534082542277640192"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1534082463496122368",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUon32TXsAAQOP4.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1533846177828986880",
            "text": "If you need both past (... time ago) + future (in ... time segment) you can use \"naturaltime\" (django.contrib.humanize)\n\nhttps://t.co/7HgY1lrURl\n\n\ud83d\udc93 #Django https://t.co/ZbbW0Y7Rrj",
            "id": "1533846177828986880",
            "edit_history_tweet_ids": [
                "1533846177828986880"
            ],
            "attachments": {
                "media_keys": [
                    "3_1533846031833649152"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1533846031833649152",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUlQ1tuWUAAYT3-.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1533711983916236800",
            "text": "The re.fullmatch() function matches the whole string end-to-end, in comparison re.match() matches only at the beginning.\n\n#Python #tips https://t.co/3xGvIQLHIk",
            "attachments": {
                "media_keys": [
                    "3_1533711901057851394"
                ]
            },
            "edit_history_tweet_ids": [
                "1533711983916236800"
            ],
            "id": "1533711983916236800"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1533711901057851394",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUjW2RpXoAIPG7I.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Nice Bootstrap! \ud83e\udd29\n\nThis would have costed me quite some manual #css before \ud83d\ude05\n\nhttps://t.co/KZmOqlfE2I https://t.co/87KJsO5jxa",
            "attachments": {
                "media_keys": [
                    "3_1533448593750822912"
                ]
            },
            "id": "1533448635278667777",
            "edit_history_tweet_ids": [
                "1533448635278667777"
            ],
            "conversation_id": "1533448635278667777"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1533448593750822912",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUfnXxfXEAA8G8j.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1533336200890687489"
            ],
            "id": "1533336200890687489",
            "attachments": {
                "media_keys": [
                    "3_1533334932113727493"
                ]
            },
            "text": "#Python's html module (Standard Library) let's you escape and unescape characters: https://t.co/gj0PKt2d5I",
            "conversation_id": "1533336200890687489"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1533334932113727493",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUd__y5WIAUtlbt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1533331220754579456",
            "edit_history_tweet_ids": [
                "1533331220754579456"
            ],
            "conversation_id": "1533330683892051968",
            "text": "And \"emo\" alias in .zshrc:\n\nfunction emo {\n    (cd $HOME/code/emojisearcher &amp;&amp; source venv/bin/activate &amp;&amp; python -m emojisearcher.script \"$@\")\n}\n\n- The () runs this isolated in a sub-shell so I stay in my current working directory :)\n\n- $@ passes through command line args\n\n#Unix"
        }
    },
    {
        "data": {
            "conversation_id": "1533330683892051968",
            "text": "Repo: https://t.co/B2tMjWjqHv",
            "id": "1533331057147256834",
            "edit_history_tweet_ids": [
                "1533331057147256834"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1533330359307456512"
                ]
            },
            "conversation_id": "1533330683892051968",
            "edit_history_tweet_ids": [
                "1533330683892051968"
            ],
            "id": "1533330683892051968",
            "text": "Emojisearcher for the win \ud83c\udf89\n\nThis little tool actually helps me a lot writing posts \ud83d\ude04\n\nAnd that's what I love about #Python  \ud83d\udc0d/ #programming: over time you build up your arsenal of tools that will make you faster / improve your workflow \ud83d\udcaa https://t.co/exzwVe2W5d"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1533330359307456512",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUd71n3X0AAX6UC.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1532687958272356353",
            "text": "TIL that threaded code is hard to debug :(",
            "edit_history_tweet_ids": [
                "1532687958272356353"
            ],
            "id": "1532687958272356353"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1532676681315532801"
            ],
            "id": "1532676681315532801",
            "text": "Love this the new way of defining namedtuples with type hints! https://t.co/GAJbBOiaaa",
            "conversation_id": "1532676681315532801"
        }
    },
    {
        "data": {
            "text": "Also good design: the download(), parse(), and nlp() methods are all decoupled and can be called individually. \n\nSimilar to requests.raise_for_status() -&gt; \"by default I am not gonna blow up, but if you want to just call me and I will do ...\"",
            "conversation_id": "1531591461141106688",
            "edit_history_tweet_ids": [
                "1532646351359643648"
            ],
            "id": "1532646351359643648"
        }
    },
    {
        "data": {
            "text": "Love automation ... flight scraper cron turned on, showing me price trends daily.\n\nWith #Python the world becomes your oyster :)",
            "conversation_id": "1532639234527531008",
            "edit_history_tweet_ids": [
                "1532639234527531008"
            ],
            "id": "1532639234527531008"
        }
    },
    {
        "data": {
            "id": "1532638834764173313",
            "conversation_id": "1532638834764173313",
            "text": "Ship it! 0 to 1\n\nNothing like having people use your #software, it changes everything (you often don't know what you don't know)",
            "edit_history_tweet_ids": [
                "1532638834764173313"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1532361518536396800",
            "text": "Done &gt; perfect",
            "id": "1532361518536396800",
            "edit_history_tweet_ids": [
                "1532361518536396800"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1532347393009668098"
            ],
            "id": "1532347393009668098",
            "text": "#Python #tips: a retry decorator that tries to call a function N times before giving up: https://t.co/PJJ3faLdCC",
            "attachments": {
                "media_keys": [
                    "3_1532347198326951938"
                ]
            },
            "conversation_id": "1532347393009668098"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1532347198326951938",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUP9qHzX0AI7fIZ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Nice, glad to hear. \n\nCome join us too ...\n\n- Our exercises are challenging and fun. \n\n- They teach you real world and idiomatic #Python.\n\n- They help you overcome tutorial paralysis.\n\nAnd last but not least we have an exciting and supportive community.\n \nhttps://t.co/FxpfiepQ3Y https://t.co/gngaxPuTtq",
            "conversation_id": "1532337764661862404",
            "id": "1532337764661862404",
            "edit_history_tweet_ids": [
                "1532337764661862404"
            ]
        }
    },
    {
        "data": {
            "text": "pipx install googletrans==3.1.0a0",
            "conversation_id": "1531917434663448576",
            "edit_history_tweet_ids": [
                "1531920074344386560"
            ],
            "id": "1531920074344386560"
        }
    },
    {
        "data": {
            "text": "One guy to follow who embraces this approach sublimely is @irishpolyglot of https://t.co/8Qvv25i410",
            "id": "1531920017851355137",
            "edit_history_tweet_ids": [
                "1531920017851355137"
            ],
            "conversation_id": "1531917434663448576"
        }
    },
    {
        "data": {
            "text": "It's the same way I learned Spanish almost 20 years ago when interrailing: complete immersion! \n\nSpeak speak speak, note down words you keep forgetting, read in the language, heck even configure your apps in the target language.",
            "id": "1531918744808828928",
            "edit_history_tweet_ids": [
                "1531918744808828928"
            ],
            "conversation_id": "1531917434663448576"
        }
    },
    {
        "data": {
            "text": "Point is to don't get stuck in tutorial paralysis (e.g. overly study grammar), just speak it, make a lot of mistakes (your friendly teacher will correct you) - it will boost your learning.",
            "edit_history_tweet_ids": [
                "1531918350858723328"
            ],
            "conversation_id": "1531917434663448576",
            "id": "1531918350858723328"
        }
    },
    {
        "data": {
            "conversation_id": "1531917434663448576",
            "id": "1531918133589581825",
            "text": "30 min of conversation where I force myself to listen and speak the language. \n\nSkye window on the right, terminal on the left where I look up words like crazy. \n\nHelpful alias:\nfunction it { translate -d it \"$@\" }",
            "edit_history_tweet_ids": [
                "1531918133589581825"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1531917434663448576",
            "text": "With just 30 min a week I manage to keep up a language this way (I am doing Italian now)",
            "id": "1531917598358749185",
            "edit_history_tweet_ids": [
                "1531917598358749185"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1531917434663448576",
            "text": "@italki is a great help with this. It's an online #LanguageLearning platform which connects language learners and teachers.",
            "edit_history_tweet_ids": [
                "1531917475855597569"
            ],
            "id": "1531917475855597569"
        }
    },
    {
        "data": {
            "id": "1531917434663448576",
            "conversation_id": "1531917434663448576",
            "text": "Wanna learn a language? Deliberate practice is key which means speak it as soon and often as possible.",
            "edit_history_tweet_ids": [
                "1531917434663448576"
            ]
        }
    },
    {
        "data": {
            "text": "Speeding up article downloads using #Python threading ... 7 to 1 seconds for 10 articles - nice :) \n\nYou probably want to limit the number of threads for rate limiting (and to be respectful).\n\nYou can also use concurrent.futures.ThreadPoolExecutor: https://t.co/C6SjJKSAQ4 https://t.co/vsQNiR4BPa",
            "conversation_id": "1531908222067609601",
            "attachments": {
                "media_keys": [
                    "3_1531906415035564034"
                ]
            },
            "edit_history_tweet_ids": [
                "1531908222067609601"
            ],
            "id": "1531908222067609601"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1531906415035564034",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUJsxKFWQAI90j2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1531905890109906945"
            ],
            "id": "1531905890109906945",
            "text": "Revamped reading lists (https://t.co/WzFx8ZIFdb) to show books by category: https://t.co/DSkgA5GuO8",
            "attachments": {
                "media_keys": [
                    "3_1531573751023812608"
                ]
            },
            "conversation_id": "1531905890109906945"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1531573751023812608",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUE-NkEWQAAItmO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Heard about Newspaper3k? An awesome #Python library to extract and curate articles ... gonna use this soon on all @Pybites articles :) https://t.co/iOvVEPzc1z",
            "conversation_id": "1531591461141106688",
            "attachments": {
                "media_keys": [
                    "3_1531591433156796420"
                ]
            },
            "edit_history_tweet_ids": [
                "1531591461141106688"
            ],
            "id": "1531591461141106688"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1531591433156796420",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FUFOSzJXoAQCXg2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "A reader lives a thousand lives before he dies, said Jojen. The man who never reads lives only one. \n- George R.R. Martin, A Dance with Dragons\n\n#books #reading",
            "conversation_id": "1531572411065372672",
            "edit_history_tweet_ids": [
                "1531572411065372672"
            ],
            "id": "1531572411065372672"
        }
    },
    {
        "data": {
            "conversation_id": "1531279017487343616",
            "id": "1531279017487343616",
            "text": "Great explanation of #Python's staticmethod: \"improve the findability of a function\" - https://t.co/6kxtcYFUDU\n\nConvinced me to use them a bit more when I want to group additional (non instance / self related) behavior in my class.\n\nWatch the whole talk btw, it's brilliant!",
            "edit_history_tweet_ids": [
                "1531279017487343616"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1531278014113251331",
            "edit_history_tweet_ids": [
                "1531278014113251331"
            ],
            "id": "1531278014113251331",
            "text": "Fast Test, Slow Test https://t.co/6zYJaIBSzz - great talk!\n\n#softwaredeveloper #testing"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1529799020604006407"
            ],
            "id": "1529799020604006407",
            "text": "What #books are you reading? We started a reading list of @pybites #podcast mentioned books: https://t.co/WAg7tl9OEH",
            "conversation_id": "1529799020604006407"
        }
    },
    {
        "data": {
            "id": "1529707671217225728",
            "text": "#Python's Standard Library keeps blowing my mind. \n\nI needed a month calendar, well here you go: calendar.monthcalendar() \n\nIt gives you a matrix with sensible defaults (e.g. days outside of the month are represented by zeros). \n\nSo elegant and useful! https://t.co/4s88pMQcIr",
            "attachments": {
                "media_keys": [
                    "3_1529707495203258368"
                ]
            },
            "edit_history_tweet_ids": [
                "1529707671217225728"
            ],
            "conversation_id": "1529707671217225728"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1529707495203258368",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FTqc3LXXwAAapgC.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1529387246452977665"
                ]
            },
            "id": "1529387336672370688",
            "text": "Did you know that &gt;= #Python 3.10 you can use itertools.pairwise() to iterate over a numbers in pairs. No more zip (built-in) with slicing - this is more readable / intuitive: https://t.co/oolNeHQCta",
            "edit_history_tweet_ids": [
                "1529387336672370688"
            ],
            "conversation_id": "1529387336672370688"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1529387246452977665",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FTl5mPzXsAEFGRF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Embrace (i)pdb / a #Python debugger and you'll become a more effective #developer https://t.co/BP3jj4d5eG",
            "conversation_id": "1529348028439465984",
            "attachments": {
                "media_keys": [
                    "3_1529347560485314560"
                ]
            },
            "edit_history_tweet_ids": [
                "1529348028439465984"
            ],
            "id": "1529348028439465984"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1529347560485314560",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FTlVgODWYAAC5vL.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1529054395119415296",
            "id": "1529054395119415296",
            "text": "Is imposter syndrome holding you back? We talk about it in this training: https://t.co/yU2t2NaTvM",
            "edit_history_tweet_ids": [
                "1529054395119415296"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1527530338632744960",
            "id": "1527530338632744960",
            "text": "Configure a #Linux #Development Environment on #Windows with #WSL and #VSCode https://t.co/5K0haDRzA3 - thanks @Se7enSquared for this great write up!",
            "edit_history_tweet_ids": [
                "1527530338632744960"
            ]
        }
    },
    {
        "data": {
            "id": "1527273672687370242",
            "edit_history_tweet_ids": [
                "1527273672687370242"
            ],
            "conversation_id": "1527273672687370242",
            "text": "New @pybites podcast is out:\nLearn by building, how we built our own collaboration tool in #Django \nhttps://t.co/murF8GfRgD"
        }
    },
    {
        "data": {
            "conversation_id": "1526822024961744896",
            "id": "1526822024961744896",
            "text": "Do you use pytest or unittest with #Django and why?",
            "edit_history_tweet_ids": [
                "1526822024961744896"
            ]
        }
    },
    {
        "data": {
            "id": "1526518074375028737",
            "edit_history_tweet_ids": [
                "1526518074375028737"
            ],
            "conversation_id": "1526518074375028737",
            "text": "Today's @PyBites #Python Tip: Extract a zipfile in memory https://t.co/eGvaCAeA6u  &lt;  subscribe here to get weekly practical tips."
        }
    },
    {
        "data": {
            "conversation_id": "1525368964611723265",
            "id": "1525368964611723265",
            "text": "Such a great book, recommended! https://t.co/Uqbpizymlq\n#Python #Django #testing #TDD",
            "edit_history_tweet_ids": [
                "1525368964611723265"
            ]
        }
    },
    {
        "data": {
            "text": "My weekend package to dive into: https://t.co/IkA7WT5djG - state machines in #Python! (I found a cool use case)\n\nWhat will you be working on?",
            "edit_history_tweet_ids": [
                "1525205904433496064"
            ],
            "conversation_id": "1525205904433496064",
            "id": "1525205904433496064"
        }
    },
    {
        "data": {
            "text": "As mentioned on our podcast: https://t.co/DYYe3IhXbQ",
            "conversation_id": "1524452045083877376",
            "edit_history_tweet_ids": [
                "1525204657014022144"
            ],
            "id": "1525204657014022144"
        }
    },
    {
        "data": {
            "text": "Already noticing the #productivity benefits of deliberately creating space (reading, workouts, weekends, etc.)",
            "conversation_id": "1524452045083877376",
            "edit_history_tweet_ids": [
                "1525204593868779523"
            ],
            "id": "1525204593868779523"
        }
    },
    {
        "data": {
            "id": "1525091236696276992",
            "edit_history_tweet_ids": [
                "1525091236696276992"
            ],
            "conversation_id": "1525091236696276992",
            "text": "A common question I get is when to use a class in #Python. I wrote up some thoughts a while ago so when in doubt hope this is helpful: https://t.co/fxPH0hMMJV"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1524999605674450944"
                ]
            },
            "id": "1525000178649944064",
            "edit_history_tweet_ids": [
                "1525000178649944064"
            ],
            "conversation_id": "1525000178649944064",
            "text": "I \ud83d\udc93 the #Python itertools module \ud83d\udc0d\n \nToday I needed to accumulate a list of ints. Pretty easy to roll your own, but why would you when an optimised one (generator) already exists in the Standard Library?\n \nAccumulate has a func keyword arg as well that accepts other operations. https://t.co/BalBw5dMdi"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1524999605674450944",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FSnjD8LWIAAvoOO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1524654799819522048",
            "id": "1524654799819522048",
            "text": "You can unpack dict keys + values into two tuples using zip(*dict)\n\nThis is handy to prepare a plot.\n\n#Python #tips https://t.co/7KlGFBLybX",
            "edit_history_tweet_ids": [
                "1524654799819522048"
            ],
            "attachments": {
                "media_keys": [
                    "3_1524654335682093056"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1524654335682093056",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FSipClOXIAA9KAf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1524452045083877376",
            "text": "Started reading Create Space, thanks @juliansequeira \n\n#career #books",
            "edit_history_tweet_ids": [
                "1524452045083877376"
            ],
            "conversation_id": "1524452045083877376"
        }
    },
    {
        "data": {
            "conversation_id": "1524362052743147527",
            "edit_history_tweet_ids": [
                "1524362052743147527"
            ],
            "text": "We struggle with productivity at times so we did a bit of reflection on our podcast and came to some tips, hope it's useful for you: https://t.co/D69ytD1Z2S",
            "id": "1524362052743147527"
        }
    },
    {
        "data": {
            "conversation_id": "1522897079416369153",
            "text": "Nicely integrated with #Django here: https://t.co/0HWA7YCiyq (repo: https://t.co/M7rSnuo3ul)",
            "edit_history_tweet_ids": [
                "1522908567606632448"
            ],
            "id": "1522908567606632448"
        }
    },
    {
        "data": {
            "conversation_id": "1522897079416369153",
            "text": "Do yo want an html calendar in #Python? The calendar (Standard Library) module has you covered!\n\n$ python -c \"import calendar; print(calendar.HTMLCalendar(firstweekday=0).formatmonth(2022, 5))\" &gt; cal.html https://t.co/FXphjUIpWL",
            "attachments": {
                "media_keys": [
                    "3_1522896350979014656"
                ]
            },
            "edit_history_tweet_ids": [
                "1522897079416369153"
            ],
            "id": "1522897079416369153"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1522896350979014656",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FSJqKZ3XwAAt9ZW.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1522876029513175043",
            "text": "Cool TIL how to run a #Django command on #Heroku that reads from standard input:\n\n$ cat some_file | heroku run --no-tty -- python https://t.co/Hz6HXKmDx7 my_django_command\n\nShoutout / thanks to @treyhunner :) https://t.co/sG5yvyUC4l",
            "edit_history_tweet_ids": [
                "1522876029513175043"
            ],
            "id": "1522876029513175043"
        }
    },
    {
        "data": {
            "text": "Beware of trailing commas in #Python, it gives you a tuple, which might not be what you want: https://t.co/DEivy9UaWw",
            "edit_history_tweet_ids": [
                "1522603958342230016"
            ],
            "attachments": {
                "media_keys": [
                    "3_1522603664564752386"
                ]
            },
            "conversation_id": "1522603958342230016",
            "id": "1522603958342230016"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1522603664564752386",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FSFf90AXEAIuqf-.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1522560265816088577",
            "text": "Did you know we have a set of flashcards that will disambiguate what really matters in order to become a well rounded #Python #developer? https://t.co/qvefn5JVWU",
            "edit_history_tweet_ids": [
                "1522560265816088577"
            ],
            "conversation_id": "1522560265816088577"
        }
    },
    {
        "data": {
            "id": "1521911018993164290",
            "attachments": {
                "media_keys": [
                    "3_1521910998281633794"
                ]
            },
            "conversation_id": "1521910528775438339",
            "text": "Or when used like this: https://t.co/3jiVaA6TVt",
            "edit_history_tweet_ids": [
                "1521911018993164290"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1521910998281633794",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FR7p_VBWQAIgsgI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python tuple unpacking is beautiful :) https://t.co/xL3mBkXB3Q",
            "attachments": {
                "media_keys": [
                    "3_1521910492922621952"
                ]
            },
            "id": "1521910528775438339",
            "edit_history_tweet_ids": [
                "1521910528775438339"
            ],
            "conversation_id": "1521910528775438339"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1521910492922621952",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FR7ph6aXsAA0gzE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python requests is full of nice abstractions, for starters the http verbs, but also things like requests_for_status(). It's a joy to work with! https://t.co/IpEBUW9GC9",
            "edit_history_tweet_ids": [
                "1521754287306641408"
            ],
            "attachments": {
                "media_keys": [
                    "3_1521754275831070721"
                ]
            },
            "conversation_id": "1521754287306641408",
            "id": "1521754287306641408"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1521754275831070721",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FR5bc4ZXwAEiUox.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1521739199044624384"
            ],
            "id": "1521739199044624384",
            "text": "Really cool plugin - using it to autocomplete usernames in various apps - jquery.mentionsInput https://t.co/qC3rG36qLg via @auchenberg",
            "conversation_id": "1521739199044624384"
        }
    },
    {
        "data": {
            "text": "You can use #Django signals when you need to add some extra logic upon saving a model instance: https://t.co/s7x1RjQk8p",
            "conversation_id": "1521722997232578560",
            "attachments": {
                "media_keys": [
                    "3_1521722505802752000"
                ]
            },
            "edit_history_tweet_ids": [
                "1521722997232578560"
            ],
            "id": "1521722997232578560"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1521722505802752000",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FR4-jn0XIAAP-yh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1521418812184223744",
            "text": "Check out our latest podcast episode, DATA is doing some amazing things in the #teaching space: https://t.co/CvYn0H11TC",
            "edit_history_tweet_ids": [
                "1521418812184223744"
            ],
            "conversation_id": "1521418812184223744"
        }
    },
    {
        "data": {
            "text": "What is your favorite #Python library and why?",
            "id": "1521389027085398016",
            "edit_history_tweet_ids": [
                "1521389027085398016"
            ],
            "conversation_id": "1521389027085398016"
        }
    },
    {
        "data": {
            "text": "The power of the #unix command line: swap a css class site wide :)\n\n$ for file in $(ag -l btn-primary); do sed -i '' 's/btn-primary/btn-dark/g' $file; done\n\nFull video: https://t.co/otbsouIw0n",
            "edit_history_tweet_ids": [
                "1521388952229662722"
            ],
            "conversation_id": "1521388952229662722",
            "id": "1521388952229662722"
        }
    },
    {
        "data": {
            "conversation_id": "1520380129444306945",
            "text": "What have you used rich for?",
            "id": "1520693671112421376",
            "edit_history_tweet_ids": [
                "1520693671112421376"
            ]
        }
    },
    {
        "data": {
            "text": "Thank you @willmcgugan",
            "conversation_id": "1520380129444306945",
            "id": "1520380318154477569",
            "edit_history_tweet_ids": [
                "1520380318154477569"
            ]
        }
    },
    {
        "data": {
            "text": "Source: https://t.co/Grd4mriuZN",
            "edit_history_tweet_ids": [
                "1520380242631745539"
            ],
            "conversation_id": "1520380129444306945",
            "id": "1520380242631745539"
        }
    },
    {
        "data": {
            "text": "Rich is such a nice library, just made a little color searcher, look at that table and those colors \ud83c\udf89\ud83d\ude0d https://t.co/TrFWRazXgC",
            "attachments": {
                "media_keys": [
                    "3_1520379750623162371"
                ]
            },
            "id": "1520380129444306945",
            "edit_history_tweet_ids": [
                "1520380129444306945"
            ],
            "conversation_id": "1520380129444306945"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1520379750623162371",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRl5U--XMAM--F4.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1520361632303562752"
                ]
            },
            "conversation_id": "1520361717934563329",
            "edit_history_tweet_ids": [
                "1520361717934563329"
            ],
            "id": "1520361717934563329",
            "text": "#Python's Standard Library keeps amazing, heard of shlex?\n\nUse case: you have to split by words, but need to keep words together that are in double quotes: https://t.co/55CKfqvMJb"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1520361632303562752",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRlo2W-WQAAqwe5.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1520343361416278018",
            "attachments": {
                "media_keys": [
                    "3_1520343241123672065"
                ]
            },
            "conversation_id": "1520343361416278018",
            "text": "Get the domain name from a url using #Python: https://t.co/ow6zgjViIA",
            "edit_history_tweet_ids": [
                "1520343361416278018"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1520343241123672065",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRlYH2fXsAE0jJK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Quickly get emojis to your clipboard from the command line: https://t.co/B2tMjWjqHv\n\n#python #projects",
            "edit_history_tweet_ids": [
                "1520341575523569664"
            ],
            "conversation_id": "1520341575523569664",
            "id": "1520341575523569664"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1519994130369323008"
            ],
            "id": "1519994130369323008",
            "text": "htmx inline editing is super nice - https://t.co/AaB4E15s2j",
            "conversation_id": "1519994130369323008"
        }
    },
    {
        "data": {
            "text": "The other day I was looping through lines of a file matching a regex pattern for each of them.\n\nBut then I realized I could just do a re.findall() on the complete string in one go!\n\nSimplified example below (also note https://t.co/2EQpvidweu() only matches once) \n\n#python #regex https://t.co/usxJlTSbAJ",
            "edit_history_tweet_ids": [
                "1519601049140703232"
            ],
            "attachments": {
                "media_keys": [
                    "3_1519600281989877761"
                ]
            },
            "conversation_id": "1519601049140703232",
            "id": "1519601049140703232"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1519600281989877761",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRa0Z8CXEAELdiO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1518884695819407361",
            "id": "1519556794338746369",
            "text": "Awesome resources shared in the comments, thanks all!",
            "edit_history_tweet_ids": [
                "1519556794338746369"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1519241520859201536",
            "edit_history_tweet_ids": [
                "1519241520859201536"
            ],
            "id": "1519241520859201536",
            "text": "Thanks @RHelmstedter for sharing the cool stuff you've been doing with Eatlocal! https://t.co/Y853d7Ym6V"
        }
    },
    {
        "data": {
            "id": "1518902928916062209",
            "attachments": {
                "media_keys": [
                    "16_1518902902789660675"
                ]
            },
            "conversation_id": "1518902928916062209",
            "text": "Eagerly waiting for Martin Fowler's Refactoring 2nd ed ... https://t.co/2vEM2hIOFL",
            "edit_history_tweet_ids": [
                "1518902928916062209"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "16_1518902902789660675",
                    "type": "animated_gif"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Who finds regular expressions confusing? \n\nIs it also confusing in #Python? (Which I think has a great re module.)\n\nWhat is confusing? \n\nMaybe I can help out with some content ...",
            "conversation_id": "1518884695819407361",
            "edit_history_tweet_ids": [
                "1518884695819407361"
            ],
            "id": "1518884695819407361"
        }
    },
    {
        "data": {
            "text": "What do you use Faker for?",
            "edit_history_tweet_ids": [
                "1518880037625384962"
            ],
            "conversation_id": "1518553030286843905",
            "id": "1518880037625384962"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1518571793463844870"
            ],
            "id": "1518571793463844870",
            "text": "Are you worried about performance too early?\n\nThis can really stop you in your tracks.\n\nAs a #developer you have to be pragmatic ...\n\nhttps://t.co/JZjD5kjz4S",
            "conversation_id": "1518571793463844870"
        }
    },
    {
        "data": {
            "conversation_id": "1518553030286843905",
            "text": "Cool, with faker you can use a locale, in this case to get random Spanish and Dutch names.\n\n#python #tips https://t.co/S2HWpwP5LE",
            "id": "1518553030286843905",
            "edit_history_tweet_ids": [
                "1518553030286843905"
            ],
            "attachments": {
                "media_keys": [
                    "3_1518552888464785409"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1518552888464785409",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FRL7znGWQAEDRO0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1518481268949856261",
            "text": "Never published a #Python package? Check out this training ... https://t.co/ZUI5eCfcch",
            "edit_history_tweet_ids": [
                "1518481268949856261"
            ],
            "id": "1518481268949856261"
        }
    },
    {
        "data": {
            "id": "1517210019938328577",
            "text": "jedi #vim is awesome, specially this feature:\n\n&gt; Goto assignment &lt;leader&gt;g (typical goto function)\n\nMy leader key is , so when I have my cursor on any object and type ,g it takes me straight to its definition (and ctrl+o takes me back).\n\nThis is going to be a huge time saver!",
            "edit_history_tweet_ids": [
                "1517210019938328577"
            ],
            "conversation_id": "1517210019938328577"
        }
    },
    {
        "data": {
            "conversation_id": "1517072375287894017",
            "edit_history_tweet_ids": [
                "1517072385987514369"
            ],
            "text": "If you want to get more experience writing decorators, check out our dedicated learning path on our platform (which also includes the powerful context manager feature):\nhttps://t.co/GKDaqWZyuD\n\nHope this helps.",
            "id": "1517072385987514369"
        }
    },
    {
        "data": {
            "conversation_id": "1517072375287894017",
            "text": "Then the last variant would be to have a decorator with optional args.\n\nThis took me a while to grasp, so I thought to blog about it when I got it working:\nhttps://t.co/eZ99CQ9bEL",
            "id": "1517072384032919552",
            "edit_history_tweet_ids": [
                "1517072384032919552"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1517072375287894017",
            "text": "So what are the other variants of decorators then?\n\nGlad you asked!\n\nSometimes you want to handle arguments. No problem, just add a level of nesting, for example:\nhttps://t.co/mo2UjXNiXf",
            "edit_history_tweet_ids": [
                "1517072382023942145"
            ],
            "id": "1517072382023942145"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1517072379905810436"
            ],
            "id": "1517072379905810436",
            "text": "What is wraps btw?\n\nIt's best practice to preserve the metadata of the function you are decorating, and functools.wraps lets you do that:\nhttps://t.co/aQROtCGFPp",
            "conversation_id": "1517072375287894017"
        }
    },
    {
        "data": {
            "text": "This is the simplest decorator variant, no args.\n\nAnother example we often use for teaching and starting to write our own #Python decorators is \"timeit\":\nhttps://t.co/1jZxguIAUe",
            "edit_history_tweet_ids": [
                "1517072377636659200"
            ],
            "conversation_id": "1517072375287894017",
            "id": "1517072377636659200"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1517072375287894017"
            ],
            "id": "1517072375287894017",
            "attachments": {
                "media_keys": [
                    "3_1517069252368515074"
                ]
            },
            "text": "Decorators in the wild ...\n\nA common use case is to check if a user is logged in, see #Flask's login_required decorator:\n\nhttps://t.co/MNxezrnIrp\n\nLet's look at decorators a bit more \ud83e\uddf5 https://t.co/bVQir6Abz2",
            "conversation_id": "1517072375287894017"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1517069252368515074",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQ22cn8XwAIAjNq.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1516711317498908680",
            "text": "Also the reason I used 3.1.0a0 is that googletrans would trow a:\n\nAttributeError: 'NoneType' object has no attribute 'group'\n\nSee https://t.co/oRIb1F7ezx",
            "edit_history_tweet_ids": [
                "1516713006360633348"
            ],
            "id": "1516713006360633348"
        }
    },
    {
        "data": {
            "id": "1516713005039468545",
            "edit_history_tweet_ids": [
                "1516713005039468545"
            ],
            "conversation_id": "1516711317498908680",
            "text": "pipx is a tool to help you install and run end-user applications written in #Python:\nhttps://t.co/UstGGk7v85"
        }
    },
    {
        "data": {
            "text": "Run Google Translate from the command line:\n\n$ pipx install googletrans==3.1.0a0  #\u00a0&lt;- works\n...\n$ translate -d es \"hello world\"\n[en] hello world\n    -&gt;\n[es] Hola Mundo\n[pron.] hello world\n\n# .zshrc shortcut\nfunction es {\n    translate -d es \"$1\"\n}\n\n#LanguageLearning #tools #unix",
            "id": "1516711317498908680",
            "edit_history_tweet_ids": [
                "1516711317498908680"
            ],
            "conversation_id": "1516711317498908680"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1516390418220470284"
            ],
            "id": "1516390418220470284",
            "text": "I find this super useful! \n#microservices https://t.co/onguZkhQh6",
            "conversation_id": "1516390418220470284"
        }
    },
    {
        "data": {
            "text": "Python docs:\nhttps://t.co/tvrkacx34q\n\n@PyBites YouTube training: https://t.co/c5JwmUl9HO",
            "edit_history_tweet_ids": [
                "1514529201940013056"
            ],
            "conversation_id": "1514529113960235009",
            "id": "1514529201940013056"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1514529199788367872"
            ],
            "id": "1514529199788367872",
            "text": "20. See the representation / string of an object: https://t.co/xbM40GIYy9",
            "attachments": {
                "media_keys": [
                    "3_1514526496886603777"
                ]
            },
            "conversation_id": "1514529113960235009"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514526496886603777",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSt0xnXwAEFlt6.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "19. Round numbers: https://t.co/9J9afAn6IB",
            "conversation_id": "1514529113960235009",
            "id": "1514529195510185984",
            "edit_history_tweet_ids": [
                "1514529195510185984"
            ],
            "attachments": {
                "media_keys": [
                    "3_1514526614738161666"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514526614738161666",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSt7opX0AIm8sT.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514529113960235009",
            "id": "1514529191299006465",
            "text": "18. Sort values, by key, reversed, and in-place: https://t.co/uhGVOTleD6",
            "attachments": {
                "media_keys": [
                    "3_1514526912437174273"
                ]
            },
            "edit_history_tweet_ids": [
                "1514529191299006465"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514526912437174273",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSuM9qWQAE68xg.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "17. Make values absolute: https://t.co/TvpgZYDeyj",
            "edit_history_tweet_ids": [
                "1514529186806910979"
            ],
            "attachments": {
                "media_keys": [
                    "3_1514527080054243333"
                ]
            },
            "conversation_id": "1514529113960235009",
            "id": "1514529186806910979"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514527080054243333",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSuWuFXwAURkKH.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1514529182495264769"
            ],
            "id": "1514529182495264769",
            "text": "16. Use next() to retrieve the next value from a generator: https://t.co/R0h3voS5JO",
            "attachments": {
                "media_keys": [
                    "3_1514526183286841349"
                ]
            },
            "conversation_id": "1514529113960235009"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514526183286841349",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQStihXXIAUAXiu.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "15. Call a method on the parent class: https://t.co/4wRGSrSyOb",
            "edit_history_tweet_ids": [
                "1514529178363875328"
            ],
            "attachments": {
                "media_keys": [
                    "3_1514528947085758468"
                ]
            },
            "conversation_id": "1514529113960235009",
            "id": "1514529178363875328"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514528947085758468",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSwDZUX0AQchor.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1514529173565489159"
            ],
            "id": "1514529173565489159",
            "text": "14. Check for, get and set attributes: https://t.co/YFWGqp3Uni",
            "attachments": {
                "media_keys": [
                    "3_1514525698391748614"
                ]
            },
            "conversation_id": "1514529113960235009"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514525698391748614",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQStGS_XMAYl6iK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514529113960235009",
            "text": "13. Get user input: https://t.co/j2dK8zRyYs",
            "attachments": {
                "media_keys": [
                    "3_1514528513629597701"
                ]
            },
            "edit_history_tweet_ids": [
                "1514529169337720833"
            ],
            "id": "1514529169337720833"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514528513629597701",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSvqKkXsAU9JNH.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "12. Get the min and max of a sequence: https://t.co/g2AXt4ao1E",
            "conversation_id": "1514529113960235009",
            "attachments": {
                "media_keys": [
                    "3_1514525068126298113"
                ]
            },
            "edit_history_tweet_ids": [
                "1514529164950446082"
            ],
            "id": "1514529164950446082"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514525068126298113",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSshnEXoAEVxD0.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "11. Use dir() together with a list comprehension to only list \"public\" methods (and attributes) of an object: https://t.co/umewA2RcnN",
            "conversation_id": "1514529113960235009",
            "attachments": {
                "media_keys": [
                    "3_1514524809258053632"
                ]
            },
            "edit_history_tweet_ids": [
                "1514529160710000642"
            ],
            "id": "1514529160710000642"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514524809258053632",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSsSitXsAAoyhr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "10. Name and apply a slice: https://t.co/3DjV1ctZ1Z",
            "attachments": {
                "media_keys": [
                    "3_1514524502809583616"
                ]
            },
            "id": "1514529156490575877",
            "edit_history_tweet_ids": [
                "1514529156490575877"
            ],
            "conversation_id": "1514529113960235009"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514524502809583616",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSsAtGXIAAHd3v.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1514524314292428803"
                ]
            },
            "conversation_id": "1514529113960235009",
            "edit_history_tweet_ids": [
                "1514529152388509699"
            ],
            "id": "1514529152388509699",
            "text": "9. Get a quotient and remainder, for example to divide seconds into minutes + seconds: https://t.co/iVW0nFAnml"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514524314292428803",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSr1u0XoAMN60L.png"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1514529147795685381",
            "text": "8. Make a range of integers with a step: https://t.co/7z7rHMFDtj",
            "attachments": {
                "media_keys": [
                    "3_1514524121572556809"
                ]
            },
            "edit_history_tweet_ids": [
                "1514529147795685381"
            ],
            "conversation_id": "1514529113960235009"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514524121572556809",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSrqg4XwAkZecT.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "7. Reverse a list: https://t.co/VAbbzK5nGH",
            "conversation_id": "1514529113960235009",
            "attachments": {
                "media_keys": [
                    "3_1514523990827614210"
                ]
            },
            "edit_history_tweet_ids": [
                "1514529143186149377"
            ],
            "id": "1514529143186149377"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514523990827614210",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSri50WQAIYU-R.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "6. Uniquify a list: https://t.co/0SPzb8SoRB",
            "edit_history_tweet_ids": [
                "1514529139063144449"
            ],
            "attachments": {
                "media_keys": [
                    "3_1514523864004444160"
                ]
            },
            "conversation_id": "1514529113960235009",
            "id": "1514529139063144449"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514523864004444160",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSrbhXWQAA5NqR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514529113960235009",
            "text": "5. Summing values: https://t.co/f47IkPIi1K",
            "id": "1514529134898262017",
            "edit_history_tweet_ids": [
                "1514529134898262017"
            ],
            "attachments": {
                "media_keys": [
                    "3_1514523735612612608"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514523735612612608",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSrUDEWYAAXzSj.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1514523628020379648"
                ]
            },
            "conversation_id": "1514529113960235009",
            "text": "4. Print things: https://t.co/6c8VKN6ZDs",
            "edit_history_tweet_ids": [
                "1514529130947227649"
            ],
            "id": "1514529130947227649"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514523628020379648",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSrNyQXMAAAwli.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514529113960235009",
            "text": "3. Check if a condition holds true for any or all items in a sequence: https://t.co/4jWoaxRwPL",
            "attachments": {
                "media_keys": [
                    "3_1514522893182504961"
                ]
            },
            "edit_history_tweet_ids": [
                "1514529126476095488"
            ],
            "id": "1514529126476095488"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514522893182504961",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSqjAxXEAEwKDP.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "2. Get a counter when looping through a sequence: https://t.co/aXIY9I4Gsx",
            "edit_history_tweet_ids": [
                "1514529122294374400"
            ],
            "attachments": {
                "media_keys": [
                    "3_1514522179379023875"
                ]
            },
            "conversation_id": "1514529113960235009",
            "id": "1514529122294374400"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514522179379023875",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSp5dpWUAMXG54.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1514521976160894982"
                ]
            },
            "id": "1514529118016180227",
            "edit_history_tweet_ids": [
                "1514529118016180227"
            ],
            "conversation_id": "1514529113960235009",
            "text": "1. Make a dictionary from two lists: https://t.co/EhT1rCS2nG"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514521976160894982",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQSptomXwAY_T90.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514529113960235009",
            "edit_history_tweet_ids": [
                "1514529113960235009"
            ],
            "text": "20 cool things you can do with #Python's built-in functions \ud83d\udc0d\ud83e\uddf5",
            "id": "1514529113960235009"
        }
    },
    {
        "data": {
            "conversation_id": "1514171273437454336",
            "edit_history_tweet_ids": [
                "1514300276055891971"
            ],
            "id": "1514300276055891971",
            "text": "Or generator expression even :)"
        }
    },
    {
        "data": {
            "conversation_id": "1514171273437454336",
            "id": "1514185792624762881",
            "text": "Also this probably only becomes a problem for bigger data. I post it here for awareness, but writing readable / maintainable code should be your first focus.",
            "edit_history_tweet_ids": [
                "1514185792624762881"
            ]
        }
    },
    {
        "data": {
            "text": "Btw instead of loop + append, I could also have used a list comprehension inside the .join()",
            "conversation_id": "1514171273437454336",
            "id": "1514171276516077574",
            "edit_history_tweet_ids": [
                "1514171276516077574"
            ]
        }
    },
    {
        "data": {
            "text": "When you build up a #Python string use a list over string concatenation (+=).\n\nSee https://t.co/kuErQ7jhlx:\n&gt; Strings are immutable and can't be changed in place. To alter one, a new representation needs to be created.\n\nSo that happens repeatedly here = slower. https://t.co/PRZgmPhl8u",
            "conversation_id": "1514171273437454336",
            "attachments": {
                "media_keys": [
                    "3_1514170008628338695"
                ]
            },
            "edit_history_tweet_ids": [
                "1514171273437454336"
            ],
            "id": "1514171273437454336"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514170008628338695",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQNpmbXXoAcH_J1.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Swapping variables without a temp one, Python's tuple unpacking is awesome :) https://t.co/NUlRzEn4dM",
            "conversation_id": "1514163641184100354",
            "attachments": {
                "media_keys": [
                    "3_1514160712557502468"
                ]
            },
            "edit_history_tweet_ids": [
                "1514163641184100354"
            ],
            "id": "1514163641184100354"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514160712557502468",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQNhJUzXoAQkafu.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514144028366880771",
            "text": "Good to know, but in practice I mostly use a list in that case.",
            "edit_history_tweet_ids": [
                "1514145557954142210"
            ],
            "id": "1514145557954142210"
        }
    },
    {
        "data": {
            "text": "How to slice a generator? You can use itertools.islice: https://t.co/P1R3ONpcCD",
            "edit_history_tweet_ids": [
                "1514144028366880771"
            ],
            "attachments": {
                "media_keys": [
                    "3_1514144005570891782"
                ]
            },
            "conversation_id": "1514144028366880771",
            "id": "1514144028366880771"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1514144005570891782",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQNR82bXEAYupso.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1514125116971569158",
            "edit_history_tweet_ids": [
                "1514125116971569158"
            ],
            "text": "Tune in to the Pybites podcast, where we talk about #Python, #career and #mindset (+/- one weekly episode). Check out the latest one about your Authentic Self: https://t.co/wnHADSeYdE",
            "id": "1514125116971569158"
        }
    },
    {
        "data": {
            "id": "1513460294080729091",
            "text": "Curious what to build next in #Python to get those reps / that deliberate practice in? Maybe this helps: https://t.co/PVY7z2kxhY",
            "edit_history_tweet_ids": [
                "1513460294080729091"
            ],
            "conversation_id": "1513460294080729091"
        }
    },
    {
        "data": {
            "conversation_id": "1513459772221267972",
            "text": "Need caching / memoization in #Python? As usual, the Standard Library has you covered ... meet the lru_cache decorator: https://t.co/Hsz4ZapCuV",
            "attachments": {
                "media_keys": [
                    "3_1513459764692496396"
                ]
            },
            "edit_history_tweet_ids": [
                "1513459772221267972"
            ],
            "id": "1513459772221267972"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1513459764692496396",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FQDjoyhXsAwVKCB.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1513070179168751617"
            ],
            "id": "1513070179168751617",
            "text": "What #Python projects are you working on today / this week?\n\nI improved the search functionality of one of our Slack bots today :)\n\nHappy Sunday / coding \ud83d\udc0d\ud83c\udfa7\u2615\ufe0f\ud83d\udca1\ud83c\udf89",
            "conversation_id": "1513070179168751617"
        }
    },
    {
        "data": {
            "text": "Reminder we have a free FastAPI learning path on our platform: https://t.co/WCvEIKR592\n\nCome learn this awesome framework with us writing a simple API (then build one yourself)\n\nThings are a bit busy but we'll follow up with SQLModel in the near future ...\n\nHave fun!",
            "id": "1513066637095751681",
            "edit_history_tweet_ids": [
                "1513066637095751681"
            ],
            "conversation_id": "1513066637095751681"
        }
    },
    {
        "data": {
            "text": "Picking the right data structure matters, e.g. if you need appends and pops on either end of a list, a collections.deque is significantly faster: https://t.co/rVPMuZgp8D",
            "edit_history_tweet_ids": [
                "1512692654160678912"
            ],
            "attachments": {
                "media_keys": [
                    "3_1512692565262454784"
                ]
            },
            "conversation_id": "1512692654160678912",
            "id": "1512692654160678912"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512692565262454784",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FP4p357X0AA_YKW.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python's print() built-in is more powerful than you might think: https://t.co/9WJo4ugEh8",
            "edit_history_tweet_ids": [
                "1512408827970400260"
            ],
            "attachments": {
                "media_keys": [
                    "3_1512408808500383751"
                ]
            },
            "conversation_id": "1512408827970400260",
            "id": "1512408827970400260"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512408808500383751",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FP0nzFnWUAcEL4r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1512352346893864964"
                ]
            },
            "conversation_id": "1512352518453538818",
            "text": "Let's dive deeper into #Python type hints with our new article:\n\nCode Better with Type Hints \u2013 Part 3 https://t.co/5WxSAZFmos \n\nEnjoy! https://t.co/VpuYAGjAQW",
            "edit_history_tweet_ids": [
                "1512352518453538818"
            ],
            "id": "1512352518453538818"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512352346893864964",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPz0clvWUAQvaO3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I really like @htmx_org. In this video I show you how to make an infinite scroll of YouTube videos using FastAPI, SQLModel and htmx: https://t.co/wwYwcMhXck https://t.co/upq3e1BV2u",
            "edit_history_tweet_ids": [
                "1512347510982987776"
            ],
            "attachments": {
                "media_keys": [
                    "7_1512346975466921986"
                ]
            },
            "conversation_id": "1512347510982987776",
            "id": "1512347510982987776"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1512346975466921986",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Today a video about #Python dataclasses: https://t.co/uQyp78Zacq https://t.co/0Vzwm9Rbx4",
            "attachments": {
                "media_keys": [
                    "3_1512337419907080192"
                ]
            },
            "id": "1512337509354725376",
            "edit_history_tweet_ids": [
                "1512337509354725376"
            ],
            "conversation_id": "1512337509354725376"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512337419907080192",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPzm3uYXoAA3qet.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Keeping your memory footprint down with #Python generators, a huge benefit when working with \"big\" data: https://t.co/B9zTYYoDVM",
            "edit_history_tweet_ids": [
                "1512320089495900162"
            ],
            "attachments": {
                "media_keys": [
                    "3_1512320069573001218"
                ]
            },
            "conversation_id": "1512320089495900162",
            "id": "1512320089495900162"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512320069573001218",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPzXFzWXwAIE1KR.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Today a video explaining #Python's property decorator: https://t.co/l0tXyymDrk https://t.co/XgF2EhNbZk",
            "attachments": {
                "media_keys": [
                    "3_1512111665243996161"
                ]
            },
            "id": "1512111736891088896",
            "edit_history_tweet_ids": [
                "1512111736891088896"
            ],
            "conversation_id": "1512111736891088896"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1512111665243996161",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPwZjEuXwAEi1er.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1511626178846765057",
            "id": "1511626178846765057",
            "text": "What does \"!r\" do in an f-string?\n\nFor example:\nf'name={https://t.co/TlEQWgPIuj!r},'\n\nQuoting the #Python docs:\nhttps://t.co/b9M2JqoEbE\n\n&gt; Three conversion flags are currently supported: '!s' which calls str() on the value, '!r' which calls repr() and '!a' which calls ascii().",
            "edit_history_tweet_ids": [
                "1511626178846765057"
            ]
        }
    },
    {
        "data": {
            "id": "1511613521200623617",
            "conversation_id": "1511311152386617346",
            "text": "By the way, using order=True on a dataclass you also get this for free :)",
            "edit_history_tweet_ids": [
                "1511613521200623617"
            ]
        }
    },
    {
        "data": {
            "text": "Write only two comparison #Python magic methods and get 5 in return?\n\nYou can use the total_ordering decorator from the functools module like so: https://t.co/jkZyLIVapk",
            "conversation_id": "1511311152386617346",
            "attachments": {
                "media_keys": [
                    "3_1511311118299545600"
                ]
            },
            "edit_history_tweet_ids": [
                "1511311152386617346"
            ],
            "id": "1511311152386617346"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1511311118299545600",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPlBdG9XwAAJM0k.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Too tired at night? Sometimes you're capable of more ...\n \nGive it just five minutes:\nhttps://t.co/dR96DVahrR\n\nShoutout to @HughTipping, thanks for writing this article!\n\n#Mindset #Productivity",
            "edit_history_tweet_ids": [
                "1511248015708901378"
            ],
            "conversation_id": "1511248015708901378",
            "id": "1511248015708901378"
        }
    },
    {
        "data": {
            "conversation_id": "1511231659210948609",
            "text": "\ud83c\udf89\ud83e\udd77\ud83d\ude03 https://t.co/J3cF3NowFl",
            "edit_history_tweet_ids": [
                "1511231659210948609"
            ],
            "id": "1511231659210948609"
        }
    },
    {
        "data": {
            "id": "1511230044089237506",
            "text": "In today's video I show you how to make a custom #Django command that uses feedparser to import @Pybites articles into a simple model / DB table:\nhttps://t.co/rAfPkOv0OQ https://t.co/0zyYBBQAna",
            "attachments": {
                "media_keys": [
                    "3_1511229521613176838"
                ]
            },
            "edit_history_tweet_ids": [
                "1511230044089237506"
            ],
            "conversation_id": "1511230044089237506"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1511229521613176838",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPj3PjnWQAYxc8z.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1511019055028883459",
            "edit_history_tweet_ids": [
                "1511019055028883459"
            ],
            "conversation_id": "1511019013870174212",
            "text": "New to dunder / special / magic methods? \n\nI wrote a guest article a few years ago explaining them:\n\nhttps://t.co/N2ibge6K28"
        }
    },
    {
        "data": {
            "text": "I stumbled upon this #Python dunder method override in feedparser (PyPI) which adds support for accessing dict keys as attributes \ud83e\udd2f\n\nI don't see a use case beyond this, but it highlights something interesting you can do with Python classes:\n\nhttps://t.co/HmQF74iP4r https://t.co/25qtJNIrvt",
            "edit_history_tweet_ids": [
                "1511019013870174212"
            ],
            "attachments": {
                "media_keys": [
                    "3_1511018941648457731"
                ]
            },
            "conversation_id": "1511019013870174212",
            "id": "1511019013870174212"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1511018941648457731",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPg3uMHX0AMjtn_.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1510296877962571784",
            "id": "1510296877962571784",
            "text": "Does a string contain one or more digits in #Python? \n\nWhich way do you prefer?\n\n1) any(map(str.isdigit, s)\n\n2) any(c.isdigit() for c in s)\n\n3) https://t.co/2EQpvidweu(r\"\\d+\", s)",
            "edit_history_tweet_ids": [
                "1510296877962571784"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1510228895303446528",
            "text": "Got pytesseract (image to text) working on AWS Lambda using a Docker container, expect a blog post soon ...",
            "id": "1510228895303446528",
            "edit_history_tweet_ids": [
                "1510228895303446528"
            ]
        }
    },
    {
        "data": {
            "id": "1510174528546254848",
            "edit_history_tweet_ids": [
                "1510174528546254848"
            ],
            "conversation_id": "1510174528546254848",
            "text": "This one is fun!\nBite 176. Create a variable length chessboard https://t.co/SjlMmJtmnS\n\nWas reminded of integer division and itertools.cycle by going through the Bite forum :)"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1510170908828254210"
            ],
            "id": "1510170908828254210",
            "text": "#unix #tip: you can use -p with the mkdir command and no error will be reported if a directory given as an operand already exists.",
            "conversation_id": "1510170908828254210"
        }
    },
    {
        "data": {
            "text": "itertools.cycle is neat to loop through a sequence ad infinitum (btw \"_\" is #Python's convention for a throwaway variable) https://t.co/854qKiAoYu",
            "conversation_id": "1509938788193161224",
            "id": "1509938788193161224",
            "edit_history_tweet_ids": [
                "1509938788193161224"
            ],
            "attachments": {
                "media_keys": [
                    "3_1509938525529116679"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1509938525529116679",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPRhFsbXEAcqqpj.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1509866093426397184"
                ]
            },
            "conversation_id": "1509866106227408898",
            "text": "Division = float in Python3, if you want int, just do // https://t.co/bVEyPNtmji",
            "id": "1509866106227408898",
            "edit_history_tweet_ids": [
                "1509866106227408898"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1509866093426397184",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPQfNl0WUAACdYZ.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1509505195801202691",
            "text": "In today's video we'll look at some tools to make it easier to retrieve info from #Python objects:\n\n- dir() and help()\n- pydoc\n- ? and ?? in IPython\n- pybites-pysource / inspect\n\nhttps://t.co/ZtGjQG42Nf \n\nHope this is useful and let me know what else we could cover ... thanks.",
            "id": "1509505195801202691",
            "edit_history_tweet_ids": [
                "1509505195801202691"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1509421499844812803",
            "id": "1509421499844812803",
            "text": "You can use the callable() built-in to see if an object is callable in #Python.\n\nBonus: you can use the __call__() \"dunder\" (or special method) to make an object callable: https://t.co/oKs0ac13RI",
            "edit_history_tweet_ids": [
                "1509421499844812803"
            ],
            "attachments": {
                "media_keys": [
                    "3_1509421473819205633"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1509421473819205633",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPKK1UtXIAElbRJ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1509102733277732869"
            ],
            "id": "1509102733277732869",
            "text": "I am thinking about starting a #Python refactoring series on YouTube. Useful? Questions? Source code even I could use? Thanks.",
            "conversation_id": "1509102733277732869"
        }
    },
    {
        "data": {
            "conversation_id": "1509071291541770246",
            "attachments": {
                "media_keys": [
                    "3_1509071127649439744"
                ]
            },
            "edit_history_tweet_ids": [
                "1509071291541770246"
            ],
            "text": "Nice #Python Bite exercise refactoring: collections.namedtuple now accepts \"defaults\" (since 3.7). Before we used Transaction.__new__.__defaults__: https://t.co/rxL4OHeV9O",
            "id": "1509071291541770246"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1509071127649439744",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPFMMfhX0AAJ8jz.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1509068822543806467"
            ],
            "id": "1509068822543806467",
            "attachments": {
                "media_keys": [
                    "3_1509068793540194305"
                ]
            },
            "text": "#Python's pathlib.Path supports glob() which lets you easily list files by string filter: https://t.co/ptsEPBfKxe",
            "conversation_id": "1509068822543806467"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1509068793540194305",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPFKEoSXMAEURS3.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1509058678153953284",
            "attachments": {
                "media_keys": [
                    "3_1509058269947564036"
                ]
            },
            "edit_history_tweet_ids": [
                "1509058678153953284"
            ],
            "text": "I just cracked Bite 133. Convert an Amazon URL into an affiliation link:\nhttps://t.co/oTreu0Bnin\n\n#Python #CodeChallenges \n\n\u2764\ufe0fit when:\n- one test keeps failing and you have to come up with a more robust solution \ud83d\udcaa\n- look at all the creative solutions in the forum afterwards \ud83d\udc0d\ud83e\udd77 https://t.co/8vyYKdPZDq",
            "id": "1509058678153953284"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1509058269947564036",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPFAgE2XEAQTAxQ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1508793028626026503",
            "text": "#Python's str.strip() can remove multiple leading and trailing characters at once: https://t.co/MkUsmlHChT",
            "attachments": {
                "media_keys": [
                    "3_1508792956005793803"
                ]
            },
            "edit_history_tweet_ids": [
                "1508793028626026503"
            ],
            "conversation_id": "1508793028626026503"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1508792956005793803",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPBPMxZWQAsnZo8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1508734176488480771",
            "attachments": {
                "media_keys": [
                    "3_1508715624754733059"
                ]
            },
            "edit_history_tweet_ids": [
                "1508734176488480771"
            ],
            "text": "In our new YouTube video we set up a #Django project and manage environment variables with python-decouple. \n\nWe show both the interface as well as some internals (using the debugger). Hope it helps you hit the ground running with this library.\n\nhttps://t.co/cHZCaIfPOR https://t.co/ybbvjqjPfx",
            "id": "1508734176488480771"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1508715624754733059",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FPAI3gCWYAMMh0i.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "@juliansequeira",
            "conversation_id": "1508495850649100289",
            "edit_history_tweet_ids": [
                "1508497500650549254"
            ],
            "id": "1508497500650549254"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1508495850649100289"
            ],
            "id": "1508495850649100289",
            "text": "I had a blast interviewing Jesse, he shared some really valuable insights for (aspiring) #Python #developers!\n\nTime to tune into the Pybites podcast: https://t.co/AQ6eF9TyvZ",
            "conversation_id": "1508495850649100289"
        }
    },
    {
        "data": {
            "conversation_id": "1508420650607824903",
            "text": "Final #Python Newbie Bite screencasts coming this week - big thanks and shoutout to @RHelmstedter! https://t.co/BlnuKsPyqc",
            "edit_history_tweet_ids": [
                "1508420650607824903"
            ],
            "id": "1508420650607824903"
        }
    },
    {
        "data": {
            "conversation_id": "1508376168868855810",
            "id": "1508376168868855810",
            "text": "What are the most common first names on our platform?\n\nYou can use #Django's aggregate queries, specifically \"annotate\" in this case. It's the equivalent of a GROUP BY in SQL.\n\n\u2764\ufe0fLoving Django's ORM \ud83d\udc0d https://t.co/hMdt9itqZZ",
            "edit_history_tweet_ids": [
                "1508376168868855810"
            ],
            "attachments": {
                "media_keys": [
                    "3_1508375553296023557"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1508375553296023557",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FO7TkvIXwAUdba2.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Adding a __main__.py file to your #Python package serves as an \"entry point\" making the package callable with -m, e.g. python -m my_package https://t.co/Zcq5ruhhIQ",
            "edit_history_tweet_ids": [
                "1508333798261506049"
            ],
            "attachments": {
                "media_keys": [
                    "3_1508333767953428482"
                ]
            },
            "conversation_id": "1508333798261506049",
            "id": "1508333798261506049"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1508333767953428482",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FO6tkgmXMAIduvk.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1507284252676833292"
                ]
            },
            "conversation_id": "1507284261052850178",
            "edit_history_tweet_ids": [
                "1507284261052850178"
            ],
            "id": "1507284261052850178",
            "text": "Prevent a file from being overwritten in #Python: https://t.co/A8aG5j1zQQ"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1507284252676833292",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FOrzCrhXwAwuwED.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1507258149287383050",
            "edit_history_tweet_ids": [
                "1507258149287383050"
            ],
            "text": "So now that we have our Pybites FastAPI learning path, opening up Vim to write the next one: SQLModel + workout tracking. Stay tuned ...",
            "id": "1507258149287383050"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1507257374029008915"
                ]
            },
            "id": "1507257386582560776",
            "edit_history_tweet_ids": [
                "1507257386582560776"
            ],
            "conversation_id": "1507257386582560776",
            "text": "The built-in datetime library covers a lot of common scenarios in a pretty elegant way. \n\nIf you need more advanced features, check out python-dateutil. \n\nE.g. you can use rrule to setup recurring events in time. This snippet also shows fuzzy date parsing.\n\n#Python #tips https://t.co/b6GqnjeaGT"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1507257374029008915",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FOramIwWUBMkMAD.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1506537861969059842"
                ]
            },
            "id": "1506537929333694465",
            "edit_history_tweet_ids": [
                "1506537929333694465"
            ],
            "conversation_id": "1506537929333694465",
            "text": "Nice article shared by @pycoders:\n\n#Python List Vs. Tuple: An In-Depth Comparison by @chetanambi \n\nhttps://t.co/h81841y1HT \n\nNote you can use timeit to measure speed of code: https://t.co/DOvGFwuJEi"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1506537861969059842",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FOhMNBdXoAI3WNt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1506187386555932673"
            ],
            "id": "1506187386555932673",
            "text": "Celebrating another milestone on our platform \ud83c\udf89\n\nWanna learn some #MachineLearning? Let's get started \ud83c\udfa7 https://t.co/g44FRJpYKT",
            "conversation_id": "1506187386555932673"
        }
    },
    {
        "data": {
            "id": "1505859181211000833",
            "text": "We're live with a brand new learning path! \n\nNow is better than never, time to learn the awesome FastAPI framework :) https://t.co/9PKzdCgIHF",
            "edit_history_tweet_ids": [
                "1505859181211000833"
            ],
            "conversation_id": "1505859181211000833"
        }
    },
    {
        "data": {
            "id": "1505844102906195974",
            "attachments": {
                "media_keys": [
                    "3_1505844095415164931"
                ]
            },
            "conversation_id": "1505844102906195974",
            "text": "Love any/all built-in #Python functions, they lead to concise code: https://t.co/AkBIzzjtgG",
            "edit_history_tweet_ids": [
                "1505844102906195974"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1505844095415164931",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FOXVOfpXIAMWBdc.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "... starting with scikit-learn :)",
            "conversation_id": "1505174943599927299",
            "edit_history_tweet_ids": [
                "1505812222861361153"
            ],
            "id": "1505812222861361153"
        }
    },
    {
        "data": {
            "id": "1505812140850040832",
            "text": "We just cracked Bite 91. Matching multiple strings - and now We Challenge You!  https://t.co/j9rJn8tHsQ #Python #CodeChallenges - nice one to practice any / all built-in functions :)",
            "edit_history_tweet_ids": [
                "1505812140850040832"
            ],
            "conversation_id": "1505812140850040832"
        }
    },
    {
        "data": {
            "conversation_id": "1505174943599927299",
            "text": "Managed to create an AWS Lambda function from a Docker image which means we can do some more #Python #datascience exercises on our platform soon!",
            "id": "1505174943599927299",
            "edit_history_tweet_ids": [
                "1505174943599927299"
            ]
        }
    },
    {
        "data": {
            "text": "Btw you can also use pathlib's Path.glob: https://t.co/1w8U12mMvQ",
            "edit_history_tweet_ids": [
                "1505082738365370372"
            ],
            "attachments": {
                "media_keys": [
                    "3_1505082699349962758"
                ]
            },
            "conversation_id": "1504841049969246210",
            "id": "1505082738365370372"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1505082699349962758",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FOMgvaRXMAYaUlQ.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1504841049969246210",
            "attachments": {
                "media_keys": [
                    "3_1504841014237962241"
                ]
            },
            "edit_history_tweet_ids": [
                "1504841049969246210"
            ],
            "text": "#Python #tips: you can use os.walk to get all the files in a directory recursively. \n\nHere we use it to see which file extensions are most common: https://t.co/2IQ4Q3lj2B",
            "id": "1504841049969246210"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1504841014237962241",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FOJE7fEXoAEvp0M.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Love set operations ... what #Python 2 builtins did not make it to Python 3? https://t.co/k9xSmTfsYA",
            "edit_history_tweet_ids": [
                "1504831497999634443"
            ],
            "attachments": {
                "media_keys": [
                    "3_1504831437983334408"
                ]
            },
            "conversation_id": "1504831497999634443",
            "id": "1504831497999634443"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1504831437983334408",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FOI8OEvWQAgIBtS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Do you want to test something that gets logged in #Python? You can use pytest's caplog fixture: https://t.co/L2PAILNih0",
            "conversation_id": "1504027037593440260",
            "attachments": {
                "media_keys": [
                    "3_1504027026151383041"
                ]
            },
            "edit_history_tweet_ids": [
                "1504027037593440260"
            ],
            "id": "1504027037593440260"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1504027026151383041",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FN9gnJJXIAEHT_w.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Do you think the Gang of Four design patterns book is a bit dense and not all might apply to #Python?\n\n@brandon_rhodes does a great job discussing which patterns are relevant to Python and how, a very insightful read:\n\nhttps://t.co/PIL6z19jjC",
            "edit_history_tweet_ids": [
                "1503997050354028547"
            ],
            "conversation_id": "1503997050354028547",
            "id": "1503997050354028547"
        }
    },
    {
        "data": {
            "text": "I like pytest-cov :) https://t.co/utxh9vyptT",
            "conversation_id": "1503723802630496267",
            "id": "1503723802630496267",
            "edit_history_tweet_ids": [
                "1503723802630496267"
            ],
            "attachments": {
                "media_keys": [
                    "3_1503723754211401731"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1503723754211401731",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FN5MyZIWYAMvKBr.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Adding pytest.fixture(scope=\"session\") can speed up your tests quite a bit (of course you need to do proper setup / teardown / isolation)",
            "conversation_id": "1503723653921492999",
            "edit_history_tweet_ids": [
                "1503723653921492999"
            ],
            "id": "1503723653921492999"
        }
    },
    {
        "data": {
            "text": "Actually: \n\n&gt; Changed in version 3.10: Unions can now be written as X | Y\n\nNice :)\n\nPlatform is still on 3.8 though hence the old notation.",
            "edit_history_tweet_ids": [
                "1503683018548027394"
            ],
            "conversation_id": "1503681375202852872",
            "id": "1503683018548027394"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1503681240846721029"
                ]
            },
            "conversation_id": "1503681375202852872",
            "text": "I just cracked Bite 46. You are a programmer! Code Fizz Buzz - and now I challenge you ... \nhttps://t.co/KznRbjSaCb \n\nI also updated this exercise with type hints. You can use typing.Union to return various types, here str and int. \n\n#Python #CodeChallenges https://t.co/1TNQVtwc40",
            "id": "1503681375202852872",
            "edit_history_tweet_ids": [
                "1503681375202852872"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1503681240846721029",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FN4mHygWYAUC4oK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1503679159394082818",
            "id": "1503679159394082818",
            "text": "Using #Python's zip built-in function to create and unpack dictionaries: https://t.co/wQEJYLf2jL",
            "attachments": {
                "media_keys": [
                    "3_1503678952019312641"
                ]
            },
            "edit_history_tweet_ids": [
                "1503679159394082818"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1503678952019312641",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FN4kCj9XwAEdqjV.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1503650622213697536"
            ],
            "id": "1503650622213697536",
            "text": "Two ways to rotate a string (left and right) by n characters in #Python: https://t.co/cBnvp69iE3",
            "attachments": {
                "media_keys": [
                    "3_1503650604283056130"
                ]
            },
            "conversation_id": "1503650622213697536"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1503650604283056130",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FN4KQgaX0AInMf4.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1503383022774759427",
            "id": "1503383022774759427",
            "text": "\ud83d\udce2 More Newbie Bites screencasts \ud83d\udca1\n\nToday @RHelmstedter teaches us about truthiness in #Python \ud83d\udc0d\n\nhttps://t.co/VGQMZQw8kK https://t.co/XJE5C6Zthr",
            "attachments": {
                "media_keys": [
                    "7_1503382715537711110"
                ]
            },
            "edit_history_tweet_ids": [
                "1503383022774759427"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1503382715537711110",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python makes it easy to pick a random sample from a sequence: https://t.co/RfFrLSH358",
            "edit_history_tweet_ids": [
                "1503373668625395714"
            ],
            "attachments": {
                "media_keys": [
                    "3_1503373638032150535"
                ]
            },
            "conversation_id": "1503373668625395714",
            "id": "1503373668625395714"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1503373638032150535",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FN0OW8uX0AcoUya.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Type hints are so useful!\n\nDid you know about this dunder? https://t.co/45nocsGD3b",
            "conversation_id": "1503347338110189573",
            "attachments": {
                "media_keys": [
                    "3_1503350353995173888"
                ]
            },
            "edit_history_tweet_ids": [
                "1503350384236113923"
            ],
            "id": "1503350384236113923"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1503350353995173888",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNz5Lo7XEAAhnhK.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1503347338110189573",
            "text": "I just cracked Bite 44. License key generator - and now I challenge you!  https://t.co/wQrGi8cBU1 #Python #CodeChallenges \n\nFun exercise where you can use some nice Standard Library modules. Let me add some type hinting as well :)",
            "edit_history_tweet_ids": [
                "1503347338110189573"
            ],
            "conversation_id": "1503347338110189573"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1502264993466785796"
                ]
            },
            "conversation_id": "1502265324351234049",
            "edit_history_tweet_ids": [
                "1502265324351234049"
            ],
            "id": "1502265324351234049",
            "text": "If you \"yield\" instead of \"return\" from a #pytest fixture you can write some teardown code after it: https://t.co/zmVfArBuDR"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1502264993466785796",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNkeDV4XoAQa7QE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1502243979718451205"
            ],
            "id": "1502243979718451205",
            "text": "Almost forgot, we did a video about this too: https://t.co/KCga7X5rwe",
            "conversation_id": "1502236000168390669"
        }
    },
    {
        "data": {
            "text": "Starting Bite 8 out of 10 of the FastAPI PyBites Learning Path ... getting closer! \ud83c\udf89\ud83d\udc0d\u2615\ufe0f\ud83c\udfa7\ud83d\ude03\n\n#Python #APIs #learning #codechallenges",
            "edit_history_tweet_ids": [
                "1502243030736285701"
            ],
            "conversation_id": "1502243030736285701",
            "id": "1502243030736285701"
        }
    },
    {
        "data": {
            "conversation_id": "1502239099326980099",
            "text": "I just cracked Bite 26. Dictionary comprehensions are awesome - and now I challenge you! \n\nhttps://t.co/A23P4kad1A \n\n#Python #CodeChallenges\n\n(Interestingly found an enhancement: add/change to constants. Tip for content creators: consume your old content after a while ...)",
            "id": "1502239099326980099",
            "edit_history_tweet_ids": [
                "1502239099326980099"
            ]
        }
    },
    {
        "data": {
            "text": "Here is how to export a #Django model to a JSON file and load it in: https://t.co/tBMQ868Esw",
            "conversation_id": "1502236000168390669",
            "attachments": {
                "media_keys": [
                    "3_1502235924930965514"
                ]
            },
            "edit_history_tweet_ids": [
                "1502236000168390669"
            ],
            "id": "1502236000168390669"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1502235924930965514",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNkDnVJXMAogWL8.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I learned cool new things talking with @pypyrpipes about #debugging and #designpatterns this week (thanks Thomas!) \n\nI hope you get a lot out of our new #podcast episode too:\n\n#062 - The Art of Debugging (and Design Patterns)  https://t.co/XaFPwxPxq6 \n\n#Python #developer #mindset",
            "conversation_id": "1502182806105075713",
            "id": "1502182806105075713",
            "edit_history_tweet_ids": [
                "1502182806105075713"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1501898832199794688",
            "id": "1501898832199794688",
            "text": "You can use itertools.chain to flatten a list of iterables (for more levels use recursion)\n\n#Python #tips https://t.co/ApqrxOg1IS",
            "attachments": {
                "media_keys": [
                    "3_1501898806111223811"
                ]
            },
            "edit_history_tweet_ids": [
                "1501898832199794688"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501898806111223811",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNfRAbrXwAM9RTa.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1501536999211159556",
            "id": "1501536999211159556",
            "text": "Cool new #developer #tool in my arsenal: https://t.co/dljR8Rs82n \ud83c\udf89\ud83e\udd77\ud83d\udcaa\n\nType in any code and filter by language and even repo.\n\nFor example: yesterday I was curious how #Django uses #Python's staticmethod \ud83d\udc0d\n\nI could instantly find it. Much faster than git clone + grep \ud83d\ude2e\ud83c\udf89",
            "edit_history_tweet_ids": [
                "1501536999211159556"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1501533833723846659"
                ]
            },
            "id": "1501533896155881476",
            "edit_history_tweet_ids": [
                "1501533896155881476"
            ],
            "conversation_id": "1501533896155881476",
            "text": "Difficult not to fall in love with #pytest :) https://t.co/OR96MMgBi2"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501533833723846659",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNaFEPlXIAMisWD.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1501500053147561985"
            ],
            "id": "1501500053147561985",
            "text": "You can set defaults for #Python's collections.namedtuple since v3.7\n\ntyping.NamedTuple gives us a robust alternative for constructing namedtuples \ud83d\udca1\n\nIt gives the resulting class an extra __annotations__ attribute (a dict that maps field names to types \ud83e\udd2f)\n\nReally nice \u2764\ufe0f\ud83d\udc0d https://t.co/1xGOTvMHNz",
            "attachments": {
                "media_keys": [
                    "3_1501499508605304835"
                ]
            },
            "conversation_id": "1501500053147561985"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501499508605304835",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNZl2QjXwAMFYdf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Funny, doing this exercise myself I am finding that adding type hinting is of great help here!",
            "edit_history_tweet_ids": [
                "1501462670339362816"
            ],
            "conversation_id": "1501459098453295108",
            "id": "1501462670339362816"
        }
    },
    {
        "data": {
            "conversation_id": "1501459098453295108",
            "text": "I just cracked Bite 21. Query a nested data structure - and now I challenge you!  https://t.co/TnLWLhdjKY \n#Python #CodeChallenges",
            "id": "1501459098453295108",
            "edit_history_tweet_ids": [
                "1501459098453295108"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1501446042914594817",
            "attachments": {
                "media_keys": [
                    "3_1501446012996575232"
                ]
            },
            "edit_history_tweet_ids": [
                "1501446042914594817"
            ],
            "text": "You can use #Python's abstractmethod decorator to force derived classes to implement certain methods: https://t.co/iPIEFLK5jA",
            "id": "1501446042914594817"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501446012996575232",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNY1MZ4WYAA2BMy.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1501187086862458887",
            "text": "The docs explain the difference between shallow and deep copies well:\nhttps://t.co/7Nbevk7dFC https://t.co/eegd2nvFVl",
            "attachments": {
                "media_keys": [
                    "3_1501186982424293382"
                ]
            },
            "edit_history_tweet_ids": [
                "1501187089571979272"
            ],
            "id": "1501187089571979272"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501186982424293382",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNVJm1zXMAYC-im.png"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1501185893322928128"
                ]
            },
            "id": "1501187086862458887",
            "text": "One thing to be wary of in #Python is copying nested data structures.\n\nBy default copies (e.g. dict.copy()) are \"shallow\", meaning they use references to existing objects (not all new copies).\n\nThis can lead to updating multiple values at once!\n\ncopy.deepcopy() prevents this: https://t.co/fhFUsbNtnJ",
            "edit_history_tweet_ids": [
                "1501187086862458887"
            ],
            "conversation_id": "1501187086862458887"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501185893322928128",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNVInclXMAAdFeh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1501130129375965186"
                ]
            },
            "conversation_id": "1501130145859571712",
            "text": "Did you know you can use #Python's difflib.SequenceMatcher to get the similarity between strings?\n\nHere I use it on a transcript snippet I edited on @ironscribeio (which uses @AssemblyAI) finding an impressing accuracy of ~98%!\n\nAnd... difflib is part of the Standard Lib \ud83c\udf89\ud83e\udd2f\ud83d\udc0d\u2764\ufe0f https://t.co/BjgSLpdm0d",
            "id": "1501130145859571712",
            "edit_history_tweet_ids": [
                "1501130145859571712"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501130129375965186",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNUV5jsXMAIxbtx.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python collections.ChainMap groups multiple dicts together.\n\nIn this example (from the docs) ChainMap allows us to set up a precedence chain.\n\nUser specified command-line arguments take precedence over environment variables, which in turn take precedence over default values. https://t.co/vI3jHzoR1G",
            "conversation_id": "1501102383371374592",
            "id": "1501102383371374592",
            "edit_history_tweet_ids": [
                "1501102383371374592"
            ],
            "attachments": {
                "media_keys": [
                    "3_1501102256590143488"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1501102256590143488",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNT8jJeXwAA5q3r.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Read 3 chapters of \"How #Software Works: The Magic Behind Encryption, CGI, Search Engines, and Other Everyday Technologies\" - very interesting, I'm hooked!\n\n#books",
            "id": "1501101663695814657",
            "edit_history_tweet_ids": [
                "1501101663695814657"
            ],
            "conversation_id": "1501101663695814657"
        }
    },
    {
        "data": {
            "conversation_id": "1500863852661166087",
            "edit_history_tweet_ids": [
                "1500863852661166087"
            ],
            "id": "1500863852661166087",
            "text": "Super excited about the new PyBites podcast coming out later this week ... the art of debugging (and some design patterns stuff), stay tuned ..."
        }
    },
    {
        "data": {
            "text": "With f-strings (and .format) you can use &lt;, &gt; and ^ to left / right / center justify strings.\n\n#Python #tips https://t.co/TdtYaN3lZu",
            "edit_history_tweet_ids": [
                "1500754496431046658"
            ],
            "attachments": {
                "media_keys": [
                    "3_1500754408166068224"
                ]
            },
            "conversation_id": "1500754496431046658",
            "id": "1500754496431046658"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1500754408166068224",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNPALtHXEAAs4TO.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1500738510034198532",
            "id": "1500738510034198532",
            "text": "TIL: \"git grep -n\" does the same as \"ag\" (aka the Silver Searcher) without installing anything :)\n\n#unix #tools",
            "edit_history_tweet_ids": [
                "1500738510034198532"
            ]
        }
    },
    {
        "data": {
            "text": "New AWS Lambda function added that can validate / score FastAPI Bites \ud83d\udc0d\ud83c\udf89\n\nIt's now just a matter of time and coffee \ud83d\ude03\u2615\ufe0f",
            "conversation_id": "1500467111336067077",
            "id": "1500467111336067077",
            "edit_history_tweet_ids": [
                "1500467111336067077"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1500450068566102019",
            "text": "I had to debug something yesterday and I wrote up the steps I took, I hope it helps other #developers:\n\nhttps://t.co/tiJumOoRb1 \n\n#Python #tools #debugging #programming https://t.co/MDAfDJ9LZm",
            "id": "1500450068566102019",
            "edit_history_tweet_ids": [
                "1500450068566102019"
            ],
            "attachments": {
                "media_keys": [
                    "3_1500450014446948357"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1500450014446948357",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNKrVqJXEAULZjv.png"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1500441840964849671",
            "text": "PyBites #Git Tricks Training https://t.co/zNjGUndow8 via @YouTube",
            "id": "1500441840964849671",
            "edit_history_tweet_ids": [
                "1500441840964849671"
            ]
        }
    },
    {
        "data": {
            "text": "Using a #Python contextmanager (contextlib) and sqlite3 DB in a single tip (no external packages required!) https://t.co/kkq0NmADEc",
            "conversation_id": "1500433748428533760",
            "id": "1500433748428533760",
            "edit_history_tweet_ids": [
                "1500433748428533760"
            ],
            "attachments": {
                "media_keys": [
                    "3_1500433692623347712"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1500433692623347712",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNKcfmnXoAA_6a9.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1500084684063232001",
            "edit_history_tweet_ids": [
                "1500430999448178688"
            ],
            "text": "As always pytest is elegant and a joy to work with. Fixtures are beautiful as well! https://t.co/dxpfVoGlyE",
            "id": "1500430999448178688"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1500180969374072832"
                ]
            },
            "id": "1500181048017272833",
            "text": "Almost forgot but I had this in my .zshrc to give the \"cd\" command more history \ud83e\udd2f\n\nhttps://t.co/XhV4LFmuAT https://t.co/GspqXnQWMN",
            "edit_history_tweet_ids": [
                "1500181048017272833"
            ],
            "conversation_id": "1500181048017272833"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1500180969374072832",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNG2pLJXwAAnHAD.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1500124406085033992",
            "id": "1500124445444345859",
            "text": "cc\u00a0@HughTipping @juliansequeira",
            "edit_history_tweet_ids": [
                "1500124445444345859"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1500124406085033992",
            "text": "Blogging / content creation does not have to be complicated. \n\nThere is much to say to work with plain text files locally first and make it pretty later!\n\nGreat reminder this week, thanks @sivers: \nhttps://t.co/ZbS5bbX4Y5 \n\n#contentcreators #writing #bloggingtips #productivity",
            "edit_history_tweet_ids": [
                "1500124406085033992"
            ],
            "id": "1500124406085033992"
        }
    },
    {
        "data": {
            "conversation_id": "1500084684063232001",
            "id": "1500084684063232001",
            "text": "\"pytest.raises\" is an elegant way to test #Python exceptions.\n\nHere the \"Food\" pydantic model is instantiated with missing attributes triggering a ValidationError.\n\npytest.raises lets us assert this elegantly: https://t.co/qYEsbAOceY",
            "edit_history_tweet_ids": [
                "1500084684063232001"
            ],
            "attachments": {
                "media_keys": [
                    "3_1500084672142917632"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1500084672142917632",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNFfD8AWQAATOgh.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1500066421644144640",
            "text": "Mocking out requests.get (from Bite https://t.co/qdZciGfevk)\n\nThis uses unittest.mock (Standard Library), there's probably a more elegant way using a library though?\n\n#Python #testing https://t.co/XbQzEKrdvh",
            "id": "1500066421644144640",
            "edit_history_tweet_ids": [
                "1500066421644144640"
            ],
            "attachments": {
                "media_keys": [
                    "3_1500066239720431616"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1500066239720431616",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FNFOTB4XoAAG7kI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "I just cracked Bite 5. Parse a list of names - and now I challenge you!\n\nhttps://t.co/GkkEIc4sBs \n\nThis is a nice exercise to practice some useful built-in functions ...\n\n#Python #CodeChallenges",
            "edit_history_tweet_ids": [
                "1500064332574601220"
            ],
            "conversation_id": "1500064332574601220",
            "id": "1500064332574601220"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1499697844206374914"
                ]
            },
            "conversation_id": "1499697885650239490",
            "edit_history_tweet_ids": [
                "1499697885650239490"
            ],
            "id": "1499697885650239490",
            "text": "Use open with \"a\" (append mode) if you want to append to an existing file (not truncating its existing content).\n\n#Python #tips https://t.co/w33KObnrJH"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1499697844206374914",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FM__PlpXEAIuPch.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "You can use #Python's subprocess module to run shell commands.\n\nThis is useful to parse outputs from existing shell commands.\n\nBe wary of the security risk of using `shell=True` though, you're responsible for proper quoting to avoid shell injection vulnerabilities. https://t.co/8Ly7hgCaR4",
            "edit_history_tweet_ids": [
                "1499641850646474756"
            ],
            "attachments": {
                "media_keys": [
                    "3_1499641841918038018"
                ]
            },
            "conversation_id": "1499641850646474756",
            "id": "1499641850646474756"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1499641841918038018",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FM_MT03WUAIVYVi.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python's contextlib module has a useful context manager for redirecting standard output.\n\nIn this example (from the docs) we capture the output of help(pow) in a file.\n\nTo send output to standard error you can use:\n\nwith redirect_stdout(sys.stderr): ...\n\nhttps://t.co/XF3zT7vL3O https://t.co/dwmi2MDa7T",
            "conversation_id": "1499309584263098373",
            "attachments": {
                "media_keys": [
                    "3_1499309379392348169"
                ]
            },
            "edit_history_tweet_ids": [
                "1499309584263098373"
            ],
            "id": "1499309584263098373"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1499309379392348169",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FM6d79cXoAkrWfa.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Wanting to do some (beginner) #Django on YouTube, any burning questions?",
            "conversation_id": "1499282629614575618",
            "edit_history_tweet_ids": [
                "1499282629614575618"
            ],
            "id": "1499282629614575618"
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1498969558937485315"
                ]
            },
            "id": "1498969692987400193",
            "text": "Starting #Python 3.6 you can make larger numbers more readable using underscores: https://t.co/dxJmMEqSMb",
            "edit_history_tweet_ids": [
                "1498969692987400193"
            ],
            "conversation_id": "1498969692987400193"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1498969558937485315",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FM1o3zmXwAMGfOg.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1498945464615546881"
            ],
            "id": "1498945464615546881",
            "attachments": {
                "media_keys": [
                    "3_1498945440418512896"
                ]
            },
            "text": "You can use the decode method to turn a #Python byte-string into a regular string: https://t.co/MTiYkK3KUk",
            "conversation_id": "1498945464615546881"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1498945440418512896",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FM1S77HWQAAEEjm.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1498555574673362944",
            "id": "1498555574673362944",
            "text": "The tqdm #Python library (standing for Te Quiero DeMasiado in Spanish or \"I love you so much\") lets you add a smart progress meter by wrapping an iterable.\n\nExample from the README where there's also a nice gif showing more switches / features:\nhttps://t.co/nxyeK5N3wx https://t.co/zOx6coIEXC",
            "edit_history_tweet_ids": [
                "1498555574673362944"
            ],
            "attachments": {
                "media_keys": [
                    "3_1498555561830494215"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1498555561830494215",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMvwWAMXsAcGlk6.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1498309129798144002",
            "attachments": {
                "media_keys": [
                    "3_1498309108751077379"
                ]
            },
            "edit_history_tweet_ids": [
                "1498309129798144002"
            ],
            "text": "What day of the week is it #Python? https://t.co/1qdYQxusex",
            "id": "1498309129798144002"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1498309108751077379",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMsQMi7XEAM1w8U.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "You can use pytest.param() to apply marks or set test IDs to individual parametrized tests. \n\nThis prints extra detail in the test output and makes the tests easier to filter.\n\n#Python #testing #tips https://t.co/CbkE7C10l1",
            "edit_history_tweet_ids": [
                "1497284827875356672"
            ],
            "attachments": {
                "media_keys": [
                    "3_1497283550210670598"
                ]
            },
            "conversation_id": "1497284827875356672",
            "id": "1497284827875356672"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1497283550210670598",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMdrdLpXwAYCxVY.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1497113137828478979"
                ]
            },
            "conversation_id": "1497113330133123073",
            "text": "If you want a #Python \"timedelta\" of months and years you can use python-dateutil's relativedelta: https://t.co/Yu9yP5Gibe",
            "id": "1497113330133123073",
            "edit_history_tweet_ids": [
                "1497113330133123073"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1497113137828478979",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMbQd4DWQAM73Bt.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#git #tip: I want to discard the last 4 local commits but one:\n\n1. make a new branch (backup)\n$ git branch backup_branch \n\n2. delete the commits\n$ git reset --hard HEAD^^^^\n\n3. restore the one I still want\n$ git cherry-pick commit_hash\n\nIf there's a better way please let me know.",
            "conversation_id": "1497112252712902669",
            "id": "1497112252712902669",
            "edit_history_tweet_ids": [
                "1497112252712902669"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1496812462397665287"
                ]
            },
            "conversation_id": "1496812552831082500",
            "text": "Writing async tests in pytest is easier than I thought, thanks to pytest-asyncio \ud83d\udc0d\u2764\ufe0f https://t.co/DgWmlH1zAj",
            "edit_history_tweet_ids": [
                "1496812552831082500"
            ],
            "id": "1496812552831082500"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1496812462397665287",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMW_AQyXMAcOQeY.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Blown away that my whole pybites-pysource package is obsolete by #Python's Standard Library \ud83d\ude05 \n\nThis works just fine:\n$ python -m inspect django.contrib.auth.decorators\n(shows source code)\n\n\u2764\ufe0f\ud83d\udc0d",
            "edit_history_tweet_ids": [
                "1496751012622839810"
            ],
            "conversation_id": "1496751012622839810",
            "id": "1496751012622839810"
        }
    },
    {
        "data": {
            "conversation_id": "1496743070657912917",
            "id": "1496743070657912917",
            "text": "__repr__ vs. __str__ in #Python?\n\n@nedbat said it best:\n \n&gt; My rule of thumb: __repr__ is for developers, __str__ is for customers.\n\nThe datetime module offers a nice example of this: https://t.co/yQ64tUe3LW",
            "attachments": {
                "media_keys": [
                    "3_1496742945130790914"
                ]
            },
            "edit_history_tweet_ids": [
                "1496743070657912917"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1496742945130790914",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMV_x0yXwAItGMS.png"
                }
            ]
        }
    },
    {
        "data": {
            "text": "So happy to see people growing their #Python and #developer skills with us \ud83c\udf89\ud83d\udc0d\ud83e\udd77 https://t.co/lklALJqXyW",
            "conversation_id": "1496489605612322819",
            "edit_history_tweet_ids": [
                "1496489605612322819"
            ],
            "id": "1496489605612322819"
        }
    },
    {
        "data": {
            "text": "#Python str.split() covers a lot of bases, but if you want to go more powerful, you can use re.split() to split by a regex pattern: https://t.co/w6u4S7AVo2",
            "conversation_id": "1496201877427396608",
            "attachments": {
                "media_keys": [
                    "3_1496099132645294084"
                ]
            },
            "edit_history_tweet_ids": [
                "1496201877427396608"
            ],
            "id": "1496201877427396608"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1496099132645294084",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMM2PAYXwAQuU57.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1496196897844957186",
            "text": "TIL #vim search for word boundaries: https://t.co/MGwvAhZ6Yx\n\nExample: \n\n1. pipe git log into Vim:\n\n$ git log | vi - \n\n2. Use Vim's search (/) with word boundaries \\&lt; and \\&gt; to look for the exact word \"bug\":\n\n/\\&lt;bug\\&gt;",
            "edit_history_tweet_ids": [
                "1496196897844957186"
            ],
            "conversation_id": "1496196897844957186"
        }
    },
    {
        "data": {
            "text": "I love #Python list comprehensions. Set and dict comprehensions are beautiful too. \n\nHere is a dictcomp to swap dictionary keys and values + I use pprint to pretty print: https://t.co/lVNHYqSOkm",
            "conversation_id": "1496047424539963400",
            "id": "1496047424539963400",
            "edit_history_tweet_ids": [
                "1496047424539963400"
            ],
            "attachments": {
                "media_keys": [
                    "3_1496047350653009924"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1496047350653009924",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMMHI5bWQAQM8_7.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1495813217444151298",
            "id": "1495813217444151298",
            "text": "#Python #tip: urlparse can be handy to break a URL into its parts: https://t.co/KjDrQMyVMq",
            "edit_history_tweet_ids": [
                "1495813217444151298"
            ],
            "attachments": {
                "media_keys": [
                    "3_1495813150062653445"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1495813150062653445",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMIyIoPXsAUd10z.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1495811165125062662",
            "text": "I think adding a @FastAPI learning path on our PyBites Platform would be wicked, no?",
            "edit_history_tweet_ids": [
                "1495811165125062662"
            ],
            "id": "1495811165125062662"
        }
    },
    {
        "data": {
            "conversation_id": "1495733324039573509",
            "text": "Finished reading @AdamChainz's \"Boost Your #Django DX\" book, lot of helpful advice and tips, recommended!",
            "edit_history_tweet_ids": [
                "1495733324039573509"
            ],
            "id": "1495733324039573509"
        }
    },
    {
        "data": {
            "text": "Today a more code heavy PyBites #Podcast episode, enjoy and I hope it helps you write better code, let me know your favorite tip (or additional ones you may have) below ...\n\n#059 - 10 #Python #cleancode tips drawn from code reviews:\nhttps://t.co/S2Yx7XPfpL",
            "conversation_id": "1495715563347267584",
            "id": "1495715563347267584",
            "edit_history_tweet_ids": [
                "1495715563347267584"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1495684491704164352",
            "edit_history_tweet_ids": [
                "1495684491704164352"
            ],
            "id": "1495684491704164352",
            "text": "New to #Python? Check out our Newbie Bite screencast series that @RHelmstedter is producing for us. \n\nThey explain the fundamental concepts very well ...\n\n#pythonprogramming #pythonlearning #pythoncode #100daysofcode https://t.co/Jzrmc16M9D"
        }
    },
    {
        "data": {
            "text": "Follow up #Python defaultdict tip: how to nest them?\n\nIts default_factory can be a function which will be used for building new elements. \n\nThat means that we can introduce nesting by using a lambda (anonymous function). Don't like lambda? Use partial: https://t.co/ivdGH5dDy0 https://t.co/rBLofzIg5C",
            "edit_history_tweet_ids": [
                "1495663836271202309"
            ],
            "attachments": {
                "media_keys": [
                    "3_1495663782047240194"
                ]
            },
            "conversation_id": "1495663836271202309",
            "id": "1495663836271202309"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1495663782047240194",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMGqSRBX0AIBzGW.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1495311375752704002"
                ]
            },
            "conversation_id": "1495311613796270087",
            "text": "Good news: if you're always checking if a key is present when building up a dict you can stop doing that!\n\nEnter collections.defaultdict \ud83d\udc0d\ud83d\udca1\n\nIn this example an entry is automatically created in the countries dict (using default_factory) returning an empty list.\n\n#Python #tips https://t.co/NPOwyo0ALr",
            "edit_history_tweet_ids": [
                "1495311613796270087"
            ],
            "id": "1495311613796270087"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1495311375752704002",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FMBpxhRXMAIgCdC.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Gotta \u2764\ufe0f #Python \ud83d\udc0d + its awesome packages: here is some web scraping in a just a few lines of code, thanks to requests + BeautifulSoup, offering powerful abstractions! https://t.co/pz345UNfkN",
            "conversation_id": "1495017984233988101",
            "attachments": {
                "media_keys": [
                    "3_1495017917406191617"
                ]
            },
            "edit_history_tweet_ids": [
                "1495017984233988101"
            ],
            "id": "1495017984233988101"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1495017917406191617",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FL9e3_vXIAEUzZF.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1495013418637606920",
            "edit_history_tweet_ids": [
                "1495013418637606920"
            ],
            "conversation_id": "1494591989739892772",
            "text": "Other alternatives: use Jupyter notebooks or pdb - this will probably also reduce the amount of calls you need to make."
        }
    },
    {
        "data": {
            "id": "1494936944689692674",
            "conversation_id": "1494936942315716609",
            "text": "As per docs: https://t.co/VEGFwC1kSe\n\n&gt; The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object.",
            "edit_history_tweet_ids": [
                "1494936944689692674"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1494936942315716609"
            ],
            "id": "1494936942315716609",
            "text": "#Python curiosity: did you know that integers in the range -5...256 are cached?\n\nWe can show that using \"is\" which checks for object equality: https://t.co/4V89eh0YEb",
            "attachments": {
                "media_keys": [
                    "3_1494936399413493760"
                ]
            },
            "conversation_id": "1494936942315716609"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1494936399413493760",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FL8UvBjXwAARXxf.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1494724375022645248"
                ]
            },
            "conversation_id": "1494724469478375428",
            "edit_history_tweet_ids": [
                "1494724469478375428"
            ],
            "id": "1494724469478375428",
            "text": "In #Python it's considered bad practice to use \"from module import *\" to import everything into the current namespace, don't do this \ud83d\ude4f\n\nHowever as a library developer there is a way to guard against this \ud83d\udca1 \n\nHow? Using the __all__ dunder: https://t.co/B95mqwj0XU"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1494724375022645248",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FL5T5lJXsAAGRiI.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Thanks for sharing Blaise and awesome work there Jeff! https://t.co/ykN3zKcwze",
            "conversation_id": "1494684948783144966",
            "id": "1494684948783144966",
            "edit_history_tweet_ids": [
                "1494684948783144966"
            ]
        }
    },
    {
        "data": {
            "text": "When I am scraping a website or toying around with an API I might make excessive calls to get my code right. \n\nHere's where requests_cache is a great dev tool: it caches repeated request calls! \n\npip install ... beautiful abstraction :)\n\n#Python #tips \n \nhttps://t.co/S21hP0SAex https://t.co/tOxpOcDmyx",
            "edit_history_tweet_ids": [
                "1494591989739892772"
            ],
            "attachments": {
                "media_keys": [
                    "3_1494591585153134635"
                ]
            },
            "conversation_id": "1494591989739892772",
            "id": "1494591989739892772"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1494591585153134635",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FL3bIMVXMCs6une.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1494383134951026697"
            ],
            "id": "1494383134951026697",
            "text": "[Newbie Bites] #10. Returning items by list index https://t.co/7A1XCBlgfR - thanks @RHelmstedter for keeping up these cool screencasts and your tip about #Python Tutor: https://t.co/vdEPdHOxUF",
            "attachments": {
                "media_keys": [
                    "7_1494382623413747712"
                ]
            },
            "conversation_id": "1494383134951026697"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1494382623413747712",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1494375106822426625",
            "id": "1494375106822426625",
            "text": "#Python's print() built-in function is more powerful than you might think :) https://t.co/sa6ACM9SB2",
            "edit_history_tweet_ids": [
                "1494375106822426625"
            ],
            "attachments": {
                "media_keys": [
                    "3_1494375055094173699"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1494375055094173699",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FL0WMfAX0AML3dd.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1494233737114144774",
            "id": "1494233737114144774",
            "text": "Curious: do you use assert statements in your #Python (non test) code?",
            "edit_history_tweet_ids": [
                "1494233737114144774"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1493882471678717952",
            "text": "thanks @brettsky",
            "edit_history_tweet_ids": [
                "1493894148243529730"
            ],
            "id": "1493894148243529730"
        }
    },
    {
        "data": {
            "text": "I reference this article quite a bit lately:\n\nIdiomatic Python: EAFP versus LBYL\nhttps://t.co/OAUldgMFgi\n\nI like and embrace the \"It\u2019s easier to ask for forgiveness than permission\" approach in #Python code.",
            "conversation_id": "1493882471678717952",
            "edit_history_tweet_ids": [
                "1493882471678717952"
            ],
            "id": "1493882471678717952"
        }
    },
    {
        "data": {
            "id": "1493850304957272068",
            "text": "When I can avoid typing out boring constant ranges I will. \n\nSo the #Python string module is really useful at times: https://t.co/QcsBT1CPiR",
            "attachments": {
                "media_keys": [
                    "3_1493850246241259521"
                ]
            },
            "edit_history_tweet_ids": [
                "1493850304957272068"
            ],
            "conversation_id": "1493850304957272068"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1493850246241259521",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FLs44lrXEAEY753.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1493526761195417602",
            "id": "1493526761195417602",
            "text": "Remember #Python sets and dicts use a hash table internally which makes them very fast - algorithmic complexity of O(1) - for lookups (e.g. using the \"in\" operator).",
            "edit_history_tweet_ids": [
                "1493526761195417602"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1493507867478937600",
            "text": "Do you want a #pytest fixture to run automatically (so without calling it) for multiple tests? \n\n@pytest.fixture has an autouse=True switch for this:\n\nhttps://t.co/V8plyW59QJ",
            "id": "1493507867478937600",
            "edit_history_tweet_ids": [
                "1493507867478937600"
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1493187873021042688"
                ]
            },
            "id": "1493187910711062528",
            "text": "So much good stuff in #Python's itertools module. \nNeed a sequence? You can use count(): https://t.co/OHijhFXKOn",
            "edit_history_tweet_ids": [
                "1493187910711062528"
            ],
            "conversation_id": "1493187910711062528"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1493187873021042688",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FLjedZJXIAAXNaS.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "You can use the ipaddress or socket module to validate IP addresses in #Python: https://t.co/bCMzRq9bTi",
            "edit_history_tweet_ids": [
                "1492096874328768514"
            ],
            "attachments": {
                "media_keys": [
                    "3_1492096834944258050"
                ]
            },
            "conversation_id": "1492096874328768514",
            "id": "1492096874328768514"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1492096834944258050",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FLT-KnlWUAIOMyu.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1491475566318477313",
            "text": "Super cool package: https://t.co/XxbQ3isCGl\n\n#python #nba #data",
            "edit_history_tweet_ids": [
                "1491475566318477313"
            ],
            "conversation_id": "1491475566318477313"
        }
    },
    {
        "data": {
            "conversation_id": "1491434673024937984",
            "id": "1491434673024937984",
            "text": "What is your favorite #programming #book? Here are some of mine: https://t.co/NMs3K7VfHQ",
            "edit_history_tweet_ids": [
                "1491434673024937984"
            ]
        }
    },
    {
        "data": {
            "text": "Handy shortcut when you want to inspect JSON output:\n\n$ cat output_file.json | jq . | vi -",
            "edit_history_tweet_ids": [
                "1491356945965813764"
            ],
            "conversation_id": "1491356945965813764",
            "id": "1491356945965813764"
        }
    },
    {
        "data": {
            "conversation_id": "1491336052287881216",
            "id": "1491336052287881216",
            "text": "Do you want to see what SQL #Django ORM runs? \n\n- pip install django-extensions\n- add it to INSTALLED_APPS\n- run: python https://t.co/Hz6HXKnbmF shell_plus --print-sql\n\nReally cool! \n\nOf course you can also use Django Debug Toolbar but I used the shell for teaching yesterday.",
            "edit_history_tweet_ids": [
                "1491336052287881216"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1490969574581227521"
            ],
            "id": "1490969574581227521",
            "text": "Quick test debugging tip: \"pytest --pdb\" will invoke the #Python debugger on every test failure (or KeyboardInterrupt).\nhttps://t.co/TvEpeEZ2JJ",
            "conversation_id": "1490969574581227521"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1490953133320994816"
            ],
            "id": "1490953133320994816",
            "text": "Do you agree?\n\n&gt; Local variables used in conventional ways can have very short names \u2026 Programmers are often encouraged to use long variable names regardless of context. That is a mistake: clarity is often achieve through brevity.\n\nThe Practice of #Programming (Kernighan / Pike)",
            "conversation_id": "1490953133320994816"
        }
    },
    {
        "data": {
            "conversation_id": "1490780431075221513",
            "id": "1490780431075221513",
            "text": "Similarly to the if __name__ == \"__main__\": entry point for a script, you can create an entry point to your package by adding a __main__.py module to it.\n\nThis makes the package callable using: python -m my_package\n\n#python #tips https://t.co/WMuMtJEirE",
            "attachments": {
                "media_keys": [
                    "3_1490780177265307651"
                ]
            },
            "edit_history_tweet_ids": [
                "1490780431075221513"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1490780177265307651",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FLBQrDgXsAMRMo-.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1490729649780973571"
            ],
            "id": "1490729649780973571",
            "attachments": {
                "media_keys": [
                    "7_1490729493861998602"
                ]
            },
            "text": "Nice coverage today of concatenating different types of objects: https://t.co/iCw4S4tLzc",
            "conversation_id": "1490704344592916480"
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1490729493861998602",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "id": "1490729099341578242",
            "attachments": {
                "media_keys": [
                    "7_1490729051165708297"
                ]
            },
            "conversation_id": "1490704344592916480",
            "text": "#Python dir() is so useful! https://t.co/kNgNatcNR2",
            "edit_history_tweet_ids": [
                "1490729099341578242"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1490729051165708297",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1490704344592916480",
            "id": "1490704344592916480",
            "text": "More Bite screencasts! https://t.co/O4TlHKZnIH",
            "edit_history_tweet_ids": [
                "1490704344592916480"
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1490649470840807426"
            ],
            "id": "1490649470840807426",
            "attachments": {
                "media_keys": [
                    "3_1490649222387060740"
                ]
            },
            "text": "Always nice to start the week with some #Mindset, today's PyBites tip:\n \nWatch the language you use! \n\nWhat you tell yourself matters. It's up to you to believe in yourself more than anyone else. \n\nWhen we believe in ourselves, anything is possible.\n\nhttps://t.co/3IHSqPwqIB https://t.co/i703y6JpB3",
            "conversation_id": "1490649470840807426"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1490649222387060740",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FK_ZkekX0AQjYbT.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "Btw how shall we call \"*\" here? \n\nThe \"splat\" operator? \n\nOr a more explicit (better than implicit!) \"unpacking argument list\"? \n\nhttps://t.co/KvBS7SynIs",
            "edit_history_tweet_ids": [
                "1490607299752247296"
            ],
            "conversation_id": "1490607297554485250",
            "id": "1490607299752247296"
        }
    },
    {
        "data": {
            "id": "1490607297554485250",
            "text": "I love #Python's tuple unpacking!\n\n(btw \"_\" is a convention to indicate a throw away variable) https://t.co/CizIRFpB5G",
            "attachments": {
                "media_keys": [
                    "3_1490606036792844289"
                ]
            },
            "edit_history_tweet_ids": [
                "1490607297554485250"
            ],
            "conversation_id": "1490607297554485250"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1490606036792844289",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FK-ySvsXIAEZHtM.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1489545518099357696",
            "text": "Some cool exercises to make decorators stick:\nhttps://t.co/GKDaqWZyuD",
            "edit_history_tweet_ids": [
                "1489545529197568001"
            ],
            "id": "1489545529197568001"
        }
    },
    {
        "data": {
            "conversation_id": "1489545518099357696",
            "text": "A more complex use case: a decorator with optional args:\nhttps://t.co/eZ99CQ9bEL",
            "edit_history_tweet_ids": [
                "1489545527213625344"
            ],
            "id": "1489545527213625344"
        }
    },
    {
        "data": {
            "conversation_id": "1489545518099357696",
            "edit_history_tweet_ids": [
                "1489545525208756225"
            ],
            "id": "1489545525208756225",
            "text": "Some practical use cases of decorators:\nhttps://t.co/JFyhIVnP83"
        }
    },
    {
        "data": {
            "text": "The importance of using functools.wraps:\nhttps://t.co/aQROtCGFPp",
            "conversation_id": "1489545518099357696",
            "edit_history_tweet_ids": [
                "1489545522868367362"
            ],
            "id": "1489545522868367362"
        }
    },
    {
        "data": {
            "conversation_id": "1489545518099357696",
            "text": "Another definition:\n\n&gt; Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.\n\nhttps://t.co/TEPxET9VdT",
            "id": "1489545520565690370",
            "edit_history_tweet_ids": [
                "1489545520565690370"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1489545518099357696",
            "id": "1489545518099357696",
            "text": "\ud83d\udc0d#Python decorator example \ud83d\udc47\n\n\ud83d\udca1 Decorators allow you to add new behavior to an existing object (function, class) without changing it.\n\n\ud83d\ude80 This usually leads to more DRY (don't repeat yourself) code.\n \n\u2753What was your last decorator you wrote or used? https://t.co/CvGgYSSJk4",
            "edit_history_tweet_ids": [
                "1489545518099357696"
            ],
            "attachments": {
                "media_keys": [
                    "3_1489541506172137474"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1489541506172137474",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FKvqG6GXMAIyNqE.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1489521604308705283",
            "text": "\ud83d\udc4b and \ud83d\ude4f for the follow recently! \n\nI am a \ud83d\udc0d #Python nut and love mentoring people to crush it as software #developers \ud83e\udd77\n\nI also \u2764\ufe0f fitness, books and business \ud83d\ude80\n\nWhat about you, what do you do for a living / what drives you? \ud83d\udca1",
            "edit_history_tweet_ids": [
                "1489521604308705283"
            ],
            "id": "1489521604308705283"
        }
    },
    {
        "data": {
            "text": "\u2764\ufe0f \ud83d\udc0d dictionaries!\n\n#Python #tips https://t.co/JDOWlG43xx",
            "conversation_id": "1489171961796300806",
            "attachments": {
                "media_keys": [
                    "3_1489171853528731651"
                ]
            },
            "edit_history_tweet_ids": [
                "1489171961796300806"
            ],
            "id": "1489171961796300806"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1489171853528731651",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FKqZ6SsXEAMNVLb.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1489167991740813312",
            "text": "https://t.co/I8jkSUoZFR or pyproject.toml? Pretty obvious question for me, but I wonder if people still use the former for any reason? #Python",
            "edit_history_tweet_ids": [
                "1489167991740813312"
            ],
            "id": "1489167991740813312"
        }
    },
    {
        "data": {
            "conversation_id": "1489167743085649928",
            "edit_history_tweet_ids": [
                "1489167743085649928"
            ],
            "text": "I love Cal Newport's work so I was delighted to see the latest @tferriss podcast pop up in my podcast feed this morning:\n\nhttps://t.co/FeEsQio5NB \n\n#productivity #studyhacks #books",
            "id": "1489167743085649928"
        }
    },
    {
        "data": {
            "text": "Oops I forgot to link a training I did a while ago:\n\nHow to build a simple #Slack bot using the Bolt framework for #Python - https://t.co/Cfd2pGku4J",
            "edit_history_tweet_ids": [
                "1488920250871689222"
            ],
            "conversation_id": "1488806429251313666",
            "id": "1488920250871689222"
        }
    },
    {
        "data": {
            "text": "The Blue \ud83e\udd77 knows how to solve problems fast and elegantly! https://t.co/s6SixIEzsw",
            "edit_history_tweet_ids": [
                "1488813727411486722"
            ],
            "attachments": {
                "media_keys": [
                    "3_1488813504790503428"
                ]
            },
            "conversation_id": "1488806630972084239",
            "id": "1488813727411486722"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1488813504790503428",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FKlT_pnXoAQO8pm.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1488810556857454592",
            "id": "1488810564554039298",
            "text": "I do realize this example is a bit contrived because black makes this one line which is better! \n\nIt also more clearly shows the issue after running it:\n\nnames = (\"Ana\", \"Joyce\" \"Tim\", \"Beau\")\n\nRunning flake8 / black overall is super valuable.",
            "edit_history_tweet_ids": [
                "1488810564554039298"
            ]
        }
    },
    {
        "data": {
            "text": "Flake8 does not give a warning because it's syntactically correct. \n\nIf these were integers you'd get a SyntaxError with a nice error message:\n\nSyntaxError: invalid syntax. Perhaps you forgot a comma?",
            "id": "1488810562498793473",
            "edit_history_tweet_ids": [
                "1488810562498793473"
            ],
            "conversation_id": "1488810556857454592"
        }
    },
    {
        "data": {
            "text": "Ah right, \"Joyce\" and \"Tim\" are silently concatenated.\n\nSo just be mindful of that, check for missing trailing commas when using multiline data structures.",
            "conversation_id": "1488810556857454592",
            "edit_history_tweet_ids": [
                "1488810559575367680"
            ],
            "id": "1488810559575367680"
        }
    },
    {
        "data": {
            "id": "1488810556857454592",
            "attachments": {
                "media_keys": [
                    "3_1488809313711894530"
                ]
            },
            "conversation_id": "1488810556857454592",
            "text": "What's wrong with this picture? \n\n(Answer in your head, then look at the mini thread) https://t.co/Y5WMgc5n9g",
            "edit_history_tweet_ids": [
                "1488810556857454592"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1488809313711894530",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FKlQLsoXMAIK4GU.png"
                }
            ]
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1488806630972084239"
            ],
            "id": "1488806630972084239",
            "text": "Another @PyBites Ninja, proud about your awesome achievement @datwatikmaak https://t.co/L0FrOqrmdD",
            "conversation_id": "1488806630972084239"
        }
    },
    {
        "data": {
            "conversation_id": "1488806429251313666",
            "text": "If you were to build a Slack bot, what would it do?",
            "edit_history_tweet_ids": [
                "1488806429251313666"
            ],
            "id": "1488806429251313666"
        }
    },
    {
        "data": {
            "text": "#Python #tips",
            "conversation_id": "1488453202924253187",
            "edit_history_tweet_ids": [
                "1488453321186811906"
            ],
            "id": "1488453321186811906"
        }
    },
    {
        "data": {
            "conversation_id": "1488453202924253187",
            "id": "1488453202924253187",
            "text": "You can suppress exceptions with the contextlib.suppress context manager:\n\nhttps://t.co/SXeGGAjOmu",
            "edit_history_tweet_ids": [
                "1488453202924253187"
            ]
        }
    },
    {
        "data": {
            "text": "#Python help() + dir(), I use them often!\nhttps://t.co/HJKjq0lHxv",
            "conversation_id": "1488410394729275396",
            "id": "1488410394729275396",
            "edit_history_tweet_ids": [
                "1488410394729275396"
            ]
        }
    },
    {
        "data": {
            "conversation_id": "1488129725004398592",
            "text": "A new week, new chances! \ud83d\udcaa\n\nWhat are you using #Python for this week? \ud83d\udc0d\ud83e\udd77",
            "id": "1488129725004398592",
            "edit_history_tweet_ids": [
                "1488129725004398592"
            ]
        }
    },
    {
        "data": {
            "text": "A Thousand Brains and The Code Breaker are on my to-read #books list too https://t.co/zpRElQJbb7",
            "id": "1488069318772461569",
            "edit_history_tweet_ids": [
                "1488069318772461569"
            ],
            "conversation_id": "1488069318772461569"
        }
    },
    {
        "data": {
            "edit_history_tweet_ids": [
                "1487128944985976836"
            ],
            "id": "1487128944985976836",
            "text": "Clipping made with @ironscribeio",
            "conversation_id": "1487128897158369280"
        }
    },
    {
        "data": {
            "text": "Love how you're teaching us the very basics of #Python @RHelmstedter!\n\nFull video:\nhttps://t.co/yFkfxO30S9 https://t.co/bg1z4Qs3E1",
            "conversation_id": "1487128897158369280",
            "id": "1487128897158369280",
            "edit_history_tweet_ids": [
                "1487128897158369280"
            ],
            "attachments": {
                "media_keys": [
                    "7_1487128778543407108"
                ]
            }
        },
        "includes": {
            "media": [
                {
                    "media_key": "7_1487128778543407108",
                    "type": "video"
                }
            ]
        }
    },
    {
        "data": {
            "attachments": {
                "media_keys": [
                    "3_1487056897526177796"
                ]
            },
            "conversation_id": "1487057116196134921",
            "text": "A case of \"Beautiful is better than ugly\"?\n\n#Python #zen https://t.co/uPJ9LUvqoL",
            "id": "1487057116196134921",
            "edit_history_tweet_ids": [
                "1487057116196134921"
            ]
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1487056897526177796",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FKMWXpnXoAQ5jxT.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "#Python has a basic data type called set with a very useful feature: it does not hold duplicate elements. https://t.co/8Awq6TlUa4",
            "conversation_id": "1486704564481015812",
            "attachments": {
                "media_keys": [
                    "3_1486704315465142280"
                ]
            },
            "edit_history_tweet_ids": [
                "1486704564481015812"
            ],
            "id": "1486704564481015812"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1486704315465142280",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FKHVsrFXEAg5dTw.jpg"
                }
            ]
        }
    },
    {
        "data": {
            "text": "\"--prompt .\" would use your current directory as name",
            "conversation_id": "1486640038779703296",
            "edit_history_tweet_ids": [
                "1486640283647459328"
            ],
            "id": "1486640283647459328"
        }
    },
    {
        "data": {
            "text": "Tired of #Python venv's standard (venv) prompt? You can use --prompt to name it something different: https://t.co/2zClARYee2",
            "conversation_id": "1486640038779703296",
            "attachments": {
                "media_keys": [
                    "3_1486637427901018113"
                ]
            },
            "edit_history_tweet_ids": [
                "1486640038779703296"
            ],
            "id": "1486640038779703296"
        },
        "includes": {
            "media": [
                {
                    "media_key": "3_1486637427901018113",
                    "type": "photo",
                    "url": "https://pbs.twimg.com/media/FKGY3TfXMAEFMLl.jpg"
                }
            ]
        }
    }
]