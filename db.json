{
    "metadata": {
        "entries": 6331
    },
    "tweets": [
        {
            "id": 1082,
            "username": "alexxubyte",
            "tweet_id": "1551592075040198656",
            "tweet_text": "3. ASCII editor: ASCII charts and diagrams editor allows to create text diagrams for emails, README files, text specifications, etc. https://t.co/NALJ2g5olh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYhcw1PUsAEidDV.jpg\", \"https://pbs.twimg.com/media/FYhcxD9VEAUQukf.jpg\"]",
            "tweet_conversation_id": "1551592042328821761",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-25T15:35:52.000Z"
        },
        {
            "id": 1081,
            "username": "alexxubyte",
            "tweet_id": "1551592083210661889",
            "tweet_text": "4. PlantUML: It is an open-source tool allowing users to create diagrams from plain text language. https://t.co/phbjguU0Yg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYhcxf7VEAMLQly.jpg\"]",
            "tweet_conversation_id": "1551592042328821761",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-25T15:35:54.000Z"
        },
        {
            "id": 1080,
            "username": "alexxubyte",
            "tweet_id": "1551592093730349056",
            "tweet_text": "5. Markmap: Visualize your Markdown as mindmaps. It supports the VS code plugin. https://t.co/2PRvoXnbJX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYhcx-QVUAYg03v.jpg\"]",
            "tweet_conversation_id": "1551592042328821761",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-25T15:35:56.000Z"
        },
        {
            "id": 1079,
            "username": "alexxubyte",
            "tweet_id": "1551592110301728769",
            "tweet_text": "6. Go diagrams: Create beautiful system diagrams with Go.\n\nOver to you - Did I miss anything? https://t.co/JoO5DGyHzk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYhcysIUEAApmOU.jpg\"]",
            "tweet_conversation_id": "1551592042328821761",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-25T15:36:00.000Z"
        },
        {
            "id": 1078,
            "username": "alexxubyte",
            "tweet_id": "1551592121475276805",
            "tweet_text": "Thanks for reading! Follow me at @alexxubyte to get more threads like this.\n\nTwitter doesn\u2019t allow me to add more examples and links. To see the complete article, subscribe to my blog/newsletter here: https://t.co/PczMAd8Jdb The post is on the top. https://t.co/F6bXyrBNDz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYhczo3UUAEZlvh.jpg\"]",
            "tweet_conversation_id": "1551592042328821761",
            "tweet_type": "Others",
            "created_at": "2022-07-25T15:36:03.000Z"
        },
        {
            "id": 1077,
            "username": "alexxubyte",
            "tweet_id": "1551955229356146690",
            "tweet_text": "I recently discovered a cheat sheet that covers many design patterns, intended to jog your memory about how different patterns work. \n\nPage 1 https://t.co/QtfDDWdDXM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYmnDc9UIAEtZ5c.jpg\"]",
            "tweet_conversation_id": "1551955229356146690",
            "tweet_type": "Others",
            "created_at": "2022-07-26T15:38:55.000Z"
        },
        {
            "id": 1076,
            "username": "alexxubyte",
            "tweet_id": "1551955236838731776",
            "tweet_text": "Page 2\n\nSource of the images: https://t.co/8ToqqeTrF6 https://t.co/o8cz6apMX5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYmnD24UUAEQNif.jpg\"]",
            "tweet_conversation_id": "1551955229356146690",
            "tweet_type": "Others",
            "created_at": "2022-07-26T15:38:57.000Z"
        },
        {
            "id": 1075,
            "username": "alexxubyte",
            "tweet_id": "1551955240013799425",
            "tweet_text": "Thanks for reading! Follow me at @alexxubyte to get more threads like this.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551955229356146690",
            "tweet_type": "Others",
            "created_at": "2022-07-26T15:38:57.000Z"
        },
        {
            "id": 1074,
            "username": "alexxubyte",
            "tweet_id": "1552318870416830464",
            "tweet_text": "Scan to pay in 2 minutes (PayPal, Cash App, Venmo, Paytm)\n\nYou can watch the YouTube here. Remember to subscribe!\nhttps://t.co/V1w3BpCE0P\n\nIf you prefer text, keep reading:\n\nTo understand the process involved, we need to divide the \u201cscan to pay\u201d process into two sub-processes: https://t.co/2zUV5Ng6zH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYrxx5VUYAAaj_d.jpg\"]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Others",
            "created_at": "2022-07-27T15:43:54.000Z"
        },
        {
            "id": 1073,
            "username": "alexxubyte",
            "tweet_id": "1552318886002839552",
            "tweet_text": "1. Merchant generates a QR code and displays it on the screen\n\n2. Consumer scans the QR code and pays\n\nHere are the steps for generating the QR code: https://t.co/Ktyhxxvfyd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYrxys3UIAAIeJb.jpg\"]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-27T15:43:57.000Z"
        },
        {
            "id": 1072,
            "username": "alexxubyte",
            "tweet_id": "1552318899785347075",
            "tweet_text": "1. When you want to pay for your shopping, the cashier tallies up all the goods and calculates the total amount due, for example $123.45. The checkout has an order ID of SN129803. The cashier clicks the \u201ccheckout\u201d button. https://t.co/8X7V9cY6VJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYrxzkHVUAAtrGu.jpg\"]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-27T15:44:01.000Z"
        },
        {
            "id": 1071,
            "username": "alexxubyte",
            "tweet_id": "1552318913576181761",
            "tweet_text": "2. The cashier\u2019s computer sends the order ID and the amount to PSP.\n\n3. The PSP saves this information to the database and generates a QR code URL.\n\n4. PSP\u2019s Payment Gateway service reads the QR code URL.\n\n5. The payment gateway returns the QR code URL to the merchant\u2019s computer. https://t.co/mQEomvVp4g",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYrx0W0VUAI2ffI.jpg\"]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-27T15:44:04.000Z"
        },
        {
            "id": 1070,
            "username": "alexxubyte",
            "tweet_id": "1552318927748734976",
            "tweet_text": "6. The merchant\u2019s computer sends the QR code URL (or image) to the checkout counter.\n\n7. The checkout counter displays the QR code.\n\nThese 7 steps complete in less than a second. Now it\u2019s the consumer\u2019s turn to pay from their digital wallet by scanning the QR code: https://t.co/Cu0XbIsKQw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYrx1K8VUAA5rfB.jpg\"]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-27T15:44:07.000Z"
        },
        {
            "id": 1069,
            "username": "alexxubyte",
            "tweet_id": "1552318943179640832",
            "tweet_text": "1. The consumer opens their digital wallet app to scan the QR code.\n\n2. After confirming the amount is correct, the client clicks the \u201cpay\u201d button.\n\n3. The digital wallet App notifies the PSP that the consumer has paid the given QR code. https://t.co/wrc7YloZWP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYrx2CgVUAAsAXZ.jpg\"]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-27T15:44:11.000Z"
        },
        {
            "id": 1068,
            "username": "alexxubyte",
            "tweet_id": "1552318957738070018",
            "tweet_text": "4. The PSP payment gateway marks this QR code as paid and returns a success message to the consumer\u2019s digital wallet App.\n\n5. The PSP payment gateway notifies the merchant that the consumer has paid the given QR code. https://t.co/lVFF6ycRSj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYrx25vUcAEE5zL.jpg\"]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-27T15:44:14.000Z"
        },
        {
            "id": 1067,
            "username": "alexxubyte",
            "tweet_id": "1552318962347622401",
            "tweet_text": "Over to you: We have detailed how to pay using a dynamic QR code. But sometimes, you could pay by scanning a printed QR code in a merchant\u2019s shop, which is called the static QR code. Do you know how a static QR code works?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Others",
            "created_at": "2022-07-27T15:44:15.000Z"
        },
        {
            "id": 1066,
            "username": "alexxubyte",
            "tweet_id": "1552318965145227266",
            "tweet_text": "Subscribe to our weekly newsletter to learn something new every week:\n\nhttps://t.co/PczMAd8Jdb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552318870416830464",
            "tweet_type": "Others",
            "created_at": "2022-07-27T15:44:16.000Z"
        },
        {
            "id": 1065,
            "username": "alexxubyte",
            "tweet_id": "1552673169047138311",
            "tweet_text": "Do you know how you get paid at work?\n\nIn the US, tech companies usually run payrolls via Automatic Clearing House (\ud835\udc00\ud835\udc02\ud835\udc07). https://t.co/tFaAnXYIaB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0BAnUIAAXuQO.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:45.000Z"
        },
        {
            "id": 1064,
            "username": "alexxubyte",
            "tweet_id": "1552673173212000256",
            "tweet_text": "ACH handles retail transactions and is part of American retail payment systems. It processes transactions in \ud835\udc1b\ud835\udc1a\ud835\udc2d\ud835\udc1c\ud835\udc21\ud835\udc1e\ud835\udc2c, not in real-time. The diagram below shows how ACH direct deposit works with payrolls.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:46.000Z"
        },
        {
            "id": 1063,
            "username": "alexxubyte",
            "tweet_id": "1552673182158503936",
            "tweet_text": "\ud83d\udd39Step 0: Before we can use ACH network, the originator who starts the transactions needs to open an account at a commercial bank because only banks are allowed to initiate ACH transactions directly. The bank is called ODFI (Originating Depository Financial Institution). https://t.co/Rd5ANo9Ene",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0BqoUEAIqYvn.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:48.000Z"
        },
        {
            "id": 1062,
            "username": "alexxubyte",
            "tweet_id": "1552673186377895937",
            "tweet_text": "Then the transaction receiver needs to authorize the originator for certain types of transactions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:49.000Z"
        },
        {
            "id": 1061,
            "username": "alexxubyte",
            "tweet_id": "1552673194938621955",
            "tweet_text": "\ud83d\udd39Step 1: The originator company originates salary payment transactions. The transactions are sent to a 3rd-party processor like Gusto. The third-party processor helps with ACH-related services like generating ACH files, etc. https://t.co/VJKEFqsKdo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0CaxVEAEkjbB.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:51.000Z"
        },
        {
            "id": 1060,
            "username": "alexxubyte",
            "tweet_id": "1552673205059342336",
            "tweet_text": "\ud83d\udd39Step 2: The third-party processor generates ACH files on behalf of the originator. The files are uploaded to an SFTP established by the ODFI. This should be done by the 7 PM cut-off time, as specified by the ODFI bank. https://t.co/TDDjqIGB55",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0DBTVUAACQdq.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:54.000Z"
        },
        {
            "id": 1059,
            "username": "alexxubyte",
            "tweet_id": "1552673216207790080",
            "tweet_text": "\ud83d\udd39Step 3: After normal business hours in the evening, the ODFI bank forwards the ACH files to the ACH operator for clearing and settlement. https://t.co/gIT1gYqZwO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0Dk4UEAE9hC-.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:56.000Z"
        },
        {
            "id": 1058,
            "username": "alexxubyte",
            "tweet_id": "1552673226538397696",
            "tweet_text": "There are two ACH operators, one is the Federal Reserve (FedACH), and the other is EPN (Electronic Payment Network \u2013 which is operated by a private company). https://t.co/mMb6pR7W3Q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0EQSUEAMM8pQ.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:11:59.000Z"
        },
        {
            "id": 1057,
            "username": "alexxubyte",
            "tweet_id": "1552673237028335616",
            "tweet_text": "\ud83d\udd39Step 4: The ACH files are processed around midnight and made available to the receiving bank RDFI (Receiving Depository Financial Institution.) https://t.co/4GkDAJlsmP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0E2UVQAA9nMX.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:12:01.000Z"
        },
        {
            "id": 1056,
            "username": "alexxubyte",
            "tweet_id": "1552673248055558144",
            "tweet_text": "\ud83d\udd39Step 5: The RDFI operates on the receiver\u2019s bank accounts based on the instructions in the ACH files. In our case, the receiver receives $100 from the originator. This is done when the RDFI opens for business at 6 AM the next day. https://t.co/zP0X29bvEt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYw0FeMUcAY4JGV.jpg\"]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:12:04.000Z"
        },
        {
            "id": 1055,
            "username": "alexxubyte",
            "tweet_id": "1552673252161437696",
            "tweet_text": "ACH is a next-day settlement system. It means transactions sent out by 7 PM on one day will arrive the following morning.\n\nSince 2018, it\u2019s possible to choose Same Day ACH so funds can be transferred on the same business day.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:12:05.000Z"
        },
        {
            "id": 1054,
            "username": "alexxubyte",
            "tweet_id": "1552673254648647686",
            "tweet_text": "Over to you: ACH is a US financial network. If you live outside the US, do you know what payment method your employer uses to send payment? What\u2019s the difference between ACH and wire transfer?\n\nThanks for reading! Follow me at @alexxubyte to get more threads like this.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552673169047138311",
            "tweet_type": "Others",
            "created_at": "2022-07-28T15:12:05.000Z"
        },
        {
            "id": 1053,
            "username": "alexxubyte",
            "tweet_id": "1553033011016306689",
            "tweet_text": "How do we interact with Linux Filesystem via \ud835\udc1f\ud835\udc22\ud835\udc25\ud835\udc1e \ud835\udc1d\ud835\udc1e\ud835\udc2c\ud835\udc1c\ud835\udc2b\ud835\udc22\ud835\udc29\ud835\udc2d\ud835\udc28\ud835\udc2b\ud835\udc2c? https://t.co/WfWlmg1uiX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17SfJUcAYVmeV.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:38.000Z"
        },
        {
            "id": 1052,
            "username": "alexxubyte",
            "tweet_id": "1553033015403560963",
            "tweet_text": "A file descriptor represents an open file. It is a unique number assigned by the operating system to each file. It is an \ud835\udc1a\ud835\udc1b\ud835\udc2c\ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc1c\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 for working with files. We need to use file descriptors to read from or write to files in our program.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:39.000Z"
        },
        {
            "id": 1051,
            "username": "alexxubyte",
            "tweet_id": "1553033018033352704",
            "tweet_text": "Each process maintains its own file descriptor table.\n\nThe diagram below shows the layered architecture in Linux filesystem. Let\u2019s take process 1234 as an example.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:40.000Z"
        },
        {
            "id": 1050,
            "username": "alexxubyte",
            "tweet_id": "1553033027072040960",
            "tweet_text": "\ud83d\udd39 In User Space\nWhen we open a file called \u201cfileA.txt\u201d in Process 1234, we get file descriptor fd1, which is equal to 3. We can then pass the file descriptor to other functions, to write data to the file. https://t.co/7KiPt7xYUq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17TYvVUAEndoz.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Systems Design",
            "created_at": "2022-07-29T15:01:42.000Z"
        },
        {
            "id": 1049,
            "username": "alexxubyte",
            "tweet_id": "1553033038476374016",
            "tweet_text": "\ud83d\udd39 In Kernel Space\nIn Linux kernel, there is a \ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc1c\ud835\udc1e\ud835\udc2c\ud835\udc2c \ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e to maintain the data for the processes. Each process has an entry in the table. Each process maintains a file descriptor table, with file descriptors as its indices. https://t.co/QYXqiuYojm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17UAiVUAAeFrS.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:44.000Z"
        },
        {
            "id": 1048,
            "username": "alexxubyte",
            "tweet_id": "1553033050480513024",
            "tweet_text": "Notice that file descriptors 0, 1 and 2 are reserved in each file descriptor table to represent stdin, stdout and stderr. https://t.co/gUjeOfxQWh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17Uq1UUAUP9UC.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:47.000Z"
        },
        {
            "id": 1047,
            "username": "alexxubyte",
            "tweet_id": "1553033063046602753",
            "tweet_text": "The file pointer points to an entry in the \ud835\udc28\ud835\udc29\ud835\udc1e\ud835\udc27 \ud835\udc1f\ud835\udc22\ud835\udc25\ud835\udc1e \ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e, which has information about open files across all processes. Multiple file descriptors can point to the same file table entry. For example, file descriptor 0,1 and 2 point to the same open file table entry. https://t.co/6h8nmEMIZd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17VcqVUAAuxSQ.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:50.000Z"
        },
        {
            "id": 1046,
            "username": "alexxubyte",
            "tweet_id": "1553033074388086784",
            "tweet_text": "Since different open file table entries can represent the same file, it is a waste of resources to store the file static information so many times. We need another abstraction layer called \u2018vnode table\u2019 to store the static data. https://t.co/iILn757M85",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17WG4UEAA_6Iq.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:53.000Z"
        },
        {
            "id": 1045,
            "username": "alexxubyte",
            "tweet_id": "1553033085133852672",
            "tweet_text": "In each file table entry, there is a vnode pointer, which points to an entry in \ud835\udc2f\ud835\udc27\ud835\udc28\ud835\udc1d\ud835\udc1e \ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e. The static information includes file type, function pointers, reference counts, inode etc. inode describes a physical object in the filesystem. https://t.co/uGNVZcte3e",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17WwCVQAAHQUG.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:56.000Z"
        },
        {
            "id": 1044,
            "username": "alexxubyte",
            "tweet_id": "1553033096466812934",
            "tweet_text": "\ud83d\udd39 In Filesystem\nThe inode array element stores the actual file information, including permission mode, owners, timestamps, etc. inode also points to the data blocks stored in the filesystem. https://t.co/iDMcQI7uyG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY17XYlVQAEJFxV.jpg\"]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:58.000Z"
        },
        {
            "id": 1043,
            "username": "alexxubyte",
            "tweet_id": "1553033100547919873",
            "tweet_text": "Over to you: When we close a file in a program, do you know which entries are deleted in these data structures?\n\nThanks for reading! Follow me at @alexxubyte to get more threads like this.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553033011016306689",
            "tweet_type": "Others",
            "created_at": "2022-07-29T15:01:59.000Z"
        },
        {
            "id": 1042,
            "username": "alexxubyte",
            "tweet_id": "1553400317097652224",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39 Build chat application with Redis\n\ud83d\udd39 Airbnb microservices architecture\n\ud83d\udd39 Consistent hashing\n\ud83d\udd39 Amazon Dynamodb paper\n\ud83d\udd39 Design a blockchain wallet \n\nJoin the 95,000+ subscribers here to help me reach 100k next week \ud83e\udd17:\n\nhttps://t.co/PczMAd8Jdb https://t.co/P0QfaoirPb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY7JJxjUIAE-G9Y.jpg\"]",
            "tweet_conversation_id": "1553400317097652224",
            "tweet_type": "Others",
            "created_at": "2022-07-30T15:21:11.000Z"
        },
        {
            "id": 1721,
            "username": "testdrivenio",
            "tweet_id": "1553780027942060032",
            "tweet_text": "Python is always a good choice:\n\nhttps://t.co/b6wT1IfV9d\n\nand don't forget the tests:\n\nTest-driven development and Docker are super popular in the last few years:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553780025479929856",
            "tweet_type": "Others",
            "created_at": "2022-07-31T16:30:01.000Z"
        },
        {
            "id": 1720,
            "username": "testdrivenio",
            "tweet_id": "1553780029221670913",
            "tweet_text": "Test-driven development and Docker are super popular in the last few years:\n\nhttps://t.co/Zhv1gySjIm\n\nhttps://t.co/4cVwtZO3KL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553780025479929856",
            "tweet_type": "Others",
            "created_at": "2022-07-31T16:30:01.000Z"
        },
        {
            "id": 1041,
            "username": "alexxubyte",
            "tweet_id": "1554133470586122240",
            "tweet_text": "39 rejections, 1 acceptance.\n\nInsane perseverance showed by the candidate\n\nDemonstration of the power of the Google brand\n\nCongrats, Tyler &amp; Google\n\n \u2014\nHelp me reach 100,000 this week (System Design Newsletter currently at 96,485).\n\nSubscribe here: https://t.co/dkjDPxrTOt https://t.co/TesOYcAq3M",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZFjhReVsAAZ74B.jpg\"]",
            "tweet_conversation_id": "1554133470586122240",
            "tweet_type": "Others",
            "created_at": "2022-08-01T15:54:28.000Z"
        },
        {
            "id": 1719,
            "username": "testdrivenio",
            "tweet_id": "1554135646498762752",
            "tweet_text": "Class-based vs Function-based Views in Django  \n\nhttps://t.co/hy51CmsDCf \n\nCompare and contrast and dive into the pros and cons of using Django's-\n\n\ud83d\udd38Function-based views\n\ud83d\udd38Class-based views\n\ud83d\udd38Generic class-based views\n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554135646498762752",
            "tweet_type": "Others",
            "created_at": "2022-08-01T16:03:07.000Z"
        },
        {
            "id": 1718,
            "username": "testdrivenio",
            "tweet_id": "1554142420878577665",
            "tweet_text": "Django tip:\n\nAt the beginning of a new Django project, you should always set up a custom model, even if you don't plan on customizing the default model.\n\nThat should be done before creating or running any migrations. https://t.co/TdLJqpomqI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZFsS0QaAAA4fhE.png\"]",
            "tweet_conversation_id": "1554142420878577665",
            "tweet_type": "Django tips",
            "created_at": "2022-08-01T16:30:02.000Z"
        },
        {
            "id": 1717,
            "username": "testdrivenio",
            "tweet_id": "1554142423244472320",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554142420878577665",
            "tweet_type": "Others",
            "created_at": "2022-08-01T16:30:02.000Z"
        },
        {
            "id": 1716,
            "username": "testdrivenio",
            "tweet_id": "1554463787776081926",
            "tweet_text": "Storing Django Static and Media Files on Amazon S3 \n\nhttps://t.co/3uC4hc7FeL\n\nConfigure Django to load and serve up static and media files, public and private, via an Amazon S3 bucket.\n\n#Django  #Python #S3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554463787776081926",
            "tweet_type": "Others",
            "created_at": "2022-08-02T13:47:02.000Z"
        },
        {
            "id": 1040,
            "username": "alexxubyte",
            "tweet_id": "1554494678937915394",
            "tweet_text": "Evolution of Airbnb\u2019s microservice architecture.\n\nThis post is based on a tech talk. Check out the reference link at the end of the thread to read more.\n\nHelp me reach 100k this week (System Design Newsletter currently at 97,160).\n\nSubscribe here: https://t.co/dkjDPxrTOt https://t.co/jXONsyeApO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZKsqw6UsAEjqeq.jpg\"]",
            "tweet_conversation_id": "1554494678937915394",
            "tweet_type": "Others",
            "created_at": "2022-08-02T15:49:47.000Z"
        },
        {
            "id": 1039,
            "username": "alexxubyte",
            "tweet_id": "1554494690925326336",
            "tweet_text": "\ud835\udc0c\ud835\udc28\ud835\udc27\ud835\udc28\ud835\udc25\ud835\udc22\ud835\udc2d\ud835\udc21 (2008 - 2017)\nAirbnb began as a simple marketplace for hosts and guests. This is built in a Ruby on Rails application - the monolith.\n\nWhat\u2019s the challenge?\n- Confusing team ownership + unowned code\n- Slow deployment https://t.co/BpiuKSQ5BJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZKsrX2VsAA5PQC.jpg\"]",
            "tweet_conversation_id": "1554494678937915394",
            "tweet_type": "Others",
            "created_at": "2022-08-02T15:49:50.000Z"
        },
        {
            "id": 1038,
            "username": "alexxubyte",
            "tweet_id": "1554494704191807489",
            "tweet_text": "\ud835\udc0c\ud835\udc22\ud835\udc1c\ud835\udc2b\ud835\udc28\ud835\udc2c\ud835\udc1e\ud835\udc2b\ud835\udc2f\ud835\udc22\ud835\udc1c\ud835\udc1e\ud835\udc2c (2017 - 2020)\nMicroservice aims to solve those challenges. In this architecture, key services include:\n\n- Data fetching service\n- Business logic data service\n- Write workflow service\n- UI aggregation service\n- Each service had one owning team https://t.co/ajCcJqVL2Z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZKssFoVUAAZV-R.jpg\"]",
            "tweet_conversation_id": "1554494678937915394",
            "tweet_type": "Others",
            "created_at": "2022-08-02T15:49:53.000Z"
        },
        {
            "id": 1037,
            "username": "alexxubyte",
            "tweet_id": "1554494708730105856",
            "tweet_text": "What\u2019s the challenge?\nHundreds of services and dependencies were difficult for humans to manage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554494678937915394",
            "tweet_type": "Others",
            "created_at": "2022-08-02T15:49:54.000Z"
        },
        {
            "id": 1036,
            "username": "alexxubyte",
            "tweet_id": "1554494718498590720",
            "tweet_text": "\ud835\udc0c\ud835\udc22\ud835\udc1c\ud835\udc2b\ud835\udc28 + \ud835\udc26\ud835\udc1a\ud835\udc1c\ud835\udc2b\ud835\udc28\ud835\udc2c\ud835\udc1e\ud835\udc2b\ud835\udc2f\ud835\udc22\ud835\udc1c\ud835\udc1e\ud835\udc2c (2020 - present)\n\nThis is what Airbnb is working on now. The micro and macroservice hybrid model focuses on the unification of APIs. https://t.co/karsTjXkRT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZKss-fUsAEEhRO.jpg\"]",
            "tweet_conversation_id": "1554494678937915394",
            "tweet_type": "Others",
            "created_at": "2022-08-02T15:49:56.000Z"
        },
        {
            "id": 1035,
            "username": "alexxubyte",
            "tweet_id": "1554494730280378368",
            "tweet_text": "Over to you - why do you think both Airbnb and Netflix use GraphQL?\n\nReference: https://t.co/nqBncAlnfj https://t.co/iKZlJ9FjNh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZKstp9UsAAlpNY.jpg\"]",
            "tweet_conversation_id": "1554494678937915394",
            "tweet_type": "Others",
            "created_at": "2022-08-02T15:49:59.000Z"
        },
        {
            "id": 1715,
            "username": "testdrivenio",
            "tweet_id": "1554504807464837123",
            "tweet_text": "Did you know?\n\nPython has a library called freegames that allows you to play classic games like Pacman, Snake, Maze, Simon Says... https://t.co/da96WC01b8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZK14eZagAEwO8F.png\"]",
            "tweet_conversation_id": "1554504807464837123",
            "tweet_type": "Others",
            "created_at": "2022-08-02T16:30:02.000Z"
        },
        {
            "id": 1714,
            "username": "testdrivenio",
            "tweet_id": "1554504809142956034",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554504807464837123",
            "tweet_type": "Others",
            "created_at": "2022-08-02T16:30:02.000Z"
        },
        {
            "id": 1034,
            "username": "alexxubyte",
            "tweet_id": "1554851895826558976",
            "tweet_text": "/1 Algorithms you should know series for System Design.\n\n\ud835\udc00\ud835\udc25\ud835\udc20\ud835\udc28\ud835\udc2b\ud835\udc22\ud835\udc2d\ud835\udc21\ud835\udc26 1: \ud835\udc02\ud835\udc28\ud835\udc27\ud835\udc2c\ud835\udc22\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc2d \ud835\udc07\ud835\udc1a\ud835\udc2c\ud835\udc21\ud835\udc22\ud835\udc27\ud835\udc20\n\nIf you prefer video, you can watch our YouTube video here \u21e9\n\nhttps://t.co/4fRz617p3u\n\nIf you prefer text, keep reading: https://t.co/DlHG6d5Pvw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZPxjppUsAIoVod.jpg\"]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:14.000Z"
        },
        {
            "id": 1033,
            "username": "alexxubyte",
            "tweet_id": "1554851899156733952",
            "tweet_text": "/2 What do Amazon DynamoDB, Apache Cassandra, Discord, and Akamai CDN have in common?\n\nThey all use consistent hashing. Let\u2019s dive right in.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:15.000Z"
        },
        {
            "id": 1032,
            "username": "alexxubyte",
            "tweet_id": "1554851901841162241",
            "tweet_text": "/3 \ud835\udc16\ud835\udc21\ud835\udc1a\ud835\udc2d\u2019\ud835\udc2c \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc22\ud835\udc2c\ud835\udc2c\ud835\udc2e\ud835\udc1e \ud835\udc30\ud835\udc22\ud835\udc2d\ud835\udc21 \ud835\udc2c\ud835\udc22\ud835\udc26\ud835\udc29\ud835\udc25\ud835\udc1e \ud835\udc21\ud835\udc1a\ud835\udc2c\ud835\udc21\ud835\udc22\ud835\udc27\ud835\udc20?\n\nIn a large-scale distributed system, data does not fit on a single server. They are \u201cdistributed\u201d across many machines. This is called horizontal scaling.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:15.000Z"
        },
        {
            "id": 1031,
            "username": "alexxubyte",
            "tweet_id": "1554851904399609858",
            "tweet_text": "/4 To build such a system with predictable performance, it is important to distribute the data evenly across those servers.\n\nSimple hashing: serverIndex = hash(key) % N, where N is the size of the server pool",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:16.000Z"
        },
        {
            "id": 1030,
            "username": "alexxubyte",
            "tweet_id": "1554851906974994433",
            "tweet_text": "/5 This approach works well when the size of the cluster is fixed, and the data distribution is even. But when new servers get added to meet new demand, or when existing servers get removed, it triggers a storm of misses and a lot of objects to be moved.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:17.000Z"
        },
        {
            "id": 1029,
            "username": "alexxubyte",
            "tweet_id": "1554851915069943813",
            "tweet_text": "/6 \ud835\udc02\ud835\udc28\ud835\udc27\ud835\udc2c\ud835\udc22\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc2d \ud835\udc21\ud835\udc1a\ud835\udc2c\ud835\udc21\ud835\udc22\ud835\udc27\ud835\udc20\n\nConsistent hashing is an effective technique to mitigate this issue.\n\nThe goal of consistent hashing is simple. We want almost all objects to stay assigned to the same server even as the number of servers changes. https://t.co/TiHZWIsrYA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZPxkqQUsAEcxWw.jpg\"]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:18.000Z"
        },
        {
            "id": 1028,
            "username": "alexxubyte",
            "tweet_id": "1554851923152343041",
            "tweet_text": "/7 As shown in the diagram, using a hash function, we hash each server by its name or IP address, and place the server onto the ring. Next, we hash each object by its key with the same hashing function. https://t.co/GcMLtImNfv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZPxlKqUIAAAPdf.jpg\"]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:20.000Z"
        },
        {
            "id": 1027,
            "username": "alexxubyte",
            "tweet_id": "1554851930857299969",
            "tweet_text": "/8 To locate the server for a particular object, we go clockwise from the location of the object key on the ring until a server is found. Continue with our example, key 0 is on server 0, key 1 is on server 1. https://t.co/UQn1ykRmji",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZPxlnzUEAAjtlK.jpg\"]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:22.000Z"
        },
        {
            "id": 1026,
            "username": "alexxubyte",
            "tweet_id": "1554851934036627456",
            "tweet_text": "/9 \ud835\udc00\ud835\udc1d\ud835\udc1d \ud835\udc1a \ud835\udc2c\ud835\udc1e\ud835\udc2b\ud835\udc2f\ud835\udc1e\ud835\udc2b\nNow let\u2019s take a look at what happens when we add a server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:23.000Z"
        },
        {
            "id": 1025,
            "username": "alexxubyte",
            "tweet_id": "1554851941703774208",
            "tweet_text": "/10 Here we insert a new server s4 to the left of s0 on the ring. Note that only k0 needs to be moved from s0 to s4. This is because s4 is the first server k0 encounters by going clockwise from k0\u2019s position on the ring. Keys k1, k2, and k3 are not affected. https://t.co/UkoGeSiKNZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZPxmOOUUAEBQku.jpg\"]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:25.000Z"
        },
        {
            "id": 1024,
            "username": "alexxubyte",
            "tweet_id": "1554851944895692800",
            "tweet_text": "/11 \ud835\udc07\ud835\udc28\ud835\udc30 \ud835\udc1c\ud835\udc28\ud835\udc27\ud835\udc2c\ud835\udc22\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc2d \ud835\udc21\ud835\udc1a\ud835\udc2c\ud835\udc21\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc22\ud835\udc2c \ud835\udc2e\ud835\udc2c\ud835\udc1e\ud835\udc1d \ud835\udc22\ud835\udc27 \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc2b\ud835\udc1e\ud835\udc1a\ud835\udc25 \ud835\udc30\ud835\udc28\ud835\udc2b\ud835\udc25\ud835\udc1d\n\n\ud83d\udd39Amazon DynamoDB and Apache Cassandra: minimize data movement during rebalancing\n\n\ud83d\udd39Content delivery networks like Akamai: distribute web contents evenly among the edge servers",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:26.000Z"
        },
        {
            "id": 1023,
            "username": "alexxubyte",
            "tweet_id": "1554851947441577984",
            "tweet_text": "/12 \ud83d\udd39Load balancers like Google Network Load Balancer: distribute persistent connections evenly across backend servers\n\nOver to you - which algorithm should we talk about next?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:26.000Z"
        },
        {
            "id": 1022,
            "username": "alexxubyte",
            "tweet_id": "1554851950012772352",
            "tweet_text": "/13 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/LXasnfljrD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554851895826558976",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-03T15:29:27.000Z"
        },
        {
            "id": 1713,
            "username": "testdrivenio",
            "tweet_id": "1554867194617507840",
            "tweet_text": "Django tip:\n\nYou can create an empty query set with none(). https://t.co/ImR8m4yPjN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZP_eNLaMAETWqm.png\"]",
            "tweet_conversation_id": "1554867194617507840",
            "tweet_type": "Django tips",
            "created_at": "2022-08-03T16:30:01.000Z"
        },
        {
            "id": 1712,
            "username": "testdrivenio",
            "tweet_id": "1554867196525809664",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554867194617507840",
            "tweet_type": "Others",
            "created_at": "2022-08-03T16:30:02.000Z"
        },
        {
            "id": 1711,
            "username": "testdrivenio",
            "tweet_id": "1555193456011923456",
            "tweet_text": "Running Flask on Kubernetes\n\nhttps://t.co/6P9qfxOcin\n\nLooks at how to deploy a Flask microservice (along with Postgres) to a Kubernetes cluster.\n\n#Flask #DevOps #Kubernetes",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555193456011923456",
            "tweet_type": "Others",
            "created_at": "2022-08-04T14:06:28.000Z"
        },
        {
            "id": 1021,
            "username": "alexxubyte",
            "tweet_id": "1555210693921542144",
            "tweet_text": "1. How do we build a simple \ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc2d \ud835\udc1a\ud835\udc29\ud835\udc29\ud835\udc25\ud835\udc22\ud835\udc1c\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 using \ud835\udc11\ud835\udc1e\ud835\udc1d\ud835\udc22\ud835\udc2c?\n\nThe diagram below shows how we can leverage the pub-sub functionality of Redis to develop a chat application. https://t.co/4w7aFPrNvg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU34U9VEAADo2w.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:14:58.000Z"
        },
        {
            "id": 1020,
            "username": "alexxubyte",
            "tweet_id": "1555210705225191424",
            "tweet_text": "2. \ud83d\udd39Stage 1: Connection Initialization\nSteps 1 and 2: Bob opens the chat application. A web socket is established between the client and the server. https://t.co/ka0NO0yxoD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU346qVQAsphw9.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:01.000Z"
        },
        {
            "id": 1019,
            "username": "alexxubyte",
            "tweet_id": "1555210716885368832",
            "tweet_text": "3. Steps 3 and 4: The pub-sub server establishes several connections to Redis. One connection is used to update the Redis data models and publish messages to a topic. Other connections are used to subscribe and listen to updates for topics. https://t.co/9o0xJLOz23",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU35lOVQAAVpjK.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:03.000Z"
        },
        {
            "id": 1018,
            "username": "alexxubyte",
            "tweet_id": "1555210728281321472",
            "tweet_text": "4. Steps 5 and 6: Bob\u2019s client application requires the chat member list and the historical message list. The information is retrieved from Redis and sent to the client application. https://t.co/62nl1rgec6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU36OTUsAAAuuw.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:06.000Z"
        },
        {
            "id": 1017,
            "username": "alexxubyte",
            "tweet_id": "1555210740121739264",
            "tweet_text": "5. Steps 7 and 8: Since Bob is a new member joining the chat application, a message is published to the \u201cmember_add\u201d topic and as a result, other participants of the chat application can see Bob. https://t.co/me0dSy1l8B",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU365DVEAAcz3j.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:09.000Z"
        },
        {
            "id": 1016,
            "username": "alexxubyte",
            "tweet_id": "1555210751500959744",
            "tweet_text": "6. \ud83d\udd39Stage 2: Message Handling\n\nStep 1: Bob sends a message to Alice in the chat application. https://t.co/3OJK5eByEb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU37k_UUAEBXzW.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:12.000Z"
        },
        {
            "id": 1015,
            "username": "alexxubyte",
            "tweet_id": "1555210761915363328",
            "tweet_text": "7. Step 2: The new chat message is added to Redis SortedSet by calling \u2018zadd.\u2019 The chat messages are sorted based on arrival time. The pub-sub server then publishes the chat message to the \u201cmessages\u201d topic so subscribers can pick up. https://t.co/aPUzaDs9IM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU38OOVsAA4whH.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:14.000Z"
        },
        {
            "id": 1014,
            "username": "alexxubyte",
            "tweet_id": "1555210772917080064",
            "tweet_text": "8. Step 3: Alice\u2019s client application receives the chat message from Bob.\n\n\ud83d\udc49 Over to you: What backend stack is commonly used to build a large-scale chat application?\n\nReference material:\nhttps://t.co/j0HVY71GNr https://t.co/OKTMwMtNh1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZU382MUEAAnhv_.jpg\"]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:17.000Z"
        },
        {
            "id": 1013,
            "username": "alexxubyte",
            "tweet_id": "1555210777052598272",
            "tweet_text": "9. I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/Lrj6X5xy5m",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-04T15:15:18.000Z"
        },
        {
            "id": 1710,
            "username": "testdrivenio",
            "tweet_id": "1555229583632658438",
            "tweet_text": "Django tip:\n\nDjango DateField and DateTimeField have two methods that will return next or previous object with respect to the date(time) field.\n\nThose methods are:\n- get_next_by_[date_field]() \n- get_previous_by_[date_field]()\n\n(The field must not have null=True for this to work) https://t.co/NDthGbvFWL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZVJEBJUUAAX37i.png\"]",
            "tweet_conversation_id": "1555229583632658438",
            "tweet_type": "Django tips",
            "created_at": "2022-08-04T16:30:02.000Z"
        },
        {
            "id": 1709,
            "username": "testdrivenio",
            "tweet_id": "1555229586061164545",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555229583632658438",
            "tweet_type": "Others",
            "created_at": "2022-08-04T16:30:02.000Z"
        },
        {
            "id": 1012,
            "username": "alexxubyte",
            "tweet_id": "1555252274112344064",
            "tweet_text": "Enjoy this thread?\n\nYou might like our \"Algorithms You Should Know Video Series For System Design\":\n\nhttps://t.co/4fRz617p3u",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555210693921542144",
            "tweet_type": "Others",
            "created_at": "2022-08-04T18:00:11.000Z"
        },
        {
            "id": 1011,
            "username": "alexxubyte",
            "tweet_id": "1555388843720712192",
            "tweet_text": "My book showed up in a college magazine in Costa Rica. It is such a great honor for me. \n\nI just want to say thank you to everyone who supported my writing journey! https://t.co/41CoFhVuOL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZXWx3WUUAAASB3.jpg\"]",
            "tweet_conversation_id": "1555388843720712192",
            "tweet_type": "Others",
            "created_at": "2022-08-05T03:02:52.000Z"
        },
        {
            "id": 1010,
            "username": "alexxubyte",
            "tweet_id": "1555570908621787136",
            "tweet_text": "1. Digital wallet in \ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc1d\ud835\udc22\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\ud835\udc1a\ud835\udc25 \ud835\udc1b\ud835\udc1a\ud835\udc27\ud835\udc24\ud835\udc2c vs wallet in \ud835\udc1b\ud835\udc25\ud835\udc28\ud835\udc1c\ud835\udc24\ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc22\ud835\udc27\n\nHow does blockchain change digital wallets? Why does VISA invest in blockchains? A thread.\n\nHelp me reach 100k newsletter (currently at 99,172)\n\nSubscribe: https://t.co/dkjDPxrTOt https://t.co/qHhqD0ASDn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ_flXVQAE7c1z.jpg\"]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:20.000Z"
        },
        {
            "id": 1009,
            "username": "alexxubyte",
            "tweet_id": "1555570919564664833",
            "tweet_text": "2. \ud835\udc08\ud835\udc27 \ud835\udc1b\ud835\udc1a\ud835\udc27\ud835\udc24\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc2c\ud835\udc32\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc26\ud835\udc2c\n\ud83d\udd39Deposit process: Bob goes to Bank of America (BoA) to open an account and deposit $100. A new account B1234 is created in the wallet system for Bob. The cash goes to the bank\u2019s vault and Bob\u2019s wallet now has $100. https://t.co/HHRHFEGRk3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ_gKMVQAANtiX.jpg\"]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:22.000Z"
        },
        {
            "id": 1008,
            "username": "alexxubyte",
            "tweet_id": "1555570923750641666",
            "tweet_text": "3. If Bob wants to use the banking services of Citibank (Citi,) he needs to go through the same process all over again.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:23.000Z"
        },
        {
            "id": 1007,
            "username": "alexxubyte",
            "tweet_id": "1555570932529315840",
            "tweet_text": "4. \ud83d\udd39Transfer process: Bob opens BoA\u2019s App and transfers $50 to Alice\u2019s account at Citi. The amount is deducted from Bob\u2019s account B1234 and credited to Alice\u2019s account C512. The actual movement of cash doesn\u2019t happen instantly. https://t.co/bWPdy7xtgf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ_g7bUsAAjNHj.jpg\"]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:26.000Z"
        },
        {
            "id": 1006,
            "username": "alexxubyte",
            "tweet_id": "1555570942637514754",
            "tweet_text": "5. It happens after BoA and Citi settle all transactions at end-of-day.\n\n\ud83d\udd39Withdrawal process: Bob withdraws his remaining $50 from account B1234. The amount is deducted from B1234, and Bob gets the cash. https://t.co/NA8jukhtS6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ_hhsUcAEB04P.jpg\"]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:28.000Z"
        },
        {
            "id": 1005,
            "username": "alexxubyte",
            "tweet_id": "1555570953467207680",
            "tweet_text": "6. \ud835\udc16\ud835\udc22\ud835\udc2d\ud835\udc21 \ud835\udc01\ud835\udc25\ud835\udc28\ud835\udc1c\ud835\udc24\ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc22\ud835\udc27\ud835\udc2c\n\ud83d\udd39Deposit &amp; Withdraw: Blockchains support cryptocurrencies, with no cash involved. Bob needs to generate an address as the transfer recipient and store the private key in a crypto wallet like Metamask. Then Bob can receive cryptocurrencies. https://t.co/XmHR1vK3wk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ_iIDVEAAaWg0.jpg\"]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:31.000Z"
        },
        {
            "id": 1004,
            "username": "alexxubyte",
            "tweet_id": "1555570963952984064",
            "tweet_text": "7. \ud83d\udd39Transfer: Bob opens Metamask and enters Alice\u2019s address, and sends it 2 ETHs. Then Bob signs the transaction to authorize the transfer with the private key. When this transaction is confirmed on blockchains, Bob\u2019s address has 8 ETHs and Alice\u2019s address has 101 ETHs. https://t.co/dUG0KbhnL9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ_ivUVsAAC-PG.jpg\"]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:33.000Z"
        },
        {
            "id": 1003,
            "username": "alexxubyte",
            "tweet_id": "1555570974505938944",
            "tweet_text": "8. \ud83d\udc49 Can you spot the differences?\nBlockchain is distributed ledger. It provides a unified interface to handle the common operations on wallets. Instead of opening multiple accounts with different banks, we just need to open a single account on blockchains, which is the address. https://t.co/ZhZt0QbuiM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ_jW6UsAAtuhl.jpg\"]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:36.000Z"
        },
        {
            "id": 1002,
            "username": "alexxubyte",
            "tweet_id": "1555570978469449728",
            "tweet_text": "9. All transfers are confirmed on blockchains in pseudo real-time, saving us from waiting until end-of-day reconciliations.\n\nWith blockchains, we can merge wallet services from different banks into one global service.\n\n\ud83d\udc49 Over to you: What is blockchain being used for today?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:37.000Z"
        },
        {
            "id": 1001,
            "username": "alexxubyte",
            "tweet_id": "1555570981246504960",
            "tweet_text": "10. I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/AyL9Lps2Wt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-05T15:06:37.000Z"
        },
        {
            "id": 1708,
            "username": "testdrivenio",
            "tweet_id": "1555591970541604864",
            "tweet_text": "Python tip:\n\nYou can use else statement with a for loop. \nElse clause is executed if the loop is not terminated with a break statement.\n\n*This only works if the forloop includes a conditional statement. https://t.co/Nu1IaxA0pB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZaSptkVUAE8x31.png\"]",
            "tweet_conversation_id": "1555591970541604864",
            "tweet_type": "Python tips",
            "created_at": "2022-08-05T16:30:01.000Z"
        },
        {
            "id": 1707,
            "username": "testdrivenio",
            "tweet_id": "1555591973306007552",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555591970541604864",
            "tweet_type": "Others",
            "created_at": "2022-08-05T16:30:02.000Z"
        },
        {
            "id": 1000,
            "username": "alexxubyte",
            "tweet_id": "1555654909608964096",
            "tweet_text": "Enjoy this thread?\n\nYou might like our \"Algorithms You Should Know Video Series For System Design\":\n\nhttps://t.co/4fRz617p3u",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555570908621787136",
            "tweet_type": "Others",
            "created_at": "2022-08-05T20:40:07.000Z"
        },
        {
            "id": 1706,
            "username": "testdrivenio",
            "tweet_id": "1555928706136231939",
            "tweet_text": "The MLOps Toolkit  \n\nhttps://t.co/hLfYXMLd1F \n\nLooks at how MLOps fits into the machine learning lifecycle, focusing on tools for developing, deploying, and serving ML models.\n\n#MachineLearning #MLOps",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555928706136231939",
            "tweet_type": "Others",
            "created_at": "2022-08-06T14:48:05.000Z"
        },
        {
            "id": 999,
            "username": "alexxubyte",
            "tweet_id": "1555940295325274113",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39How credit card companies make money\n\ud83d\udd39How live-streaming works\n\ud83d\udd39Why is single-threaded Redis fast (video)\n\ud83d\udd39Amazon DynamoDB paper 2022\n\ud83d\udd39Debugging tactics\n\nHelp me reach 100k newsletter (currently at 99,900!).\nSubscribe here: https://t.co/dkjDPxrTOt https://t.co/SBaJY13bR4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZfPPuKUUAAYmiV.jpg\"]",
            "tweet_conversation_id": "1555940295325274113",
            "tweet_type": "Others",
            "created_at": "2022-08-06T15:34:09.000Z"
        },
        {
            "id": 1705,
            "username": "testdrivenio",
            "tweet_id": "1555954356125462528",
            "tweet_text": "Python tip:\n\nIf you want to find out if a value is between two other values, don't use and operator.\n\nYou can simplify it like this: https://t.co/U1fua1GwLj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZfcPWLUIAAVKFE.png\"]",
            "tweet_conversation_id": "1555954356125462528",
            "tweet_type": "Python tips",
            "created_at": "2022-08-06T16:30:01.000Z"
        },
        {
            "id": 1704,
            "username": "testdrivenio",
            "tweet_id": "1555954358004912128",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555954356125462528",
            "tweet_type": "Others",
            "created_at": "2022-08-06T16:30:01.000Z"
        },
        {
            "id": 1703,
            "username": "testdrivenio",
            "tweet_id": "1556288943016009730",
            "tweet_text": "Developing and Testing an Asynchronous API with FastAPI and Pytest \n\nhttps://t.co/SmgsnIb1Ag\n\nLearn how to develop and test an API with FastAPI using Test-driven Development (TDD).\n\n#FastAPI #Testing #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556288943016009730",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:39:33.000Z"
        },
        {
            "id": 998,
            "username": "alexxubyte",
            "tweet_id": "1556302457340276736",
            "tweet_text": "QR code payment explained in 2 mins.\n \nOther videos made by us:\n- Consistent Hashing\n- Location Based Service\n- Why is Kafka fast?\n- What happens when you type a URL into your browser?\n- How does HTTPS work?\n- More\n\nSubscribe to Our YouTube channel here: https://t.co/9qgBqw7QZ9 https://t.co/Br95EwDcA4",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1556302027755360256/pu/vid/1280x720/x0XkEffb9VhInvFw.mp4?tag=12\"]",
            "tweet_conversation_id": "1556302457340276736",
            "tweet_type": "Others",
            "created_at": "2022-08-07T15:33:15.000Z"
        },
        {
            "id": 997,
            "username": "alexxubyte",
            "tweet_id": "1556303892152872961",
            "tweet_text": "This video is made by my teammate @sahnlam. Follow him for more videos like this.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556302457340276736",
            "tweet_type": "Others",
            "created_at": "2022-08-07T15:38:57.000Z"
        },
        {
            "id": 1702,
            "username": "testdrivenio",
            "tweet_id": "1556316744851267585",
            "tweet_text": "Python tip:\n\nYou can merge dictionaries into a third one in one line by simply using **.\n\nSince Python 3.9, you can also use | operator. https://t.co/2PD8TFqLg5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZkl1H3agAAsjan.png\"]",
            "tweet_conversation_id": "1556316744851267585",
            "tweet_type": "Python tips",
            "created_at": "2022-08-07T16:30:01.000Z"
        },
        {
            "id": 1701,
            "username": "testdrivenio",
            "tweet_id": "1556316746977779712",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556316744851267585",
            "tweet_type": "Others",
            "created_at": "2022-08-07T16:30:02.000Z"
        },
        {
            "id": 1700,
            "username": "testdrivenio",
            "tweet_id": "1556633368950890497",
            "tweet_text": "Asynchronous Tasks with Falcon and Celery\n\nhttps://t.co/c7nYshMzzQ\n\nLooks at how to- \n\n1\u20e3Integrate Celery with the Python-based Falcon web framework. \n2\u20e3Use Docker and Docker Compose to tie everything together\n3\u20e3Test the Celery tasks with unit &amp; integration tests\n\n#Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556633368950890497",
            "tweet_type": "Others",
            "created_at": "2022-08-08T13:28:10.000Z"
        },
        {
            "id": 996,
            "username": "alexxubyte",
            "tweet_id": "1556668351778197504",
            "tweet_text": "Last Saturday was a special day.\n \nWe reached 100,000 Newsletter subscribers.\nWe also reached 100,000 YouTube subscribers on the same day.\n \nTeaching is the one thing that has always made me happy. I\u2019m very grateful that I get to do what I love. For that, thank you \u2764\ufe0f https://t.co/Vx76td1Vab",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZpcIGDVQAAFCjO.jpg\"]",
            "tweet_conversation_id": "1556668351778197504",
            "tweet_type": "Others",
            "created_at": "2022-08-08T15:47:11.000Z"
        },
        {
            "id": 995,
            "username": "alexxubyte",
            "tweet_id": "1556668354634682370",
            "tweet_text": "Subscribe to our system design newsletter and YouTube channel here \u21e9:\n\nNewsletter: https://t.co/dkjDPxaiWV\nYouTube: https://t.co/I6Q566hsbH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556668351778197504",
            "tweet_type": "Others",
            "created_at": "2022-08-08T15:47:11.000Z"
        },
        {
            "id": 1699,
            "username": "testdrivenio",
            "tweet_id": "1556679134235230208",
            "tweet_text": "Python tip:\n\nPython defines tuple with commas, not parenthesis. Parenthesis are there just to make a tuple clearer.\n\nUnpacking - splitting the tuple's variables into individual variables - can be done in a single line \ud83d\udc47 https://t.co/tFng30sGKe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZpva8-akAAxdra.png\"]",
            "tweet_conversation_id": "1556679134235230208",
            "tweet_type": "Python tips",
            "created_at": "2022-08-08T16:30:01.000Z"
        },
        {
            "id": 1698,
            "username": "testdrivenio",
            "tweet_id": "1556679136478785537",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556679134235230208",
            "tweet_type": "Others",
            "created_at": "2022-08-08T16:30:02.000Z"
        },
        {
            "id": 994,
            "username": "alexxubyte",
            "tweet_id": "1556834131459264512",
            "tweet_text": "1. Twitter and Reddit support NFT (Non-Fungible Token) profile pictures. Do you know what the differences between NFT profile pictures and regular profile pictures are?\n\nThe diagram below shows how NFT and regular images differ. https://t.co/iIlILfwBEh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8YvFUUAEX119.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:45:56.000Z"
        },
        {
            "id": 993,
            "username": "alexxubyte",
            "tweet_id": "1556834145363300353",
            "tweet_text": "2. \ud835\udc11\ud835\udc1e\ud835\udc20\ud835\udc2e\ud835\udc25\ud835\udc1a\ud835\udc2b \ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc1f\ud835\udc22\ud835\udc25\ud835\udc1e pic\n\ud83d\udd39Step 1: The user uploads a profile picture, and this request goes to the user service\n\n\ud83d\udd39Step 2: The picture is stored in an object store, like Amazon S3. A URL is generated to visit the file\n\n\ud83d\udd39Step 3: The picture\u2019s metadata is stored in DB https://t.co/N9Csxaqq5V",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8Zc7VUAEZAEV.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:45:59.000Z"
        },
        {
            "id": 992,
            "username": "alexxubyte",
            "tweet_id": "1556834159179378688",
            "tweet_text": "3. \ud835\udc0d\ud835\udc05\ud835\udc13 \ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc1f\ud835\udc22\ud835\udc25\ud835\udc1e image\n\n\ud83d\udd39Step 1: To understand the process, we should know what smart contracts are. Smart contracts are programs deployed and stored on blockchains. They are self-executing when predetermined conditions are met. This is when an NFT is \u201cminted.\u201d https://t.co/NyQzKG5wsL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8aOMVsAAGjmM.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:02.000Z"
        },
        {
            "id": 991,
            "username": "alexxubyte",
            "tweet_id": "1556834172831862786",
            "tweet_text": "4. The inputs include the image file, name, and description. The mint function returns with the new token ID, metadata URI, and the NFT URI on IPFS (InterPlanetary File System). Let\u2019s go through the outputs one by one. https://t.co/iFsbM9Us9U",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8bB-UIAI1MfZ.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:06.000Z"
        },
        {
            "id": 990,
            "username": "alexxubyte",
            "tweet_id": "1556834186656247808",
            "tweet_text": "5. Token ID is a unique ID for the NFT image. There is a dictionary in the smart contract that stores each token\u2019s ID and its owner\u2019s address. That\u2019s why NFT is called \u201cNon-Fungible Token.\u201d Each image is assigned a unique ID. https://t.co/qAMNiM4Rlw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8b06VUAA_uZC.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:09.000Z"
        },
        {
            "id": 989,
            "username": "alexxubyte",
            "tweet_id": "1556834200208171008",
            "tweet_text": "6. Metadata and the profile pictures are stored on IPFS, a peer-to-peer network for storing and sharing data in a distributed filesystem. It\u2019s an important extension for blockchains because it\u2019s not possible to store all the data on blockchains. https://t.co/WZAiT06xih",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8coSUIAAqnhc.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:12.000Z"
        },
        {
            "id": 988,
            "username": "alexxubyte",
            "tweet_id": "1556834214435098625",
            "tweet_text": "7. IPFS leverages \ud835\udc02\ud835\udc28\ud835\udc27\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc2d \ud835\udc00\ud835\udc1d\ud835\udc1d\ud835\udc2b\ud835\udc1e\ud835\udc2c\ud835\udc2c\ud835\udc22\ud835\udc27\ud835\udc20 to ensure the generated URI is linked to the file content. No one can replace or alter the file content without breaking the link.\n\nThe generated metadata URIs are stored in another dictionary in the smart contract. https://t.co/A4eTXG5lUw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8dcqUIAA71YV.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:15.000Z"
        },
        {
            "id": 987,
            "username": "alexxubyte",
            "tweet_id": "1556834227991113728",
            "tweet_text": "8. \ud83d\udd39Steps 2 and 3: Once the NFT is minted, we need to transfer it to the owner\u2019s address. In blockchains, the address acts as a bank account number. We control the permissions via the private key stored in wallets like Metamask. https://t.co/VpigkAFeLN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8eQWVEAAaxxX.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:19.000Z"
        },
        {
            "id": 986,
            "username": "alexxubyte",
            "tweet_id": "1556834241953943553",
            "tweet_text": "9. \ud83d\udd39Step 4: We can now authorize the Twitter page to have read-only access to the wallet. The service goes firstly to the smart contract and retrieves the metadata URI based on token ID. Then, it can load up the picture file from IPFS using the image URI in the metadata. https://t.co/CplzZdJ9KJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8fDMUUAI4wIm.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:22.000Z"
        },
        {
            "id": 985,
            "username": "alexxubyte",
            "tweet_id": "1556834255258324992",
            "tweet_text": "10. So, finally, we can see the cool avatar picture.\n\nYou might notice that an NFT profile is more complex than a regular solution. But due to the use of smart contracts, blockchains, and IPFS content addressing, we can guarantee the integrity of the intellectual property. https://t.co/Rh0qwbnVdP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZr8f2tVEAAKdX2.jpg\"]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:25.000Z"
        },
        {
            "id": 984,
            "username": "alexxubyte",
            "tweet_id": "1556834259922325504",
            "tweet_text": "11. Also, profile images become tradable assets or part of your personal identity.\n\nOver to you: In content addressing, the generated CID (content identifier) is based on the file content. Do you know which algorithms are used to generate CID?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:26.000Z"
        },
        {
            "id": 983,
            "username": "alexxubyte",
            "tweet_id": "1556834262468284416",
            "tweet_text": "12. I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/ARl4DNcBUL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556834131459264512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T02:46:27.000Z"
        },
        {
            "id": 1697,
            "username": "testdrivenio",
            "tweet_id": "1556987362051330053",
            "tweet_text": "Testing in Python\n\nhttps://t.co/agc9katlTw\u2026\n\nLooks at some tools and techniques that help make testing in Python easier.\n\nCovers:\n\n\ud83d\udd38pytest\n\ud83d\udd38Mocking\n\ud83d\udd38Code Coverage\n\ud83d\udd38Mutation Testing\n\ud83d\udd38Hypothesis\n\ud83d\udd38Type Checking\n\nby @JanGiacomelli\n\n#Python #Testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556987362051330053",
            "tweet_type": "Others",
            "created_at": "2022-08-09T12:54:49.000Z"
        },
        {
            "id": 982,
            "username": "alexxubyte",
            "tweet_id": "1557026443435003904",
            "tweet_text": "1. How do video live streamings work on YouTube, TikTok live, or Twitch? The technique is called live streaming.\n\nLivestreaming differs from regular streaming because the video content is sent via the internet in real-time, usually with a latency of just a few seconds. https://t.co/KYdXpInFF9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZurS8sUcAAle0A.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:06.000Z"
        },
        {
            "id": 981,
            "username": "alexxubyte",
            "tweet_id": "1557026453178306560",
            "tweet_text": "2. The diagram below explains what happens behind the scenes to make this possible.\n\nStep 1: The raw video data is captured by a microphone and camera. The data is sent to the server side. https://t.co/HhCRqW2MVJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZurTboVEAAwnPO.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:09.000Z"
        },
        {
            "id": 980,
            "username": "alexxubyte",
            "tweet_id": "1557026462451912704",
            "tweet_text": "3. Step 2: The video data is compressed and encoded. For example, the compressing algorithm separates the background and other video elements. After compression, the video is encoded to standards such as H.264. \n\nThe size of the video data is much smaller after this step. https://t.co/DN5d15C76e",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZurT-pUcAAf09d.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:11.000Z"
        },
        {
            "id": 979,
            "username": "alexxubyte",
            "tweet_id": "1557026471733907456",
            "tweet_text": "4. Step 3: The encoded data is divided into smaller segments, usually seconds in length, so it takes much less time to download or stream. https://t.co/RbZeiG3hJ8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZurUhRUEAA6ujU.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:13.000Z"
        },
        {
            "id": 978,
            "username": "alexxubyte",
            "tweet_id": "1557026481322147841",
            "tweet_text": "5. Step 4: The segmented data is sent to the streaming server. The streaming server needs to support different devices and network conditions. This is called \u2018Adaptive Bitrate Streaming.\u2019 This means we need to produce multiple files at different bitrates in steps 2 and 3. https://t.co/dfEPmJbRW0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZurVDsUUAAIXdS.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:15.000Z"
        },
        {
            "id": 977,
            "username": "alexxubyte",
            "tweet_id": "1557026490885124096",
            "tweet_text": "6. Step 5: The livestreaming data is pushed to edge servers supported by CDN (Content Delivery Network.) Millions of viewers can watch the video from an edge server nearby. CDN significantly lowers data transmission latency. https://t.co/CHLeuzoqjD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZurVnmUYAMuZpK.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:18.000Z"
        },
        {
            "id": 976,
            "username": "alexxubyte",
            "tweet_id": "1557026500120944640",
            "tweet_text": "7. Step 6: The viewers\u2019 devices decode and decompress the video data and play the video in a video player.\n\nSteps 7 and 8: If the video needs to be stored for replay, the encoded data is sent to a storage server, and viewers can request a replay from it later. https://t.co/8JIs58mB8H",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZurWMXVQAUSCyv.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:20.000Z"
        },
        {
            "id": 975,
            "username": "alexxubyte",
            "tweet_id": "1557026504080384001",
            "tweet_text": "8. Common protocols for live streaming include:\n\n\ud83d\udd39RTMP (Real-Time Messaging Protocol): This was originally developed by Macromedia to transmit data between a Flash player and a server. Now it is used for streaming video data over the internet.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:21.000Z"
        },
        {
            "id": 974,
            "username": "alexxubyte",
            "tweet_id": "1557026506743824384",
            "tweet_text": "9. Note that video conferencing applications like Skype use RTC protocol for low latency\n\n\ud83d\udd39HLS (HTTP Live Streaming): It requires the H.264 or H.265 encoding. Apple devices accept only HLS format\n\n\ud83d\udd39DASH (Dynamic Adaptive Streaming over HTTP): DASH does not support Apple devices",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:22.000Z"
        },
        {
            "id": 973,
            "username": "alexxubyte",
            "tweet_id": "1557026509356875777",
            "tweet_text": "10. Both HLS and DASH support adaptive bitrate streaming.\n\nOver to you: What are some of the optimizations that can be done in this process? Which type of storage is suitable for video persistence in step 7?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:22.000Z"
        },
        {
            "id": 972,
            "username": "alexxubyte",
            "tweet_id": "1557026511944704000",
            "tweet_text": "11. I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/KybFIZnedF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-09T15:30:23.000Z"
        },
        {
            "id": 1696,
            "username": "testdrivenio",
            "tweet_id": "1557041521672978434",
            "tweet_text": "Python tip:\n\nThe difference between isdigit() and isnumeric() string methods \ud83e\uddf5\n\nA string can be recognized as numeric, but not as a digit. https://t.co/OoXUnJ8MAH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZu5AndVEAIdKwA.png\"]",
            "tweet_conversation_id": "1557041521672978434",
            "tweet_type": "Python tips",
            "created_at": "2022-08-09T16:30:01.000Z"
        },
        {
            "id": 1695,
            "username": "testdrivenio",
            "tweet_id": "1557041524348620803",
            "tweet_text": "isdigit() method returns True only if all characters in a string are digits (arabic numbers 0-9).\n\nOther numeric values, such as fractions, chinese and roman numbers, return False for isdigit() method whether they return True for isnumeric() method.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557041521672978434",
            "tweet_type": "Others",
            "created_at": "2022-08-09T16:30:02.000Z"
        },
        {
            "id": 1694,
            "username": "testdrivenio",
            "tweet_id": "1557041525615316992",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557041521672978434",
            "tweet_type": "Others",
            "created_at": "2022-08-09T16:30:02.000Z"
        },
        {
            "id": 971,
            "username": "alexxubyte",
            "tweet_id": "1557059136273072128",
            "tweet_text": "Enjoy this thread?\n\nYou might like our \"Algorithms You Should Know Video Series For System Design\":\n\nhttps://t.co/4fRz617p3u",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Others",
            "created_at": "2022-08-09T17:40:01.000Z"
        },
        {
            "id": 1693,
            "username": "testdrivenio",
            "tweet_id": "1557108989925773316",
            "tweet_text": "How to Choose the Right Python Concurrency API\n\nhttps://t.co/Y2D3ANRiW8\n\nPython's standard library offers 3 concurrency APIs. How do you know which API to use in your project?\n\nby @SuperFastPython \n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557108989925773316",
            "tweet_type": "Others",
            "created_at": "2022-08-09T20:58:07.000Z"
        },
        {
            "id": 970,
            "username": "alexxubyte",
            "tweet_id": "1557123285560635392",
            "tweet_text": "Updated design diagram based on feedback. https://t.co/fpfKGSvbgW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZwDXAWUcAIHTVG.jpg\"]",
            "tweet_conversation_id": "1557026443435003904",
            "tweet_type": "Others",
            "created_at": "2022-08-09T21:54:55.000Z"
        },
        {
            "id": 1692,
            "username": "testdrivenio",
            "tweet_id": "1557375408311619586",
            "tweet_text": "Integrating Mailchimp with Django \n\nhttps://t.co/zCZJk8YiKI \n\nIntegrate Mailchimp with Django for newsletters and transactional emails.\n\n#Django #AWS @Mailchimp_API",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557375408311619586",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:36:46.000Z"
        },
        {
            "id": 969,
            "username": "alexxubyte",
            "tweet_id": "1557392597395443712",
            "tweet_text": "/1 Why is single-threaded Redis so fast?\n\nThere are 3 main reasons, as shown in the diagram below.\n\nIf you prefer video, you can watch our YouTube video here \u21e9\n\nhttps://t.co/7znVk7kHLw\n\nIf you prefer text, keep reading: https://t.co/Mbxe0p1SMC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZz4T4UUEAEyWw6.jpg\"]",
            "tweet_conversation_id": "1557392597395443712",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-10T15:45:04.000Z"
        },
        {
            "id": 968,
            "username": "alexxubyte",
            "tweet_id": "1557392601703018496",
            "tweet_text": "/2 1. Redis is a RAM-based database. RAM access is at least 1,000 times faster than random disk access.\n\n2. Redis leverages IO multiplexing and single-threaded execution loop for execution efficiency.\n\n3. Redis leverages several efficient lower-level data structures.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557392597395443712",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-10T15:45:05.000Z"
        },
        {
            "id": 967,
            "username": "alexxubyte",
            "tweet_id": "1557392604337016834",
            "tweet_text": "/3 Over to you: Another popular in-memory store is Memcached. Do you know the differences between Redis and Memcached?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557392597395443712",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-10T15:45:06.000Z"
        },
        {
            "id": 966,
            "username": "alexxubyte",
            "tweet_id": "1557392606836846598",
            "tweet_text": "/4 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/o30SMEA98T",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557392597395443712",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-10T15:45:07.000Z"
        },
        {
            "id": 1691,
            "username": "testdrivenio",
            "tweet_id": "1557403903482032129",
            "tweet_text": "Did you know? \ud83e\uddf5\n\nThe Zen of Python is a collection of 19 \"guiding principles\" for writing Python.\nIt's actually a part of Python standard library, you can find it in `https://t.co/dsyXeOpePT` file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557403903482032129",
            "tweet_type": "Others",
            "created_at": "2022-08-10T16:30:00.000Z"
        },
        {
            "id": 1690,
            "username": "testdrivenio",
            "tweet_id": "1557403909726998535",
            "tweet_text": "If you inspect the 'https://t.co/dsyXeO75BL' file, you'll notice it's gibrish.\n\n That's because the creators used rot13, meaning each letter is shifted for 13 places.  Here's how a part of that gibrish in `https://t.co/HWxFg5ysPG` looks like: https://t.co/SR1blVSF4f",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ0CmesUUAASbMJ.png\"]",
            "tweet_conversation_id": "1557403903482032129",
            "tweet_type": "Others",
            "created_at": "2022-08-10T16:30:01.000Z"
        },
        {
            "id": 1689,
            "username": "testdrivenio",
            "tweet_id": "1557403912323612672",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557403903482032129",
            "tweet_type": "Others",
            "created_at": "2022-08-10T16:30:02.000Z"
        },
        {
            "id": 965,
            "username": "alexxubyte",
            "tweet_id": "1557477171626532864",
            "tweet_text": "Enjoy this thread?\n\nYou might like our \"Algorithms You Should Know Video Series For System Design\":\n\nhttps://t.co/4fRz617p3u",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557392597395443712",
            "tweet_type": "Others",
            "created_at": "2022-08-10T21:21:08.000Z"
        },
        {
            "id": 964,
            "username": "alexxubyte",
            "tweet_id": "1557514131044831232",
            "tweet_text": "Do you prefer video-based or text-based technical content?\n \nWhy is single-threaded Redis (@Redisinc) fast explained in 3 minutes (by @sahnlam).\n \nIf you enjoyed this video, you might like our System Design YouTube channel as well. Subscribe here: https://t.co/tbxD2f7FLB https://t.co/cqXCbukw9S",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1557513664814411776/pu/vid/1920x1080/PCZiaJgerxMzl_7E.mp4?tag=14\"]",
            "tweet_conversation_id": "1557514131044831232",
            "tweet_type": "Others",
            "created_at": "2022-08-10T23:48:00.000Z"
        },
        {
            "id": 1688,
            "username": "testdrivenio",
            "tweet_id": "1557717338119700481",
            "tweet_text": "HTML Over WebSockets \n\nhttps://t.co/N36WKzjAAt \n\nThis article looks at a new approach for achieving a Single-page Application (SPA) -- HTML over WebSockets.\n\nby @androsfenollosa\n \n#WebDev #WebSockets #Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557717338119700481",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:15:29.000Z"
        },
        {
            "id": 963,
            "username": "alexxubyte",
            "tweet_id": "1557758639946887170",
            "tweet_text": "/1 Why is the credit card called \u201c\ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc26\ud835\udc28\ud835\udc2c\ud835\udc2d \ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc1f\ud835\udc22\ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e product in banks\u201d? How does VISA/Mastercard make money?\n\nThe diagram below shows the economics of the credit card payment flow.\n\n1. The cardholder pays a merchant $100 to buy a product. https://t.co/RjFKhoV7P6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ5FOZxUcAALPcU.jpg\"]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:36.000Z"
        },
        {
            "id": 962,
            "username": "alexxubyte",
            "tweet_id": "1557758649434456064",
            "tweet_text": "/2 2. The merchant benefits from the use of the credit card with higher sales volume and needs to compensate the issuer and the card network for providing the payment service. The acquiring bank sets a fee with the merchant, called the \u201c\ud835\udc26\ud835\udc1e\ud835\udc2b\ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc27\ud835\udc2d \ud835\udc1d\ud835\udc22\ud835\udc2c\ud835\udc1c\ud835\udc28\ud835\udc2e\ud835\udc27\ud835\udc2d \ud835\udc1f\ud835\udc1e\ud835\udc1e.\u201d https://t.co/GW73tIJkcB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ5FO3mUUAEhsTE.jpg\"]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:38.000Z"
        },
        {
            "id": 961,
            "username": "alexxubyte",
            "tweet_id": "1557758659165270017",
            "tweet_text": "/3 3 - 4. The acquiring bank keeps $0.25 as the \ud835\udc1a\ud835\udc1c\ud835\udc2a\ud835\udc2e\ud835\udc22\ud835\udc2b\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc26\ud835\udc1a\ud835\udc2b\ud835\udc24\ud835\udc2e\ud835\udc29, and $1.75 is paid to the issuing bank as the \ud835\udc22\ud835\udc27\ud835\udc2d\ud835\udc1e\ud835\udc2b\ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc27\ud835\udc20\ud835\udc1e \ud835\udc1f\ud835\udc1e\ud835\udc1e. The merchant discount fee should cover the interchange fee. https://t.co/4ZbkdNpxR5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ5FPb9VUAAll1O.jpg\"]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:40.000Z"
        },
        {
            "id": 960,
            "username": "alexxubyte",
            "tweet_id": "1557758662856216576",
            "tweet_text": "/4 The interchange fee is set by the card network because it is less efficient for each issuing bank to negotiate fees with each merchant.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:41.000Z"
        },
        {
            "id": 959,
            "username": "alexxubyte",
            "tweet_id": "1557758670376615937",
            "tweet_text": "/5 5. The card network sets up the \ud835\udc27\ud835\udc1e\ud835\udc2d\ud835\udc30\ud835\udc28\ud835\udc2b\ud835\udc24 \ud835\udc1a\ud835\udc2c\ud835\udc2c\ud835\udc1e\ud835\udc2c\ud835\udc2c\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\ud835\udc2c \ud835\udc1a\ud835\udc27\ud835\udc1d \ud835\udc1f\ud835\udc1e\ud835\udc1e\ud835\udc2c with each bank, which pays the card network for its services every month. For example, VISA charges a 0.11% assessment, plus a $0.0195 usage fee, for every swipe. https://t.co/pwbL9kpqBn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ5FQHAVUAAIs3N.jpg\"]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:43.000Z"
        },
        {
            "id": 958,
            "username": "alexxubyte",
            "tweet_id": "1557758679952134145",
            "tweet_text": "/6 6. The cardholder pays the issuing bank for its services.\n\nWhy should the issuing bank be compensated?\n\n\ud83d\udd39The issuer pays the merchant even if the cardholder fails to pay the issuer.\n\n\ud83d\udd39The issuer pays the merchant before the cardholder pays the issuer. https://t.co/jhH4eG8euV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ5FQn4UYAAFjW4.jpg\"]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:45.000Z"
        },
        {
            "id": 957,
            "username": "alexxubyte",
            "tweet_id": "1557758684033216512",
            "tweet_text": "/7 \ud83d\udd39The issuer has other operating costs, including managing customer accounts, providing statements, fraud detection, risk management, clearing &amp; settlement, etc.\n\nOver to you: Does the card network charge the same interchange fee for big merchants as for small merchants?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:46.000Z"
        },
        {
            "id": 956,
            "username": "alexxubyte",
            "tweet_id": "1557758686709223424",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/0yKY96k5ms",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-11T15:59:47.000Z"
        },
        {
            "id": 1687,
            "username": "testdrivenio",
            "tweet_id": "1557766302361853953",
            "tweet_text": "Did you know?\n\nTo get Zen of Python in your code, you can import it with `import this`.\n\nHere's the whole Zen of Python \ud83d\udc47 https://t.co/G8lujKFlye",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ5MMa2aAAAzF9T.png\"]",
            "tweet_conversation_id": "1557766302361853953",
            "tweet_type": "Others",
            "created_at": "2022-08-11T16:30:03.000Z"
        },
        {
            "id": 1686,
            "username": "testdrivenio",
            "tweet_id": "1557766304798756864",
            "tweet_text": "source: https://t.co/ua70uAHLAw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557766302361853953",
            "tweet_type": "Others",
            "created_at": "2022-08-11T16:30:03.000Z"
        },
        {
            "id": 1685,
            "username": "testdrivenio",
            "tweet_id": "1557766305931206656",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557766302361853953",
            "tweet_type": "Others",
            "created_at": "2022-08-11T16:30:03.000Z"
        },
        {
            "id": 955,
            "username": "alexxubyte",
            "tweet_id": "1557791365592805377",
            "tweet_text": "Just posted something named \"Algorithms you should know before you take system design interviews\" on hacker news: https://t.co/mo4bNHgwU8\n\nI've new to the platform. Can anyone share some tips? Thank you.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557791365592805377",
            "tweet_type": "Others",
            "created_at": "2022-08-11T18:09:38.000Z"
        },
        {
            "id": 954,
            "username": "alexxubyte",
            "tweet_id": "1557794043152633856",
            "tweet_text": "Enjoy this thread?\n\nYou might like our weekly system design newsletter as well. \n\nSubscribe here: https://t.co/0RYwcKv26q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557758639946887170",
            "tweet_type": "Others",
            "created_at": "2022-08-11T18:20:16.000Z"
        },
        {
            "id": 953,
            "username": "alexxubyte",
            "tweet_id": "1557906330274258944",
            "tweet_text": "My hacker news post titled \"Algorithms you should know before you take system design interviews\" showed up on the front page of hacker news. \n\nThank you to those who helped on Twitter!\n\nLink: https://t.co/lrzRJuc0GO https://t.co/r3MndCSjoG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ7LEEyUUAAVHA1.jpg\"]",
            "tweet_conversation_id": "1557906330274258944",
            "tweet_type": "Others",
            "created_at": "2022-08-12T01:46:28.000Z"
        },
        {
            "id": 952,
            "username": "alexxubyte",
            "tweet_id": "1557913788967292928",
            "tweet_text": "Not sure why it is no longer there but here is the post: https://t.co/hXAqAXaLQP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557906330274258944",
            "tweet_type": "Others",
            "created_at": "2022-08-12T02:16:06.000Z"
        },
        {
            "id": 1684,
            "username": "testdrivenio",
            "tweet_id": "1558079597043908609",
            "tweet_text": "What is Werkzeug? \n\nhttps://t.co/wh6YD7MlYC \n\nby @patkennedy79\n\nLearn what Werkzeug is and how Flask uses it for its core HTTP functionality.\n\n#Flask #Python @PalletsTeam",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558079597043908609",
            "tweet_type": "Others",
            "created_at": "2022-08-12T13:14:58.000Z"
        },
        {
            "id": 951,
            "username": "alexxubyte",
            "tweet_id": "1558112813024833536",
            "tweet_text": "A picture is worth a thousand words. \ud835\udc03\ud835\udc1e\ud835\udc1b\ud835\udc2e\ud835\udc20\ud835\udc20\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc2d\ud835\udc1a\ud835\udc1c\ud835\udc2d\ud835\udc22\ud835\udc1c\ud835\udc2c!\n\nWhat\u2019s your favorite debugging tactic? Anything missing?\n\nSubscribe to our weekly newsletter to read 100+ \ud835\udc2d\ud835\udc1e\ud835\udc1c\ud835\udc21\ud835\udc27\ud835\udc22\ud835\udc1c\ud835\udc1a\ud835\udc25 \ud835\udc29\ud835\udc28\ud835\udc2c\ud835\udc2d\ud835\udc2c in one place: https://t.co/PczMAd8Jdb https://t.co/we8CjbDXJ9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ-G0mkUIAET7MJ.jpg\"]",
            "tweet_conversation_id": "1558112813024833536",
            "tweet_type": "Others",
            "created_at": "2022-08-12T15:26:57.000Z"
        },
        {
            "id": 1683,
            "username": "testdrivenio",
            "tweet_id": "1558128690080260097",
            "tweet_text": "Python tip:\n\nSet is one of four built-in data structures that can be used to hold a collection of objects.\n\nSet doesn't allow duplicated objects.\n\nIt doesn't preserve the order of the objects, meaning you can't refer to them with an index, and order of the set may vary each time. https://t.co/6MrfzWMX4n",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ-VyPBaUAUyaDk.png\"]",
            "tweet_conversation_id": "1558128690080260097",
            "tweet_type": "Python tips",
            "created_at": "2022-08-12T16:30:03.000Z"
        },
        {
            "id": 1682,
            "username": "testdrivenio",
            "tweet_id": "1558128692341403658",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558128690080260097",
            "tweet_type": "Others",
            "created_at": "2022-08-12T16:30:03.000Z"
        },
        {
            "id": 1681,
            "username": "testdrivenio",
            "tweet_id": "1558442204594671616",
            "tweet_text": "Effectively Using Django REST Framework Serializers\n\nA look at how to use Django REST Framework (DRF) serializers more efficiently and effectively by example.\n\nhttps://t.co/Ito1BfMQAm\n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558442204594671616",
            "tweet_type": "Others",
            "created_at": "2022-08-13T13:15:50.000Z"
        },
        {
            "id": 950,
            "username": "alexxubyte",
            "tweet_id": "1558476977262104576",
            "tweet_text": "Newsletter-only bonus content is out: VISA vs American Express\n\nSubscribe now to read it:\nhttps://t.co/PczMAd8Jdb\n\nNext week:\n\n\u203a DynamoDB paper\n\u203a The life of an SQL statement\n\u203a How to diagnose slow SQLs\n\u203a HTTP/1-&gt;HTTP/2-&gt;HTTP/3 (YouTube video)\n\u203a System Design Interview Tips https://t.co/TjlNub43jO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaDSjJ6UcAAT9Kz.jpg\"]",
            "tweet_conversation_id": "1558476977262104576",
            "tweet_type": "Others",
            "created_at": "2022-08-13T15:34:01.000Z"
        },
        {
            "id": 1680,
            "username": "testdrivenio",
            "tweet_id": "1558491073458339840",
            "tweet_text": "Python tip:\n\nTo find which elements are most common in an iterable, you can use 'Counter.most_common'.\n\nThe counter returns a list of tuples, and each tuple contains the element and the element count. https://t.co/5HcUnHcvsk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaDfXunaMAAYPgs.png\"]",
            "tweet_conversation_id": "1558491073458339840",
            "tweet_type": "Python tips",
            "created_at": "2022-08-13T16:30:01.000Z"
        },
        {
            "id": 1679,
            "username": "testdrivenio",
            "tweet_id": "1558491075777466368",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558491073458339840",
            "tweet_type": "Others",
            "created_at": "2022-08-13T16:30:02.000Z"
        },
        {
            "id": 1678,
            "username": "testdrivenio",
            "tweet_id": "1558853462271864832",
            "tweet_text": "Python tip:\n\nYou can use Counter to subtract the contents of one iterable from the other.\n\nThe result will be a dictionary with keys from both iterables, with values first_value - second_value. https://t.co/EH5BO5YZ8s",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaIo9f0VUAE9l-w.png\"]",
            "tweet_conversation_id": "1558853462271864832",
            "tweet_type": "Python tips",
            "created_at": "2022-08-14T16:30:02.000Z"
        },
        {
            "id": 1677,
            "username": "testdrivenio",
            "tweet_id": "1558853464557400064",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558853462271864832",
            "tweet_type": "Others",
            "created_at": "2022-08-14T16:30:02.000Z"
        },
        {
            "id": 1676,
            "username": "testdrivenio",
            "tweet_id": "1558942468208484354",
            "tweet_text": "Server-side Sessions in Flask \n\nhttps://t.co/GpAdnWM5dU \n\nLooks at how server-side sessions can be used in Flask with Flask-Session and Redis.\n\nby @patkennedy79\n\n#Flask #Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558942468208484354",
            "tweet_type": "Others",
            "created_at": "2022-08-14T22:23:42.000Z"
        },
        {
            "id": 1675,
            "username": "testdrivenio",
            "tweet_id": "1559171770292310016",
            "tweet_text": "Distributed Testing with Selenium Grid and Docker\n\nhttps://t.co/6jD05VuD8u\n\nLooks at how to distribute automated tests across a number of machines with Selenium Grid to a Docker Swarm Cluster on DigitalOcean.\n\n#Docker #Selenium @DigitalOcean",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559171770292310016",
            "tweet_type": "Others",
            "created_at": "2022-08-15T13:34:52.000Z"
        },
        {
            "id": 949,
            "username": "alexxubyte",
            "tweet_id": "1559204532545921024",
            "tweet_text": "/1 Amazon DynamoDB powered 89 million requests per second during prime days. How does it do that? \n\nThe diagrams below are my attempt to draw the latest architecture of DynamoDB based on the 2022 paper. Please leave a comment if you spot any mistakes. \n\nA thread.\ud83d\udc47 https://t.co/NgEg0ZKWBq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaNoQiSUEAAdNBE.jpg\"]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-15T15:45:03.000Z"
        },
        {
            "id": 948,
            "username": "alexxubyte",
            "tweet_id": "1559204540343209985",
            "tweet_text": "/2 Multi-Paxos group https://t.co/KkFj8UeyXB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaNoQ3kVUAEt2kj.jpg\"]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-15T15:45:05.000Z"
        },
        {
            "id": 947,
            "username": "alexxubyte",
            "tweet_id": "1559204547850936320",
            "tweet_text": "/3 Write-ahead log &amp; B-tree https://t.co/qakA4iFAYH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaNoRTlVsAYvD53.jpg\"]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-15T15:45:07.000Z"
        },
        {
            "id": 946,
            "username": "alexxubyte",
            "tweet_id": "1559204555182616578",
            "tweet_text": "/4 Periodic archive https://t.co/3OQ8X89dIm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaNoRvkVEAAGGqx.jpg\"]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-15T15:45:09.000Z"
        },
        {
            "id": 945,
            "username": "alexxubyte",
            "tweet_id": "1559204562610688000",
            "tweet_text": "/5 Dependencies on external service https://t.co/hjdHx9qYDf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaNoSKgVUAEBfoz.jpg\"]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-15T15:45:11.000Z"
        },
        {
            "id": 944,
            "username": "alexxubyte",
            "tweet_id": "1559204565873860609",
            "tweet_text": "/6 Other good reads:\nDynamoDB 2022 paper: https://t.co/VNEAretAzk\n\nKey Takeaways from the DynamoDB Paper by @alexbdebrie: https://t.co/CVoNN8HhBz\n\nSome notes on DynamoDB 2022 paper by @dxhuang: http://_.0xffff.me/dynamodb2022.html",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-15T15:45:11.000Z"
        },
        {
            "id": 943,
            "username": "alexxubyte",
            "tweet_id": "1559204568541454336",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/NTMv3b7Ekm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-15T15:45:12.000Z"
        },
        {
            "id": 1674,
            "username": "testdrivenio",
            "tweet_id": "1559215850070343680",
            "tweet_text": "Python tip:\n\nYou can compute sum of the counts in Counter with total(). https://t.co/0rVV3wwsfV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaNyjRxVEAAHJtz.png\"]",
            "tweet_conversation_id": "1559215850070343680",
            "tweet_type": "Python tips",
            "created_at": "2022-08-15T16:30:02.000Z"
        },
        {
            "id": 1673,
            "username": "testdrivenio",
            "tweet_id": "1559215852171710465",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559215850070343680",
            "tweet_type": "Others",
            "created_at": "2022-08-15T16:30:02.000Z"
        },
        {
            "id": 942,
            "username": "alexxubyte",
            "tweet_id": "1559278787979685890",
            "tweet_text": "Enjoy this thread?\n\nYou might like our weekly system design newsletter as well. \n\nSubscribe here: https://t.co/ikUSzBLPZd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559204532545921024",
            "tweet_type": "Others",
            "created_at": "2022-08-15T20:40:07.000Z"
        },
        {
            "id": 1672,
            "username": "testdrivenio",
            "tweet_id": "1559530263457193984",
            "tweet_text": "Running Spark with Docker Swarm on DigitalOcean\n\nhttps://t.co/XYVAgoHJ3y\n\nLooks at how to deploy Apache Spark, an open-source cluster computing framework for large-scale data processing, to a Docker Swarm Cluster on DigitalOcean.\n\n#Docker #Spark @DigitalOcean",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559530263457193984",
            "tweet_type": "Others",
            "created_at": "2022-08-16T13:19:24.000Z"
        },
        {
            "id": 941,
            "username": "alexxubyte",
            "tweet_id": "1559566919585259520",
            "tweet_text": "How is a SQL statement executed in the database?\n\nThe diagram below shows the process. Note that the architectures for different databases are different, the diagram demonstrates some common designs. https://t.co/mflvuS0ZQX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaSx2MtUsAEEM4g.jpg\"]",
            "tweet_conversation_id": "1559566919585259520",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:45:03.000Z"
        },
        {
            "id": 940,
            "username": "alexxubyte",
            "tweet_id": "1559566935586525184",
            "tweet_text": "Step 3 - The query tree is sent to the optimizer. The optimizer creates an execution plan.\n\nStep 4 - The execution plan is sent to the executor. The executor retrieves data from the execution.\n\nStep 5 - Access methods provide the data fetching logic required for execution https://t.co/ulEqCVnMec",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaSx3CRVUAAhWML.jpg\"]",
            "tweet_conversation_id": "1559566919585259520",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:45:07.000Z"
        },
        {
            "id": 939,
            "username": "alexxubyte",
            "tweet_id": "1559566943044063232",
            "tweet_text": "Step 6 - Access methods decide whether the SQL statement is read-only. If the query is read-only (SELECT statement), it is passed to the buffer manager for further processing. The buffer manager looks for the data in the cache or data files. https://t.co/utC1o5AApg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaSx3eWVUAAEY2W.jpg\"]",
            "tweet_conversation_id": "1559566919585259520",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:45:09.000Z"
        },
        {
            "id": 938,
            "username": "alexxubyte",
            "tweet_id": "1559566950505672704",
            "tweet_text": "Step 7 - If the statement is an UPDATE or INSERT, it is passed to the transaction manager for further processing.\n\nStep 8 - During a transaction, the data is in lock mode. This is guaranteed by the lock manager. It also ensures the transaction\u2019s ACID properties. https://t.co/XIFrOniYnA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaSx36GUUAAQ1KV.jpg\"]",
            "tweet_conversation_id": "1559566919585259520",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:45:11.000Z"
        },
        {
            "id": 937,
            "username": "alexxubyte",
            "tweet_id": "1559566953894649856",
            "tweet_text": "\ud83d\udc49 Over to you - Which component manages the actual data files? Are there anything important components missing from the diagram?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559566919585259520",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:45:11.000Z"
        },
        {
            "id": 936,
            "username": "alexxubyte",
            "tweet_id": "1559566956658692098",
            "tweet_text": "I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/B3o3Pljd00",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559566919585259520",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:45:12.000Z"
        },
        {
            "id": 1671,
            "username": "testdrivenio",
            "tweet_id": "1559578237285826562",
            "tweet_text": "Python tip:\n\nIn Python, individual values can evaluate as either True or False.\nValues that evaluate to True are \"Truthy\", and values that evaluate to False are \"Falsy\".\n\nBy default, object is considered Truthy, unless its __bool__() method returns False or __len__() returns 0 \ud83d\udc47 https://t.co/tUvS4yK1gY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaS8I_VagAASzME.png\"]",
            "tweet_conversation_id": "1559578237285826562",
            "tweet_type": "Python tips",
            "created_at": "2022-08-16T16:30:01.000Z"
        },
        {
            "id": 1670,
            "username": "testdrivenio",
            "tweet_id": "1559578239827595269",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559578237285826562",
            "tweet_type": "Others",
            "created_at": "2022-08-16T16:30:02.000Z"
        },
        {
            "id": 935,
            "username": "alexxubyte",
            "tweet_id": "1559745822102679552",
            "tweet_text": "Just created an Instagram account. If you want to see technical posts popping out on your feed, follow me there \ud83d\ude03 : https://t.co/voQk746Lkk https://t.co/gCw9VBSe4R",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaVUSzSUsAEgQYX.jpg\"]",
            "tweet_conversation_id": "1559745822102679552",
            "tweet_type": "Others",
            "created_at": "2022-08-17T03:35:57.000Z"
        },
        {
            "id": 1669,
            "username": "testdrivenio",
            "tweet_id": "1559893518226755585",
            "tweet_text": "Serving Static Files from Flask with WhiteNoise and Amazon CloudFront \n\nhttps://t.co/lzsM81Rymb \n\nLooks at how to manage static files with Flask and WhiteNoise. You'll also configure Amazon CloudFront to get the best possible performance.\n\n#Python #Flask #AWS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559893518226755585",
            "tweet_type": "Others",
            "created_at": "2022-08-17T13:22:50.000Z"
        },
        {
            "id": 934,
            "username": "alexxubyte",
            "tweet_id": "1559929312828043265",
            "tweet_text": "How does Netflix scale push messaging for millions of devices?\n\nThis post draws from an article published on Netflix\u2019s engineering blog. Here\u2019s my understanding of how the online streaming giant\u2019s system works. https://t.co/NMa4QofifR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaX7cIvVUAEhzMk.jpg\"]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Others",
            "created_at": "2022-08-17T15:45:04.000Z"
        },
        {
            "id": 933,
            "username": "alexxubyte",
            "tweet_id": "1559929316468613121",
            "tweet_text": "\ud835\udc11\ud835\udc1e\ud835\udc2a\ud835\udc2e\ud835\udc22\ud835\udc2b\ud835\udc1e\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\ud835\udc2c &amp; \ud835\udc2c\ud835\udc1c\ud835\udc1a\ud835\udc25\ud835\udc1e\n- 220 million users\n- Near real-time\n- Backend systems need to send notifications to various clients\n- Supported clients: iOS, Android, smart TVs, Roku, Amazon FireStick, web browser",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Others",
            "created_at": "2022-08-17T15:45:05.000Z"
        },
        {
            "id": 932,
            "username": "alexxubyte",
            "tweet_id": "1559929325322788864",
            "tweet_text": "\ud835\udc13\ud835\udc21\ud835\udc1e \ud835\udc25\ud835\udc22\ud835\udc1f\ud835\udc1e \ud835\udc28\ud835\udc1f \ud835\udc1a \ud835\udc29\ud835\udc2e\ud835\udc2c\ud835\udc21 \ud835\udc27\ud835\udc28\ud835\udc2d\ud835\udc22\ud835\udc1f\ud835\udc22\ud835\udc1c\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\n1. Push notification events are triggered by the clock, user actions, or by systems.\n\n2. Events are sent to the event management engine. https://t.co/Nsf3tKuXos",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaX7czeVEAE9ub9.jpg\"]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-17T15:45:07.000Z"
        },
        {
            "id": 931,
            "username": "alexxubyte",
            "tweet_id": "1559929335787573253",
            "tweet_text": "3. The event management engine listens to specific events and forward events to different queues. The queues are populated by priority-based event forwarding rules\n\n4. The \u201cevent priority-based processing cluster\u201d processes events and generates push notifications data for devices https://t.co/ZKHufe2ITN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaX7dXCUsAAhTkU.jpg\"]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-17T15:45:10.000Z"
        },
        {
            "id": 930,
            "username": "alexxubyte",
            "tweet_id": "1559929345879052290",
            "tweet_text": "5. A Cassandra database is used to store the notification data.\n\n6. A push notification is sent to outbound messaging systems. https://t.co/emPrEznblm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaX7d94VsAEs7vE.jpg\"]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-17T15:45:12.000Z"
        },
        {
            "id": 929,
            "username": "alexxubyte",
            "tweet_id": "1559929355869925376",
            "tweet_text": "7. For Android, FCM is used to send push notifications. For Apple devices, APNs are used. For web, TV, and other streaming devices, Netflix\u2019s homegrown solution called \u2018Zuul Push\u2019 is used. https://t.co/ans9mwG3Jk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaX7ejoUcAA579Q.jpg\"]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-17T15:45:15.000Z"
        },
        {
            "id": 928,
            "username": "alexxubyte",
            "tweet_id": "1559929359909019648",
            "tweet_text": "Over to you: if you wanted to support every kind of device, which delivery model would work better, push or pull-based notifications?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Others",
            "created_at": "2022-08-17T15:45:16.000Z"
        },
        {
            "id": 927,
            "username": "alexxubyte",
            "tweet_id": "1559929362324996096",
            "tweet_text": "Subscribe to our weekly newsletter to learn something new every week \u21e9:\n\nhttps://t.co/PczMAd8Jdb\n\n#systemdesign #coding #interviewtips",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Others",
            "created_at": "2022-08-17T15:45:16.000Z"
        },
        {
            "id": 1668,
            "username": "testdrivenio",
            "tweet_id": "1559940623905730561",
            "tweet_text": "Python tip:\n\nYou can use any() to check if any element in iterable is True. https://t.co/zZFDb8j6Ab",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaYFuobaQAA6NzX.png\"]",
            "tweet_conversation_id": "1559940623905730561",
            "tweet_type": "Python tips",
            "created_at": "2022-08-17T16:30:01.000Z"
        },
        {
            "id": 1667,
            "username": "testdrivenio",
            "tweet_id": "1559940625939976194",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559940623905730561",
            "tweet_type": "Others",
            "created_at": "2022-08-17T16:30:02.000Z"
        },
        {
            "id": 926,
            "username": "alexxubyte",
            "tweet_id": "1560040085080264704",
            "tweet_text": "Link: https://t.co/mPdxCVdhJE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559929312828043265",
            "tweet_type": "Others",
            "created_at": "2022-08-17T23:05:15.000Z"
        },
        {
            "id": 1666,
            "username": "testdrivenio",
            "tweet_id": "1560259951683158016",
            "tweet_text": "Running Flask on Docker Swarm \n\nhttps://t.co/PnbV6PrG7u \n\nLooks at how to spin up a Docker Swarm cluster on DigitalOcean and then configure a microservice, powered by Flask and Postgres, to run on it.\n\n#Python #Flask #Docker @DigitalOcean",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560259951683158016",
            "tweet_type": "Others",
            "created_at": "2022-08-18T13:38:55.000Z"
        },
        {
            "id": 925,
            "username": "alexxubyte",
            "tweet_id": "1560293181333184512",
            "tweet_text": "Evolution of HTTP protocols. HTTP/1 -&gt; HTTP/2 -&gt; HTTP/3.\n \nIf you enjoyed this video, you might like our System Design YouTube channel as well. Subscribe here: \nhttps://t.co/oPIDCncw3Y https://t.co/EV2toM2whM",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1560292735290003456/pu/vid/1920x1080/48ZTTatwumPJRaEC.mp4?tag=14\"]",
            "tweet_conversation_id": "1560293181333184512",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-18T15:50:57.000Z"
        },
        {
            "id": 1665,
            "username": "testdrivenio",
            "tweet_id": "1560303012286935040",
            "tweet_text": "Python tip:\n\nYou can use all() to check if all elements in iterable are True. https://t.co/WcZNu0qerH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FadPUbBaAAYTJN8.png\"]",
            "tweet_conversation_id": "1560303012286935040",
            "tweet_type": "Python tips",
            "created_at": "2022-08-18T16:30:01.000Z"
        },
        {
            "id": 1664,
            "username": "testdrivenio",
            "tweet_id": "1560303014392446976",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560303012286935040",
            "tweet_type": "Others",
            "created_at": "2022-08-18T16:30:02.000Z"
        },
        {
            "id": 1663,
            "username": "testdrivenio",
            "tweet_id": "1560615253817303043",
            "tweet_text": "Adding Charts to Django with Chart.js\n\nhttps://t.co/mimQwk4PYC \n\nLooks at how to add interactive charts to Django with Chart.js.\n\n#Django #JavaScript #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560615253817303043",
            "tweet_type": "Others",
            "created_at": "2022-08-19T13:10:45.000Z"
        },
        {
            "id": 924,
            "username": "alexxubyte",
            "tweet_id": "1560642328259219457",
            "tweet_text": "What is an API. By @Rapid_API \n \nWe are working on a video about RESTful API:\n\ud83d\udd39 What is it\n\ud83d\udd39 Why is it so popular\n\ud83d\udd39 What are the best practices\n \nSubscribe to our channels so you won\u2019t miss it\n\nNewsletter:\nhttps://t.co/dkjDPxrTOt\n \nYouTube channel:\nhttps://t.co/oPIDCncw3Y https://t.co/n5CxaSjkW4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaiDYWBUEAARdQc.jpg\"]",
            "tweet_conversation_id": "1560642328259219457",
            "tweet_type": "Others",
            "created_at": "2022-08-19T14:58:21.000Z"
        },
        {
            "id": 1662,
            "username": "testdrivenio",
            "tweet_id": "1560665403176628225",
            "tweet_text": "Python tip:\n\nYou can write an if-else inside the print statement.\n(It must include else). https://t.co/9HZMXatmlM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaiY6TEaUAAFwaz.png\"]",
            "tweet_conversation_id": "1560665403176628225",
            "tweet_type": "Python tips",
            "created_at": "2022-08-19T16:30:02.000Z"
        },
        {
            "id": 923,
            "username": "alexxubyte",
            "tweet_id": "1561013567377121281",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39Is HTTPS safe?\n\ud83d\udd39eCommerce end-to-end workflow\n\ud83d\udd39Latency numbers\n\ud83d\udd39Understand your credit card\n\ud83d\udd39SQL tips\n\nSubscribe here:\nhttps://t.co/PczMAd8Jdb https://t.co/2CtUEYJK61",
            "tweet_media": "[\"https://pbs.twimg.com/media/FanVkMgUsAI6x2p.jpg\"]",
            "tweet_conversation_id": "1561013567377121281",
            "tweet_type": "Others",
            "created_at": "2022-08-20T15:33:31.000Z"
        },
        {
            "id": 1661,
            "username": "testdrivenio",
            "tweet_id": "1561027788110303232",
            "tweet_text": "Flask Tip - Sessions\n\nBy default, the `session` object in Flask remains in place until the browser is closed.\n\ud83e\uddf5\ud83d\udc47 https://t.co/QDWjJOfjya",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fanif9BVsAEKM1U.png\"]",
            "tweet_conversation_id": "1561027788110303232",
            "tweet_type": "Others",
            "created_at": "2022-08-20T16:30:01.000Z"
        },
        {
            "id": 1660,
            "username": "testdrivenio",
            "tweet_id": "1561027790484680705",
            "tweet_text": "However, if you want to change the life of the session object, define the PERMANENT_SESSION_LIFETIME configuration variable after creating the Flask app.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561027788110303232",
            "tweet_type": "Others",
            "created_at": "2022-08-20T16:30:02.000Z"
        },
        {
            "id": 1659,
            "username": "testdrivenio",
            "tweet_id": "1561027791570993152",
            "tweet_text": "When setting the data in the session, specify that the sessions should be permanent (time will be based on PERMANENT_SESSION_LIFETIME).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561027788110303232",
            "tweet_type": "Others",
            "created_at": "2022-08-20T16:30:02.000Z"
        },
        {
            "id": 1658,
            "username": "testdrivenio",
            "tweet_id": "1561027792627675137",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561027788110303232",
            "tweet_type": "Others",
            "created_at": "2022-08-20T16:30:02.000Z"
        },
        {
            "id": 1657,
            "username": "testdrivenio",
            "tweet_id": "1561353493839073280",
            "tweet_text": "Adding Social Authentication to Flask\n\nhttps://t.co/KGXYibTNcu\n\nLooks at how to add social auth, with GitHub and Twitter, to a Flask application with Flask-Dance.\n\nby @amal_ytics\n\n#Flask #Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561353493839073280",
            "tweet_type": "Others",
            "created_at": "2022-08-21T14:04:16.000Z"
        },
        {
            "id": 1656,
            "username": "testdrivenio",
            "tweet_id": "1561390168896335872",
            "tweet_text": "Flask Tip - Server-Side Sessions\n\nServer-side sessions store the data associated with the session on the **server** in a particular data storage solution.\n\n\ud83e\uddf5 \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561390168896335872",
            "tweet_type": "Others",
            "created_at": "2022-08-21T16:30:00.000Z"
        },
        {
            "id": 1655,
            "username": "testdrivenio",
            "tweet_id": "1561390170011684864",
            "tweet_text": "Pros:\n- Sensitive data is stored on the server, not in the web browser\n- Store as much session data as you want without worrying about the cookie size\n- Sessions can easily be terminated by the Flask app",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561390168896335872",
            "tweet_type": "Others",
            "created_at": "2022-08-21T16:30:00.000Z"
        },
        {
            "id": 1654,
            "username": "testdrivenio",
            "tweet_id": "1561390171131883520",
            "tweet_text": "Cons:\n- Difficult to set up and scale\n- Increased complexity since session state must be managed",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561390168896335872",
            "tweet_type": "Others",
            "created_at": "2022-08-21T16:30:00.000Z"
        },
        {
            "id": 1653,
            "username": "testdrivenio",
            "tweet_id": "1561390172184641536",
            "tweet_text": "You can find this and other tips here:\n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561390168896335872",
            "tweet_type": "Others",
            "created_at": "2022-08-21T16:30:00.000Z"
        },
        {
            "id": 1652,
            "username": "testdrivenio",
            "tweet_id": "1561700596503175170",
            "tweet_text": "Introduction to Machine Learning Reliability Engineering\n\nhttps://t.co/Hm57bz8UDf\n\nThis article looks at the roles and responsibilities of a Machine Learning Reliability Engineer (MLRE).\n\n#MachineLearning #MLOps",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561700596503175170",
            "tweet_type": "Others",
            "created_at": "2022-08-22T13:03:31.000Z"
        },
        {
            "id": 922,
            "username": "alexxubyte",
            "tweet_id": "1561734208422178816",
            "tweet_text": "/1 I\u2019ve been writing for over 3 years with two System Design books and recently a newsletter. To make it a sustainable business, I'd like to explore monetizing options for the newsletter (100k subs)\n\nI made a Sponsor Kit and would love to get:\n\n1. Potential sponsors\n\n2. Feedback https://t.co/8BCB0r9zbQ",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Faxk-ycVUAEZewI.mp4\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:05.000Z"
        },
        {
            "id": 921,
            "username": "alexxubyte",
            "tweet_id": "1561734218299846656",
            "tweet_text": "/2 ByteByteGo (https://t.co/l9vQPOVPU2) is a popular weekly newsletter, covering topics and trends in large-scale system design. https://t.co/oLKSSH7FHp",
            "tweet_media": "[\"https://pbs.twimg.com/media/Faxk_X7VEAM_WwP.jpg\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:07.000Z"
        },
        {
            "id": 920,
            "username": "alexxubyte",
            "tweet_id": "1561734228701696002",
            "tweet_text": "/3 Reach:\n100k+ subscribers\n90k - 120k views\n49.2% open rate https://t.co/rdyF6icB7H",
            "tweet_media": "[\"https://pbs.twimg.com/media/Faxk_9pUcAEv1D6.jpg\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:10.000Z"
        },
        {
            "id": 919,
            "username": "alexxubyte",
            "tweet_id": "1561734239581663232",
            "tweet_text": "/4 Subscribers from companies like: https://t.co/YBKtltAPI3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaxlAmuVEAAT1ih.jpg\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:12.000Z"
        },
        {
            "id": 918,
            "username": "alexxubyte",
            "tweet_id": "1561734248620388353",
            "tweet_text": "/5 Demographics: https://t.co/icqyyEeIEJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaxlBLtVUAYetkG.jpg\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:15.000Z"
        },
        {
            "id": 917,
            "username": "alexxubyte",
            "tweet_id": "1561734258665721856",
            "tweet_text": "/6 Engineering: 94%\nBachelor's degree: &gt;90% https://t.co/mQ46MNrNpZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaxlBuJVEAA7TDX.jpg\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:17.000Z"
        },
        {
            "id": 916,
            "username": "alexxubyte",
            "tweet_id": "1561734267570229248",
            "tweet_text": "/7 One ad slot is available each week.\n90k-120k views per email. https://t.co/fccRMvMhOt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaxlCTMVUAYNihT.jpg\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:19.000Z"
        },
        {
            "id": 915,
            "username": "alexxubyte",
            "tweet_id": "1561734275690418176",
            "tweet_text": "/8 Questions? Contact us at hi@bytebytego.com https://t.co/ilGMOxu9sk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaxlC0HUsAAgd8r.jpg\"]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:21.000Z"
        },
        {
            "id": 914,
            "username": "alexxubyte",
            "tweet_id": "1561734278936899585",
            "tweet_text": "/9 Greatly appreciate all the helpful advice and tips from @lennysan  @packyM @GergelyOrosz, and @Kantrowitz.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561734208422178816",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-22T15:17:22.000Z"
        },
        {
            "id": 1651,
            "username": "testdrivenio",
            "tweet_id": "1561752556807680000",
            "tweet_text": "Flask Tip\n\nHow do server-side sessions work with the Flask-Session extension?\n\n\ud83e\uddf5 \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561752556807680000",
            "tweet_type": "Others",
            "created_at": "2022-08-22T16:30:00.000Z"
        },
        {
            "id": 1650,
            "username": "testdrivenio",
            "tweet_id": "1561752557986656266",
            "tweet_text": "Flask-Session uses Flask's *Session Interface*, which provides a simple way to replace Flask's built-in session implementation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561752556807680000",
            "tweet_type": "Others",
            "created_at": "2022-08-22T16:30:00.000Z"
        },
        {
            "id": 1649,
            "username": "testdrivenio",
            "tweet_id": "1561752559013965824",
            "tweet_text": "You can continue to use the `session` object as you normally would with the built-in client-side session implementation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561752556807680000",
            "tweet_type": "Others",
            "created_at": "2022-08-22T16:30:00.000Z"
        },
        {
            "id": 1648,
            "username": "testdrivenio",
            "tweet_id": "1561752560125755392",
            "tweet_text": "Learn more in this post:\n\nhttps://t.co/GpAdnWMD3s",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561752556807680000",
            "tweet_type": "Others",
            "created_at": "2022-08-22T16:30:00.000Z"
        },
        {
            "id": 1647,
            "username": "testdrivenio",
            "tweet_id": "1561752561258213377",
            "tweet_text": "You can find this and other tips here:  https://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561752556807680000",
            "tweet_type": "Others",
            "created_at": "2022-08-22T16:30:01.000Z"
        },
        {
            "id": 1646,
            "username": "testdrivenio",
            "tweet_id": "1562066525120610304",
            "tweet_text": "Sessions in Flask \n\nhttps://t.co/SIQnBR2dtn \n\nShows how sessions work in Flask and looks at an example of storing a user's email address in the session object.\n\nby @patkennedy79\n\n#Flask #Python @PalletsTeam",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562066525120610304",
            "tweet_type": "Others",
            "created_at": "2022-08-23T13:17:36.000Z"
        },
        {
            "id": 913,
            "username": "alexxubyte",
            "tweet_id": "1562103641057607685",
            "tweet_text": "/1 Is HTTPS reliable?\n\nIf HTTPS is safe, how can tools like Fiddler capture network packets sent via HTTPS?\n\nThe diagram below shows a scenario where a malicious intermediate hijacks the packets. https://t.co/O6LjsW5e9Y",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa20-tQVQAkQMtG.jpg\"]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:05.000Z"
        },
        {
            "id": 912,
            "username": "alexxubyte",
            "tweet_id": "1562103650511507456",
            "tweet_text": "/2 Step 1 - The client requests to establish a TCP connection with the server. The request is maliciously routed to an intermediate server, instead of the real backend server. Then, a TCP connection is established between the client and the intermediate server. https://t.co/9s99s5twW7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa20_NpVQAAI8rM.jpg\"]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:07.000Z"
        },
        {
            "id": 911,
            "username": "alexxubyte",
            "tweet_id": "1562103658812059649",
            "tweet_text": "/3 Step 2 - The intermediate server establishes a TCP connection with the actual server.\n\nStep 3 - The intermediate server sends the SSL certificate to the client. The certificate contains the public key, hostname, expiry dates, etc. The client validates the certificate. https://t.co/ZKsht2ZV5m",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa20_wEUIAAC2Ee.jpg\"]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:09.000Z"
        },
        {
            "id": 910,
            "username": "alexxubyte",
            "tweet_id": "1562103667364225024",
            "tweet_text": "/4 Step 4 - The legitimate server sends its certificate to the intermediate server. The intermediate server validates the certificate. https://t.co/nooJZeSKrI",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa21APnVsAMToYk.jpg\"]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:11.000Z"
        },
        {
            "id": 909,
            "username": "alexxubyte",
            "tweet_id": "1562103676218404866",
            "tweet_text": "/5 Step 5 - The client generates a session key and encrypts it using the public key from the intermediate server. The intermediate server receives the encrypted session key and decrypts it with the private key. https://t.co/P6cGwvpxla",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa21AvUVQAEcehM.jpg\"]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:13.000Z"
        },
        {
            "id": 908,
            "username": "alexxubyte",
            "tweet_id": "1562103685571702784",
            "tweet_text": "/6 Step 6 - The intermediate server encrypts the session key using the public key from the actual server and then sends it there. The legitimate server decrypts the session key with the private key. https://t.co/DiKqusphqi",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa21BQdUIAAIwE1.jpg\"]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:15.000Z"
        },
        {
            "id": 907,
            "username": "alexxubyte",
            "tweet_id": "1562103694425874434",
            "tweet_text": "/7 Steps 7 and 8 - Now, the client and the server can communicate using the session key (symmetric encryption.) The encrypted data is transmitted in a secure bi-directional channel. The intermediate server can always decrypt the data. https://t.co/ifTy3foSDE",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa21BzUUsAAS0M4.jpg\"]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:17.000Z"
        },
        {
            "id": 906,
            "username": "alexxubyte",
            "tweet_id": "1562103698796425217",
            "tweet_text": "/8 Now let\u2019s answer the questions we started with:\n\n1. HTTPS is reliable, but the client should not accept a malicious certificate from an untrusted third-party server.\n\n2. Fiddler can decrypt the data because its certificate is accepted and trusted by the browser.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:18.000Z"
        },
        {
            "id": 905,
            "username": "alexxubyte",
            "tweet_id": "1562103701447196672",
            "tweet_text": "/9 Over to you: why does HTTPS use symmetric encryption for data transmission? Is it safe?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:19.000Z"
        },
        {
            "id": 904,
            "username": "alexxubyte",
            "tweet_id": "1562103703997255680",
            "tweet_text": "/10 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/5x747EWCus",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-23T15:45:20.000Z"
        },
        {
            "id": 1645,
            "username": "testdrivenio",
            "tweet_id": "1562114950189187072",
            "tweet_text": "Flask Tip\n\nFlask-Session works great with a Redis database!\n\nAfter configuring the interface to Redis, the `session` object can be used (but data is stored on the server!)\n\n\ud83d\udc47 https://t.co/FpcqNvOQ5d",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa2_RGjaIAYLtQE.png\"]",
            "tweet_conversation_id": "1562114950189187072",
            "tweet_type": "Others",
            "created_at": "2022-08-23T16:30:01.000Z"
        },
        {
            "id": 1644,
            "username": "testdrivenio",
            "tweet_id": "1562114953443954690",
            "tweet_text": "See the whole example:\n\nhttps://t.co/5aWFa5fXS7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562114950189187072",
            "tweet_type": "Others",
            "created_at": "2022-08-23T16:30:02.000Z"
        },
        {
            "id": 1643,
            "username": "testdrivenio",
            "tweet_id": "1562114954580611072",
            "tweet_text": "You can find this and other tips here: \n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562114950189187072",
            "tweet_type": "Others",
            "created_at": "2022-08-23T16:30:02.000Z"
        },
        {
            "id": 903,
            "username": "alexxubyte",
            "tweet_id": "1562170318436724736",
            "tweet_text": "Enjoy this thread?\n\nYou might like this thread: What is SSO (Single Sign-On)?\n\nhttps://t.co/5V8VmiqkaW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Others",
            "created_at": "2022-08-23T20:10:02.000Z"
        },
        {
            "id": 902,
            "username": "alexxubyte",
            "tweet_id": "1562247891451666432",
            "tweet_text": "Update to this thread.\n\nPrerequisite: root certificate of the intermediate server is present in the local trust-store.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562103641057607685",
            "tweet_type": "Others",
            "created_at": "2022-08-24T01:18:17.000Z"
        },
        {
            "id": 1421,
            "username": "bascodes",
            "tweet_id": "1562441246844411904",
            "tweet_text": "Didn't expect this to become so popular. Here is a similar utility you might want to look into:\nhttps://t.co/javPDrYJ8N",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562027655255449600",
            "tweet_type": "Others",
            "created_at": "2022-08-24T14:06:36.000Z"
        },
        {
            "id": 901,
            "username": "alexxubyte",
            "tweet_id": "1562462331572957184",
            "tweet_text": "/1 How to explain to a 10-year-old what all the symbols/numbers on the smart credit card mean?\n\nDo you know that smart credit cards have ISO standards? Let\u2019s take a look: https://t.co/TT0JEoeZGK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa77MKwaUAIPVb4.jpg\"]",
            "tweet_conversation_id": "1562462331572957184",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-24T15:30:23.000Z"
        },
        {
            "id": 900,
            "username": "alexxubyte",
            "tweet_id": "1562462335255531520",
            "tweet_text": "/2 \ud83d\udd39ISO 7813: defines the card size and shape\n\n\ud83d\udd39ISO 7816: defines smart card integrated chips, such as the EMV (Europay, Mastercard, and Visa) chip\n\n\ud83d\udd39ISO 7812: defines the PAN (permanent account number) structure\n\n\ud83d\udd39ISO 7811: defines the magnetic stripe details",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562462331572957184",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-24T15:30:24.000Z"
        },
        {
            "id": 899,
            "username": "alexxubyte",
            "tweet_id": "1562462337902137349",
            "tweet_text": "/3 \ud83d\udd39ISO 14443: defines contactless card\n\nOver to you: 1). credit card details are sensitive data. How to store the card data safely in the backend? What are some of the regulations?\n\n2). The smart card has an integrated EMV chip. Is this chip read-only or writable?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562462331572957184",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-24T15:30:25.000Z"
        },
        {
            "id": 898,
            "username": "alexxubyte",
            "tweet_id": "1562462340452270083",
            "tweet_text": "/4 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/usWZvoNOYR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562462331572957184",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-24T15:30:25.000Z"
        },
        {
            "id": 1642,
            "username": "testdrivenio",
            "tweet_id": "1562477117966667776",
            "tweet_text": "Flask Tip\n\nIn Flask, the url_for() function builds the URL to a specific function.\n\nurl_for() is really useful in templates to easily include URLs\n\n\ud83d\udc47 https://t.co/nHSFBFg32E",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa8IqBCUUAMKkSe.png\"]",
            "tweet_conversation_id": "1562477117966667776",
            "tweet_type": "Others",
            "created_at": "2022-08-24T16:29:09.000Z"
        },
        {
            "id": 1641,
            "username": "testdrivenio",
            "tweet_id": "1562477120504209409",
            "tweet_text": "You can find this and other tips here:   \n\nhttps://t.co/aaDPvCoXPq \n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562477117966667776",
            "tweet_type": "Others",
            "created_at": "2022-08-24T16:29:09.000Z"
        },
        {
            "id": 1640,
            "username": "testdrivenio",
            "tweet_id": "1562590157119062016",
            "tweet_text": "Django and Pydantic \n\nhttps://t.co/9TbYRpnBLP \n\nIntegrate Pydantic with a Django application using the Pydantic-Django and Django Ninja packages.\n\n#Django #Pydantic",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562590157119062016",
            "tweet_type": "Others",
            "created_at": "2022-08-24T23:58:19.000Z"
        },
        {
            "id": 1639,
            "username": "testdrivenio",
            "tweet_id": "1562785490457153536",
            "tweet_text": "Accepting Payments with Stripe, Vue, and Flask \n\nhttps://t.co/8hR5yBIjMu\n\nIn this tutorial, you'll develop a web app for selling books using:\n\n\ud83d\udd38Stripe (for payment processing)\n\ud83d\udd38Vue (the client-side app)\n\ud83d\udd38Flask (the server-side API).\n\n#Python #JavaScript #Payments #Vue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562785490457153536",
            "tweet_type": "Others",
            "created_at": "2022-08-25T12:54:30.000Z"
        },
        {
            "id": 1420,
            "username": "bascodes",
            "tweet_id": "1562804407041130497",
            "tweet_text": "Hi fellow dev friends!\ud83d\udc4b\n\nI would like to meet all of you!\nSo don't be shy: Introduce yourself briefly here, and let's network!\n\nI also have free slots for \u2615\ufe0f coffee chats: send me a \ud83d\udce8DM for my \ud83d\udcc5 Calendly link!\n\n#tweet100 #100Devs #100DaysOfCode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562804407041130497",
            "tweet_type": "Others",
            "created_at": "2022-08-25T14:09:40.000Z"
        },
        {
            "id": 1638,
            "username": "testdrivenio",
            "tweet_id": "1562839730039160832",
            "tweet_text": "Flask Tip\n\nIn Flask, the `url_for()` function can be passed an argument to specify the variable part of a URL\n\n\ud83d\udc47 https://t.co/WEt53mJLUk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSc1yakAIczWP.png\"]",
            "tweet_conversation_id": "1562839730039160832",
            "tweet_type": "Others",
            "created_at": "2022-08-25T16:30:02.000Z"
        },
        {
            "id": 1637,
            "username": "testdrivenio",
            "tweet_id": "1562839732324671488",
            "tweet_text": "You can find this and other tips here:     \n\nhttps://t.co/aaDPvCoXPq \n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562839730039160832",
            "tweet_type": "Others",
            "created_at": "2022-08-25T16:30:03.000Z"
        },
        {
            "id": 897,
            "username": "alexxubyte",
            "tweet_id": "1562840039142281216",
            "tweet_text": "/1 REST is the most common communication standard between computers over the internet. What is it? Why is it so popular? Let's take a look at this thread. https://t.co/GBdBcC56aF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSu1sUsAEaQjT.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:16.000Z"
        },
        {
            "id": 896,
            "username": "alexxubyte",
            "tweet_id": "1562840047010717697",
            "tweet_text": "/2 REST API Rules https://t.co/bIFgM55tyq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSvNDUsAE072z.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:18.000Z"
        },
        {
            "id": 895,
            "username": "alexxubyte",
            "tweet_id": "1562840054946402313",
            "tweet_text": "/3 Real-life examples https://t.co/Ht2Xx69QlE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSvp4UIAIsDxj.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:19.000Z"
        },
        {
            "id": 894,
            "username": "alexxubyte",
            "tweet_id": "1562840062231949315",
            "tweet_text": "/4 Organize resources https://t.co/BiCxXkTPS2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSwGSUYAEZOB_.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:21.000Z"
        },
        {
            "id": 893,
            "username": "alexxubyte",
            "tweet_id": "1562840070255550464",
            "tweet_text": "/5 Resource https://t.co/aXz4YwMCzx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSwhVVUAISQ5M.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:23.000Z"
        },
        {
            "id": 892,
            "username": "alexxubyte",
            "tweet_id": "1562840078111481857",
            "tweet_text": "/6 Verb https://t.co/2c7vYGozsf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSw_tUYAExnB4.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:25.000Z"
        },
        {
            "id": 891,
            "username": "alexxubyte",
            "tweet_id": "1562840085984202752",
            "tweet_text": "/7 CRUD https://t.co/DIQaUDzrNH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSxdgUUAEdAp_.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:27.000Z"
        },
        {
            "id": 890,
            "username": "alexxubyte",
            "tweet_id": "1562840093194199042",
            "tweet_text": "/8 JSON https://t.co/vE9cRwhSi3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSx5mUsAAhCte.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:29.000Z"
        },
        {
            "id": 889,
            "username": "alexxubyte",
            "tweet_id": "1562840100765020160",
            "tweet_text": "/9 Status Code https://t.co/mhe9hq8el9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSyWIVQAEgE8S.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:30.000Z"
        },
        {
            "id": 888,
            "username": "alexxubyte",
            "tweet_id": "1562840108654481416",
            "tweet_text": "/10 Retry https://t.co/zG9PtzTyvH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSyyNUIAAc1gF.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:32.000Z"
        },
        {
            "id": 887,
            "username": "alexxubyte",
            "tweet_id": "1562840116153839618",
            "tweet_text": "/11 Idempotency https://t.co/4FsK9vVK8x",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSzOOUIAMcwj9.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:34.000Z"
        },
        {
            "id": 886,
            "username": "alexxubyte",
            "tweet_id": "1562840123791667206",
            "tweet_text": "/12 Pagination https://t.co/O84XPnh0DL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBSzpkUcAAeoSi.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:36.000Z"
        },
        {
            "id": 885,
            "username": "alexxubyte",
            "tweet_id": "1562840131941240832",
            "tweet_text": "/13 API versioning https://t.co/UD8RvTDPbS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBS0G2UYAgwToh.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:38.000Z"
        },
        {
            "id": 884,
            "username": "alexxubyte",
            "tweet_id": "1562840139214114817",
            "tweet_text": "/14 Other API options https://t.co/t34sR9vagB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBS0lwUUAICln5.jpg\"]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:40.000Z"
        },
        {
            "id": 883,
            "username": "alexxubyte",
            "tweet_id": "1562840142456377345",
            "tweet_text": "/15 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/NMyCXpdXAf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562840039142281216",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-25T16:31:40.000Z"
        },
        {
            "id": 882,
            "username": "alexxubyte",
            "tweet_id": "1563046047257047040",
            "tweet_text": "A picture is worth a thousand words. Cron cheatsheet by @LinuxHandbook \ud83d\udc47\n\nSubscribe to our weekly newsletter (100,000+ subscribers) to learn something new every week: \nhttps://t.co/dkjDPxrTOt https://t.co/VKuYPmmP5F",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbENv55UYAQC5if.jpg\"]",
            "tweet_conversation_id": "1563046047257047040",
            "tweet_type": "Others",
            "created_at": "2022-08-26T06:09:52.000Z"
        },
        {
            "id": 1636,
            "username": "testdrivenio",
            "tweet_id": "1563145707569131526",
            "tweet_text": "How To Keep Track Of Packages For Your Django Project With Pip-Tools\n\nhttps://t.co/DShILyyT9j\n\nYou don't have to rely on pip freeze to manage your project requirements.\n\nby @aliceridgway404 \n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563145707569131526",
            "tweet_type": "Others",
            "created_at": "2022-08-26T12:45:53.000Z"
        },
        {
            "id": 1419,
            "username": "bascodes",
            "tweet_id": "1563166164221513728",
            "tweet_text": "Just realized it's Friday! Weeks fly by this summer so quickly for me.\n\nAnyway \u2013 I have a list of awesome articles and projects for #ThisWeekInPython again!\n\nCheck it out! \ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:10.000Z"
        },
        {
            "id": 1418,
            "username": "bascodes",
            "tweet_id": "1563166166935150594",
            "tweet_text": "+++\nAs always, you can follow my blog for the list, too!\n#tweet100\n+++\nhttps://t.co/LKLkzwGDdj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:11.000Z"
        },
        {
            "id": 1417,
            "username": "bascodes",
            "tweet_id": "1563166169594376198",
            "tweet_text": "Python tops programming love list \u2013 but if you want a job, learn SQL \u2013 by @bviglia\nhttps://t.co/93mKpTJRIE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:11.000Z"
        },
        {
            "id": 1416,
            "username": "bascodes",
            "tweet_id": "1563166171850948610",
            "tweet_text": "Python Match Case is more powerful than you think \u2013 by @guilatrova\nhttps://t.co/7Gd53ccHMt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:12.000Z"
        },
        {
            "id": 1415,
            "username": "bascodes",
            "tweet_id": "1563166174245822465",
            "tweet_text": "10 Python Interview Questions for Senior Developers \u2013 by @YangZhou1993\nhttps://t.co/MZIHuICAHo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:12.000Z"
        },
        {
            "id": 1414,
            "username": "bascodes",
            "tweet_id": "1563166176586665987",
            "tweet_text": "Understanding async Python for the web \u2013 by @ubernostrum\nhttps://t.co/EyKBFMat8A",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:13.000Z"
        },
        {
            "id": 1413,
            "username": "bascodes",
            "tweet_id": "1563166178918313986",
            "tweet_text": "Python Decorators: a brief intro with usage examples \u2013 by @sanshugoel\nhttps://t.co/4v31koSLHQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:13.000Z"
        },
        {
            "id": 1412,
            "username": "bascodes",
            "tweet_id": "1563166181212958725",
            "tweet_text": "bibaandboba \u2013 Python package for analyzing Telegram chats and finding correlations between people \nhttps://t.co/boDyOEQuyO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:14.000Z"
        },
        {
            "id": 1411,
            "username": "bascodes",
            "tweet_id": "1563166183909515265",
            "tweet_text": "python-ds \u2013 No non-sense and no BS repo for how data structure code should be in Python - simple and elegant \u2013 by @prabhupant09\nhttps://t.co/hDdD2UwX5e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:15.000Z"
        },
        {
            "id": 1410,
            "username": "bascodes",
            "tweet_id": "1563166187743154176",
            "tweet_text": "asyncer \u2013 Asyncer, async and await, focused on developer experience \u2013 by @tiangolo\nhttps://t.co/9oIW2YV5G9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:16.000Z"
        },
        {
            "id": 1409,
            "username": "bascodes",
            "tweet_id": "1563166190645612549",
            "tweet_text": "diffusers \u2013 State-of-the-art diffusion models for image and audio generation in PyTorch \u2013 by @huggingface\nhttps://t.co/h3ehJP71xf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:16.000Z"
        },
        {
            "id": 1408,
            "username": "bascodes",
            "tweet_id": "1563166194257260546",
            "tweet_text": "system-design-primer \u2013 Learn how to design large-scale systems. Prep for the system design interview \u2013 by @donne_martin\nhttps://t.co/toCRrhe7jz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563166164221513728",
            "tweet_type": "Others",
            "created_at": "2022-08-26T14:07:17.000Z"
        },
        {
            "id": 1635,
            "username": "testdrivenio",
            "tweet_id": "1563197793098874881",
            "tweet_text": "The Definitive Guide to #Celery and #Django\n\nJust updated!\n\nhttps://t.co/n9sxbaWpqo\n\nCovers everything from debugging failed tasks to adding WebSocket support with Django Channels to best practices &amp; performance tuning. There's a deep dive into testing &amp; Test-Driven Development.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563197793098874881",
            "tweet_type": "Others",
            "created_at": "2022-08-26T16:12:51.000Z"
        },
        {
            "id": 1634,
            "username": "testdrivenio",
            "tweet_id": "1563202113399705600",
            "tweet_text": "Flask Tip\n\nIn Flask, the redirect() function is used to redirect a user to a different URL.\n\nredirect() can greatly improve the navigation through a site by automatically redirecting users to the expected pages.\n\n\ud83d\udc47 https://t.co/yGqb4Qtrpn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbGcCV6aUAEWwxZ.png\"]",
            "tweet_conversation_id": "1563202113399705600",
            "tweet_type": "Others",
            "created_at": "2022-08-26T16:30:01.000Z"
        },
        {
            "id": 1633,
            "username": "testdrivenio",
            "tweet_id": "1563202116771909632",
            "tweet_text": "You can find this and other tips here:       \n\nhttps://t.co/aaDPvCoXPq  \n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563202113399705600",
            "tweet_type": "Others",
            "created_at": "2022-08-26T16:30:02.000Z"
        },
        {
            "id": 1632,
            "username": "testdrivenio",
            "tweet_id": "1563265065713029120",
            "tweet_text": "Building Modern Python API Backends in 2022\n\nhttps://t.co/DTXWTsZEll\n\nLovely, opinionated guide on the tools (like FastAPI, pytest, Celery, black, isort, mypy, and flake8) and methodologies (12 factor) used for developing backend Python-based apps.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563265065713029120",
            "tweet_type": "Others",
            "created_at": "2022-08-26T20:40:10.000Z"
        },
        {
            "id": 1407,
            "username": "bascodes",
            "tweet_id": "1563471107021103105",
            "tweet_text": "I got asked how I mastered the #tweet100 challenge.\n\nI was surprised by the results myself, so I analyzed what I did \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563471107021103105",
            "tweet_type": "Others",
            "created_at": "2022-08-27T10:18:54.000Z"
        },
        {
            "id": 1406,
            "username": "bascodes",
            "tweet_id": "1563471109097660416",
            "tweet_text": "When I started with Twitter, I had no idea how it worked, and I saw it as \"just another marketing\" channel.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563471107021103105",
            "tweet_type": "Others",
            "created_at": "2022-08-27T10:18:54.000Z"
        },
        {
            "id": 1405,
            "username": "bascodes",
            "tweet_id": "1563471111178055682",
            "tweet_text": "1. I quickly realized that the algorithm rewards consistency. So I set myself the goal of tweeting once per day, at least. The Tweet100 challenge felt plausible to me.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563471107021103105",
            "tweet_type": "Others",
            "created_at": "2022-08-27T10:18:55.000Z"
        },
        {
            "id": 1404,
            "username": "bascodes",
            "tweet_id": "1563471113300353025",
            "tweet_text": "2. A general advice is to reply to others' tweets. And I did that. I came to realize that this is not about the algorithm anymore.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563471107021103105",
            "tweet_type": "Others",
            "created_at": "2022-08-27T10:18:55.000Z"
        },
        {
            "id": 1403,
            "username": "bascodes",
            "tweet_id": "1563471115309416448",
            "tweet_text": "It's about real people. I met a few in real life, on vacation, at conferences and near my area. I had over 100 coffee chats. These personal connections felt so great that I did not care a bit about any follower numbers, any more",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563471107021103105",
            "tweet_type": "Others",
            "created_at": "2022-08-27T10:18:56.000Z"
        },
        {
            "id": 1402,
            "username": "bascodes",
            "tweet_id": "1563471117569757184",
            "tweet_text": "3. Be genuine! I had days where it was frustrating to come up with *something* to tweet. I tried quotes, engagement tweets, and so on. While some of them played out well, my best tweets were about what people follow me for: Tech content about DevOps, Data Bases, and mostly Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563471107021103105",
            "tweet_type": "Others",
            "created_at": "2022-08-27T10:18:56.000Z"
        },
        {
            "id": 1401,
            "username": "bascodes",
            "tweet_id": "1563471119734427648",
            "tweet_text": "Conclusion: There is no shortcut. Twitter, like almost everything in life, works or works not for you based on your level of investment, genuine interest, commitment, and consistency. No shortcuts, no growth hacks, at least for me.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563471107021103105",
            "tweet_type": "Others",
            "created_at": "2022-08-27T10:18:57.000Z"
        },
        {
            "id": 881,
            "username": "alexxubyte",
            "tweet_id": "1563550491451109382",
            "tweet_text": "Next week, we will cover:\n\n\u25ba Microservice architecture\n\u25ba eCommerce end-to-end workflow\n\u25ba Hotspot account\n\u25ba Latency numbers\n\u25ba SQL tips\n\nSubscribe now to our weekly newsletter to learn something new every week: \nhttps://t.co/dkjDPxrTOt https://t.co/aIQGfNgi1L",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbLYpJqUYAEtIKn.jpg\"]",
            "tweet_conversation_id": "1563550491451109382",
            "tweet_type": "Others",
            "created_at": "2022-08-27T15:34:21.000Z"
        },
        {
            "id": 1631,
            "username": "testdrivenio",
            "tweet_id": "1563564501756022785",
            "tweet_text": "Flask Tip\n\nHow does redirect() work in Flask?\n\nCheck the log messages from the Flask development server when adding data\n\nThe status code 302 (Found) is used to redirect the user to a new URL that is specified in the header field of the response.\n\n\ud83d\udc47 https://t.co/c6meGxCL90",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbLloGFaUAAQALy.png\"]",
            "tweet_conversation_id": "1563564501756022785",
            "tweet_type": "Others",
            "created_at": "2022-08-27T16:30:01.000Z"
        },
        {
            "id": 1630,
            "username": "testdrivenio",
            "tweet_id": "1563564503908110336",
            "tweet_text": "You can find this and other tips here:         \n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563564501756022785",
            "tweet_type": "Others",
            "created_at": "2022-08-27T16:30:02.000Z"
        },
        {
            "id": 1629,
            "username": "testdrivenio",
            "tweet_id": "1563650842351513600",
            "tweet_text": "Deploying a Flask and Vue App to Heroku with Docker and Gitlab CI \n\nhttps://t.co/U9vVUVxBFF\n\n\ud83d\udd38Containerize #Flask + #Vue using a Docker multi-stage build\n\ud83d\udd38Deploy an app to Heroku with Docker\n\ud83d\udd38Configure GitLab CI to deploy Docker images to Heroku\n\n#Python #JavaScript #DevOps",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563650842351513600",
            "tweet_type": "Others",
            "created_at": "2022-08-27T22:13:06.000Z"
        },
        {
            "id": 1400,
            "username": "bascodes",
            "tweet_id": "1563906299418533888",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d List comprehensions in Python \u2013\n\nI'm sure you know that you can use an \ud835\ude92\ud835\ude8f condition inside a list comprehension.\n\nBut, did you know that you can have an \ud835\ude8e\ud835\ude95\ud835\ude9c\ud835\ude8e inside as well?\n\n#tweet100 #Python https://t.co/jyUZiFEQEN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbQcIQXXgAAt5jc.jpg\"]",
            "tweet_conversation_id": "1563906299418533888",
            "tweet_type": "Python tips",
            "created_at": "2022-08-28T15:08:12.000Z"
        },
        {
            "id": 1628,
            "username": "testdrivenio",
            "tweet_id": "1563926889571332096",
            "tweet_text": "Flask Tip - Message Flashing\n\nFlash messages are used to provide useful information to the user based on their actions with the app.\n\nIn Flask, the `flash()` function is used to create a flash message to be displayed in the next request (when the list of stocks is displayed)\n\n\ud83d\udc47 https://t.co/IsNeTYJuN1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbQvN1daAAESYrF.png\"]",
            "tweet_conversation_id": "1563926889571332096",
            "tweet_type": "Others",
            "created_at": "2022-08-28T16:30:01.000Z"
        },
        {
            "id": 1627,
            "username": "testdrivenio",
            "tweet_id": "1563926892394139648",
            "tweet_text": "You can find this and other tips here:\n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563926889571332096",
            "tweet_type": "Others",
            "created_at": "2022-08-28T16:30:02.000Z"
        },
        {
            "id": 1399,
            "username": "bascodes",
            "tweet_id": "1563934686006484993",
            "tweet_text": "Coding is trending. On Sunday!\n\nWhat about you? Relax or code this weekend? https://t.co/J705SXd10H",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbQdvzJXoAIvpFL.png\"]",
            "tweet_conversation_id": "1563934686006484993",
            "tweet_type": "Others",
            "created_at": "2022-08-28T17:01:00.000Z"
        },
        {
            "id": 880,
            "username": "alexxubyte",
            "tweet_id": "1564099591833673734",
            "tweet_text": "The silver play button arrived! Thank you to all 100K+ of you! Here are the top 3 most watched videos:\n \n1. Why is Kafka fast\n2. Why is single-threaded Redis so fast\n3. HTTP/1 to HTTP/2 to HTTP/3\n\nThank you, @sahnlam, for making the great videos\n \nYouTube: https://t.co/tbxD2f7FLB https://t.co/MF1eE5TfSj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbTLhZbakAA5NZs.jpg\"]",
            "tweet_conversation_id": "1564099591833673734",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T03:56:16.000Z"
        },
        {
            "id": 1626,
            "username": "testdrivenio",
            "tweet_id": "1564243743355686913",
            "tweet_text": "Developing a Single Page App with Flask and Vue\n\nhttps://t.co/g0QqIVdEIg\n\nStep-by-step walkthrough of how to set up a basic CRUD app with Vue and Flask.\n\n#Python #Flask #JavaScript #VueJS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564243743355686913",
            "tweet_type": "Others",
            "created_at": "2022-08-29T13:29:05.000Z"
        },
        {
            "id": 1398,
            "username": "bascodes",
            "tweet_id": "1564258799611002880",
            "tweet_text": "What do you value most about a workplace? \n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564258799611002880",
            "tweet_type": "Others",
            "created_at": "2022-08-29T14:28:55.000Z"
        },
        {
            "id": 879,
            "username": "alexxubyte",
            "tweet_id": "1564279740390772736",
            "tweet_text": "/1 Big accounts, such as Nike, Procter &amp; Gamble &amp; Nintendo, often cause hotspot issues for the payment system.\n\nA hotspot payment account is an account that has a large number of concurrent operations on it. https://t.co/Le1TgrL6xB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbVwIUMXEAAmdbH.jpg\"]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:07.000Z"
        },
        {
            "id": 878,
            "username": "alexxubyte",
            "tweet_id": "1564279744413110272",
            "tweet_text": "/2 For example, when merchant A starts a promotion on Amazon Prime day, it receives many concurrent purchasing orders. In this case, the merchant\u2019s account in the database becomes a hotspot account due to frequent updates.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:08.000Z"
        },
        {
            "id": 877,
            "username": "alexxubyte",
            "tweet_id": "1564279746946428928",
            "tweet_text": "/3 In normal operations, we put a row lock on the merchant\u2019s balance when it gets updated. However, this locking mechanism leads to low throughput and becomes a system bottleneck.\n\nThe diagram below shows several optimizations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:09.000Z"
        },
        {
            "id": 876,
            "username": "alexxubyte",
            "tweet_id": "1564279758875025408",
            "tweet_text": "/4 \ud83d\udd39Rate limit\nWe can limit the number of requests within a certain period. The remaining requests will be rejected or retried at a later time. It is a simple way to increase the system\u2019s responsiveness for some users, but this can lead to a bad user experience. https://t.co/ijNAgHHnzn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbVwJLpVQAAF4q7.jpg\"]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:12.000Z"
        },
        {
            "id": 875,
            "username": "alexxubyte",
            "tweet_id": "1564279774746275840",
            "tweet_text": "/5 \ud83d\udd39Split the balance account into sub-accounts\nWe can set up sub-accounts for the merchant\u2019s account. In this way, one update request only locks one sub-account, and the rest sub-accounts are still available. https://t.co/RyTlQ4uZab",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbVwJ9SaAAAzc99.jpg\"]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:15.000Z"
        },
        {
            "id": 874,
            "username": "alexxubyte",
            "tweet_id": "1564279785999593472",
            "tweet_text": "/6 \ud83d\udd39Use cache to update balance first\nWe can set up a caching layer to update the merchant\u2019s balance. The detailed statements and balances are updated in the database later asynchronously. The in-memory cache can deal with much higher throughput than the database. https://t.co/PG1Ue7II6l",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbVwK3SUYAA0Ou_.jpg\"]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:18.000Z"
        },
        {
            "id": 873,
            "username": "alexxubyte",
            "tweet_id": "1564279790143561728",
            "tweet_text": "/7 Over to you: We can also put the requests into a message queue so the requests can be processed at the service\u2019s own pace. Can you think of the limitations of this approach?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:19.000Z"
        },
        {
            "id": 872,
            "username": "alexxubyte",
            "tweet_id": "1564279792651812864",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/XPlo3l2oXE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-29T15:52:20.000Z"
        },
        {
            "id": 1625,
            "username": "testdrivenio",
            "tweet_id": "1564289278263275523",
            "tweet_text": "Flask Tip\n\nIn Flask, the `get_flashed_messages()` function is used to retrieve all the flash messages (from the session).\n\nget_flashed_messages() is available in the Jinja templates\n\n\ud83d\udc47 https://t.co/INFBfO9wl4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbV4zqhVUAAayDb.png\"]",
            "tweet_conversation_id": "1564289278263275523",
            "tweet_type": "Others",
            "created_at": "2022-08-29T16:30:01.000Z"
        },
        {
            "id": 1624,
            "username": "testdrivenio",
            "tweet_id": "1564289280280653824",
            "tweet_text": "You can find this and other tips here:  \n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564289278263275523",
            "tweet_type": "Others",
            "created_at": "2022-08-29T16:30:02.000Z"
        },
        {
            "id": 871,
            "username": "alexxubyte",
            "tweet_id": "1564468027088744448",
            "tweet_text": "Enjoyed this thread? \n\nYou might like our weekly System Design Newsletter as well. Subscribe here: \nhttps://t.co/0RYwcKv26q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564279740390772736",
            "tweet_type": "Others",
            "created_at": "2022-08-30T04:20:18.000Z"
        },
        {
            "id": 1397,
            "username": "bascodes",
            "tweet_id": "1564513070696783872",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Quick #pythontip:\n\nYou can use \ud835\ude8d\ud835\ude92\ud835\ude9b to inspect modules or variables on the REPL \u2013 it shows all attributes of an object \n\n#tweet100 https://t.co/e6EdIr1yAw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbZD8jIXEAA1WoY.png\"]",
            "tweet_conversation_id": "1564513070696783872",
            "tweet_type": "Python tips",
            "created_at": "2022-08-30T07:19:17.000Z"
        },
        {
            "id": 1396,
            "username": "bascodes",
            "tweet_id": "1564604348411174912",
            "tweet_text": "Hey, folks in the #100Devs program \ud83d\udc4b \n\nI'm curious about your progress! How is it coming along?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564604348411174912",
            "tweet_type": "Others",
            "created_at": "2022-08-30T13:22:00.000Z"
        },
        {
            "id": 1623,
            "username": "testdrivenio",
            "tweet_id": "1564613426491670529",
            "tweet_text": "Production Django Deployments on Heroku\n\nhttps://t.co/KPEdOHmaEF\n\nTips and tricks for simplifying the process of deploying, maintaining, and scaling a production-grade Django app on Heroku.\n\n#Django #DevOps #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564613426491670529",
            "tweet_type": "Others",
            "created_at": "2022-08-30T13:58:04.000Z"
        },
        {
            "id": 870,
            "username": "alexxubyte",
            "tweet_id": "1564640354690670592",
            "tweet_text": "/1 Which latency numbers we should know?\n\nPlease note those are not accurate numbers. They are based on some online benchmarks (Jeff Dean\u2019s latency numbers + some other sources). https://t.co/P85VE5o3ln",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4G-HUEAE4-9t.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:04.000Z"
        },
        {
            "id": 869,
            "username": "alexxubyte",
            "tweet_id": "1564640363268042752",
            "tweet_text": "/2 \ud83d\udd39L1 and L2 caches: 1 ns, 10 ns\nE.g.: They are usually built onto the microprocessor chip. Unless you work with hardware directly, you probably don\u2019t need to worry about them. https://t.co/WKpaP6oHqg",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4HXjUEAAShKG.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:06.000Z"
        },
        {
            "id": 868,
            "username": "alexxubyte",
            "tweet_id": "1564640371904090113",
            "tweet_text": "/3 \ud83d\udd39RAM access: 100 ns\nE.g.: It takes 100 ns to read data from memory. Redis is an in-memory store, so it takes about 100 ns to read data from Redis\n\n\ud83d\udd39Send 1K bytes over 1 Gbps network: 10 us\nE.g.: It takes around 10 us to send 1KB of data from Memcached through the network https://t.co/YcE3hgiQkT",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4H33UEAAwnaE.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:08.000Z"
        },
        {
            "id": 867,
            "username": "alexxubyte",
            "tweet_id": "1564640380791840768",
            "tweet_text": "/4 \ud83d\udd39Read from SSD: 100 us\n\nE.g.: RocksDB is a disk-based K/V store, so the read latency is around 100 us on SSD. https://t.co/KxrhqLPyrz",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4IYrUcAAntLG.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:11.000Z"
        },
        {
            "id": 866,
            "username": "alexxubyte",
            "tweet_id": "1564640389788667904",
            "tweet_text": "/5 \ud83d\udd39Database insert operation: 1 ms.\nE.g.: Postgresql insertion might take 1ms. The database needs to store the data, create the index, and flush logs. All these actions take time. https://t.co/6ZvC88qBtD",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4I55VUAAFGvn.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:13.000Z"
        },
        {
            "id": 865,
            "username": "alexxubyte",
            "tweet_id": "1564640398055682050",
            "tweet_text": "/6 \ud83d\udd39Send packet CA-&gt;Netherlands-&gt;CA: 100 ms\n\nE.g.: If we have a long-distance Zoom call, the latency might be around 100 ms. https://t.co/PLdmJ7wGZN",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4JaOUUAEDCVg.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:15.000Z"
        },
        {
            "id": 864,
            "username": "alexxubyte",
            "tweet_id": "1564640407107026948",
            "tweet_text": "/7 \ud83d\udd39Retry/refresh internal: 1-10s\n\nE.g: In a monitoring system, the refresh interval is usually set to 5~10 seconds (default value on Grafana).\n\nNotes\n\n-----\n\n1 ns = 10^-9 seconds\n\n1 us = 10^-6 seconds = 1,000 ns\n\n1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns https://t.co/OWiSrVGJol",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4J40UEAEeY2a.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:17.000Z"
        },
        {
            "id": 863,
            "username": "alexxubyte",
            "tweet_id": "1564640417651404801",
            "tweet_text": "/8 Over to you - 1). Do you know all \ud83d\ude0a?\n\n2). Nowadays, disk and tape are used as data backup. Do you know which one has a higher write speed?\n\n\ud83d\udc49 Enjoyed this post? You might like our weekly System Design Newsletter as well. Subscribe here:\n\nhttps://t.co/dkjDPxrTOt https://t.co/Ib4dG2Y93D",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fba4Kc0UIAAwjxA.jpg\"]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-30T15:45:19.000Z"
        },
        {
            "id": 1622,
            "username": "testdrivenio",
            "tweet_id": "1564651667185840130",
            "tweet_text": "Flask Tip\n\nIn Flask, flash messages can be categorized to allow different styling (success, error, info) using get_flashed_messages(with_categories=true)\n\n\ud83d\udc47 https://t.co/sxRxOZMElq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbbCZblUIAAKgqB.png\"]",
            "tweet_conversation_id": "1564651667185840130",
            "tweet_type": "Others",
            "created_at": "2022-08-30T16:30:01.000Z"
        },
        {
            "id": 1621,
            "username": "testdrivenio",
            "tweet_id": "1564651670096658432",
            "tweet_text": "You can find this and other tips here:    \n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564651667185840130",
            "tweet_type": "Others",
            "created_at": "2022-08-30T16:30:02.000Z"
        },
        {
            "id": 862,
            "username": "alexxubyte",
            "tweet_id": "1564658926355853312",
            "tweet_text": "The goal of the diagram is not to get the numbers accurate, but to get a general sense of what is slow and fast, in relative terms. We hope the numbers are within the 1 order of magnitude error range. Let me know if you spot an error! I'll correct it. Thank you.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564640354690670592",
            "tweet_type": "Others",
            "created_at": "2022-08-30T16:58:52.000Z"
        },
        {
            "id": 1395,
            "username": "bascodes",
            "tweet_id": "1564872275463217154",
            "tweet_text": "Anyone up for some geeky coffee chats? \u2615\ufe0f\n\nI still have some slots open! \ud83d\udcc6\nDM me for the link! \ud83d\udcec\n\n#tweet100 #100devs #100DaysOfCode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564872275463217154",
            "tweet_type": "Others",
            "created_at": "2022-08-31T07:06:39.000Z"
        },
        {
            "id": 1394,
            "username": "bascodes",
            "tweet_id": "1564872521064882176",
            "tweet_text": "Want to talk about your progress in a \u2615\ufe0f coffee chat? \ud83d\udc47\n\nhttps://t.co/yQpYcVbo0P",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564604348411174912",
            "tweet_type": "Others",
            "created_at": "2022-08-31T07:07:37.000Z"
        },
        {
            "id": 861,
            "username": "alexxubyte",
            "tweet_id": "1565003249341435904",
            "tweet_text": "/1 What does a typical microservice architecture look like? \ud83d\udc47\n\nThe diagram below shows a typical microservice architecture.\n\n\ud83d\udd39Load Balancer: This distributes incoming traffic across multiple backend services. https://t.co/cTIsNqMQVH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbgCKMEVsAANL5W.jpg\"]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:05.000Z"
        },
        {
            "id": 860,
            "username": "alexxubyte",
            "tweet_id": "1565003258854195210",
            "tweet_text": "/2 \ud83d\udd39CDN (Content Delivery Network): CDN is a group of geographically distributed servers that hold static content for faster delivery. The clients look for content in CDN first, then progress to backend services. https://t.co/jMLEh8dS7l",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbgCKoeUsAELON-.jpg\"]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:07.000Z"
        },
        {
            "id": 859,
            "username": "alexxubyte",
            "tweet_id": "1565003267523784704",
            "tweet_text": "/3 \ud83d\udd39API Gateway: This handles incoming requests and routes them to the relevant services. It talks to the identity provider and service discovery.\n\n\ud83d\udd39Identity Provider: This handles authentication and authorization for users. https://t.co/LV8b7vRnQy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbgCLJ2VsAEj8Pl.jpg\"]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:09.000Z"
        },
        {
            "id": 858,
            "username": "alexxubyte",
            "tweet_id": "1565003276742844416",
            "tweet_text": "/4 \ud83d\udd39Service Registry &amp; Discovery: Microservice registration and discovery happen in this component, and the API gateway looks for relevant services in this component to talk to.\n\n\ud83d\udd39Management: This component is responsible for monitoring the services. https://t.co/ns8RteRo9w",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbgCLp3VUAEn7HD.jpg\"]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:12.000Z"
        },
        {
            "id": 857,
            "username": "alexxubyte",
            "tweet_id": "1565003285756424192",
            "tweet_text": "/5 \ud83d\udd39Microservices: Microservices are designed and deployed in different domains. Each domain has its database.\n\nThe API gateway talks to the microservices via REST API or other protocols, and the microservices within the same domain talk to each other using RPC https://t.co/UJdnZCc0N5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbgCMNjVsAA2AlA.jpg\"]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:14.000Z"
        },
        {
            "id": 856,
            "username": "alexxubyte",
            "tweet_id": "1565003289317412864",
            "tweet_text": "/6 Benefits of microservices:\n\n- They can be quickly designed, deployed, and horizontally scaled.\n\n- Each domain can be independently maintained by a dedicated team.\n\n- Business requirements can be customized in each domain and better supported, as a result.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:15.000Z"
        },
        {
            "id": 855,
            "username": "alexxubyte",
            "tweet_id": "1565003291821387776",
            "tweet_text": "/7 Over to you: 1). What are the drawbacks of the microservice architecture?\n\n2). Have you seen a monolithic system be transformed into microservice architecture? How long does it take?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:15.000Z"
        },
        {
            "id": 854,
            "username": "alexxubyte",
            "tweet_id": "1565003294384144384",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/iylmTt1wu3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Systems Design",
            "created_at": "2022-08-31T15:47:16.000Z"
        },
        {
            "id": 1620,
            "username": "testdrivenio",
            "tweet_id": "1565014053935665152",
            "tweet_text": "FastAPI tip\n\nYou can use a wildcard validator in Pydantic schemas to prevent non-printable characters in all of your request bodies\n\nJust inherit all your schemas from your BaseModel\n\n(e.g., prevent literal nulls that can be a security issue)\n\n\ud83d\udc47 https://t.co/rh76bbfIHU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbgL_J4UIAACpPu.png\"]",
            "tweet_conversation_id": "1565014053935665152",
            "tweet_type": "Others",
            "created_at": "2022-08-31T16:30:01.000Z"
        },
        {
            "id": 1619,
            "username": "testdrivenio",
            "tweet_id": "1565014056607461376",
            "tweet_text": "You can find this and other tips here:      \n\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565014053935665152",
            "tweet_type": "Others",
            "created_at": "2022-08-31T16:30:02.000Z"
        },
        {
            "id": 853,
            "username": "alexxubyte",
            "tweet_id": "1565037031394123776",
            "tweet_text": "Enjoyed this post? Join a growing community of more than 100,000 readers who loves System Design. Subscribe here:\n\nhttps://t.co/dkjDPxrTOt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565003249341435904",
            "tweet_type": "Others",
            "created_at": "2022-08-31T18:01:19.000Z"
        },
        {
            "id": 1618,
            "username": "testdrivenio",
            "tweet_id": "1565083893740584960",
            "tweet_text": "Learn Vue by Building and Deploying a CRUD App\n\nhttps://t.co/Upets43r8i\n\n@patkennedy79 just updated the course, moving from-\n\n\ud83d\udd38Vue CLI to Vue build tools (using Vite)\n\ud83d\udd38Jest to Vitest\n\ud83d\udd38Vuex to Pinia\n\n\ud83d\udcaa\ud83d\ude80\u2728\n\n#Vue #JavaScript #Testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565083893740584960",
            "tweet_type": "Others",
            "created_at": "2022-08-31T21:07:32.000Z"
        },
        {
            "id": 1393,
            "username": "bascodes",
            "tweet_id": "1565223601636360192",
            "tweet_text": "Discomfort is a sure sign of success",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565223601636360192",
            "tweet_type": "Others",
            "created_at": "2022-09-01T06:22:41.000Z"
        },
        {
            "id": 1392,
            "username": "bascodes",
            "tweet_id": "1565252213290721280",
            "tweet_text": "Is today the last day of the week to get something shipped?\n\nOr is it okay to deploy on Fridays?\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565252213290721280",
            "tweet_type": "Others",
            "created_at": "2022-09-01T08:16:23.000Z"
        },
        {
            "id": 1391,
            "username": "bascodes",
            "tweet_id": "1565295514215714816",
            "tweet_text": "Let's collect meetup groups! https://t.co/UNySceIYxM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565295514215714816",
            "tweet_type": "Others",
            "created_at": "2022-09-01T11:08:27.000Z"
        },
        {
            "id": 1390,
            "username": "bascodes",
            "tweet_id": "1565333654078779392",
            "tweet_text": "Are you using Twitter bookmarks a lot?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565333654078779392",
            "tweet_type": "Others",
            "created_at": "2022-09-01T13:40:00.000Z"
        },
        {
            "id": 1617,
            "username": "testdrivenio",
            "tweet_id": "1565343316644085760",
            "tweet_text": "Generating a Static Site with Flask and Deploying it to Netlify \n\nhttps://t.co/MuiotCEKgh \n\nLeverage the JAMstack with Python and Flask by creating a static site and deploying it to Netlify.\n\nby @patkennedy79\n\n#Flask #JAMStack #DevOps @Netlify",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565343316644085760",
            "tweet_type": "Others",
            "created_at": "2022-09-01T14:18:24.000Z"
        },
        {
            "id": 852,
            "username": "alexxubyte",
            "tweet_id": "1565365023114813440",
            "tweet_text": "/1 What happens behind the scenes when we \ud835\udc2c\ud835\udc21\ud835\udc28\ud835\udc29 \ud835\udc28\ud835\udc27\ud835\udc25\ud835\udc22\ud835\udc27\ud835\udc1e?\n\nDisclaimer: I have limited knowledge of the eCommerce system. The diagram below is based on my research. Please suggest better names for the components or let me know if you spot an error. https://t.co/xWObNKoxsl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblLMQJVEAAiFEk.jpg\"]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:39.000Z"
        },
        {
            "id": 851,
            "username": "alexxubyte",
            "tweet_id": "1565365031188869121",
            "tweet_text": "/2 The diagram below shows the 4 key business areas in a typical e-commerce company: procurement, inventory, eComm platform, and transportation.\n\n1\ufe0f\u20e3 Procurement\n\nStep 1 - The procurement department selects suppliers and manages contracts with them. https://t.co/MuhLOjCfLQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblLMoSUEAAmjDG.jpg\"]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:41.000Z"
        },
        {
            "id": 850,
            "username": "alexxubyte",
            "tweet_id": "1565365039653015552",
            "tweet_text": "/3 Step 2 - The procurement department places orders with suppliers, manages the return of goods, and settles invoices with suppliers. https://t.co/gTEsDbRGlA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblLNF6UsAA1MYx.jpg\"]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:43.000Z"
        },
        {
            "id": 849,
            "username": "alexxubyte",
            "tweet_id": "1565365048079314944",
            "tweet_text": "/4 2\ufe0f\u20e3 Inventory\nStep 3 - The products or goods from suppliers are delivered to a storage facility. All products/goods are managed by inventory management systems. https://t.co/Tt0hHm3IEI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblLNlbUUAAF1kQ.jpg\"]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:45.000Z"
        },
        {
            "id": 848,
            "username": "alexxubyte",
            "tweet_id": "1565365055901691904",
            "tweet_text": "/5 3\ufe0f\u20e3 eComm platform\nSteps 4-7 - The \u201ceComm platform - Product Management\u201d system creates the product info. The pricing system prices the products. Then products are ready to be listed for sale. The promotion system defines big sale activities, coupons, etc. https://t.co/4Lt1vJjB8y",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblLOEpUUAEewbi.jpg\"]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:47.000Z"
        },
        {
            "id": 847,
            "username": "alexxubyte",
            "tweet_id": "1565365063933837313",
            "tweet_text": "/6 Step 8-11 - Consumers can now purchase products on the e-commerce APP. First, users register or log in to the APP. Next, users browse the product list and details, adding products to the shopping cart. They then place purchasing orders. https://t.co/Wjm53kL4G2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblLOh2UEAUSuU9.jpg\"]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:48.000Z"
        },
        {
            "id": 846,
            "username": "alexxubyte",
            "tweet_id": "1565365067553447937",
            "tweet_text": "/7 Steps 12,13 - The order management system reserves stock in the inventory management system. Then the users pay for the product.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:49.000Z"
        },
        {
            "id": 845,
            "username": "alexxubyte",
            "tweet_id": "1565365074587369472",
            "tweet_text": "/8 4\ufe0f\u20e3 Transportation\nSteps 14,15 - The inventory system sends the outbound order to the transportation system, which manages the physical delivery of the goods.\n\nStep 16 - Sign for item delivery (optional) https://t.co/QCUFNjDvH0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblLPIlUEAAOF3Z.jpg\"]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:51.000Z"
        },
        {
            "id": 844,
            "username": "alexxubyte",
            "tweet_id": "1565365078353817600",
            "tweet_text": "/9 Over to you: If a user buys many products, their big order might be divided into several small orders based on warehouse locations, product types, etc. Where would you place the \u201corder splitting\u201d system in the process outlined below?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:52.000Z"
        },
        {
            "id": 843,
            "username": "alexxubyte",
            "tweet_id": "1565365080849412096",
            "tweet_text": "/10 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/TIQAPxPFjj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565365023114813440",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-01T15:44:53.000Z"
        },
        {
            "id": 1389,
            "username": "bascodes",
            "tweet_id": "1565373281091346432",
            "tweet_text": "Django is trending!\n\nA good opportunity to remind you of @DjangoConEurope \n\n\ud83d\udcc5 September 21st-25th\n\ud83d\uddfa\ufe0f Porto, Portugal\n\nSee you there?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565373281091346432",
            "tweet_type": "Others",
            "created_at": "2022-09-01T16:17:28.000Z"
        },
        {
            "id": 1388,
            "username": "bascodes",
            "tweet_id": "1565373282559447040",
            "tweet_text": "I will give a talk about #Django's ORM internals\n\nhttps://t.co/Lh9ZB4Y9BE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565373281091346432",
            "tweet_type": "Others",
            "created_at": "2022-09-01T16:17:28.000Z"
        },
        {
            "id": 1616,
            "username": "testdrivenio",
            "tweet_id": "1565376442245865473",
            "tweet_text": "Python tip\n\nYou can configure custom encoders for selected types to customize the serialization of creation type across multiple schemas\n\ne.g. customize date serialization\n\n\ud83d\udc47 https://t.co/iQ10Ywvmel",
            "tweet_media": "[\"https://pbs.twimg.com/media/FblVk5wUcAES0_0.png\"]",
            "tweet_conversation_id": "1565376442245865473",
            "tweet_type": "Others",
            "created_at": "2022-09-01T16:30:01.000Z"
        },
        {
            "id": 1615,
            "username": "testdrivenio",
            "tweet_id": "1565376445773660165",
            "tweet_text": "You can find this and other tips here:        \n\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565376442245865473",
            "tweet_type": "Others",
            "created_at": "2022-09-01T16:30:02.000Z"
        },
        {
            "id": 1387,
            "username": "bascodes",
            "tweet_id": "1565459231322537987",
            "tweet_text": "4\u20e3 months to go \u2013 a third of a year still ahead!\n\nWhat are your plans, goals, and dreams? https://t.co/hveicf6WOz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565459231322537987",
            "tweet_type": "Others",
            "created_at": "2022-09-01T21:59:00.000Z"
        },
        {
            "id": 1386,
            "username": "bascodes",
            "tweet_id": "1565632659002359808",
            "tweet_text": "Happy Friday, fellow devs! \ud83d\udc4b\n\nI'm collecting interesting articles and projects in the Python universe every week for more than half a year now! Here is what I've found #ThisWeekInPython \ud83d\udc0d\ud83c\udf0c\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:08.000Z"
        },
        {
            "id": 1385,
            "username": "bascodes",
            "tweet_id": "1565632661040906241",
            "tweet_text": "+++\nRemember to check this collection on my blog, too!\n#tweet100\n+++\nhttps://t.co/tM7HF9Rl5w",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:09.000Z"
        },
        {
            "id": 1384,
            "username": "bascodes",
            "tweet_id": "1565632663540715522",
            "tweet_text": "Python Data Visualisation \u2013 by @marklit82\nhttps://t.co/GpB5PdhqQX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:09.000Z"
        },
        {
            "id": 1383,
            "username": "bascodes",
            "tweet_id": "1565632665755308033",
            "tweet_text": "gevent For the Working Python Developer \u2013 by @smdiehl\nhttps://t.co/QICvovWre8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:10.000Z"
        },
        {
            "id": 1382,
            "username": "bascodes",
            "tweet_id": "1565632667634339840",
            "tweet_text": "Accelerate Python code 100x by import taichi as ti\nhttps://t.co/iB2g8Nr3g4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:10.000Z"
        },
        {
            "id": 1381,
            "username": "bascodes",
            "tweet_id": "1565632669563641856",
            "tweet_text": "Python tooling could be much, much faster \u2013 by @charliermarsh\nhttps://t.co/cPairBDI65",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:11.000Z"
        },
        {
            "id": 1380,
            "username": "bascodes",
            "tweet_id": "1565632671576985600",
            "tweet_text": "How to write reliable tests for Python MQTT applications \u2013 by @rareblog\nhttps://t.co/cwNCt6LAkW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:11.000Z"
        },
        {
            "id": 1379,
            "username": "bascodes",
            "tweet_id": "1565632673841807361",
            "tweet_text": "redis-search-django \u2013 Django package that provides auto indexing and searching capabilities for Django model instances using RediSearch \u2013 by @saad_mk11\nhttps://t.co/QuqSnIaTe8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:12.000Z"
        },
        {
            "id": 1378,
            "username": "bascodes",
            "tweet_id": "1565632675779584002",
            "tweet_text": "manim \u2013 A community-maintained Python framework for creating mathematical animations \u2013 by @manim_community\nhttps://t.co/rxfTXgWod5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:12.000Z"
        },
        {
            "id": 1377,
            "username": "bascodes",
            "tweet_id": "1565632677771870208",
            "tweet_text": "Regressio \u2013 A python library for univariate regression, interpolation, and smoothing\nhttps://t.co/EY7FGlWQvV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:13.000Z"
        },
        {
            "id": 1376,
            "username": "bascodes",
            "tweet_id": "1565632679692861442",
            "tweet_text": "PaddleOCR \u2013 Awesome multilingual OCR toolkits based on PaddlePaddle\nhttps://t.co/VdUM3Cj1t1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:13.000Z"
        },
        {
            "id": 1375,
            "username": "bascodes",
            "tweet_id": "1565632681580417026",
            "tweet_text": "django-pgtrigger \u2013 Write Postgres triggers for your Django models\nhttps://t.co/zKJJzkX5Sm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565632659002359808",
            "tweet_type": "Others",
            "created_at": "2022-09-02T09:28:13.000Z"
        },
        {
            "id": 842,
            "username": "alexxubyte",
            "tweet_id": "1565725611531718656",
            "tweet_text": "/1 My system design interview book was translated into different languages. I\u2019m just happy to see them in one place, physically! https://t.co/ps46BZ8ghA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbqTIulUEAEr38v.jpg\"]",
            "tweet_conversation_id": "1565725611531718656",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-02T15:37:30.000Z"
        },
        {
            "id": 841,
            "username": "alexxubyte",
            "tweet_id": "1565725616862744576",
            "tweet_text": "/2 cc my co-author @sahnlam \n\nThe books are available at:\nDigital (vol1 + vol2 in one place): https://t.co/80EUzTQAQh\nPhysical Vol1: https://t.co/JVYVsATTpo\nPhysical Vol2: https://t.co/x2gclGbiRp\n\nNote: Only the Digital Version of Vol2 is available in India at the moment.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565725611531718656",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-02T15:37:31.000Z"
        },
        {
            "id": 1614,
            "username": "testdrivenio",
            "tweet_id": "1565734166876012545",
            "tweet_text": "Continuously Deploying Django to Linode with Docker and GitHub Actions \n\nhttps://t.co/NXOQgX5Yk2 \n\nLooks at how to configure GitHub Actions to continuously deploy a Django and Docker application to Linode.\n\n#Django @Linode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565734166876012545",
            "tweet_type": "Others",
            "created_at": "2022-09-02T16:11:29.000Z"
        },
        {
            "id": 1613,
            "username": "testdrivenio",
            "tweet_id": "1565738832275746816",
            "tweet_text": "Python clean code tip:\n\nUse dependency injection to simplify testing\n\n\ud83d\udc47 https://t.co/2LuwsSktr1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbqfKvIakAAY4qf.png\"]",
            "tweet_conversation_id": "1565738832275746816",
            "tweet_type": "Python tips",
            "created_at": "2022-09-02T16:30:02.000Z"
        },
        {
            "id": 840,
            "username": "alexxubyte",
            "tweet_id": "1566085903105134594",
            "tweet_text": "Next week, we will cover:\n\n\u25ba GraphQL\n\u25ba API gateway\n\u25ba Microservice patterns\n\u25ba SQL optimization tips\n\u25ba Kubernetes\n\nJoin a growing community of more than 100,000 readers who love System Design. Subscribe here: \nhttps://t.co/dkjDPxrTOt https://t.co/qtokMokibR",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbvatg9VEAETzaI.jpg\"]",
            "tweet_conversation_id": "1566085903105134594",
            "tweet_type": "Others",
            "created_at": "2022-09-03T15:29:10.000Z"
        },
        {
            "id": 1612,
            "username": "testdrivenio",
            "tweet_id": "1566101217570222080",
            "tweet_text": "Python clean test tip:\n\nFor the most part, the tests you write should cover:\nall happy paths\nedge/corner/boundary cases\nnegative test cases\nsecurity and illegal issues\n\ud83d\udc47 https://t.co/lAXbAxtxrB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbvowWQaIAEe-7W.png\"]",
            "tweet_conversation_id": "1566101217570222080",
            "tweet_type": "Python tips",
            "created_at": "2022-09-03T16:30:01.000Z"
        },
        {
            "id": 1374,
            "username": "bascodes",
            "tweet_id": "1566107030443663360",
            "tweet_text": "\u2753\ud83d\udc0d Two solutions for a very similar use case in Python:\n\nAn on-demand class for storing attributes can be created as a \ud835\ude97\ud835\ude8a\ud835\ude96\ud835\ude8e\ud835\ude8d\ud835\ude9d\ud835\ude9e\ud835\ude99\ud835\ude95\ud835\ude8e or as a \ud835\ude8d\ud835\ude8a\ud835\ude9d\ud835\ude8a\ud835\ude8c\ud835\ude95\ud835\ude8a\ud835\ude9c\ud835\ude9c\n\nWhich way do you prefer and why?\n\n#tweet100 https://t.co/UNu5bXpm41",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbvt5OSXEAMNonK.jpg\", \"https://pbs.twimg.com/media/Fbvt6M0XkAYAaes.jpg\"]",
            "tweet_conversation_id": "1566107030443663360",
            "tweet_type": "Others",
            "created_at": "2022-09-03T16:53:07.000Z"
        },
        {
            "id": 1373,
            "username": "bascodes",
            "tweet_id": "1566385394765242369",
            "tweet_text": "Charity Burger Sunday!\n#tweet100 https://t.co/36H6qrTyMs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbzrNdnWYAASZhp.jpg\"]",
            "tweet_conversation_id": "1566385394765242369",
            "tweet_type": "Others",
            "created_at": "2022-09-04T11:19:14.000Z"
        },
        {
            "id": 1611,
            "username": "testdrivenio",
            "tweet_id": "1566441070581485568",
            "tweet_text": "Adding Social Authentication to Django\n\nhttps://t.co/eAbbGKCbow\n\nLooks at how to add social auth to a Django app with Django Allauth.\n\nby @amal_ytics\n\n#Django #Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566441070581485568",
            "tweet_type": "Others",
            "created_at": "2022-09-04T15:00:28.000Z"
        },
        {
            "id": 1610,
            "username": "testdrivenio",
            "tweet_id": "1566463605175754754",
            "tweet_text": "Python clean test tip:\n\nA test should not depend on the state of any other tests or external services.\n\n\ud83d\udc47 https://t.co/LWCdU7KuEg",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb0yWHUUYAAXbQz.png\"]",
            "tweet_conversation_id": "1566463605175754754",
            "tweet_type": "Python tips",
            "created_at": "2022-09-04T16:30:01.000Z"
        },
        {
            "id": 1372,
            "username": "bascodes",
            "tweet_id": "1566467788914442244",
            "tweet_text": "If people ask what\u2019s wrong in academia, show them this tweet \ud83d\udc47 https://t.co/7Q3PxFepGd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566467788914442244",
            "tweet_type": "Others",
            "created_at": "2022-09-04T16:46:39.000Z"
        },
        {
            "id": 1371,
            "username": "bascodes",
            "tweet_id": "1566746597370773504",
            "tweet_text": "It's Monday! \ud83d\udc4b\n\nDo you have any negative feelings about Mondays?\n\nIt doesn't have to be that way. Here are some tips for a better life as a developer. \ud83d\udc47\n\n#fitdevs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:32.000Z"
        },
        {
            "id": 1370,
            "username": "bascodes",
            "tweet_id": "1566746599342080001",
            "tweet_text": "1. Improve your environment\n\nYou should love your job. That can be because of coworkers, your contribution to a larger thing, interesting challenges, or anything else. If you don't find anything positive, leave. Now!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:32.000Z"
        },
        {
            "id": 1369,
            "username": "bascodes",
            "tweet_id": "1566746601514831872",
            "tweet_text": "2. Take care of balance\n\nThinking about tech problems a whole day puts stress on your mind. Embed some physical activity in your day. Take a walk, hit the gym, or stretch for a short time each day, and you will feel more energized. \n\nI know it's hard to start, but give it a try",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:33.000Z"
        },
        {
            "id": 1368,
            "username": "bascodes",
            "tweet_id": "1566746603628658689",
            "tweet_text": "3. Digital Detox\n\nThis again sounds hard and useless. But try to create your own experiences for one day rather than consuming Social Media or Netflix. Visit a museum, cook a delicious meal, or do something creative. This day will feel so much richer than binge-watching.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:33.000Z"
        },
        {
            "id": 1367,
            "username": "bascodes",
            "tweet_id": "1566746605545463811",
            "tweet_text": "4. Stay hydrated\n\nTrivial but tremendously useful: Two-thirds of your body is water. Probably the easiest and cheapest way to improve your overall well-being is to take care of your water intake. Aim for at least 2 litres a day (half a gallon) \u2013 Drink more if you can.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:34.000Z"
        },
        {
            "id": 1366,
            "username": "bascodes",
            "tweet_id": "1566746608540295168",
            "tweet_text": "5. Improve nutrition\n\nI know what you think: Not another diet. \n\nLet me put it that way: What about replacing your only one candy bar snack a day with something of more nutritional value? A handful of nuts, a green smoothie, or an apple could work wonders.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:34.000Z"
        },
        {
            "id": 1365,
            "username": "bascodes",
            "tweet_id": "1566746610771574785",
            "tweet_text": "6. Practise gratitude\n\nThere are a lot of negative thoughts in all of us during a stressful day. Try to find one thing a day you're grateful for. If it's because someone made you feel better, tell them. Make a compliment to another person each day. Soon you'll walk with a smile.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:35.000Z"
        },
        {
            "id": 1364,
            "username": "bascodes",
            "tweet_id": "1566746613527314432",
            "tweet_text": "7. Set small goals\n\nIf you find it hard to start a task, just commit to 2 minds doing it. That's not a huge investment, but once you've started, the rest of the task will feel easier!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:36.000Z"
        },
        {
            "id": 1363,
            "username": "bascodes",
            "tweet_id": "1566746615339180035",
            "tweet_text": "8. Find a sparring partner\n\nYou're not alone. Find someone you can talk to about your feelings and stress levels. You'll notice that you're not alone. Talking with someone who shares your experiences can also help mutual motivation!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746597370773504",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:36.000Z"
        },
        {
            "id": 839,
            "username": "alexxubyte",
            "tweet_id": "1566814679720022016",
            "tweet_text": "A visual guide on troubleshooting Kubernetes deployments by @learnk8s \n\nKubernetes is really complex. What steps can be automated?\n\nJoin a growing community of more than 100,000 readers who love the System Design newsletter. Subscribe here:\n\nhttps://t.co/PczMAd8Jdb https://t.co/9J5EjEUPWz",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5xpTDUIAIu2Rb.png\"]",
            "tweet_conversation_id": "1566814679720022016",
            "tweet_type": "Others",
            "created_at": "2022-09-05T15:45:04.000Z"
        },
        {
            "id": 1362,
            "username": "bascodes",
            "tweet_id": "1566818442543616001",
            "tweet_text": "Finally made it! This is my last tweet under the #tweet100 challenge by @jayclouse.\n\nI even made it to the top position on the leaderboard.\n\nIt was a ride! Sometimes I had few ideas about what to tweet, but I thank all of my 1218 new followers for reading through it!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566818442543616001",
            "tweet_type": "Others",
            "created_at": "2022-09-05T16:00:01.000Z"
        },
        {
            "id": 1609,
            "username": "testdrivenio",
            "tweet_id": "1566825995415392257",
            "tweet_text": "Python clean code tip:\n\nUse contract testing when you want to verify the same behavior for different implementations.\n\n\ud83d\udc47 https://t.co/DWMus5Btvk",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5779ZVUAErTgE.png\"]",
            "tweet_conversation_id": "1566825995415392257",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T16:30:02.000Z"
        },
        {
            "id": 838,
            "username": "alexxubyte",
            "tweet_id": "1566878879075033088",
            "tweet_text": "Enjoy this thread?\n\nYou might like our System Design newsletter as well:\n\nhttps://t.co/xGSJj1Fqv5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566814679720022016",
            "tweet_type": "Others",
            "created_at": "2022-09-05T20:00:10.000Z"
        },
        {
            "id": 837,
            "username": "alexxubyte",
            "tweet_id": "1566945135400628224",
            "tweet_text": "Louie is great at teaching. If you are interested in starting a newsletter, this is a good learning opportunity. https://t.co/HvjmU5hnok",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566945135400628224",
            "tweet_type": "Others",
            "created_at": "2022-09-06T00:23:27.000Z"
        },
        {
            "id": 1361,
            "username": "bascodes",
            "tweet_id": "1567104896939294720",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Here is a quick #pythontip:\n\nYou can use the Counter object to easily find the nth most common object in a collection https://t.co/VP0xFYZJDP",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb95i_IXwAA1Dlj.png\"]",
            "tweet_conversation_id": "1567104896939294720",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T10:58:17.000Z"
        },
        {
            "id": 1608,
            "username": "testdrivenio",
            "tweet_id": "1567152979442016260",
            "tweet_text": "Using Hypothesis and Schemathesis to Test FastAPI \n\nhttps://t.co/SkG1dS9zkf \n\nby @amal_ytics\n\n#FastAPI #Testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567152979442016260",
            "tweet_type": "Others",
            "created_at": "2022-09-06T14:09:21.000Z"
        },
        {
            "id": 836,
            "username": "alexxubyte",
            "tweet_id": "1567177071725793283",
            "tweet_text": "/1 What does API gateway do?\n\nThe diagram below shows the detail. https://t.co/VyWtC99Knw",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb-7PINaMAMwGse.jpg\"]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-06T15:45:05.000Z"
        },
        {
            "id": 835,
            "username": "alexxubyte",
            "tweet_id": "1567177082551271432",
            "tweet_text": "/2 Step 1 - The client sends an HTTP request to the API gateway.\n\nStep 2 - The API gateway parses and validates the attributes in the HTTP request.\n\nStep 3 - The API gateway performs whitelist or blacklist checks. https://t.co/QU5cbqXneK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb-7Px5aQAMAyQH.jpg\"]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-06T15:45:07.000Z"
        },
        {
            "id": 834,
            "username": "alexxubyte",
            "tweet_id": "1567177095281004545",
            "tweet_text": "/3 Step 4 - The API gateway talks to an identity provider for authentication and authorization.\n\nStep 5 - The rate limiting rules are applied to the request. If it is over the limit, the request is rejected. https://t.co/o6yzZ91irl",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb-7QZmaQAASJhW.jpg\"]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-06T15:45:10.000Z"
        },
        {
            "id": 833,
            "username": "alexxubyte",
            "tweet_id": "1567177106941186049",
            "tweet_text": "/4 Steps 6 and 7 - Now that the request has passed basic checks, the API gateway finds the relevant service to route to by path matching.\n\nStep 8 - The API gateway transforms the request into the appropriate protocol and sends it to backend microservices. https://t.co/Whs7ncXLVY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb-7RIPaMAAnQlL.jpg\"]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-06T15:45:13.000Z"
        },
        {
            "id": 832,
            "username": "alexxubyte",
            "tweet_id": "1567177118936887297",
            "tweet_text": "/5 Steps 9-12: The API gateway can handle errors properly, and deals with faults if the error takes a longer time to recover (circuit break). It can also leverage ELK (Elastic-Logstash-Kibana) stack for logging and monitoring. We sometimes cache data in the API gateway. https://t.co/OlMPStVF36",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb-7Rz3aUAAIRxy.jpg\"]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-06T15:45:16.000Z"
        },
        {
            "id": 831,
            "username": "alexxubyte",
            "tweet_id": "1567177123001147394",
            "tweet_text": "/6 Over to you: 1) What\u2019s the difference between a load balancer and an API gateway?\n\n2) Do we need to use different API gateways for PC, mobile and browser separately?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-06T15:45:17.000Z"
        },
        {
            "id": 830,
            "username": "alexxubyte",
            "tweet_id": "1567177125744230402",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/jCWNDbwzxj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-06T15:45:18.000Z"
        },
        {
            "id": 1607,
            "username": "testdrivenio",
            "tweet_id": "1567188381981089792",
            "tweet_text": "Python clean code tip:\n\nUse enums to group related constants.\nWhy?\nAutocomplete\nStatic type checking\n\ud83d\udc47 https://t.co/AEq7pfuOGN",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb_FhqHakActB8z.png\"]",
            "tweet_conversation_id": "1567188381981089792",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T16:30:01.000Z"
        },
        {
            "id": 829,
            "username": "alexxubyte",
            "tweet_id": "1567195582565089286",
            "tweet_text": "Edit: update whitelist/blacklist to the modern equivalents allow-list/deny-list https://t.co/dpyGupo9Z5",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb_Lwc5aMAEn8VY.jpg\"]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Others",
            "created_at": "2022-09-06T16:58:38.000Z"
        },
        {
            "id": 828,
            "username": "alexxubyte",
            "tweet_id": "1567198459434012679",
            "tweet_text": "Enjoy this thread?\n\nYou might like our System Design newsletter as well:\n\nhttps://t.co/xGSJj1XzJd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567177071725793283",
            "tweet_type": "Others",
            "created_at": "2022-09-06T17:10:04.000Z"
        },
        {
            "id": 1360,
            "username": "bascodes",
            "tweet_id": "1567388742419156994",
            "tweet_text": "Anyone in the #100Devs catch up crew?\n\nWhat goes well and what are you struggling with?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567388742419156994",
            "tweet_type": "Others",
            "created_at": "2022-09-07T05:46:11.000Z"
        },
        {
            "id": 1606,
            "username": "testdrivenio",
            "tweet_id": "1567487739527925762",
            "tweet_text": "Continuous Delivery in an Agile World \n\nhttps://t.co/xjB5rbxFPn \n\nCovers:\n\n1\u20e3What's Continuous Delivery?\n2\u20e3Why is it a competitive advantage?\n3\u20e3What does the process look like?\n\nby @gasparevitta\n\n#DevOps",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567487739527925762",
            "tweet_type": "Others",
            "created_at": "2022-09-07T12:19:34.000Z"
        },
        {
            "id": 827,
            "username": "alexxubyte",
            "tweet_id": "1567539463072673792",
            "tweet_text": "/1 What is GraphQL? Is it a replacement for the REST API?\n\nThe diagram below shows the quick comparison between REST and GraphQL. https://t.co/fGyd8FDejM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcEE056aIAUU7YS.jpg\"]",
            "tweet_conversation_id": "1567539463072673792",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-07T15:45:06.000Z"
        },
        {
            "id": 826,
            "username": "alexxubyte",
            "tweet_id": "1567539468600770560",
            "tweet_text": "/2 \ud83d\udd39GraphQL is a query language for APIs developed by Meta. It provides a complete description of the data in the API and gives clients the power to ask for exactly what they need.\n\n\ud83d\udd39GraphQL servers sit in between the client and the backend services.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567539463072673792",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-07T15:45:07.000Z"
        },
        {
            "id": 825,
            "username": "alexxubyte",
            "tweet_id": "1567539471322861568",
            "tweet_text": "/3 \ud83d\udd39GraphQL can aggregate multiple REST requests into one query. GraphQL server organizes the resources in a graph.\n\n\ud83d\udd39GraphQL supports queries, mutations (applying data modifications to resources), and subscriptions (receiving notifications on schema modifications).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567539463072673792",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-07T15:45:08.000Z"
        },
        {
            "id": 824,
            "username": "alexxubyte",
            "tweet_id": "1567539473998823425",
            "tweet_text": "/4 We discussed the REST API in last week\u2019s video and will compare REST vs. GraphQL vs. gRPC in a separate post/video.\n\nOver to you:\n\n1). Is GraphQL a database technology?\n\n2). Do you recommend GraphQL? Why/why not?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567539463072673792",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-07T15:45:08.000Z"
        },
        {
            "id": 823,
            "username": "alexxubyte",
            "tweet_id": "1567539476729311236",
            "tweet_text": "/5 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/VU340giLSL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567539463072673792",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-07T15:45:09.000Z"
        },
        {
            "id": 1605,
            "username": "testdrivenio",
            "tweet_id": "1567550786242215936",
            "tweet_text": "Python clean code tip:\n\nUse Protocol to define the interface required by your function/method instead of using real objects. \n\nThis way, your function/method defines what it needs.\n\n\ud83d\udc47 https://t.co/YGhjaJIDsz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcEPIUgaQAAhsZW.png\"]",
            "tweet_conversation_id": "1567550786242215936",
            "tweet_type": "Python tips",
            "created_at": "2022-09-07T16:30:05.000Z"
        },
        {
            "id": 1359,
            "username": "bascodes",
            "tweet_id": "1567818714346672130",
            "tweet_text": "What career advice would you have liked to have received years ago?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567818714346672130",
            "tweet_type": "Others",
            "created_at": "2022-09-08T10:14:44.000Z"
        },
        {
            "id": 1604,
            "username": "testdrivenio",
            "tweet_id": "1567883529505095680",
            "tweet_text": "Wondering which authentication method to choose for your application?\n\nCheck out this list of web authentication methods with pros and cons and possible vulnerabilities for each.\n\nby @amal_ytics\n\nhttps://t.co/VjbJv0gh0f\n\n#Python #CyberSecurity #JavaScript",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567883529505095680",
            "tweet_type": "Others",
            "created_at": "2022-09-08T14:32:17.000Z"
        },
        {
            "id": 822,
            "username": "alexxubyte",
            "tweet_id": "1567901844994928641",
            "tweet_text": "/1 Choosing the right database is often the most important decision we'll ever make.\n\nWe are talking about a database for a real growing business, where a bad choice would lead to extended downtime, customer impact, and even data loss.\n\nThis take is probably a bit controversial. https://t.co/BN3XKKjhIG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcJOaoPagAAg8rt.jpg\"]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:04.000Z"
        },
        {
            "id": 821,
            "username": "alexxubyte",
            "tweet_id": "1567901850271383552",
            "tweet_text": "/2 The thread was written by  @sahnlam and illustrated by me.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:05.000Z"
        },
        {
            "id": 820,
            "username": "alexxubyte",
            "tweet_id": "1567901852938956800",
            "tweet_text": "/3 \ud835\udc05\ud835\udc22\ud835\udc2b\ud835\udc2c\ud835\udc2d, \ud835\udc1a\ud835\udc2b\ud835\udc1e \ud835\udc30\ud835\udc1e \ud835\udc29\ud835\udc28\ud835\udc2c\ud835\udc22\ud835\udc2d\ud835\udc22\ud835\udc2f\ud835\udc1e \ud835\udc2d\ud835\udc21\ud835\udc1a\ud835\udc2d \ud835\udc30\ud835\udc1e \ud835\udc27\ud835\udc1e\ud835\udc1e\ud835\udc1d \ud835\udc1a \ud835\udc1d\ud835\udc22\ud835\udc1f\ud835\udc1f\ud835\udc1e\ud835\udc2b\ud835\udc1e\ud835\udc27\ud835\udc2d \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc1a\ud835\udc2c\ud835\udc1e? Is the existing database breaking at the seams? Maybe the p95 latency is through the roof. Maybe the working set is overflowing the available memory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:06.000Z"
        },
        {
            "id": 819,
            "username": "alexxubyte",
            "tweet_id": "1567901855614902274",
            "tweet_text": "/4 \ud835\udc16\ud835\udc21\ud835\udc1a\ud835\udc2d\ud835\udc1e\ud835\udc2f\ud835\udc1e\ud835\udc2b \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc22\ud835\udc2c\ud835\udc2c\ud835\udc2e\ud835\udc1e\ud835\udc2c \ud835\udc1a\ud835\udc2b\ud835\udc1e, \ud835\udc26\ud835\udc1a\ud835\udc24\ud835\udc1e \ud835\udc2c\ud835\udc2e\ud835\udc2b\ud835\udc1e \ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc32 \ud835\udc1a\ud835\udc2b\ud835\udc1e \ud835\udc27\ud835\udc28\ud835\udc2d \ud835\udc1e\ud835\udc1a\ud835\udc2c\ud835\udc22\ud835\udc25\ud835\udc32 \ud835\udc2c\ud835\udc28\ud835\udc25\ud835\udc2f\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e.\n\nLet\u2019s read the database manual of our current database system. There could be configuration knobs that we can tweak to give us a bit more breathing room.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:07.000Z"
        },
        {
            "id": 818,
            "username": "alexxubyte",
            "tweet_id": "1567901858370551808",
            "tweet_text": "/5 Can we put a cache in front of it, and give us a few more months of runway?\n\nCan we add read replicas to shed some read load?\n\nCan we shard the database, or partition the data in some way?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:07.000Z"
        },
        {
            "id": 817,
            "username": "alexxubyte",
            "tweet_id": "1567901861054939136",
            "tweet_text": "/6 The bottom line is this: Migrating live production data is risky and costly. We better be damn sure that there is no way to keep using the current database.\n\nWe have exhausted all avenues for the current database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:08.000Z"
        },
        {
            "id": 816,
            "username": "alexxubyte",
            "tweet_id": "1567901863739281408",
            "tweet_text": "/7 \ud835\udc07\ud835\udc28\ud835\udc30 \ud835\udc1d\ud835\udc28 \ud835\udc30\ud835\udc1e \ud835\udc20\ud835\udc28 \ud835\udc1a\ud835\udc1b\ud835\udc28\ud835\udc2e\ud835\udc2d \ud835\udc1c\ud835\udc21\ud835\udc28\ud835\udc28\ud835\udc2c\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc27\ud835\udc1e\ud835\udc31\ud835\udc2d \ud835\udc28\ud835\udc27\ud835\udc1e?\n\nWe developers are naturally drawn to the new and shiny, like moths to flame. When it comes to databases, though, boring is good.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:09.000Z"
        },
        {
            "id": 815,
            "username": "alexxubyte",
            "tweet_id": "1567901866473979904",
            "tweet_text": "/8 We should prefer the ones that have been around for a long time, and have been battle tested.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:09.000Z"
        },
        {
            "id": 814,
            "username": "alexxubyte",
            "tweet_id": "1567901869183479808",
            "tweet_text": "/9 \ud835\udc12\ud835\udc28\ud835\udc1f\ud835\udc2d\ud835\udc30\ud835\udc1a\ud835\udc2b\ud835\udc1e \ud835\udc1e\ud835\udc27\ud835\udc20\ud835\udc22\ud835\udc27\ud835\udc1e\ud835\udc1e\ud835\udc2b\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc1a\ud835\udc2d \ud835\udc2c\ud835\udc1c\ud835\udc1a\ud835\udc25\ud835\udc1e \ud835\udc22\ud835\udc2c \ud835\udc1a\ud835\udc1b\ud835\udc28\ud835\udc2e\ud835\udc2d \ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc1d\ud835\udc1e\ud835\udc28\ud835\udc1f\ud835\udc1f\ud835\udc2c. \ud835\udc16\ud835\udc21\ud835\udc1e\ud835\udc27 \ud835\udc22\ud835\udc2d \ud835\udc1c\ud835\udc28\ud835\udc26\ud835\udc1e\ud835\udc2c \ud835\udc2d\ud835\udc28 \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc1a\ud835\udc2c\ud835\udc1e\ud835\udc2c, \ud835\udc22\ud835\udc2d \ud835\udc22\ud835\udc2c \ud835\udc1e\ud835\udc2f\ud835\udc1e\ud835\udc27 \ud835\udc26\ud835\udc28\ud835\udc2b\ud835\udc1e \ud835\udc2d\ud835\udc2b\ud835\udc2e\ud835\udc1e.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:10.000Z"
        },
        {
            "id": 813,
            "username": "alexxubyte",
            "tweet_id": "1567901871947534338",
            "tweet_text": "/10 Instead of reading the shiny brochures, go read the manual. There is usually a page called \u201cLimits\u201d. That page is a gem.\n\nLearn as much as possible about the candidate now. The investment is relatively small at this juncture.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:11.000Z"
        },
        {
            "id": 812,
            "username": "alexxubyte",
            "tweet_id": "1567901874736758787",
            "tweet_text": "/11 \ud835\udc0e\ud835\udc27\ud835\udc1c\ud835\udc1e \ud835\udc30\ud835\udc1e \ud835\udc27\ud835\udc1a\ud835\udc2b\ud835\udc2b\ud835\udc28\ud835\udc30 \ud835\udc1d\ud835\udc28\ud835\udc30\ud835\udc27 \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc1a\ud835\udc2c\ud835\udc1e \ud835\udc28\ud835\udc29\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\ud835\udc2c, \ud835\udc30\ud835\udc21\ud835\udc1a\ud835\udc2d\u2019\ud835\udc2c \ud835\udc27\ud835\udc1e\ud835\udc31\ud835\udc2d?\n\nCreate a realistic test bench for the candidates using our data, with our real-world access patterns.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:11.000Z"
        },
        {
            "id": 811,
            "username": "alexxubyte",
            "tweet_id": "1567901877484007430",
            "tweet_text": "/12 During benchmarking, pay attention to the outliers. Measure P99 of everything. The average is not meaningful.\n\nAfter everything checks out, plan the migration carefully. Write out a detailed step-by-step migration plan.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:12.000Z"
        },
        {
            "id": 810,
            "username": "alexxubyte",
            "tweet_id": "1567901880130613248",
            "tweet_text": "/13 Picking the right database is not glamorous, and there is a lot of hard work involved. Migrating to a new database in the real world could take years at a high scale.\n\nGood luck.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:13.000Z"
        },
        {
            "id": 809,
            "username": "alexxubyte",
            "tweet_id": "1567901882827554818",
            "tweet_text": "/14 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/rn3ePtp31o",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-08T15:45:13.000Z"
        },
        {
            "id": 1603,
            "username": "testdrivenio",
            "tweet_id": "1567913157418696704",
            "tweet_text": "Python Clean Code Tip:\n\nUse docstrings to document usage of your modules, classes, and functions\n\n\ud83d\udc47 https://t.co/Zxps7k4p9o",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcJYtKBakAANIA8.png\"]",
            "tweet_conversation_id": "1567913157418696704",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T16:30:01.000Z"
        },
        {
            "id": 808,
            "username": "alexxubyte",
            "tweet_id": "1568056785881415680",
            "tweet_text": "Enjoy this thread?\n\nYou might like our System Design newsletter as well:\n\nhttps://t.co/xGSJj1XzJd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567901844994928641",
            "tweet_type": "Others",
            "created_at": "2022-09-09T02:00:45.000Z"
        },
        {
            "id": 1358,
            "username": "bascodes",
            "tweet_id": "1568122939282784256",
            "tweet_text": "I bought a @tailwindui license.\n\nI never felt so productive in frontend before. It\u2019s worth it!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568122939282784256",
            "tweet_type": "Others",
            "created_at": "2022-09-09T06:23:37.000Z"
        },
        {
            "id": 1357,
            "username": "bascodes",
            "tweet_id": "1568215562567962624",
            "tweet_text": "Hi fellow devs \ud83d\udc4b\n\nI found some gems #ThisWeekInPython \ud83d\udc0d \u2013 as every Friday!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:40.000Z"
        },
        {
            "id": 1356,
            "username": "bascodes",
            "tweet_id": "1568215564786569216",
            "tweet_text": "+++\nMake sure to check out my blog, too \ud83d\udc47\n+++\nhttps://t.co/P6pZi83szu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:41.000Z"
        },
        {
            "id": 1355,
            "username": "bascodes",
            "tweet_id": "1568215566967529473",
            "tweet_text": "Project: #Pyrun \u2013 Run Python from Tweets \u2013 by @guilatrova\nhttps://t.co/U2NaN3myap",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:41.000Z"
        },
        {
            "id": 1354,
            "username": "bascodes",
            "tweet_id": "1568215569387642882",
            "tweet_text": "Using SQLite from Python \u2013 by @SteveCassidyMQ\nhttps://t.co/2fq1O2l1Av",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:42.000Z"
        },
        {
            "id": 1353,
            "username": "bascodes",
            "tweet_id": "1568215571602227202",
            "tweet_text": "You Can Build Portable Binaries of Python Applications \u2013 by @hynek\nhttps://t.co/24Tx2CgabH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:42.000Z"
        },
        {
            "id": 1352,
            "username": "bascodes",
            "tweet_id": "1568215573691092992",
            "tweet_text": "Python String Methods to Know \u2013 by @treyhunner\nhttps://t.co/AAjAIR5i5o",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:43.000Z"
        },
        {
            "id": 1351,
            "username": "bascodes",
            "tweet_id": "1568215577071853568",
            "tweet_text": "Some ways to get better at debugging \u2013 by @b0rk\nhttps://t.co/hg38NZxwwQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:44.000Z"
        },
        {
            "id": 1350,
            "username": "bascodes",
            "tweet_id": "1568215579890180097",
            "tweet_text": "wakaq \u2013 Distributed background task queue for Python backed by Redis, a super minimal Celery \u2013 by @WakaTime\nhttps://t.co/uz72TO2RE9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:44.000Z"
        },
        {
            "id": 1349,
            "username": "bascodes",
            "tweet_id": "1568215582272626690",
            "tweet_text": "django-airplane \u2013 Django app that caches CDN files for use when coding offline \u2013 by @cltrudeau\nhttps://t.co/S91c9Eyu4P",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:45.000Z"
        },
        {
            "id": 1348,
            "username": "bascodes",
            "tweet_id": "1568215584659341313",
            "tweet_text": "ruff \u2013 An extremely fast Python linter, written in Rust \u2013 by @charliermarsh\nhttps://t.co/cGcYrR6cSR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:46.000Z"
        },
        {
            "id": 1347,
            "username": "bascodes",
            "tweet_id": "1568215587083493379",
            "tweet_text": "mito-ds-monorepo \u2013 The mitosheet package, https://t.co/o4Dyc6HDPT, and other public Mito code \u2013 by @trymito\nhttps://t.co/kpHEihgjQT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:46.000Z"
        },
        {
            "id": 1346,
            "username": "bascodes",
            "tweet_id": "1568215589692260352",
            "tweet_text": "fastapi \u2013 FastAPI framework, high performance, easy to learn, fast to code, ready for production \u2013 by @tiangelo\nhttps://t.co/r4sz4iGunr\nSpecial mention because it has more GitHub Stars than Spring\nhttps://t.co/5cnRVLNmoy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568215562567962624",
            "tweet_type": "Others",
            "created_at": "2022-09-09T12:31:47.000Z"
        },
        {
            "id": 1602,
            "username": "testdrivenio",
            "tweet_id": "1568233412242055168",
            "tweet_text": "Coupling Django with a front-end framework like #React, #Vue, or #Angular? \n\nUse session cookies for auth (even cross-domain).\n\nWhy?\n\n\ud83d\udd38It's easier since Django has a powerful built-in auth framework\n\ud83d\udd38It's safer than using JWTs and localStorage\n\nhttps://t.co/Yg4XmTs5Bd\n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568233412242055168",
            "tweet_type": "Others",
            "created_at": "2022-09-09T13:42:36.000Z"
        },
        {
            "id": 807,
            "username": "alexxubyte",
            "tweet_id": "1568257647727767552",
            "tweet_text": "We created a TikTok account. If you want to see system design videos popping out in your feed from time to time, follow us there:\nhttps://t.co/7PYYOKgX8j https://t.co/zBJJVIrCUa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcORzeUacAE1ljq.jpg\"]",
            "tweet_conversation_id": "1568257647727767552",
            "tweet_type": "Others",
            "created_at": "2022-09-09T15:18:54.000Z"
        },
        {
            "id": 806,
            "username": "alexxubyte",
            "tweet_id": "1568266403815501825",
            "tweet_text": "The videos are also available as Instagram Reels: https://t.co/voQk73PIik",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568257647727767552",
            "tweet_type": "Others",
            "created_at": "2022-09-09T15:53:42.000Z"
        },
        {
            "id": 1601,
            "username": "testdrivenio",
            "tweet_id": "1568275546538405889",
            "tweet_text": "Python Clean Code Tip:\n\nAvoid storing things like secret keys, passwords, connection strings, and API keys inside your code. Instead, use a secrets management solution like AWS Secrets Manager or Vault\n\n\ud83d\udc47 https://t.co/G6OnIDfa7M",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcOiS6PakAIrc0i.png\"]",
            "tweet_conversation_id": "1568275546538405889",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T16:30:02.000Z"
        },
        {
            "id": 1600,
            "username": "testdrivenio",
            "tweet_id": "1568584107147366400",
            "tweet_text": "Documenting Python Code and Projects\n\nhttps://t.co/TRhb7ypNSo\n\nThis article answers these questions:\n\n1\u20e3Why do you need to document your Python code\n2\u20e3What should your project documentation include?\n3\u20e3How do you write and generate documentation?\n\nby @JanGiacomelli\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568584107147366400",
            "tweet_type": "Others",
            "created_at": "2022-09-10T12:56:08.000Z"
        },
        {
            "id": 1345,
            "username": "bascodes",
            "tweet_id": "1568591104852762626",
            "tweet_text": "Some people suggested that I do a podcast about people in tech, their journeys, and their life hacks. \ud83d\udd0a\n\nShould I?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568591104852762626",
            "tweet_type": "Others",
            "created_at": "2022-09-10T13:23:57.000Z"
        },
        {
            "id": 805,
            "username": "alexxubyte",
            "tweet_id": "1568623979770028033",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39Permission system\n\ud83d\udd39Distributed ID\n\ud83d\udd39Cloud patterns\n\ud83d\udd39SQL tips\n\ud83d\udd39Live streaming\n\ud83d\udd39Learn 8 Data Modeling Patterns in Redis (sponsored by @Redisinc). Download at: https://t.co/ORlXmiwW4c\n\nSubscribe to our weekly newsletter at: \nhttps://t.co/dkjDPxaQMt https://t.co/shRTKDlko1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcTew5aaIAEvVUQ.jpg\"]",
            "tweet_conversation_id": "1568623979770028033",
            "tweet_type": "Others",
            "created_at": "2022-09-10T15:34:35.000Z"
        },
        {
            "id": 1599,
            "username": "testdrivenio",
            "tweet_id": "1568637949184712708",
            "tweet_text": "Python Clean Code Tip:\n\nFavor real objects over primitive types such as dictionaries.\n\nWhy?\n\nIt's easier to type https://t.co/KhyjYCFNSh rather than user['name']\nYou'll get help from your IDE\nYou can actually check your code before it runs with mypy\nIt makes your code more clear https://t.co/bAkXMqpBma",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcTr5khagAAgtyn.png\"]",
            "tweet_conversation_id": "1568637949184712708",
            "tweet_type": "Python tips",
            "created_at": "2022-09-10T16:30:05.000Z"
        },
        {
            "id": 1344,
            "username": "bascodes",
            "tweet_id": "1568924796712280067",
            "tweet_text": "What does a healthy diet look like for you? \ud83e\udd51\n#fitdevs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568924796712280067",
            "tweet_type": "Others",
            "created_at": "2022-09-11T11:29:55.000Z"
        },
        {
            "id": 804,
            "username": "alexxubyte",
            "tweet_id": "1568970813516423187",
            "tweet_text": "0/ The Secret Sauce Behind NoSQL: Log-structured merge-tree (LSM Tree) https://t.co/TZv6q7G0sc",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1568969044954587138/pu/vid/1920x1080/Wh7CwNldSeHkl8qu.mp4?tag=14\"]",
            "tweet_conversation_id": "1568970813516423187",
            "tweet_type": "Others",
            "created_at": "2022-09-11T14:32:46.000Z"
        },
        {
            "id": 803,
            "username": "alexxubyte",
            "tweet_id": "1568970815055732736",
            "tweet_text": "1/ This video was made by @sahnlam. Follow our YouTube channel for more videos like this: https://t.co/tbxD2fpOZJ https://t.co/PRNVQRn2nr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcYaTyRaMAATdYN.jpg\"]",
            "tweet_conversation_id": "1568970813516423187",
            "tweet_type": "Others",
            "created_at": "2022-09-11T14:32:47.000Z"
        },
        {
            "id": 1598,
            "username": "testdrivenio",
            "tweet_id": "1568971797508362240",
            "tweet_text": "Securing FastAPI with JWT Token-based Authentication\n\nhttps://t.co/u8Tkva1fIY\n\nLooks at how to enable authentication using  PyJWT to sign, encode, and decode JSON Web Tokens.\n\n#FastAPI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568971797508362240",
            "tweet_type": "Others",
            "created_at": "2022-09-11T14:36:41.000Z"
        },
        {
            "id": 1597,
            "username": "testdrivenio",
            "tweet_id": "1569000321976004608",
            "tweet_text": "Python Clean Code Tip:\n\nUse min to find an element with minimal value inside an iterable. You can provide a custom function as a key argument to serve as a key for the min comparison\n\n\ud83d\udc47 https://t.co/C10wZo7XJb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcY1eZpakAEyIDu.png\"]",
            "tweet_conversation_id": "1569000321976004608",
            "tweet_type": "Python tips",
            "created_at": "2022-09-11T16:30:02.000Z"
        },
        {
            "id": 1343,
            "username": "bascodes",
            "tweet_id": "1569251574026731520",
            "tweet_text": "I experienced a lot with dietary choices over the last two years \ud83d\udc68\u200d\ud83c\udf73\n\nHere is what I found working to improve my energy during the day \ud83d\udc47 https://t.co/04m4gm7h58",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:25.000Z"
        },
        {
            "id": 1342,
            "username": "bascodes",
            "tweet_id": "1569251577021562881",
            "tweet_text": "1. Intermittent Fasting \u23f0\n\nI skip breakfasts. It's hard for the first couple of days but increases my energy so much and eliminates the afternoon low. I aim for an eating window between 6 and 8 hours each day.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:25.000Z"
        },
        {
            "id": 1341,
            "username": "bascodes",
            "tweet_id": "1569251579563327488",
            "tweet_text": "2. Add veggies to each meal \ud83e\udd66\n\nThe more veggies I eat, the less space I have for crap food. So, my diet does not feel like a restriction but rather quality choices",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:26.000Z"
        },
        {
            "id": 1340,
            "username": "bascodes",
            "tweet_id": "1569251582079897601",
            "tweet_text": "3. Avoid sugar \ud83c\udf6c\n\nI try to avoid sugar as much as I can \u2013 I realized it really exaggerates energy levels from high to low. For consistent energy levels, I eat carbs from whole grains mostly",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:27.000Z"
        },
        {
            "id": 1339,
            "username": "bascodes",
            "tweet_id": "1569251585405980676",
            "tweet_text": "4. Eat good fat \ud83e\uded2\n\nI try to avoid deep-fried food as it contains lots of trans fats. Instead, I try to choose healthier fats like olive oil.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:27.000Z"
        },
        {
            "id": 1338,
            "username": "bascodes",
            "tweet_id": "1569251588362862592",
            "tweet_text": "5. Make a ritual \ud83e\udd5b\n\nI can recommend making one meal or snack a ritual. For me, it's a cup of kefir before bedtime with a boiled egg or some avocado slices. I really enjoy it!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:28.000Z"
        },
        {
            "id": 1337,
            "username": "bascodes",
            "tweet_id": "1569251591210803207",
            "tweet_text": "6. Stay hydrated \ud83e\udd64\n\nWhen I feel hungry, I'm most likely more thirsty than hungry. I drink a lot of water over the day and make sure I always have a full glass on my desk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:29.000Z"
        },
        {
            "id": 1336,
            "username": "bascodes",
            "tweet_id": "1569251593626832896",
            "tweet_text": "7. Don't exaggerate \ud83c\udfd6\ufe0f\n\nThere are probably more self-help books about dieting than about any other topic. I was trapped in the rabbit hole for a long time. Pick some advice and then follow it 80% Cravings are ok, don't overstretch your discipline. Enjoyment is part of the process",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:08:29.000Z"
        },
        {
            "id": 1335,
            "username": "bascodes",
            "tweet_id": "1569251936334921728",
            "tweet_text": "Here is what worked for me after two years of research and experimenting\nhttps://t.co/lQ5YIZxW4K",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568924796712280067",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:09:51.000Z"
        },
        {
            "id": 1334,
            "username": "bascodes",
            "tweet_id": "1569252532391665665",
            "tweet_text": "Making healthy choices is important if you spend most of the day in front of a screen\n\nIf these tips helped you, give the first tweet of the thread a RT to help others, too!\n\n#fitdevs #techlife\n\nhttps://t.co/lQ5YIZxW4K",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T09:12:13.000Z"
        },
        {
            "id": 1333,
            "username": "bascodes",
            "tweet_id": "1569269200136421376",
            "tweet_text": "https://t.co/web0TjwJHZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569251574026731520",
            "tweet_type": "Others",
            "created_at": "2022-09-12T10:18:27.000Z"
        },
        {
            "id": 1596,
            "username": "testdrivenio",
            "tweet_id": "1569316977449074689",
            "tweet_text": "The Definitive Guide to Celery and FastAPI - new course!\n\nhttps://t.co/NBtVrzNZfZ\n\nLearn how to add Celery to a FastAPI application to provide asynchronous task processing.\n\nJust updated! \ud83d\ude80\ud83d\udcaa\u2728\n\n10% of profits go back to the @FastAPI team! \ud83d\ude80\n\n#FastAPI #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569316977449074689",
            "tweet_type": "Others",
            "created_at": "2022-09-12T13:28:18.000Z"
        },
        {
            "id": 1332,
            "username": "bascodes",
            "tweet_id": "1569328854488981505",
            "tweet_text": "Python or JavaScript?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569328854488981505",
            "tweet_type": "Others",
            "created_at": "2022-09-12T14:15:30.000Z"
        },
        {
            "id": 802,
            "username": "alexxubyte",
            "tweet_id": "1569348391167197185",
            "tweet_text": "/1 \ud835\udc16\ud835\udc21\ud835\udc1a\ud835\udc2d \ud835\udc00\ud835\udc2b\ud835\udc1e \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc06\ud835\udc2b\ud835\udc1e\ud835\udc1e\ud835\udc27\ud835\udc1e\ud835\udc2c\ud835\udc2d \ud835\udc0f\ud835\udc2b\ud835\udc28\ud835\udc20\ud835\udc2b\ud835\udc1a\ud835\udc26\ud835\udc26\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc0b\ud835\udc1a\ud835\udc27\ud835\udc20\ud835\udc2e\ud835\udc1a\ud835\udc20\ud835\udc1e\ud835\udc2c [1]?\n\nThe study below runs 10 benchmark problems in 28 languages. It measures the runtime, memory usage, and energy consumption of each language. The abstract of the paper is shown below. https://t.co/NyQ8ZpowJI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcdyCc3aIAIMz1n.jpg\"]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:08.000Z"
        },
        {
            "id": 801,
            "username": "alexxubyte",
            "tweet_id": "1569348394761728002",
            "tweet_text": "/2 \u201cThis paper presents a study of the runtime, memory usage and energy consumption of twenty seven well-known software languages. We monitor the performance of such languages using ten different programming problems, expressed in each of the languages.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:09.000Z"
        },
        {
            "id": 800,
            "username": "alexxubyte",
            "tweet_id": "1569348397458681858",
            "tweet_text": "/3 Our results show interesting findings, such as, slower/faster languages consuming less/more energy, and how memory usage influences energy consumption.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:09.000Z"
        },
        {
            "id": 799,
            "username": "alexxubyte",
            "tweet_id": "1569348400277241857",
            "tweet_text": "/4 We show how to use our results to provide software engineers support to decide which language to use when energy efficiency is a concern\u201d. [2]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:10.000Z"
        },
        {
            "id": 798,
            "username": "alexxubyte",
            "tweet_id": "1569348409890578435",
            "tweet_text": "/5 \ud835\udc0c\ud835\udc28\ud835\udc2c\ud835\udc2d \ud835\udc1e\ud835\udc27\ud835\udc2f\ud835\udc22\ud835\udc2b\ud835\udc28\ud835\udc27\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\ud835\udc1a\ud835\udc25\ud835\udc25\ud835\udc32 \ud835\udc1f\ud835\udc2b\ud835\udc22\ud835\udc1e\ud835\udc27\ud835\udc1d\ud835\udc25\ud835\udc32 \ud835\udc25\ud835\udc1a\ud835\udc27\ud835\udc20\ud835\udc2e\ud835\udc1a\ud835\udc20\ud835\udc1e\ud835\udc2c: \ud835\udc02, \ud835\udc11\ud835\udc2e\ud835\udc2c\ud835\udc2d, \ud835\udc1a\ud835\udc27\ud835\udc1d \ud835\udc02++\n\n\ud835\udc0b\ud835\udc1e\ud835\udc1a\ud835\udc2c\ud835\udc2d \ud835\udc1e\ud835\udc27\ud835\udc2f\ud835\udc22\ud835\udc2b\ud835\udc28\ud835\udc27\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\ud835\udc1a\ud835\udc25\ud835\udc25\ud835\udc32-\ud835\udc1f\ud835\udc2b\ud835\udc22\ud835\udc1e\ud835\udc27\ud835\udc1d\ud835\udc25\ud835\udc32 \ud835\udc25\ud835\udc1a\ud835\udc27\ud835\udc20\ud835\udc2e\ud835\udc1a\ud835\udc20\ud835\udc1e\ud835\udc2c: \ud835\udc11\ud835\udc2e\ud835\udc1b\ud835\udc32, \ud835\udc0f\ud835\udc32\ud835\udc2d\ud835\udc21\ud835\udc28\ud835\udc27, \ud835\udc0f\ud835\udc1e\ud835\udc2b\ud835\udc25 https://t.co/g3doCT6JGh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcdyDpGaMAApHCo.jpg\"]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:12.000Z"
        },
        {
            "id": 797,
            "username": "alexxubyte",
            "tweet_id": "1569348413443178497",
            "tweet_text": "/6 [1] https://t.co/RWV7GbysuK\n\n[2] https://t.co/NZZaJca5CE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:13.000Z"
        },
        {
            "id": 796,
            "username": "alexxubyte",
            "tweet_id": "1569348416215592962",
            "tweet_text": "/7 Over to you: What do you think of the accuracy of this analysis?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:14.000Z"
        },
        {
            "id": 795,
            "username": "alexxubyte",
            "tweet_id": "1569348418908356608",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/0PrEPH1TSq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-12T15:33:14.000Z"
        },
        {
            "id": 1595,
            "username": "testdrivenio",
            "tweet_id": "1569362707450843136",
            "tweet_text": "Python Clean Code Tip:\n\nBe consistent with the order of parameters for similar functions/methods.\n\nDon't confuse your readers.\n\n\ud83d\udc47 https://t.co/RIjCuLovZq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fcd_EGGaIAA7KNL.png\"]",
            "tweet_conversation_id": "1569362707450843136",
            "tweet_type": "Python tips",
            "created_at": "2022-09-12T16:30:01.000Z"
        },
        {
            "id": 794,
            "username": "alexxubyte",
            "tweet_id": "1569372996401504262",
            "tweet_text": "Enjoy this thread?\n\nYou might like our System Design newsletter as well:\n\nhttps://t.co/xGSJj1XzJd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569348391167197185",
            "tweet_type": "Others",
            "created_at": "2022-09-12T17:10:54.000Z"
        },
        {
            "id": 1331,
            "username": "bascodes",
            "tweet_id": "1569394718663999491",
            "tweet_text": "This is actually more serious than just a provocative engagement tweet.\n\nHere is why \ud83d\udc47 https://t.co/bUsJG04i4B",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569394718663999491",
            "tweet_type": "Others",
            "created_at": "2022-09-12T18:37:13.000Z"
        },
        {
            "id": 1330,
            "username": "bascodes",
            "tweet_id": "1569394720735895554",
            "tweet_text": "Python and JavaScript are both very versatile languages. There are many problems you can solve with either one of them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569394718663999491",
            "tweet_type": "Others",
            "created_at": "2022-09-12T18:37:14.000Z"
        },
        {
            "id": 1329,
            "username": "bascodes",
            "tweet_id": "1569394722803687424",
            "tweet_text": "JavaScript shines in web dev. You can build frontends and backends with it very easily.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569394718663999491",
            "tweet_type": "Others",
            "created_at": "2022-09-12T18:37:14.000Z"
        },
        {
            "id": 1328,
            "username": "bascodes",
            "tweet_id": "1569394725345718273",
            "tweet_text": "Python is more versatile in other areas of computing. Like data science, machine learning, and even desktop applications.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569394718663999491",
            "tweet_type": "Others",
            "created_at": "2022-09-12T18:37:15.000Z"
        },
        {
            "id": 1327,
            "username": "bascodes",
            "tweet_id": "1569394727430295552",
            "tweet_text": "I get asked quite frequently which languages to learn. My answer is to pick either Python or JavaScript depending on the domain of your intended application. Then become proficient in one of them. And then learn the other one.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569394718663999491",
            "tweet_type": "Others",
            "created_at": "2022-09-12T18:37:15.000Z"
        },
        {
            "id": 1326,
            "username": "bascodes",
            "tweet_id": "1569394729619718145",
            "tweet_text": "With a little experience in software development, it will get easier to pick up new languages. Do that! It will help you understand basic programming concepts better!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569394718663999491",
            "tweet_type": "Others",
            "created_at": "2022-09-12T18:37:16.000Z"
        },
        {
            "id": 1325,
            "username": "bascodes",
            "tweet_id": "1569394937619152902",
            "tweet_text": "https://t.co/GOy0PA5e46",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569328854488981505",
            "tweet_type": "Others",
            "created_at": "2022-09-12T18:38:05.000Z"
        },
        {
            "id": 1324,
            "username": "bascodes",
            "tweet_id": "1569610837798825986",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Today, I stumbled upon a strange behaviour in #Django ORM.\n\nI collect bookmarks and send them out as a digest, so I need to get a list of all bookmarks and then filter out those that have already been sent out as a digest.\n\nThe code looks like that \ud83d\udc47 https://t.co/qmcb8oAUqk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FchfbQKXgAA8llk.jpg\"]",
            "tweet_conversation_id": "1569610837798825986",
            "tweet_type": "Python tips",
            "created_at": "2022-09-13T08:56:00.000Z"
        },
        {
            "id": 1323,
            "username": "bascodes",
            "tweet_id": "1569610840277491713",
            "tweet_text": "Now, for a small number of bookmarks, it works just fine.\n\nOnce the bookmark collection gets larger, the 2nd filter of \ud835\ude8b\ud835\ude98\ud835\ude98\ud835\ude94\ud835\ude96\ud835\ude8a\ud835\ude9b\ud835\ude94\ud835\ude9c produces an empty QuerySet with SQLite\n\nUsing Postgres, it works well for larger numbers \u2049\ufe0f\n\nIf you're looking for me, I'm in debug mode \ud83e\udeb2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569610837798825986",
            "tweet_type": "Others",
            "created_at": "2022-09-13T08:56:00.000Z"
        },
        {
            "id": 1594,
            "username": "testdrivenio",
            "tweet_id": "1569671542329466882",
            "tweet_text": "Python Type Checking\n\nUse type hints to annotate expected types for variables, function parameters, and function returns.\n\nhttps://t.co/gMM2e0rbfB\n\n1\u20e3What is type checking?\n2\u20e3Why do we need it?\n3\u20e3What's the difference between static and runtime type checking?\n\nby @JanGiacomelli",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569671542329466882",
            "tweet_type": "Others",
            "created_at": "2022-09-13T12:57:13.000Z"
        },
        {
            "id": 793,
            "username": "alexxubyte",
            "tweet_id": "1569711854611763202",
            "tweet_text": "/1 Have you noticed that the largest incidents are usually caused by something very small?\n\nA minor error starts the snowball effect that keeps building up. Suddenly, everything is down. https://t.co/hagBi6LaH1",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fci8m7HaMAA9UTx.jpg\"]",
            "tweet_conversation_id": "1569711854611763202",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-13T15:37:24.000Z"
        },
        {
            "id": 792,
            "username": "alexxubyte",
            "tweet_id": "1569711866112528385",
            "tweet_text": "/2 Here are 8 cloud design patterns to reduce the damage done by failures.\n\n- Timeout\n- Retry\n- Circuit breaker\n- Rate limiting\n- Load shedding\n- Bulkhead\n- Back pressure\n- Let it crash https://t.co/vynFt08jak",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fci8njEakAE9yC5.jpg\"]",
            "tweet_conversation_id": "1569711854611763202",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-13T15:37:27.000Z"
        },
        {
            "id": 791,
            "username": "alexxubyte",
            "tweet_id": "1569711869677686785",
            "tweet_text": "/3 These patterns are usually not used alone. To apply them effectively, we need to understand why we need them, how they work, and their limitations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569711854611763202",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-13T15:37:28.000Z"
        },
        {
            "id": 790,
            "username": "alexxubyte",
            "tweet_id": "1569711872420757510",
            "tweet_text": "/4 Over to you:\n\n1). Which pattern do you think is important but not on the list?\n\n2). Do you have any experience dealing with failures/outages? If so, please share so we can all learn from it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569711854611763202",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-13T15:37:28.000Z"
        },
        {
            "id": 789,
            "username": "alexxubyte",
            "tweet_id": "1569711875105112064",
            "tweet_text": "/5 This is part 1 of the cloud design pattern series. Subscribe to our weekly newsletter for future updates: https://t.co/dkjDPxaQMt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569711854611763202",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-13T15:37:29.000Z"
        },
        {
            "id": 788,
            "username": "alexxubyte",
            "tweet_id": "1569711877848203274",
            "tweet_text": "/6 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/GTnrBazWrx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569711854611763202",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-13T15:37:30.000Z"
        },
        {
            "id": 1593,
            "username": "testdrivenio",
            "tweet_id": "1569725114341814272",
            "tweet_text": "Python Clean Code Tip:\n\nAvoid using floats when you need precise results. Use Decimal instead.\ne.g. prices\n\n\ud83d\udc47 https://t.co/NKgJm0cpJm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcjIq8yaQAARoQP.png\"]",
            "tweet_conversation_id": "1569725114341814272",
            "tweet_type": "Python tips",
            "created_at": "2022-09-13T16:30:05.000Z"
        },
        {
            "id": 787,
            "username": "alexxubyte",
            "tweet_id": "1569867123085946881",
            "tweet_text": "How to do back of the envelope estimation? \n\nFull video: https://t.co/mODJPpjKMB https://t.co/XOp0h2V3D7",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1569866853018914816/pu/vid/1920x1080/CTKem1BY8Z0WVdXI.mp4?tag=14\"]",
            "tweet_conversation_id": "1569867123085946881",
            "tweet_type": "Others",
            "created_at": "2022-09-14T01:54:23.000Z"
        },
        {
            "id": 786,
            "username": "alexxubyte",
            "tweet_id": "1569867673550606339",
            "tweet_text": "By @sahnlam",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569867123085946881",
            "tweet_type": "Others",
            "created_at": "2022-09-14T01:56:34.000Z"
        },
        {
            "id": 1322,
            "username": "bascodes",
            "tweet_id": "1569979894502678529",
            "tweet_text": "What are some newsletters you enjoy reading? \ud83d\udcec",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569979894502678529",
            "tweet_type": "Others",
            "created_at": "2022-09-14T09:22:30.000Z"
        },
        {
            "id": 1321,
            "username": "bascodes",
            "tweet_id": "1570033438136098817",
            "tweet_text": "TIL you can include a private message button in a tweet\n\nhttps://t.co/bFwtmzMTO4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570033438136098817",
            "tweet_type": "Others",
            "created_at": "2022-09-14T12:55:16.000Z"
        },
        {
            "id": 1592,
            "username": "testdrivenio",
            "tweet_id": "1570057222796738560",
            "tweet_text": "Coupling Flask with a front-end framework like #React, #Vue, or #Svelte? \n\nUse session cookies for auth (even cross-domain).\n\nWhy?\n\n1\u20e3It's easier\n2\u20e3It's safer than using JWTs and localStorage\n\nhttps://t.co/ajwMmAq9o9\n\nby @pydantic\n\n#Flask",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570057222796738560",
            "tweet_type": "Others",
            "created_at": "2022-09-14T14:29:46.000Z"
        },
        {
            "id": 785,
            "username": "alexxubyte",
            "tweet_id": "1570077278104875008",
            "tweet_text": "1/ How do we design a permission system? The diagram below lists 5 common ways. \ud83d\udc47 https://t.co/qQpQ7xQAmP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcoI9DLaAAACz7k.jpg\"]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Others",
            "created_at": "2022-09-14T15:49:28.000Z"
        },
        {
            "id": 784,
            "username": "alexxubyte",
            "tweet_id": "1570077282479505410",
            "tweet_text": "2/ 1. ACL (Access Control List)\n\nACL is a list of rules that specifies which users are granted or denied access to a particular resource.\n\nPros - Easy to understand.\n\nCons - error-prone, maintenance cost is high",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-14T15:49:29.000Z"
        },
        {
            "id": 783,
            "username": "alexxubyte",
            "tweet_id": "1570077285201616897",
            "tweet_text": "3/ 2. DAC (Discretionary Access Control)\n\nIt grants or restricts object access via an access policy determined by an object's owner group.\n\nPros - Easy and flexible. Linux file system supports DAC.\n\nCons - Scattered permission control, too much power for the object\u2019s owner group",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-14T15:49:30.000Z"
        },
        {
            "id": 782,
            "username": "alexxubyte",
            "tweet_id": "1570077288032796672",
            "tweet_text": "4/ 3. MAC (Mandatory Access Control)\n\nBoth resource owners and resources have classification labels. Different labels are granted with different permissions.\n\nPros - strict and straightforward.\n\nCons - not flexible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-14T15:49:30.000Z"
        },
        {
            "id": 781,
            "username": "alexxubyte",
            "tweet_id": "1570077290796843008",
            "tweet_text": "5/ 4. ABAC (Attribute-based access control)\n\nEvaluate permissions based on attributes of the Resource owner, Action, Resource, and Environment.\n\nPros - flexible\n\nCons - the rules can be complicated, and the implementation is hard. It is not commonly used.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-14T15:49:31.000Z"
        },
        {
            "id": 780,
            "username": "alexxubyte",
            "tweet_id": "1570077293472784384",
            "tweet_text": "6/ 5. RBAC (Role-based Access Control)\n\nEvaluate permissions based on roles\n\nPros - flexible in assigning roles.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-14T15:49:32.000Z"
        },
        {
            "id": 779,
            "username": "alexxubyte",
            "tweet_id": "1570077296123580417",
            "tweet_text": "7/ Over to you: Which type of permission systems have you used?\n\nJoin a growing community of more than 100,000 readers who love System Design. Subscribe here:\n\nhttps://t.co/PczMAdqSrj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Others",
            "created_at": "2022-09-14T15:49:32.000Z"
        },
        {
            "id": 778,
            "username": "alexxubyte",
            "tweet_id": "1570077298929577984",
            "tweet_text": "8/ I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/lJBdOGKClU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570077278104875008",
            "tweet_type": "Others",
            "created_at": "2022-09-14T15:49:33.000Z"
        },
        {
            "id": 1591,
            "username": "testdrivenio",
            "tweet_id": "1570087484461314050",
            "tweet_text": "Python Clean Code Tip:\n\nAvoid setting attributes of your objects outside of the constructor. Instead, implement methods that map to real-world concepts.\n\nWhy?\nTo ensure attributes exist and are easily discoverable.\n\n\ud83d\udc47 https://t.co/pEuDpAADyt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcoSPm2aAAA3ljt.png\"]",
            "tweet_conversation_id": "1570087484461314050",
            "tweet_type": "Python tips",
            "created_at": "2022-09-14T16:30:01.000Z"
        },
        {
            "id": 777,
            "username": "alexxubyte",
            "tweet_id": "1570430639836639239",
            "tweet_text": "/1 How do we generate unique IDs in distributed systems? How do we avoid ID conflicts?\n\nThe diagram below shows 5 ways. \ud83d\udc47 https://t.co/heA5cXZPcy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FctKVyQaIAINUk2.jpg\"]",
            "tweet_conversation_id": "1570430639836639239",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-15T15:13:36.000Z"
        },
        {
            "id": 776,
            "username": "alexxubyte",
            "tweet_id": "1570430644639137792",
            "tweet_text": "/2 Assume the design requirements of distributed unique ID are:\n\n1. Globally unique.\n\n2. Availability. The ID generator must be available under high concurrency.\n\n3. Ordered. The IDs are sorted by certain rules. For example, sorted by time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570430639836639239",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-15T15:13:37.000Z"
        },
        {
            "id": 775,
            "username": "alexxubyte",
            "tweet_id": "1570430647281537024",
            "tweet_text": "/3 4. Distributed. The ID generator doesn\u2019t rely on a centralized service.\n\n5. Security. Depending on the use case, some IDs cannot be incremental integers, which might expose sensitive info. For example, people might guess the total user number correctly by looking at the IDs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570430639836639239",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-15T15:13:38.000Z"
        },
        {
            "id": 774,
            "username": "alexxubyte",
            "tweet_id": "1570430649953296387",
            "tweet_text": "/4 Over to you: 1) Could you think of any use cases that unique IDs are useful?\n\n2\uff09There are variations in the snowflake implementation. For example, data center ID can be added to the \u201cMachineID\u201d section to guarantee global uniqueness. Do you know other variations?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570430639836639239",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-15T15:13:38.000Z"
        },
        {
            "id": 773,
            "username": "alexxubyte",
            "tweet_id": "1570430652679614465",
            "tweet_text": "/5 I hope you've found this thread helpful.\n\n- Like/Retweet the first tweet below if you can.\n\n- Follow me @alexxubyte for more.\n\n- I write about system design and book writing tips. https://t.co/rAbhizkYWk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570430639836639239",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-15T15:13:39.000Z"
        },
        {
            "id": 1590,
            "username": "testdrivenio",
            "tweet_id": "1570449871060242434",
            "tweet_text": "Python Clean Code Tip:\n\nAvoid using too many attributes on a single object. Try to cluster them to improve cohesion, reduce coupling, and improve readability\n\n\ud83d\udc47 https://t.co/N9kIRiGMV7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fctb1WoaAAAyRVY.png\"]",
            "tweet_conversation_id": "1570449871060242434",
            "tweet_type": "Python tips",
            "created_at": "2022-09-15T16:30:01.000Z"
        },
        {
            "id": 1320,
            "username": "bascodes",
            "tweet_id": "1570472792713490433",
            "tweet_text": "What profession would you have chosen if it hadn't been tech?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570472792713490433",
            "tweet_type": "Others",
            "created_at": "2022-09-15T18:01:06.000Z"
        },
        {
            "id": 1319,
            "username": "bascodes",
            "tweet_id": "1570723164036173824",
            "tweet_text": "Hi fellow #Python devs! \ud83d\udc4b\n\n\ud83d\udc0d Here is my collection of interesting resources I found #ThisWeekInPython",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:35:59.000Z"
        },
        {
            "id": 1318,
            "username": "bascodes",
            "tweet_id": "1570723166280118272",
            "tweet_text": "+++\nCheck this collection on my blog, too \ud83d\udc47\n+++\nhttps://t.co/m1rx5Qglxm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:00.000Z"
        },
        {
            "id": 1317,
            "username": "bascodes",
            "tweet_id": "1570723168410816514",
            "tweet_text": "Python Type Hints are Turing Complete \nhttps://t.co/uzlzYL1Sdu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:00.000Z"
        },
        {
            "id": 1316,
            "username": "bascodes",
            "tweet_id": "1570723170889658374",
            "tweet_text": "Fully-typed Python decorator with optional arguments\nhttps://t.co/uGFoMItYHO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:01.000Z"
        },
        {
            "id": 1315,
            "username": "bascodes",
            "tweet_id": "1570723173074890753",
            "tweet_text": "Python List Comprehensions Are More Powerful Than You Might Think \u2013 by @Martin_Heinz_\nhttps://t.co/bLlwfwMU6h",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:01.000Z"
        },
        {
            "id": 1314,
            "username": "bascodes",
            "tweet_id": "1570723175281098753",
            "tweet_text": "Can Amazon's CodeWhisperer Write Better Python than You?\nhttps://t.co/KY8D12ODyi",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:02.000Z"
        },
        {
            "id": 1313,
            "username": "bascodes",
            "tweet_id": "1570723177755709442",
            "tweet_text": "Swift was poised to replace Python. Then it tanked \u2013\u00a0by @ari_joury\nhttps://t.co/uskDb5aOPK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:02.000Z"
        },
        {
            "id": 1312,
            "username": "bascodes",
            "tweet_id": "1570723180091932674",
            "tweet_text": "sqlparse \u2013 A non-validating SQL parser module for Python \u2013 by @andialbrecht\nhttps://t.co/FXaPxkOjYb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:03.000Z"
        },
        {
            "id": 1311,
            "username": "bascodes",
            "tweet_id": "1570723182893764610",
            "tweet_text": "django-functest \u2013 Helpers for creating high-level functional tests in Django, with a unified API for WebTest and Selenium tests\nhttps://t.co/XFGYnv5wCF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:04.000Z"
        },
        {
            "id": 1310,
            "username": "bascodes",
            "tweet_id": "1570723185125105664",
            "tweet_text": "django-htmx-patterns \u2013 Sharing patterns I use with Django and htmx \u2013 by @spookylukey\nhttps://t.co/a4ck8iCrIv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:04.000Z"
        },
        {
            "id": 1309,
            "username": "bascodes",
            "tweet_id": "1570723187557793792",
            "tweet_text": "docquery \u2013 An easy way to extract information from documents\nhttps://t.co/QdJyEkpEKt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:05.000Z"
        },
        {
            "id": 1308,
            "username": "bascodes",
            "tweet_id": "1570723189675929601",
            "tweet_text": "deptry \u2013 A command line utility to check for obsolete, missing and transitive dependencies in a Python project \u2013\u00a0by @fpgmaas\nhttps://t.co/qm2coQk8MY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570723164036173824",
            "tweet_type": "Others",
            "created_at": "2022-09-16T10:36:05.000Z"
        },
        {
            "id": 1589,
            "username": "testdrivenio",
            "tweet_id": "1570776604200275969",
            "tweet_text": "CSRF Protection in Flask\n\nhttps://t.co/o8SoMpmpBh\n\nThis article looks at how to prevent CSRF attacks in Flask. \n\n1\u20e3What is CSRF?\n2\u20e3What does a CSRF attack look like?\n3\u20e3How can you prevent CSRF attacks?\n\nby @amal_ytics \n\n#Flask #Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570776604200275969",
            "tweet_type": "Others",
            "created_at": "2022-09-16T14:08:20.000Z"
        },
        {
            "id": 772,
            "username": "alexxubyte",
            "tweet_id": "1570778557957439489",
            "tweet_text": "\"Org charts\" comic by Manu Cornet. The drawing was published in 2011.\n\nAccording to Wikipedia, Microsoft CEO Satya Nadella cited that it was what persuaded him to change Microsoft's culture.\n\nSource: https://t.co/vcza9HdoVT\n\nHow accurate is the drawing? https://t.co/p646bIvOWb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcyGcMMacAIGMSl.jpg\"]",
            "tweet_conversation_id": "1570778557957439489",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-16T14:16:06.000Z"
        },
        {
            "id": 1307,
            "username": "bascodes",
            "tweet_id": "1570798077103206401",
            "tweet_text": "Meanwhile in The Hague \u2013 good vibes! https://t.co/24y6MMfrCk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570798077103206401",
            "tweet_type": "Others",
            "created_at": "2022-09-16T15:33:40.000Z"
        },
        {
            "id": 1588,
            "username": "testdrivenio",
            "tweet_id": "1570812261027180544",
            "tweet_text": "Python Clean Code Tip:\n\nAvoid empty except blocks -&gt; try-except-pass.\n\nThey lead to hard-to-find bugs.\n\n\ud83d\udc47 https://t.co/3fJWU2HFxy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcylbLragAAxrf_.png\"]",
            "tweet_conversation_id": "1570812261027180544",
            "tweet_type": "Python tips",
            "created_at": "2022-09-16T16:30:01.000Z"
        },
        {
            "id": 1587,
            "username": "testdrivenio",
            "tweet_id": "1571135103824441344",
            "tweet_text": "Developing an API with FastAPI and GraphQL\n\nhttps://t.co/Jb224jxBRi\n\nby @MOluwole\n\nCovers how to:\n\n1\u20e3Use the Orator ORM to interact with a Postgres database\n2\u20e3Integrate #GraphQL into a #FastAPI app with Graphene\n3\u20e3Test a GraphQL API with #pytest\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571135103824441344",
            "tweet_type": "Others",
            "created_at": "2022-09-17T13:52:53.000Z"
        },
        {
            "id": 1306,
            "username": "bascodes",
            "tweet_id": "1571136899326087168",
            "tweet_text": "Ok, seems like I should really consider doing that podcast.\n\nWho would you like to see as guests, then? \ud83d\udce2 https://t.co/pyIxcVzHkr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571136899326087168",
            "tweet_type": "Others",
            "created_at": "2022-09-17T14:00:01.000Z"
        },
        {
            "id": 771,
            "username": "alexxubyte",
            "tweet_id": "1571154702452260864",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39Apple/Google pay\n\ud83d\udd39Design Google-like street view blurring system\n\ud83d\udd39Large key in Redis\n\ud83d\udd39Misconceptions about CAP\n\ud83d\udd39Live streaming\n\nJoin a community of more than 100,000 readers who love System Design. Subscribe here: \nhttps://t.co/PczMAdqSrj https://t.co/AjsEJZFJTd",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc3cKqIaIAcxxsG.jpg\"]",
            "tweet_conversation_id": "1571154702452260864",
            "tweet_type": "Others",
            "created_at": "2022-09-17T15:10:46.000Z"
        },
        {
            "id": 1586,
            "username": "testdrivenio",
            "tweet_id": "1571174646816591872",
            "tweet_text": "Python Clean Code Tip:\n\nUse upper case names for constants\n\n\ud83d\udc47 https://t.co/nZq7dSHiDQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc3vA1gaEAEiqPl.png\"]",
            "tweet_conversation_id": "1571174646816591872",
            "tweet_type": "Python tips",
            "created_at": "2022-09-17T16:30:01.000Z"
        },
        {
            "id": 1305,
            "username": "bascodes",
            "tweet_id": "1571443555490754561",
            "tweet_text": "Hey, 3k+ followers \ud83d\udc4b\n\nTime for a re-introduction \ud83d\udd04\n\n\ud83d\udc68\u200d\ud83d\udcbb I'm Bas, a developer, consultant and trainer\n\n\uea00 I tweet about\n\ud83d\udc0d Python\n\ud83d\uddc4\ufe0f Databases\n\u2601\ufe0f DevOps\n\nI \u2764\ufe0f\n\ud83d\udeb4\u200d\u2642\ufe0f bicycling\n\ud83d\udc1d bees\n\ud83d\udc68\u200d\ud83c\udf73 cooking\n\ud83e\uddec life hacks\n\n\u2753 What about you?\nReply with a short intro of yourself.\nLet's connect!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571443555490754561",
            "tweet_type": "Others",
            "created_at": "2022-09-18T10:18:34.000Z"
        },
        {
            "id": 1304,
            "username": "bascodes",
            "tweet_id": "1571443557537386496",
            "tweet_text": "I also love \u2615\ufe0f coffee chats! Want to book one with me?\n\nJust send me a DM!\n\nhttps://t.co/bFwtmzMTO4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571443555490754561",
            "tweet_type": "Others",
            "created_at": "2022-09-18T10:18:34.000Z"
        },
        {
            "id": 770,
            "username": "alexxubyte",
            "tweet_id": "1571517384829317122",
            "tweet_text": "How to store passwords in the database?\n\nSubscribe to our YouTube channel for more videos like this: https://t.co/e2OOkYBH7h https://t.co/gXtFmFhqGX",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1571516674549092353/pu/vid/1920x1080/NJNhP2uLdiJfZnDT.mp4?tag=14\"]",
            "tweet_conversation_id": "1571517384829317122",
            "tweet_type": "Others",
            "created_at": "2022-09-18T15:11:56.000Z"
        },
        {
            "id": 769,
            "username": "alexxubyte",
            "tweet_id": "1571517386356043776",
            "tweet_text": "made by @sahnlam",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571517384829317122",
            "tweet_type": "Others",
            "created_at": "2022-09-18T15:11:56.000Z"
        },
        {
            "id": 1585,
            "username": "testdrivenio",
            "tweet_id": "1571537034745090051",
            "tweet_text": "Python Clean Code Tip:\n\nUse *in* to check whether an iterable contains a specific element.\n\n\ud83d\udc47 https://t.co/8bSXrqsKO6",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc84mlIaEAEokJ4.png\"]",
            "tweet_conversation_id": "1571537034745090051",
            "tweet_type": "Python tips",
            "created_at": "2022-09-18T16:30:01.000Z"
        },
        {
            "id": 1303,
            "username": "bascodes",
            "tweet_id": "1571782982830116864",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Do you need a simple persistent key-value store in your Python scripts?\n\nThere are \ud835\ude8d\ud835\ude8b\ud835\ude96 and \ud835\ude9c\ud835\ude91\ud835\ude8e\ud835\ude95\ud835\ude9f\ud835\ude8e that get you covered! Both are included in Python's standard library\n\nHave a look \ud83d\udc47\n#pythontip #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571782982830116864",
            "tweet_type": "Python tips",
            "created_at": "2022-09-19T08:47:20.000Z"
        },
        {
            "id": 1302,
            "username": "bascodes",
            "tweet_id": "1571782984595824642",
            "tweet_text": "\ud835\ude8d\ud835\ude8b\ud835\ude96 is very fast \u2013 the only downside is that you can use strings only, both for keys and values https://t.co/Zd1NgIBYPC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdAXbnOWYAALcEb.jpg\"]",
            "tweet_conversation_id": "1571782982830116864",
            "tweet_type": "Others",
            "created_at": "2022-09-19T08:47:20.000Z"
        },
        {
            "id": 1301,
            "username": "bascodes",
            "tweet_id": "1571782986294493185",
            "tweet_text": "\ud835\ude9c\ud835\ude91\ud835\ude8e\ud835\ude95\ud835\ude9f\ud835\ude8e lets you use arbitrary Python objects as values (as long as these values can be \ud835\ude99\ud835\ude92\ud835\ude8c\ud835\ude94\ud835\ude95\ud835\ude8e'd) \u2013 using it comes with a slight performance disadvantage https://t.co/sUOMFxhavB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdAYD02XoAEepAr.jpg\"]",
            "tweet_conversation_id": "1571782982830116864",
            "tweet_type": "Others",
            "created_at": "2022-09-19T08:47:20.000Z"
        },
        {
            "id": 1584,
            "username": "testdrivenio",
            "tweet_id": "1571858748649472000",
            "tweet_text": "Building a Single Page Application with Python and Pyodide - Part 1 \n\nhttps://t.co/jyhxXM4Nr2\n\nCreate an application that fetches data from a remote file, manipulates the data with Pandas, and renders it in the browser\n\nby @amirtds\n  \n#Python @Pyodide #Pandas",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571858748649472000",
            "tweet_type": "Others",
            "created_at": "2022-09-19T13:48:24.000Z"
        },
        {
            "id": 768,
            "username": "alexxubyte",
            "tweet_id": "1571880260177907713",
            "tweet_text": "/1 How do big keys impact Redis persistence? We call a key that contains a large size of data a big key. For example, the size of the key is 5 MB.\n\nThe diagram shows how big keys impact Redis AOF (Append-Only-File) persistence. https://t.co/hyM03OII9I",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdBww15aEAQHxdd.jpg\"]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:13:52.000Z"
        },
        {
            "id": 767,
            "username": "alexxubyte",
            "tweet_id": "1571880263818555394",
            "tweet_text": "/2 There are three modes when we turn on AOF persistence:\n\n1\ufe0f\u20e3 Always - synchronously write data to the disk whenever there is a data update in memory.\n\n2\ufe0f\u20e3 EverySec - write to the disk every second.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:13:53.000Z"
        },
        {
            "id": 766,
            "username": "alexxubyte",
            "tweet_id": "1571880266511294464",
            "tweet_text": "/3 3\ufe0f\u20e3 No - Redis doesn\u2019t control when the data is written to the dis. Instead, the operating system decides when the data is written to the disk.\n\n\ud83d\udc49 How do we analyze the impact of big keys?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:13:54.000Z"
        },
        {
            "id": 765,
            "username": "alexxubyte",
            "tweet_id": "1571880269283758080",
            "tweet_text": "/4 Redis writes keys into memory first, then calls write() to write the data into the kernel buffer cache. Then fsync() flushes all modified in-core data of the file to the disk device There are 3 modes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:13:54.000Z"
        },
        {
            "id": 764,
            "username": "alexxubyte",
            "tweet_id": "1571880278129508352",
            "tweet_text": "/5 In \u201cAlways\u201d mode, it calls fsync() synchronously. If we need to update a big key, the main thread will be blocked because it has to wait for the write to complete. https://t.co/rl46GVVZwg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdBwxzuaMAE_aeD.jpg\"]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:13:57.000Z"
        },
        {
            "id": 763,
            "username": "alexxubyte",
            "tweet_id": "1571880288472694784",
            "tweet_text": "/6 \u201cEveySec\u201d starts a background timer task to call fsync() every second, so big keys have no impact on the Redis main thread. https://t.co/Xs9HLDIoGC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdBwyWdacAMiKI-.jpg\"]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:13:59.000Z"
        },
        {
            "id": 762,
            "username": "alexxubyte",
            "tweet_id": "1571880298887122944",
            "tweet_text": "/7 \u201cNo\u201d mode never calls fsync(). It is up to the operating system. Big keys have no impact on the main thread. https://t.co/DbzXWRGAeV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdBwy-daIAAHPYs.jpg\"]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:14:02.000Z"
        },
        {
            "id": 761,
            "username": "alexxubyte",
            "tweet_id": "1571880302578110470",
            "tweet_text": "/8 Over to you: How to avoid big keys?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571880260177907713",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-19T15:14:02.000Z"
        },
        {
            "id": 1583,
            "username": "testdrivenio",
            "tweet_id": "1571899422510043139",
            "tweet_text": "Python Clean Code Tip:\n\nAvoid using the variable/parameter type inside your variable/parameter name. Use type hints instead.\n\n\ud83d\udc47 https://t.co/W0fSkoMfHr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdCCMV2akAc93mt.png\"]",
            "tweet_conversation_id": "1571899422510043139",
            "tweet_type": "Python tips",
            "created_at": "2022-09-19T16:30:01.000Z"
        },
        {
            "id": 760,
            "username": "alexxubyte",
            "tweet_id": "1572074815724597248",
            "tweet_text": "New video dropping tomorrow.\n\nSubscribe now so you won't miss it \ud83d\ude06\nhttps://t.co/tbxD2fpOZJ https://t.co/RNCssRwgzR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdEhhg6agAAw0He.jpg\"]",
            "tweet_conversation_id": "1572074815724597248",
            "tweet_type": "Others",
            "created_at": "2022-09-20T04:06:58.000Z"
        },
        {
            "id": 1300,
            "username": "bascodes",
            "tweet_id": "1572164024116318215",
            "tweet_text": "On my way to @DjangoConEurope https://t.co/ZVQ9BEuiDk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdFy17PXkAAp_7L.jpg\"]",
            "tweet_conversation_id": "1572164024116318215",
            "tweet_type": "Others",
            "created_at": "2022-09-20T10:01:27.000Z"
        },
        {
            "id": 759,
            "username": "alexxubyte",
            "tweet_id": "1572241003964420097",
            "tweet_text": "/1 If you use JSON files, you'll probably like this tool \ud83d\udc47\n\nNested JSON files are hard to read.\n\n\ud835\udc09\ud835\udc2c\ud835\udc28\ud835\udc27\ud835\udc02\ud835\udc2b\ud835\udc1a\ud835\udc1c\ud835\udc24 generates graph diagrams from JSON files and makes them easy to read.\n\nAdditionally, the generated diagrams can be downloaded as images.\n\nSee the link below. https://t.co/sm9YAqs8HE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdG42wlacAQGf0x.jpg\"]",
            "tweet_conversation_id": "1572241003964420097",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-20T15:07:20.000Z"
        },
        {
            "id": 758,
            "username": "alexxubyte",
            "tweet_id": "1572241007923859462",
            "tweet_text": "/2 Link to the tool: https://t.co/JNTqaRDcXT\n\nJoin a growing community of more than 100,000 readers who love System Design. Subscribe here: https://t.co/PczMAdqSrj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572241003964420097",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-20T15:07:21.000Z"
        },
        {
            "id": 757,
            "username": "alexxubyte",
            "tweet_id": "1572254796450770944",
            "tweet_text": "This is now available: https://t.co/G4Mt26tj3c https://t.co/laFkN9Jqop",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572254796450770944",
            "tweet_type": "Others",
            "created_at": "2022-09-20T16:02:09.000Z"
        },
        {
            "id": 1582,
            "username": "testdrivenio",
            "tweet_id": "1572261811491336193",
            "tweet_text": "Python Clean Code Tip:\n\nUse HTTPStatus from http (it's inside the standard library) to avoid \"magic\" numbers for statuses inside your code.\n\n\ud83d\udc47 https://t.co/Tm0S1CUIhX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdHLyKtacAAxENZ.png\"]",
            "tweet_conversation_id": "1572261811491336193",
            "tweet_type": "Python tips",
            "created_at": "2022-09-20T16:30:01.000Z"
        },
        {
            "id": 1581,
            "username": "testdrivenio",
            "tweet_id": "1572279262505275392",
            "tweet_text": "Heroku Alternatives for Python-based Applications \n\nhttps://t.co/TW3Z4zJghc \n\nLearn what the best Heroku alternatives (and their pros and cons) are.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572279262505275392",
            "tweet_type": "Others",
            "created_at": "2022-09-20T17:39:22.000Z"
        },
        {
            "id": 756,
            "username": "alexxubyte",
            "tweet_id": "1572400732040724481",
            "tweet_text": "I just published a post on Hacker News: \u201cHow To Choose The Right Database?\u201d.\n\nFeel free to upvote :) Thank you.\n\nhttps://t.co/p2oMqYN9tb https://t.co/HolWswe0UY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdJKA2baIAE9ZXw.jpg\"]",
            "tweet_conversation_id": "1572400732040724481",
            "tweet_type": "Others",
            "created_at": "2022-09-21T01:42:02.000Z"
        },
        {
            "id": 755,
            "username": "alexxubyte",
            "tweet_id": "1572418916009508864",
            "tweet_text": "https://t.co/L89uSqE7Dd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572400732040724481",
            "tweet_type": "Others",
            "created_at": "2022-09-21T02:54:18.000Z"
        },
        {
            "id": 1299,
            "username": "bascodes",
            "tweet_id": "1572463984464302080",
            "tweet_text": "\ud83d\udce2 Announcement:\n\ud83d\udcc6 September, 21st \u2014 25th\n\ud83d\udccd Porto, Portugal\n\nI\u2019m attending @DjangoConEurope \n\n\ud83d\udc4b Can\u2019t wait to meet all of you!\n\n#Python #Django #djangoconeurope",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572463984464302080",
            "tweet_type": "Others",
            "created_at": "2022-09-21T05:53:23.000Z"
        },
        {
            "id": 1298,
            "username": "bascodes",
            "tweet_id": "1572496485148672000",
            "tweet_text": "And there we go\u2026 https://t.co/dXqrRC14Me",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdKhNv0XoAAJ1Ih.jpg\"]",
            "tweet_conversation_id": "1572463984464302080",
            "tweet_type": "Others",
            "created_at": "2022-09-21T08:02:32.000Z"
        },
        {
            "id": 1297,
            "username": "bascodes",
            "tweet_id": "1572607334165217286",
            "tweet_text": "Slides for my Django ORM talk @DjangoConEurope are online \n\nhttps://t.co/Ez6TLIgaIs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572607334165217286",
            "tweet_type": "Others",
            "created_at": "2022-09-21T15:23:00.000Z"
        },
        {
            "id": 754,
            "username": "alexxubyte",
            "tweet_id": "1572614943811440642",
            "tweet_text": "/1 How do Apple Pay and Google Pay handle sensitive card info?\n\nThe diagram below shows the differences. Both approaches are very secure, but the implementations are different. To understand the difference, we break down the process into two flows. https://t.co/3jWwXmALBA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMM9CAagAAVnu8.jpg\"]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:15.000Z"
        },
        {
            "id": 753,
            "username": "alexxubyte",
            "tweet_id": "1572614947930247168",
            "tweet_text": "/2 1. Registering your credit card flow\n2. Basic payment flow",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:16.000Z"
        },
        {
            "id": 752,
            "username": "alexxubyte",
            "tweet_id": "1572614956989960192",
            "tweet_text": "/3 1\ufe0f\u20e3 The registration flow is represented by steps 1~3 for both cases.\n\n\ud835\udc00\ud835\udc29\ud835\udc29\ud835\udc25\ud835\udc1e \ud835\udc0f\ud835\udc1a\ud835\udc32: It doesn\u2019t store any card info. It passes the card info to the bank. Bank returns a token called DAN (device account number). iPhone then stores DAN into a special hardware chip. https://t.co/phPJ0s9GvJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMM9viaAAM1e2R.jpg\"]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:18.000Z"
        },
        {
            "id": 751,
            "username": "alexxubyte",
            "tweet_id": "1572614967303741440",
            "tweet_text": "/4 \ud835\udc06\ud835\udc28\ud835\udc28\ud835\udc20\ud835\udc25\ud835\udc1e \ud835\udc0f\ud835\udc1a\ud835\udc32: When you register the credit card with Google Pay, the card info is stored in the Google server. Google returns a payment token to the phone. https://t.co/cZjpaIkS2J",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMM-UsaAAMiHxM.jpg\"]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:20.000Z"
        },
        {
            "id": 750,
            "username": "alexxubyte",
            "tweet_id": "1572614978334785541",
            "tweet_text": "/5 2\ufe0f\u20e3 When you click the \u201cPay\u201d button on your phone, the basic payment flow starts. Here are the differences:\n\n\ud835\udc00\ud835\udc29\ud835\udc29\ud835\udc25\ud835\udc1e \ud835\udc0f\ud835\udc1a\ud835\udc32: For iPhone, the e-commerce server passes the DAN to the bank. https://t.co/yKVGsx5FUY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMM--sacAIzNSb.jpg\"]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:23.000Z"
        },
        {
            "id": 749,
            "username": "alexxubyte",
            "tweet_id": "1572614988585668610",
            "tweet_text": "/6 \ud835\udc06\ud835\udc28\ud835\udc28\ud835\udc20\ud835\udc25\ud835\udc1e \ud835\udc0f\ud835\udc1a\ud835\udc32: The e-commerce server passes the payment token to the Google server. Google server looks up the card info and passes it to the bank.\n\nIn the diagram, the red arrow means the credit card info is available on the public network, although it is encrypted. https://t.co/dwbs1lJy7L",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMM_jsagAMvU1G.jpg\"]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:25.000Z"
        },
        {
            "id": 748,
            "username": "alexxubyte",
            "tweet_id": "1572614992507314176",
            "tweet_text": "/7 \ud83d\udc49 Over to you: Apple needs to discuss the DAN details with banks. It takes time and effort, but the benefit is that the credit card info is on the public network only once. If you are an architect and have to choose between security and cost, which solution do you prefer?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:26.000Z"
        },
        {
            "id": 747,
            "username": "alexxubyte",
            "tweet_id": "1572614995279753218",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/MF4sgjyyxV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-21T15:53:27.000Z"
        },
        {
            "id": 1580,
            "username": "testdrivenio",
            "tweet_id": "1572624198396411907",
            "tweet_text": "Python Clean Code Tip:\n\nWhen your module becomes too big you can restructure it to a package while keeping all the imports from the module as they were.\n\n\ud83d\udc47 https://t.co/JMulQ3noYJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMVX2BakAEzoxH.png\"]",
            "tweet_conversation_id": "1572624198396411907",
            "tweet_type": "Python tips",
            "created_at": "2022-09-21T16:30:01.000Z"
        },
        {
            "id": 746,
            "username": "alexxubyte",
            "tweet_id": "1572646896820441088",
            "tweet_text": "Enjoy this thread?\n\nYou might like this thread \"Why is the credit card called \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc26\ud835\udc28\ud835\udc2c\ud835\udc2d \ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc1f\ud835\udc22\ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e product in banks\u201d as well?\n\nhttps://t.co/0yKY9632ks",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572614943811440642",
            "tweet_type": "Others",
            "created_at": "2022-09-21T18:00:13.000Z"
        },
        {
            "id": 1296,
            "username": "bascodes",
            "tweet_id": "1572902684029603841",
            "tweet_text": "Didn\u2019t expect getting Ruby at a Python conference \ud83d\ude09\n\nThank you, @DjangoConEurope organizers. It has been a great experience so far! https://t.co/ge2i41nuui",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdQSpp8WAAAkH6z.jpg\"]",
            "tweet_conversation_id": "1572902684029603841",
            "tweet_type": "Others",
            "created_at": "2022-09-22T10:56:37.000Z"
        },
        {
            "id": 745,
            "username": "alexxubyte",
            "tweet_id": "1572966478756085761",
            "tweet_text": "1/ The Unified Payments Interface (UPI) for real-time transactions in India is a good case study for other nations in the payment space. https://t.co/ivrdfcf17g",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMqlKaMAIAS_L.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Others",
            "created_at": "2022-09-22T15:10:07.000Z"
        },
        {
            "id": 744,
            "username": "alexxubyte",
            "tweet_id": "1572966488461709313",
            "tweet_text": "2/ What\u2019s UPI? UPI is an instant real-time payment system developed by the National Payments Corporation of India.\n\nIt accounts for 60% of digital retail transactions in India today and still growing.\n\nUPI = payment markup language + standard for interoperable payments https://t.co/tLtjIySG6t",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMrmsaAAE4Zy2.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Others",
            "created_at": "2022-09-22T15:10:09.000Z"
        },
        {
            "id": 743,
            "username": "alexxubyte",
            "tweet_id": "1572966508216872961",
            "tweet_text": "3/ Let's take a look at how it works.\n\n\ud835\udc11\ud835\udc1e\ud835\udc20\ud835\udc22\ud835\udc2c\ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\n\n1. Bob wants to open an account and provides his phone number +91 12345678\n\n2. Bob performs OTP (One-Time Password) phone verification\n\n3. Bob sets up VPA (Virtual Payment Address) bobaxis https://t.co/0jWqujOgHS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMsKrakAUvTb8.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-22T15:10:14.000Z"
        },
        {
            "id": 742,
            "username": "alexxubyte",
            "tweet_id": "1572966527577755649",
            "tweet_text": "4/ 4. Bob\u2019s payment app creates VPA with the acquiring bank\n\n5. The acquiring bank returns with VPA\n\n6. The payment app returns VPA to Bob https://t.co/IpvsEXJaS3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMtWHaMAAPXsh.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-22T15:10:19.000Z"
        },
        {
            "id": 741,
            "username": "alexxubyte",
            "tweet_id": "1572966547358126084",
            "tweet_text": "5/ \ud835\udc0b\ud835\udc22\ud835\udc27\ud835\udc24 \ud835\udc2d\ud835\udc28 \ud835\udc01\ud835\udc1a\ud835\udc27\ud835\udc24 \ud835\udc00\ud835\udc1c\ud835\udc1c\ud835\udc28\ud835\udc2e\ud835\udc27\ud835\udc2d\n\n7. Bob wants to link his SBI bank account with VPA bob at the axis. The request is forwarded to NPCI (National Payments Corporation of India). https://t.co/6vTrfLC9RC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMueqaMAQalne.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-22T15:10:23.000Z"
        },
        {
            "id": 740,
            "username": "alexxubyte",
            "tweet_id": "1572966567197159425",
            "tweet_text": "6/ 8. NPCI acts as a switch between acquiring banks and issuing banks. It resolves the account detail from VPA with different issuing banks.\n\n9. Bob authenticates with account details and sets the PIN, which is used for 2FA. This goes all the way to the issuing bank. https://t.co/9fJBBbIsKF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMvn3agAEa9JI.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-22T15:10:28.000Z"
        },
        {
            "id": 739,
            "username": "alexxubyte",
            "tweet_id": "1572966585987641344",
            "tweet_text": "7/ \ud835\udc03\ud835\udc22\ud835\udc2b\ud835\udc1e\ud835\udc1c\ud835\udc2d \ud835\udc29\ud835\udc1a\ud835\udc32\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\n\n1. Alice enters Bob\u2019s UPI ID bob and the amount INR 100\n\n2. PhonePe verifies and forwards the request to NPCI via ICICI bank\n\n3. NPCI requests Axis Bank to resolve detail for bob at axis\n\n4. NPCI deducts Alice\u2019s HDFC bank account by INR 100 https://t.co/MdXZvLBtp4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMwxnaUAIhXwS.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-22T15:10:33.000Z"
        },
        {
            "id": 738,
            "username": "alexxubyte",
            "tweet_id": "1572966607550550017",
            "tweet_text": "8/ 5. NPCI sends an instruction to SBI bank and add INR 100 to Bob\u2019s account in SBI bank.\n\n6. Upon success, NPCI notifies the payment apps via acquiring banks. https://t.co/P3vGOA0RCo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRMx4UaEAE2KWe.jpg\"]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-22T15:10:38.000Z"
        },
        {
            "id": 737,
            "username": "alexxubyte",
            "tweet_id": "1572966611627438082",
            "tweet_text": "9/ I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/4t5ZiYqaEY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572966478756085761",
            "tweet_type": "Others",
            "created_at": "2022-09-22T15:10:39.000Z"
        },
        {
            "id": 1579,
            "username": "testdrivenio",
            "tweet_id": "1572986594264780800",
            "tweet_text": "Python Clean Code Tip:\n\nUse preconditions to ensure the integrity of your objects.\n\n\ud83d\udc47 https://t.co/sptB3JuiCU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdRe-EDagAIVx3h.png\"]",
            "tweet_conversation_id": "1572986594264780800",
            "tweet_type": "Python tips",
            "created_at": "2022-09-22T16:30:03.000Z"
        },
        {
            "id": 1295,
            "username": "bascodes",
            "tweet_id": "1572987878317363201",
            "tweet_text": "How is that possible? \n\nIs anyone still using Facebook? https://t.co/eCgC2oxxlv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572987878317363201",
            "tweet_type": "Others",
            "created_at": "2022-09-22T16:35:09.000Z"
        },
        {
            "id": 1294,
            "username": "bascodes",
            "tweet_id": "1573036290479726598",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 There are 100 days left till the end of 2022 \n\nWhat are your plans and goals for these \ud83d\udcaf days? https://t.co/nzhqqyMa3R",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdSL0A2WIAEFOgH.png\"]",
            "tweet_conversation_id": "1573036290479726598",
            "tweet_type": "Python tips",
            "created_at": "2022-09-22T19:47:31.000Z"
        },
        {
            "id": 1293,
            "username": "bascodes",
            "tweet_id": "1573053270372896770",
            "tweet_text": "On my way! https://t.co/F8B3zYjjBx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573053270372896770",
            "tweet_type": "Others",
            "created_at": "2022-09-22T20:55:00.000Z"
        },
        {
            "id": 1578,
            "username": "testdrivenio",
            "tweet_id": "1573145851781857281",
            "tweet_text": "What is Python's \"self\" Argument, Anyway?\n\nhttps://t.co/Bvc7MhYg0M\n\nby @Martin_Heinz_ \n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573145851781857281",
            "tweet_type": "Others",
            "created_at": "2022-09-23T03:02:53.000Z"
        },
        {
            "id": 736,
            "username": "alexxubyte",
            "tweet_id": "1573176337044590592",
            "tweet_text": "Clarification:\n\nApple pay: the apple server looks at the card info and determines how to route. Since the card data is not stored on the apple server, apple server is not in the illustration. More detail: https://t.co/FkeWeKER2W\n\nGoogle pay, more details:\nhttps://t.co/uHFaZzTkBB https://t.co/MF4sgjy0In",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573176337044590592",
            "tweet_type": "Others",
            "created_at": "2022-09-23T05:04:01.000Z"
        },
        {
            "id": 1292,
            "username": "bascodes",
            "tweet_id": "1573242811121651716",
            "tweet_text": "\ud83d\udc0d Day 3 of @DjangoConEurope!\n\nThat's not an excuse not to publish my weekly list of interesting articles and projects I found #ThisWeekInPython!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:10.000Z"
        },
        {
            "id": 1291,
            "username": "bascodes",
            "tweet_id": "1573242813948592128",
            "tweet_text": "+++\nThis list is on my blog, too \ud83d\udc47\n+++\nhttps://t.co/4pWRbZXZd1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:10.000Z"
        },
        {
            "id": 1290,
            "username": "bascodes",
            "tweet_id": "1573242817824047107",
            "tweet_text": "Build an Alexa- or Siri-Equivalent Bot in Python Using OpenAI \nhttps://t.co/uVsUDfMSXO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:11.000Z"
        },
        {
            "id": 1289,
            "username": "bascodes",
            "tweet_id": "1573242820420407297",
            "tweet_text": "Lazy imports for Python\nhttps://t.co/Y6vu9lYOgy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:12.000Z"
        },
        {
            "id": 1288,
            "username": "bascodes",
            "tweet_id": "1573242822605553664",
            "tweet_text": "Python dictionary operations you should know\nhttps://t.co/pOA4E4eVOv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:13.000Z"
        },
        {
            "id": 1287,
            "username": "bascodes",
            "tweet_id": "1573242824866549761",
            "tweet_text": "The maze of Python dependency management \u2013 by @nicolas_frankel\nhttps://t.co/WB3KzxrwPN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:13.000Z"
        },
        {
            "id": 1286,
            "username": "bascodes",
            "tweet_id": "1573242827286671360",
            "tweet_text": "Metaprogramming in Python\nhttps://t.co/sWleaRh3TL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:14.000Z"
        },
        {
            "id": 1285,
            "username": "bascodes",
            "tweet_id": "1573242830004580353",
            "tweet_text": "rocketry \u2013 Modern scheduling library for Python \u2013 by @MikaelKoli\nhttps://t.co/GfKbd7veLB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:14.000Z"
        },
        {
            "id": 1284,
            "username": "bascodes",
            "tweet_id": "1573242832214704129",
            "tweet_text": "django-formset \u2013 Building beautiful Forms in Django with a contemporary User eXperience has never been easier \u2013 by @jacobrief\nhttps://t.co/NvPBrxpEG3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:15.000Z"
        },
        {
            "id": 1283,
            "username": "bascodes",
            "tweet_id": "1573242834391601153",
            "tweet_text": "envd \u2013 Development environment for AI/ML, based on buildkit \u2013 by @TensorChord\nhttps://t.co/9Iav0dKueX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:15.000Z"
        },
        {
            "id": 1282,
            "username": "bascodes",
            "tweet_id": "1573242836669136898",
            "tweet_text": "django-imagekit \u2013 Automated image processing for Django \u2013 by @matthewwithanm\nhttps://t.co/Kv41ZYflSg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:16.000Z"
        },
        {
            "id": 1281,
            "username": "bascodes",
            "tweet_id": "1573242839873761280",
            "tweet_text": "slack-machine \u2013 A simple, yet powerful and extendable Slack bot \u2013 by @DaanDebie\nhttps://t.co/UuAlDqdN6R",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573242811121651716",
            "tweet_type": "Others",
            "created_at": "2022-09-23T09:28:17.000Z"
        },
        {
            "id": 1280,
            "username": "bascodes",
            "tweet_id": "1573269590733459457",
            "tweet_text": "#swag! Thank you, @getsentry!\n#djangoconeurope https://t.co/OGI7fb8Zmm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdVgWYUX0Ag3Wk1.jpg\"]",
            "tweet_conversation_id": "1573269590733459457",
            "tweet_type": "Others",
            "created_at": "2022-09-23T11:14:35.000Z"
        },
        {
            "id": 735,
            "username": "alexxubyte",
            "tweet_id": "1573332186144514048",
            "tweet_text": "/1 How do Google/Apple maps blur license plates and human faces on Street View?\n\nThe diagram below presents a possible solution that might work in an interview setting. https://t.co/LrFjkkKMN3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdWZR5qUUAUQOgB.jpg\"]",
            "tweet_conversation_id": "1573332186144514048",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-23T15:23:18.000Z"
        },
        {
            "id": 734,
            "username": "alexxubyte",
            "tweet_id": "1573332198748344320",
            "tweet_text": "/2 The high-level architecture is broken down into three stages:\n1. Data pipeline - prepare training data set\n\n2. Blurring pipeline - extract and classify objects and blur relevant objects (license plates, faces)\n\n3. Serving pipeline - serve blurred street view images to users. https://t.co/mw2Lg2afUx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdWZSmLVUAAd_cV.jpg\"]",
            "tweet_conversation_id": "1573332186144514048",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-23T15:23:21.000Z"
        },
        {
            "id": 733,
            "username": "alexxubyte",
            "tweet_id": "1573332211574579200",
            "tweet_text": "/3 1\ufe0f\u20e3 Data pipeline\nStep 1: We get the annotated dataset for training. The objects are marked in bounding boxes.\n\nSteps 2-4: The dataset goes through preprocessing and augmentation to be normalized and scaled. https://t.co/XCZN9zm43w",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdWZTS2acAAKtTB.jpg\"]",
            "tweet_conversation_id": "1573332186144514048",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-23T15:23:24.000Z"
        },
        {
            "id": 732,
            "username": "alexxubyte",
            "tweet_id": "1573332215810822144",
            "tweet_text": "/4 Steps 5-6: The annotated dataset is then used to train the machine learning model, a 2-stage network.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573332186144514048",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-23T15:23:26.000Z"
        },
        {
            "id": 731,
            "username": "alexxubyte",
            "tweet_id": "1573332228196532225",
            "tweet_text": "/5 2\ufe0f\u20e3 Blurring pipeline\nSteps 7-10: The street view images go through preprocessing, and object boundaries are detected in the images. Then sensitive objects are blurred, and the images are stored in an object store. https://t.co/MBOtCrpQKX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdWZUMvUAAALSAd.jpg\"]",
            "tweet_conversation_id": "1573332186144514048",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-23T15:23:28.000Z"
        },
        {
            "id": 730,
            "username": "alexxubyte",
            "tweet_id": "1573332232055332865",
            "tweet_text": "/6 3\ufe0f\u20e3 Serving pipeline\nStep 11: The blurred images can now be retrieved by users.\n\nOver to you: Can you think of other objects (maybe houses) that should be blurred in street view images?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573332186144514048",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-23T15:23:29.000Z"
        },
        {
            "id": 729,
            "username": "alexxubyte",
            "tweet_id": "1573332234613846017",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/zOSchtrmZH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573332186144514048",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-23T15:23:30.000Z"
        },
        {
            "id": 1577,
            "username": "testdrivenio",
            "tweet_id": "1573348987549396992",
            "tweet_text": "Python Clean Code Tip:\n\nUse operator overloading to enable the usage of operators such as +, -, /, *, ... on your instances.\n\n\ud83d\udc47 https://t.co/YG5SqxeDfH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdWokJiacAA3QMe.png\"]",
            "tweet_conversation_id": "1573348987549396992",
            "tweet_type": "Python tips",
            "created_at": "2022-09-23T16:30:04.000Z"
        },
        {
            "id": 1279,
            "username": "bascodes",
            "tweet_id": "1573378380724305920",
            "tweet_text": "Boat trip! #djangoconeurope \n@cmaiacd @anze3db https://t.co/FTccNyQ8RP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdXDS0sWAAANwA7.jpg\"]",
            "tweet_conversation_id": "1573378380724305920",
            "tweet_type": "Others",
            "created_at": "2022-09-23T18:26:52.000Z"
        },
        {
            "id": 1278,
            "username": "bascodes",
            "tweet_id": "1573379259863035909",
            "tweet_text": "Thanks, @getsentry for sponsoring this!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573378380724305920",
            "tweet_type": "Others",
            "created_at": "2022-09-23T18:30:22.000Z"
        },
        {
            "id": 1277,
            "username": "bascodes",
            "tweet_id": "1573668961232867330",
            "tweet_text": "What\u2019s a healthy snack for long coding sessions?\n#fitdevs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573668961232867330",
            "tweet_type": "Others",
            "created_at": "2022-09-24T13:41:32.000Z"
        },
        {
            "id": 728,
            "username": "alexxubyte",
            "tweet_id": "1573691270794313728",
            "tweet_text": "Next week, we will cover:\n\n\u25ba QR code payment\n\u25ba Reverse proxy\n\u25ba How CDN works\n\u25ba CAP Theorem\n\u25ba Live streaming system (YouTube video)\n\nSubscribe to our weekly newsletter (100,000) at:\nhttps://t.co/dkjDPxrTOt https://t.co/B03Sq36YVK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fdbf3oOUUAAteRN.jpg\"]",
            "tweet_conversation_id": "1573691270794313728",
            "tweet_type": "Others",
            "created_at": "2022-09-24T15:10:11.000Z"
        },
        {
            "id": 1576,
            "username": "testdrivenio",
            "tweet_id": "1573711364433924097",
            "tweet_text": "Python Clean Code Tip:\n\nUse chained comparison when you need to check whether some variable is between MIN and MAX values.\n\n\ud83d\udc47 https://t.co/qBtHHx1MvV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdbyJRFaMAAkA8X.png\"]",
            "tweet_conversation_id": "1573711364433924097",
            "tweet_type": "Python tips",
            "created_at": "2022-09-24T16:30:02.000Z"
        },
        {
            "id": 1575,
            "username": "testdrivenio",
            "tweet_id": "1573712356537819136",
            "tweet_text": "Building a Flask API with APIFairy   \n\nhttps://t.co/dqCWbcFnvu \n\nby @patkennedy79 \n\n#Flask #Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573712356537819136",
            "tweet_type": "Others",
            "created_at": "2022-09-24T16:33:58.000Z"
        },
        {
            "id": 1276,
            "username": "bascodes",
            "tweet_id": "1573974947122356225",
            "tweet_text": "Tell me this does count as a healthy snack\u2026 https://t.co/Ap9Pal4SwP https://t.co/PUq1h8y5V9",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fdfh2xoXEAA2nUr.jpg\"]",
            "tweet_conversation_id": "1573974947122356225",
            "tweet_type": "Others",
            "created_at": "2022-09-25T09:57:25.000Z"
        },
        {
            "id": 1275,
            "username": "bascodes",
            "tweet_id": "1573975139175337984",
            "tweet_text": "https://t.co/i0apawkKzQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573668961232867330",
            "tweet_type": "Others",
            "created_at": "2022-09-25T09:58:10.000Z"
        },
        {
            "id": 1274,
            "username": "bascodes",
            "tweet_id": "1574062168311443456",
            "tweet_text": "What is your favourite web framework and why is it Django?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574062168311443456",
            "tweet_type": "Others",
            "created_at": "2022-09-25T15:44:00.000Z"
        },
        {
            "id": 1574,
            "username": "testdrivenio",
            "tweet_id": "1574073749414244352",
            "tweet_text": "Python Clean Code Tip:\n\nUse __all__ to define exported members of your package.\n\nHint: IDEs will do a much better job at importing and autocomplete.\n\n\ud83d\udc47 https://t.co/xn4zZf2uZO",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fdg7u2hUoAE7mBM.png\"]",
            "tweet_conversation_id": "1574073749414244352",
            "tweet_type": "Python tips",
            "created_at": "2022-09-25T16:30:01.000Z"
        },
        {
            "id": 1273,
            "username": "bascodes",
            "tweet_id": "1574315948773085184",
            "tweet_text": "#djangoconeurope was amazing!\n\nIt was a pleasure to meet you!\n\nNow, have a great start to the week! Whether it\u2019s back to normal, or holidays! https://t.co/SCi1kqT9rK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdkYAUSXgAA5Ce8.jpg\"]",
            "tweet_conversation_id": "1574315948773085184",
            "tweet_type": "Others",
            "created_at": "2022-09-26T08:32:26.000Z"
        },
        {
            "id": 1573,
            "username": "testdrivenio",
            "tweet_id": "1574390205481881600",
            "tweet_text": "\ud83e\udd73 \nFrom now on you can follow us on LinkedIn as well\n\ud83e\udd73 \n\nhttps://t.co/GRppZ2Qz6x",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574390205481881600",
            "tweet_type": "Others",
            "created_at": "2022-09-26T13:27:30.000Z"
        },
        {
            "id": 1272,
            "username": "bascodes",
            "tweet_id": "1574402832878403586",
            "tweet_text": "Thanks, @felipehoffa for the photo!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574315948773085184",
            "tweet_type": "Others",
            "created_at": "2022-09-26T14:17:41.000Z"
        },
        {
            "id": 727,
            "username": "alexxubyte",
            "tweet_id": "1574426102256218112",
            "tweet_text": "/1 What is \ud835\udc02\ud835\udc03\ud835\udc0d (Content Delivery Network)? How does CDN make content delivery \ud835\udc1f\ud835\udc1a\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc2b?\n\nThe diagram below shows why\n\nA CDN refers to geographically distributed servers (edge servers) that provide fast delivery of \ud835\udc2c\ud835\udc2d\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc1c \ud835\udc1a\ud835\udc27\ud835\udc1d \ud835\udc1d\ud835\udc32\ud835\udc27\ud835\udc1a\ud835\udc26\ud835\udc22\ud835\udc1c \ud835\udc1c\ud835\udc28\ud835\udc27\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc2d https://t.co/S9lJStMMD7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fdl8MVlVEAIpueH.jpg\"]",
            "tweet_conversation_id": "1574426102256218112",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-26T15:50:08.000Z"
        },
        {
            "id": 726,
            "username": "alexxubyte",
            "tweet_id": "1574426105892569090",
            "tweet_text": "/2 With CDN, users don\u2019t need to retrieve content (music, video, files, pictures, etc.) from the origin server. Instead, the content is cached at CDN nodes around the globe, and users can retrieve the content from nearby CDN nodes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574426102256218112",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-26T15:50:09.000Z"
        },
        {
            "id": 725,
            "username": "alexxubyte",
            "tweet_id": "1574426108417626112",
            "tweet_text": "/3 The benefits of CDN are:\n\n1. Improving latency\n2. Reducing bandwidth\n3. Improving website security, especially protecting against DDoS (Distributed Denial-of-Service) attack\n4. Increasing content availability",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574426102256218112",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-26T15:50:10.000Z"
        },
        {
            "id": 724,
            "username": "alexxubyte",
            "tweet_id": "1574426110976176128",
            "tweet_text": "/4 \ud83d\udc49 Over to you: Should we cache content frequently changed at the CDN node?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574426102256218112",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-26T15:50:10.000Z"
        },
        {
            "id": 723,
            "username": "alexxubyte",
            "tweet_id": "1574426113463373824",
            "tweet_text": "/5 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/jqOsWfO8L6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574426102256218112",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-26T15:50:11.000Z"
        },
        {
            "id": 1572,
            "username": "testdrivenio",
            "tweet_id": "1574436137002999808",
            "tweet_text": "Python Clean Code Tip:\n\nUse sum to sum the values of all elements inside an iterable instead of a for loop.\nWhy?\nDon't re-invent the wheel!\nsum is much faster\n\ud83d\udc47 https://t.co/1HNSeJwBye",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdmFUlPaEAAgW2U.png\"]",
            "tweet_conversation_id": "1574436137002999808",
            "tweet_type": "Python tips",
            "created_at": "2022-09-26T16:30:01.000Z"
        },
        {
            "id": 1571,
            "username": "testdrivenio",
            "tweet_id": "1574758821234610182",
            "tweet_text": "Testing Pinia Data Stores in Vue \n\nhttps://t.co/3PwULJokb8 \n\nThis tutorial describes how to test Pinia data stores in a Vue application.\n\nby @patkennedy79 \n\n#VueJS #Pinia",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574758821234610182",
            "tweet_type": "Others",
            "created_at": "2022-09-27T13:52:15.000Z"
        },
        {
            "id": 722,
            "username": "alexxubyte",
            "tweet_id": "1574785398730985472",
            "tweet_text": "/1 How live streaming works (YouTube live, TikTok live, Twitch streaming)\n\nYou can watch and subscribe here:\nhttps://t.co/sDfRbPJNc6\n\nIf you prefer text, keep reading: https://t.co/Ep4VWvyuMY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdrC-PuVsAIT0Te.jpg\"]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:37:51.000Z"
        },
        {
            "id": 721,
            "username": "alexxubyte",
            "tweet_id": "1574785402048679937",
            "tweet_text": "/2 Live streaming is challenging because the video content is sent over the internet in near real-time. Video processing is compute-intensive. Sending a large volume of video content over the internet takes time. These factors make live streaming challenging.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:37:52.000Z"
        },
        {
            "id": 720,
            "username": "alexxubyte",
            "tweet_id": "1574785409711603712",
            "tweet_text": "/3 The diagram below explains what happens behind the scenes to make this possible.\n\nStep 1: The streamer starts their stream. The source could be any video and audio source wired up to an encoder https://t.co/Q0DvDtY88p",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdrC-zLUcAAnnIA.jpg\"]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:37:54.000Z"
        },
        {
            "id": 719,
            "username": "alexxubyte",
            "tweet_id": "1574785417596977152",
            "tweet_text": "/4 Step 2: To provide the best upload condition for the streamer, most live streaming platforms provide point-of-presence servers worldwide. The streamer connects to a point-of-presence server closest to them. https://t.co/cKuoVak2OR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdrC_QZVsAAoxZB.jpg\"]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:37:56.000Z"
        },
        {
            "id": 718,
            "username": "alexxubyte",
            "tweet_id": "1574785425352273920",
            "tweet_text": "/5 Step 3: The incoming video stream is transcoded to different resolutions, and divided into smaller video segments a few seconds in length. https://t.co/wNtvOWWAxr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdrC_tuVsAA1qqJ.jpg\"]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:37:58.000Z"
        },
        {
            "id": 717,
            "username": "alexxubyte",
            "tweet_id": "1574785433606959104",
            "tweet_text": "/6 Step 4: The video segments are packaged into different live streaming formats that video players can understand. The most common live-streaming format is HLS, or HTTP Live Streaming\n\nStep 5: The resulting HLS manifest and chunks from the packaging step are cached by the CDN https://t.co/d8zH8uHBts",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdrDAK5UcAAfyX9.jpg\"]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:38:00.000Z"
        },
        {
            "id": 716,
            "username": "alexxubyte",
            "tweet_id": "1574785441512927233",
            "tweet_text": "/7 Step 6: Finally, the video starts to arrive at the viewer\u2019s video player.\n\nStep 7-8: To support replay, videos can be optionally stored in storage such as Amazon S3.\n\nYouTube video link: https://t.co/sDfRbPJNc6\n\n@nick_zimmerman, greatly appreciate your comments on the script! https://t.co/Ayo858hUNf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdrDAp7VIAA03XT.jpg\"]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:38:02.000Z"
        },
        {
            "id": 715,
            "username": "alexxubyte",
            "tweet_id": "1574785445052891136",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/s6E7VsmyrW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574785398730985472",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-27T15:38:02.000Z"
        },
        {
            "id": 1570,
            "username": "testdrivenio",
            "tweet_id": "1574798528345300994",
            "tweet_text": "Python Clean Code Tip:\n\nUse dataclasses when only storing attributes inside your class instances to reduce the amount of boilerplate code.\n\n\ud83d\udc47 https://t.co/5e831gEX58",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdrO6eHUYAEQxrt.png\"]",
            "tweet_conversation_id": "1574798528345300994",
            "tweet_type": "Python tips",
            "created_at": "2022-09-27T16:30:02.000Z"
        },
        {
            "id": 1271,
            "username": "bascodes",
            "tweet_id": "1574821180204277762",
            "tweet_text": "Hi \ud83d\udc4b, I'm Bas!\n\n\ud83d\udc68\u200d\ud83d\udcbb I'm a developer, consultant and trainer\n\n\u2615\ufe0f Send me a DM to have a #CoffeeChat\n\n\uea00 Follow me for interesting content about\n\ud83d\udc0d Python\n\ud83d\uddc4\ufe0f Databases\n\u2601\ufe0f DevOps\n\n\ud83d\udcec\ud83d\udc47\nhttps://t.co/bFwtmzMTO4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574821180204277762",
            "tweet_type": "Others",
            "created_at": "2022-09-27T18:00:02.000Z"
        },
        {
            "id": 1569,
            "username": "testdrivenio",
            "tweet_id": "1575110967847178241",
            "tweet_text": "Pytest for Beginners \n\nhttps://t.co/7jcvHLYtVD \n\nThis article looks at the very basics of using pytest for testing Python code.\n\nby @GirlLovesToCode \n\n#Python #pytest @pytestdotorg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575110967847178241",
            "tweet_type": "Others",
            "created_at": "2022-09-28T13:11:33.000Z"
        },
        {
            "id": 1270,
            "username": "bascodes",
            "tweet_id": "1575150450134978564",
            "tweet_text": "I really need something to organize my Twitter bookmarks\u2026\n\nI mean, folders already help, but still\u2026",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150450134978564",
            "tweet_type": "Others",
            "created_at": "2022-09-28T15:48:26.000Z"
        },
        {
            "id": 714,
            "username": "alexxubyte",
            "tweet_id": "1575150633358802944",
            "tweet_text": "/1 The CAP theorem is one of the most famous terms in computer science, but I bet different developers have different understandings. Let\u2019s examine what it is and why it can be confusing. https://t.co/nFg7w9GPuf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdwPJtlUoAAQMEd.jpg\"]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:10.000Z"
        },
        {
            "id": 713,
            "username": "alexxubyte",
            "tweet_id": "1575150637184012288",
            "tweet_text": "/2 CAP theorem states that a distributed system can't provide more than two of these three guarantees simultaneously.\n\n\ud835\udc02\ud835\udc28\ud835\udc27\ud835\udc2c\ud835\udc22\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc1c\ud835\udc32: consistency means all clients see the same data at the same time no matter which node they connect to.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:11.000Z"
        },
        {
            "id": 712,
            "username": "alexxubyte",
            "tweet_id": "1575150639763443712",
            "tweet_text": "/3 \ud835\udc00\ud835\udc2f\ud835\udc1a\ud835\udc22\ud835\udc25\ud835\udc1a\ud835\udc1b\ud835\udc22\ud835\udc25\ud835\udc22\ud835\udc2d\ud835\udc32: availability means any client which requests data gets a response even if some of the nodes are down.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:12.000Z"
        },
        {
            "id": 711,
            "username": "alexxubyte",
            "tweet_id": "1575150642305171456",
            "tweet_text": "/4 \ud835\udc0f\ud835\udc1a\ud835\udc2b\ud835\udc2d\ud835\udc22\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 \ud835\udc13\ud835\udc28\ud835\udc25\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc27\ud835\udc1c\ud835\udc1e: a partition indicates a communication break between two nodes. Partition tolerance means the system continues to operate despite network partitions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:12.000Z"
        },
        {
            "id": 710,
            "username": "alexxubyte",
            "tweet_id": "1575150644905668608",
            "tweet_text": "/5 The \u201c2 of 3\u201d formulation can be useful, \ud835\udc1b\ud835\udc2e\ud835\udc2d \ud835\udc2d\ud835\udc21\ud835\udc22\ud835\udc2c \ud835\udc2c\ud835\udc22\ud835\udc26\ud835\udc29\ud835\udc25\ud835\udc22\ud835\udc1f\ud835\udc22\ud835\udc1c\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 \ud835\udc1c\ud835\udc28\ud835\udc2e\ud835\udc25\ud835\udc1d \ud835\udc1b\ud835\udc1e \ud835\udc26\ud835\udc22\ud835\udc2c\ud835\udc25\ud835\udc1e\ud835\udc1a\ud835\udc1d\ud835\udc22\ud835\udc27\ud835\udc20.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:13.000Z"
        },
        {
            "id": 709,
            "username": "alexxubyte",
            "tweet_id": "1575150647325794304",
            "tweet_text": "/6 1. Picking a database is not easy. Justifying our choice purely based on the CAP theorem is not enough. e.g., companies don't choose Cassandra for chat applications simply because it is an AP system. There is a list of good characteristics that make it a desirable option.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:13.000Z"
        },
        {
            "id": 708,
            "username": "alexxubyte",
            "tweet_id": "1575150649783615488",
            "tweet_text": "/7 2. \u201cCAP prohibits only a tiny part of the design space: perfect availability and consistency in the presence of partitions, which are rare\u201d. Quoted from the paper: CAP Twelve Years Later: How the \u201cRules\u201d Have Changed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:14.000Z"
        },
        {
            "id": 707,
            "username": "alexxubyte",
            "tweet_id": "1575150652266663937",
            "tweet_text": "/8 3. The theorem is about 100% availability and consistency. A more realistic discussion would be the trade-offs between latency and consistency when there is no network partition. See PACELC theorem for more details.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:15.000Z"
        },
        {
            "id": 706,
            "username": "alexxubyte",
            "tweet_id": "1575150655525687296",
            "tweet_text": "/9 \ud835\udc08\ud835\udc2c \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc02\ud835\udc00\ud835\udc0f \ud835\udc2d\ud835\udc21\ud835\udc1e\ud835\udc28\ud835\udc2b\ud835\udc1e\ud835\udc26 \ud835\udc1a\ud835\udc1c\ud835\udc2d\ud835\udc2e\ud835\udc1a\ud835\udc25\ud835\udc25\ud835\udc32 \ud835\udc2e\ud835\udc2c\ud835\udc1e\ud835\udc1f\ud835\udc2e\ud835\udc25?\n\nI think it is still useful as it opens our minds to a set of tradeoff discussion, but it is only part of the story. We need to dig deeper when picking the right database\n\nOver to you: do you think CAP is useful?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:15.000Z"
        },
        {
            "id": 705,
            "username": "alexxubyte",
            "tweet_id": "1575150658071601153",
            "tweet_text": "/10 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/4g1e3GOgRU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575150633358802944",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-28T15:49:16.000Z"
        },
        {
            "id": 1568,
            "username": "testdrivenio",
            "tweet_id": "1575160914135089152",
            "tweet_text": "Python Clean Code Tip:\n\nCheck the quality of your code inside your CI pipeline.\n\n- flake8 - style guide enforcer\n- black - code formatting\n- isort - optimize imports\n- bandit - check for security vulnerabilities\n- safety - check for security vulnerabilities of dependencies\n\n\ud83d\udc47 https://t.co/sUCK1T0n7Z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdwYgIXagAAuvX1.png\"]",
            "tweet_conversation_id": "1575160914135089152",
            "tweet_type": "Python tips",
            "created_at": "2022-09-28T16:30:01.000Z"
        },
        {
            "id": 1269,
            "username": "bascodes",
            "tweet_id": "1575441097261711360",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d This little \ud835\ude8f\ud835\ude98\ud835\ude9b-loop will cause one additional SQL query for each book. This is called the \ud835\ude7d+\ud835\udff7 problem.\n\nHow to increase performance in #Django ORM? https://t.co/gChl8JFunV",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd0W4ZuWQAIt3WK.png\"]",
            "tweet_conversation_id": "1575441097261711360",
            "tweet_type": "Python tips",
            "created_at": "2022-09-29T11:03:22.000Z"
        },
        {
            "id": 1268,
            "username": "bascodes",
            "tweet_id": "1575441099883220995",
            "tweet_text": "1. Use \ud835\ude9c\ud835\ude8e\ud835\ude95\ud835\ude8e\ud835\ude8c\ud835\ude9d_\ud835\ude9b\ud835\ude8e\ud835\ude95\ud835\ude8a\ud835\ude9d\ud835\ude8e\ud835\ude8d\n\nOnly one query will be executed: The author's data is JOIN'ed in SQL: https://t.co/O3il6ddYTz",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd0W8hSWIAAXDFP.jpg\"]",
            "tweet_conversation_id": "1575441097261711360",
            "tweet_type": "Others",
            "created_at": "2022-09-29T11:03:23.000Z"
        },
        {
            "id": 1267,
            "username": "bascodes",
            "tweet_id": "1575441101732954114",
            "tweet_text": "2. Use \ud835\ude99\ud835\ude9b\ud835\ude8e\ud835\ude8f\ud835\ude8e\ud835\ude9d\ud835\ude8c\ud835\ude91_\ud835\ude9b\ud835\ude8e\ud835\ude95\ud835\ude8a\ud835\ude9d\ud835\ude8e\ud835\ude8d\n\nIf you have only a minimal number of authors but a larger number of books, it can be beneficial to do the \"JOIN\" in Python.\n\n\ud835\ude99\ud835\ude9b\ud835\ude8e\ud835\ude8f\ud835\ude8e\ud835\ude9d\ud835\ude8c\ud835\ude91_\ud835\ude9b\ud835\ude8e\ud835\ude95\ud835\ude8a\ud835\ude9d\ud835\ude8e\ud835\ude8d will execute one additional query for each unique author found in the book list: https://t.co/6tt9ShzuqP",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd0XBqBWIAEQ1nL.jpg\"]",
            "tweet_conversation_id": "1575441097261711360",
            "tweet_type": "Others",
            "created_at": "2022-09-29T11:03:23.000Z"
        },
        {
            "id": 1567,
            "username": "testdrivenio",
            "tweet_id": "1575480526357483520",
            "tweet_text": "The Complete Python Development Guide\n\nhttps://t.co/816EWFyrnD\n\nWant to take your Python development to the next level?\n\nDevelop Python apps with confidence by mastering the tools needed to ship well-tested, high-quality code.\n\nby @jangiacomelli\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575480526357483520",
            "tweet_type": "Others",
            "created_at": "2022-09-29T13:40:03.000Z"
        },
        {
            "id": 704,
            "username": "alexxubyte",
            "tweet_id": "1575511993414389762",
            "tweet_text": "/1 Why is Nginx called a \u201c\ud835\udc2b\ud835\udc1e\ud835\udc2f\ud835\udc1e\ud835\udc2b\ud835\udc2c\ud835\udc1e\u201d proxy?\n\nThe diagram below shows the differences between a \ud835\udc1f\ud835\udc28\ud835\udc2b\ud835\udc30\ud835\udc1a\ud835\udc2b\ud835\udc1d \ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc31\ud835\udc32 and a \ud835\udc2b\ud835\udc1e\ud835\udc2f\ud835\udc1e\ud835\udc2b\ud835\udc2c\ud835\udc1e \ud835\udc29\ud835\udc2b\ud835\udc28\ud835\udc31\ud835\udc32. https://t.co/k8xQwBVgW2",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd1XzVtUcAAlOrH.jpg\"]",
            "tweet_conversation_id": "1575511993414389762",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-29T15:45:05.000Z"
        },
        {
            "id": 703,
            "username": "alexxubyte",
            "tweet_id": "1575511997772283904",
            "tweet_text": "/2 \ud83d\udd39 A forward proxy is a server that sits between user devices and the internet.\n\nA forward proxy is good for:\n\n1\ufe0f\u20e3 Protect clients\n2\ufe0f\u20e3 Avoid browsing restrictions\n3\ufe0f\u20e3 Block access to certain content",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575511993414389762",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-29T15:45:06.000Z"
        },
        {
            "id": 702,
            "username": "alexxubyte",
            "tweet_id": "1575512000326615040",
            "tweet_text": "/3 \ud83d\udd39 A reverse proxy is a server that accepts a request from the client, forwards the request to web servers, and returns the results to the client as if the proxy server had processed the request.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575511993414389762",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-29T15:45:07.000Z"
        },
        {
            "id": 701,
            "username": "alexxubyte",
            "tweet_id": "1575512012859113473",
            "tweet_text": "/4 A reverse proxy is good for:\n1\ufe0f\u20e3 Protect servers\n2\ufe0f\u20e3 Load balancing\n3\ufe0f\u20e3 Cache static contents\n4\ufe0f\u20e3 Encrypt and decrypt SSL communications\n\nGood read: https://t.co/bNbDjTmain https://t.co/NHDla6sFi5",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd1X0YHUAAEpF2-.jpg\"]",
            "tweet_conversation_id": "1575511993414389762",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-29T15:45:10.000Z"
        },
        {
            "id": 700,
            "username": "alexxubyte",
            "tweet_id": "1575512017347018753",
            "tweet_text": "/5 Over to you: What\u2019s the difference between reverse proxy and load balancer? What are some of the most popular proxy servers?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575511993414389762",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-29T15:45:11.000Z"
        },
        {
            "id": 699,
            "username": "alexxubyte",
            "tweet_id": "1575512019842740224",
            "tweet_text": "/6 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/1tAHc2EqDT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575511993414389762",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-29T15:45:11.000Z"
        },
        {
            "id": 1566,
            "username": "testdrivenio",
            "tweet_id": "1575523302038470657",
            "tweet_text": "Python Clean Code Tip:\n\nDon't use flags in functions.\nFlags are variables passed to functions, which the function uses to determine its behavior. \n\nThis should be avoided - functions should only perform a single task. \n\nSplit your function into smaller functions.\n\n\ud83d\udc47 https://t.co/OptYvMyC0X",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd1iF2-akAAgyNV.png\"]",
            "tweet_conversation_id": "1575523302038470657",
            "tweet_type": "Python tips",
            "created_at": "2022-09-29T16:30:01.000Z"
        },
        {
            "id": 1565,
            "username": "testdrivenio",
            "tweet_id": "1575550713001758720",
            "tweet_text": "Refurb\n\nhttps://t.co/AOtVa7vcuz\n\nA tool for refurbishing and modernizing Python codebases.\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575550713001758720",
            "tweet_type": "Others",
            "created_at": "2022-09-29T18:18:56.000Z"
        },
        {
            "id": 1266,
            "username": "bascodes",
            "tweet_id": "1575775251639595009",
            "tweet_text": "\ud83d\udc0d Weekend is coming!\n\nHere is my weekly reading list for interesting Python stuff!\n\n#ThisWeekInPython\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:11.000Z"
        },
        {
            "id": 1265,
            "username": "bascodes",
            "tweet_id": "1575775253879750657",
            "tweet_text": "+++\nI keep this list updated on my blog, too\n+++\nhttps://t.co/FDOJQMZ5kv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:11.000Z"
        },
        {
            "id": 1264,
            "username": "bascodes",
            "tweet_id": "1575775256085958656",
            "tweet_text": "Django on Kubernetes \u2013 by @mkalioby\nhttps://t.co/Fq5M7kcPMo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:12.000Z"
        },
        {
            "id": 1263,
            "username": "bascodes",
            "tweet_id": "1575775258409254912",
            "tweet_text": "Invasive procedures: Python affordances for performance measurement \u2013 by @itamarst\nhttps://t.co/yWUSBGIs6X",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:12.000Z"
        },
        {
            "id": 1262,
            "username": "bascodes",
            "tweet_id": "1575775260632236032",
            "tweet_text": "Using Asyncio and Batch APIs for Remote Services\nhttps://t.co/8MMzANH4AP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:13.000Z"
        },
        {
            "id": 1261,
            "username": "bascodes",
            "tweet_id": "1575775262809419776",
            "tweet_text": "Making python fast for free - adventures with mypyc \u2013 ny @meadsteve\nhttps://t.co/BrR1dADWFv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:13.000Z"
        },
        {
            "id": 1260,
            "username": "bascodes",
            "tweet_id": "1575775265031999488",
            "tweet_text": "From Python to Bytecode until C\nhttps://t.co/WeAaxgc53n",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:14.000Z"
        },
        {
            "id": 1259,
            "username": "bascodes",
            "tweet_id": "1575775267481477120",
            "tweet_text": "snakeware \u2013 A free Linux distro with a Python-based userspace\nhttps://t.co/b558ptkwO9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:14.000Z"
        },
        {
            "id": 1258,
            "username": "bascodes",
            "tweet_id": "1575775269876793344",
            "tweet_text": "refurb \u2013 A tool for refurbishing and modernizing Python codebases\nhttps://t.co/cHFNeTyrkC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:15.000Z"
        },
        {
            "id": 1257,
            "username": "bascodes",
            "tweet_id": "1575775273383235584",
            "tweet_text": "apijet \u2013 A command line tool to deploy RestApi \u2013 by @alfarruggia\nhttps://t.co/2kVbIcbWve",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:16.000Z"
        },
        {
            "id": 1256,
            "username": "bascodes",
            "tweet_id": "1575775275648000000",
            "tweet_text": "requests-ip-rotator \u2013 A Python library to utilize AWS API Gateway's large IP pool as a proxy to generate pseudo-infinite IPs for web scraping and brute forcing \u2013 by @georgeomnet\nhttps://t.co/7pW7Yz8Tyw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:16.000Z"
        },
        {
            "id": 1255,
            "username": "bascodes",
            "tweet_id": "1575775278953299968",
            "tweet_text": "cython-lint \u2013 Lint Cython files \u2013 by @marco_gorelli\nhttps://t.co/i3G8KtAthV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575775251639595009",
            "tweet_type": "Others",
            "created_at": "2022-09-30T09:11:17.000Z"
        },
        {
            "id": 1564,
            "username": "testdrivenio",
            "tweet_id": "1575863258396794880",
            "tweet_text": "Working with Django and Celery\n\nhttps://t.co/viiR7OAsSs\n\nGuide:\n\n1\u20e3 Asynchronous Tasks with Django and Celery\n2\u20e3 Periodic Tasks in Django with Celery and Docker\n3\u20e3 Automatically Retrying Failed Celery Tasks\n4\u20e3 Working with Celery and Database Transactions\n\n#Django #Celery",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575863258396794880",
            "tweet_type": "Others",
            "created_at": "2022-09-30T15:00:53.000Z"
        },
        {
            "id": 698,
            "username": "alexxubyte",
            "tweet_id": "1575874898043338752",
            "tweet_text": "/1 Payment through scanning QR code is very common but do you know how many ways there are to do it?\n\nThere are 4 ways, no matter whether you\u2019re using PayPal, Stripe, Paytm, WeChat, or Alipay. Is this surprising to you? To understand this, we will answer to questions. https://t.co/eecwFLZHKU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd6h3faVQAUlgkW.jpg\"]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:08.000Z"
        },
        {
            "id": 697,
            "username": "alexxubyte",
            "tweet_id": "1575874905987379201",
            "tweet_text": "/2 The first question is who presents the QR code:\n\n1. You can present the QR code and the merchant scans the code for payment. This is called \u2018consumer-presented mode, and what the merchant does is direct debit your account. https://t.co/mk0pwctYJ1",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd6h32pUAAAD2Jr.jpg\"]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:10.000Z"
        },
        {
            "id": 696,
            "username": "alexxubyte",
            "tweet_id": "1575874913344245760",
            "tweet_text": "/3 2. Obviously, the other way is that the merchant presents the QR code for you to scan to pay the due amount. This is called \u2018merchant-presented mode\u2019 and you grant the direct credit from your account. https://t.co/DCKVN12NVY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd6h4S4VUAAKcAz.jpg\"]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:12.000Z"
        },
        {
            "id": 695,
            "username": "alexxubyte",
            "tweet_id": "1575874916779368450",
            "tweet_text": "/4 The second question is whether the QR code is dynamic or static:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:13.000Z"
        },
        {
            "id": 694,
            "username": "alexxubyte",
            "tweet_id": "1575874923733536770",
            "tweet_text": "/5 1. A dynamic QR code means the QR code will be generated when you present it, or it will automatically regenerate every few seconds. Because it is dynamically generated, it may contain rich information, such as the amount due, transaction type, etc. https://t.co/zYENQ5M2TC",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd6h43SUcBkQvuO.jpg\"]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:14.000Z"
        },
        {
            "id": 693,
            "username": "alexxubyte",
            "tweet_id": "1575874931627204610",
            "tweet_text": "/6 2. A static QR code is generated once and used everywhere. Usually, it only contains the account information. https://t.co/9qmqcWpLr2",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd6h5VHVQAAmFuv.jpg\"]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:16.000Z"
        },
        {
            "id": 692,
            "username": "alexxubyte",
            "tweet_id": "1575874935456530432",
            "tweet_text": "/7 So there are 2*2=4 ways to scan a QR code, which are:\n\n1. Consumer-presented mode + static QR code\n2. Consumer-presented mode + dynamic QR code\n3. Merchant-presented mode + static QR code\n4. Merchant-presented mode + dynamic QR code",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:17.000Z"
        },
        {
            "id": 691,
            "username": "alexxubyte",
            "tweet_id": "1575874937964748802",
            "tweet_text": "/8 \ud83d\udc49 Over to you: I\u2019ve marked one of the scan-to-pay scenarios with a red alert symbol to indicate that a risk is present. Do you know why it is high risk?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:18.000Z"
        },
        {
            "id": 690,
            "username": "alexxubyte",
            "tweet_id": "1575874940443643904",
            "tweet_text": "/9 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/0gUPavo7Xn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575874898043338752",
            "tweet_type": "Systems Design",
            "created_at": "2022-09-30T15:47:18.000Z"
        },
        {
            "id": 1563,
            "username": "testdrivenio",
            "tweet_id": "1575885690604240897",
            "tweet_text": "Python Clean Code Tip:\n\nDon't add redundant context.\n\nDo not add unnecessary data to variable names, especially if you're working with classes.\n\n\ud83d\udc47 https://t.co/xGeyQV8wu4",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd6rrsFUoAQTwYE.png\"]",
            "tweet_conversation_id": "1575885690604240897",
            "tweet_type": "Python tips",
            "created_at": "2022-09-30T16:30:01.000Z"
        },
        {
            "id": 1254,
            "username": "bascodes",
            "tweet_id": "1575990517329842176",
            "tweet_text": "Edit Button?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575990517329842176",
            "tweet_type": "Others",
            "created_at": "2022-09-30T23:26:34.000Z"
        },
        {
            "id": 1253,
            "username": "bascodes",
            "tweet_id": "1576080963188445186",
            "tweet_text": "Improve twitter bookmarks https://t.co/oKyRRl5Ggg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576080963188445186",
            "tweet_type": "Others",
            "created_at": "2022-10-01T05:25:58.000Z"
        },
        {
            "id": 689,
            "username": "alexxubyte",
            "tweet_id": "1576083905756598273",
            "tweet_text": "If you like gaming, infra, or creator innovation, you might like this podcast as well. Highly recommend it! https://t.co/UHo40To7PY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576083905756598273",
            "tweet_type": "Others",
            "created_at": "2022-10-01T05:37:40.000Z"
        },
        {
            "id": 688,
            "username": "alexxubyte",
            "tweet_id": "1576092381841018882",
            "tweet_text": "Spent 2 hours editing tomorrow's newsletter text so it won\u2019t end up in the promotional folder. Findings. Gmail doesn\u2019t like:\n \n- Amazon links\n- \u201cAlso\u201d, \u201cAnd\u201d in the title\n- Images that contain YouTube\n-  Word \u201cpayment\u201d\n- Too many headings\n \nIf you have any tips, please share :) https://t.co/c3NyZTrRIQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd9nbZCVsAAlU03.jpg\"]",
            "tweet_conversation_id": "1576092381841018882",
            "tweet_type": "Others",
            "created_at": "2022-10-01T06:11:20.000Z"
        },
        {
            "id": 687,
            "username": "alexxubyte",
            "tweet_id": "1576236887278178304",
            "tweet_text": "Next week, we will cover:\n\ud83d\udd39Column-based DB\n\ud83d\udd39Typical data-intensive architecture\n\ud83d\udd39Stack Overflow: The Architecture\n\ud83d\udd39SQL optimization tips\n\ud83d\udd39Latency numbers you should know (video)\n\nSubscribe to the newsletter here: https://t.co/0RYwcKv26q https://t.co/GqlSl6EzGI",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd_rGDmUoAEtWUN.jpg\"]",
            "tweet_conversation_id": "1576236887278178304",
            "tweet_type": "Others",
            "created_at": "2022-10-01T15:45:33.000Z"
        },
        {
            "id": 686,
            "username": "alexxubyte",
            "tweet_id": "1576236914604064768",
            "tweet_text": "We are so grateful for the continued support of @getpostman. Learn about their service by visiting https://t.co/u4A0FabinA\n\n@kinlane, it\u2019s been a pleasure working with you. Would love to co-collaborate some content in the API space.\n\nCheck out this awesome infographic by Postman. https://t.co/LuiRX6D1tG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd_rGZZUAAEnT8-.jpg\"]",
            "tweet_conversation_id": "1576236887278178304",
            "tweet_type": "Others",
            "created_at": "2022-10-01T15:45:40.000Z"
        },
        {
            "id": 1562,
            "username": "testdrivenio",
            "tweet_id": "1576248077308104705",
            "tweet_text": "Python Clean Code Tip:\n\nFunctions should only perform a single task\nHint: If your function contains the keyword 'and', you can probably split it into two functions.\n\n\ud83d\udc47 https://t.co/Ajd2eNVYIo",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd_1RV9UYAE_axz.png\"]",
            "tweet_conversation_id": "1576248077308104705",
            "tweet_type": "Python tips",
            "created_at": "2022-10-01T16:30:01.000Z"
        },
        {
            "id": 1252,
            "username": "bascodes",
            "tweet_id": "1576298890172563457",
            "tweet_text": "Oh the irony! \n\nAnyway, have a great weekend! https://t.co/EB3IeCQeRH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeAje1eWIAIjorK.jpg\"]",
            "tweet_conversation_id": "1576298890172563457",
            "tweet_type": "Others",
            "created_at": "2022-10-01T19:51:56.000Z"
        },
        {
            "id": 1251,
            "username": "bascodes",
            "tweet_id": "1576560394885165056",
            "tweet_text": "What kind of project do you dream of building?\n\nWhat's stopping you from building it?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576560394885165056",
            "tweet_type": "Others",
            "created_at": "2022-10-02T13:11:03.000Z"
        },
        {
            "id": 1561,
            "username": "testdrivenio",
            "tweet_id": "1576610465211625475",
            "tweet_text": "Python Clean Code Tip:\n\nKeep your arguments at a minimum.\nIdeally, your functions should only have one to two arguments. If you need to provide more arguments to the function, you can create a config object which you pass to the function or split it into multiple functions.\n\n\ud83d\udc47 https://t.co/xV5rBLscWe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeE-3GzaYAAh3dF.png\"]",
            "tweet_conversation_id": "1576610465211625475",
            "tweet_type": "Python tips",
            "created_at": "2022-10-02T16:30:01.000Z"
        },
        {
            "id": 1250,
            "username": "bascodes",
            "tweet_id": "1576883820317458433",
            "tweet_text": "What\u2019s your take on no-code tools?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576883820317458433",
            "tweet_type": "Others",
            "created_at": "2022-10-03T10:36:14.000Z"
        },
        {
            "id": 1560,
            "username": "testdrivenio",
            "tweet_id": "1576937692016758795",
            "tweet_text": "Deep Dive Into Flask Guide\n\nhttps://t.co/RhZSpml9OX\n\nCovers topics like:\n\n1\u20e3The Application and Request Contexts\n2\u20e3Werkzeug\n3\u20e3Sessions\n4\u20e3Security\n5\u20e3Testing\n6\u20e3Asynchronous route handlers\n\nDeveloped by \n@patkennedy79\n\n#Flask @PalletsTeam",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576937692016758795",
            "tweet_type": "Others",
            "created_at": "2022-10-03T14:10:18.000Z"
        },
        {
            "id": 685,
            "username": "alexxubyte",
            "tweet_id": "1576961080454021121",
            "tweet_text": "/1 One picture is worth a thousand words. Interesting database selection trees.\n\niQIYI is one of the largest online video sites in the world, with over 500 million monthly active users. Let's look at how they choose relational and NoSQL databases. https://t.co/Qg0sTgAkr4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeJ9vjLVsAASnUj.jpg\"]",
            "tweet_conversation_id": "1576961080454021121",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-03T15:43:14.000Z"
        },
        {
            "id": 684,
            "username": "alexxubyte",
            "tweet_id": "1576961084451192832",
            "tweet_text": "/2 The following databases are used at iQIYI:\n- MySQL\n- Redis\n- TiDB: a hybrid transactional/analytical processing (HTAP) distributed database\n- Couchbase: distributed multi-model NoSQL document-oriented database\n- TokuDB: open-source storage engine for MySQL and MariaDB.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576961080454021121",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-03T15:43:15.000Z"
        },
        {
            "id": 683,
            "username": "alexxubyte",
            "tweet_id": "1576961092688879616",
            "tweet_text": "/3 - Big data analytical systems, like Hive and Impala\n- Other databases, like MongoDB, HiGraph, and TiKV\n\nThe database selection trees below explain how they choose a database. https://t.co/yhNJdREWy3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeJ9wKwUAAA1vci.jpg\"]",
            "tweet_conversation_id": "1576961080454021121",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-03T15:43:17.000Z"
        },
        {
            "id": 682,
            "username": "alexxubyte",
            "tweet_id": "1576961096908275712",
            "tweet_text": "/4 Over to you: choosing the database is hard. The view might be controversial. How do you usually pick the right DB?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576961080454021121",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-03T15:43:18.000Z"
        },
        {
            "id": 681,
            "username": "alexxubyte",
            "tweet_id": "1576961099361943553",
            "tweet_text": "/5 Disclaimer: This post is based on an article from PingCAP (a ByteByteGo newsletter sponsor). If you are interested in learning more, please check out their in-person HTAP database summit (free) in Mountain View, California: https://t.co/dQjDowMSTM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576961080454021121",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-03T15:43:19.000Z"
        },
        {
            "id": 680,
            "username": "alexxubyte",
            "tweet_id": "1576961101941481472",
            "tweet_text": "/6 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/LUp8qbLeXQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576961080454021121",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-03T15:43:19.000Z"
        },
        {
            "id": 1559,
            "username": "testdrivenio",
            "tweet_id": "1576972853815414785",
            "tweet_text": "Python Clean Code Tip:\n\nDon't use \"magic numbers\".\n\nMagic numbers are strange numbers that appear in code that do not have a clear meaning.\n\n\ud83d\udc47 https://t.co/Z9iTZABeA0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeKIc78UUAQwPek.png\"]",
            "tweet_conversation_id": "1576972853815414785",
            "tweet_type": "Python tips",
            "created_at": "2022-10-03T16:30:01.000Z"
        },
        {
            "id": 679,
            "username": "alexxubyte",
            "tweet_id": "1577151648001970176",
            "tweet_text": "New YouTube video coming out tomorrow. Subscribe now so you won't miss it :)\n\nLink: https://t.co/sJLcS1WYxa https://t.co/TaVrrXmLfK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeMqbY3VEAA73JF.jpg\"]",
            "tweet_conversation_id": "1577151648001970176",
            "tweet_type": "Others",
            "created_at": "2022-10-04T04:20:29.000Z"
        },
        {
            "id": 1249,
            "username": "bascodes",
            "tweet_id": "1577271149397889025",
            "tweet_text": "In how many programming languages can you write \ud835\ude77\ud835\ude8e\ud835\ude95\ud835\ude95\ud835\ude98 \ud835\ude86\ud835\ude98\ud835\ude9b\ud835\ude95\ud835\ude8d?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577271149397889025",
            "tweet_type": "Others",
            "created_at": "2022-10-04T12:15:20.000Z"
        },
        {
            "id": 1558,
            "username": "testdrivenio",
            "tweet_id": "1577301224390594560",
            "tweet_text": "Parallelism, Concurrency, and AsyncIO in Python - by example\n\nhttps://t.co/1vUrkMMz6a\n\nLooks at how to speed up CPU-bound and IO-bound operations with multiprocessing, threading, and AsyncIO and when you should use each.\n\nby @amal_ytics \n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577301224390594560",
            "tweet_type": "Others",
            "created_at": "2022-10-04T14:14:51.000Z"
        },
        {
            "id": 678,
            "username": "alexxubyte",
            "tweet_id": "1577315917666451456",
            "tweet_text": "Latency Numbers Every Programmer Should Know for the 2020s\n\nWe updated some of these numbers to more closely reflect reality in the 2020s. Absolute accuracy is not the goal. Developing an intuition of the relative differences is.\n\nWatch here: https://t.co/njJwgBm4XA https://t.co/yuNGH3oiGg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FePAd3QUUAA2Oq7.jpg\"]",
            "tweet_conversation_id": "1577315917666451456",
            "tweet_type": "Others",
            "created_at": "2022-10-04T15:13:14.000Z"
        },
        {
            "id": 1557,
            "username": "testdrivenio",
            "tweet_id": "1577335241123180544",
            "tweet_text": "Python clean code tip:\n\nAvoid using ambiguous abbreviations\n\nDon't try to come up with your own abbreviations. It's better for a variable to have a longer name than a confusing name.\n\n\ud83d\udc47 https://t.co/ZSOCdRYHuw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FePSCnaagAAq2RA.png\"]",
            "tweet_conversation_id": "1577335241123180544",
            "tweet_type": "Python tips",
            "created_at": "2022-10-04T16:30:01.000Z"
        },
        {
            "id": 1248,
            "username": "bascodes",
            "tweet_id": "1577398701156405267",
            "tweet_text": "Living in Europe, having bought Twitter Blue while staying in the US, let's see when I can edit my tweets\u2026 \n\nProbably \"soon\" https://t.co/QnW0aknmRv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577398701156405267",
            "tweet_type": "Others",
            "created_at": "2022-10-04T20:42:11.000Z"
        },
        {
            "id": 1247,
            "username": "bascodes",
            "tweet_id": "1577638594008711171",
            "tweet_text": "A short break and a brisk walk is probably the best debugging tool",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577638594008711171",
            "tweet_type": "Others",
            "created_at": "2022-10-05T12:35:26.000Z"
        },
        {
            "id": 1556,
            "username": "testdrivenio",
            "tweet_id": "1577671339552526336",
            "tweet_text": "Building a Single Page Application with Python and Pyodide - Part 1 \n\nhttps://t.co/jyhxXM4Nr2\n\nCreate an application that fetches data from a remote file, manipulates the data with Pandas, and renders it in the browser.\n\nby @amirtds\n\n#Python @Pyodide #Pandas",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577671339552526336",
            "tweet_type": "Others",
            "created_at": "2022-10-05T14:45:33.000Z"
        },
        {
            "id": 1555,
            "username": "testdrivenio",
            "tweet_id": "1577671341532217346",
            "tweet_text": "https://t.co/68pYPl84QK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577671339552526336",
            "tweet_type": "Others",
            "created_at": "2022-10-05T14:45:34.000Z"
        },
        {
            "id": 1554,
            "username": "testdrivenio",
            "tweet_id": "1577671343092518917",
            "tweet_text": "https://t.co/CorvtIFYqG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577671339552526336",
            "tweet_type": "Others",
            "created_at": "2022-10-05T14:45:34.000Z"
        },
        {
            "id": 677,
            "username": "alexxubyte",
            "tweet_id": "1577684758779203584",
            "tweet_text": "/1 How will you design the Stack Overflow website? If your answer is on-premise servers and monolith (bottom), you would likely fail the interview, but that's how it is built in reality! https://t.co/gygb1HbzxN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeUP7OEUoAEtMV1.jpg\"]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-05T15:38:53.000Z"
        },
        {
            "id": 676,
            "username": "alexxubyte",
            "tweet_id": "1577684767536881665",
            "tweet_text": "/2 \ud835\udc16\ud835\udc21\ud835\udc1a\ud835\udc2d \ud835\udc29\ud835\udc1e\ud835\udc28\ud835\udc29\ud835\udc25\ud835\udc1e \ud835\udc2d\ud835\udc21\ud835\udc22\ud835\udc27\ud835\udc24 \ud835\udc22\ud835\udc2d \ud835\udc2c\ud835\udc21\ud835\udc28\ud835\udc2e\ud835\udc25\ud835\udc1d \ud835\udc25\ud835\udc28\ud835\udc28\ud835\udc24 \ud835\udc25\ud835\udc22\ud835\udc24\ud835\udc1e\n\nThe interviewer is probably expecting something at the top.\n\n1. Microservice is used to decompose the system into small components.\n2. Each service has its own database. Use cache heavily. https://t.co/EK2FCK9T60",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeUP7oZUUAIHtmg.jpg\"]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-05T15:38:55.000Z"
        },
        {
            "id": 675,
            "username": "alexxubyte",
            "tweet_id": "1577684771479511040",
            "tweet_text": "/3 3. The service is sharded.\n4. The services talk to each other asynchronously through message queues.\n5. The service is implemented using Event Sourcing with CQRS.\n6. Showing off knowledge in distributed systems such as eventual consistency, CAP theorem, etc.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-05T15:38:56.000Z"
        },
        {
            "id": 674,
            "username": "alexxubyte",
            "tweet_id": "1577684778932793345",
            "tweet_text": "/4 \ud835\udc16\ud835\udc21\ud835\udc1a\ud835\udc2d \ud835\udc22\ud835\udc2d \ud835\udc1a\ud835\udc1c\ud835\udc2d\ud835\udc2e\ud835\udc1a\ud835\udc25\ud835\udc25\ud835\udc32 \ud835\udc22\ud835\udc2c\nStack Overflow serves all the traffic with only 9 on-premise web servers, and it\u2019s on monolith! It has its own servers and does not run on the cloud.\n\nThis is contrary to all our popular beliefs these days. https://t.co/326qYYsmEG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeUP8SSUcAAOXbp.jpg\"]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-05T15:38:57.000Z"
        },
        {
            "id": 673,
            "username": "alexxubyte",
            "tweet_id": "1577684782678351872",
            "tweet_text": "/5 \ud83d\udc49 Over to you: what is good architecture, the one that looks fancy during the interview or the one that works in reality?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-05T15:38:58.000Z"
        },
        {
            "id": 672,
            "username": "alexxubyte",
            "tweet_id": "1577684785157136384",
            "tweet_text": "/6 Reference:\n[1] Podcast by @rla4 and@shanselman: https://t.co/cdGaAZfiPx\n[2] https://t.co/tG9ExnyX3c",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-05T15:38:59.000Z"
        },
        {
            "id": 671,
            "username": "alexxubyte",
            "tweet_id": "1577684787661131776",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/xRHEOCKmHc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-05T15:39:00.000Z"
        },
        {
            "id": 670,
            "username": "alexxubyte",
            "tweet_id": "1577688810246537216",
            "tweet_text": "@shanselman Great podcast! https://t.co/cdGaAYYfNx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Others",
            "created_at": "2022-10-05T15:54:59.000Z"
        },
        {
            "id": 669,
            "username": "alexxubyte",
            "tweet_id": "1577690438173044737",
            "tweet_text": "Also drew a version like this. Which one do you like? https://t.co/uvcEEpuwr6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeUUwr1UcAAzVJ-.jpg\"]",
            "tweet_conversation_id": "1577684758779203584",
            "tweet_type": "Others",
            "created_at": "2022-10-05T16:01:27.000Z"
        },
        {
            "id": 1553,
            "username": "testdrivenio",
            "tweet_id": "1577697630519709696",
            "tweet_text": "Python Clean Code Tip:\n\nUse __post_init__ hook when working with dataclasses to apply preconditions to ensure the integrity of your objects.\n\n\ud83d\udc47 https://t.co/csnGldxt1M",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeUboauacAAIWhj.png\"]",
            "tweet_conversation_id": "1577697630519709696",
            "tweet_type": "Python tips",
            "created_at": "2022-10-05T16:30:01.000Z"
        },
        {
            "id": 1552,
            "username": "testdrivenio",
            "tweet_id": "1578005348069376000",
            "tweet_text": "Building a CRUD App with FastAPI, MongoDB, and Beanie ODM\n\nhttps://t.co/zqUlU9SBfh \n\n#FastAPI @roman_the_right @FastAPI #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578005348069376000",
            "tweet_type": "Others",
            "created_at": "2022-10-06T12:52:47.000Z"
        },
        {
            "id": 668,
            "username": "alexxubyte",
            "tweet_id": "1578025934652743680",
            "tweet_text": "/1 Why do we use \ud835\udc1c\ud835\udc28\ud835\udc25\ud835\udc2e\ud835\udc26\ud835\udc27-\ud835\udc1b\ud835\udc1a\ud835\udc2c\ud835\udc1e\ud835\udc1d \ud835\udc03\ud835\udc01? Does column-based DB provide better performance?\n\nThe diagram below shows how data is stored in column-based DB. https://t.co/78xIBU09Qq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeZGOL8UcAMQuW_.jpg\"]",
            "tweet_conversation_id": "1578025934652743680",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-06T14:14:35.000Z"
        },
        {
            "id": 667,
            "username": "alexxubyte",
            "tweet_id": "1578025938654154753",
            "tweet_text": "/2 \ud835\udc16\ud835\udc21\ud835\udc1e\ud835\udc27 \ud835\udc2d\ud835\udc28 \ud835\udc2e\ud835\udc2c\ud835\udc1e\n\n1\ufe0f\u20e3 The table is a wide table with many columns.\n2\ufe0f\u20e3 The queries and calculations are on a small number of columns.\n3\ufe0f\u20e3 A lot of the columns contain a few distinct values.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578025934652743680",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-06T14:14:36.000Z"
        },
        {
            "id": 666,
            "username": "alexxubyte",
            "tweet_id": "1578025941313331204",
            "tweet_text": "/3 \ud835\udc01\ud835\udc1e\ud835\udc27\ud835\udc1e\ud835\udc1f\ud835\udc22\ud835\udc2d\ud835\udc2c \ud835\udc28\ud835\udc1f \ud835\udc1c\ud835\udc28\ud835\udc25\ud835\udc2e\ud835\udc26\ud835\udc27-\ud835\udc1b\ud835\udc1a\ud835\udc2c\ud835\udc1e\ud835\udc1d \ud835\udc03\ud835\udc01\n\n1\ufe0f\u20e3 Higher data compression rates.\n2\ufe0f\u20e3 Higher performance on OLAP functions.\n3\ufe0f\u20e3 No need for additional indexes",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578025934652743680",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-06T14:14:37.000Z"
        },
        {
            "id": 665,
            "username": "alexxubyte",
            "tweet_id": "1578025943888646147",
            "tweet_text": "/4 \ud83d\udc49 Over to you: Can you name one column-based DB that you have used? What do you use it for?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578025934652743680",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-06T14:14:37.000Z"
        },
        {
            "id": 664,
            "username": "alexxubyte",
            "tweet_id": "1578025946367467520",
            "tweet_text": "/5 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/kDRrhybU5Q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578025934652743680",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-06T14:14:38.000Z"
        },
        {
            "id": 1246,
            "username": "bascodes",
            "tweet_id": "1578045360056008704",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Do you need a dictionary with database IDs as the key and the ORM objects as a value in Django?\n\nLike the function shown below?\n\nWell, there is a better way to do it \ud83d\udc47 https://t.co/B5w1QU22yd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeZXic-WIAEMlru.jpg\"]",
            "tweet_conversation_id": "1578045360056008704",
            "tweet_type": "Python tips",
            "created_at": "2022-10-06T15:31:47.000Z"
        },
        {
            "id": 1245,
            "username": "bascodes",
            "tweet_id": "1578045362182520833",
            "tweet_text": "Django's ORM has a method called \ud835\ude92\ud835\ude97_\ud835\ude8b\ud835\ude9e\ud835\ude95\ud835\ude94 \u2013 it returns exactly that: A dictionary with the ID as the key and the objects as values. https://t.co/VrsP60EYbA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeZXjmGWIAEFtFh.jpg\"]",
            "tweet_conversation_id": "1578045360056008704",
            "tweet_type": "Others",
            "created_at": "2022-10-06T15:31:47.000Z"
        },
        {
            "id": 1551,
            "username": "testdrivenio",
            "tweet_id": "1578060019412500485",
            "tweet_text": "Python clean code tip:\n\nAvoid doing things in only one environment (e.g., production because of rate limits of external API)\n\nRather use interface and dummy implementation together with mapping\n\n\ud83d\udc47 https://t.co/CjejIxSMBx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeZlOROUAAYgerR.png\"]",
            "tweet_conversation_id": "1578060019412500485",
            "tweet_type": "Python tips",
            "created_at": "2022-10-06T16:30:02.000Z"
        },
        {
            "id": 1244,
            "username": "bascodes",
            "tweet_id": "1578304775271383041",
            "tweet_text": "\ud83e\udd73 It's Friday!\nHere is the 32nd edition of my weekly collection of articles and projects I found #ThisWeekInPython \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:36.000Z"
        },
        {
            "id": 1243,
            "username": "bascodes",
            "tweet_id": "1578304777489813504",
            "tweet_text": "+++\nAs always, feel free to follow this series on my blog \ud83d\udc47\n+++\nhttps://t.co/pOQnm4gWF1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:37.000Z"
        },
        {
            "id": 1242,
            "username": "bascodes",
            "tweet_id": "1578304779855405056",
            "tweet_text": "Production Tips for Django Apps \u2013 by @rsingh__\nhttps://t.co/flwu6YQxoH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:37.000Z"
        },
        {
            "id": 1241,
            "username": "bascodes",
            "tweet_id": "1578304782124519425",
            "tweet_text": "Pytest for Beginners \u2013 by @TestDrivenio @GirlLovesToCode\nhttps://t.co/kESBEeyhEM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:38.000Z"
        },
        {
            "id": 1240,
            "username": "bascodes",
            "tweet_id": "1578304784897302528",
            "tweet_text": "Developing RESTful APIs with Python and Flask \u2013 by @brunoskrebs @bajcmartinez\nhttps://t.co/EHjXkEY83s",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:38.000Z"
        },
        {
            "id": 1239,
            "username": "bascodes",
            "tweet_id": "1578304787451621376",
            "tweet_text": "Animate a Math Object With a Trace Path Using Python Manim Library\nhttps://t.co/xg6AQ6IT3q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:39.000Z"
        },
        {
            "id": 1238,
            "username": "bascodes",
            "tweet_id": "1578304789880143873",
            "tweet_text": "Intro Computer Science with Python: 7-week course\nhttps://t.co/Bo7YpRRAHE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:40.000Z"
        },
        {
            "id": 1237,
            "username": "bascodes",
            "tweet_id": "1578304792606097408",
            "tweet_text": "red-box \u2013 Next generation email box manager \u2013\u00a0by @MikaelKoli\nhttps://t.co/ns3qufnvSB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:40.000Z"
        },
        {
            "id": 1236,
            "username": "bascodes",
            "tweet_id": "1578304794942672896",
            "tweet_text": "taskipy \u2013 complementary task runner for python\nhttps://t.co/x0aHRa4TBm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:41.000Z"
        },
        {
            "id": 1235,
            "username": "bascodes",
            "tweet_id": "1578304797307858945",
            "tweet_text": "zython \u2013 WebAssembly Python for servers and browsers. Built using Zig \u2013 by @cocalc_com\nhttps://t.co/kVurHH5Ajg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:41.000Z"
        },
        {
            "id": 1234,
            "username": "bascodes",
            "tweet_id": "1578304799589949440",
            "tweet_text": "isort \u2013 A Python utility / library to sort imports \nhttps://t.co/QplOH90sSq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:42.000Z"
        },
        {
            "id": 1233,
            "username": "bascodes",
            "tweet_id": "1578304801921990656",
            "tweet_text": "minestrone \u2013 Search, modify, and parse messy HTML with ease \u2013 by @adamghill\nhttps://t.co/y0FcP2ApCs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578304775271383041",
            "tweet_type": "Others",
            "created_at": "2022-10-07T08:42:42.000Z"
        },
        {
            "id": 1550,
            "username": "testdrivenio",
            "tweet_id": "1578378868746067968",
            "tweet_text": "Developing a Single Page App with FastAPI and React \n\nhttps://t.co/09k3RMp4wQ \n\nLearn how to:\n\n\ud83d\udd38Develop a RESTful API with #Python and \n@FastAPI\n\ud83d\udd38Manage state operations with #React Context API and Hooks\n\ud83d\udd38Connect a React frontend to a FastAPI backend",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578378868746067968",
            "tweet_type": "Others",
            "created_at": "2022-10-07T13:37:01.000Z"
        },
        {
            "id": 663,
            "username": "alexxubyte",
            "tweet_id": "1578409013665927168",
            "tweet_text": "Incredible Digital Art Painting! When arts meet technology. By @Vaskange \n\nOver to you: How to design infinite stories like this? https://t.co/EZIasACPD1",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1578408751249313793/pu/vid/720x1280/pijrKoUrLe-oKtJu.mp4?tag=14\"]",
            "tweet_conversation_id": "1578409013665927168",
            "tweet_type": "Others",
            "created_at": "2022-10-07T15:36:48.000Z"
        },
        {
            "id": 1549,
            "username": "testdrivenio",
            "tweet_id": "1578422405869228033",
            "tweet_text": "Python clean code tip:\n\nAlways use paginated queries\n\nUse \"last evaluated record\" approach to paginate instead of offset\n\nThis way you limit database load per single query\n\n\ud83d\udc47 https://t.co/IijPkjg2Cu",
            "tweet_media": "[\"https://pbs.twimg.com/media/Feeuz6OUAAA2nwI.png\"]",
            "tweet_conversation_id": "1578422405869228033",
            "tweet_type": "Python tips",
            "created_at": "2022-10-07T16:30:01.000Z"
        },
        {
            "id": 662,
            "username": "alexxubyte",
            "tweet_id": "1578436258233085953",
            "tweet_text": "Should we take counteroffers? Interesting thread by Louie, from the manager\u2019s standpoint. https://t.co/Y5aFsnYh0t",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578436258233085953",
            "tweet_type": "Others",
            "created_at": "2022-10-07T17:25:04.000Z"
        },
        {
            "id": 1232,
            "username": "bascodes",
            "tweet_id": "1578666030401921024",
            "tweet_text": "Yesterday, @jonathanxcoder came up with a great question in our \u2615\ufe0f#coffeechat:\n\n\u2753As a beginner, how can you showcase \u201cclean code\u201d in your open source projects or interview assignments?\n\nWhat\u2019s your take on this?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578666030401921024",
            "tweet_type": "Others",
            "created_at": "2022-10-08T08:38:06.000Z"
        },
        {
            "id": 1548,
            "username": "testdrivenio",
            "tweet_id": "1578736869822853120",
            "tweet_text": "Python Project Workflow\n\nhttps://t.co/uhPiDDx0kk\n\nConfigure GitHub Actions and Poetry to:\n\n1\u20e3run tests for your package  - on every push\n2\u20e3check code quality - on every push\n3\u20e3publish the package to PyPI - on every release\n\nby @jangiacomelli\n \n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578736869822853120",
            "tweet_type": "Others",
            "created_at": "2022-10-08T13:19:35.000Z"
        },
        {
            "id": 661,
            "username": "alexxubyte",
            "tweet_id": "1578764985911545859",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39Is encrypted messenger really secure?\n\ud83d\udd39API's API - Zapier\n\ud83d\udd39web1 - web2 - web3\n\ud83d\udd39SQL\n\ud83d\udd39What are microservices really all about?\n\nJoin a growing community of more than 150,000 readers who love System Design. Subscribe here: \nhttps://t.co/PczMAd8Jdb https://t.co/Aro3DC4naS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FejmCLoVUAAC4G7.jpg\"]",
            "tweet_conversation_id": "1578764985911545859",
            "tweet_type": "Others",
            "created_at": "2022-10-08T15:11:19.000Z"
        },
        {
            "id": 1547,
            "username": "testdrivenio",
            "tweet_id": "1578784795450314753",
            "tweet_text": "Python clean code tip:\n\nUse singledispatch instead of is instance\n\n\ud83d\udc47 https://t.co/8qF2A2f7CO",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fej4ZrVUoAEQdds.png\"]",
            "tweet_conversation_id": "1578784795450314753",
            "tweet_type": "Python tips",
            "created_at": "2022-10-08T16:30:02.000Z"
        },
        {
            "id": 1231,
            "username": "bascodes",
            "tweet_id": "1579025814284537857",
            "tweet_text": "\u2615\ufe0f Today\u2019s coffee is\u2026 green! https://t.co/3L9bsvlyUG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FenTm4bWAAAfOpV.jpg\"]",
            "tweet_conversation_id": "1579025814284537857",
            "tweet_type": "Others",
            "created_at": "2022-10-09T08:27:45.000Z"
        },
        {
            "id": 660,
            "username": "alexxubyte",
            "tweet_id": "1579130017455300608",
            "tweet_text": "/1 I\u2019ve been writing the system design newsletter for 6 months. Here are the 5 most popular ones:  \ud83d\udc47\n\nLink: https://t.co/0RYwcKv26q https://t.co/VNjSq7DLaE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeoyYQGUUAAodRr.jpg\"]",
            "tweet_conversation_id": "1579130017455300608",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-09T15:21:49.000Z"
        },
        {
            "id": 659,
            "username": "alexxubyte",
            "tweet_id": "1579130028092030977",
            "tweet_text": "/2 Proxy vs reverse proxy: https://t.co/Bej79OVpom https://t.co/P2TZiLLSeu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeoyYuqVsAUXOPn.jpg\"]",
            "tweet_conversation_id": "1579130017455300608",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-09T15:21:52.000Z"
        },
        {
            "id": 658,
            "username": "alexxubyte",
            "tweet_id": "1579130038661705729",
            "tweet_text": "/3 Design patterns cheat sheet: https://t.co/ihwA9EBcl6 https://t.co/gkc9UmVAzy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeoyZY-VUAAFtmw.jpg\"]",
            "tweet_conversation_id": "1579130017455300608",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-09T15:21:54.000Z"
        },
        {
            "id": 657,
            "username": "alexxubyte",
            "tweet_id": "1579130046790320129",
            "tweet_text": "/4 Latency numbers you should know:\nhttps://t.co/k9JbC6TIxf https://t.co/qKsLGCHDJR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeoyZ9cVEAUuWnt.jpg\"]",
            "tweet_conversation_id": "1579130017455300608",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-09T15:21:56.000Z"
        },
        {
            "id": 656,
            "username": "alexxubyte",
            "tweet_id": "1579130055959068674",
            "tweet_text": "/5 What happens when you swipe a credit card?https://t.co/5uyIeA7KKS https://t.co/MzDN9YZqRB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeoyacPUUAAmWRO.jpg\"]",
            "tweet_conversation_id": "1579130017455300608",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-09T15:21:58.000Z"
        },
        {
            "id": 655,
            "username": "alexxubyte",
            "tweet_id": "1579130071373123584",
            "tweet_text": "/6 Algorithms you should know for System Design: https://t.co/Nx42T5wROu https://t.co/pPLDsSfHnz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeoybCAUAAAzsWD.jpg\"]",
            "tweet_conversation_id": "1579130017455300608",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-09T15:22:02.000Z"
        },
        {
            "id": 654,
            "username": "alexxubyte",
            "tweet_id": "1579130076188139520",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/MFxM4jGmml",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579130017455300608",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-09T15:22:03.000Z"
        },
        {
            "id": 1546,
            "username": "testdrivenio",
            "tweet_id": "1579147179934904320",
            "tweet_text": "Python clean code tip:\n\nDefine abstract class attributes for your mixins\n\n\ud83d\udc47 https://t.co/iJpU6pvNdb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FepB_XPUoAM3CcU.png\"]",
            "tweet_conversation_id": "1579147179934904320",
            "tweet_type": "Python tips",
            "created_at": "2022-10-09T16:30:01.000Z"
        },
        {
            "id": 1545,
            "username": "testdrivenio",
            "tweet_id": "1579171543724457985",
            "tweet_text": "Async Views in Django 3.1\n\nhttps://t.co/r9Khr43Slk\n\nWe refreshed this post, adding a few examples that simulate more of a real-world scenario.\n\n#Django #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579171543724457985",
            "tweet_type": "Others",
            "created_at": "2022-10-09T18:06:50.000Z"
        },
        {
            "id": 1230,
            "username": "bascodes",
            "tweet_id": "1579421602592489473",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d How to write Python code like a pro!\n\n\ud83d\udc49 Use consistent style, proper naming, and idiomatic code.\n\nHow? Let's see! \ud83d\udc47\n\nhttps://t.co/tbY6CF4ytk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579421602592489473",
            "tweet_type": "Python tips",
            "created_at": "2022-10-10T10:40:28.000Z"
        },
        {
            "id": 1229,
            "username": "bascodes",
            "tweet_id": "1579421605096480769",
            "tweet_text": "1\ufe0f\u20e3 Consistent Style\n\nFormat your code according to PEP-8. You can also use tools like black to enforce this style guide\n\n\ud83d\udd17 https://t.co/xkg0wdn7WR https://t.co/PWp5HUnevw",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fes6vPJXkAEV_1U.png\"]",
            "tweet_conversation_id": "1579421602592489473",
            "tweet_type": "Others",
            "created_at": "2022-10-10T10:40:29.000Z"
        },
        {
            "id": 1228,
            "username": "bascodes",
            "tweet_id": "1579421607596281856",
            "tweet_text": "2\ufe0f\u20e3 Proper Naming\n\nUse consistent and self-explanatory names for your variables, classes and functions https://t.co/9TLXGiWr2T",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fes7FeTX0AEWJxg.png\"]",
            "tweet_conversation_id": "1579421602592489473",
            "tweet_type": "Others",
            "created_at": "2022-10-10T10:40:30.000Z"
        },
        {
            "id": 1227,
            "username": "bascodes",
            "tweet_id": "1579421610108678147",
            "tweet_text": "3\ufe0f\u20e3 Idiomatic Code\n\nMake use of the Python standard library for commonly used tasks. Here are two examples https://t.co/7jbbj8YQjZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fes7LdKXoAAbG6r.jpg\", \"https://pbs.twimg.com/media/Fes7MxqWAAMr3pv.jpg\"]",
            "tweet_conversation_id": "1579421602592489473",
            "tweet_type": "Others",
            "created_at": "2022-10-10T10:40:30.000Z"
        },
        {
            "id": 1226,
            "username": "bascodes",
            "tweet_id": "1579421612457459714",
            "tweet_text": "Here are more examples of idiomatic Python code \ud83d\udc47\n\nhttps://t.co/KvvpjjzR6d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579421602592489473",
            "tweet_type": "Others",
            "created_at": "2022-10-10T10:40:31.000Z"
        },
        {
            "id": 1225,
            "username": "bascodes",
            "tweet_id": "1579421808050458625",
            "tweet_text": "@jonathanxcoder https://t.co/phMcID5wGW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578666030401921024",
            "tweet_type": "Others",
            "created_at": "2022-10-10T10:41:17.000Z"
        },
        {
            "id": 1224,
            "username": "bascodes",
            "tweet_id": "1579454048469938178",
            "tweet_text": "Today is #WorldMentalHealthDay! \n\nHow do you practise self-care while working in tech?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579454048469938178",
            "tweet_type": "Others",
            "created_at": "2022-10-10T12:49:24.000Z"
        },
        {
            "id": 1223,
            "username": "bascodes",
            "tweet_id": "1579454050458038272",
            "tweet_text": "I collected some tips to avoid and recover from burnout in my blog\nhttps://t.co/xlp9MOluLy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579454048469938178",
            "tweet_type": "Others",
            "created_at": "2022-10-10T12:49:25.000Z"
        },
        {
            "id": 1544,
            "username": "testdrivenio",
            "tweet_id": "1579462991921451008",
            "tweet_text": "Deploying a Django App to Dokku on a DigitalOcean Droplet \n\nhttps://t.co/wq5yIOkXNA \n\nThis tutorial looks at how to securely deploy a Django application to Dokku on a DigitalOcean droplet.\n\n#Django @DigitalOcean @Dokku",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579462991921451008",
            "tweet_type": "Others",
            "created_at": "2022-10-10T13:24:56.000Z"
        },
        {
            "id": 653,
            "username": "alexxubyte",
            "tweet_id": "1579497349490954240",
            "tweet_text": "/1 \ud835\udc16\ud835\udc21\ud835\udc1a\ud835\udc2d \ud835\udc22\ud835\udc2c \ud835\udc16\ud835\udc1e\ud835\udc1b 3.0? Why doesn\u2019t it have \ud835\udc1a\ud835\udc1d\ud835\udc2c?\n\nThe diagram below shows Web 1.0/Web 2.0/Web 3.0 from a bird's-eye view. https://t.co/0D0kn9fdfQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeuAd2QVQAEW5MD.jpg\"]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:28.000Z"
        },
        {
            "id": 652,
            "username": "alexxubyte",
            "tweet_id": "1579497358890409986",
            "tweet_text": "/2 \ud83d\udd39Web 1.0 - Read Only\n\nBetween 1991 and 2004, the internet is like a \ud835\udc1c\ud835\udc1a\ud835\udc2d\ud835\udc1a\ud835\udc25\ud835\udc28\ud835\udc20 of \ud835\udc2c\ud835\udc2d\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc1c \ud835\udc29\ud835\udc1a\ud835\udc20\ud835\udc1e\ud835\udc2c. We can browse the content by jumping from one hyperlink to another. It doesn\u2019t provide any interactions with the content. https://t.co/1AhjEtAJ7j",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeuAeTlUAAA4wXz.jpg\"]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:30.000Z"
        },
        {
            "id": 651,
            "username": "alexxubyte",
            "tweet_id": "1579497368487022592",
            "tweet_text": "/3 \ud83d\udd39Web 2.0 - Read Write\n\nFrom 2004 to now, the internet has evolved to have search engines, social media apps, and recommendation algorithms backed apps. https://t.co/df2446iVC9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeuAe2aVIAAyhOH.jpg\"]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:32.000Z"
        },
        {
            "id": 650,
            "username": "alexxubyte",
            "tweet_id": "1579497372190576640",
            "tweet_text": "/4 Because the apps digitalize human behaviors and persist user data when users interact with these apps, big companies leverage user data for advertisements, which becomes \ud835\udc28\ud835\udc27\ud835\udc1e \ud835\udc28\ud835\udc1f \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc26\ud835\udc1a\ud835\udc22\ud835\udc27 \ud835\udc1b\ud835\udc2e\ud835\udc2c\ud835\udc22\ud835\udc27\ud835\udc1e\ud835\udc2c\ud835\udc2c \ud835\udc26\ud835\udc28\ud835\udc1d\ud835\udc1e\ud835\udc25\ud835\udc2c in Web 2.0.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:33.000Z"
        },
        {
            "id": 649,
            "username": "alexxubyte",
            "tweet_id": "1579497374723977217",
            "tweet_text": "/5 That\u2019s why people say the apps know you better than your friends, family, or even yourself.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:34.000Z"
        },
        {
            "id": 648,
            "username": "alexxubyte",
            "tweet_id": "1579497382252666880",
            "tweet_text": "/6 \ud83d\udd39Web 3.0 - Read Write Own\n\nThe idea has been discussed a lot recently due to the development of blockchain and decentralized apps. The creators\u2019 content is stored on IPFS (InterPlanetary File System) and \ud835\udc28\ud835\udc30\ud835\udc27\ud835\udc1e\ud835\udc1d \ud835\udc1b\ud835\udc32 \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc2e\ud835\udc2c\ud835\udc1e\ud835\udc2b\ud835\udc2c. https://t.co/uVTQkleEzp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeuAfrQVUAEEQwK.jpg\"]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:36.000Z"
        },
        {
            "id": 647,
            "username": "alexxubyte",
            "tweet_id": "1579497385989877761",
            "tweet_text": "/7 If apps want to access the data, they need to get \ud835\udc1a\ud835\udc2e\ud835\udc2d\ud835\udc21\ud835\udc28\ud835\udc2b\ud835\udc22\ud835\udc33\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 from the users and \ud835\udc29\ud835\udc1a\ud835\udc32 for it.\n\nIn Web 3.0, the ownership change may lead to some major innovations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:37.000Z"
        },
        {
            "id": 646,
            "username": "alexxubyte",
            "tweet_id": "1579497388493795329",
            "tweet_text": "/8 Over to you: Web 3.0 is controversial. What do you think of it? Is it the future, a scam, or a little bit of both?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:37.000Z"
        },
        {
            "id": 645,
            "username": "alexxubyte",
            "tweet_id": "1579497390905516034",
            "tweet_text": "/9 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/UgTHdmfoaM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579497349490954240",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-10T15:41:38.000Z"
        },
        {
            "id": 1543,
            "username": "testdrivenio",
            "tweet_id": "1579509570010914824",
            "tweet_text": "Python clean code tip:\n\nAvoid arguments with default values - be explicit\n\nWhy? \n\nThis often results in a working system that is just slightly off the expectation\n\n\ud83d\udc47 https://t.co/w4w3XoNWoX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeuLlNtaEAE1Q9Z.png\"]",
            "tweet_conversation_id": "1579509570010914824",
            "tweet_type": "Python tips",
            "created_at": "2022-10-10T16:30:02.000Z"
        },
        {
            "id": 1222,
            "username": "bascodes",
            "tweet_id": "1579784388984045568",
            "tweet_text": "\ud83d\udc0d Are you looking for a Python job? \ud83d\udc40\n\nHere are 5\u20e3 websites to find your next adventure!\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579784388984045568",
            "tweet_type": "Others",
            "created_at": "2022-10-11T10:42:03.000Z"
        },
        {
            "id": 1221,
            "username": "bascodes",
            "tweet_id": "1579784391412572160",
            "tweet_text": "remoteok is a job board focussed on Remote Positions built by @levelsio.\n\nhttps://t.co/mNpJpfGRff",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579784388984045568",
            "tweet_type": "Others",
            "created_at": "2022-10-11T10:42:04.000Z"
        },
        {
            "id": 1220,
            "username": "bascodes",
            "tweet_id": "1579784394218561537",
            "tweet_text": "findwork .dev is a job site that aggregates job openings from different sources, including Hacker News and others. You can search for Python jobs quickly.\n\nhttps://t.co/sKkyKLGpjS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579784388984045568",
            "tweet_type": "Others",
            "created_at": "2022-10-11T10:42:05.000Z"
        },
        {
            "id": 1219,
            "username": "bascodes",
            "tweet_id": "1579784396684808194",
            "tweet_text": "python .org is the official Python home on the Internet by @ThePSF. The website has a job board.\n\nhttps://t.co/CRpctfPKtK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579784388984045568",
            "tweet_type": "Others",
            "created_at": "2022-10-11T10:42:05.000Z"
        },
        {
            "id": 1218,
            "username": "bascodes",
            "tweet_id": "1579784398807138307",
            "tweet_text": "news .python .sc is a news aggregator for the Python community and hosts a job board that aggregates Python jobs from a variety of sources. \u2013\u00a0by @pythonicnews \n\nhttps://t.co/Lhryqi7cmS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579784388984045568",
            "tweet_type": "Others",
            "created_at": "2022-10-11T10:42:06.000Z"
        },
        {
            "id": 1217,
            "username": "bascodes",
            "tweet_id": "1579784400975589376",
            "tweet_text": "pythonengineer .pallet .com is a curated list of job openings for Python developers by @python_engineer.\n\nhttps://t.co/pgXNSMqxPw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579784388984045568",
            "tweet_type": "Others",
            "created_at": "2022-10-11T10:42:06.000Z"
        },
        {
            "id": 1216,
            "username": "bascodes",
            "tweet_id": "1579784403597037570",
            "tweet_text": "Here is the list on my blog: \n\nhttps://t.co/zZPlZtwEEA\n\nStay tuned for regular updates!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579784388984045568",
            "tweet_type": "Others",
            "created_at": "2022-10-11T10:42:07.000Z"
        },
        {
            "id": 1542,
            "username": "testdrivenio",
            "tweet_id": "1579828487283965964",
            "tweet_text": "Rapid Prototyping with Flask, htmx, and Tailwind CSS \n\nhttps://t.co/Mozm6CzES7 \n\nLooks at how to add htmx and #TailwindCSS to Flask to reduce the amount of time it takes to create and style an interactive front-end.\n\nby @amal_ytics \n \n#Flask @htmx_org",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579828487283965964",
            "tweet_type": "Others",
            "created_at": "2022-10-11T13:37:17.000Z"
        },
        {
            "id": 644,
            "username": "alexxubyte",
            "tweet_id": "1579862320959737856",
            "tweet_text": "What does a typical microservices architecture look like? And when should we use it? Let\u2019s take a look.\n\nMicroservices are loosely coupled. Each service handles a dedicated function inside a large-scale application.\n\nWatch the whole video here:\nhttps://t.co/qrF6q3MuDR https://t.co/NjyiccGexV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FezMaCHVsAA3ycC.jpg\"]",
            "tweet_conversation_id": "1579862320959737856",
            "tweet_type": "Others",
            "created_at": "2022-10-11T15:51:44.000Z"
        },
        {
            "id": 1541,
            "username": "testdrivenio",
            "tweet_id": "1579871958044246017",
            "tweet_text": "Python clean code tip:\n\nKeep your API endpoints simple and fast - move all the unnecessary logic to background tasks\n\nWhy?\n- prevent API timeouts\n- enable retries\n- simplify testing (no need for the API to run)\n\n\ud83d\udc47 https://t.co/Qpcoub6Arn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FezVK9MaEAAzweo.png\"]",
            "tweet_conversation_id": "1579871958044246017",
            "tweet_type": "Python tips",
            "created_at": "2022-10-11T16:30:02.000Z"
        },
        {
            "id": 1215,
            "username": "bascodes",
            "tweet_id": "1580173521518755841",
            "tweet_text": "I keep getting this more frequently for a couple of days\u2026 https://t.co/4CMjOn1AVr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe3ncNdWIAMFM4w.jpg\"]",
            "tweet_conversation_id": "1580173521518755841",
            "tweet_type": "Others",
            "created_at": "2022-10-12T12:28:20.000Z"
        },
        {
            "id": 1540,
            "username": "testdrivenio",
            "tweet_id": "1580179397432471553",
            "tweet_text": "Dockerizing Flask with Postgres, Gunicorn, and Nginx\n\nhttps://t.co/gwYiD3YIiA\n\nThis tutorial details how to configure Flask to run on Docker along with Postgres, Nginx, and Gunicorn.\n\n(Just updated! \ud83d\ude80)\n\n\ud83d\udc0d\ud83d\udc33\n\n#Flask #Python #Docker",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580179397432471553",
            "tweet_type": "Others",
            "created_at": "2022-10-12T12:51:41.000Z"
        },
        {
            "id": 643,
            "username": "alexxubyte",
            "tweet_id": "1580223030814384129",
            "tweet_text": "No-code tools such as Zapier, IFTTT, etc., allow anyone to build apps and automate workflows using a visual interface.\n\nThe flowchart below shows how it works.\n\nImage source: Paper: IFTTT vs. Zapier: A Comparative Study of Trigger-Action Programming Frameworks https://t.co/xOQtibjWrs",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe4UeDKUoAEOGDI.jpg\"]",
            "tweet_conversation_id": "1580223030814384129",
            "tweet_type": "Others",
            "created_at": "2022-10-12T15:45:04.000Z"
        },
        {
            "id": 1539,
            "username": "testdrivenio",
            "tweet_id": "1580234345004294144",
            "tweet_text": "Python clean code tip:\n\nDon't separate parts of your code with comments\n\nIntroduce new methods instead\n\n\ud83d\udc47 https://t.co/pTsURXIrlG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe4ewqkUAA8fEND.png\"]",
            "tweet_conversation_id": "1580234345004294144",
            "tweet_type": "Python tips",
            "created_at": "2022-10-12T16:30:01.000Z"
        },
        {
            "id": 1538,
            "username": "testdrivenio",
            "tweet_id": "1580300542827339776",
            "tweet_text": "All The Ways To Introspect Python Objects at Runtime\n\nhttps://t.co/rEcGlIkKzW\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580300542827339776",
            "tweet_type": "Others",
            "created_at": "2022-10-12T20:53:04.000Z"
        },
        {
            "id": 1537,
            "username": "testdrivenio",
            "tweet_id": "1580524418287423491",
            "tweet_text": "Docker for Beginners \n\nhttps://t.co/yntdWvE5RL \n\nProvides an overview of what Docker is, how it's used, and the basic Docker commands, so you can get up and running with Docker quickly.\n\nby @GirlLovesToCode \n\n#Docker @Docker",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580524418287423491",
            "tweet_type": "Others",
            "created_at": "2022-10-13T11:42:40.000Z"
        },
        {
            "id": 1214,
            "username": "bascodes",
            "tweet_id": "1580529058638544899",
            "tweet_text": "\ud83d\udc0d Django, Flask, or FastAPI?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580529058638544899",
            "tweet_type": "Others",
            "created_at": "2022-10-13T12:01:07.000Z"
        },
        {
            "id": 642,
            "username": "alexxubyte",
            "tweet_id": "1580585416335294469",
            "tweet_text": "/1 How do fintech startups find new opportunities among so many payment companies? What do PayPal, Stripe, and Square do exactly? \ud83d\udc47 https://t.co/ORraFXWZ7w",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe9eDm6UUAESfjk.jpg\"]",
            "tweet_conversation_id": "1580585416335294469",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-13T15:45:03.000Z"
        },
        {
            "id": 641,
            "username": "alexxubyte",
            "tweet_id": "1580585439722815488",
            "tweet_text": "/3 \ud83d\udd38Steps 2-5: The acquiring process.\n\nThe payment gateway accepts the transaction and collects payment info. It is then sent to a payment processor, which uses customer information to collect payments. The acquiring processor sends the transaction to the card network. https://t.co/x0tKGeH1nA",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe9eE1NVUAALkVJ.jpg\"]",
            "tweet_conversation_id": "1580585416335294469",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-13T15:45:09.000Z"
        },
        {
            "id": 640,
            "username": "alexxubyte",
            "tweet_id": "1580585451366195202",
            "tweet_text": "/4 \ud83d\udd38Steps 6-8: The issuing process.\n\nThe issuing processor talks to the card network on the issuing bank\u2019s behalf. It validates and operates the customer\u2019s account. https://t.co/9nIZzP4MHH",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe9eFgUVEAA5OKA.jpg\"]",
            "tweet_conversation_id": "1580585416335294469",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-13T15:45:12.000Z"
        },
        {
            "id": 639,
            "username": "alexxubyte",
            "tweet_id": "1580585455677939712",
            "tweet_text": "/5 I\u2019ve listed some companies in different verticals in the diagram. Notice payment companies usually start from one vertical, but later expand to multiple verticals.\n\n\ud83d\udc49 Quite a few payment companies offer digital wallets. Can you find a place for wallets in the ecosystem?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580585416335294469",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-13T15:45:13.000Z"
        },
        {
            "id": 638,
            "username": "alexxubyte",
            "tweet_id": "1580585458240585728",
            "tweet_text": "/6 Subscribe to our weekly System Design newsletter to learn something new every week: https://t.co/dkjDPxrTOt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580585416335294469",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-13T15:45:13.000Z"
        },
        {
            "id": 1536,
            "username": "testdrivenio",
            "tweet_id": "1580596731170783233",
            "tweet_text": "Python clean code tip:\n\nUse decorators to do something before/after your method/function call\n\n\ud83d\udc47 https://t.co/QY1X9V8PTM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe9oWWGUoAEHmaY.png\"]",
            "tweet_conversation_id": "1580596731170783233",
            "tweet_type": "Python tips",
            "created_at": "2022-10-13T16:30:01.000Z"
        },
        {
            "id": 637,
            "username": "alexxubyte",
            "tweet_id": "1580649933249515520",
            "tweet_text": "I\u2019ve been a subscriber to Lenny's free newsletter for a while and finally became a paid subscriber. Really enjoyed the content. @lennysan thank you for your incredible effort.\n \nPretty excited to start improving my product sense! https://t.co/ApVXtIRpo4",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe-W1nlUcAIAPvw.jpg\"]",
            "tweet_conversation_id": "1580649933249515520",
            "tweet_type": "Others",
            "created_at": "2022-10-13T20:01:25.000Z"
        },
        {
            "id": 1213,
            "username": "bascodes",
            "tweet_id": "1580879359266590720",
            "tweet_text": "Happy Friday, fellow devs \ud83e\udd73\n\nTwo things I want to share with you today: \n1) Don't deploy on Fridays \u2013 enjoy your weekend!\n2) My weekly collection of stuff I found #ThisWeekInPython \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:05.000Z"
        },
        {
            "id": 1212,
            "username": "bascodes",
            "tweet_id": "1580879362005815296",
            "tweet_text": "+++\nFollow #ThisWeekInPython on my blog\n+++\nhttps://t.co/gbJKVpIMWQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:05.000Z"
        },
        {
            "id": 1211,
            "username": "bascodes",
            "tweet_id": "1580879364450721792",
            "tweet_text": "When Python can\u2019t thread: a deep-dive into the GIL\u2019s impact \u2013 by @itamarst\nhttps://t.co/pFZRagR3eK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:06.000Z"
        },
        {
            "id": 1210,
            "username": "bascodes",
            "tweet_id": "1580879366816288768",
            "tweet_text": "Decorator shortcuts \u2013 by @nedbat\nhttps://t.co/VvSPrK9f7R",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:07.000Z"
        },
        {
            "id": 1209,
            "username": "bascodes",
            "tweet_id": "1580879369081589760",
            "tweet_text": "Python implementations of time series forecasting and anomaly detection \u2013 by @robjhyndman\nhttps://t.co/qNMWwF8mNl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:07.000Z"
        },
        {
            "id": 1208,
            "username": "bascodes",
            "tweet_id": "1580879371513917441",
            "tweet_text": "Musings on Python Type Hints \u2013 by @sgeisenh\nhttps://t.co/i5sVpWJDg3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:08.000Z"
        },
        {
            "id": 1207,
            "username": "bascodes",
            "tweet_id": "1580879373816602624",
            "tweet_text": "The dangers of assert in Python \u2013 by @snyksec\nhttps://t.co/xCBzoXTNkv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:08.000Z"
        },
        {
            "id": 1206,
            "username": "bascodes",
            "tweet_id": "1580879376530694144",
            "tweet_text": "django-consistency-model \u2013 DCM is a set of tools that helps you to keep your data in your Django Models consistent \u2013\u00a0by @occipital\nhttps://t.co/DYVuPthyFJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:09.000Z"
        },
        {
            "id": 1205,
            "username": "bascodes",
            "tweet_id": "1580879378770460672",
            "tweet_text": "semantic-python-overview \u2013 overview of projects which are related both to python and semantic technologies\nhttps://t.co/1cbblhNKbt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:09.000Z"
        },
        {
            "id": 1204,
            "username": "bascodes",
            "tweet_id": "1580879380980854788",
            "tweet_text": "python-preloaded \u2013 Bundle Python executable with preloaded modules \u2013 by @albertzeyer\nhttps://t.co/lkgC8aSA0r",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:10.000Z"
        },
        {
            "id": 1203,
            "username": "bascodes",
            "tweet_id": "1580879383119921152",
            "tweet_text": "inline-sql \u2013 Inline SQL in any Python program \u2013 by @ekzhang1\nhttps://t.co/vaC3zcQPnA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:10.000Z"
        },
        {
            "id": 1202,
            "username": "bascodes",
            "tweet_id": "1580879385682673666",
            "tweet_text": "pycopy \u2013 a minimalist and memory-efficient Python dialect\nhttps://t.co/Rd6m0A265G",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580879359266590720",
            "tweet_type": "Others",
            "created_at": "2022-10-14T11:13:11.000Z"
        },
        {
            "id": 1535,
            "username": "testdrivenio",
            "tweet_id": "1580930708897349632",
            "tweet_text": "Running Python in the Browser with WebAssembly from \n\nhttps://t.co/H29h9rDLaH \n\nBuild a Python code editor in the browser using WebAssembly (WASM), via Pyodide, and CodeMirror.\n\nby @amirtds\n\n#Python @Pyodide",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580930708897349632",
            "tweet_type": "Others",
            "created_at": "2022-10-14T14:37:07.000Z"
        },
        {
            "id": 636,
            "username": "alexxubyte",
            "tweet_id": "1580942840741302273",
            "tweet_text": "This is the flowchart of how slack decides to send a notification.\n\nIt is an excellent example of why a simple feature may take much longer.\n\nThis might also explain why people don\u2019t get notifications or clear the red dots sometimes.\n\nImg source: slack eng blog https://t.co/rYGKbM36Xa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfCjIkuUAAEAbvz.jpg\"]",
            "tweet_conversation_id": "1580942840741302273",
            "tweet_type": "Others",
            "created_at": "2022-10-14T15:25:20.000Z"
        },
        {
            "id": 1534,
            "username": "testdrivenio",
            "tweet_id": "1580959121242587137",
            "tweet_text": "Python clean code tip:\n\nUse _ and __ prefixes for non-public methods/functions - all that is not intended for use outside of module/class\n\nWhy?\n- to enable/simplify refactoring\n- to not show them in autocompletes\n- to communicate it's not for external use\n\n\ud83d\udc47 https://t.co/kF3a7PgGaw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfCx8LIUAAAgyTM.png\"]",
            "tweet_conversation_id": "1580959121242587137",
            "tweet_type": "Python tips",
            "created_at": "2022-10-14T16:30:01.000Z"
        },
        {
            "id": 1201,
            "username": "bascodes",
            "tweet_id": "1581244505390399490",
            "tweet_text": "The recordings of my Django ORM talk at @DjangoConEurope are online\n\n\ud83d\udcfd\ufe0f\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581244505390399490",
            "tweet_type": "Others",
            "created_at": "2022-10-15T11:24:02.000Z"
        },
        {
            "id": 1200,
            "username": "bascodes",
            "tweet_id": "1581244507755978752",
            "tweet_text": "Here is the video \ud83d\udcfd\ufe0f\nhttps://t.co/IbhlZEP8UO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581244505390399490",
            "tweet_type": "Others",
            "created_at": "2022-10-15T11:24:03.000Z"
        },
        {
            "id": 1199,
            "username": "bascodes",
            "tweet_id": "1581244510050217985",
            "tweet_text": "And here are the slides \ud83d\udcd6\nhttps://t.co/Ez6TLIxLA0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581244505390399490",
            "tweet_type": "Others",
            "created_at": "2022-10-15T11:24:03.000Z"
        },
        {
            "id": 1533,
            "username": "testdrivenio",
            "tweet_id": "1581275111155412992",
            "tweet_text": "Permissions in Django  \n\nhttps://t.co/cypF3pweMW \n\nLooks at how to leverage Django's default permission system to assign permissions to users and groups.\n\nby @MOluwole\n\n#Python #Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581275111155412992",
            "tweet_type": "Others",
            "created_at": "2022-10-15T13:25:39.000Z"
        },
        {
            "id": 635,
            "username": "alexxubyte",
            "tweet_id": "1581302122716401664",
            "tweet_text": "Next week, we will cover:\n\ud83d\udd39 Is Telegram secure?\n\ud83d\udd39 Reliable UDP\n\ud83d\udd39 B tree v.s. LSM\n\ud83d\udd39 Clock in distributed systems\n\ud83d\udd39 Google pay vs. Apple pay\n\nSubscribe here: https://t.co/PczMAd8Jdb https://t.co/j1WdQU0Flz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfHp5lWUAAIr7S3.jpg\"]",
            "tweet_conversation_id": "1581302122716401664",
            "tweet_type": "Others",
            "created_at": "2022-10-15T15:12:59.000Z"
        },
        {
            "id": 1532,
            "username": "testdrivenio",
            "tweet_id": "1581321509033107457",
            "tweet_text": "Python clean code tip:\n\nUse casefold when comparing two strings case insensitive\n\nWhy? \n\nIt removes all case distinctions in strings\n\n\ud83d\udc47 https://t.co/LfzSAvC5iD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfH7h8TagAEBgM6.png\"]",
            "tweet_conversation_id": "1581321509033107457",
            "tweet_type": "Python tips",
            "created_at": "2022-10-15T16:30:01.000Z"
        },
        {
            "id": 634,
            "username": "alexxubyte",
            "tweet_id": "1581440154467586048",
            "tweet_text": "Re: what tools I use: draw. io and omnigraffle",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581302122716401664",
            "tweet_type": "Others",
            "created_at": "2022-10-16T00:21:29.000Z"
        },
        {
            "id": 1531,
            "username": "testdrivenio",
            "tweet_id": "1581612056582627328",
            "tweet_text": "Rapid Prototyping with Django, htmx, and Tailwind CSS \n\nhttps://t.co/77U9GGtmlq \n\nLooks at how to add htmx and Tailwind CSS to Django to reduce the amount of time it takes to create and style an interactive front-end.\n\nby @amal_ytics \n \n#Django #TailwindCSS @htmx_org",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581612056582627328",
            "tweet_type": "Others",
            "created_at": "2022-10-16T11:44:33.000Z"
        },
        {
            "id": 1198,
            "username": "bascodes",
            "tweet_id": "1581640241894477824",
            "tweet_text": "Want to increase your productivity for the coming week by 230%?\n\nRead this! \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581640241894477824",
            "tweet_type": "Others",
            "created_at": "2022-10-16T13:36:33.000Z"
        },
        {
            "id": 1197,
            "username": "bascodes",
            "tweet_id": "1581640244348129282",
            "tweet_text": "Rest on Sundays. Enjoy your time outdoors, spend time with your loved ones, and don't feel pressured to do anything today!\n\nThat's it. That's the thread.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581640241894477824",
            "tweet_type": "Others",
            "created_at": "2022-10-16T13:36:34.000Z"
        },
        {
            "id": 1530,
            "username": "testdrivenio",
            "tweet_id": "1581683894968995841",
            "tweet_text": "Python clean code tip:\n\nUse HTTPStatus for status codes instead of magic numbers\n\n\ud83d\udc47 https://t.co/PpSDQBIYYn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfNFHnaVUAAW4ng.png\"]",
            "tweet_conversation_id": "1581683894968995841",
            "tweet_type": "Python tips",
            "created_at": "2022-10-16T16:30:01.000Z"
        },
        {
            "id": 1529,
            "username": "testdrivenio",
            "tweet_id": "1581741325497421825",
            "tweet_text": "FastAPI - stable enough for production grade, scalable app? (discussion)\n\nhttps://t.co/mI2oA6e25d\n\n#FastAPI #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581741325497421825",
            "tweet_type": "Others",
            "created_at": "2022-10-16T20:18:13.000Z"
        },
        {
            "id": 1528,
            "username": "testdrivenio",
            "tweet_id": "1581982554030505984",
            "tweet_text": "Concurrent Web Scraping with Selenium Grid and Docker Swarm \n\nhttps://t.co/QW9od0C0D0\n\nLooks at how to run a Python and Selenium-based web scraper in parallel with Selenium Grid and Docker Swarm on Digital Ocean.\n\n#Python #Selenium #Docker #WebScraping @digitalocean",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581982554030505984",
            "tweet_type": "Others",
            "created_at": "2022-10-17T12:16:47.000Z"
        },
        {
            "id": 1196,
            "username": "bascodes",
            "tweet_id": "1582017780395954178",
            "tweet_text": "Are you looking for a job right now?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582017780395954178",
            "tweet_type": "Others",
            "created_at": "2022-10-17T14:36:45.000Z"
        },
        {
            "id": 633,
            "username": "alexxubyte",
            "tweet_id": "1582034967210573826",
            "tweet_text": "/1 What protocol does \ud835\udc28\ud835\udc27\ud835\udc25\ud835\udc22\ud835\udc27\ud835\udc1e \ud835\udc20\ud835\udc1a\ud835\udc26\ud835\udc22\ud835\udc27\ud835\udc20 use to transmit data? TCP or UDP?\n\nA common practice is to use RUDP (Reliable UDP). It adds a \ud835\udc2b\ud835\udc1e\ud835\udc25\ud835\udc22\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e mechanism on top of UDP so that it provides \ud835\udc26\ud835\udc2e\ud835\udc1c\ud835\udc21 \ud835\udc25\ud835\udc28\ud835\udc30\ud835\udc1e\ud835\udc2b \ud835\udc25\ud835\udc1a\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc1c\ud835\udc32 than TCP and guarantees accuracy. https://t.co/pC7lCownni",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfSEarrVUAAkDtm.jpg\"]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:03.000Z"
        },
        {
            "id": 632,
            "username": "alexxubyte",
            "tweet_id": "1582034970498912256",
            "tweet_text": "/2 The diagram below shows how reliable data delivery is implemented in online gaming to get eventually-synchronized states.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:04.000Z"
        },
        {
            "id": 631,
            "username": "alexxubyte",
            "tweet_id": "1582034973011255296",
            "tweet_text": "/3 Suppose there is a big fight in a simulation shooter game. Characters A, B, and C open fires in sequence. How does the game server transmit the states from the game server to the game client?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:05.000Z"
        },
        {
            "id": 630,
            "username": "alexxubyte",
            "tweet_id": "1582034980770750465",
            "tweet_text": "/4 \ud83d\udd39Steps 1 and 2 - Character A opens fires. The packet (packet 0) is sent to the client. The client acknowledges the server.\n\n\ud83d\udd39Step 3 - Character B opens fire. The packet is lost during transmission. https://t.co/ZGjMJ91h0m",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfSEbW3VsAAgagI.jpg\"]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:06.000Z"
        },
        {
            "id": 629,
            "username": "alexxubyte",
            "tweet_id": "1582034989440376833",
            "tweet_text": "/5 \ud83d\udd39Steps 4 and 5 - Character C opens fire. Packet 2 is sent to the client. Since the last delivered packet is packet 0, the client knows that packet 1 is lost, so packet 2 is \ud835\udc1b\ud835\udc2e\ud835\udc1f\ud835\udc1f\ud835\udc1e\ud835\udc2b\ud835\udc1e\ud835\udc1d on the client side. The client acks the server for the reception of packet 2 https://t.co/NLUhEGa6C8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfSEb2iVUAEbOVT.jpg\"]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:08.000Z"
        },
        {
            "id": 628,
            "username": "alexxubyte",
            "tweet_id": "1582034998852362240",
            "tweet_text": "/6 \ud83d\udd39Steps 6 and 7 - The server doesn\u2019t receive the ack for packet 1 for a while, so it resends packet 1. When the client receives packet 1, all the subsequent packets become effective, so packets 1 and 2 become \u201c\ud835\udc1d\ud835\udc1e\ud835\udc25\ud835\udc22\ud835\udc2f\ud835\udc1e\ud835\udc2b\ud835\udc1e\ud835\udc1d\u201d. https://t.co/HAWyak8nXm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfSEcWkVQAMjwwE.jpg\"]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:11.000Z"
        },
        {
            "id": 627,
            "username": "alexxubyte",
            "tweet_id": "1582035002375606273",
            "tweet_text": "/7 The client then acks the server for the reception of packet 1. No packets are buffered at this point.\n\n\ud83d\udc49 Over to you: Can you think of another use case where RUDP can help?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:12.000Z"
        },
        {
            "id": 626,
            "username": "alexxubyte",
            "tweet_id": "1582035004984418309",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/AM0Dwf1tUB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582034967210573826",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-17T15:45:12.000Z"
        },
        {
            "id": 1527,
            "username": "testdrivenio",
            "tweet_id": "1582046283987943428",
            "tweet_text": "Python clean code tip:\n\nUse the simplest possible arguments for your methods\n\nWhy?\n\nYou can pass them directly from your entry points (API, Celery jobs, ...) - no need for unnecessarily loading of complex objects etc.\n\n\ud83d\udc47 https://t.co/DV929jtlp8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfSOta-aEAE-lW6.png\"]",
            "tweet_conversation_id": "1582046283987943428",
            "tweet_type": "Python tips",
            "created_at": "2022-10-17T16:30:01.000Z"
        },
        {
            "id": 1195,
            "username": "bascodes",
            "tweet_id": "1582333676896911361",
            "tweet_text": "\ud83d\udca1For those of you seeking a job right now, here are some resources for your hunt\n\n#100Devs\n\nhttps://t.co/22LfzZBniq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582333676896911361",
            "tweet_type": "Others",
            "created_at": "2022-10-18T11:32:01.000Z"
        },
        {
            "id": 1194,
            "username": "bascodes",
            "tweet_id": "1582333679438729217",
            "tweet_text": "1) Prepare for the interview\n\nAce Python interviews by @reuvenmlerner (Free, https://t.co/QDsXqLIYD7)\n\nInterview Questions Cheat Sheet by @avikumart_ (https://t.co/OK7eKW42CV)\n\nWebsites to Prepare by @souravcode (https://t.co/LOrTicaQLM)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582333676896911361",
            "tweet_type": "Others",
            "created_at": "2022-10-18T11:32:02.000Z"
        },
        {
            "id": 1193,
            "username": "bascodes",
            "tweet_id": "1582333683830501376",
            "tweet_text": "2) Level Up Your Soft Skills\n\na) Ask a lot of questions about the job\n\nb) \"I don't know\" is a valid answer, don't pretend you know more than you do\n\nc) Reach out to other employees on Twitter or LinkedIn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582333676896911361",
            "tweet_type": "Others",
            "created_at": "2022-10-18T11:32:03.000Z"
        },
        {
            "id": 1192,
            "username": "bascodes",
            "tweet_id": "1582333686359285760",
            "tweet_text": "3) Find Job Ads\nhttps://t.co/taaXNRjiAU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582333676896911361",
            "tweet_type": "Others",
            "created_at": "2022-10-18T11:32:03.000Z"
        },
        {
            "id": 1191,
            "username": "bascodes",
            "tweet_id": "1582333817540313089",
            "tweet_text": "https://t.co/wYSvWc78ad",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582017780395954178",
            "tweet_type": "Others",
            "created_at": "2022-10-18T11:32:35.000Z"
        },
        {
            "id": 1526,
            "username": "testdrivenio",
            "tweet_id": "1582344031316549633",
            "tweet_text": "Moving from Flask to FastAPI \n\nhttps://t.co/nwGQhI8v92 \n\nInterested in moving from Flask to FastAPI? This article compares and contrasts common patterns in both Flask and FastAPI.\n\nby @amal_ytics \n\n#Flask #FastAPI #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582344031316549633",
            "tweet_type": "Others",
            "created_at": "2022-10-18T12:13:10.000Z"
        },
        {
            "id": 625,
            "username": "alexxubyte",
            "tweet_id": "1582397329297969152",
            "tweet_text": "Apple pay vs. Google pay: which is more secure?\n\nThe diagram below shows the differences. To make it easier to understand, we break down the process into two flows.\n\n1. Registering your credit card flow\n2. Basic payment flow\n\nWatch the whole video here: https://t.co/o9bReyHG6o https://t.co/NTfh41IZ1q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfXN-7aUUAE6PRY.jpg\"]",
            "tweet_conversation_id": "1582397329297969152",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-18T15:44:57.000Z"
        },
        {
            "id": 1525,
            "username": "testdrivenio",
            "tweet_id": "1582408673959505920",
            "tweet_text": "Python clean code tip:\n\nDon't use string formatting to parametrize queries\n\nUse parameter binding instead\n\nWhy?\n\nTo prevent SQL injection\n\n\ud83d\udc47 https://t.co/XQEHxUAgXs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfXYTQDaUAA4cLy.png\"]",
            "tweet_conversation_id": "1582408673959505920",
            "tweet_type": "Python tips",
            "created_at": "2022-10-18T16:30:02.000Z"
        },
        {
            "id": 1190,
            "username": "bascodes",
            "tweet_id": "1582479129747726337",
            "tweet_text": "Never sacrifice your health for a paycheck. Yes, that includes your mental health!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582479129747726337",
            "tweet_type": "Others",
            "created_at": "2022-10-18T21:10:00.000Z"
        },
        {
            "id": 1189,
            "username": "bascodes",
            "tweet_id": "1582510352306405376",
            "tweet_text": "I can edit tweets now. Yes, I\u2019m a little late to the show https://t.co/GbOhvHZmM1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582510352306405376",
            "tweet_type": "Others",
            "created_at": "2022-10-18T23:14:04.000Z"
        },
        {
            "id": 1524,
            "username": "testdrivenio",
            "tweet_id": "1582711229629763584",
            "tweet_text": "Deploying a FastAPI Application to Elastic Beanstalk\n\nhttps://t.co/vC10POIyzo \n\nWalks through the process of deploying a FastAPI application to AWS Elastic Beanstalk.\n\nby @duplxey\n\n#FastAPI #Python #AWS @FastAPI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582711229629763584",
            "tweet_type": "Others",
            "created_at": "2022-10-19T12:32:17.000Z"
        },
        {
            "id": 1188,
            "username": "bascodes",
            "tweet_id": "1582733557033848832",
            "tweet_text": "What's your favourite email app? \ud83d\udce8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582733557033848832",
            "tweet_type": "Others",
            "created_at": "2022-10-19T14:01:00.000Z"
        },
        {
            "id": 624,
            "username": "alexxubyte",
            "tweet_id": "1582759743273070599",
            "tweet_text": "/1 Is Telegram secure?\n\nLet\u2019s first define what \u201csecure\u201d means. A \u201csecure\u201d chat in a messaging App generally means the message is encrypted at the sender side and is only decryptable at the receiver side. It is also called \u201cE2EE\u201d (end-to-end encryption). https://t.co/6CyB2EH7WP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfcXmLMVsAAbC3p.jpg\"]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:03.000Z"
        },
        {
            "id": 623,
            "username": "alexxubyte",
            "tweet_id": "1582759752790028288",
            "tweet_text": "/2 \ud835\udc13\ud835\udc1e\ud835\udc25\ud835\udc1e\ud835\udc20\ud835\udc2b\ud835\udc1a\ud835\udc26'\ud835\udc2c \ud835\udc2e\ud835\udc2c\ud835\udc2e\ud835\udc1a\ud835\udc25 \ud835\udc29\ud835\udc2b\ud835\udc22\ud835\udc2f\ud835\udc1a\ud835\udc2d\ud835\udc1e \ud835\udc1a\ud835\udc27\ud835\udc1d \ud835\udc20\ud835\udc2b\ud835\udc28\ud835\udc2e\ud835\udc29 \ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc2d\ud835\udc2c \ud835\udc1a\ud835\udc2b\ud835\udc1e\ud835\udc27'\ud835\udc2d \ud835\udc1e\ud835\udc27\ud835\udc1d-\ud835\udc2d\ud835\udc28-\ud835\udc1e\ud835\udc27\ud835\udc1d \ud835\udc1e\ud835\udc27\ud835\udc1c\ud835\udc2b\ud835\udc32\ud835\udc29\ud835\udc2d\ud835\udc1e\ud835\udc1d\n\nIt generally means third parties can intercept and read your messages. Telegram uses the following approach for security: https://t.co/kgTpvBWHgg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfcXmoAUYAUzFh-.jpg\"]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:05.000Z"
        },
        {
            "id": 622,
            "username": "alexxubyte",
            "tweet_id": "1582759756644507648",
            "tweet_text": "/3 \ud83d\udd38The encrypted message is stored in Telegram servers, but split into several pieces and stored in different countries.\n\n\ud83d\udd38The decryption keys are also split and saved in different countries.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:06.000Z"
        },
        {
            "id": 621,
            "username": "alexxubyte",
            "tweet_id": "1582759759215661056",
            "tweet_text": "/4 This means the hacker needs to get message chunks and keys from all places. It is possible but extremely difficult.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:07.000Z"
        },
        {
            "id": 620,
            "username": "alexxubyte",
            "tweet_id": "1582759766728007680",
            "tweet_text": "/5 \ud835\udc12\ud835\udc1e\ud835\udc1c\ud835\udc2b\ud835\udc1e\ud835\udc2d \ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc2d\ud835\udc2c \ud835\udc1a\ud835\udc2b\ud835\udc1e \ud835\udc1e\ud835\udc27\ud835\udc1d-\ud835\udc2d\ud835\udc28-\ud835\udc1e\ud835\udc27\ud835\udc1d \ud835\udc1e\ud835\udc27\ud835\udc1c\ud835\udc2b\ud835\udc32\ud835\udc29\ud835\udc2d\ud835\udc1e\ud835\udc1d\n\nIf you choose the \u201csecret chat\u201d option, it is end-to-end encrypted. It has several limitations:\n\n\ud83d\udd38It doesn\u2019t support group chat or normal one-to-one chat.\n\ud83d\udd38It is only enabled for mobile devices. https://t.co/Szt46qmsKx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfcXncyUoAAcVnt.jpg\"]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:09.000Z"
        },
        {
            "id": 619,
            "username": "alexxubyte",
            "tweet_id": "1582759770498289664",
            "tweet_text": "/6 \ud83d\udc49 Over to you: Is E2EE secure? How do you know your data is not accessible by the government? What chat apps support E2EE?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:10.000Z"
        },
        {
            "id": 618,
            "username": "alexxubyte",
            "tweet_id": "1582759778182262784",
            "tweet_text": "/7 References:\nhttps://t.co/UB3L7gCoev\nhttps://t.co/3pHQp59Laf https://t.co/aaJHp8KsE8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfcXoGqUYAE6eTb.jpg\"]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:12.000Z"
        },
        {
            "id": 617,
            "username": "alexxubyte",
            "tweet_id": "1582759782112296960",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/CAb7ir4K5y",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582759743273070599",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-19T15:45:12.000Z"
        },
        {
            "id": 1523,
            "username": "testdrivenio",
            "tweet_id": "1582771059358863360",
            "tweet_text": "Python clean code tip:\n\nExpose minimal needed data via your API\n\nWhy?\n- avoid sharing unnecessary data\n- adding fields is non-breaking, removing them is breaking change\n\n\ud83d\udc47 https://t.co/g8v1Xao524",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ffch42oUAAYu9iq.png\"]",
            "tweet_conversation_id": "1582771059358863360",
            "tweet_type": "Python tips",
            "created_at": "2022-10-19T16:30:01.000Z"
        },
        {
            "id": 1187,
            "username": "bascodes",
            "tweet_id": "1582986072753336320",
            "tweet_text": "Wow, Guido shared my April Fool\u2019s https://t.co/SmxJRJW4WY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582986072753336320",
            "tweet_type": "Others",
            "created_at": "2022-10-20T06:44:24.000Z"
        },
        {
            "id": 1522,
            "username": "testdrivenio",
            "tweet_id": "1583109255036825601",
            "tweet_text": "Deploying a Flask Application to Elastic Beanstalk\n\nhttps://t.co/s4QFLGK42h \n\nWalks through the process of deploying a Flask application to AWS Elastic Beanstalk.\n\nby @duplxey\n \n#Flask #Python #AWS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583109255036825601",
            "tweet_type": "Others",
            "created_at": "2022-10-20T14:53:53.000Z"
        },
        {
            "id": 616,
            "username": "alexxubyte",
            "tweet_id": "1583119489318518786",
            "tweet_text": "/1 What are the differences between B-Tree and LSM-Tree? https://t.co/uAZyd76kW4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfheyA_VEAEEKS-.jpg\"]",
            "tweet_conversation_id": "1583119489318518786",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-20T15:34:33.000Z"
        },
        {
            "id": 615,
            "username": "alexxubyte",
            "tweet_id": "1583119501687541761",
            "tweet_text": "/2 \ud835\udc01-\ud835\udc13\ud835\udc2b\ud835\udc1e\ud835\udc1e\n\nB-Tree is the most widely used indexing data structure in almost all relational databases.\n\nThe basic unit of information storage in B-Tree is usually called a \u201cpage\u201d. To look up a key, it traces down the range of keys until the actual value is found. https://t.co/t5SGlMc3AK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfheynSUoAAQzQ-.jpg\"]",
            "tweet_conversation_id": "1583119489318518786",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-20T15:34:36.000Z"
        },
        {
            "id": 614,
            "username": "alexxubyte",
            "tweet_id": "1583119513490366464",
            "tweet_text": "/3 \ud835\udc0b\ud835\udc12\ud835\udc0c-\ud835\udc13\ud835\udc2b\ud835\udc1e\ud835\udc1e\n\nLSM-Tree (Log-Structured Merge Tree) is widely used by many NoSQL databases, such as Cassandra, LevelDB, and RocksDB.\n\nLSM-trees maintain key-value pairs and are persisted to disk using a Sorted Strings Table (SSTable), in which the keys are sorted. https://t.co/KCquNDipre",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfhezWdUYAAoi9Y.jpg\"]",
            "tweet_conversation_id": "1583119489318518786",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-20T15:34:39.000Z"
        },
        {
            "id": 613,
            "username": "alexxubyte",
            "tweet_id": "1583119517323972610",
            "tweet_text": "/4 Level 0 segments are periodically merged into Level 1 segments. This process is called \ud835\udc1c\ud835\udc28\ud835\udc26\ud835\udc29\ud835\udc1a\ud835\udc1c\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27.\n\nThe biggest difference is probably this:\n\n\ud83d\udd39B-Tree enables faster reads\n\ud83d\udd39LSM-Tree enables fast writes",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583119489318518786",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-20T15:34:40.000Z"
        },
        {
            "id": 612,
            "username": "alexxubyte",
            "tweet_id": "1583119519811129344",
            "tweet_text": "/5 Over to you: 1). do you know why? 2) Which database system have you used and does it use B-Tree or LSM-Tree?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583119489318518786",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-20T15:34:41.000Z"
        },
        {
            "id": 611,
            "username": "alexxubyte",
            "tweet_id": "1583119522206142465",
            "tweet_text": "/6 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/hL4aQo6wVh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583119489318518786",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-20T15:34:41.000Z"
        },
        {
            "id": 1521,
            "username": "testdrivenio",
            "tweet_id": "1583133450860888064",
            "tweet_text": "Python clean code tip:\n\nDon\u2019t use random to generate random numbers when you need them to be cryptographically strong\n\nUse secrets instead\n\n\ud83d\udc47 https://t.co/rHch4ue7DQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ffhre1HUAAE1a8l.png\"]",
            "tweet_conversation_id": "1583133450860888064",
            "tweet_type": "Python tips",
            "created_at": "2022-10-20T16:30:02.000Z"
        },
        {
            "id": 610,
            "username": "alexxubyte",
            "tweet_id": "1583187322610151424",
            "tweet_text": "Rahul is a great teacher and have an incredible career. If you are looking for mentors, check out his startup. https://t.co/b8nOXDMARR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583187322610151424",
            "tweet_type": "Others",
            "created_at": "2022-10-20T20:04:06.000Z"
        },
        {
            "id": 1186,
            "username": "bascodes",
            "tweet_id": "1583246695810232320",
            "tweet_text": "What is your dream job in tech?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583246695810232320",
            "tweet_type": "Others",
            "created_at": "2022-10-21T00:00:02.000Z"
        },
        {
            "id": 1185,
            "username": "bascodes",
            "tweet_id": "1583453378243284993",
            "tweet_text": "Another week draws to a close. \n\nIf you need some reading material for the weekend, here are the articles and projects I found #ThisWeekInPython \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:19.000Z"
        },
        {
            "id": 1184,
            "username": "bascodes",
            "tweet_id": "1583453381401935872",
            "tweet_text": "The Ultimate Guide To Sets In Python\nhttps://t.co/SVUzBYhVB7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:19.000Z"
        },
        {
            "id": 1183,
            "username": "bascodes",
            "tweet_id": "1583453384383660032",
            "tweet_text": "Python\u2019s Type Hinting: Friend, Foe, or Just a Headache? \u2013 by @Marcin__Kozak\nhttps://t.co/TUo8uDaucH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:20.000Z"
        },
        {
            "id": 1182,
            "username": "bascodes",
            "tweet_id": "1583453386917130240",
            "tweet_text": "Python isn\u2019t Used in Prod \u2013 by @iwootten\nhttps://t.co/kwFfsg5vgM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:21.000Z"
        },
        {
            "id": 1181,
            "username": "bascodes",
            "tweet_id": "1583453389643735041",
            "tweet_text": "Python, Flask, and SQLite \u2013 by @quindarius_\nhttps://t.co/EV91ZQPO2h",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:21.000Z"
        },
        {
            "id": 1180,
            "username": "bascodes",
            "tweet_id": "1583453391996350467",
            "tweet_text": "Hello World under the microscope \u2013 by @gynvael\nhttps://t.co/mzObYutNDU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:22.000Z"
        },
        {
            "id": 1179,
            "username": "bascodes",
            "tweet_id": "1583453394345562112",
            "tweet_text": "mintotp \u2013 Minimal TOTP generator in 20 lines of Python \u2013 by @susam\nhttps://t.co/Vk7BHpFPDd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:23.000Z"
        },
        {
            "id": 1178,
            "username": "bascodes",
            "tweet_id": "1583453396975001600",
            "tweet_text": "neograd \u2013 A deep learning framework created from scratch with Python and NumPy\nhttps://t.co/mqUylwMTRR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:23.000Z"
        },
        {
            "id": 1177,
            "username": "bascodes",
            "tweet_id": "1583453399982276611",
            "tweet_text": "codex_english2python \u2013 Converts plain English to python code snippets by using OpenAI CODEX \nhttps://t.co/e0JIvP5Sfu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:24.000Z"
        },
        {
            "id": 1176,
            "username": "bascodes",
            "tweet_id": "1583453402553413633",
            "tweet_text": "sqlite-utils \u2013 Python CLI utility and library for manipulating SQLite databases \u2013 by @simonw\nhttps://t.co/B2LX7nGGID",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:24.000Z"
        },
        {
            "id": 1175,
            "username": "bascodes",
            "tweet_id": "1583453404885504000",
            "tweet_text": "panel \u2013 A high-level app and dashboarding solution for Python \u2013 by @HoloViz_Org\nhttps://t.co/Pm3oxEnpCz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:25.000Z"
        },
        {
            "id": 1174,
            "username": "bascodes",
            "tweet_id": "1583453407284977667",
            "tweet_text": "+++\nI publish this list on my blog, too \ud83d\udc47\n+++\nhttps://t.co/rDotUfi7oJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583453378243284993",
            "tweet_type": "Others",
            "created_at": "2022-10-21T13:41:26.000Z"
        },
        {
            "id": 609,
            "username": "alexxubyte",
            "tweet_id": "1583466192060104706",
            "tweet_text": "If you use markdown and mindmap, you'll probably like this tool \ud83d\udc47\n\n\ud835\udc26\ud835\udc1a\ud835\udc2b\ud835\udc24\ud835\udc26\ud835\udc1a\ud835\udc29 is a free web tool that converts markdown to a beautiful mindmap.\n\nSubscribe to our weekly system design newsletter for updates (5 other visualization tools): https://t.co/dkjDPxrTOt https://t.co/SuJv0fFnOY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfmaG8IUYAEJg4B.jpg\"]",
            "tweet_conversation_id": "1583466192060104706",
            "tweet_type": "Others",
            "created_at": "2022-10-21T14:32:14.000Z"
        },
        {
            "id": 608,
            "username": "alexxubyte",
            "tweet_id": "1583466394322030592",
            "tweet_text": "markmap link: https://t.co/fZu49TTIcg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583466192060104706",
            "tweet_type": "Others",
            "created_at": "2022-10-21T14:33:02.000Z"
        },
        {
            "id": 1520,
            "username": "testdrivenio",
            "tweet_id": "1583495833814564871",
            "tweet_text": "Python clean code tip:\n\nUse enumerate when you need to iterate over iterable and have an index at the same time\n\n\ud83d\udc47 https://t.co/NjmGSC3k9t",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ffm1EV6UYAArNTG.png\"]",
            "tweet_conversation_id": "1583495833814564871",
            "tweet_type": "Python tips",
            "created_at": "2022-10-21T16:30:01.000Z"
        },
        {
            "id": 1173,
            "username": "bascodes",
            "tweet_id": "1583773822624595970",
            "tweet_text": "Well said! https://t.co/6jO7tXXYcS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583773822624595970",
            "tweet_type": "Others",
            "created_at": "2022-10-22T10:54:39.000Z"
        },
        {
            "id": 1519,
            "username": "testdrivenio",
            "tweet_id": "1583824838379962370",
            "tweet_text": "Migrating to a Custom User Model Mid-project in Django\n\nhttps://t.co/8rmo7vMO5f \n\nThis article explains step-by-step how to migrate to a custom User model mid-project in Django.\n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583824838379962370",
            "tweet_type": "Others",
            "created_at": "2022-10-22T14:17:22.000Z"
        },
        {
            "id": 607,
            "username": "alexxubyte",
            "tweet_id": "1583848006821941248",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39 Why is PostgreSQL loved\n\ud83d\udd39 NFR\n\ud83d\udd39 Super high-performance DB and MQ\n\ud83d\udd39 Proxy vs. reverse proxy (YouTube video)\n\ud83d\udd39 Visualization tools\n\nI just sent a weekly system design newsletter to 150,000 readers. Subscribe here: https://t.co/PczMAd8Jdb https://t.co/GlqwZTNLbg",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ffr1Xa9VEAM8pmV.jpg\"]",
            "tweet_conversation_id": "1583848006821941248",
            "tweet_type": "Others",
            "created_at": "2022-10-22T15:49:25.000Z"
        },
        {
            "id": 1518,
            "username": "testdrivenio",
            "tweet_id": "1583858222469124096",
            "tweet_text": "Python clean code tip:\n\nPrefer null/empty/dummy object over null\n\nWhy?\n- avoid IF pollution\n- null doesn't exist in the real world\n\n\ud83d\udc47 https://t.co/fwkfOJWSe0",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ffr-qHuUYAEnO5y.png\"]",
            "tweet_conversation_id": "1583858222469124096",
            "tweet_type": "Python tips",
            "created_at": "2022-10-22T16:30:01.000Z"
        },
        {
            "id": 1172,
            "username": "bascodes",
            "tweet_id": "1584162817191526400",
            "tweet_text": "\u2753Which lesser-known Twitter accounts do you follow for great #Python\ud83d\udc0d content?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584162817191526400",
            "tweet_type": "Others",
            "created_at": "2022-10-23T12:40:22.000Z"
        },
        {
            "id": 606,
            "username": "alexxubyte",
            "tweet_id": "1584206635295072256",
            "tweet_text": "I got ranked #27 on the top 200 LinkedIn creators List. Thank you, everyone!\n.\nFollow me to learn more about system design.\n\nWeekly newsletter: https://t.co/cL9Q6tUTac\nYoutube channel: https://t.co/qi9B0rFpo7 https://t.co/S6FhTq9wYh",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ffw63yhVUAEy6iv.jpg\"]",
            "tweet_conversation_id": "1584206635295072256",
            "tweet_type": "Others",
            "created_at": "2022-10-23T15:34:29.000Z"
        },
        {
            "id": 605,
            "username": "alexxubyte",
            "tweet_id": "1584207928600317952",
            "tweet_text": "Congratulations on the #1 spot, @thejustinwelsh Your LinkedIn course is incredible. I learned a lot!\n\nSource:  https://t.co/8Yu4G8R9lt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584206635295072256",
            "tweet_type": "Others",
            "created_at": "2022-10-23T15:39:37.000Z"
        },
        {
            "id": 1517,
            "username": "testdrivenio",
            "tweet_id": "1584220609772670980",
            "tweet_text": "Python clean code tip:\n\nDon't return a tuple of two objects of the same type from your methods\n\nRather introduce new data structure to return more complex data\n\nWhy?\n\nTo prevent misusage because of switched position - access values by name\n\n\ud83d\udc47 https://t.co/sHnQ1ZW74L",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfxIP2DUcAE6KL7.png\"]",
            "tweet_conversation_id": "1584220609772670980",
            "tweet_type": "Python tips",
            "created_at": "2022-10-23T16:30:01.000Z"
        },
        {
            "id": 1171,
            "username": "bascodes",
            "tweet_id": "1584259552513445889",
            "tweet_text": "Geeked out on the weekend a bit \ud83d\udc68\u200d\ud83d\udcbb\n\nFinally made some progress on @bookmarksemail \u2013 a daily digest of your Twitter bookmarks\n\nWant to try? https://t.co/6HCmIh5irU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FfxrZa7XwAACLRf.jpg\"]",
            "tweet_conversation_id": "1584259552513445889",
            "tweet_type": "Others",
            "created_at": "2022-10-23T19:04:46.000Z"
        },
        {
            "id": 1170,
            "username": "bascodes",
            "tweet_id": "1584369586450960390",
            "tweet_text": "Python is an easy language to learn, but is it a hard language to master? \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584369586450960390",
            "tweet_type": "Others",
            "created_at": "2022-10-24T02:22:00.000Z"
        },
        {
            "id": 1516,
            "username": "testdrivenio",
            "tweet_id": "1584524899611131904",
            "tweet_text": "Python Code Quality\n\nhttps://t.co/1eCRkTYCQv\n\nImprove the quality of your Python code with linters, code formatters, and security vulnerability scanners.\n\n1\u20e3What exactly is code quality?\n2\u20e3How do we measure it?\n3\u20e3How do we improve it?\n\nby @jangiacomelli\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584524899611131904",
            "tweet_type": "Others",
            "created_at": "2022-10-24T12:39:09.000Z"
        },
        {
            "id": 604,
            "username": "alexxubyte",
            "tweet_id": "1584571175262334976",
            "tweet_text": "You probably think you know what TIME is, but do you know everything about it?\n\nCommonly used time representations include UTC, GMT, TAI, Unix Timestamp, Epoc time, TrueTime, GPS time, etc.\n\nThe diagram below illustrates everything you need to know about time/clock. https://t.co/CFePgFxdvT",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff2HFXxUUAAiu82.jpg\"]",
            "tweet_conversation_id": "1584571175262334976",
            "tweet_type": "Others",
            "created_at": "2022-10-24T15:43:02.000Z"
        },
        {
            "id": 603,
            "username": "alexxubyte",
            "tweet_id": "1584571183688650753",
            "tweet_text": "https://t.co/1LWnuOR5ac",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff2HF0EVsAAsrAQ.jpg\"]",
            "tweet_conversation_id": "1584571175262334976",
            "tweet_type": "Others",
            "created_at": "2022-10-24T15:43:04.000Z"
        },
        {
            "id": 602,
            "username": "alexxubyte",
            "tweet_id": "1584571191771090944",
            "tweet_text": "Special thanks to @madawei2699. The diagram is based on his post \"time in distributed systems\" (written in Chinese): https://t.co/6m8PSHVsUj https://t.co/STImrM39Mb",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff2HGRzVQAAOVBc.jpg\"]",
            "tweet_conversation_id": "1584571175262334976",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-24T15:43:06.000Z"
        },
        {
            "id": 1515,
            "username": "testdrivenio",
            "tweet_id": "1584582998636101632",
            "tweet_text": "Python clean code tip:\n\nEnforce keyword only-argument with * before the names of your arguments\n\nWhy?\n- to prevent misusage with arguments out of order - the interpreter will raise an exception when positional arguments are used\n\n\ud83d\udc47 https://t.co/YVo9330ugI",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff2R1p7VIAAj1a8.png\", \"https://pbs.twimg.com/media/Ff2R1qUVsAApVaI.png\"]",
            "tweet_conversation_id": "1584582998636101632",
            "tweet_type": "Python tips",
            "created_at": "2022-10-24T16:30:01.000Z"
        },
        {
            "id": 1169,
            "username": "bascodes",
            "tweet_id": "1584640486899605504",
            "tweet_text": "It happened! Python 3.11 was just released! https://t.co/pFVUZgMoow",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584640486899605504",
            "tweet_type": "Others",
            "created_at": "2022-10-24T20:18:27.000Z"
        },
        {
            "id": 1168,
            "username": "bascodes",
            "tweet_id": "1584640598451314688",
            "tweet_text": "Here is what we can expect from our beloved language:\n\nhttps://t.co/W1W0g1UvSG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584640486899605504",
            "tweet_type": "Others",
            "created_at": "2022-10-24T20:18:54.000Z"
        },
        {
            "id": 1167,
            "username": "bascodes",
            "tweet_id": "1584653205178183680",
            "tweet_text": "No-code/low-code is a trending topic in tech! \ud83d\udd25\n\nI would like to compare and contrast {no|low}code with building from scratch with Python \ud83d\udc0d.\n\n\u2753What demo project should I build for that purpose?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584653205178183680",
            "tweet_type": "Others",
            "created_at": "2022-10-24T21:09:00.000Z"
        },
        {
            "id": 1166,
            "username": "bascodes",
            "tweet_id": "1584869704467771393",
            "tweet_text": "Let's see how this will work out! \ud83d\udd25 https://t.co/rnwqlt3oXs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584869704467771393",
            "tweet_type": "Others",
            "created_at": "2022-10-25T11:29:17.000Z"
        },
        {
            "id": 1514,
            "username": "testdrivenio",
            "tweet_id": "1584882124590845952",
            "tweet_text": "Deep Dive into Flask's Application and Request Contexts\n\nhttps://t.co/eRKT5RMt1J\n\nLearn how contexts are processed during request handling in Flask.\n\nby @patkennedy79\n\n#Flask #Python \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584882124590845952",
            "tweet_type": "Others",
            "created_at": "2022-10-25T12:18:38.000Z"
        },
        {
            "id": 1165,
            "username": "bascodes",
            "tweet_id": "1584911553974996992",
            "tweet_text": "Here we are \u2013 bookmarks email is now on producthunt! https://t.co/x3UGN1JRtf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584911553974996992",
            "tweet_type": "Others",
            "created_at": "2022-10-25T14:15:35.000Z"
        },
        {
            "id": 1164,
            "username": "bascodes",
            "tweet_id": "1584931036378456066",
            "tweet_text": "Have you had your DNA sequenced to play with the data using Python? \ud83e\uddec\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584931036378456066",
            "tweet_type": "Others",
            "created_at": "2022-10-25T15:33:00.000Z"
        },
        {
            "id": 601,
            "username": "alexxubyte",
            "tweet_id": "1584933043176755206",
            "tweet_text": "What is a proxy? Why is nginx called a reverse proxy?\n\nIn this YouTube video, we will explain the following:\n\ud83d\udd39Differences between forward proxy and reverse proxy\n\ud83d\udd39Real-world examples\n\ud83d\udd39Multi-layer reverse proxies\n\nWatch the whole video here: https://t.co/dC28RKf8Ce https://t.co/h6W3i5ELNq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff7QMztVUAA6XSu.jpg\"]",
            "tweet_conversation_id": "1584933043176755206",
            "tweet_type": "Others",
            "created_at": "2022-10-25T15:40:58.000Z"
        },
        {
            "id": 1513,
            "username": "testdrivenio",
            "tweet_id": "1584945392864481282",
            "tweet_text": "Python clean code tip:\n\nDon't use Any for type hints when the argument must be class\n\nUse type[ClassName] instead\n\nWhy?\n- autocomplete in IDE\n- find issues when type checking not only at run time\n\n\ud83d\udc47 https://t.co/UFpA4fNoIn",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff7bbw3aEAEL-by.png\"]",
            "tweet_conversation_id": "1584945392864481282",
            "tweet_type": "Python tips",
            "created_at": "2022-10-25T16:30:03.000Z"
        },
        {
            "id": 1512,
            "username": "testdrivenio",
            "tweet_id": "1584992905948987392",
            "tweet_text": "Musings on Python Type Hints\n\nhttps://t.co/3phmPVgy5y\n\nby @sgeisenh \n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584992905948987392",
            "tweet_type": "Others",
            "created_at": "2022-10-25T19:38:51.000Z"
        },
        {
            "id": 1163,
            "username": "bascodes",
            "tweet_id": "1585028176346054657",
            "tweet_text": "What are your favourite Twitter tools for creators? \uea00",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585028176346054657",
            "tweet_type": "Others",
            "created_at": "2022-10-25T21:59:00.000Z"
        },
        {
            "id": 1162,
            "username": "bascodes",
            "tweet_id": "1585243596395094017",
            "tweet_text": "I had a thread about Python\ud83d\udc0d meta classes on my to-do list for today.\n\nBut no, not today\u2026 \ud83e\udd2f\n\nIt's completely okay if you have a bad day! Just accept it and move on tomorrow \u2013\u00a0as long as you follow your long-term goals you'll be fine!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585243596395094017",
            "tweet_type": "Others",
            "created_at": "2022-10-26T12:15:00.000Z"
        },
        {
            "id": 1511,
            "username": "testdrivenio",
            "tweet_id": "1585251083680509952",
            "tweet_text": "Deploying a Flask App to Render\n\nhttps://t.co/bPaUQFDDMc \n\nProvides a walk-through of how to deploy a Flask app with a Postgres database to production using Render.\n\nby @patkennedy79 \n\n#Python #Flask @Render",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585251083680509952",
            "tweet_type": "Others",
            "created_at": "2022-10-26T12:44:45.000Z"
        },
        {
            "id": 1161,
            "username": "bascodes",
            "tweet_id": "1585275556492414977",
            "tweet_text": "Are you a developer? Say hi \ud83d\udc4b\n\n\u2026and don't forget to introduce yourself! Let's connect!\n\nOr, send me a DM\ud83d\udce8 for a #coffeechat\u2615\ufe0f\n\n#100Devs #CodeNewbie #100DaysOfCode\n\nhttps://t.co/rELSIZZN6E",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585275556492414977",
            "tweet_type": "Others",
            "created_at": "2022-10-26T14:22:00.000Z"
        },
        {
            "id": 600,
            "username": "alexxubyte",
            "tweet_id": "1585296460072919040",
            "tweet_text": "/1 Why is PostgreSQL voted the \ud835\udc26\ud835\udc28\ud835\udc2c\ud835\udc2d \ud835\udc25\ud835\udc28\ud835\udc2f\ud835\udc1e\ud835\udc1d \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc1a\ud835\udc2c\ud835\udc1e by Stackoverflow 2022 Developer Survey?\n\nThe diagram shows the many use cases by PostgreSQL - one database that includes almost \ud835\udc1a\ud835\udc25\ud835\udc25 \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc2e\ud835\udc2c\ud835\udc1e \ud835\udc1c\ud835\udc1a\ud835\udc2c\ud835\udc1e\ud835\udc2c developers need. https://t.co/n1CR2io34b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAauZiUYAA4Wrn.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:04.000Z"
        },
        {
            "id": 599,
            "username": "alexxubyte",
            "tweet_id": "1585296470537752577",
            "tweet_text": "/2 \ud83d\udd39OLTP (Online Transaction Processing)\n\nWe can use PostgreSQL for CRUD (Create-Read-Update-Delete) operations. https://t.co/j7OH2EUuWO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAau8tUoAEUJaB.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:06.000Z"
        },
        {
            "id": 598,
            "username": "alexxubyte",
            "tweet_id": "1585296480729911296",
            "tweet_text": "/3 \ud83d\udd39OLAP (Online Analytical Processing)\n\nWe can use PostgreSQL for analytical processing. PostgreSQL is based on \ud835\udc07\ud835\udc13\ud835\udc00\ud835\udc0f (Hybrid transactional/analytical processing) architecture, so it can handle both OLTP and OLAP well. https://t.co/hsVnFKFYSY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAaviuVQAEe4ib.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:09.000Z"
        },
        {
            "id": 597,
            "username": "alexxubyte",
            "tweet_id": "1585296490934640641",
            "tweet_text": "/4 \ud83d\udd39FDW (Foreign Data Wrapper)\n\nA FDW is an extension available in PostgreSQL that allows us to access a table or schema in one database from another. https://t.co/kg82RPI8y2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAawHhUAAEZKY2.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:11.000Z"
        },
        {
            "id": 596,
            "username": "alexxubyte",
            "tweet_id": "1585296501302910976",
            "tweet_text": "/5 \ud83d\udd39Streaming\n\nPipelineDB is a PostgreSQL extension for high-performance time-series aggregation, designed to power real-time reporting and analytics applications. https://t.co/K3fuTOBGWT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAawu-VsAAr7df.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:13.000Z"
        },
        {
            "id": 595,
            "username": "alexxubyte",
            "tweet_id": "1585296510727573504",
            "tweet_text": "/6 \ud83d\udd39Geospatial\n\nPostGIS is a spatial database extender for PostgreSQL object-relational database. It adds support for geographic objects, allowing location queries to be run in SQL. https://t.co/xjNPo2cHx8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAaxUeUoAIZgz0.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:16.000Z"
        },
        {
            "id": 594,
            "username": "alexxubyte",
            "tweet_id": "1585296520919670784",
            "tweet_text": "/7 \ud83d\udd39Time Series\n\nTimescale extends PostgreSQL for time series and analytics. For example, developers can combine relentless streams of financial and tick data with other business data to build new apps and uncover unique insights. https://t.co/KRc8LnuUFA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAax39VUAE3A82.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:18.000Z"
        },
        {
            "id": 593,
            "username": "alexxubyte",
            "tweet_id": "1585296531631972352",
            "tweet_text": "/8 \ud83d\udd39Distributed Tables\n\nCitusData scales Postgres by distributing data &amp; queries. https://t.co/e0HWBxSGT1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAayfeVUAcCGt9.jpg\"]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:21.000Z"
        },
        {
            "id": 592,
            "username": "alexxubyte",
            "tweet_id": "1585296535234891776",
            "tweet_text": "/9 \ud83d\udc49 Over to you: Which database do you like the most?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:22.000Z"
        },
        {
            "id": 591,
            "username": "alexxubyte",
            "tweet_id": "1585296537688584193",
            "tweet_text": "/10 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/p7kN1QWEpW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585296460072919040",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-26T15:45:22.000Z"
        },
        {
            "id": 1510,
            "username": "testdrivenio",
            "tweet_id": "1585307774778363905",
            "tweet_text": "Python clean code tip:\n\nAvoid checking if the key already exists in a dictionary before using it by using defaultdict\n\n\ud83d\udc47 https://t.co/CKlERHaDwv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgAlBL5UAAAVRu6.png\"]",
            "tweet_conversation_id": "1585307774778363905",
            "tweet_type": "Python tips",
            "created_at": "2022-10-26T16:30:01.000Z"
        },
        {
            "id": 1160,
            "username": "bascodes",
            "tweet_id": "1585629530068512771",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Have you ever heard about metaclasses in Python?\n\nThey are used to modify the behaviour of a class \u2013 not the instance.\n\nLet's see how this works and why it is useful! \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585629530068512771",
            "tweet_type": "Python tips",
            "created_at": "2022-10-27T13:48:34.000Z"
        },
        {
            "id": 1159,
            "username": "bascodes",
            "tweet_id": "1585629533604294665",
            "tweet_text": "First of all, we need to know how to create meta classes and how to apply them to your classes.\n\nIn this snippet, \ud835\ude7c\ud835\udea2\ud835\ude72\ud835\ude95\ud835\ude8a\ud835\ude9c\ud835\ude9c implements the metaclass \ud835\ude7c\ud835\udea2\ud835\ude7c\ud835\ude8e\ud835\ude9d\ud835\ude8a\ud835\ude72\ud835\ude95\ud835\ude8a\ud835\ude9c\ud835\ude9c. Note that \ud835\ude7c\ud835\udea2\ud835\ude7c\ud835\ude8e\ud835\ude9d\ud835\ude8a\ud835\ude72\ud835\ude95\ud835\ude8a\ud835\ude9c\ud835\ude9c extends from \ud835\ude9d\ud835\udea2\ud835\ude99\ud835\ude8e, not \ud835\ude98\ud835\ude8b\ud835\ude93\ud835\ude8e\ud835\ude8c\ud835\ude9d. https://t.co/ZmWcZ9b1gU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgFJGqoaMAc4gPj.jpg\"]",
            "tweet_conversation_id": "1585629530068512771",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:48:35.000Z"
        },
        {
            "id": 1158,
            "username": "bascodes",
            "tweet_id": "1585629536439660546",
            "tweet_text": "The inheritance of \ud835\ude7c\ud835\udea2\ud835\ude7c\ud835\ude8e\ud835\ude9d\ud835\ude8a\ud835\ude72\ud835\ude95\ud835\ude8a\ud835\ude9c\ud835\ude9c from type is important: With our new metaclass we now can customize the class creation process by implementing a __\ud835\ude97\ud835\ude8e\ud835\udea0__ method:\n\nFor example, we could let any class that uses our metaclass inherit from another class. https://t.co/7qQ6K2a35v",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgFJPoWaAAIofOj.jpg\"]",
            "tweet_conversation_id": "1585629530068512771",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:48:35.000Z"
        },
        {
            "id": 1157,
            "username": "bascodes",
            "tweet_id": "1585629539220467714",
            "tweet_text": "Note that in the last code snippet, the print statement within the metaclass is executed after the definition, not on instantiation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585629530068512771",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:48:36.000Z"
        },
        {
            "id": 1156,
            "username": "bascodes",
            "tweet_id": "1585629541477003264",
            "tweet_text": "So, how is this useful now?\n\nOne example would be to auto-register any class using the metaclass for later use. Instead of using the class directly, we can use the Plugin registry to access the class. https://t.co/FwwXmmGtlq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgFJY5laEAAjnb_.jpg\"]",
            "tweet_conversation_id": "1585629530068512771",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:48:36.000Z"
        },
        {
            "id": 1155,
            "username": "bascodes",
            "tweet_id": "1585629543637069825",
            "tweet_text": "Django, for example, makes heavy use of metaclasses in the ORM.OSError\n\nHere is the code for the ModelBase metaclass: https://t.co/vMB8Ge0Kcp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585629530068512771",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:48:37.000Z"
        },
        {
            "id": 1154,
            "username": "bascodes",
            "tweet_id": "1585629545792966658",
            "tweet_text": "Other examples of metaclasses can be found in Python's standard library, e.g. in abstract base classes, or dataclasses.\n\nMore on this in another thread. https://t.co/EUuMpELwos",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgFJh3eaEAMy2VW.png\"]",
            "tweet_conversation_id": "1585629530068512771",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:48:37.000Z"
        },
        {
            "id": 1509,
            "username": "testdrivenio",
            "tweet_id": "1585629781172932608",
            "tweet_text": "Deploying a Django Application to Elastic Beanstalk\n\nhttps://t.co/P8icK5c1gR \n\nWalks through the process of deploying a production-ready Django application to AWS Elastic Beanstalk.\n\n#Django #Python #AWS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585629781172932608",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:49:34.000Z"
        },
        {
            "id": 1153,
            "username": "bascodes",
            "tweet_id": "1585630525284569094",
            "tweet_text": "Okay, now here it is:\n\nhttps://t.co/sNp76KoQtv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585243596395094017",
            "tweet_type": "Others",
            "created_at": "2022-10-27T13:52:31.000Z"
        },
        {
            "id": 590,
            "username": "alexxubyte",
            "tweet_id": "1585654906412625920",
            "tweet_text": "The job market is competitive. I see a lot of layoffs. It has been on my mind how we can help people find jobs.\n\nWe are creating the ByteByteGo talent collective.\n\nFor Candidates: Entirely free. Create a public or anonymous profile. Apply here\n\nhttps://t.co/M7jvvWD6hs https://t.co/gcJHWziINJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgFgu6iVUAAIrZZ.jpg\"]",
            "tweet_conversation_id": "1585654906412625920",
            "tweet_type": "Others",
            "created_at": "2022-10-27T15:29:24.000Z"
        },
        {
            "id": 589,
            "username": "alexxubyte",
            "tweet_id": "1585655949309530112",
            "tweet_text": "I would like to thank @Pallet_HQ  for setting up the infrastructure to make this possible! And thanks to @juurutz for guiding me through the process.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585654906412625920",
            "tweet_type": "Others",
            "created_at": "2022-10-27T15:33:33.000Z"
        },
        {
            "id": 1508,
            "username": "testdrivenio",
            "tweet_id": "1585670164221001742",
            "tweet_text": "Python clean code tip:\n\nExpose minimal needed data on your objects - caller doesn't need to know how you implemented what they need\n\nWhy?\n- better encapsulation\n- easier refactoring\n\n\ud83d\udc47 https://t.co/eJRraMROYR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgFum2JacAAJ2XN.jpg\"]",
            "tweet_conversation_id": "1585670164221001742",
            "tweet_type": "Python tips",
            "created_at": "2022-10-27T16:30:02.000Z"
        },
        {
            "id": 1152,
            "username": "bascodes",
            "tweet_id": "1585920006096830465",
            "tweet_text": "Will the new chief twit have an impact on tech twitter?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585920006096830465",
            "tweet_type": "Others",
            "created_at": "2022-10-28T09:02:49.000Z"
        },
        {
            "id": 1151,
            "username": "bascodes",
            "tweet_id": "1585950627712090112",
            "tweet_text": "#TGIF \u2013 Another Friday! If you need some inspiration for your weekend reading list, look at these articles and projects I found #ThisWeekInPython \ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:29.000Z"
        },
        {
            "id": 1150,
            "username": "bascodes",
            "tweet_id": "1585950629973094401",
            "tweet_text": "Python 3.11.0 is now available \u2013 The release announcement of the new Python version \u2013 by @ThePSF\nhttps://t.co/xCodDMymUe",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:30.000Z"
        },
        {
            "id": 1149,
            "username": "bascodes",
            "tweet_id": "1585950632275750912",
            "tweet_text": "Python 3.11: Cool New Features for You to Try \u2013 The new features in Python 3.11 with examples \u2013 by @realpython\nhttps://t.co/dfQRCEXDcM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:30.000Z"
        },
        {
            "id": 1148,
            "username": "bascodes",
            "tweet_id": "1585950635286925312",
            "tweet_text": "Python 3.11 is much faster than 3.8 \u2013 (but still slow compared to JavaScript or C++) \u2013 by @bwasti\nhttps://t.co/Xeh21IJUs5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:31.000Z"
        },
        {
            "id": 1147,
            "username": "bascodes",
            "tweet_id": "1585950637937856512",
            "tweet_text": "Build a Python Program to Fetch Data About Any Country \u2013 article about the countryinfo package \u2013 by @InsightfulCoder\nhttps://t.co/1myHNP1QX1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:32.000Z"
        },
        {
            "id": 1146,
            "username": "bascodes",
            "tweet_id": "1585950641444499456",
            "tweet_text": "Python Charts \u2013\u00a0examples of Python graphs made with matplotlib, seaborn, plotly and other packages \u2013 by @RCoderWeb\nhttps://t.co/4sXzKaOhgg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:33.000Z"
        },
        {
            "id": 1145,
            "username": "bascodes",
            "tweet_id": "1585950645806170112",
            "tweet_text": "koda-validate \u2013 Typesafe Validation\nhttps://t.co/JkzXB31D23",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:34.000Z"
        },
        {
            "id": 1144,
            "username": "bascodes",
            "tweet_id": "1585950648855629824",
            "tweet_text": "Twitter_Banner_Autoupdater \u2013 Twitter banner autoupdater using Tweepy Python module and the Twitter API \u2013 by @stepan__nazarov\nhttps://t.co/II0hxvzTLS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:34.000Z"
        },
        {
            "id": 1143,
            "username": "bascodes",
            "tweet_id": "1585950651074449408",
            "tweet_text": "django-pgtransaction \u2013 A context manager/decorator which extends Django's atomic function with the ability to set isolation level and retries for a given transaction\nhttps://t.co/9bC0twvyki",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:35.000Z"
        },
        {
            "id": 1142,
            "username": "bascodes",
            "tweet_id": "1585950653494751237",
            "tweet_text": "katara \u2013 Synthesize CRDTs from classic data types with verified lifting\nhttps://t.co/gQUhnwVkPK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:35.000Z"
        },
        {
            "id": 1141,
            "username": "bascodes",
            "tweet_id": "1585950655738703875",
            "tweet_text": "puff \u2013 run (and extend) Python code as Rust greenlet (on Tokio) \nhttps://t.co/fQ4mDBN1rf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:36.000Z"
        },
        {
            "id": 1140,
            "username": "bascodes",
            "tweet_id": "1585950658112688129",
            "tweet_text": "+++\nOf course, this list is on my blog, too \ud83d\udc47\n+++\nhttps://t.co/IUHn8a6q7H",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585950627712090112",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:04:37.000Z"
        },
        {
            "id": 1507,
            "username": "testdrivenio",
            "tweet_id": "1585963542209245187",
            "tweet_text": "Modern Python Environments\n\nhttps://t.co/wHVFK84UBC \n\nLooks at how to simplify:\n\n\ud83d\udd38Python version, dependency, and virtual environment management\n\ud83d\udd38Environments reproducibility\n\nTools: pyenv, venv + pip, venv + pip-tools, Poetry, Pipenv, Docker, Conda\n\nby @jangiacomelli\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585963542209245187",
            "tweet_type": "Others",
            "created_at": "2022-10-28T11:55:48.000Z"
        },
        {
            "id": 1139,
            "username": "bascodes",
            "tweet_id": "1585980305877237760",
            "tweet_text": "Still have some spots left for \u2615\ufe0f #CoffeeChats!\n\nWant to talk about \ud83e\uddd1\u200d\ud83d\udcbb Coding, \ud83d\udc0d Python, \u2601\ufe0f DevOps, \ud83d\udc1d bees, \ud83e\udd38 developer health, \ud83c\udccf anything else?\n\nSend me a DM \ud83d\udce8 for the link to my calendly\n\n#100Devs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585980305877237760",
            "tweet_type": "Others",
            "created_at": "2022-10-28T13:02:25.000Z"
        },
        {
            "id": 588,
            "username": "alexxubyte",
            "tweet_id": "1586012428122267648",
            "tweet_text": "/1 Is PassKey shaping a \ud835\udc29\ud835\udc1a\ud835\udc2c\ud835\udc2c\ud835\udc30\ud835\udc28\ud835\udc2b\ud835\udc1d\ud835\udc25\ud835\udc1e\ud835\udc2c\ud835\udc2c future?\n\nGoogle announced PassKey support for both Android and Chrome on 12/10/2022. Paypal announced PassKey support on 25/10/2022. https://t.co/fGUnywoelY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKl5VEUYAEzXw3.jpg\"]",
            "tweet_conversation_id": "1586012428122267648",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T15:10:04.000Z"
        },
        {
            "id": 587,
            "username": "alexxubyte",
            "tweet_id": "1586012431800680449",
            "tweet_text": "/2 Passkeys, also backed by Apple and Microsoft, is claimed to be a significantly \ud835\udc2c\ud835\udc1a\ud835\udc1f\ud835\udc1e\ud835\udc2b \ud835\udc2b\ud835\udc1e\ud835\udc29\ud835\udc25\ud835\udc1a\ud835\udc1c\ud835\udc1e\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d for passwords.\n\nThe diagram below shows how PassKeys work.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586012428122267648",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T15:10:05.000Z"
        },
        {
            "id": 586,
            "username": "alexxubyte",
            "tweet_id": "1586012440029843456",
            "tweet_text": "/3 \ud83d\udd39Step 1 - create PassKeys\n\nThe end-user needs to confirm the account information and present their credentials (face ID, touch ID, etc.).\n\nA private key is generated based on the public key provided by the website. The private key is stored on the device. https://t.co/Z9qhVSPrmx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKl56xVUAMKe_J.jpg\"]",
            "tweet_conversation_id": "1586012428122267648",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T15:10:07.000Z"
        },
        {
            "id": 585,
            "username": "alexxubyte",
            "tweet_id": "1586012448745668608",
            "tweet_text": "/4 \ud83d\udd39Step 2 - sign in with PassKeys on devices\n\nWhen the user tries to sign in to a website, they use the generated private key. Just select the account information and present the credentials to unlock the private key. https://t.co/e2nIzhJWvi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKl6dyVUAA9klx.jpg\"]",
            "tweet_conversation_id": "1586012428122267648",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T15:10:09.000Z"
        },
        {
            "id": 584,
            "username": "alexxubyte",
            "tweet_id": "1586012452105248768",
            "tweet_text": "/5 Consequently, there is no risk of password leakage since no passwords are stored in the database.\n\nPasskeys are built on \ud835\udc22\ud835\udc27\ud835\udc1d\ud835\udc2e\ud835\udc2c\ud835\udc2d\ud835\udc2b\ud835\udc32 \ud835\udc2c\ud835\udc2d\ud835\udc1a\ud835\udc27\ud835\udc1d\ud835\udc1a\ud835\udc2b\ud835\udc1d\ud835\udc2c, and it works across different platforms and browsers with a \ud835\udc2e\ud835\udc27\ud835\udc22\ud835\udc1f\ud835\udc28\ud835\udc2b\ud835\udc26 \ud835\udc2e\ud835\udc2c\ud835\udc1e\ud835\udc2b \ud835\udc1e\ud835\udc31\ud835\udc29\ud835\udc1e\ud835\udc2b\ud835\udc22\ud835\udc1e\ud835\udc27\ud835\udc1c\ud835\udc1e.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586012428122267648",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T15:10:09.000Z"
        },
        {
            "id": 583,
            "username": "alexxubyte",
            "tweet_id": "1586012454798077952",
            "tweet_text": "/6 \ud83d\udc49 Over to you: Do you think PassKey is safer than a password?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586012428122267648",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T15:10:10.000Z"
        },
        {
            "id": 582,
            "username": "alexxubyte",
            "tweet_id": "1586012457234857984",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/PYOuKQzMz2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586012428122267648",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T15:10:11.000Z"
        },
        {
            "id": 1138,
            "username": "bascodes",
            "tweet_id": "1586023736100069378",
            "tweet_text": "As a developer, do you accept cookies? \ud83c\udf6a\ud83e\udd60 https://t.co/fnwOaKABlN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgJ8yMUXkAAWnl4.jpg\"]",
            "tweet_conversation_id": "1586023736100069378",
            "tweet_type": "Others",
            "created_at": "2022-10-28T15:55:00.000Z"
        },
        {
            "id": 1506,
            "username": "testdrivenio",
            "tweet_id": "1586032548903165952",
            "tweet_text": "Python clean code tip:\n\nReuse known concepts/approaches when solving your problems\n\nFor example, reuse DyanmoDB last evaluated key for pagination when doing pagination for your postgres queries - keep the concept, keep the naming\n\n\ud83d\udc47 https://t.co/RCrcFhw72p",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgK4MlPUoAEnAlH.png\"]",
            "tweet_conversation_id": "1586032548903165952",
            "tweet_type": "Python tips",
            "created_at": "2022-10-28T16:30:01.000Z"
        },
        {
            "id": 1505,
            "username": "testdrivenio",
            "tweet_id": "1586032552514834432",
            "tweet_text": "See DyanamoDB docs: \n\nhttps://t.co/9ZUgcc8yaI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586032548903165952",
            "tweet_type": "Others",
            "created_at": "2022-10-28T16:30:02.000Z"
        },
        {
            "id": 1137,
            "username": "bascodes",
            "tweet_id": "1586034477817827329",
            "tweet_text": "That's actually a fun way to get an idea of what everyone is working on \ud83d\udc47 https://t.co/gdSyg5WaZQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586034477817827329",
            "tweet_type": "Others",
            "created_at": "2022-10-28T16:37:41.000Z"
        },
        {
            "id": 581,
            "username": "alexxubyte",
            "tweet_id": "1586060756155449344",
            "tweet_text": "Twitter architecture in 2012. Old but might still be relevant.\n\nNote: This post is based on the tech talk given by a Twitter engineer. I redrew the diagram as the original diagram is difficult to read.\n\nReference: https://t.co/cMRgpGrK1y https://t.co/RZ6mdV631N",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgLR2fvVsAAaDJs.jpg\"]",
            "tweet_conversation_id": "1586060756155449344",
            "tweet_type": "Systems Design",
            "created_at": "2022-10-28T18:22:06.000Z"
        },
        {
            "id": 1504,
            "username": "testdrivenio",
            "tweet_id": "1586079148346318848",
            "tweet_text": "Just updated the Django TDD course! \ud83d\udc0d\n\n\ud83d\udd38Changelog: https://t.co/2B98ul5M7N\n\ud83d\udd38Code changes: https://t.co/xV4WqkqGA8\n\ud83d\udd38Course: https://t.co/OGxmpKsnfu\n\n(Changes are minor. Mostly just dependency updates.)\n\n#Django #Python #pytest",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586079148346318848",
            "tweet_type": "Others",
            "created_at": "2022-10-28T19:35:11.000Z"
        },
        {
            "id": 1136,
            "username": "bascodes",
            "tweet_id": "1586259955643863040",
            "tweet_text": "Have a great weekend, fellow devs!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586259955643863040",
            "tweet_type": "Others",
            "created_at": "2022-10-29T07:33:39.000Z"
        },
        {
            "id": 1503,
            "username": "testdrivenio",
            "tweet_id": "1586340540282437633",
            "tweet_text": "Django vs. Flask: Which Framework to Choose\n\nhttps://t.co/13pEEnsjj6\n\nLooks at:\n\n\ud83d\udd39Philosophy\n\ud83d\udd39Features\n\ud83d\udd39Security\n\ud83d\udd39Flexibility\n\ud83d\udd39Education\n\ud83d\udd39Open Source\n\ud83d\udd39Hiring\n\ud83d\udd39Use Cases\n\ud83d\udd39Performance\n\n#Django #Flask #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586340540282437633",
            "tweet_type": "Others",
            "created_at": "2022-10-29T12:53:52.000Z"
        },
        {
            "id": 580,
            "username": "alexxubyte",
            "tweet_id": "1586383622763732992",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39Super high-performance NoSQL and Message queue\n\ud83d\udd39Visualize non-functional requirement\n\ud83d\udd39API first design\n\ud83d\udd39What is API gateway (YouTube video)\n\ud83d\udd39What is a data platform?\n\nSubscribe here: https://t.co/PczMAd8Jdb https://t.co/1zcTAl6kXS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgP3fnvUAAMoxDt.jpg\"]",
            "tweet_conversation_id": "1586383622763732992",
            "tweet_type": "Others",
            "created_at": "2022-10-29T15:45:03.000Z"
        },
        {
            "id": 1502,
            "username": "testdrivenio",
            "tweet_id": "1586394939180478464",
            "tweet_text": "Python clean code tip:\n\nUse join to join multiple string together with desired separator (can be any string)\n\n\ud83d\udc47 https://t.co/Zd1RHEt6vv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgQBycwakAETzE1.png\"]",
            "tweet_conversation_id": "1586394939180478464",
            "tweet_type": "Python tips",
            "created_at": "2022-10-29T16:30:01.000Z"
        },
        {
            "id": 1501,
            "username": "testdrivenio",
            "tweet_id": "1586718722865201153",
            "tweet_text": "Modern Test-Driven Development in Python \nhttps://t.co/bjd4c4IaWI \n\nInterested in how TDD works? \n\nThis guide walks you through the process, using modern tools and techniques, from start to finish.\n\nby @JanGiacomelli\n\n#Python #Testing #TDD #Flask",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586718722865201153",
            "tweet_type": "Others",
            "created_at": "2022-10-30T13:56:37.000Z"
        },
        {
            "id": 1135,
            "username": "bascodes",
            "tweet_id": "1586747167670165506",
            "tweet_text": "As a developer, what are your plans for Halloween? \ud83c\udf83",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586747167670165506",
            "tweet_type": "Others",
            "created_at": "2022-10-30T15:49:39.000Z"
        },
        {
            "id": 1500,
            "username": "testdrivenio",
            "tweet_id": "1586772424582131713",
            "tweet_text": "Python clean code tip:\n\nDon't allow CORS for all domains - be explicit\n\n\ud83d\udc47 https://t.co/kEaV2Xn1bU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgVZHA2VQAE3T79.png\"]",
            "tweet_conversation_id": "1586772424582131713",
            "tweet_type": "Python tips",
            "created_at": "2022-10-30T17:30:01.000Z"
        },
        {
            "id": 1134,
            "username": "bascodes",
            "tweet_id": "1586829901931347970",
            "tweet_text": "Work from home upgrade \ud83c\udfd3\n#fitdevs https://t.co/By3s8BVUor",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgWNYbjWYAIoMIi.jpg\"]",
            "tweet_conversation_id": "1586829901931347970",
            "tweet_type": "Others",
            "created_at": "2022-10-30T21:18:25.000Z"
        },
        {
            "id": 1499,
            "username": "testdrivenio",
            "tweet_id": "1586868952927543296",
            "tweet_text": "Just updated the FastAPI TDD course! \ud83d\udc0d\n\n\ud83d\udd38Changelog: https://t.co/CFYzpwGJdm\n\ud83d\udd38Code changes: https://t.co/HjacsK7BaL\n\ud83d\udd38Course: https://t.co/ggQdnFse7C\n\nChanges are minor. Mostly just dependency updates.\n\n10% of profits go back to the FastAPI team! \ud83d\ude80\n\n#FastAPI #Python @tiangolo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586868952927543296",
            "tweet_type": "Others",
            "created_at": "2022-10-30T23:53:35.000Z"
        },
        {
            "id": 1498,
            "username": "testdrivenio",
            "tweet_id": "1587076209489416196",
            "tweet_text": "Asynchronous Tasks with Flask and Celery \n\nhttps://t.co/aIo7EQ7MPF \n\nThis post looks at how to configure Celery to handle long-running tasks in a Flask app.\n\n#Flask #WebDev #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587076209489416196",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:37:09.000Z"
        },
        {
            "id": 1133,
            "username": "bascodes",
            "tweet_id": "1587087496042512384",
            "tweet_text": "\ud83c\udf83\nScare a developer in 5 words or less!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587087496042512384",
            "tweet_type": "Others",
            "created_at": "2022-10-31T14:22:00.000Z"
        },
        {
            "id": 579,
            "username": "alexxubyte",
            "tweet_id": "1587103762149040128",
            "tweet_text": "Tell me you are a software engineer without telling me you are an engineer - spooky edition.\n\nSubscribe for candy \ud83d\udc7b\ud83d\udc7b: https://t.co/dkjDPxrTOt https://t.co/vVDfcjUsiR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaGdTcVQAAY5E5.jpg\"]",
            "tweet_conversation_id": "1587103762149040128",
            "tweet_type": "Others",
            "created_at": "2022-10-31T15:26:38.000Z"
        },
        {
            "id": 578,
            "username": "alexxubyte",
            "tweet_id": "1587121770506559488",
            "tweet_text": "1/ How to scale from 0 to millions of users - spooky edition 2\n\nDesigning a system that supports millions of users is challenging, and it is a journey that requires continuous refinement and endless improvement. Let\u2019s take a quick look at what are some of the key components. https://t.co/3Tenk5ccSn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaW1hnUYAAw1ml.jpg\"]",
            "tweet_conversation_id": "1587121770506559488",
            "tweet_type": "Others",
            "created_at": "2022-10-31T16:38:12.000Z"
        },
        {
            "id": 577,
            "username": "alexxubyte",
            "tweet_id": "1587121780962959360",
            "tweet_text": "2/ \ud835\udc0b\ud835\udc28\ud835\udc1a\ud835\udc1d \ud835\udc1b\ud835\udc1a\ud835\udc25\ud835\udc1a\ud835\udc27\ud835\udc1c\ud835\udc1e\ud835\udc2b\nA load balancer evenly distributes incoming traffic among web servers that are defined in a load-balanced set\n\n\ud835\udc16\ud835\udc1e\ud835\udc1b \ud835\udc2c\ud835\udc1e\ud835\udc2b\ud835\udc2f\ud835\udc1e\ud835\udc2b\ud835\udc2c\nWeb server returns HTML pages or JSON response for rendering\n\n\ud835\udc03\ud835\udc1a\ud835\udc2d\ud835\udc1a\ud835\udc1b\ud835\udc1a\ud835\udc2c\ud835\udc1e\ud835\udc2c: vertical and horizontal scaling https://t.co/DW4CEUQ1wv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaW2BNUAAArcG5.jpg\"]",
            "tweet_conversation_id": "1587121770506559488",
            "tweet_type": "Others",
            "created_at": "2022-10-31T16:38:14.000Z"
        },
        {
            "id": 576,
            "username": "alexxubyte",
            "tweet_id": "1587121791608053761",
            "tweet_text": "3/ \ud835\udc02\ud835\udc1a\ud835\udc1c\ud835\udc21\ud835\udc1e\nA cache is a temporary storage area that stores the result of expensive responses or frequently accessed data in memory so that subsequent requests are served more quickly. https://t.co/kw4tmfX5eP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaW2oFVUAAKL1V.jpg\"]",
            "tweet_conversation_id": "1587121770506559488",
            "tweet_type": "Others",
            "created_at": "2022-10-31T16:38:17.000Z"
        },
        {
            "id": 575,
            "username": "alexxubyte",
            "tweet_id": "1587121801313722368",
            "tweet_text": "4/ \ud835\udc02\ud835\udc28\ud835\udc27\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc2d \ud835\udc1d\ud835\udc1e\ud835\udc25\ud835\udc22\ud835\udc2f\ud835\udc1e\ud835\udc2b\ud835\udc32 \ud835\udc27\ud835\udc1e\ud835\udc2d\ud835\udc30\ud835\udc28\ud835\udc2b\ud835\udc24 (\ud835\udc02\ud835\udc03\ud835\udc0d)\nA CDN is a network of geographically dispersed servers used to deliver static content. CDN servers cache static content like images, videos, CSS, JavaScript files, etc. https://t.co/9SDZCUFYWL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaW3OGUAAEnsEb.jpg\"]",
            "tweet_conversation_id": "1587121770506559488",
            "tweet_type": "Others",
            "created_at": "2022-10-31T16:38:19.000Z"
        },
        {
            "id": 574,
            "username": "alexxubyte",
            "tweet_id": "1587121811124146177",
            "tweet_text": "5/ \ud835\udc0c\ud835\udc1e\ud835\udc2c\ud835\udc2c\ud835\udc1a\ud835\udc20\ud835\udc1e \ud835\udc2a\ud835\udc2e\ud835\udc1e\ud835\udc2e\ud835\udc1e\nA message queue is a durable component, stored in memory, that supports asynchronous communication. https://t.co/f2VgaXMkwQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaW30AUAAIkzCr.jpg\"]",
            "tweet_conversation_id": "1587121770506559488",
            "tweet_type": "Others",
            "created_at": "2022-10-31T16:38:21.000Z"
        },
        {
            "id": 573,
            "username": "alexxubyte",
            "tweet_id": "1587121820838215680",
            "tweet_text": "6/ \ud835\udc0b\ud835\udc28\ud835\udc20\ud835\udc20\ud835\udc22\ud835\udc27\ud835\udc20, \ud835\udc26\ud835\udc1e\ud835\udc2d\ud835\udc2b\ud835\udc22\ud835\udc1c\ud835\udc2c, \ud835\udc1a\ud835\udc2e\ud835\udc2d\ud835\udc28\ud835\udc26\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\nWhen working with a small website that runs on a few servers, logging and automation support are good practices but not a necessity. However, now that your site has grown, investing in those tools is essential. https://t.co/wB4lcPUkPF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaW4XAUoAAWNgB.jpg\"]",
            "tweet_conversation_id": "1587121770506559488",
            "tweet_type": "Others",
            "created_at": "2022-10-31T16:38:24.000Z"
        },
        {
            "id": 1497,
            "username": "testdrivenio",
            "tweet_id": "1587134812191485952",
            "tweet_text": "Python clean code tip:\n\nAdd an underscore suffix to your variable/method names when that is shadowing with built-in functions/modules/...\n\nWhy?\n\nTo keep all the context but prevent errors due to shadowing\n\n\ud83d\udc47 https://t.co/ZcqV83OoPL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaisvuaAAAX9vv.png\"]",
            "tweet_conversation_id": "1587134812191485952",
            "tweet_type": "Python tips",
            "created_at": "2022-10-31T17:30:01.000Z"
        },
        {
            "id": 1496,
            "username": "testdrivenio",
            "tweet_id": "1587159274593075202",
            "tweet_text": "\ud83d\udea8We need your help!\n\nWe're starting to write an advanced Django + HTMX course. We're curious which CSS framework you'd like to see used in the course. \n\nSo, if you were to start a new Django project today, which CSS framework would you use?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587159274593075202",
            "tweet_type": "Others",
            "created_at": "2022-10-31T19:07:13.000Z"
        },
        {
            "id": 1495,
            "username": "testdrivenio",
            "tweet_id": "1587159276195282945",
            "tweet_text": "Something else? Add it to the comments.\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587159274593075202",
            "tweet_type": "Others",
            "created_at": "2022-10-31T19:07:14.000Z"
        },
        {
            "id": 1132,
            "username": "bascodes",
            "tweet_id": "1587360652502384642",
            "tweet_text": "Anyone participated in Hacktoberfest? What was your experience?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587360652502384642",
            "tweet_type": "Others",
            "created_at": "2022-11-01T08:27:25.000Z"
        },
        {
            "id": 1494,
            "username": "testdrivenio",
            "tweet_id": "1587425030555795456",
            "tweet_text": "Running Django on DigitalOcean's App Platform \n\nhttps://t.co/679PQNxbna \n\nDigitalOcean's App Platform is a Platform-as-a-Service (PaaS) offering, which (much like Heroku) allows you to deploy an application from a git repository.\n\n#Django #DevOps @DigitalOcean",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587425030555795456",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:43:14.000Z"
        },
        {
            "id": 572,
            "username": "alexxubyte",
            "tweet_id": "1587468271917203460",
            "tweet_text": "An API gateway typically provides several important functions.\n\n- authentication and security policy enforcement\n- load balancing\n- protocol translation and service discovery\n- monitoring, logging\n- caching\n\nWatch the whole video here: https://t.co/FqFo6CfxiZ https://t.co/CwkYfXsJbs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgfR-ivVQAATtSV.jpg\"]",
            "tweet_conversation_id": "1587468271917203460",
            "tweet_type": "Others",
            "created_at": "2022-11-01T15:35:04.000Z"
        },
        {
            "id": 1493,
            "username": "testdrivenio",
            "tweet_id": "1587497200439152640",
            "tweet_text": "Python clean code tip:\n\nUse tuples to sort by multiple attributes\n\nIt works similarly to sorting strings by alphabet\n\n\ud83d\udc47 https://t.co/PKz6JsBAqf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgfsSf1UYAAF5Ds.png\"]",
            "tweet_conversation_id": "1587497200439152640",
            "tweet_type": "Python tips",
            "created_at": "2022-11-01T17:30:01.000Z"
        },
        {
            "id": 1131,
            "username": "bascodes",
            "tweet_id": "1587546867105144833",
            "tweet_text": "I will have a \u2615\ufe0f chat with @i_am_daniele, head of Twitter's Developer Advocacy team on Friday! \uea00\ud83e\udd51\n\nAny questions for him\u2753",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587546867105144833",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:47:22.000Z"
        },
        {
            "id": 1130,
            "username": "bascodes",
            "tweet_id": "1587724502619807745",
            "tweet_text": "New blog post: \ud83d\uddde\ufe0f\ud83d\udcf0\nMy Simple Kubernetes Setup for Side Projects\n\nIf you want to use a very simple Kubernetes setup for your side projects, read this: \u2638\ufe0f\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587724502619807745",
            "tweet_type": "Others",
            "created_at": "2022-11-02T08:33:14.000Z"
        },
        {
            "id": 1129,
            "username": "bascodes",
            "tweet_id": "1587724505241223168",
            "tweet_text": "https://t.co/Sp4uosGEtr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587724502619807745",
            "tweet_type": "Others",
            "created_at": "2022-11-02T08:33:15.000Z"
        },
        {
            "id": 1492,
            "username": "testdrivenio",
            "tweet_id": "1587802722455150596",
            "tweet_text": "Working with Static and Media Files in Django\n\nhttps://t.co/NZ5QfpzFSa \n\nThis article looks at how to work with static and media files in a Django project, locally and in production.\n\nby @amal_ytics \n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587802722455150596",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:44:03.000Z"
        },
        {
            "id": 571,
            "username": "alexxubyte",
            "tweet_id": "1587833190365872129",
            "tweet_text": "Very nice illustration of the Data Pipeline by @Semantixai. It may provide some insights into understanding data pipelines.\n\nJoin a growing community of more than 150,000 readers who love System Design. Subscribe here: https://t.co/dkjDPxrTOt https://t.co/6S7eb86fKx",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Fgkd2vwVEAA343V.mp4\"]",
            "tweet_conversation_id": "1587833190365872129",
            "tweet_type": "Others",
            "created_at": "2022-11-02T15:45:07.000Z"
        },
        {
            "id": 1491,
            "username": "testdrivenio",
            "tweet_id": "1587859606327287808",
            "tweet_text": "Python clean code tip:\n\nAvoid naive datetime objects - use timezone-aware ones instead\n\nUse them always in UTC and only present them to users in their local time zone\n\n\ud83d\udc47 https://t.co/TsXT2KldY0",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fgk14V4akAAVqFG.png\"]",
            "tweet_conversation_id": "1587859606327287808",
            "tweet_type": "Python tips",
            "created_at": "2022-11-02T17:30:05.000Z"
        },
        {
            "id": 1128,
            "username": "bascodes",
            "tweet_id": "1588093645907001344",
            "tweet_text": "What\u2019s your favorite gadget of your desk setup?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588093645907001344",
            "tweet_type": "Others",
            "created_at": "2022-11-03T09:00:05.000Z"
        },
        {
            "id": 570,
            "username": "alexxubyte",
            "tweet_id": "1588203747259260928",
            "tweet_text": "/1 Is it possible to achieve at least a 10x performance boost compared to the original Kafka and Cassandra? How to achieve that? What are the trade-offs?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:35.000Z"
        },
        {
            "id": 569,
            "username": "alexxubyte",
            "tweet_id": "1588203762945884160",
            "tweet_text": "/2 There is an exciting class of storage software like \ud835\udc11\ud835\udc1e\ud835\udc1d\ud835\udc29\ud835\udc1a\ud835\udc27\ud835\udc1d\ud835\udc1a and \ud835\udc12\ud835\udc1c\ud835\udc32\ud835\udc25\ud835\udc25\ud835\udc1a\ud835\udc03\ud835\udc01 that boasts at least an order of magnitude improvement in performance. https://t.co/1Go7XT3iYt",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fgpu5cZUAAEehjF.jpg\", \"https://pbs.twimg.com/media/Fgpu5wVUYAEgYdc.jpg\"]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:39.000Z"
        },
        {
            "id": 568,
            "username": "alexxubyte",
            "tweet_id": "1588203766615924736",
            "tweet_text": "/3 Redpanda and ScyllaDB are used as examples in the diagram below. Redpanda can be compared to Kafka, while ScyllaDB is like NoSQL Cassandra.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:40.000Z"
        },
        {
            "id": 567,
            "username": "alexxubyte",
            "tweet_id": "1588203775797260288",
            "tweet_text": "/4 \ud83d\udd39\ud835\udc0d\ud835\udc28 \ud835\udc09\ud835\udc15\ud835\udc0c, \ud835\udc0d\ud835\udc28 \ud835\udc06\ud835\udc02\nKafka and Cassandra are written in JVM compatible languages, and usually suffer from high tail latency, where the average latency performs good but 99% latency is not so good due to GC (Garbage Collection). https://t.co/MOlktZc7aH",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fgpu6aQUYAAexVF.jpg\"]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:42.000Z"
        },
        {
            "id": 566,
            "username": "alexxubyte",
            "tweet_id": "1588203779391774720",
            "tweet_text": "/5 Redpanda and ScyllaDB are rewritten from scratch using C++ and leverages some new frameworks (For example, SeaStar). They are hard to code, but can achieve much higher performance .",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:43.000Z"
        },
        {
            "id": 565,
            "username": "alexxubyte",
            "tweet_id": "1588203787734249472",
            "tweet_text": "/6 \ud83d\udd39\ud835\udc12\ud835\udc21\ud835\udc1a\ud835\udc2b\ud835\udc1e-\ud835\udc27\ud835\udc28\ud835\udc2d\ud835\udc21\ud835\udc22\ud835\udc27\ud835\udc20 \ud835\udc1a\ud835\udc2b\ud835\udc1c\ud835\udc21\ud835\udc22\ud835\udc2d\ud835\udc1e\ud835\udc1c\ud835\udc2d\ud835\udc2e\ud835\udc2b\ud835\udc1e\nEvery request is pinned to a CPU core. There is no memory contention between cores. This is also friendly to NUMA (Non-Uniform Memory Access) architecture, so that thread can access the memory closer to the CPU core. https://t.co/F6QfOZDd3O",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fgpu7JKUoAIiIGf.jpg\"]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:45.000Z"
        },
        {
            "id": 222,
            "username": "alexxubyte",
            "tweet_id": "1588203796382949376",
            "tweet_text": "/7 \ud83d\udd39\ud835\udc19\ud835\udc1e\ud835\udc2b\ud835\udc28-\ud835\udc1c\ud835\udc28\ud835\udc29\ud835\udc32 \ud835\udc0d\ud835\udc1e\ud835\udc2d\ud835\udc30\ud835\udc28\ud835\udc2b\ud835\udc24\ud835\udc22\ud835\udc27\ud835\udc20\nUsing SeaStar framework, both products can access network devices directly in user mode, and the kernel is not involved. Zero-copy, zero-lock, and zero-context-switch. https://t.co/uU7mqYKM9o",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fgpu7rBUoAA6FZ-.jpg\"]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:47.000Z"
        },
        {
            "id": 221,
            "username": "alexxubyte",
            "tweet_id": "1588203799729958914",
            "tweet_text": "/8 \ud83d\udca1 Final words\n\nWhat is the drawback of this new class of software? Performance does not come for free. The level of complexity of this class of software is higher than the ones from the previous generation. C++ is already difficult to program in.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:47.000Z"
        },
        {
            "id": 220,
            "username": "alexxubyte",
            "tweet_id": "1588203802280095744",
            "tweet_text": "/9 The asynchronous programming model enforced by Seastar makes it even harder to reason about.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:48.000Z"
        },
        {
            "id": 219,
            "username": "alexxubyte",
            "tweet_id": "1588203804721221632",
            "tweet_text": "/10 Having their own co-operative scheduler means taking full responsibility for managing long-running tasks. It is challenging to ensure that every task takes as short as possible to complete. Any latency impact from errant tasks could be felt throughout the entire stack.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:49.000Z"
        },
        {
            "id": 218,
            "username": "alexxubyte",
            "tweet_id": "1588203807254622208",
            "tweet_text": "/11 References:\n[1] Seastar\n[2] Redpanda blog\n[3] ScyllaDB university",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588203747259260928",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-03T16:17:49.000Z"
        },
        {
            "id": 1490,
            "username": "testdrivenio",
            "tweet_id": "1588221976925319168",
            "tweet_text": "Python clean code tip:\n\nUse the same concept throughout your code base\n\ne.g., always return Pydantic schema and not a dictionary\n\nWhy?\n- consistency -&gt; readability\n- fewer decisions to make when adding new things\n\n\ud83d\udc47 https://t.co/bJ2RPbNlIZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fgp_eEiaAAAY6po.png\"]",
            "tweet_conversation_id": "1588221976925319168",
            "tweet_type": "Python tips",
            "created_at": "2022-11-03T17:30:01.000Z"
        },
        {
            "id": 1127,
            "username": "bascodes",
            "tweet_id": "1588259056283971586",
            "tweet_text": "Teacher\u2019s Tribe Meeting https://t.co/BVRTRCF8qa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgqhMLZXkAAVcKF.jpg\"]",
            "tweet_conversation_id": "1588259056283971586",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:57:22.000Z"
        },
        {
            "id": 1126,
            "username": "bascodes",
            "tweet_id": "1588361173313150976",
            "tweet_text": "Still 16% left!\n\nWhat are you doing with the rest of the days in 2022? https://t.co/cnXmmnc2Ac",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588361173313150976",
            "tweet_type": "Others",
            "created_at": "2022-11-04T02:43:08.000Z"
        },
        {
            "id": 1125,
            "username": "bascodes",
            "tweet_id": "1588466447898259457",
            "tweet_text": "Today is a bad day for Twitter",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588466447898259457",
            "tweet_type": "Others",
            "created_at": "2022-11-04T09:41:28.000Z"
        },
        {
            "id": 1124,
            "username": "bascodes",
            "tweet_id": "1588483153072918528",
            "tweet_text": "Almost didn't notice it's Friday again! \n\nSo, as always I owe you my weekly list of interesting articles and projects I've found #ThisWeekInPython \ud83d\udc0d\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:50.000Z"
        },
        {
            "id": 1123,
            "username": "bascodes",
            "tweet_id": "1588483155908235265",
            "tweet_text": "Where exactly does Python 3.11 get its ~25% Speedup? \u2013 by @beshr\nhttps://t.co/NgLPm9DWSE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:51.000Z"
        },
        {
            "id": 1122,
            "username": "bascodes",
            "tweet_id": "1588483158869245953",
            "tweet_text": "Make a Full Lexer in Python\nhttps://t.co/Nyv935IUND",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:52.000Z"
        },
        {
            "id": 1121,
            "username": "bascodes",
            "tweet_id": "1588483161595707393",
            "tweet_text": "Caching in Django Applications \u2013 by @getsentry\nhttps://t.co/wluJMUyF0w",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:52.000Z"
        },
        {
            "id": 1120,
            "username": "bascodes",
            "tweet_id": "1588483164066177024",
            "tweet_text": "PyCon US 2022 Recap and Recording Announcement \u2013 by @pycon\nhttps://t.co/pwqrbGzaT1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:53.000Z"
        },
        {
            "id": 1119,
            "username": "bascodes",
            "tweet_id": "1588483166872141824",
            "tweet_text": "Python Type Hints - Lambdas don\u2019t support type hints, but that\u2019s okay \u2013 by @adamchainz\nhttps://t.co/Uxfs4gJXp0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:54.000Z"
        },
        {
            "id": 1118,
            "username": "bascodes",
            "tweet_id": "1588483169539731456",
            "tweet_text": "pyu2f \u2013 is a python based U2F host library for Linux, Windows, and MacOS. It provides functionality for interacting with a U2F device over USB \u2013\u00a0by @google\nhttps://t.co/bnwYNgIUXT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:54.000Z"
        },
        {
            "id": 1117,
            "username": "bascodes",
            "tweet_id": "1588483173713080321",
            "tweet_text": "spyql \u2013 Query data on the command line with SQL-like SELECTs powered by Python expressions \u2013 by @daniel_c_moura\nhttps://t.co/JdQXCOiEh0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:55.000Z"
        },
        {
            "id": 1116,
            "username": "bascodes",
            "tweet_id": "1588483176640688134",
            "tweet_text": "quokka \u2013\u00a0Open source SQL engine in Python\nhttps://t.co/PrXvcpbIeK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:56.000Z"
        },
        {
            "id": 1115,
            "username": "bascodes",
            "tweet_id": "1588483180356833282",
            "tweet_text": "DictDataBase \u2013 A python NoSQL database that uses dicts, and provided thread and process safety\nhttps://t.co/YqbWCtruTv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:57.000Z"
        },
        {
            "id": 1114,
            "username": "bascodes",
            "tweet_id": "1588483183351255040",
            "tweet_text": "absurd-django \u2013 Run Django in the browser, started at @djangoconeurope by @patrick91 and @wilhelmklopp\nhttps://t.co/S1QPfI9JuC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:58.000Z"
        },
        {
            "id": 1113,
            "username": "bascodes",
            "tweet_id": "1588483186220470272",
            "tweet_text": "+++\nFind all the stuff on my blog \ud83d\udc47\n+++\nhttps://t.co/3vaddNSqVb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588483153072918528",
            "tweet_type": "Others",
            "created_at": "2022-11-04T10:47:58.000Z"
        },
        {
            "id": 1112,
            "username": "bascodes",
            "tweet_id": "1588516424628154371",
            "tweet_text": "Reading through all the #LoveWhereYouWorked tweets caused by #TwitterLayoffs really triggered some personal memories\n\nI also worked with a team that felt special at the time\n\nAfter all, work is so much about people!\n\nAll the best for those affected today!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588516424628154371",
            "tweet_type": "Others",
            "created_at": "2022-11-04T13:00:03.000Z"
        },
        {
            "id": 217,
            "username": "alexxubyte",
            "tweet_id": "1588563673215168514",
            "tweet_text": "/1 This week has been rough. Lots of layoffs and hiring freezes. My heart goes out to everyone who is going through this right now. This one event doesn\u2019t define you, and over time you will look back at it as a temporary setback. It's time to reach out to your support network.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588563673215168514",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-04T16:07:48.000Z"
        },
        {
            "id": 216,
            "username": "alexxubyte",
            "tweet_id": "1588563675891187713",
            "tweet_text": "/2 We are working to compile a list of interview resources and will share out soon.\n\nWe also have ByteByteGo's talent collective here (dozens of companies are hiring) and hope this can be helpful:\n\nhttps://t.co/NLKb8Mo0CB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588563673215168514",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-04T16:07:49.000Z"
        },
        {
            "id": 1489,
            "username": "testdrivenio",
            "tweet_id": "1588584363343716353",
            "tweet_text": "Python clean code tip:\n\nUse a dictionary to remove duplicates from a list and maintain order\n\n\ud83d\udc47 https://t.co/lWjqVuYDxF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgvJDu5aEAUVJVY.png\"]",
            "tweet_conversation_id": "1588584363343716353",
            "tweet_type": "Python tips",
            "created_at": "2022-11-04T17:30:01.000Z"
        },
        {
            "id": 215,
            "username": "alexxubyte",
            "tweet_id": "1588917696258666496",
            "tweet_text": "Next week, we will cover:\n\ud83d\udd39 RPC - gRPC\n\ud83d\udd39 RPC - Avro\n\ud83d\udd39 Domain-driven design (DDD)\n\ud83d\udd39 SQL optimization\n\ud83d\udd39 API first design\n\nSubscribe to our weekly newsletter to learn something new every week: https://t.co/dkjDPxrTOt https://t.co/OqPRNA0ldI",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Fgz4NPKUYAAOuJm.mp4\"]",
            "tweet_conversation_id": "1588917696258666496",
            "tweet_type": "Others",
            "created_at": "2022-11-05T15:34:34.000Z"
        },
        {
            "id": 1111,
            "username": "bascodes",
            "tweet_id": "1588929829344538624",
            "tweet_text": "In the past week, I had some discussions with Americans and Europeans about the current economic situation in tech\n\nAlso, an interesting discussion about \"the recession\" popped up on Hacker News (\ud83d\udd17\ud83d\udc47)\n\nWhat's your take on current affairs? \ud83d\udcc8\ud83d\udcc9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588929829344538624",
            "tweet_type": "Others",
            "created_at": "2022-11-05T16:22:46.000Z"
        },
        {
            "id": 1110,
            "username": "bascodes",
            "tweet_id": "1588929831466827779",
            "tweet_text": "\"Ask HN: What Recession?\"\nhttps://t.co/gAvXPlPZoL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588929829344538624",
            "tweet_type": "Others",
            "created_at": "2022-11-05T16:22:47.000Z"
        },
        {
            "id": 1488,
            "username": "testdrivenio",
            "tweet_id": "1588946750819426304",
            "tweet_text": "Python clean code tip:\n\nUse list comprehensions only for creating new lists - don't use it to replace for loops\n\n\ud83d\udc47 https://t.co/4pqjJwI39G",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg0SpeyakAMwEpE.png\"]",
            "tweet_conversation_id": "1588946750819426304",
            "tweet_type": "Python tips",
            "created_at": "2022-11-05T17:30:01.000Z"
        },
        {
            "id": 1109,
            "username": "bascodes",
            "tweet_id": "1589205142074949632",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Want to write better #Python code?\n\nHere are 3 tips for writing better \ud835\ude92\ud835\ude8fs \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589205142074949632",
            "tweet_type": "Python tips",
            "created_at": "2022-11-06T10:36:46.000Z"
        },
        {
            "id": 1108,
            "username": "bascodes",
            "tweet_id": "1589205144134381568",
            "tweet_text": "1 \u2013 Don't nest \ud835\ude92\ud835\ude8f conditions https://t.co/T59RnelmsK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg384JyWIAIdhms.jpg\"]",
            "tweet_conversation_id": "1589205142074949632",
            "tweet_type": "Others",
            "created_at": "2022-11-06T10:36:47.000Z"
        },
        {
            "id": 1107,
            "username": "bascodes",
            "tweet_id": "1589205146504155138",
            "tweet_text": "2 \u2013\u00a0Return boolean expressions directly https://t.co/qrZ40HuVWr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg38-4PXgAIn3UA.jpg\"]",
            "tweet_conversation_id": "1589205142074949632",
            "tweet_type": "Others",
            "created_at": "2022-11-06T10:36:47.000Z"
        },
        {
            "id": 1106,
            "username": "bascodes",
            "tweet_id": "1589205148852580353",
            "tweet_text": "3 \u2013 Use early returns https://t.co/seWum5RuPc",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg39HyGXkAAbGn6.jpg\"]",
            "tweet_conversation_id": "1589205142074949632",
            "tweet_type": "Others",
            "created_at": "2022-11-06T10:36:48.000Z"
        },
        {
            "id": 1487,
            "username": "testdrivenio",
            "tweet_id": "1589274420992172032",
            "tweet_text": "Building a CRUD App with FastAPI and MongoDB \n\nhttps://t.co/FCndpMl79f \n\nObjectives:\n\n1\u20e3Develop a RESTful API with Python and #FastAPI\n2\u20e3Interact with @MongoDB asynchronously\n3\u20e3Run MongoDB in the cloud with #MongoDB Atlas\n4\u20e3Deploy a @FastAPI app to Heroku",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589274420992172032",
            "tweet_type": "Others",
            "created_at": "2022-11-06T15:12:03.000Z"
        },
        {
            "id": 1486,
            "username": "testdrivenio",
            "tweet_id": "1589309144456081409",
            "tweet_text": "Python clean code tip:\n\nUse a dictionary to easily switch between different actions instead of IF \n\nVery useful when dealing with enum-like values\n\nWhy?\n- smaller specialized methods for processing\n- one simple path - no branching\n- simple to extend\n\n\ud83d\udc47 https://t.co/ZqkQcdL0hX",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg5cPYQagAANuWZ.jpg\"]",
            "tweet_conversation_id": "1589309144456081409",
            "tweet_type": "Python tips",
            "created_at": "2022-11-06T17:30:02.000Z"
        },
        {
            "id": 1105,
            "username": "bascodes",
            "tweet_id": "1589315426173026309",
            "tweet_text": "I used @snappify_io for the snippets in this thread. Looks good, doesn't it? https://t.co/pBENasD46D",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589315426173026309",
            "tweet_type": "Others",
            "created_at": "2022-11-06T17:55:00.000Z"
        },
        {
            "id": 1104,
            "username": "bascodes",
            "tweet_id": "1589386673645039618",
            "tweet_text": "Some people asked me how I added a \"Send a private message\" button to a tweet\n\nEasy! \ud83d\udca1\ud83d\udc47\n\nhttps://t.co/bFwtmzNrDC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589386673645039618",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:38:07.000Z"
        },
        {
            "id": 1103,
            "username": "bascodes",
            "tweet_id": "1589386676081938432",
            "tweet_text": "1. Find out your Twitter ID\n\nYou can use the API or any website that offers to look up the ID. The easiest one I've found was by @dr \n\nhttps://t.co/vnpcMFv5S2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589386673645039618",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:38:07.000Z"
        },
        {
            "id": 1102,
            "username": "bascodes",
            "tweet_id": "1589386678812438530",
            "tweet_text": "2. Build a direct link to send a message\n\nThe link should look like this:\n\n\ud83d\udd17 https ://twitter .com/messages/compose?recipient_id=&lt;YOUR ID&gt;\n\n(remove spaces)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589386673645039618",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:38:08.000Z"
        },
        {
            "id": 1101,
            "username": "bascodes",
            "tweet_id": "1589386682591113217",
            "tweet_text": "3. Add the link to your Tweet for fun and profit!\n\nhttps://t.co/bFwtmzvipu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589386673645039618",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:38:09.000Z"
        },
        {
            "id": 1100,
            "username": "bascodes",
            "tweet_id": "1589567492946812928",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Are you using the REPL in Python to test your code?\n\nWhen you change a module, you want to reload it?\n\nBut when you import your module again, nothing changes?\n\nHere is how to solve it! https://t.co/RTx8JXDdGv",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg9FC-fWIAEnFoq.jpg\"]",
            "tweet_conversation_id": "1589567492946812928",
            "tweet_type": "Python tips",
            "created_at": "2022-11-07T10:36:37.000Z"
        },
        {
            "id": 1099,
            "username": "bascodes",
            "tweet_id": "1589567495630819328",
            "tweet_text": "In Python, repeated imports of the same module do not cause a reload\n\nIf that's what you want, you can use \ud835\ude92\ud835\ude96\ud835\ude99\ud835\ude98\ud835\ude9b\ud835\ude9d\ud835\ude95\ud835\ude92\ud835\ude8b.\ud835\ude9b\ud835\ude8e\ud835\ude95\ud835\ude98\ud835\ude8a\ud835\ude8d instead! https://t.co/pn6RJEGlGA",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg9FZXVWYAEji12.jpg\"]",
            "tweet_conversation_id": "1589567492946812928",
            "tweet_type": "Others",
            "created_at": "2022-11-07T10:36:38.000Z"
        },
        {
            "id": 1098,
            "username": "bascodes",
            "tweet_id": "1589598240693186560",
            "tweet_text": "Here are my top VS Code extensions for Python development \ud83d\udc0d\n\n(link below \ud83d\udd17\ud83d\udc47)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589598240693186560",
            "tweet_type": "Others",
            "created_at": "2022-11-07T12:38:48.000Z"
        },
        {
            "id": 1097,
            "username": "bascodes",
            "tweet_id": "1589598243398176768",
            "tweet_text": "https://t.co/nFh9GiKZp1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589598240693186560",
            "tweet_type": "Others",
            "created_at": "2022-11-07T12:38:49.000Z"
        },
        {
            "id": 1485,
            "username": "testdrivenio",
            "tweet_id": "1589626809850941441",
            "tweet_text": "Python 3.11: What's New \n\nhttps://t.co/nddAdOBK22 \n\nby @jangiacomelli \n\nThe most interesting new additions and improvements to the #Python language:\n\n1\u20e3Faster CPython\n2\u20e3Improved type hints\n3\u20e3Better error messages\n4\u20e3Exception notes\n5\u20e3TOML library",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589626809850941441",
            "tweet_type": "Others",
            "created_at": "2022-11-07T14:32:19.000Z"
        },
        {
            "id": 1096,
            "username": "bascodes",
            "tweet_id": "1589649125401759745",
            "tweet_text": "Want to have a \u2615\ufe0f #CoffeeChat? Let's geek out about\n\n\u2022 Python, Django, IoT, WebDev\n\u2022 DevOps\n\u2022 Databases\n\u2022 Staying healthy while working in tech\n\u2022 Bees, Roadbikes, Cooking, Travel\n\u2022 Anything else?\n\n\ud83d\udce8 Send me a DM for my \ud83d\udcc5 calendly link!\n\n#100Devs #100daysofcoding",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589649125401759745",
            "tweet_type": "Others",
            "created_at": "2022-11-07T16:01:00.000Z"
        },
        {
            "id": 214,
            "username": "alexxubyte",
            "tweet_id": "1589661228502171649",
            "tweet_text": "/1 How does \ud835\udc20\ud835\udc11\ud835\udc0f\ud835\udc02 work?\n\nRPC (Remote Procedure Call) is called \u201c\ud835\udc2b\ud835\udc1e\ud835\udc26\ud835\udc28\ud835\udc2d\ud835\udc1e\u201d because it enables communications between remote services when services are deployed to different servers. From the user\u2019s point of view, it acts like a local function call https://t.co/W5FeftgpvE",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg-cdXRVEAArIQf.jpg\"]",
            "tweet_conversation_id": "1589661228502171649",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-07T16:49:06.000Z"
        },
        {
            "id": 213,
            "username": "alexxubyte",
            "tweet_id": "1589661239747129345",
            "tweet_text": "/2 The diagram below illustrates the overall data flow for \ud835\udc20\ud835\udc11\ud835\udc0f\ud835\udc02.\n\nStep 1: A REST call is made from the client. The request body is usually in JSON format. https://t.co/1uTsJZqbns",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg-cd6vVUAEVfor.jpg\"]",
            "tweet_conversation_id": "1589661228502171649",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-07T16:49:08.000Z"
        },
        {
            "id": 212,
            "username": "alexxubyte",
            "tweet_id": "1589661251071713280",
            "tweet_text": "/3 Steps 2 - 4: The order service (gRPC client) receives the REST call, transforms it, and makes an RPC call to the payment service. gPRC encodes the \ud835\udc1c\ud835\udc25\ud835\udc22\ud835\udc1e\ud835\udc27\ud835\udc2d \ud835\udc2c\ud835\udc2d\ud835\udc2e\ud835\udc1b into a binary format and sends it to the low-level transport layer. https://t.co/Ab5mUHxemT",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg-cejeVQAAQssu.jpg\"]",
            "tweet_conversation_id": "1589661228502171649",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-07T16:49:11.000Z"
        },
        {
            "id": 211,
            "username": "alexxubyte",
            "tweet_id": "1589661261997887489",
            "tweet_text": "/4 Step 5: gRPC sends the packets over the network via HTTP2. Because of binary encoding and network optimizations, gRPC is said to be 5X faster than JSON. https://t.co/Ujc59045G8",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg-cfNnVIAU9dpX.jpg\"]",
            "tweet_conversation_id": "1589661228502171649",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-07T16:49:13.000Z"
        },
        {
            "id": 210,
            "username": "alexxubyte",
            "tweet_id": "1589661272915648512",
            "tweet_text": "/5 Steps 6 - 8: The payment service (gRPC server) receives the packets from the network, decodes them, and invokes the server application.\n\nSteps 9 - 11: The result is returned from the server application, and gets encoded and sent to the transport layer. https://t.co/XysIwBEUP3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg-cf2BUUAAroP5.jpg\"]",
            "tweet_conversation_id": "1589661228502171649",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-07T16:49:16.000Z"
        },
        {
            "id": 209,
            "username": "alexxubyte",
            "tweet_id": "1589661283925643264",
            "tweet_text": "/6 Steps 12 - 14: The order service receives the packets, decodes them, and sends the result to the client application.\n\n\ud83d\udc49 Over to you: Have you used gPRC in your project? What are some of its limitations? https://t.co/qx9vvizlod",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg-cge7VUAE9jxb.jpg\"]",
            "tweet_conversation_id": "1589661228502171649",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-07T16:49:19.000Z"
        },
        {
            "id": 208,
            "username": "alexxubyte",
            "tweet_id": "1589661287801184256",
            "tweet_text": "/7 Subscribe to our weekly newsletter to learn something new every week:\nhttps://t.co/dkjDPxrTOt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589661228502171649",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-07T16:49:20.000Z"
        },
        {
            "id": 1484,
            "username": "testdrivenio",
            "tweet_id": "1589671528496394241",
            "tweet_text": "Python clean code tip:\n\nUse .exception() instead of .error() to get traceback logged together with the exception\n\n\ud83d\udc47 https://t.co/QMhb5UWI2U",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fg-l1EfaYAAuwU6.png\"]",
            "tweet_conversation_id": "1589671528496394241",
            "tweet_type": "Python tips",
            "created_at": "2022-11-07T17:30:01.000Z"
        },
        {
            "id": 207,
            "username": "alexxubyte",
            "tweet_id": "1589744264418037762",
            "tweet_text": "Anyone hiring interns in the United States? \n\nMy friend is looking for an internship. He is attending the first year of a Master's program and has worked many years in Japan before moving to the US. He is proficient in C++, Java, and C#. If you are hiring, pm me. Thanks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589744264418037762",
            "tweet_type": "Others",
            "created_at": "2022-11-07T22:19:03.000Z"
        },
        {
            "id": 1483,
            "username": "testdrivenio",
            "tweet_id": "1589984798617276416",
            "tweet_text": "Asynchronous Tasks with Flask and Redis Queue\n\nhttps://t.co/pIH4U0XUcK\n\nThis post looks at how to configure Redis Queue (RQ) to handle long-running tasks in a Flask app.\n\n#WebDev #Python #Flask",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589984798617276416",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:14:51.000Z"
        },
        {
            "id": 1095,
            "username": "bascodes",
            "tweet_id": "1590003963243511809",
            "tweet_text": "Do you write unit tests?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590003963243511809",
            "tweet_type": "Others",
            "created_at": "2022-11-08T15:31:00.000Z"
        },
        {
            "id": 206,
            "username": "alexxubyte",
            "tweet_id": "1590017628378046466",
            "tweet_text": "/1 Have you heard of Domain-Driven Design (DDD), a major software design approach? https://t.co/Q1G41JObh2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDgmvYVEAAdplt.jpg\"]",
            "tweet_conversation_id": "1590017628378046466",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-08T16:25:18.000Z"
        },
        {
            "id": 205,
            "username": "alexxubyte",
            "tweet_id": "1590017631506997248",
            "tweet_text": "/2 DDD was introduced in Eric Evans\u2019 classic book \u201cDomain-Driven Design: Tackling Complexity in the Heart of Software\u201d. It explained a methodology to model a complex business. In this book, there is a lot of content, so I'll summarize the basics.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590017628378046466",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-08T16:25:19.000Z"
        },
        {
            "id": 204,
            "username": "alexxubyte",
            "tweet_id": "1590017639115390977",
            "tweet_text": "/3 \ud835\udc13\ud835\udc21\ud835\udc1e \ud835\udc1c\ud835\udc28\ud835\udc26\ud835\udc29\ud835\udc28\ud835\udc2c\ud835\udc22\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27 \ud835\udc28\ud835\udc1f \ud835\udc1d\ud835\udc28\ud835\udc26\ud835\udc1a\ud835\udc22\ud835\udc27 \ud835\udc28\ud835\udc1b\ud835\udc23\ud835\udc1e\ud835\udc1c\ud835\udc2d\ud835\udc2c:\n\n\ud83d\udd39Entity: a domain object that has ID and life cycle.\n\ud83d\udd39Value Object: a domain object without ID.\n\ud83d\udd39Aggregate: a collection of Entities that are bounded together by Aggregate Root (which is also an entity). https://t.co/v4B78hLhEY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDgnQlVIAEoTcs.jpg\"]",
            "tweet_conversation_id": "1590017628378046466",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-08T16:25:20.000Z"
        },
        {
            "id": 203,
            "username": "alexxubyte",
            "tweet_id": "1590017646874963970",
            "tweet_text": "/4 \ud835\udc13\ud835\udc21\ud835\udc1e \ud835\udc25\ud835\udc22\ud835\udc1f\ud835\udc1e \ud835\udc1c\ud835\udc32\ud835\udc1c\ud835\udc25\ud835\udc1e \ud835\udc28\ud835\udc1f \ud835\udc1d\ud835\udc28\ud835\udc26\ud835\udc1a\ud835\udc22\ud835\udc27 \ud835\udc28\ud835\udc1b\ud835\udc23\ud835\udc1e\ud835\udc1c\ud835\udc2d\ud835\udc2c:\n\n\ud83d\udd39Repository: storing and loading the Aggregate.\n\ud83d\udd39Factory: handling the creation of the Aggregate. https://t.co/rR7fYSXTna",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDgntKVUAAqjzs.jpg\"]",
            "tweet_conversation_id": "1590017628378046466",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-08T16:25:22.000Z"
        },
        {
            "id": 202,
            "username": "alexxubyte",
            "tweet_id": "1590017654747602944",
            "tweet_text": "/5 \ud835\udc01\ud835\udc1e\ud835\udc21\ud835\udc1a\ud835\udc2f\ud835\udc22\ud835\udc28\ud835\udc2b \ud835\udc28\ud835\udc1f \ud835\udc1d\ud835\udc28\ud835\udc26\ud835\udc1a\ud835\udc22\ud835\udc27 \ud835\udc28\ud835\udc1b\ud835\udc23\ud835\udc1e\ud835\udc1c\ud835\udc2d\ud835\udc2c:\n\n\ud83d\udd39Domain Service: orchestrate multiple Aggregate.\n\ud83d\udd39Domain Event: a description of what has happened to the Aggregate. The publication is made public so others could consume and reconstruct it. https://t.co/PoHdeK4PXD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDgoJyVIAEnt62.jpg\"]",
            "tweet_conversation_id": "1590017628378046466",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-08T16:25:24.000Z"
        },
        {
            "id": 201,
            "username": "alexxubyte",
            "tweet_id": "1590017658065276929",
            "tweet_text": "/6 Congratulations on getting this far. Now you know the basics of DDD. If you want to learn more, I highly recommend the book. It might help to simplify the complexity of software modeling.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590017628378046466",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-08T16:25:25.000Z"
        },
        {
            "id": 200,
            "username": "alexxubyte",
            "tweet_id": "1590017660657356800",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/el40tlDC4L",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590017628378046466",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-08T16:25:26.000Z"
        },
        {
            "id": 1482,
            "username": "testdrivenio",
            "tweet_id": "1590033915351535617",
            "tweet_text": "Python clean code tip:\n\nKeep your entry points (API, Celery jobs, CLI, ...) humble\n\nAbstract logic away from them\n\nWhy?\n- simplify testing\n- easier update to new versions of libraries/frameworks -&gt; they are not touching the business logic\n- more readable\n\n\ud83d\udc47 https://t.co/8516zX05l0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDvawlakAQvObx.png\"]",
            "tweet_conversation_id": "1590033915351535617",
            "tweet_type": "Python tips",
            "created_at": "2022-11-08T17:30:01.000Z"
        },
        {
            "id": 1094,
            "username": "bascodes",
            "tweet_id": "1590145672925569025",
            "tweet_text": "Any recommendations for a mind mapping app (web based, iOS and macOS apps appreciated)?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590145672925569025",
            "tweet_type": "Others",
            "created_at": "2022-11-09T00:54:06.000Z"
        },
        {
            "id": 1481,
            "username": "testdrivenio",
            "tweet_id": "1590348349357830146",
            "tweet_text": "Deploying a Django App to Fly\n\nhttps://t.co/SAhP6O03WA\n\nAlong with deploying the Django app, you'll-\n\n1\u20e3Spin up PostgreSQL\n2\u20e3Set up persistent storage via Fly Volumes\n3\u20e3Link a domain name to your app\n3\u20e3Obtain an SSL certificate with Let's Encrypt\n\n#Django @flydotio",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590348349357830146",
            "tweet_type": "Others",
            "created_at": "2022-11-09T14:19:28.000Z"
        },
        {
            "id": 1093,
            "username": "bascodes",
            "tweet_id": "1590373900981919745",
            "tweet_text": "What's your go-to coffee order? \u2615\ufe0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590373900981919745",
            "tweet_type": "Others",
            "created_at": "2022-11-09T16:01:00.000Z"
        },
        {
            "id": 199,
            "username": "alexxubyte",
            "tweet_id": "1590384986011549696",
            "tweet_text": "/1 Deploying or upgrading services is risky. In this post, we explore risk mitigation strategies.\n\nThe diagram below illustrates the common ones. https://t.co/PLDyBC7MhB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhIutwXVsAEL2ch.jpg\"]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:03.000Z"
        },
        {
            "id": 198,
            "username": "alexxubyte",
            "tweet_id": "1590384993498386432",
            "tweet_text": "/2 \ud835\udc0c\ud835\udc2e\ud835\udc25\ud835\udc2d\ud835\udc22-\ud835\udc12\ud835\udc1e\ud835\udc2b\ud835\udc2f\ud835\udc22\ud835\udc1c\ud835\udc1e \ud835\udc03\ud835\udc1e\ud835\udc29\ud835\udc25\ud835\udc28\ud835\udc32\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\n\nIn this model, we deploy new changes to multiple services simultaneously. This approach is easy to implement. But since all the services are upgraded at the same time, it is hard to manage, test dependencies, and rollback. https://t.co/Udit2FZADR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhIuuG5VEAE2DlZ.jpg\"]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:05.000Z"
        },
        {
            "id": 197,
            "username": "alexxubyte",
            "tweet_id": "1590385000637116416",
            "tweet_text": "/3 \ud835\udc01\ud835\udc25\ud835\udc2e\ud835\udc1e-\ud835\udc06\ud835\udc2b\ud835\udc1e\ud835\udc1e\ud835\udc27 \ud835\udc03\ud835\udc1e\ud835\udc29\ud835\udc25\ud835\udc28\ud835\udc32\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\n\nWith blue-green deployment, we have two identical environments: one is staging (blue) and the other is production (green). The staging environment is one version ahead of production. https://t.co/XfIRPbyCQM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhIuuivUAAAF8PK.jpg\"]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:06.000Z"
        },
        {
            "id": 196,
            "username": "alexxubyte",
            "tweet_id": "1590385003849863170",
            "tweet_text": "/4 Once testing is done in the staging environment, user traffic is switched to the staging environment, and the staging becomes the production. This deployment strategy is simple to perform rollback, but having two identical production quality environments could be expensive.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:07.000Z"
        },
        {
            "id": 195,
            "username": "alexxubyte",
            "tweet_id": "1590385010925744128",
            "tweet_text": "/5 \ud835\udc02\ud835\udc1a\ud835\udc27\ud835\udc1a\ud835\udc2b\ud835\udc32 \ud835\udc03\ud835\udc1e\ud835\udc29\ud835\udc25\ud835\udc28\ud835\udc32\ud835\udc26\ud835\udc1e\ud835\udc27\ud835\udc2d\n\nA canary deployment upgrades services gradually, each time to a subset of users. It is cheaper than blue-green deployment and easy to perform rollback. However, since there is no staging environment, we have to test on production. https://t.co/Q5mND4Bb4k",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhIuvHuVQAAxG3p.jpg\"]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:09.000Z"
        },
        {
            "id": 194,
            "username": "alexxubyte",
            "tweet_id": "1590385014184648704",
            "tweet_text": "/6 This process is more complicated because we need to monitor the canary while gradually migrating more and more users away from the old version.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:09.000Z"
        },
        {
            "id": 193,
            "username": "alexxubyte",
            "tweet_id": "1590385020752887808",
            "tweet_text": "/7 \ud835\udc00/\ud835\udc01 \ud835\udc13\ud835\udc1e\ud835\udc2c\ud835\udc2d\n\nIn the A/B test, different versions of services run in production simultaneously. Each version runs an \u201cexperiment\u201d for a subset of users. A/B test is a cheap method to test new features in production. https://t.co/9NDDt3gasr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhIuvtUUYAEKTcJ.jpg\"]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:11.000Z"
        },
        {
            "id": 192,
            "username": "alexxubyte",
            "tweet_id": "1590385024045436928",
            "tweet_text": "/8 We need to control the deployment process in case some features are pushed to users by accident.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:12.000Z"
        },
        {
            "id": 191,
            "username": "alexxubyte",
            "tweet_id": "1590385026494910464",
            "tweet_text": "/9 Over to you - Which deployment strategy have you used? Did you witness any deployment-related outages in production and why did they happen?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:12.000Z"
        },
        {
            "id": 190,
            "username": "alexxubyte",
            "tweet_id": "1590385029019947009",
            "tweet_text": "/10 Subscribe to our weekly newsletter to learn something new every week:\nhttps://t.co/PczMAd8Jdb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590384986011549696",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-09T16:45:13.000Z"
        },
        {
            "id": 1480,
            "username": "testdrivenio",
            "tweet_id": "1590396303317798913",
            "tweet_text": "Python clean code:\n\nAvoid double negatives in your code - e.g., not not_enabled\n\nWhy?\n\nIt hurts readability\n\n\ud83d\udc47 https://t.co/jm2TtNgT6U",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhI5AgkVUAA1g5Z.png\"]",
            "tweet_conversation_id": "1590396303317798913",
            "tweet_type": "Others",
            "created_at": "2022-11-09T17:30:01.000Z"
        },
        {
            "id": 1092,
            "username": "bascodes",
            "tweet_id": "1590532194602168321",
            "tweet_text": "For Python dev: \ud835\ude9f\ud835\ude92\ud835\ude9b\ud835\ude9d\ud835\ude9e\ud835\ude8a\ud835\ude95\ud835\ude8e\ud835\ude97\ud835\ude9f or \ud835\ude9f\ud835\ude8e\ud835\ude97\ud835\ude9f? \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590532194602168321",
            "tweet_type": "Others",
            "created_at": "2022-11-10T02:30:00.000Z"
        },
        {
            "id": 1091,
            "username": "bascodes",
            "tweet_id": "1590641517513048064",
            "tweet_text": "\ud83d\udca1Need to focus on your work? Why not use white noise or some nice background sounds?\n\nTIL background sounds are included in macOS. Here is how to set it up in System Settings \n\ud83c\udfa7\ud83c\udf27\ufe0f\ud83d\udc47 https://t.co/pQDquY88iA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhMV_L4XgAAcgl-.jpg\"]",
            "tweet_conversation_id": "1590641517513048064",
            "tweet_type": "Others",
            "created_at": "2022-11-10T09:44:25.000Z"
        },
        {
            "id": 1090,
            "username": "bascodes",
            "tweet_id": "1590650218843803648",
            "tweet_text": "Here are some more resources to get some tunes on your ears to focus on work \ud83c\udfaf\ud83c\udfa7\n\nhttps://t.co/DLlb4Uq4Lw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590641517513048064",
            "tweet_type": "Others",
            "created_at": "2022-11-10T10:18:59.000Z"
        },
        {
            "id": 1479,
            "username": "testdrivenio",
            "tweet_id": "1590705247668047877",
            "tweet_text": "Just updated the Real-Time Taxi App with Django Channels and React course! \ud83d\ude80\n\n\ud83d\udd38Changelog: https://t.co/ZoCwQqhQj9\n\ud83d\udd38Code changes: https://t.co/l0MtIBaEIt\n\ud83d\udd38Course: https://t.co/HXTReqcmpb\n\n#Django #ReactJS #Docker \ud83d\udc0d\ud83d\udc33",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590705247668047877",
            "tweet_type": "Others",
            "created_at": "2022-11-10T13:57:39.000Z"
        },
        {
            "id": 1089,
            "username": "bascodes",
            "tweet_id": "1590738971058835456",
            "tweet_text": "\u2753Do you have \n\n- an article\n- an open-source project\n- a great new package\n- an interesting story\n\nabout #Python that you want me to cover in tomorrow's #ThisWeekInPython\ud83d\udc0d issue?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590738971058835456",
            "tweet_type": "Others",
            "created_at": "2022-11-10T16:11:39.000Z"
        },
        {
            "id": 189,
            "username": "alexxubyte",
            "tweet_id": "1590744265667203077",
            "tweet_text": "Many people love GraphQL, many people hate it. How about you?\n\nIn this video, we talk about:\n- What is GraphQL\n- When to use it\n- Trade-offs\n- GraphQL vs. REST\n\nWatch the YouTube video now: https://t.co/ZzSPnrwc5L https://t.co/Vvz8nvd7c3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhN1ebfVUAUoEvC.jpg\"]",
            "tweet_conversation_id": "1590744265667203077",
            "tweet_type": "Others",
            "created_at": "2022-11-10T16:32:42.000Z"
        },
        {
            "id": 1478,
            "username": "testdrivenio",
            "tweet_id": "1590758693078908929",
            "tweet_text": "Python clean code tip:\n\nUse timedelta to define duration - e.g., timeouts\n\nWhy?\n\nNo conversion is needed from seconds to e.g. minutes:\n- more readable\n- less likely to set the wrong value\n- tell reader the unit of time\n\n\ud83d\udc47 https://t.co/NsJbXpx0bS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhOCmYNakAMF_Ah.png\"]",
            "tweet_conversation_id": "1590758693078908929",
            "tweet_type": "Python tips",
            "created_at": "2022-11-10T17:30:01.000Z"
        },
        {
            "id": 1088,
            "username": "bascodes",
            "tweet_id": "1590966239949885441",
            "tweet_text": "Congrats, people of #100Devs cohort of 2022! \ud83c\udf89\n\nI have talked to some of you, I know you were working hard and had a lot of fun!\n\nI\u2019m curious: What are your current plans?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590966239949885441",
            "tweet_type": "Others",
            "created_at": "2022-11-11T07:14:44.000Z"
        },
        {
            "id": 1087,
            "username": "bascodes",
            "tweet_id": "1590966623951007744",
            "tweet_text": "If you want to talk, let\u2019s have a #CoffeeChat \u2014 DM\ud83d\udce8 me for my calendly\ud83d\udcc6 link!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590966239949885441",
            "tweet_type": "Others",
            "created_at": "2022-11-11T07:16:16.000Z"
        },
        {
            "id": 1086,
            "username": "bascodes",
            "tweet_id": "1591005146884214786",
            "tweet_text": "Final sprint: 50 days left in 2022! \ud83d\ude80\n\nHave you been on track with your goals? What are the last steps you\u2019ll take this year?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591005146884214786",
            "tweet_type": "Others",
            "created_at": "2022-11-11T09:49:21.000Z"
        },
        {
            "id": 1085,
            "username": "bascodes",
            "tweet_id": "1591034720045142017",
            "tweet_text": "The awesome articles and projects trending #ThisWeekInPython\ud83d\udc0d are brought to you by delicious cinnamon and coconut-milk-flavoured\ud83e\udd65 coffee\u2615\ufe0f and the great suggestions I received on yesterday's tweet\n\nDid I miss any article or project in the #Python universe?\n\nKeep on reading \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:51.000Z"
        },
        {
            "id": 1084,
            "username": "bascodes",
            "tweet_id": "1591034722578464768",
            "tweet_text": "Python Asyncio: The Complete Guide \u2013 by @TeachTheMachine\nhttps://t.co/lCY1Wpnpu1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:52.000Z"
        },
        {
            "id": 1083,
            "username": "bascodes",
            "tweet_id": "1591034724864385027",
            "tweet_text": "Develop your pipelines as code with the Dagger Python SDK \u2013\u00a0by @heldercor via @dagger_io\nhttps://t.co/LSEW0ryGyd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:53.000Z"
        },
        {
            "id": 523,
            "username": "bascodes",
            "tweet_id": "1591034727036846080",
            "tweet_text": "Good old-fashioned code optimization never goes out of style \u2013\u00a0by @itamarst\nhttps://t.co/FzPgeNuBnA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:53.000Z"
        },
        {
            "id": 522,
            "username": "bascodes",
            "tweet_id": "1591034729473912833",
            "tweet_text": "Greedy vs. Lazy Operators in Regex (Python) \nhttps://t.co/QAlnAGKu2I",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:54.000Z"
        },
        {
            "id": 521,
            "username": "bascodes",
            "tweet_id": "1591034731868884992",
            "tweet_text": "Trie in Python \nhttps://t.co/gdXTAyhMbN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:54.000Z"
        },
        {
            "id": 520,
            "username": "bascodes",
            "tweet_id": "1591034734247047169",
            "tweet_text": "Custom Sorting of Django Models * \u2013\u00a0by @simme_io\nhttps://t.co/WJJ6PUgphc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:55.000Z"
        },
        {
            "id": 519,
            "username": "bascodes",
            "tweet_id": "1591034736750624769",
            "tweet_text": "dinghy \u2013 A GitHub activity digest tool \u2013\u00a0by @nedbat\nhttps://t.co/rjHhvFFtwV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:55.000Z"
        },
        {
            "id": 518,
            "username": "bascodes",
            "tweet_id": "1591034739322146818",
            "tweet_text": "https://t.co/CVfNSIsVxU * \u2013 Bringing WebSockets, Http/Https High Peformance servers for PyPy3 and Python3 \u2013 by @cirospaciari\nhttps://t.co/1WNsZnLXSi",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:56.000Z"
        },
        {
            "id": 517,
            "username": "bascodes",
            "tweet_id": "1591034741838548992",
            "tweet_text": "dubbing-ai \u2013 * dubbing a video in many languages and with many different voices with the power of the AI \u2013 by @mfranz_on\nhttps://t.co/F4HHhPUYu5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:57.000Z"
        },
        {
            "id": 516,
            "username": "bascodes",
            "tweet_id": "1591034744208330752",
            "tweet_text": "drgn \u2013 Programmable debugger \u2013 by @omsandov\nhttps://t.co/hhe4D6tYDx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:57.000Z"
        },
        {
            "id": 515,
            "username": "bascodes",
            "tweet_id": "1591034746599272448",
            "tweet_text": "hstream \u2013 quick Python web apps \u2013 Streamlit alternative using htmx \nhttps://t.co/A2A7lVy494",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:58.000Z"
        },
        {
            "id": 514,
            "username": "bascodes",
            "tweet_id": "1591034749027782656",
            "tweet_text": "+++\nThe whole list on my blog \ud83d\udc47\n+++\nhttps://t.co/nmpCxxnVWV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:46:58.000Z"
        },
        {
            "id": 513,
            "username": "bascodes",
            "tweet_id": "1591035020197900288",
            "tweet_text": "Help others fill their weekend reading list by retweeting the first tweet of this thread\nhttps://t.co/S2hsGVt9FM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591034720045142017",
            "tweet_type": "Others",
            "created_at": "2022-11-11T11:48:03.000Z"
        },
        {
            "id": 1477,
            "username": "testdrivenio",
            "tweet_id": "1591063563723890690",
            "tweet_text": "Speeding Up Python with Concurrency, Parallelism, and asyncio\n\nhttps://t.co/1P4LGMX527 \n\n\ud83d\udd38What are concurrency and parallelism?\n\ud83d\udd38Examples of concurrent.futures and asyncio in Python\n\ud83d\udd38How async/await are implemented in .NET, JavaScript, and Rust\n\n#Python #Programming",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591063563723890690",
            "tweet_type": "Others",
            "created_at": "2022-11-11T13:41:28.000Z"
        },
        {
            "id": 188,
            "username": "alexxubyte",
            "tweet_id": "1591108882318864384",
            "tweet_text": "/1 How do we ensure \ud835\udc1c\ud835\udc28\ud835\udc26\ud835\udc29\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc1b\ud835\udc22\ud835\udc25\ud835\udc22\ud835\udc2d\ud835\udc32 when performing \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a \ud835\udc26\ud835\udc22\ud835\udc20\ud835\udc2b\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27?\n\nThe diagram below shows how Apache Avro manages the schema evolution during data migration. https://t.co/dTZY7QRx2W",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhTBF6EVsAoAB9i.jpg\"]",
            "tweet_conversation_id": "1591108882318864384",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-11T16:41:33.000Z"
        },
        {
            "id": 187,
            "username": "alexxubyte",
            "tweet_id": "1591108886685134850",
            "tweet_text": "/2 Avro was started in 2009, initially as a subproject of Apache Hadoop to address Thrift\u2019s limitation in Hadoop use cases. Avro is mainly used for two things: Data serialization and RPC.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591108882318864384",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-11T16:41:34.000Z"
        },
        {
            "id": 186,
            "username": "alexxubyte",
            "tweet_id": "1591108889226883078",
            "tweet_text": "/3 Key points in the diagram:\n\n\ud83d\udd39We can export the data to \ud835\udc28\ud835\udc1b\ud835\udc23\ud835\udc1e\ud835\udc1c\ud835\udc2d \ud835\udc1c\ud835\udc28\ud835\udc27\ud835\udc2d\ud835\udc1a\ud835\udc22\ud835\udc27\ud835\udc1e\ud835\udc2b \ud835\udc1f\ud835\udc22\ud835\udc25\ud835\udc1e\ud835\udc2c, where schema sits together with the data blocks. Avro \ud835\udc1d\ud835\udc32\ud835\udc27\ud835\udc1a\ud835\udc26\ud835\udc22\ud835\udc1c\ud835\udc1a\ud835\udc25\ud835\udc25\ud835\udc32 generates the schemas based on the columns, so if the schema is changed, a new schema is generated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591108882318864384",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-11T16:41:35.000Z"
        },
        {
            "id": 185,
            "username": "alexxubyte",
            "tweet_id": "1591108891789602817",
            "tweet_text": "/4 \ud83d\udd39When the exported files are loaded into another data storage (for example, teradata), anyone can read the schema and know how to read the data. The old data and new data can be successfully migrated to the new database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591108882318864384",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-11T16:41:35.000Z"
        },
        {
            "id": 184,
            "username": "alexxubyte",
            "tweet_id": "1591108894343933958",
            "tweet_text": "/5 Unlike gRPC or Thrift, which statically generate schemas, Avro makes the data migration process easier.\n\n\ud83d\udc49 Over to you: There are so many file formats for big data. Avro vs Parquet vs JSON vs XML vs Protobuf vs ORC. Do you know the differences?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591108882318864384",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-11T16:41:36.000Z"
        },
        {
            "id": 512,
            "username": "bascodes",
            "tweet_id": "1591113775934935040",
            "tweet_text": "If Twitter goes bankrupt\ud83d\udd25, where do I find all of you amazing people? \ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591113775934935040",
            "tweet_type": "Others",
            "created_at": "2022-11-11T17:01:00.000Z"
        },
        {
            "id": 1476,
            "username": "testdrivenio",
            "tweet_id": "1591121080873164800",
            "tweet_text": "Python clean code tip:\n\nUse max() with the key argument to get an object with max value on the attribute\n\n\ud83d\udc47 https://t.co/7ngFg1igL8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhTMMG0VsAEh6zW.png\"]",
            "tweet_conversation_id": "1591121080873164800",
            "tweet_type": "Python tips",
            "created_at": "2022-11-11T17:30:01.000Z"
        },
        {
            "id": 511,
            "username": "bascodes",
            "tweet_id": "1591122427576471553",
            "tweet_text": "In some coffee chats \u2615\ufe0f, some felt discouraged about their tech career in light of recent layoffs at Twitter, Meta, and others. \ud83d\udcc9\n\nWe might have seen crazy valuations and exaggerations, but the software industry will survive and come back stronger than ever before. Why? \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591122427576471553",
            "tweet_type": "Others",
            "created_at": "2022-11-11T17:35:23.000Z"
        },
        {
            "id": 510,
            "username": "bascodes",
            "tweet_id": "1591122429908512768",
            "tweet_text": "Older people are reminded of the 2000 dot com bubble. People are warning for 14 years\n\nhttps://t.co/FeS6WUDnwz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591122427576471553",
            "tweet_type": "Others",
            "created_at": "2022-11-11T17:35:23.000Z"
        },
        {
            "id": 509,
            "username": "bascodes",
            "tweet_id": "1591122432206999552",
            "tweet_text": "Every new technology comes with exaggerated expectations. We've seen that for the personal computer, the internet, and now for things like AI/ML/...\n\nSome of them stick, and some won't\u2026",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591122427576471553",
            "tweet_type": "Others",
            "created_at": "2022-11-11T17:35:24.000Z"
        },
        {
            "id": 508,
            "username": "bascodes",
            "tweet_id": "1591122434870358016",
            "tweet_text": "However, the increasing effects of software in general and digital processes, in particular, will continue to evolve.\n\nThe situation we're in now is not a crisis of tech but rather a complex economic situation in all industries",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591122427576471553",
            "tweet_type": "Others",
            "created_at": "2022-11-11T17:35:24.000Z"
        },
        {
            "id": 507,
            "username": "bascodes",
            "tweet_id": "1591122437168828416",
            "tweet_text": "So, when the economy will be back, then tech will be \"back\", too. Don't quote me on that but I even believe that tech will be least affected by the current situation in general (although it can hit individual companies very hard).\n\nLet's see how this statement will age.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591122427576471553",
            "tweet_type": "Others",
            "created_at": "2022-11-11T17:35:25.000Z"
        },
        {
            "id": 506,
            "username": "bascodes",
            "tweet_id": "1591122440066695168",
            "tweet_text": "Anyway, what I want you to take away is that it is still worth pursuing your dream career in tech and investing in yourself and your skills. It will pay off.\n\nYou can do it! \ud83d\udcaa\n\n#100Devs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591122427576471553",
            "tweet_type": "Others",
            "created_at": "2022-11-11T17:35:25.000Z"
        },
        {
            "id": 505,
            "username": "bascodes",
            "tweet_id": "1591146895459684366",
            "tweet_text": "11/11/22",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591146895459684366",
            "tweet_type": "Others",
            "created_at": "2022-11-11T19:12:36.000Z"
        },
        {
            "id": 504,
            "username": "bascodes",
            "tweet_id": "1591356454904418304",
            "tweet_text": "What are your plans for the weekend?\nI will rest and recharge!\n\ud83e\udeab\u27a1\ufe0f\ud83d\udd0b",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591356454904418304",
            "tweet_type": "Others",
            "created_at": "2022-11-12T09:05:19.000Z"
        },
        {
            "id": 1475,
            "username": "testdrivenio",
            "tweet_id": "1591452060226318337",
            "tweet_text": "Just updated the Real-Time Taxi App with Django Channels and Angular course! \ud83d\ude80\n\n\ud83d\udd38Changelog: https://t.co/dzJMxCTxT1\n\ud83d\udd38Code changes: https://t.co/JL5KNVQPCC\n\ud83d\udd38Course: https://t.co/pNGrVOTZI0\n\n#Django #Angular #Docker \ud83d\udc0d \ud83d\udc33",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591452060226318337",
            "tweet_type": "Others",
            "created_at": "2022-11-12T15:25:13.000Z"
        },
        {
            "id": 183,
            "username": "alexxubyte",
            "tweet_id": "1591468420498804736",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39 TCP/IP encapsulation\n\ud83d\udd39 How does PING work\n\ud83d\udd39 Non-functional requirements\n\ud83d\udd39 SQL tips\n\ud83d\udd39 SSO (YouTube video)\n\nSubscribe to our weekly newsletter to learn something new every week:\nhttps://t.co/dkjDPxrTOt https://t.co/A0ESVjlGQg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhYIF7tUoAAVjaA.jpg\"]",
            "tweet_conversation_id": "1591468420498804736",
            "tweet_type": "Others",
            "created_at": "2022-11-12T16:30:14.000Z"
        },
        {
            "id": 1474,
            "username": "testdrivenio",
            "tweet_id": "1591483468256784384",
            "tweet_text": "Python clean code tip:\n\nChange your module to a package with multiple modules as the complexity and code grows\n\nYou can do that without breaking imports\n\n\ud83d\udc47 https://t.co/hSoO9c0wBo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhYVx1hVUAAZDur.png\"]",
            "tweet_conversation_id": "1591483468256784384",
            "tweet_type": "Python tips",
            "created_at": "2022-11-12T17:30:01.000Z"
        },
        {
            "id": 503,
            "username": "bascodes",
            "tweet_id": "1591710035159449601",
            "tweet_text": "I will start organizing my life in Jira and Confluence\n\nAm I crazy?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591710035159449601",
            "tweet_type": "Others",
            "created_at": "2022-11-13T08:30:19.000Z"
        },
        {
            "id": 1473,
            "username": "testdrivenio",
            "tweet_id": "1591814788094590979",
            "tweet_text": "Introduction to Django Channels\n\nhttps://t.co/S6nShNNGRH \n\nLearn how to build a real-time application with Django Channels, focusing on how to integrate Django with Django Channels.\n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591814788094590979",
            "tweet_type": "Others",
            "created_at": "2022-11-13T15:26:34.000Z"
        },
        {
            "id": 1472,
            "username": "testdrivenio",
            "tweet_id": "1591845854780219393",
            "tweet_text": "Python clean test tip:\n\nClean up resources needed for test after the pytest session is finished -- i.e., drop test database, remove files added to the file system.\n\n\ud83d\udc47 https://t.co/gxGVq49tJW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhdfXhOUYAAUBfA.png\"]",
            "tweet_conversation_id": "1591845854780219393",
            "tweet_type": "Python tips",
            "created_at": "2022-11-13T17:30:01.000Z"
        },
        {
            "id": 182,
            "username": "alexxubyte",
            "tweet_id": "1591981763882254336",
            "tweet_text": "Android users face a huge issue with latency. Why is it not fixed? 2 reasons: 1) CEOs don\u2019t use Android. 2) Slow build-up. After 100 features, the payload is large. Rendering is slow. It's good to raise awareness.\n\nDisclaimer: fig shows a general perf issue. Not real Twitter data https://t.co/wp2jmvQIkI https://t.co/KRoKXind9A",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhfauUUVIAAFw67.jpg\"]",
            "tweet_conversation_id": "1591981763882254336",
            "tweet_type": "Others",
            "created_at": "2022-11-14T02:30:04.000Z"
        },
        {
            "id": 502,
            "username": "bascodes",
            "tweet_id": "1592071085897715712",
            "tweet_text": "Here is the story behind the story of this little experiment:\n\nIt's about accountability \ud83d\udc47\n\nhttps://t.co/C7idhoDBDg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592071085897715712",
            "tweet_type": "Others",
            "created_at": "2022-11-14T08:25:00.000Z"
        },
        {
            "id": 501,
            "username": "bascodes",
            "tweet_id": "1592071088762392576",
            "tweet_text": "To make big changes, you have to start with the little things. So I manage big goals and the steps to get there like a business\nGet your partner, your family, and your friends involved!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592071085897715712",
            "tweet_type": "Others",
            "created_at": "2022-11-14T08:25:01.000Z"
        },
        {
            "id": 500,
            "username": "bascodes",
            "tweet_id": "1592071091576610818",
            "tweet_text": "We serve each other as sparring partners for planning, but also as accountability partners for implementation\nThis way we reach our goals faster and can be proud of it\nAs an additional benefit, you get your head free from everyday duties that are also simply part of the \"project\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592071085897715712",
            "tweet_type": "Others",
            "created_at": "2022-11-14T08:25:02.000Z"
        },
        {
            "id": 499,
            "username": "bascodes",
            "tweet_id": "1592071094475067392",
            "tweet_text": "Putting it that way, Jira was then the obvious choice: all of us were already using it. It may be overkill and maybe not the best choice, but it works for everyone",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592071085897715712",
            "tweet_type": "Others",
            "created_at": "2022-11-14T08:25:02.000Z"
        },
        {
            "id": 498,
            "username": "bascodes",
            "tweet_id": "1592071097281048577",
            "tweet_text": "tldr; You will get a lot of benefits from not only sharing your goals with your partner, your family, and friends but also from planning together!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592071085897715712",
            "tweet_type": "Others",
            "created_at": "2022-11-14T08:25:03.000Z"
        },
        {
            "id": 497,
            "username": "bascodes",
            "tweet_id": "1592071299966590976",
            "tweet_text": "https://t.co/52XhDtGJ0a",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591710035159449601",
            "tweet_type": "Others",
            "created_at": "2022-11-14T08:25:51.000Z"
        },
        {
            "id": 496,
            "username": "bascodes",
            "tweet_id": "1592139031407517696",
            "tweet_text": "For Python: PyCharm or VSCode? \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592139031407517696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:55:00.000Z"
        },
        {
            "id": 495,
            "username": "bascodes",
            "tweet_id": "1592178657464057858",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1#Python is a very expressive language. So you can simplify your code a lot if you know about syntax and built-in functionality.\n\nHere are some examples of writing more pythonic code \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592178657464057858",
            "tweet_type": "Python tips",
            "created_at": "2022-11-14T15:32:27.000Z"
        },
        {
            "id": 494,
            "username": "bascodes",
            "tweet_id": "1592178659502456832",
            "tweet_text": "Use \ud835\ude8a\ud835\ude95\ud835\ude95 and \ud835\ude8a\ud835\ude97\ud835\udea2 if you want to check if some criteria match all/any elements of a list rather than writing a loop https://t.co/fWt0LnfLmP",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhho2MVWYAELaQk.jpg\"]",
            "tweet_conversation_id": "1592178657464057858",
            "tweet_type": "Others",
            "created_at": "2022-11-14T15:32:28.000Z"
        },
        {
            "id": 493,
            "username": "bascodes",
            "tweet_id": "1592178661733564420",
            "tweet_text": "Use \ud835\ude8d\ud835\ude8e\ud835\ude8f\ud835\ude8a\ud835\ude9e\ud835\ude95\ud835\ude9d\ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9d to create \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9ds in a loop rather than checking for missing keys manually https://t.co/1EJ91JnvYu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhhpO3BXwAA3803.jpg\"]",
            "tweet_conversation_id": "1592178657464057858",
            "tweet_type": "Others",
            "created_at": "2022-11-14T15:32:28.000Z"
        },
        {
            "id": 492,
            "username": "bascodes",
            "tweet_id": "1592178663684214787",
            "tweet_text": "Use list comprehensions to create simple loops in just one line of code https://t.co/cgeroy1APc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhhpfMdWIAEWzod.jpg\"]",
            "tweet_conversation_id": "1592178657464057858",
            "tweet_type": "Others",
            "created_at": "2022-11-14T15:32:29.000Z"
        },
        {
            "id": 491,
            "username": "bascodes",
            "tweet_id": "1592178665986686979",
            "tweet_text": "Access elements of a \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9d with .\ud835\ude90\ud835\ude8e\ud835\ude9d if you don't know whether they are present. Don't use \ud835\ude9d\ud835\ude9b\ud835\udea2/\ud835\ude8e\ud835\udea1\ud835\ude8c\ud835\ude8e\ud835\ude99\ud835\ude9d for these cases https://t.co/Sed6558mFV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhhpsCDWIAAQlnN.jpg\"]",
            "tweet_conversation_id": "1592178657464057858",
            "tweet_type": "Others",
            "created_at": "2022-11-14T15:32:29.000Z"
        },
        {
            "id": 1471,
            "username": "testdrivenio",
            "tweet_id": "1592192654380785664",
            "tweet_text": "Flask Stripe Tutorial\n\nhttps://t.co/NqVoaMoTNI\n\nShows how to add Stripe Checkout to a Flask application for accepting one-time payments.\n\n#Flask #Payments @StripeDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592192654380785664",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:28:04.000Z"
        },
        {
            "id": 181,
            "username": "alexxubyte",
            "tweet_id": "1592193892530589696",
            "tweet_text": "How is data sent over the network? Why do we need so many layers in the OSI model?\n\nThe diagram below shows how data is encapsulated and de-encapsulated when transmitting over the network.\n\n1/9 https://t.co/KU2d2nlWRt",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhib58rVQAETEQI.jpg\"]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:00.000Z"
        },
        {
            "id": 180,
            "username": "alexxubyte",
            "tweet_id": "1592193902429163522",
            "tweet_text": "\ud83d\udd39 Step 1: When Device A sends data to Device B over the network via the HTTP protocol, it is first added an HTTP header at the application layer.\n\n2/9 https://t.co/e5YDkJ9sQv",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhib6aEVUAAwFlL.jpg\"]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:02.000Z"
        },
        {
            "id": 179,
            "username": "alexxubyte",
            "tweet_id": "1592193911404888064",
            "tweet_text": "\ud83d\udd39 Step 2: Then a TCP or a UDP header is added to the data. It is encapsulated into TCP segments at the transport layer. The header contains the source port, destination port, and sequence number.\n\n3/9 https://t.co/aJtIygAvi0",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhib694UoAAX-rw.jpg\"]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:04.000Z"
        },
        {
            "id": 178,
            "username": "alexxubyte",
            "tweet_id": "1592193920162635776",
            "tweet_text": "\ud83d\udd39 Step 3: The segments are then encapsulated with an IP header at the network layer. The IP header contains the source/destination IP addresses.\n\n4/9 https://t.co/zbpdnXwvxu",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhib7eYUUAA-Tsw.jpg\"]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:06.000Z"
        },
        {
            "id": 177,
            "username": "alexxubyte",
            "tweet_id": "1592193929566294017",
            "tweet_text": "\ud83d\udd39 Step 4: The IP datagram is added a MAC header at the data link layer, with source/destination MAC addresses.\n\n\ud83d\udd39 Step 5: The encapsulated frames are sent to the physical layer and sent over the network in binary bits.\n\n5/9 https://t.co/jn7TfqEU9N",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhib7_FVsAIAL75.jpg\"]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:08.000Z"
        },
        {
            "id": 176,
            "username": "alexxubyte",
            "tweet_id": "1592193938974158854",
            "tweet_text": "\ud83d\udd39 Steps 6-10: When Device B receives the bits from the network, it performs the de-encapsulation process, which is a reverse processing of the encapsulation process. The headers are removed layer by layer, and eventually, Device B can read the data.\n\n6/9 https://t.co/b7fDb54jMG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhib8hlUoAEPq1U.jpg\"]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:11.000Z"
        },
        {
            "id": 175,
            "username": "alexxubyte",
            "tweet_id": "1592193947664687104",
            "tweet_text": "We need layers in the network model because each layer focuses on its own responsibilities. Each layer can rely on the headers for processing instructions and does not need to know the meaning of the data from the last layer.\n\n7/9 https://t.co/IsIxvCKLkG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhib9EgUUAAKWum.jpg\"]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:13.000Z"
        },
        {
            "id": 174,
            "username": "alexxubyte",
            "tweet_id": "1592193951603122177",
            "tweet_text": "\ud83d\udc49 Over to you: Do you know which layer is responsible for resending lost data?\n\n8/9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:14.000Z"
        },
        {
            "id": 173,
            "username": "alexxubyte",
            "tweet_id": "1592193954103013376",
            "tweet_text": "Subscribe to our weekly newsletter to learn something new every week:\n\nhttps://t.co/dkjDPxrTOt\n\n9/9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T16:33:14.000Z"
        },
        {
            "id": 1470,
            "username": "testdrivenio",
            "tweet_id": "1592208242628698112",
            "tweet_text": "Python clean test tip:\n\nUse pytest's parametrize decorator when you need multiple cases to prove a single behavior.\n\n\ud83d\udc47 https://t.co/qSmrJPzx8i",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhio9QYVIAAOTW0.png\"]",
            "tweet_conversation_id": "1592208242628698112",
            "tweet_type": "Python tips",
            "created_at": "2022-11-14T17:30:01.000Z"
        },
        {
            "id": 172,
            "username": "alexxubyte",
            "tweet_id": "1592223458716684291",
            "tweet_text": "We will turn this into a YouTube video. Subscribe here so you won't miss it: https://t.co/tbxD2fpOZJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592193892530589696",
            "tweet_type": "Others",
            "created_at": "2022-11-14T18:30:29.000Z"
        },
        {
            "id": 171,
            "username": "alexxubyte",
            "tweet_id": "1592368431432896512",
            "tweet_text": "Since RPC has become a hot topic, let's briefly review its history. \n\nThe diagram below illustrates the API timeline and API style comparison.\n \nOver time, different API styles are released. Each of them has its own patterns of standardizing data exchange. https://t.co/GpdmIUufgY https://t.co/VWoG92VDSt",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhk6JN0VsAEe42W.jpg\"]",
            "tweet_conversation_id": "1592368431432896512",
            "tweet_type": "Others",
            "created_at": "2022-11-15T04:06:33.000Z"
        },
        {
            "id": 1469,
            "username": "testdrivenio",
            "tweet_id": "1592512988501929986",
            "tweet_text": "Pagination in Django\n\nhttps://t.co/0JmYBPS1Ap\n\nLooks at how to add pagination to a Django project.\n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592512988501929986",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:40:58.000Z"
        },
        {
            "id": 490,
            "username": "bascodes",
            "tweet_id": "1592550492646871042",
            "tweet_text": "Thank you for your trust!\n\nAlmost 400 people have already signed up for my newsletter! \ud83d\ude80\ud83d\udce7\n\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592550492646871042",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:10:00.000Z"
        },
        {
            "id": 170,
            "username": "alexxubyte",
            "tweet_id": "1592555354688172034",
            "tweet_text": "YouTube channel milestone: 200,000.\n\nHere are the 10 most popular ones: \ud83d\udc47\n\nSubscribe here: https://t.co/tbxD2f7FLB\n\n1 of 12 https://t.co/VKbZQRnF9u",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnkpuKUUAIHtcJ.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-15T16:29:19.000Z"
        },
        {
            "id": 169,
            "username": "alexxubyte",
            "tweet_id": "1592555363546542080",
            "tweet_text": "System Design: Why is Kafka fast?\nhttps://t.co/Qz3Pa9PBBc\n\n2 of 12 https://t.co/P7gedyduwf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnkqMrUcAAF7Zk.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:21.000Z"
        },
        {
            "id": 168,
            "username": "alexxubyte",
            "tweet_id": "1592555375571521541",
            "tweet_text": "HTTP/1 to HTTP/2 to HTTP/3\nhttps://t.co/j9lbyDjmOU\n\n3 of 12 https://t.co/RRQivfLa7I",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnkqwcUoAALBfV.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:24.000Z"
        },
        {
            "id": 167,
            "username": "alexxubyte",
            "tweet_id": "1592555384555782144",
            "tweet_text": "Latency Numbers Programmer Should Know\nhttps://t.co/nDfMpKWhkX\n\n4 of 12 https://t.co/PYVnjIB7vp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnkrfJUUAAkzNG.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:26.000Z"
        },
        {
            "id": 166,
            "username": "alexxubyte",
            "tweet_id": "1592555393196036097",
            "tweet_text": "What Are Microservices Really All About?\nhttps://t.co/5tNV7rWy4g\n\n5 of 12 https://t.co/ydOLULF6va",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhnkr9yUUAAZKQ3.png\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:28.000Z"
        },
        {
            "id": 165,
            "username": "alexxubyte",
            "tweet_id": "1592555403476246528",
            "tweet_text": "System Design: Why is single-threaded Redis so fast?\nhttps://t.co/EKqSfmf6a4\n\n6 of 12 https://t.co/VgftMld2JE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnkshPVEAA4bGa.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:31.000Z"
        },
        {
            "id": 164,
            "username": "alexxubyte",
            "tweet_id": "1592555411722227714",
            "tweet_text": "How Does Apple/Google Pay Work?\nhttps://t.co/nwkF1vjL29\n\n7 of 12 https://t.co/CuoUR7gwEY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnktDvUUAAxy-m.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:33.000Z"
        },
        {
            "id": 163,
            "username": "alexxubyte",
            "tweet_id": "1592555419280367616",
            "tweet_text": "FAANG System Design Interview: Design A Location Based Service (Yelp, Google Places)\nhttps://t.co/2mYAF4mxSr\n\n8 of 12 https://t.co/Bo5mMWPoQ0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnktibVUAAyQAy.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:34.000Z"
        },
        {
            "id": 162,
            "username": "alexxubyte",
            "tweet_id": "1592555427937427456",
            "tweet_text": "What happens when you type a URL into your browser?\nhttps://t.co/4N0ZVZhz2r\n\n9 of 12 https://t.co/tWJvZml8q4",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhnkt96VQAEaYgu.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:36.000Z"
        },
        {
            "id": 161,
            "username": "alexxubyte",
            "tweet_id": "1592555436007227393",
            "tweet_text": "What Is REST API? Examples And How To Use It\nhttps://t.co/tDmb66Dbll\n\n10 of 12 https://t.co/TnlC502SUk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnkufwVUAAAeeP.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:38.000Z"
        },
        {
            "id": 160,
            "username": "alexxubyte",
            "tweet_id": "1592555444324573184",
            "tweet_text": "Consistent Hashing | Algorithms You Should Know #1\nhttps://t.co/dH7qeBmOSF\n\n11 of 12 https://t.co/cMmMvRV9Pb",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhnku6fUUAAgWn1.jpg\"]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:40.000Z"
        },
        {
            "id": 159,
            "username": "alexxubyte",
            "tweet_id": "1592555447562645506",
            "tweet_text": "I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can:\n\n12 of 12 https://t.co/ov1gHKGp6i",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592555354688172034",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:29:41.000Z"
        },
        {
            "id": 489,
            "username": "bascodes",
            "tweet_id": "1592565987748229120",
            "tweet_text": "Ok, next level: vim or emacs? https://t.co/xe7kSG4EK5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592565987748229120",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:11:34.000Z"
        },
        {
            "id": 488,
            "username": "bascodes",
            "tweet_id": "1592566280640659456",
            "tweet_text": "https://t.co/frI9eeMaQN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592139031407517696",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:12:44.000Z"
        },
        {
            "id": 1468,
            "username": "testdrivenio",
            "tweet_id": "1592570630804688896",
            "tweet_text": "Python clean test tip:\n\nAim for a single assert per test. Tests will be more readable, and it's easier to locate a defect when a test is failing.\n\n\ud83d\udc47 https://t.co/BHetDfYby5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnyjBxVQAA4uhh.png\"]",
            "tweet_conversation_id": "1592570630804688896",
            "tweet_type": "Python tips",
            "created_at": "2022-11-15T17:30:01.000Z"
        },
        {
            "id": 487,
            "username": "bascodes",
            "tweet_id": "1592597049584758784",
            "tweet_text": "Thanks, 4k! \ud83e\udd73",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592597049584758784",
            "tweet_type": "Others",
            "created_at": "2022-11-15T19:15:00.000Z"
        },
        {
            "id": 158,
            "username": "alexxubyte",
            "tweet_id": "1592722380694368256",
            "tweet_text": "Twitter is turning down 80% of its microservices. Will this cause a massive outage? Microservices are built to be resilient, but with complex dependencies, it\u2019s hard to say. What do you think?\n\nIf you are unfamiliar with microservice, watch here: https://t.co/5tNV7rFv2g https://t.co/E6zQ4IupT2",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhp8Mn9VEAAOQJj.png\"]",
            "tweet_conversation_id": "1592722380694368256",
            "tweet_type": "Others",
            "created_at": "2022-11-16T03:33:01.000Z"
        },
        {
            "id": 486,
            "username": "bascodes",
            "tweet_id": "1592832570441752577",
            "tweet_text": "Do you reply to engagement tweets?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592832570441752577",
            "tweet_type": "Others",
            "created_at": "2022-11-16T10:50:52.000Z"
        },
        {
            "id": 485,
            "username": "bascodes",
            "tweet_id": "1592832623977455616",
            "tweet_text": "Sorry couldn\u2019t resist \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592832570441752577",
            "tweet_type": "Others",
            "created_at": "2022-11-16T10:51:05.000Z"
        },
        {
            "id": 484,
            "username": "bascodes",
            "tweet_id": "1592856768451051522",
            "tweet_text": "Can\u2019t wait to set it up! https://t.co/uo4Tsqs61W",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhr2yV7WAAECxEN.jpg\"]",
            "tweet_conversation_id": "1592856768451051522",
            "tweet_type": "Others",
            "created_at": "2022-11-16T12:27:02.000Z"
        },
        {
            "id": 483,
            "username": "bascodes",
            "tweet_id": "1592866084977545217",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Want even more clean code tips for #Python?\n\nLet's have a look at how we could get rid of \ud835\ude92\ud835\ude8f statements\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592866084977545217",
            "tweet_type": "Python tips",
            "created_at": "2022-11-16T13:04:03.000Z"
        },
        {
            "id": 482,
            "username": "bascodes",
            "tweet_id": "1592866088291008512",
            "tweet_text": "If your function checks for a boolean, you can return it directly rather than building an \ud835\ude92\ud835\ude8f/\ud835\ude8e\ud835\ude95\ud835\ude9c\ud835\ude8e block around it: https://t.co/RMyR00e4AK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhr-W-EX0Awx4ii.jpg\"]",
            "tweet_conversation_id": "1592866084977545217",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:04:04.000Z"
        },
        {
            "id": 481,
            "username": "bascodes",
            "tweet_id": "1592866091960700928",
            "tweet_text": "If you want to translate one thing to another thing, you can use \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9ds instead of  \ud835\ude92\ud835\ude8f/\ud835\ude8e\ud835\ude95\ud835\ude9c\ud835\ude8e blocks: https://t.co/5mK8ueqrFV",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhr-jqZWQAExVRC.jpg\"]",
            "tweet_conversation_id": "1592866084977545217",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:04:05.000Z"
        },
        {
            "id": 480,
            "username": "bascodes",
            "tweet_id": "1592866095941271557",
            "tweet_text": "Advanced level: Use \ud835\ude96\ud835\ude8a\ud835\ude9d\ud835\ude8c\ud835\ude91/\ud835\ude8c\ud835\ude8a\ud835\ude9c\ud835\ude8e to check if your data follows a specific format https://t.co/s1aTP6fSyJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhr-7tfXoAEdWU0.jpg\"]",
            "tweet_conversation_id": "1592866084977545217",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:04:05.000Z"
        },
        {
            "id": 479,
            "username": "bascodes",
            "tweet_id": "1592870512522579973",
            "tweet_text": "Here are some more tips:\nhttps://t.co/hNRRADZeab",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592178657464057858",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:21:38.000Z"
        },
        {
            "id": 157,
            "username": "alexxubyte",
            "tweet_id": "1592921944818491394",
            "tweet_text": "Code First v.s. API First - A change of software development philosophy.\n\nThe diagram below shows the differences between code-first development and API-first development. Why do we want to consider API first design?\n\n1 of 10 https://t.co/HKgSGYLOf9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhsyEMEUcAMbDSI.jpg\"]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:01.000Z"
        },
        {
            "id": 156,
            "username": "alexxubyte",
            "tweet_id": "1592921948144574464",
            "tweet_text": "\ud83d\udd39Microservices increase system complexity\n\nWe have separate services to serve different functions of the system. While this kind of architecture facilitates decoupling and segregation of duty, we need to handle the various communications among services.\n\n2 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:02.000Z"
        },
        {
            "id": 155,
            "username": "alexxubyte",
            "tweet_id": "1592921950690557952",
            "tweet_text": "It is better to think through the system's complexity before writing the code and carefully defining the boundaries of the services.\n\n3 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:02.000Z"
        },
        {
            "id": 154,
            "username": "alexxubyte",
            "tweet_id": "1592921953366511616",
            "tweet_text": "\ud83d\udd39Separate functional teams need to speak the same language\n\nThe dedicated functional teams are only responsible for their own components and services. It is recommended that the organization speak the same language via API design.\n\n4 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:03.000Z"
        },
        {
            "id": 153,
            "username": "alexxubyte",
            "tweet_id": "1592921955874656256",
            "tweet_text": "\ud83d\udd39Improve software quality and developer productivity\n\nSince we have ironed out most of the uncertainties when the project starts, the overall development process is smoother, and the software quality is greatly improved.\n\n5 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:03.000Z"
        },
        {
            "id": 152,
            "username": "alexxubyte",
            "tweet_id": "1592921958366081024",
            "tweet_text": "Developers are happy about the process as well because they can focus on functional development instead of negotiating sudden changes.\n\nThe possibility of having surprises toward the end of the project lifecycle is reduced.\n\n6 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:04.000Z"
        },
        {
            "id": 151,
            "username": "alexxubyte",
            "tweet_id": "1592921960966590464",
            "tweet_text": "Because we have designed the API first, the tests can be designed while the code is being developed. In a way, we also have TDD (Test Driven Design) when using API first development.\n\n7 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:05.000Z"
        },
        {
            "id": 150,
            "username": "alexxubyte",
            "tweet_id": "1592921963529326592",
            "tweet_text": "\ud83d\udc49 Over to you: Do you use code-first or API-first development in your work?\n\n8 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:05.000Z"
        },
        {
            "id": 149,
            "username": "alexxubyte",
            "tweet_id": "1592921965982928896",
            "tweet_text": "Good read: https://t.co/hxZb53n9ZQ\n\n9 of 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:06.000Z"
        },
        {
            "id": 148,
            "username": "alexxubyte",
            "tweet_id": "1592921968562475008",
            "tweet_text": "I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can:\n\n10 of 10 https://t.co/hNyni0fuLd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592921944818491394",
            "tweet_type": "Others",
            "created_at": "2022-11-16T16:46:07.000Z"
        },
        {
            "id": 478,
            "username": "bascodes",
            "tweet_id": "1592927083621412864",
            "tweet_text": "New in: @bascodes action figures \ud83d\ude02 https://t.co/ewzBZt8Fat",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhs2RfzXgAIMHSF.jpg\"]",
            "tweet_conversation_id": "1592927083621412864",
            "tweet_type": "Others",
            "created_at": "2022-11-16T17:06:26.000Z"
        },
        {
            "id": 1467,
            "username": "testdrivenio",
            "tweet_id": "1592933019446177792",
            "tweet_text": "Python clean test tip:\n\nStructure your tests in an Arrange-Act-Assert way\n\n- Arrange - set-up logic\n- Act - invokes the system you're about to test\n- Assert - verifies that the action of the system under test behaves as expected\n\n\ud83d\udc47 https://t.co/zkoKEXEEYs",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhs8I1FVIAAzRJN.png\"]",
            "tweet_conversation_id": "1592933019446177792",
            "tweet_type": "Python tips",
            "created_at": "2022-11-16T17:30:01.000Z"
        },
        {
            "id": 477,
            "username": "bascodes",
            "tweet_id": "1592992022587023361",
            "tweet_text": "No Python content for a while\n\nI have things to do in Hollywood \ud83c\udfac\ud83c\udf7f\n\nThanks, https://t.co/89z4qVo4jR by @dannypostmaa https://t.co/WGBNLYwSs6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhtxwI0XkAAbNib.jpg\", \"https://pbs.twimg.com/media/FhtxwI1XEAU347b.jpg\", \"https://pbs.twimg.com/media/FhtxwI1WQAYcFqu.jpg\", \"https://pbs.twimg.com/media/FhtxwI1X0AMXsqH.jpg\"]",
            "tweet_conversation_id": "1592992022587023361",
            "tweet_type": "Others",
            "created_at": "2022-11-16T21:24:29.000Z"
        },
        {
            "id": 476,
            "username": "bascodes",
            "tweet_id": "1593146338492882944",
            "tweet_text": "What do you like most about the place where you live? \ud83d\uddfa\ufe0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593146338492882944",
            "tweet_type": "Others",
            "created_at": "2022-11-17T07:37:40.000Z"
        },
        {
            "id": 475,
            "username": "bascodes",
            "tweet_id": "1593188793338974209",
            "tweet_text": "Did I say no Python content?\n\nNo! #ThisWeekInPython is due tomorrow! Do you have any suggestions for interesting #Python articles and projects? \n\nShare them here! \ud83d\udc47 https://t.co/5z72qEELPN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593188793338974209",
            "tweet_type": "Others",
            "created_at": "2022-11-17T10:26:23.000Z"
        },
        {
            "id": 1466,
            "username": "testdrivenio",
            "tweet_id": "1593265864400420865",
            "tweet_text": "Understanding the Application and Request Contexts in Flask \n\nhttps://t.co/QddEG9AMyT \n\nProvides clarity on how the Application and Request contexts work in Flask.\n\nby @patkennedy79\n\n#Flask #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593265864400420865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T15:32:38.000Z"
        },
        {
            "id": 147,
            "username": "alexxubyte",
            "tweet_id": "1593282096692199424",
            "tweet_text": "What is SSO, or Single Sign-On?\n\nWith SSO, users can access many apps without having to log in each time.\n\nIn this video, we will talk about:\n\n- What is SSO\n- How it works\n- Common methods to implement SSO\n- SAML or OpenID\n\nWatch the whole video here: https://t.co/UaiMvihDoB https://t.co/KfzhtvhNBY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fhx5nzfUoAAfsUp.jpg\"]",
            "tweet_conversation_id": "1593282096692199424",
            "tweet_type": "Others",
            "created_at": "2022-11-17T16:37:08.000Z"
        },
        {
            "id": 1465,
            "username": "testdrivenio",
            "tweet_id": "1593295410919247873",
            "tweet_text": "Python clean test tip:\n\nHide irrelevant data for the test - with pytest you can use fixtures\n\nThis improves readability a lot\n\n\ud83d\udc47 https://t.co/F35vO2wiW5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhyFuxVVEAISc7F.png\"]",
            "tweet_conversation_id": "1593295410919247873",
            "tweet_type": "Python tips",
            "created_at": "2022-11-17T17:30:02.000Z"
        },
        {
            "id": 474,
            "username": "bascodes",
            "tweet_id": "1593340700430663680",
            "tweet_text": "It's one week after you amazing folks graduated from #100Devs \ud83d\udcaa\ud83d\ude80\ud83c\udf89\n\nFor those of you who have not landed a job, yet, would you like to have a short #coffeechat\u2615\ufe0f to discuss the next steps?\n\nDM me for the calendly link!\n\ncc @leonnoel",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593340700430663680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T20:30:00.000Z"
        },
        {
            "id": 146,
            "username": "alexxubyte",
            "tweet_id": "1593440352907644928",
            "tweet_text": "1/2 Not sure if Twitter is really going down, but just in case, this is my newsletter and LinkedIn: https://t.co/urop0Y1Rpz https://t.co/S9EqiCvvT6",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh0JScRVIAIjni1.jpg\"]",
            "tweet_conversation_id": "1593440352907644928",
            "tweet_type": "Others",
            "created_at": "2022-11-18T03:05:59.000Z"
        },
        {
            "id": 145,
            "username": "alexxubyte",
            "tweet_id": "1593440354237177856",
            "tweet_text": "2/2 and my LinkedIn: https://t.co/1UXoyavCAf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593440352907644928",
            "tweet_type": "Others",
            "created_at": "2022-11-18T03:05:59.000Z"
        },
        {
            "id": 473,
            "username": "bascodes",
            "tweet_id": "1593532238376869888",
            "tweet_text": "It's Friday again! \ud83c\udf89\n\nHere is something for your weekend reading list: #ThisWeekInPython\ud83d\udc0d\n\nHave a look \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:06.000Z"
        },
        {
            "id": 472,
            "username": "bascodes",
            "tweet_id": "1593532241212211200",
            "tweet_text": "Carefully exploring Rust as a Python developer \u2013\u00a0by @KarimJDDA\nhttps://t.co/xPwwzbhTD0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:07.000Z"
        },
        {
            "id": 471,
            "username": "bascodes",
            "tweet_id": "1593532244555169793",
            "tweet_text": "Write Chrome Extensions in Python \nhttps://t.co/hqfiFo18SE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:08.000Z"
        },
        {
            "id": 470,
            "username": "bascodes",
            "tweet_id": "1593532248380375042",
            "tweet_text": "How To Filter Django QuerySets \u2013 15 Examples For Beginners \u2013 by @aliceridgway404\nhttps://t.co/yZBY4JuEVX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:09.000Z"
        },
        {
            "id": 469,
            "username": "bascodes",
            "tweet_id": "1593532250909335553",
            "tweet_text": "Building Generator Pipelines in Python \u2013\u00a0by @Marcin__Kozak\nhttps://t.co/TmcWz529Ko",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:09.000Z"
        },
        {
            "id": 468,
            "username": "bascodes",
            "tweet_id": "1593532254214569984",
            "tweet_text": "Building TUIs with textual: first impressions \u2013\u00a0by @learn_byexample\nhttps://t.co/Wb2PECNYWK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:10.000Z"
        },
        {
            "id": 467,
            "username": "bascodes",
            "tweet_id": "1593532257217675264",
            "tweet_text": "pdfsyntax \u2013 A Python PDF parsing library to browse the internal structure of a PDF file\nhttps://t.co/gAt0OXbknS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:11.000Z"
        },
        {
            "id": 466,
            "username": "bascodes",
            "tweet_id": "1593532260682289152",
            "tweet_text": "videocr \u2013 Perform OCR upon entire videos to look for credentials or similar \u2013 by @cooperx86\nhttps://t.co/Sue6Vc3zXh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:12.000Z"
        },
        {
            "id": 465,
            "username": "bascodes",
            "tweet_id": "1593532265061040128",
            "tweet_text": "taskiq \u2013\u00a0Distributed task queue with full async support \nhttps://t.co/VXFP6PdXSO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:13.000Z"
        },
        {
            "id": 464,
            "username": "bascodes",
            "tweet_id": "1593532267812605954",
            "tweet_text": "sunfish \u2013 A Python Chess Engine in 111 lines of code \u2013 by @thomasahle\nhttps://t.co/b4BlT2s9Qz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:13.000Z"
        },
        {
            "id": 463,
            "username": "bascodes",
            "tweet_id": "1593532270610157569",
            "tweet_text": "typer \u2013\u00a0build great CLIs. Easy to code. Based on Python type hints \u2013 by @tiangolo\nhttps://t.co/gHzJHUHcGj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:14.000Z"
        },
        {
            "id": 462,
            "username": "bascodes",
            "tweet_id": "1593532272917061633",
            "tweet_text": "+++\nFollow #ThisWeekInPython on my blog, too! \ud83d\udc47\n+++\nhttps://t.co/KDhZ8l9O7N",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593532238376869888",
            "tweet_type": "Others",
            "created_at": "2022-11-18T09:11:14.000Z"
        },
        {
            "id": 461,
            "username": "bascodes",
            "tweet_id": "1593565922542977025",
            "tweet_text": "\u201cRumors of my death have been greatly exaggerated\u201d \u2014Twitter",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593565922542977025",
            "tweet_type": "Others",
            "created_at": "2022-11-18T11:24:57.000Z"
        },
        {
            "id": 460,
            "username": "bascodes",
            "tweet_id": "1593591197292961794",
            "tweet_text": "Just in case it turns out otherwise, make sure to subscribe to my newsletter to stay in touch\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593565922542977025",
            "tweet_type": "Others",
            "created_at": "2022-11-18T13:05:23.000Z"
        },
        {
            "id": 459,
            "username": "bascodes",
            "tweet_id": "1593591644703555587",
            "tweet_text": "Is LinkedIn Twitter 2.0? \ud83d\udd74\ufe0f\n\nDrop your LinkedIn profile below \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593591644703555587",
            "tweet_type": "Others",
            "created_at": "2022-11-18T13:07:10.000Z"
        },
        {
            "id": 1464,
            "username": "testdrivenio",
            "tweet_id": "1593610254444634116",
            "tweet_text": "Asynchronous Tasks with Falcon and Celery\n\nhttps://t.co/c7nYshMzzQ\n\nLooks at how to- \n\n1\u20e3Integrate Celery with the Python-based Falcon web framework. \n2\u20e3Use Docker and Docker Compose to tie everything together\n3\u20e3Test the Celery tasks with unit &amp; integration tests\n\n#Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593610254444634116",
            "tweet_type": "Others",
            "created_at": "2022-11-18T14:21:07.000Z"
        },
        {
            "id": 144,
            "username": "alexxubyte",
            "tweet_id": "1593637888834473984",
            "tweet_text": "/1 One picture is worth more than a thousand words. In this post, we will take a look at what happens when Alice sends an \ud835\udc04\ud835\udc26\ud835\udc1a\ud835\udc22\ud835\udc25 to Bob. https://t.co/bJKQitkZpQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh29NoQVQAANot0.jpg\"]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:10:55.000Z"
        },
        {
            "id": 143,
            "username": "alexxubyte",
            "tweet_id": "1593637899936837634",
            "tweet_text": "/2 1. Alice logs in to her Outlook client, composes an email, and presses \u201csend\u201d. The email is sent to the Outlook mail server. The communication protocol between the Outlook client and mail server is SMTP. https://t.co/qJaCfGHYCj",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh29OJMVIAE3rzw.jpg\"]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:10:58.000Z"
        },
        {
            "id": 142,
            "username": "alexxubyte",
            "tweet_id": "1593637910359683072",
            "tweet_text": "/3 2. Outlook mail server queries the DNS (not shown in the diagram) to find the address of the recipient\u2019s SMTP server. In this case, it is Gmail\u2019s SMTP server. Next, it transfers the email to the Gmail mail server. The communication protocol between the mail servers is SMTP. https://t.co/uMbuOBUyFY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh29OxbVsAEW4P9.jpg\"]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:00.000Z"
        },
        {
            "id": 141,
            "username": "alexxubyte",
            "tweet_id": "1593637920266629122",
            "tweet_text": "/4 3. The Gmail server stores the email and makes it available to Bob, the recipient.\n\n4. Gmail client fetches new emails through the IMAP/POP server when Bob logs in to Gmail. https://t.co/iBFl96Sn5K",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh29PXIUcAIZep8.jpg\"]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:03.000Z"
        },
        {
            "id": 140,
            "username": "alexxubyte",
            "tweet_id": "1593637924007837696",
            "tweet_text": "/5 If you are unfamiliar with email protocols, here is a short summary:\n\nSMTP: Simple Mail Transfer Protocol (SMTP) is the standard protocol for sending emails from one mail server to another.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:04.000Z"
        },
        {
            "id": 139,
            "username": "alexxubyte",
            "tweet_id": "1593637926591598592",
            "tweet_text": "/6 The most popular protocols for retrieving emails are known as Post Office Protocol (POP) and the Internet Mail Access Protocol (IMAP).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:04.000Z"
        },
        {
            "id": 138,
            "username": "alexxubyte",
            "tweet_id": "1593637929011752960",
            "tweet_text": "/7 POP is a standard mail protocol to receive and download emails from a remote mail server to a local email client. Once emails are downloaded to your computer or phone, they are deleted from the email server, which means you can only access emails on one computer or phone.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:05.000Z"
        },
        {
            "id": 137,
            "username": "alexxubyte",
            "tweet_id": "1593637931498905600",
            "tweet_text": "/8 The details of POP are covered in RFC 1939. POP requires mail clients to download the entire email. This can take a long time if an email contains a large attachment.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:05.000Z"
        },
        {
            "id": 136,
            "username": "alexxubyte",
            "tweet_id": "1593637934053220353",
            "tweet_text": "/9 IMAP is also a standard mail protocol for receiving emails for a local email client. When you read an email, you are connected to an external mail server, and data is transferred to your local device.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:06.000Z"
        },
        {
            "id": 135,
            "username": "alexxubyte",
            "tweet_id": "1593637936548876288",
            "tweet_text": "/10 IMAP only downloads a message when you click it, and emails are not deleted from mail servers, meaning that you can access emails from multiple devices. IMAP is the most widely used protocol for individual email accounts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:07.000Z"
        },
        {
            "id": 134,
            "username": "alexxubyte",
            "tweet_id": "1593637939027681280",
            "tweet_text": "/11 Please keep in mind this is a highly simplified design. Hope it sparks your interest and curiosity:)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-18T16:11:07.000Z"
        },
        {
            "id": 133,
            "username": "alexxubyte",
            "tweet_id": "1593639670331547648",
            "tweet_text": "I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can:\n\nhttps://t.co/eexOMgggw9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593637888834473984",
            "tweet_type": "Others",
            "created_at": "2022-11-18T16:18:00.000Z"
        },
        {
            "id": 1463,
            "username": "testdrivenio",
            "tweet_id": "1593657800080490497",
            "tweet_text": "Python clean test tip:\n\nTests you write should cover:\n\n- all happy paths\n- edge/corner/boundary cases\n- negative test cases\n- security and illegal issues\n\n\ud83d\udc47 https://t.co/mxJOSYV9Ho",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh3PUdsUcAA7-Ou.jpg\"]",
            "tweet_conversation_id": "1593657800080490497",
            "tweet_type": "Python tips",
            "created_at": "2022-11-18T17:30:02.000Z"
        },
        {
            "id": 458,
            "username": "bascodes",
            "tweet_id": "1593697551051476992",
            "tweet_text": "I'll be in Copenhagen \ud83c\udde9\ud83c\uddf0 next week \u2708\ufe0f\n\nAnyone got tips or recommendations?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593697551051476992",
            "tweet_type": "Others",
            "created_at": "2022-11-18T20:08:00.000Z"
        },
        {
            "id": 457,
            "username": "bascodes",
            "tweet_id": "1593715603013083139",
            "tweet_text": "As a developer, did you ever screenshot your most salient lines of code?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593715603013083139",
            "tweet_type": "Others",
            "created_at": "2022-11-18T21:19:44.000Z"
        },
        {
            "id": 456,
            "username": "bascodes",
            "tweet_id": "1593734705580593154",
            "tweet_text": "Context: https://t.co/xznMbmK8W5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593715603013083139",
            "tweet_type": "Others",
            "created_at": "2022-11-18T22:35:38.000Z"
        },
        {
            "id": 455,
            "username": "bascodes",
            "tweet_id": "1593932199782645761",
            "tweet_text": "What new features would you like to see in @bookmarksemail?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593932199782645761",
            "tweet_type": "Others",
            "created_at": "2022-11-19T11:40:24.000Z"
        },
        {
            "id": 454,
            "username": "bascodes",
            "tweet_id": "1593932202773196802",
            "tweet_text": "https://t.co/nOxc4FzKwc sends you a daily digest of your Twitter bookmarks \u2014 check it out!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593932199782645761",
            "tweet_type": "Others",
            "created_at": "2022-11-19T11:40:25.000Z"
        },
        {
            "id": 453,
            "username": "bascodes",
            "tweet_id": "1593941441763581955",
            "tweet_text": "This looks really helpful \ud83d\udc47 https://t.co/8cQrZ9oU12",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593941441763581955",
            "tweet_type": "Others",
            "created_at": "2022-11-19T12:17:08.000Z"
        },
        {
            "id": 1462,
            "username": "testdrivenio",
            "tweet_id": "1593995343708192769",
            "tweet_text": "Full-text Search in Django with Postgres and Elasticsearch\n\nhttps://t.co/nSHDcSxDFb\n\nJust updated! \ud83d\ude80\n\n\ud83d\udd38Server-side: Python, Django, Django REST Framework,\nPostgres, Elasticsearch\n\ud83d\udd38Client-side: JavaScript, React\n\ud83d\udd38Tools: Docker, Cypress\n\n#Django #Python #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593995343708192769",
            "tweet_type": "Others",
            "created_at": "2022-11-19T15:51:19.000Z"
        },
        {
            "id": 132,
            "username": "alexxubyte",
            "tweet_id": "1594008281340530688",
            "tweet_text": "Twitter Architecture 2022 vs. 2012. What\u2019s changed over the past 10 years?\n\nThank you, @elonmusk for the transparency.\n\n{1/2} https://t.co/Fvbn7EDoOS",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh8OE2jUAAEIVRR.jpg\"]",
            "tweet_conversation_id": "1594008281340530688",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-19T16:42:44.000Z"
        },
        {
            "id": 131,
            "username": "alexxubyte",
            "tweet_id": "1594008294976196608",
            "tweet_text": "Twitter Architecture 2012\n\nSource: https://t.co/cMRgpGrK1y\n\n{2/2} https://t.co/7Cmu8yaoxj",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh8OFzjVEAIN_IH.jpg\"]",
            "tweet_conversation_id": "1594008281340530688",
            "tweet_type": "Others",
            "created_at": "2022-11-19T16:42:47.000Z"
        },
        {
            "id": 130,
            "username": "alexxubyte",
            "tweet_id": "1594010631308705792",
            "tweet_text": "I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can:\n\nhttps://t.co/jEcprc2891",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594008281340530688",
            "tweet_type": "Others",
            "created_at": "2022-11-19T16:52:04.000Z"
        },
        {
            "id": 1461,
            "username": "testdrivenio",
            "tweet_id": "1594020183349551105",
            "tweet_text": "Python clean test tip:\n\nA test should not depend on the state of any other tests or external services.\n\n\ud83d\udc47 https://t.co/CeuwG7JmRk",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh8Y6EJUUAEckxg.png\"]",
            "tweet_conversation_id": "1594020183349551105",
            "tweet_type": "Python tips",
            "created_at": "2022-11-19T17:30:01.000Z"
        },
        {
            "id": 452,
            "username": "bascodes",
            "tweet_id": "1594044941764014080",
            "tweet_text": "Which newsletters do you enjoy reading?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594044941764014080",
            "tweet_type": "Others",
            "created_at": "2022-11-19T19:08:24.000Z"
        },
        {
            "id": 451,
            "username": "bascodes",
            "tweet_id": "1594318610490707970",
            "tweet_text": "\ud83d\udca1\ud83d\udc0dThese AI-generated avatar pictures have been trending for a while now\n\nToday, we will have a look behind the scenes \u2013 let that sink in\n\n\ud83d\udc47 https://t.co/NkVCu5eJig",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAiCs1WQAQrX_U.png\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Python tips",
            "created_at": "2022-11-20T13:15:52.000Z"
        },
        {
            "id": 450,
            "username": "bascodes",
            "tweet_id": "1594318612952764420",
            "tweet_text": "1/ these images are generated from text prompts, such as \n\n\"painting of bas wearing a space suit, vector illustration\" https://t.co/UyadG3EarH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAjlAGXwAAYiMm.png\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:52.000Z"
        },
        {
            "id": 449,
            "username": "bascodes",
            "tweet_id": "1594318614869704704",
            "tweet_text": "2/ the model has to know what \"bas\" is, so it has to be trained with photos of a specific entity (me in that case) and simultaneously retain its knowledge about other things in the world.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:53.000Z"
        },
        {
            "id": 448,
            "username": "bascodes",
            "tweet_id": "1594318617008824320",
            "tweet_text": "3/ This thread is a great explanation of how things work internally in DreamBooth, the model behind the scenes\n\nhttps://t.co/maTSRCeYNV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:53.000Z"
        },
        {
            "id": 447,
            "username": "bascodes",
            "tweet_id": "1594318619416076288",
            "tweet_text": "4/ DreamBooth is based on Imagegen, an ML model for image generation. Luckily, there is also an open source implementation of DreamBooth based on StableDiffusion, which can be found here:\n\nhttps://t.co/1cMKkTUDA0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:54.000Z"
        },
        {
            "id": 446,
            "username": "bascodes",
            "tweet_id": "1594318621102284800",
            "tweet_text": "5/ And even better: There is a IPython Notebook on Google collab that we can use to train our own models and generate our own pictures:\n\nhttps://t.co/QeXYnvOW3M",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:54.000Z"
        },
        {
            "id": 445,
            "username": "bascodes",
            "tweet_id": "1594318622880632834",
            "tweet_text": "6/ How to use this collab document?\n\nFirst step, get your photos ready. Around 20 pictures, in different styles, light conditions, portrait and upper body shots mixed, should be fine.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:55.000Z"
        },
        {
            "id": 444,
            "username": "bascodes",
            "tweet_id": "1594318624663408646",
            "tweet_text": "7/ Now convert your photos to PNG, 512x512 pixels. Here is a website that does it for you:\n\nhttps://t.co/sfYH7Htl2H",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:55.000Z"
        },
        {
            "id": 443,
            "username": "bascodes",
            "tweet_id": "1594318626676432896",
            "tweet_text": "8/ Next, open the collab document and click the play button to connect with your GDrive. https://t.co/e9suzQP6kD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAl9NCXEAEpw3J.jpg\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:56.000Z"
        },
        {
            "id": 442,
            "username": "bascodes",
            "tweet_id": "1594318628429742083",
            "tweet_text": "9/ Click the following play buttons to install the environment for your notebook, and download the model (for the \"rest of the world\") from huggingface. You need an account on https://t.co/EKgZcWqgzK https://t.co/IQ8DjOZHNx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAmmzMXoAEi29c.jpg\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:56.000Z"
        },
        {
            "id": 441,
            "username": "bascodes",
            "tweet_id": "1594318630103154688",
            "tweet_text": "10/ Click the next play buttons to set up DreamBooth and Upload your images https://t.co/Y4V6btrV7T",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAm2mjWYAMyqJx.jpg\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:57.000Z"
        },
        {
            "id": 440,
            "username": "bascodes",
            "tweet_id": "1594318632053800960",
            "tweet_text": "11/ Now, the training starts: Click on the play button again. This step will take 45-90 minutes. https://t.co/HQYmSrHYdU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAnKlsXkAMmLfh.png\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:57.000Z"
        },
        {
            "id": 439,
            "username": "bascodes",
            "tweet_id": "1594318634465329154",
            "tweet_text": "12/ This step is the most critical. The model training will run on dedicated nvidia GPUs, but it still takes around 90mins.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:58.000Z"
        },
        {
            "id": 438,
            "username": "bascodes",
            "tweet_id": "1594318636151455746",
            "tweet_text": "13/ Next step is to test the model. This will start a small web app that takes your prompts and generates your images. Click on the link displayed in the output. https://t.co/cmj9rpLjcE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAnpVWX0AMAGfh.jpg\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:58.000Z"
        },
        {
            "id": 437,
            "username": "bascodes",
            "tweet_id": "1594318637921353728",
            "tweet_text": "14/ Play around with some prompts in the web app.\n\nIf you need any inspiration for your prompts, you can refer to this prompt book: https://t.co/sZlpZGWhQE https://t.co/7XNVHCAlUn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiAn9RiXgAEVSRu.jpg\"]",
            "tweet_conversation_id": "1594318610490707970",
            "tweet_type": "Others",
            "created_at": "2022-11-20T13:15:58.000Z"
        },
        {
            "id": 1460,
            "username": "testdrivenio",
            "tweet_id": "1594382570451795968",
            "tweet_text": "Python clean test tip:\n\nTests should check the behavior rather than the underlying implementation details.\n\nWhy?\n- easier to understand and maintain\n- more resistant to refactoring\n- closer to real usage\n\n\ud83d\udc47 https://t.co/zBeSUevldM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiBifylaEAAKQkZ.png\"]",
            "tweet_conversation_id": "1594382570451795968",
            "tweet_type": "Python tips",
            "created_at": "2022-11-20T17:30:01.000Z"
        },
        {
            "id": 436,
            "username": "bascodes",
            "tweet_id": "1594627743966441472",
            "tweet_text": "Anyone I know in Copenhagen next week?\nGrab a coffee?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594627743966441472",
            "tweet_type": "Others",
            "created_at": "2022-11-21T09:44:15.000Z"
        },
        {
            "id": 435,
            "username": "bascodes",
            "tweet_id": "1594645571389775872",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 You need to understand Python well before you can write idiomatic code in it.\n\nBut what does that even mean?\n\nHere are 9\u20e3 examples \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Python tips",
            "created_at": "2022-11-21T10:55:05.000Z"
        },
        {
            "id": 434,
            "username": "bascodes",
            "tweet_id": "1594645573164011521",
            "tweet_text": "1\u20e3 Falsy and Truthy\n\nAlmost all data types can be interpreted as bool-ish. An empty list? Fals-y. A 3-character string? Truth-y https://t.co/uMLX3pq26t",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_JYjWAAAzXAt.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:06.000Z"
        },
        {
            "id": 433,
            "username": "bascodes",
            "tweet_id": "1594645575005523969",
            "tweet_text": "2\u20e3 Ternary operator\n\nPython does have a ternary operator by leveraging one-line \ud835\ude92\ud835\ude8fs: https://t.co/vIWRhmsZJA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_NXuXoAESgzY.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:06.000Z"
        },
        {
            "id": 432,
            "username": "bascodes",
            "tweet_id": "1594645577224294401",
            "tweet_text": "3\u20e3 Chained Comparison Operators\n\nPython syntax should be as simple as possible. That's why you can use mathematics-like notations like this\n\n\ud835\udffb &lt; \ud835\udea1 &lt; \ud835\udff7\ud835\udff6 https://t.co/x2SQ1Etgg5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_R3BXEAMACAi.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:07.000Z"
        },
        {
            "id": 431,
            "username": "bascodes",
            "tweet_id": "1594645579321298944",
            "tweet_text": "4\u20e3 Multiple assignment and destructuring assignment\n\nYou can assign different variables in one line of Python code https://t.co/RPFRrtzGRB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_WjHWAAAOM_2.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:07.000Z"
        },
        {
            "id": 430,
            "username": "bascodes",
            "tweet_id": "1594645580923502592",
            "tweet_text": "5\u20e3 f-strings\n\nf-strings provide a template-like mini-language inside Python. You can, for example, align text, or specify precisions of \ud835\ude8f\ud835\ude95\ud835\ude98\ud835\ude8a\ud835\ude9ds. https://t.co/AWfUtNIyER",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_bRmWQAA4_tN.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:08.000Z"
        },
        {
            "id": 429,
            "username": "bascodes",
            "tweet_id": "1594645582580178944",
            "tweet_text": "6\u20e3 list comprehensions / dict comprehension\n\nlist and dict comprehensions are maybe the most Pythonic feature. It can be very useful for modifying data structures. https://t.co/NSXYKEhp6r",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_gu6XwAEOTH3.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:08.000Z"
        },
        {
            "id": 428,
            "username": "bascodes",
            "tweet_id": "1594645584849387520",
            "tweet_text": "7\u20e3 \ud835\ude92\ud835\ude97 keyword\n\nPython has the \ud835\ude92\ud835\ude97 operator that works on collections, like lists.\n\nYou could use it to check if an element is in a list of choices https://t.co/q938EFEhgx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_lW7X0AMDpWt.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:09.000Z"
        },
        {
            "id": 427,
            "username": "bascodes",
            "tweet_id": "1594645586653089792",
            "tweet_text": "8\u20e3 \ud835\ude8e\ud835\ude97\ud835\ude9e\ud835\ude96\ud835\ude8e\ud835\ude9b\ud835\ude8a\ud835\ude9d\ud835\ude8e\n\nWhenever you need to not only access each element by a list but also need a counter in your loop, you can use \ud835\ude8e\ud835\ude97\ud835\ude9e\ud835\ude96\ud835\ude8e\ud835\ude9b\ud835\ude8a\ud835\ude9d\ud835\ude8e https://t.co/UwRJ5c7GLt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_py_WQAA8eSJ.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:09.000Z"
        },
        {
            "id": 426,
            "username": "bascodes",
            "tweet_id": "1594645589156937730",
            "tweet_text": "9\u20e3 The Walrus Operator\n\nWith the walrus operator introduced in Python 3.8, you have an assignment expression.\nThat means that you could assign a value to a variable and access that value in the same line. https://t.co/7FTab8Uv2y",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiE_v5JWQAAoJh5.jpg\"]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T10:55:10.000Z"
        },
        {
            "id": 1459,
            "username": "testdrivenio",
            "tweet_id": "1594689441498599425",
            "tweet_text": "Building a Concurrent Web Scraper With Python and Selenium\n\nhttps://t.co/qxyknFCPbU\n\nLooks at how to speed up a Python-based web scraping and crawling script with parallel processing via the multiprocessing library. \n\n#Python #WebScraping #Selenium",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594689441498599425",
            "tweet_type": "Others",
            "created_at": "2022-11-21T13:49:25.000Z"
        },
        {
            "id": 425,
            "username": "bascodes",
            "tweet_id": "1594722620745961472",
            "tweet_text": "Honest question: Certifications, such as Azure or AWS Solutions Architect \u2013 beneficial for your career or not? \ud83e\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594722620745961472",
            "tweet_type": "Others",
            "created_at": "2022-11-21T16:01:15.000Z"
        },
        {
            "id": 129,
            "username": "alexxubyte",
            "tweet_id": "1594727276582576132",
            "tweet_text": "/1 Do we have \ud835\udc1a\ud835\udc27 \ud835\udc1a\ud835\udc25\ud835\udc2d\ud835\udc1e\ud835\udc2b\ud835\udc27\ud835\udc1a\ud835\udc2d\ud835\udc22\ud835\udc2f\ud835\udc1e for Twitter services?\n\nWhat is \ud835\udc1d\ud835\udc1e\ud835\udc1c\ud835\udc1e\ud835\udc27\ud835\udc2d\ud835\udc2b\ud835\udc1a\ud835\udc25\ud835\udc22\ud835\udc33\ud835\udc1e\ud835\udc1d \ud835\udc2c\ud835\udc28\ud835\udc1c\ud835\udc22\ud835\udc1a\ud835\udc25 \ud835\udc27\ud835\udc1e\ud835\udc2d\ud835\udc30\ud835\udc28\ud835\udc2b\ud835\udc24 service?\n\nThe diagram below shows a comparison between Twitter and Mastodon. https://t.co/srxpbs1UBx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiGcAS5UoAoQsNX.jpg\"]",
            "tweet_conversation_id": "1594727276582576132",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-21T16:19:45.000Z"
        },
        {
            "id": 128,
            "username": "alexxubyte",
            "tweet_id": "1594727287613665280",
            "tweet_text": "/2 It is said that Trump's new social media platform Truth Social was using the Mastodon.\n\nMastodon runs \ud835\udc2c\ud835\udc1e\ud835\udc25\ud835\udc1f-\ud835\udc21\ud835\udc28\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc1d services. It is free and \ud835\udc21\ud835\udc1a\ud835\udc2c \ud835\udc27\ud835\udc28 \ud835\udc1a\ud835\udc1d\ud835\udc2c. It's MAU increased from 500k in Oct to 1 million in Nov, after Elon Musk\u2019s takeover of Twitter. https://t.co/zykwHxLsYG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiGcAvlUoAIbhHM.jpg\"]",
            "tweet_conversation_id": "1594727276582576132",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-21T16:19:48.000Z"
        },
        {
            "id": 127,
            "username": "alexxubyte",
            "tweet_id": "1594727291669487617",
            "tweet_text": "/3 Unlike Twitter, whose servers belong to the Twitter company, Mastodon\u2019s servers do not belong to any company. Its network is composed of servers (instances) from different organizations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594727276582576132",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-21T16:19:49.000Z"
        },
        {
            "id": 126,
            "username": "alexxubyte",
            "tweet_id": "1594727294374813702",
            "tweet_text": "/4 When users register, they must choose a server to start with. Since the servers sync up with each other, users can still receive updates from other servers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594727276582576132",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-21T16:19:50.000Z"
        },
        {
            "id": 125,
            "username": "alexxubyte",
            "tweet_id": "1594727297126277122",
            "tweet_text": "/5 Because the network is run by volunteers, the company has \ud835\udc28\ud835\udc27\ud835\udc25\ud835\udc32 \ud835\udc28\ud835\udc27\ud835\udc1e \ud835\udc1e\ud835\udc26\ud835\udc29\ud835\udc25\ud835\udc28\ud835\udc32\ud835\udc1e\ud835\udc1e - its founder Eugen Rochko. It is run by \ud835\udc1c\ud835\udc2b\ud835\udc28\ud835\udc30\ud835\udc1d\ud835\udc1f\ud835\udc2e\ud835\udc27\ud835\udc1d\ud835\udc22\ud835\udc27\ud835\udc20 and is now supported by 3500 people.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594727276582576132",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-21T16:19:50.000Z"
        },
        {
            "id": 124,
            "username": "alexxubyte",
            "tweet_id": "1594727299777077261",
            "tweet_text": "/6 \ud83d\udc49 Over to you: Decentralized social networks can be controversial. What do you think the future of network networks will be?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594727276582576132",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-21T16:19:51.000Z"
        },
        {
            "id": 123,
            "username": "alexxubyte",
            "tweet_id": "1594727302281076736",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/wczhpWE1He",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594727276582576132",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-21T16:19:52.000Z"
        },
        {
            "id": 1458,
            "username": "testdrivenio",
            "tweet_id": "1594744958279221249",
            "tweet_text": "Python clean test tip:\n\nMake tests fun.\n\nUse cartoon characters.\n\nUse humour.\n\nUse what you love.\n\n\ud83d\udc47 https://t.co/hzkwdAHsDF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiGsFgjaEAAYRYm.png\"]",
            "tweet_conversation_id": "1594744958279221249",
            "tweet_type": "Python tips",
            "created_at": "2022-11-21T17:30:01.000Z"
        },
        {
            "id": 424,
            "username": "bascodes",
            "tweet_id": "1594837126553931782",
            "tweet_text": "Remember to sign up for my newsletter for more tech content \ud83d\udc47\nhttps://t.co/TdYEGPWwTB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594645571389775872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T23:36:16.000Z"
        },
        {
            "id": 122,
            "username": "alexxubyte",
            "tweet_id": "1594941624261677056",
            "tweet_text": "This week, we will talk about the following:\n\n\ud83d\udd39 Centralized vs. decentralized social network\n\ud83d\udd39 Online ticketing platform\n\ud83d\udd39 CDN\n\ud83d\udd39 Token, Cookie, Session\n\ud83d\udd39 Twitter architecture \n\nSubscribe to our weekly newsletter to learn something new every week: \nhttps://t.co/dkjDPxaQMt https://t.co/xhNBIlo6Ll",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiJezfkUcAAiXkx.jpg\"]",
            "tweet_conversation_id": "1594941624261677056",
            "tweet_type": "Others",
            "created_at": "2022-11-22T06:31:30.000Z"
        },
        {
            "id": 423,
            "username": "bascodes",
            "tweet_id": "1595079711868465153",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Small #Python challenge: \n\nCan you guess the output of the following code \u2013 without using your Python interpreter? https://t.co/kuZ0W55OO3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiLcbYuWAAAdXwQ.jpg\"]",
            "tweet_conversation_id": "1595079711868465153",
            "tweet_type": "Python tips",
            "created_at": "2022-11-22T15:40:13.000Z"
        },
        {
            "id": 121,
            "username": "alexxubyte",
            "tweet_id": "1595098396221530118",
            "tweet_text": "/1 Last week, Ticketmaster halted public ticket sales of Taylor Swift\u2019s tour due to extraordinarily high demands on ticketing systems. https://t.co/JYDL5lD5Hx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiLtiJCUYAgZq_k.jpg\"]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:27.000Z"
        },
        {
            "id": 120,
            "username": "alexxubyte",
            "tweet_id": "1595098400722018313",
            "tweet_text": "/2 It\u2019s an interesting problem, so we did some research on this topic. The diagram below shows the evolution of the online China Train ticket booking system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:28.000Z"
        },
        {
            "id": 119,
            "username": "alexxubyte",
            "tweet_id": "1595098410893205507",
            "tweet_text": "/3 The China Train tickets booking system has \ud835\udc2c\ud835\udc22\ud835\udc26\ud835\udc22\ud835\udc25\ud835\udc1a\ud835\udc2b \ud835\udc1c\ud835\udc21\ud835\udc1a\ud835\udc25\ud835\udc25\ud835\udc1e\ud835\udc27\ud835\udc20\ud835\udc1e\ud835\udc2c as the Ticketmaster system:\n\n1\ufe0f\u20e3 Very high concurrent visits during peak hours.\n2\ufe0f\u20e3 The QPS for checking remaining tickets and orders is very high\n3\ufe0f\u20e3 A lot of bots https://t.co/nmWmdBR9xv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiLti89UYAErxsu.jpg\"]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:31.000Z"
        },
        {
            "id": 118,
            "username": "alexxubyte",
            "tweet_id": "1595098422746308615",
            "tweet_text": "/4 \ud835\udc13\ud835\udc21\ud835\udc1e \ud835\udc2c\ud835\udc28\ud835\udc25\ud835\udc2e\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\n1\ufe0f\u20e3 \ud835\udc12\ud835\udc1e\ud835\udc29\ud835\udc1a\ud835\udc2b\ud835\udc1a\ud835\udc2d\ud835\udc1e \ud835\udc2b\ud835\udc1e\ud835\udc1a\ud835\udc1d \ud835\udc1a\ud835\udc27\ud835\udc1d \ud835\udc30\ud835\udc2b\ud835\udc22\ud835\udc2d\ud835\udc1e \ud835\udc2b\ud835\udc1e\ud835\udc2a\ud835\udc2e\ud835\udc1e\ud835\udc2c\ud835\udc2d\ud835\udc2c. Because anxious users kept refreshing the web page to check if there were tickets available, the system could under huge pressure. https://t.co/Dn2Iy4XCdi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiLtjm5UYAgmkI1.jpg\"]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:34.000Z"
        },
        {
            "id": 117,
            "username": "alexxubyte",
            "tweet_id": "1595098434716852233",
            "tweet_text": "/5 To handle the calculation and query in memory, the remaining ticket components were moved entirely to GemFire. It is possible to fit the entire country's train tickets into several Gigabytes of memory. https://t.co/LeJQl1BcBc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiLtkUCUYAUzTgP.jpg\"]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:36.000Z"
        },
        {
            "id": 116,
            "username": "alexxubyte",
            "tweet_id": "1595098446221828096",
            "tweet_text": "/6 In addition, the order query component was moved to GemFire to reduce the load on the order database. Hadoop was used to store historical orders. https://t.co/jSFlyvB6Q8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiLtk_SUYAYPkV9.jpg\"]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:39.000Z"
        },
        {
            "id": 115,
            "username": "alexxubyte",
            "tweet_id": "1595098450755870726",
            "tweet_text": "/7 \n2\ufe0f\u20e3 \ud835\udc0b\ud835\udc1e\ud835\udc2f\ud835\udc1e\ud835\udc2b\ud835\udc1a\ud835\udc20\ud835\udc1e \ud835\udc29\ud835\udc2e\ud835\udc1b\ud835\udc25\ud835\udc22\ud835\udc1c \ud835\udc1c\ud835\udc25\ud835\udc28\ud835\udc2e\ud835\udc1d \ud835\udc1f\ud835\udc28\ud835\udc2b \ud835\udc1e\ud835\udc25\ud835\udc1a\ud835\udc2c\ud835\udc2d\ud835\udc22\ud835\udc1c \ud835\udc1c\ud835\udc1a\ud835\udc29\ud835\udc1a\ud835\udc1c\ud835\udc22\ud835\udc2d\ud835\udc32\n3\ufe0f\u20e3 \ud835\udc01\ud835\udc1a\ud835\udc27 \ud835\udc1b\ud835\udc28\ud835\udc2d\ud835\udc2c. It reduced the traffic by 95%.\n4\ufe0f\u20e3 \ud835\udc08\ud835\udc27\ud835\udc1c\ud835\udc2b\ud835\udc1e\ud835\udc1a\ud835\udc2c\ud835\udc1e \ud835\udc2d\ud835\udc21\ud835\udc1e \ud835\udc1b\ud835\udc1a\ud835\udc27\ud835\udc1d\ud835\udc30\ud835\udc22\ud835\udc1d\ud835\udc2d\ud835\udc21 of the system.\n5\ufe0f\u20e3 \ud835\udc08\ud835\udc27\ud835\udc1c\ud835\udc2b\ud835\udc1e\ud835\udc1a\ud835\udc2c\ud835\udc1e \ud835\udc2c\ud835\udc32\ud835\udc2c\ud835\udc2d\ud835\udc1e\ud835\udc26 \ud835\udc1a\ud835\udc2f\ud835\udc1a\ud835\udc22\ud835\udc25\ud835\udc1a\ud835\udc1b\ud835\udc22\ud835\udc25\ud835\udc22\ud835\udc2d\ud835\udc32",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:40.000Z"
        },
        {
            "id": 114,
            "username": "alexxubyte",
            "tweet_id": "1595098453234704386",
            "tweet_text": "/8 Note: the numbers are based on the back-of-the-envelope estimation we did (not official data).\n\n\ud83d\udc49 Over to you: Cyber Monday is coming. What can be done to ensure the shopping sites can handle the spike in traffic during sales?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:41.000Z"
        },
        {
            "id": 113,
            "username": "alexxubyte",
            "tweet_id": "1595098455793229836",
            "tweet_text": "/9 Subscribe to our weekly newsletter to learn something new every week:\n\nhttps://t.co/dkjDPxrTOt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:42.000Z"
        },
        {
            "id": 112,
            "username": "alexxubyte",
            "tweet_id": "1595098458293051392",
            "tweet_text": "/10 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/98tEJhh29T",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595098396221530118",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-22T16:54:42.000Z"
        },
        {
            "id": 1457,
            "username": "testdrivenio",
            "tweet_id": "1595107345956077568",
            "tweet_text": "Python clean test tip:\n\nYour tests should use meaningful data in order to provide examples of how to use your code\n\ne.g. instead of a random string use a real name\n\n\ud83d\udc47 https://t.co/uohU9wBli4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiL1rSMaEAAALCQ.png\"]",
            "tweet_conversation_id": "1595107345956077568",
            "tweet_type": "Python tips",
            "created_at": "2022-11-22T17:30:01.000Z"
        },
        {
            "id": 111,
            "username": "alexxubyte",
            "tweet_id": "1595216223238701057",
            "tweet_text": "I consider Alex to be the most knowledgeable person I know about DynamoDB. Take advantage of this great discount while it lasts. https://t.co/kA5T10VERx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595216223238701057",
            "tweet_type": "Others",
            "created_at": "2022-11-23T00:42:39.000Z"
        },
        {
            "id": 110,
            "username": "alexxubyte",
            "tweet_id": "1595258025912082432",
            "tweet_text": "How to learn payment systems? The high-resolution picture can be viewed by subscribing to our newsletter: https://t.co/0RYwcKv26q https://t.co/b4WB4qzhAb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiN-JKHUUAIarP4.jpg\"]",
            "tweet_conversation_id": "1595258025912082432",
            "tweet_type": "Others",
            "created_at": "2022-11-23T03:28:46.000Z"
        },
        {
            "id": 422,
            "username": "bascodes",
            "tweet_id": "1595349405426937857",
            "tweet_text": "Where is everyone?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595349405426937857",
            "tweet_type": "Others",
            "created_at": "2022-11-23T09:31:53.000Z"
        },
        {
            "id": 421,
            "username": "bascodes",
            "tweet_id": "1595425021350092805",
            "tweet_text": "The best time to learn Python was 5-10 years ago. The second best time is today!\n\n\ud83d\udc0d\ud83e\uddd1\u200d\ud83c\udfeb Here is a list of significantly discounted learning material for Python developers! Have a look!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:21.000Z"
        },
        {
            "id": 420,
            "username": "bascodes",
            "tweet_id": "1595425023342305286",
            "tweet_text": "Python Morsels @PythonMorsels\n\n300 screencasts, exercises, and articles for Python programmers\n\nhttps://t.co/qvc6nZY1K1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:21.000Z"
        },
        {
            "id": 419,
            "username": "bascodes",
            "tweet_id": "1595425025296932864",
            "tweet_text": "Reuven Lerner @reuvenmlerner\n\nCode BF2022 \n\nhttps://t.co/mMRe5jnUzN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:22.000Z"
        },
        {
            "id": 418,
            "username": "bascodes",
            "tweet_id": "1595425027331088385",
            "tweet_text": "All books bundle by @learn_byexample\n\nPython, JavaScript, Shell, and vim\n\nhttps://t.co/Tk4NPTT3VB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:22.000Z"
        },
        {
            "id": 417,
            "username": "bascodes",
            "tweet_id": "1595425029361221632",
            "tweet_text": "Docker packaging products for Python by @itamarst\n\nCode FALL22\n\nhttps://t.co/HqFTV27RG7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:23.000Z"
        },
        {
            "id": 416,
            "username": "bascodes",
            "tweet_id": "1595425031336738816",
            "tweet_text": "Python books by @driscollis\n\n10$ off\n\nhttps://t.co/CkpiVs5aNF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:23.000Z"
        },
        {
            "id": 415,
            "username": "bascodes",
            "tweet_id": "1595425033324724226",
            "tweet_text": "Pragmatic Bookshelf (@pragprog)\n\nCode turkeysale2022\n\nhttps://t.co/allOCbdNwM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:24.000Z"
        },
        {
            "id": 414,
            "username": "bascodes",
            "tweet_id": "1595425035417944065",
            "tweet_text": "testdriven io  (@testdrivenio)\n\nDjango Black Friday Sale \u2013 30% off Django courses\n\nhttps://t.co/rsak518QUq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:24.000Z"
        },
        {
            "id": 413,
            "username": "bascodes",
            "tweet_id": "1595425037804523520",
            "tweet_text": "Adam Johnsons Python books (@AdamChainz)\n\nhttps://t.co/Re3jONq5pq \n\nhttps://t.co/hoAeUoUtXg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:25.000Z"
        },
        {
            "id": 412,
            "username": "bascodes",
            "tweet_id": "1595425040035708930",
            "tweet_text": "3 Django Books by William Vincent (@wsvincent1)\n\nhttps://t.co/Kt2s3vhyxJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:25.000Z"
        },
        {
            "id": 411,
            "username": "bascodes",
            "tweet_id": "1595425042619600897",
            "tweet_text": "If I find more, I will add them to my list here, too:\n\nhttps://t.co/z8RJ2pzB68",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595425021350092805",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:32:26.000Z"
        },
        {
            "id": 109,
            "username": "alexxubyte",
            "tweet_id": "1595455518583029764",
            "tweet_text": "1/10 Session, cookie, JWT, token, SSO, and OAuth 2.0 - what are they? https://t.co/3hi8fKB8M3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiQyVXJUAAgoqvR.jpg\"]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:32.000Z"
        },
        {
            "id": 108,
            "username": "alexxubyte",
            "tweet_id": "1595455524023062529",
            "tweet_text": "2/10 These terms are all related to user identity management. When you log into a website, you declare who you are (identification). Your identity is verified (authentication), and you are granted the necessary permissions (authorization).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:33.000Z"
        },
        {
            "id": 107,
            "username": "alexxubyte",
            "tweet_id": "1595455526543839232",
            "tweet_text": "3/10 Many solutions have been proposed in the past, and the list keeps growing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:34.000Z"
        },
        {
            "id": 106,
            "username": "alexxubyte",
            "tweet_id": "1595455538325618689",
            "tweet_text": "4/10 From simple to complex, here is my understanding of user identity management:\n\n\ud83d\udd39WWW-Authenticate is the most basic method. You are asked for the username and password by the browser. As a result of the inability to control the login life cycle, it is seldom used today. https://t.co/KPi2swAEyH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiQyWYXUAAc0vrX.jpg\"]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:37.000Z"
        },
        {
            "id": 105,
            "username": "alexxubyte",
            "tweet_id": "1595455553261535232",
            "tweet_text": "5/10 \ud83d\udd39A finer control over the login life cycle is session-cookie. The server maintains session storage, and the browser keeps the ID of the session. A cookie usually only works with browsers and is not mobile app friendly. https://t.co/aW4HjDdsVF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiQyXRdVQAAcWYM.jpg\"]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:40.000Z"
        },
        {
            "id": 104,
            "username": "alexxubyte",
            "tweet_id": "1595455568818278400",
            "tweet_text": "6/10 \ud83d\udd39To address the compatibility issue, the token can be used. The client sends the token to the server, and the server validates the token. The downside is the token needs to be encrypted and decrypted, which may be time-consuming. https://t.co/hQ3KOX0g0f",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiQyYKVUAAAnQts.jpg\"]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:44.000Z"
        },
        {
            "id": 103,
            "username": "alexxubyte",
            "tweet_id": "1595455583683239938",
            "tweet_text": "7/10 \ud83d\udd39JWT is a standard way of representing tokens. This information can be verified and trusted because it is digitally signed. Since JWT contains the signature, there is no need to save session information on the server side. https://t.co/8aTuXMLlWr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiQyZB5UAA4vsbx.jpg\"]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:47.000Z"
        },
        {
            "id": 102,
            "username": "alexxubyte",
            "tweet_id": "1595455598320943114",
            "tweet_text": "8/10 \ud83d\udd39By using SSO (single sign-on), you can sign on only once and log in to multiple websites. It uses CAS (central authentication service) to maintain cross-site information\n\n\ud83d\udd39By using OAuth 2.0, you can authorize one website to access your information on another website https://t.co/9RsXXUNmgQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiQyZ4VUAAgqWvJ.jpg\"]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:51.000Z"
        },
        {
            "id": 101,
            "username": "alexxubyte",
            "tweet_id": "1595455604369129478",
            "tweet_text": "9/10 \ud83d\udc49 Over to you: nowadays, some website allows you to log in by scanning the QR code using your phone. Do you know how it works?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:52.000Z"
        },
        {
            "id": 100,
            "username": "alexxubyte",
            "tweet_id": "1595455606743105536",
            "tweet_text": "10/10 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/bzP26R2oUR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:33:53.000Z"
        },
        {
            "id": 99,
            "username": "alexxubyte",
            "tweet_id": "1595457980559814675",
            "tweet_text": "Make sure you subscribe to our weekly newsletter to learn more about QR code login: \nhttps://t.co/dkjDPxrTOt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595455518583029764",
            "tweet_type": "Others",
            "created_at": "2022-11-23T16:43:19.000Z"
        },
        {
            "id": 1456,
            "username": "testdrivenio",
            "tweet_id": "1595469735260323846",
            "tweet_text": "Python clean test tip:\n\nYour tests should be repeatable in any environment.\n\nThey should be deterministic and always result in the same tests succeeding.\n\n\ud83d\udc47 https://t.co/CTXkcUg7Lh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiQ_RFCaMAAhxon.png\"]",
            "tweet_conversation_id": "1595469735260323846",
            "tweet_type": "Python tips",
            "created_at": "2022-11-23T17:30:01.000Z"
        },
        {
            "id": 410,
            "username": "bascodes",
            "tweet_id": "1595683050595270664",
            "tweet_text": "Do you celebrate Thanksgiving?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595683050595270664",
            "tweet_type": "Others",
            "created_at": "2022-11-24T07:37:40.000Z"
        },
        {
            "id": 409,
            "username": "bascodes",
            "tweet_id": "1595699085297831939",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Did you know that you can use slices in #Python to insert elements to a list in arbitrary positions? https://t.co/z75uAgNZRC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiUPhfTWYAEcok9.jpg\"]",
            "tweet_conversation_id": "1595699085297831939",
            "tweet_type": "Python tips",
            "created_at": "2022-11-24T08:41:23.000Z"
        },
        {
            "id": 408,
            "username": "bascodes",
            "tweet_id": "1595699087655014400",
            "tweet_text": "More about slices here:\nhttps://t.co/Fyb59OyliN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595699085297831939",
            "tweet_type": "Others",
            "created_at": "2022-11-24T08:41:23.000Z"
        },
        {
            "id": 407,
            "username": "bascodes",
            "tweet_id": "1595802672443146242",
            "tweet_text": "What inspiring articles and projects in the Python\ud83d\udc0d space have you found recently?\n\nI will share them tomorrow in the new #ThisWeekInPython issue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595802672443146242",
            "tweet_type": "Others",
            "created_at": "2022-11-24T15:33:00.000Z"
        },
        {
            "id": 98,
            "username": "alexxubyte",
            "tweet_id": "1595817985381634049",
            "tweet_text": "\ud83c\udf81THANKSGIVING GIVEAWAY \ud83c\udf81\n \n\ud83d\udd3910 signed books vol1+vol2\n\ud83d\udd3990 free passes to the online course (contains content of vol1 + vol2 + vol3 coming out in 2023)\n \n\ud835\udc07\ud835\udc28\ud835\udc30 \ud835\udc2d\ud835\udc28 \ud835\udc29\ud835\udc1a\ud835\udc2b\ud835\udc2d\ud835\udc22\ud835\udc1c\ud835\udc22\ud835\udc29\ud835\udc1a\ud835\udc2d\ud835\udc1e:\n\u2705 Follow\n\u2705 Retweet\n\u2705 Subscribe to our free newsletter: https://t.co/0RYwcKdZ4q https://t.co/1yGJUgG6fa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiV71I3UUAEBGgy.jpg\"]",
            "tweet_conversation_id": "1595817985381634049",
            "tweet_type": "Others",
            "created_at": "2022-11-24T16:33:51.000Z"
        },
        {
            "id": 1455,
            "username": "testdrivenio",
            "tweet_id": "1595832122220351488",
            "tweet_text": "Python clean test tip:\n\nDifferent outputs should have different tests - even when using parametrize\n\n\ud83d\udc47 https://t.co/4kEsx7XTCH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiWI2zhakAEPBm5.png\"]",
            "tweet_conversation_id": "1595832122220351488",
            "tweet_type": "Python tips",
            "created_at": "2022-11-24T17:30:01.000Z"
        },
        {
            "id": 406,
            "username": "bascodes",
            "tweet_id": "1595925732731002882",
            "tweet_text": "Black Friday Python Sales\n\ud83d\udc47\nhttps://t.co/SDoYyEgpiQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595925732731002882",
            "tweet_type": "Others",
            "created_at": "2022-11-24T23:42:00.000Z"
        },
        {
            "id": 405,
            "username": "bascodes",
            "tweet_id": "1596116019654836224",
            "tweet_text": "Happy Friday!\nHere is something for your weekend reading list: Some inspiring articles and projects of #ThisWeekInPython \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:08.000Z"
        },
        {
            "id": 404,
            "username": "bascodes",
            "tweet_id": "1596116022029058048",
            "tweet_text": "How many snakes do you need? \u2013 An introduction to concurrency and parallelism in Python \u2013\u00a0suggested by @vivekthedev\nhttps://t.co/8idr1shkQk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:08.000Z"
        },
        {
            "id": 403,
            "username": "bascodes",
            "tweet_id": "1596116024285347841",
            "tweet_text": "A Look on Python Web Performance at the end of 2022 \u2013\u00a0by @cirospaciari\nhttps://t.co/OxOWpKguTl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:09.000Z"
        },
        {
            "id": 402,
            "username": "bascodes",
            "tweet_id": "1596116026550358017",
            "tweet_text": "The last Python Architecture you will ever need? \u2013 by @davidvujic\nhttps://t.co/zq8oGt3GUe",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:09.000Z"
        },
        {
            "id": 401,
            "username": "bascodes",
            "tweet_id": "1596116028979019776",
            "tweet_text": "Python Type Hints: case study on parsy \u2013 by @spookylukey\nhttps://t.co/hti6CDD55t",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:10.000Z"
        },
        {
            "id": 400,
            "username": "bascodes",
            "tweet_id": "1596116031294300160",
            "tweet_text": "How we run our Python tests in hundreds of environments really fast \u2013 by @getsentry\nhttps://t.co/db0L2QXGpa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:10.000Z"
        },
        {
            "id": 399,
            "username": "bascodes",
            "tweet_id": "1596116033445806082",
            "tweet_text": "imaginAIry \u2013 AI imagined images. Pythonic generation of stable diffusion images \u2013 by @BryceDrennan\nhttps://t.co/Pfgop6sO9h",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:11.000Z"
        },
        {
            "id": 398,
            "username": "bascodes",
            "tweet_id": "1596116036092583936",
            "tweet_text": "quickadd \u2013 Parse natural language time and date expressions in Python \u2013 by @acreom\nhttps://t.co/tR7fhkvgB1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:12.000Z"
        },
        {
            "id": 397,
            "username": "bascodes",
            "tweet_id": "1596116038374068225",
            "tweet_text": "QuickSQLConnector \u2013 SQL in one line \u2013 by @AnAnasRaza\nhttps://t.co/AOHDD5x0Tc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:12.000Z"
        },
        {
            "id": 396,
            "username": "bascodes",
            "tweet_id": "1596116041192833024",
            "tweet_text": "pyjanitor \u2013 Clean APIs for data cleaning. Python implementation of R package Janitor \nhttps://t.co/muf18qAsA1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:13.000Z"
        },
        {
            "id": 395,
            "username": "bascodes",
            "tweet_id": "1596116043713622018",
            "tweet_text": "yapsl \u2013 Yet another python sms library\nhttps://t.co/Wf3HUvnopm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:13.000Z"
        },
        {
            "id": 394,
            "username": "bascodes",
            "tweet_id": "1596116046477692930",
            "tweet_text": "+++\nFind it on my blog, too:\n+++\nhttps://t.co/4P36CV26vn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:14.000Z"
        },
        {
            "id": 393,
            "username": "bascodes",
            "tweet_id": "1596116048725450752",
            "tweet_text": "And remember to subscribe to my newsletter:\nhttps://t.co/TdYEGQdzVB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596116019654836224",
            "tweet_type": "Others",
            "created_at": "2022-11-25T12:18:15.000Z"
        },
        {
            "id": 97,
            "username": "alexxubyte",
            "tweet_id": "1596169333985595392",
            "tweet_text": "\ud83d\udcda BLACK FRIDAY SALE \ud83d\udcda\n \nThe Black Friday sale is now up! Use code BF2022 at checkout for 30% off the system design interview online course. Ends Nov 28.\n \nIt features content from two system design books. In 2023, we will add volume 3.\n \nGet it here: https://t.co/ac9KilZGuD https://t.co/U6rTmpofgc",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fia7LTAVIAAOlR-.jpg\"]",
            "tweet_conversation_id": "1596169333985595392",
            "tweet_type": "Systems Design",
            "created_at": "2022-11-25T15:49:59.000Z"
        },
        {
            "id": 392,
            "username": "bascodes",
            "tweet_id": "1596187422106259456",
            "tweet_text": "I need a break from Twitter to focus on myself a little for a while.\n\nSo, see you in 3 hours!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596187422106259456",
            "tweet_type": "Others",
            "created_at": "2022-11-25T17:01:51.000Z"
        },
        {
            "id": 1454,
            "username": "testdrivenio",
            "tweet_id": "1596194510455070725",
            "tweet_text": "Python testable code tip:\n\nEntities should implement behavior, not just contain data\n\nWhy?\n- testable\n- readable\n- enables refactoring\n- better abstraction\n- better encapsulation\n\n\ud83d\udc47 https://t.co/Zc1ZnoJF0p",
            "tweet_media": "[\"https://pbs.twimg.com/media/FibSch4aEAAAdWZ.png\"]",
            "tweet_conversation_id": "1596194510455070725",
            "tweet_type": "Python tips",
            "created_at": "2022-11-25T17:30:01.000Z"
        },
        {
            "id": 96,
            "username": "alexxubyte",
            "tweet_id": "1596206731205701632",
            "tweet_text": "We took this course when we built bytebytego .com. This is an excellent way for non-frontend developers to learn CSS. Josh is an excellent teacher who explains things clearly and concisely. https://t.co/akYIJWQfsW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596206731205701632",
            "tweet_type": "Others",
            "created_at": "2022-11-25T18:18:35.000Z"
        },
        {
            "id": 391,
            "username": "bascodes",
            "tweet_id": "1596237285699178498",
            "tweet_text": "No, seriously. I just landed in Copenhagen and looking forward to a few days off\u2026\n\nBut: I have scheduled some nice little Python quizzes for you in the next few days! Enjoy &amp; see you next week!\n\nhttps://t.co/s8AMFNhSvo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596237285699178498",
            "tweet_type": "Others",
            "created_at": "2022-11-25T20:20:00.000Z"
        },
        {
            "id": 390,
            "username": "bascodes",
            "tweet_id": "1596542149683617792",
            "tweet_text": "Didn\u2019t find the Python bar, yet\u2026 \ud83d\udc0d https://t.co/7XB2mTQK2m",
            "tweet_media": "[\"https://pbs.twimg.com/media/FigOnvHWIAk2Q_R.jpg\"]",
            "tweet_conversation_id": "1596542149683617792",
            "tweet_type": "Others",
            "created_at": "2022-11-26T16:31:25.000Z"
        },
        {
            "id": 95,
            "username": "alexxubyte",
            "tweet_id": "1596545207326998529",
            "tweet_text": "\ud83c\udf81THANKSGIVING GIVEAWAY\ud83c\udf81\n\u23f0 Last 24 hours to enter\n \n\ud83d\udd3910 signed books\n\ud83d\udd3990 free passes to the online course (content of vol1 + vol2 + vol3 coming in 2023)\n \n\ud835\udc07\ud835\udc28\ud835\udc30 \ud835\udc2d\ud835\udc28 \ud835\udc29\ud835\udc1a\ud835\udc2b\ud835\udc2d\ud835\udc22\ud835\udc1c\ud835\udc22\ud835\udc29\ud835\udc1a\ud835\udc2d\ud835\udc1e:\n\u2705 Follow\n\u2705 Like &amp; Retweet\n\u2705 Subscribe to free newsletter: https://t.co/l9vQPOVPU2 https://t.co/MdOODVjJ2X",
            "tweet_media": "[\"https://pbs.twimg.com/media/FigRPi1VEAEPMsx.jpg\"]",
            "tweet_conversation_id": "1596545207326998529",
            "tweet_type": "Others",
            "created_at": "2022-11-26T16:43:34.000Z"
        },
        {
            "id": 1453,
            "username": "testdrivenio",
            "tweet_id": "1596556901063733248",
            "tweet_text": "Python testable code tip:\n\nStores should implement behavior, and you should test it with usage as similar to the real one\n\nWhy?\n- tests not touching implementation details\n- better encapsulation \n- easy to replace one implementation with another\n- no need for mocking/patching\n\ud83d\udc47 https://t.co/ejL13QGzaN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FigcCTdagAIntaj.jpg\"]",
            "tweet_conversation_id": "1596556901063733248",
            "tweet_type": "Python tips",
            "created_at": "2022-11-26T17:30:02.000Z"
        },
        {
            "id": 389,
            "username": "bascodes",
            "tweet_id": "1596822822910799872",
            "tweet_text": "I'm really enjoying Copenhagen\ud83c\udde9\ud83c\uddf0 so far! It's so important to have a rest from time to time to clear your mind to allow for new creativity. And the Christmas markets they have here, help a lot!\n\nStay tuned for the small Python\ud83d\udc0d quizzes I have scheduled for next week! https://t.co/xtQWmcT4sN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FikNs_wX0AAreCc.jpg\"]",
            "tweet_conversation_id": "1596822822910799872",
            "tweet_type": "Others",
            "created_at": "2022-11-27T11:06:43.000Z"
        },
        {
            "id": 94,
            "username": "alexxubyte",
            "tweet_id": "1596898254679027712",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39 Cyber Monday\n\ud83d\udd39 Monolithic vs. microservice architecture\n\ud83d\udd39 What is k8s\n\ud83d\udd39 Non-functional requirements\n\ud83d\udd39 CDN\n\nSubscribe to our weekly newsletter to learn something new every week:\nhttps://t.co/dkjDPxrTOt https://t.co/shSnUyAn3m",
            "tweet_media": "[\"https://pbs.twimg.com/media/FilSfmCUYAEb4Q-.jpg\"]",
            "tweet_conversation_id": "1596898254679027712",
            "tweet_type": "Others",
            "created_at": "2022-11-27T16:06:27.000Z"
        },
        {
            "id": 1452,
            "username": "testdrivenio",
            "tweet_id": "1596919291185860608",
            "tweet_text": "Python testable code tip:\n\nMake your 3rd party integrations testable by abstracting them behind a simple, replaceable interface\n\nWhy?\n- testable\n- business code is separated from integration - easier &amp; faster testing, no mocking\n- easy to switch to another API\n\n\ud83d\udc47 https://t.co/ll41oNdK53",
            "tweet_media": "[\"https://pbs.twimg.com/media/FilloEJVsAAMzze.jpg\"]",
            "tweet_conversation_id": "1596919291185860608",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T17:30:03.000Z"
        },
        {
            "id": 1451,
            "username": "testdrivenio",
            "tweet_id": "1597226945628213249",
            "tweet_text": "Python Dependency Injection\n\nhttps://t.co/kZDPvMBXTY\n\nLooks at how to use Dependency Injection to decouple and improve the design of a Python application.\n\nby @jangiacomelli\n\n#Python #Programming",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597226945628213249",
            "tweet_type": "Others",
            "created_at": "2022-11-28T13:52:33.000Z"
        },
        {
            "id": 388,
            "username": "bascodes",
            "tweet_id": "1597234355830607873",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Python Quiz time!\n\nCan you guess and explain the output of this small script? https://t.co/41Ax1P6bmp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FikLYOOXgAMjIn4.jpg\"]",
            "tweet_conversation_id": "1597234355830607873",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T14:22:00.000Z"
        },
        {
            "id": 93,
            "username": "alexxubyte",
            "tweet_id": "1597268595683520512",
            "tweet_text": "\ud83d\udcda Cyber Monday Deal \ud83d\udcda\n\nLast chance to get a 30% discount on our system design interview online course. Use code BF2022 at checkout.\n\nFeatures content from our \ud835\udc1b\ud835\udc1e\ud835\udc2c\ud835\udc2d\ud835\udc2c\ud835\udc1e\ud835\udc25\ud835\udc25\ud835\udc22\ud835\udc27\ud835\udc20 books:\n- Volume 1\n- Volume 2\n- Volume 3 (in 2023)\n\nGet it here: https://t.co/ac9KilIDsD https://t.co/XRnjMoRtsB",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fiqi_pLUYAAqd_T.jpg\"]",
            "tweet_conversation_id": "1597268595683520512",
            "tweet_type": "Others",
            "created_at": "2022-11-28T16:38:03.000Z"
        },
        {
            "id": 1450,
            "username": "testdrivenio",
            "tweet_id": "1597281678388781056",
            "tweet_text": "Python testable code tip:\n\nKeep signatures of methods simple and implementation independent\n\nWhy?\n- easier refactoring\n- better encapsulation\n- easy to use different implementations\n- ability to use contract tests\n\n\ud83d\udc47 https://t.co/6RON3IJgHl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiqvN6aVEAAa45r.jpg\"]",
            "tweet_conversation_id": "1597281678388781056",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T17:30:02.000Z"
        },
        {
            "id": 387,
            "username": "bascodes",
            "tweet_id": "1597433417527951360",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Another Python Quiz:\n\nWhat will happen here?\n\nHint: Ask your banker! https://t.co/dRIHWdoMmU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FikLsqKXEAA82Dz.jpg\"]",
            "tweet_conversation_id": "1597433417527951360",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T03:33:00.000Z"
        },
        {
            "id": 1449,
            "username": "testdrivenio",
            "tweet_id": "1597624213887545344",
            "tweet_text": "Testing Flask Applications with pytest\n\nhttps://t.co/hfiZPLNzwK \n\nThis article details how to:\n\n\ud83d\udd38Write unit and functional tests\n\ud83d\udd38Initialize tests to a known state with test fixtures\n\ud83d\udd38Check code coverage with Coverage .py\n\nby @patkennedy79\n\n#Python #Flask",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597624213887545344",
            "tweet_type": "Others",
            "created_at": "2022-11-29T16:11:09.000Z"
        },
        {
            "id": 92,
            "username": "alexxubyte",
            "tweet_id": "1597635214565466112",
            "tweet_text": "What is a CDN? Why should we developers all take advantage of it? In this video, we will talk about what CDN is and the benefits of CDN, including:\n\n- Improving latency\n- Reducing bandwidth\n- Increasing content availability\n- DDoS protection\n\nWatch it now:https://t.co/OzwSPmAnB2 https://t.co/w8BkuMgsIH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FivwwddVUAAdEGE.jpg\"]",
            "tweet_conversation_id": "1597635214565466112",
            "tweet_type": "Others",
            "created_at": "2022-11-29T16:54:52.000Z"
        },
        {
            "id": 1448,
            "username": "testdrivenio",
            "tweet_id": "1597644063880400897",
            "tweet_text": "Python testable code tip:\n\nUse same/similar level of abstraction in your tests\n\ne.g., don't mix API and database access\n\n\ud83d\udc47 https://t.co/9yNv9xSmhe",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fiv4zkxaMAEnepu.jpg\"]",
            "tweet_conversation_id": "1597644063880400897",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T17:30:02.000Z"
        },
        {
            "id": 386,
            "username": "bascodes",
            "tweet_id": "1597813672952225792",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Almost a Python classic: Can you check if a word is a palindrome in just one line of Python?\n\n(A palindrome is a word that reads the same backwards as forwards) https://t.co/jfgzHbyOO4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FikV6k7XkAAy2Wu.jpg\"]",
            "tweet_conversation_id": "1597813672952225792",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T04:44:00.000Z"
        },
        {
            "id": 1447,
            "username": "testdrivenio",
            "tweet_id": "1597946503209037825",
            "tweet_text": "Working with Celery and Django Database Transactions\n\nhttps://t.co/5eYiogSPbl \n\nLooks at:\n\n1\u20e3Django DB transactions - autocommit vs. transaction.atomic \n2\u20e3Preventing a Celery task dependent on a database transaction from executing before the commit\n\n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597946503209037825",
            "tweet_type": "Others",
            "created_at": "2022-11-30T13:31:49.000Z"
        },
        {
            "id": 91,
            "username": "alexxubyte",
            "tweet_id": "1597995132770406400",
            "tweet_text": "1/ What are the differences between monolithic and microservice architecture?\n\nThe diagram compares monolithic and microservice architecture in the ideal world. https://t.co/DGfDvO4f8E",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi04GjiVQAA9lfl.jpg\"]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:03.000Z"
        },
        {
            "id": 90,
            "username": "alexxubyte",
            "tweet_id": "1597995141754540032",
            "tweet_text": "2/ Suppose we have an eCommerce website that needs to handle the functions below:\n\n\ud83d\udd39 User Management\n\ud83d\udd39 Procurement Management\n\ud83d\udd39 Order Management\n\ud83d\udd39 Inventory Management\n\ud83d\udd39 Payments\n\ud83d\udd39 Logistics https://t.co/buelhivegg",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi04G_dVQAUfSRT.jpg\"]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:05.000Z"
        },
        {
            "id": 89,
            "username": "alexxubyte",
            "tweet_id": "1597995145521045505",
            "tweet_text": "3/ In a monolithic architecture, all the components are deployed in one single instance. The service calls are within the same process, and no RPCs. The data tables relating to each component are usually deployed in the same database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:06.000Z"
        },
        {
            "id": 88,
            "username": "alexxubyte",
            "tweet_id": "1597995148025032704",
            "tweet_text": "4/ In a microservice architecture, each component becomes a self-contained service, maintained by a specialized team. The boundaries between services are clearly defined. The user interface talks to multiple services to get a workflow done.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:07.000Z"
        },
        {
            "id": 87,
            "username": "alexxubyte",
            "tweet_id": "1597995150570987520",
            "tweet_text": "5/ This is suitable for scaling out the business when the business has substantial growth.\n\nHowever, since there are many more instances to maintain, microservice architecture needs quite some investment in DevOps.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:07.000Z"
        },
        {
            "id": 86,
            "username": "alexxubyte",
            "tweet_id": "1597995153142124544",
            "tweet_text": "6/ At one point, microservice architecture was the golden standard as almost every large tech company moved from monolithic to microservices. But now, companies started to rethink the pros and cons of microservices.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:08.000Z"
        },
        {
            "id": 85,
            "username": "alexxubyte",
            "tweet_id": "1597995155692220416",
            "tweet_text": "7/ Some of the most controversial definitions of microservices are the exclusive use of a database &amp; making 1000+ RPCs within a single client request.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:09.000Z"
        },
        {
            "id": 84,
            "username": "alexxubyte",
            "tweet_id": "1597995158275964928",
            "tweet_text": "8/ \ud83d\udc49 Over to you: Software is about tradeoffs. If you have to choose between a monolithic and microservice architecture, how do you do it?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:09.000Z"
        },
        {
            "id": 83,
            "username": "alexxubyte",
            "tweet_id": "1597995160725467136",
            "tweet_text": "9/ I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/D00wMqai8l",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597995132770406400",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:45:10.000Z"
        },
        {
            "id": 1446,
            "username": "testdrivenio",
            "tweet_id": "1598006449975664640",
            "tweet_text": "Python testable code tip:\n\nSeparate your logic from data access and entry points\n\nWhy?\n- fast tests -&gt; use in-memory impl. of data access in tests - as many tests as needed\n- slow tests -&gt; test only happy path when testing whole integration\n- catch wrong usage only by mypy\n\n\ud83d\udc47 https://t.co/yCAaAxe0Xq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi1CZTGVUAAlc6J.png\"]",
            "tweet_conversation_id": "1598006449975664640",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T17:30:01.000Z"
        },
        {
            "id": 385,
            "username": "bascodes",
            "tweet_id": "1598303651931430912",
            "tweet_text": "I'm back!\nWhat did I miss last week here on the birdie app?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598303651931430912",
            "tweet_type": "Others",
            "created_at": "2022-12-01T13:11:00.000Z"
        },
        {
            "id": 384,
            "username": "bascodes",
            "tweet_id": "1598315986817454080",
            "tweet_text": "Any interesting Python articles or projects that you want me to include in tomorrow's issue of #ThisWeekInPython\ud83d\udc0d?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598315986817454080",
            "tweet_type": "Others",
            "created_at": "2022-12-01T14:00:01.000Z"
        },
        {
            "id": 1445,
            "username": "testdrivenio",
            "tweet_id": "1598338835783491585",
            "tweet_text": "Developing and Testing an Asynchronous API with FastAPI and Pytest \n\nhttps://t.co/SmgsnIb1Ag\n\nLearn how to develop and test an API with FastAPI using Test-driven Development (TDD).\n\n(@amirtds just updated it!! \ud83d\udcaa)\n\n#FastAPI #Testing #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598338835783491585",
            "tweet_type": "Others",
            "created_at": "2022-12-01T15:30:48.000Z"
        },
        {
            "id": 383,
            "username": "bascodes",
            "tweet_id": "1598350159993249793",
            "tweet_text": "2022 \ud83c\udf86 \u2013 whoa, that was a ride \ud83c\udfa2\n\nFor me, personally, it was the most successful year in a long time \ud83d\ude80\n\n2022 was driven by change \u2013 accomplishments, setbacks, ups and downs. A lot to tell. And I will share my journey with you in my next newsletter, so make sure you subscribe\ud83d\udc47 https://t.co/izzLBwXCFX",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi5XUmoX0AQZBF1.jpg\"]",
            "tweet_conversation_id": "1598350159993249793",
            "tweet_type": "Others",
            "created_at": "2022-12-01T16:15:48.000Z"
        },
        {
            "id": 382,
            "username": "bascodes",
            "tweet_id": "1598350162132344837",
            "tweet_text": "https://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598350159993249793",
            "tweet_type": "Others",
            "created_at": "2022-12-01T16:15:49.000Z"
        },
        {
            "id": 82,
            "username": "alexxubyte",
            "tweet_id": "1598358394397552649",
            "tweet_text": "RPC vs. gRPC\n\nA remote procedure call (RPC) enables one machine to invoke some code on another machine as if it is a local function call\n\ngRPC is an open-source RPC framework created by Google in 2016. What makes gRPC so popular?\n\nWatch  here: https://t.co/bcBHiVqPus https://t.co/h4qLpDAwAL",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Fi6CadNUcAIHcps.mp4\"]",
            "tweet_conversation_id": "1598358394397552649",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-01T16:48:31.000Z"
        },
        {
            "id": 1444,
            "username": "testdrivenio",
            "tweet_id": "1598368835744108544",
            "tweet_text": "API security tip:\n\nDon't expose the Nginx version in the header - this gives possible attackers information on vulnerabilities of your exact version\n\n\ud83d\udc47 https://t.co/8VuTkN1CK3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi6L---aYAI_INF.png\"]",
            "tweet_conversation_id": "1598368835744108544",
            "tweet_type": "API tips",
            "created_at": "2022-12-01T17:30:01.000Z"
        },
        {
            "id": 564,
            "username": "bbelderbos",
            "tweet_id": "1598562113852608512",
            "tweet_text": "What's coming on the @Pybites platform? An SQLModel Learning Path!\n\nYou'll end up building an API to track your workouts. \n\nFixing all N exercises (probably ~6) you will be able to have this Streamlit front-end working with it ...\n\nAs excited as me?\n\n#project #python #coding https://t.co/zi3XLnhIEG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi87NeaWYAAkXnj.jpg\"]",
            "tweet_conversation_id": "1598562113852608512",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T06:18:02.000Z"
        },
        {
            "id": 563,
            "username": "bbelderbos",
            "tweet_id": "1598563798339788800",
            "tweet_text": "I wrote a code tip image API ~ a year ago, but never really \"finished\" a decent first version. \n\nI did last week and made the repo public so we can all learn + contribute:\nhttps://t.co/f4ey34xpy7\n\nFastAPI, SQLModel, Alembic, Pybites-carbon, boto3, and more ...\n \n#python #project https://t.co/aIkHr94v14",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi870vyX0AYd5ne.jpg\"]",
            "tweet_conversation_id": "1598563798339788800",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T06:24:44.000Z"
        },
        {
            "id": 562,
            "username": "bbelderbos",
            "tweet_id": "1598595496666624002",
            "tweet_text": "A debugging tale https://t.co/tiJumOpp0z",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598595496666624002",
            "tweet_type": "Others",
            "created_at": "2022-12-02T08:30:41.000Z"
        },
        {
            "id": 381,
            "username": "bascodes",
            "tweet_id": "1598629868119330816",
            "tweet_text": "I might have missed something because of vacation, but there are still some interesting articles and projects I found #ThisWeekInPython\ud83d\udc0d\n\nHappy weekend! \ud83e\udd73",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:16.000Z"
        },
        {
            "id": 380,
            "username": "bascodes",
            "tweet_id": "1598629870023712768",
            "tweet_text": "The Origins of Python \u2013 suggested by @s_gruppetta_ct\nhttps://t.co/QXXzJ3QelO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:16.000Z"
        },
        {
            "id": 379,
            "username": "bascodes",
            "tweet_id": "1598629872334770178",
            "tweet_text": "Developing and Testing an Asynchronous API with FastAPI and Pytest \u2013\u00a0by @mikeherman\nhttps://t.co/SCmqdxzLDK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:17.000Z"
        },
        {
            "id": 378,
            "username": "bascodes",
            "tweet_id": "1598629874108956673",
            "tweet_text": "Data-oriented Programming in Python\nhttps://t.co/6O6rGqxOWS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:17.000Z"
        },
        {
            "id": 377,
            "username": "bascodes",
            "tweet_id": "1598629875866370051",
            "tweet_text": "Python bytecode explained\nhttps://t.co/Vf4461jlsK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:18.000Z"
        },
        {
            "id": 376,
            "username": "bascodes",
            "tweet_id": "1598629878978732032",
            "tweet_text": "I/O is no longer the bottleneck\nhttps://t.co/v2fxLAK8eB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:18.000Z"
        },
        {
            "id": 375,
            "username": "bascodes",
            "tweet_id": "1598629881151111168",
            "tweet_text": "py-obsidianmd \u2013 Python utilities for the personal knowledge management tool Obsidian \nhttps://t.co/RXdkW7y1ur",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:19.000Z"
        },
        {
            "id": 374,
            "username": "bascodes",
            "tweet_id": "1598629883483082753",
            "tweet_text": "auto-editor \u2013 Auto-Editor: Effort free video editing \u2013 suggested by @learn_byexample\nhttps://t.co/w673Bh67E6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:19.000Z"
        },
        {
            "id": 373,
            "username": "bascodes",
            "tweet_id": "1598629885441875970",
            "tweet_text": "repo2docker \u2013 Turn repositories into Jupyter-enabled Docker images \u2013 suggested by @BhavaniRavi_\nhttps://t.co/kKG5k1cAjO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:20.000Z"
        },
        {
            "id": 372,
            "username": "bascodes",
            "tweet_id": "1598629887295688709",
            "tweet_text": "quickadd \u2013 Parse natural language time and date expressions in python \u2013\u00a0by @acreom\nhttps://t.co/tR7fhkd7mT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:20.000Z"
        },
        {
            "id": 371,
            "username": "bascodes",
            "tweet_id": "1598629889292189696",
            "tweet_text": "django-virtual-models \u2013 Improve performance and maintainability with a prefetching layer in your Django project \u2013 by @vintasoftware\nhttps://t.co/clmGgHRkhl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:21.000Z"
        },
        {
            "id": 370,
            "username": "bascodes",
            "tweet_id": "1598629891876036609",
            "tweet_text": "+++\nFollow #ThisWeekInPython on my blog, too \ud83d\udc47\n+++\nhttps://t.co/8atXj2r8LM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:21.000Z"
        },
        {
            "id": 369,
            "username": "bascodes",
            "tweet_id": "1598629894237233152",
            "tweet_text": "And, remember to subscribe to my newsletter\n\nhttps://t.co/TdYEGQdzVB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598629868119330816",
            "tweet_type": "Others",
            "created_at": "2022-12-02T10:47:22.000Z"
        },
        {
            "id": 561,
            "username": "bbelderbos",
            "tweet_id": "1598648381504720897",
            "tweet_text": "Going live next week ... https://t.co/j6CxNwiMHy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598648381504720897",
            "tweet_type": "Others",
            "created_at": "2022-12-02T12:00:50.000Z"
        },
        {
            "id": 560,
            "username": "bbelderbos",
            "tweet_id": "1598651955605372928",
            "tweet_text": "Extract Method makes your code more reusable and readable. Here is one I did today ...\n\n#python #refactoring https://t.co/TbbqrfgnlW",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-NV6XXgAADnl2.jpg\"]",
            "tweet_conversation_id": "1598651955605372928",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T12:15:02.000Z"
        },
        {
            "id": 559,
            "username": "bbelderbos",
            "tweet_id": "1598663617506734080",
            "tweet_text": "How do you use imports in #Python?\n\nimport pathlib\n...\npathlib.Path(...\n\nor:\n\nfrom pathlib import Path\n...\nPath(...\n\n... and why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598663617506734080",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T13:01:22.000Z"
        },
        {
            "id": 1443,
            "username": "testdrivenio",
            "tweet_id": "1598671587015655424",
            "tweet_text": "Serving a Machine Learning Model with FastAPI and Streamlit\n\nhttps://t.co/vKor0Y75bX\n\nServe up a style transfer machine learning model with FastAPI and @StreamLit.\n\nby @amal_ytics \n\n#Python #FastAPI #MachineLearning",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598671587015655424",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:33:02.000Z"
        },
        {
            "id": 81,
            "username": "alexxubyte",
            "tweet_id": "1598714077714317314",
            "tweet_text": "/1 What is k8s (Kubernetes)?\n\nk8s is a container orchestration system. It is used for container deployment and management. Its design is greatly impacted by Google\u2019s internal system Borg. https://t.co/pmHMr4ABvl",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi_F-ncVUAAgnY7.jpg\"]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:21:53.000Z"
        },
        {
            "id": 80,
            "username": "alexxubyte",
            "tweet_id": "1598714081979924486",
            "tweet_text": "/2 A k8s cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node. [1]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:21:54.000Z"
        },
        {
            "id": 79,
            "username": "alexxubyte",
            "tweet_id": "1598714084437786635",
            "tweet_text": "/3 The worker node(s) host the Pods that are the components of the application workload. The control plane manages the worker nodes and the Pods in the cluster. [1]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:21:55.000Z"
        },
        {
            "id": 78,
            "username": "alexxubyte",
            "tweet_id": "1598714093182910464",
            "tweet_text": "/4 \ud83d\udd39 Control Plane Components\n\n1. API Server\nThe API server talks to all the components in the k8s cluster. All the operations on pods are executed by talking to the API server.\n\n2. Scheduler\nThe scheduler watches the workloads on pods and assigns loads on newly created pods. https://t.co/PIp2tTl9mF",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi_F_aUUAAUtCnx.jpg\"]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:21:57.000Z"
        },
        {
            "id": 77,
            "username": "alexxubyte",
            "tweet_id": "1598714103135993856",
            "tweet_text": "/5 3. Controller Manager\nThe controller manager runs the controllers, including Node Controller, Job Controller, EndpointSlice Controller, and ServiceAccount Controller.\n\n4. etcd\netcd is a key-value store used as Kubernetes' backing store for all cluster data. https://t.co/3RAG2z49v1",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi_GAAcUAAAjnmC.jpg\"]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:21:59.000Z"
        },
        {
            "id": 76,
            "username": "alexxubyte",
            "tweet_id": "1598714112573177869",
            "tweet_text": "/6 \ud83d\udd39 Nodes\n\n1. Pods\nA pod is a group of containers and is the smallest unit that k8s administers. Pods have a single IP address applied to every container within the pod.\n\n2. Kubelet\nAn agent that runs on each node in the cluster. It ensures containers are running in a Pod. [1] https://t.co/E2suH0Vh3v",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi_GAlGUAAAH7J_.jpg\"]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:22:01.000Z"
        },
        {
            "id": 75,
            "username": "alexxubyte",
            "tweet_id": "1598714116893310988",
            "tweet_text": "/7 3. Kube Proxy\nkube-proxy is a network proxy that runs on each node in your cluster. It routes traffic coming into a node from the service. It forwards requests for work to the correct containers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:22:02.000Z"
        },
        {
            "id": 74,
            "username": "alexxubyte",
            "tweet_id": "1598714119393116168",
            "tweet_text": "/8 \ud83d\udc49 Over to you: Do you know why Kubernetes is called \u201ck8s\u201d?\n\nReference:\n[1] https://t.co/AW8nRSfcms",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:22:03.000Z"
        },
        {
            "id": 73,
            "username": "alexxubyte",
            "tweet_id": "1598714121892962304",
            "tweet_text": "/9 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/2qfAfx6WqQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598714077714317314",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-02T16:22:03.000Z"
        },
        {
            "id": 1442,
            "username": "testdrivenio",
            "tweet_id": "1598731224238804993",
            "tweet_text": "API security tip:\n\nRedirect all HTTP traffic to HTTPS - you don't want to send unencrypted data around\n\n\ud83d\udc47 https://t.co/Cf5wnxAsoi",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi_VkweUAAAnAqx.png\"]",
            "tweet_conversation_id": "1598731224238804993",
            "tweet_type": "API tips",
            "created_at": "2022-12-02T17:30:01.000Z"
        },
        {
            "id": 368,
            "username": "bascodes",
            "tweet_id": "1598767325255061505",
            "tweet_text": "A programmer, a software engineer and a software developer walk into a bar\u2026",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598767325255061505",
            "tweet_type": "Others",
            "created_at": "2022-12-02T19:53:28.000Z"
        },
        {
            "id": 367,
            "username": "bascodes",
            "tweet_id": "1598767328967110657",
            "tweet_text": "How do you distinguish them?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598767325255061505",
            "tweet_type": "Others",
            "created_at": "2022-12-02T19:53:29.000Z"
        },
        {
            "id": 558,
            "username": "bbelderbos",
            "tweet_id": "1598808226245615632",
            "tweet_text": "No more need for \"with open(...\", you can use pathlib now \ud83d\udc0d\ud83d\ude0d https://t.co/QbCgXZ0ycw",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-11ZWWAAE78XH.png\"]",
            "tweet_conversation_id": "1598808226245615632",
            "tweet_type": "Others",
            "created_at": "2022-12-02T22:36:00.000Z"
        },
        {
            "id": 557,
            "username": "bbelderbos",
            "tweet_id": "1598862584458911746",
            "tweet_text": "Mocking out datetimes can be tough!\n\nSay you'd use @ patch('https://t.co/jlxAzSZ0ro', obj) in your test, only to have it break when the import in the code changes :(\n\nLuckily there is a library called FreezeGun that works around this issue by thoroughly faking #Python datetimes: https://t.co/5appfKaqa4",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-2VEfXwAMFXaz.jpg\"]",
            "tweet_conversation_id": "1598862584458911746",
            "tweet_type": "Python tips",
            "created_at": "2022-12-03T02:12:00.000Z"
        },
        {
            "id": 366,
            "username": "bascodes",
            "tweet_id": "1598918704200228864",
            "tweet_text": "Why do software developers prefer dark mode?\n\nBecause light attracts too many bugs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598918704200228864",
            "tweet_type": "Others",
            "created_at": "2022-12-03T05:55:00.000Z"
        },
        {
            "id": 72,
            "username": "alexxubyte",
            "tweet_id": "1599081380771557377",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39 Time-series DB\n\ud83d\udd39 ElasticSearch\n\ud83d\udd39 Types of Databases with Use Cases\n\ud83d\udd39 How HTTPS Works\n\ud83d\udd39 Non-functional Requirements\n\nSubscribe to our weekly newsletter to learn something new every week: https://t.co/0RYwcKv26q https://t.co/vmtYh5kn8s",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjEUClMVIAIw7h6.jpg\"]",
            "tweet_conversation_id": "1599081380771557377",
            "tweet_type": "Others",
            "created_at": "2022-12-03T16:41:25.000Z"
        },
        {
            "id": 1441,
            "username": "testdrivenio",
            "tweet_id": "1599093611689566209",
            "tweet_text": "API security tip:\n\nAdd HSTS header to your responses - it instructs the browser to strictly use HTTPS\n\n\ud83d\udc47 https://t.co/oqlE7xIfz7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjEfKfnaUAYzjYK.png\"]",
            "tweet_conversation_id": "1599093611689566209",
            "tweet_type": "API tips",
            "created_at": "2022-12-03T17:30:01.000Z"
        },
        {
            "id": 556,
            "username": "bbelderbos",
            "tweet_id": "1599101770398957568",
            "tweet_text": "I just completed \"Rucksack Reorganization\" - Day 3 - Advent of Code 2022 https://t.co/Y4XHlwVDiC #AdventOfCode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599101770398957568",
            "tweet_type": "Others",
            "created_at": "2022-12-03T18:02:26.000Z"
        },
        {
            "id": 555,
            "username": "bbelderbos",
            "tweet_id": "1599302754320588800",
            "tweet_text": "Favorite part is learning / getting inspiration from other solutions when solving the puzzle https://t.co/tWhJ7wb5pa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599302754320588800",
            "tweet_type": "Others",
            "created_at": "2022-12-04T07:21:04.000Z"
        },
        {
            "id": 554,
            "username": "bbelderbos",
            "tweet_id": "1599327164406542336",
            "tweet_text": "I just completed \"Camp Cleanup\" - Day 4 - Advent of Code 2022 https://t.co/Tb2tmGa3jR #AdventOfCode &lt;&lt; much fun so far, looking forward comparing solutions later today ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599327164406542336",
            "tweet_type": "Others",
            "created_at": "2022-12-04T08:58:04.000Z"
        },
        {
            "id": 365,
            "username": "bascodes",
            "tweet_id": "1599329501598519296",
            "tweet_text": "Why was the Python code always so easy to read?\nBecause it was \u201cwell-indented\u201d!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599329501598519296",
            "tweet_type": "Others",
            "created_at": "2022-12-04T09:07:21.000Z"
        },
        {
            "id": 364,
            "username": "bascodes",
            "tweet_id": "1599433093730942977",
            "tweet_text": "What are some common challenges that beginners face when learning #Python and how can they be overcome?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599433093730942977",
            "tweet_type": "Others",
            "created_at": "2022-12-04T15:59:00.000Z"
        },
        {
            "id": 1440,
            "username": "testdrivenio",
            "tweet_id": "1599456005561389056",
            "tweet_text": "API security tip:\n\nAdd rate limits to your API - reduce the ability to overwhelm your API with requests and consequently make it non-responsive\n\n\ud83d\udc47 https://t.co/DDQkdm7fHu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjJowmQVEAAkT1J.png\"]",
            "tweet_conversation_id": "1599456005561389056",
            "tweet_type": "API tips",
            "created_at": "2022-12-04T17:30:02.000Z"
        },
        {
            "id": 363,
            "username": "bascodes",
            "tweet_id": "1599506482671673344",
            "tweet_text": "1mn impressions and 1k new followers in November! \n\nThank you for my most successful month on Twitter!\n\nI want to get to know you better! How about a short coffee chat?\nWe can talk about\n\ud83e\uddd1\u200d\ud83d\udcbb Coding\n\ud83d\udc0d Python\n\u2601\ufe0f DevOps\n\ud83d\udc1d bees\n\ud83e\udd38 developer health\n\ud83c\udccf anything else?\n\nSend me a DM! https://t.co/wkIgmOc1Mp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjKWnTVXwAA3yYq.jpg\"]",
            "tweet_conversation_id": "1599506482671673344",
            "tweet_type": "Others",
            "created_at": "2022-12-04T20:50:37.000Z"
        },
        {
            "id": 553,
            "username": "bbelderbos",
            "tweet_id": "1599681870307827712",
            "tweet_text": "The string module makes it easy to get the ranges a-z + A-Z (and more) for use as constants.\n\n#python #tips https://t.co/oBHdt2oJS4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjM2H0TXwAECHUN.png\"]",
            "tweet_conversation_id": "1599681870307827712",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T08:27:33.000Z"
        },
        {
            "id": 552,
            "username": "bbelderbos",
            "tweet_id": "1599687028064804864",
            "tweet_text": "Python makes talking about code easier.\n\nE.g. how do you call these things dir() just listed? \n\nOften you can just say \"objects\", because in #Python everything is an object :)\n\nMeaning: https://t.co/cqT57Gg0Pk\n\n#pythonmusings",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599687028064804864",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T08:48:02.000Z"
        },
        {
            "id": 551,
            "username": "bbelderbos",
            "tweet_id": "1599694963453087745",
            "tweet_text": "You should not shadow #Python keywords, but I just really wanted to use from and to in my code. \n\nPossible workaround: append an _ to the variable names, so from_ and to_ (or think a bit harder if you can use a more descriptive variable names).\n\n#pybobtips",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599694963453087745",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T09:19:34.000Z"
        },
        {
            "id": 550,
            "username": "bbelderbos",
            "tweet_id": "1599695888259039233",
            "tweet_text": "Another use of the underscore is a \"throwaway variable\".\n\nIf you just want to do something N times, without the need of using a loop variable, you can use the range() built-in like this: https://t.co/AiINAUqe71 https://t.co/ngCQpFa1ZE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjNCz40XwAEwHoy.png\"]",
            "tweet_conversation_id": "1599695888259039233",
            "tweet_type": "Others",
            "created_at": "2022-12-05T09:23:15.000Z"
        },
        {
            "id": 549,
            "username": "bbelderbos",
            "tweet_id": "1599709826325487616",
            "tweet_text": "Thanks @aj_kerrigan for showing my (through AoC) that this particular snippet can be shortened to:\n\n&gt;&gt;&gt; string.ascii_letters\n'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599681870307827712",
            "tweet_type": "Others",
            "created_at": "2022-12-05T10:18:38.000Z"
        },
        {
            "id": 362,
            "username": "bascodes",
            "tweet_id": "1599716555876540416",
            "tweet_text": "After some Python\ud83d\udc0d quizzes last week, let\u2019s try another one with pandas \ud83d\udc3c\n\nWithout trying, can you guess what the output will be? https://t.co/hOLQ4ujwKu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjNVjawXEAIrPt8.jpg\"]",
            "tweet_conversation_id": "1599716555876540416",
            "tweet_type": "Others",
            "created_at": "2022-12-05T10:45:22.000Z"
        },
        {
            "id": 361,
            "username": "bascodes",
            "tweet_id": "1599738570813558784",
            "tweet_text": "I added socketify by @cirospaciari in a recent issue of #ThisWeekInPython\ud83d\udc0d. Now, I've had a closer look\n\nIt is an excellent opportunity to look at PyPy, too!\n\nIf you're looking for an open-source project to contribute, you should give this one a try (it's quite advanced, though)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599738570813558784",
            "tweet_type": "Others",
            "created_at": "2022-12-05T12:12:51.000Z"
        },
        {
            "id": 360,
            "username": "bascodes",
            "tweet_id": "1599738573099479040",
            "tweet_text": "https://t.co/1WNsZntOEa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599738570813558784",
            "tweet_type": "Others",
            "created_at": "2022-12-05T12:12:52.000Z"
        },
        {
            "id": 548,
            "username": "bbelderbos",
            "tweet_id": "1599742130074828801",
            "tweet_text": "What is you want to find the common element(s) across more than two sets? \n\nYou can &amp; multiple sets or use set.intersection().\n\n#python #tips https://t.co/cqfgfQHIPp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjM2cigXgAIesyX.png\"]",
            "tweet_conversation_id": "1599742130074828801",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T12:27:00.000Z"
        },
        {
            "id": 1439,
            "username": "testdrivenio",
            "tweet_id": "1599764181258932224",
            "tweet_text": "Automatically Retrying Failed Celery Tasks\n\nhttps://t.co/KNDSZotKVU \n\nCovers how to:\n\n1\u20e3Retry a failed #Celery task (retry method and a decorator argument)\n2\u20e3Use exponential backoff \n3\u20e3Use a class-based task to reuse retry arguments (super cool!)\n\n#Django #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599764181258932224",
            "tweet_type": "Others",
            "created_at": "2022-12-05T13:54:37.000Z"
        },
        {
            "id": 359,
            "username": "bascodes",
            "tweet_id": "1599785253065097218",
            "tweet_text": "Tomorrow, I'll send out my newsletter \ud83d\udce4\n\nTopics in this issue:\n\u2022 \ud83e\udd16 Artificial Intelligence\n\u2022 \ud83d\udcc9 Tech Layoffs\n\u2022 \ud83d\udc68\u200d\ud83d\udcbb some personal insights by @driscollis\n\nDon't forget to subscribe \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599785253065097218",
            "tweet_type": "Others",
            "created_at": "2022-12-05T15:18:21.000Z"
        },
        {
            "id": 358,
            "username": "bascodes",
            "tweet_id": "1599785255283863552",
            "tweet_text": "https://t.co/TdYEGPWwTB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599785253065097218",
            "tweet_type": "Others",
            "created_at": "2022-12-05T15:18:22.000Z"
        },
        {
            "id": 71,
            "username": "alexxubyte",
            "tweet_id": "1599801032061558784",
            "tweet_text": "/1 \ud835\udc13\ud835\udc22\ud835\udc26\ud835\udc1e-\ud835\udc12\ud835\udc1e\ud835\udc2b\ud835\udc22\ud835\udc1e\ud835\udc2c \ud835\udc03\ud835\udc01 (TSDB) in 20 lines. What is \ud835\udc13\ud835\udc22\ud835\udc26\ud835\udc1e-\ud835\udc12\ud835\udc1e\ud835\udc2b\ud835\udc22\ud835\udc1e\ud835\udc2c \ud835\udc03\ud835\udc01 (TSDB)? How is it \ud835\udc1d\ud835\udc22\ud835\udc1f\ud835\udc1f\ud835\udc1e\ud835\udc2b\ud835\udc1e\ud835\udc27\ud835\udc2d from Relational DB? https://t.co/fz6n47Zy2c",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOijrrVIAArinX.jpg\"]",
            "tweet_conversation_id": "1599801032061558784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-05T16:21:03.000Z"
        },
        {
            "id": 70,
            "username": "alexxubyte",
            "tweet_id": "1599801036603916290",
            "tweet_text": "/2 A couple of weeks ago, I had a great discussion with the CEO of TDengine @jhtao about time-series databases. This sparked my interest in learning more about this topic. The diagram below shows the \ud835\udc22\ud835\udc27\ud835\udc2d\ud835\udc1e\ud835\udc2b\ud835\udc27\ud835\udc1a\ud835\udc25 \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a \ud835\udc26\ud835\udc28\ud835\udc1d\ud835\udc1e\ud835\udc25 of a typical Time-Series DB.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599801032061558784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-05T16:21:04.000Z"
        },
        {
            "id": 69,
            "username": "alexxubyte",
            "tweet_id": "1599801045084798983",
            "tweet_text": "/3 A TSDB is a database optimized for time series data.\n\n\ud83d\udd39 From the users\u2019 perspective, the data looks similar to the relational DB table. But behind the scenes, the weather table is stored in 4 TSMs (Time-Structured Merge Trees) in the format of [Measurement, Tag, Field Name]. https://t.co/wg0j7pqBrd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOikVsUAAgoYW2.jpg\"]",
            "tweet_conversation_id": "1599801032061558784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-05T16:21:06.000Z"
        },
        {
            "id": 68,
            "username": "alexxubyte",
            "tweet_id": "1599801049140690949",
            "tweet_text": "/4 \ud83d\udd39 In this way, we can quickly aggregate and analyze data based on time and tags.\n\n\ud83d\udd39 Typical usage:\n- Trades and market data updates in a market\n- Server metrics\n- Application performance monitoring\n- Network data\n- Sensor data\n- Events\n- Clicks streams",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599801032061558784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-05T16:21:07.000Z"
        },
        {
            "id": 67,
            "username": "alexxubyte",
            "tweet_id": "1599801051615416320",
            "tweet_text": "/5 \ud83d\udc49 Over to you: Have you used TSDB before, and what did you use it for? What\u2019s your favorite TSDB?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599801032061558784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-05T16:21:08.000Z"
        },
        {
            "id": 547,
            "username": "bbelderbos",
            "tweet_id": "1599815231957409792",
            "tweet_text": "If you want to add extra attributes when saving a Django ModelForm, you can save the form with \"commit=False\".\n\nI commonly use this to set a foreign key field, see example below.\n\n#Django #pybobtips https://t.co/YuZ0yTg2nL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOvdyhXwA4IVCX.jpg\"]",
            "tweet_conversation_id": "1599815231957409792",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:17:29.000Z"
        },
        {
            "id": 1438,
            "username": "testdrivenio",
            "tweet_id": "1599818386971631616",
            "tweet_text": "Python tip:\n\nYou can set flush=True for the print() function to avoid buffering the output data and forcibly flush it - to see it in the terminal output right away\n\n\ud83d\udc47 https://t.co/PyYlTHbFQj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOyV_baYAAKl1u.png\"]",
            "tweet_conversation_id": "1599818386971631616",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T17:30:01.000Z"
        },
        {
            "id": 357,
            "username": "bascodes",
            "tweet_id": "1599862812939276288",
            "tweet_text": "That's it \u2013 I'm done\n\nPython is the worst language",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599862812939276288",
            "tweet_type": "Others",
            "created_at": "2022-12-05T20:26:33.000Z"
        },
        {
            "id": 356,
            "username": "bascodes",
            "tweet_id": "1599862817481293824",
            "tweet_text": "apart from all the others",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599862812939276288",
            "tweet_type": "Others",
            "created_at": "2022-12-05T20:26:34.000Z"
        },
        {
            "id": 546,
            "username": "bbelderbos",
            "tweet_id": "1599865047219462144",
            "tweet_text": "I just completed \"Supply Stacks\" - Day 5 - Advent of Code 2022 https://t.co/D0FwYACUpW #AdventOfCode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599865047219462144",
            "tweet_type": "Others",
            "created_at": "2022-12-05T20:35:25.000Z"
        },
        {
            "id": 355,
            "username": "bascodes",
            "tweet_id": "1600002022220206086",
            "tweet_text": "\ud83d\udca1\ud83d\udc1a Want to become a wizard on your command line? \ud83e\uddd9\n\nHere are 14 CLI tools to boost your productivity as a developer\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:43.000Z"
        },
        {
            "id": 354,
            "username": "bascodes",
            "tweet_id": "1600002026116718592",
            "tweet_text": "autojump is a tool that learns your most frequented directories and allows you to switch to them by using a shortcut.\nhttps://t.co/jOzLLqA0dQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:44.000Z"
        },
        {
            "id": 353,
            "username": "bascodes",
            "tweet_id": "1600002030059372546",
            "tweet_text": "exa is a modern replacement for `ls` with very nice outputs.\nhttps://t.co/QI4FrNuCAm https://t.co/7FylFl9qoE",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjRXyqWWIAAebs-.mp4\"]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:45.000Z"
        },
        {
            "id": 352,
            "username": "bascodes",
            "tweet_id": "1600002034501144576",
            "tweet_text": "You can use `pbcopy` and `pbpaste` to pipe the output of your commands to your clipboard and read from there https://t.co/m6kINcCFSr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjRX0GfWIAEP_hi.jpg\"]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:46.000Z"
        },
        {
            "id": 351,
            "username": "bascodes",
            "tweet_id": "1600002038875783168",
            "tweet_text": "tldr is a collection of cheat sheets for console commands.\nhttps://t.co/nkwC25JM3I https://t.co/cUCNlcCL2b",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjRX0UdWYAM-856.mp4\"]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:47.000Z"
        },
        {
            "id": 350,
            "username": "bascodes",
            "tweet_id": "1600002043225178112",
            "tweet_text": "With howdoi you can browse the internet for coding snippets right from your terminal.\nhttps://t.co/2ZmPvI9LHI https://t.co/L17vSmCWW3",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjRX1w3XgAEXdVf.mp4\"]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:48.000Z"
        },
        {
            "id": 349,
            "username": "bascodes",
            "tweet_id": "1600002047625019392",
            "tweet_text": "rebound is a command-line tool that instantly fetches Stack Overflow results when an exception in your Python code is thrown.\nhttps://t.co/ar31noqv3m https://t.co/zrgeL2gkkV",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjRX3TNXgAAle8O.mp4\"]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:49.000Z"
        },
        {
            "id": 348,
            "username": "bascodes",
            "tweet_id": "1600002052561723395",
            "tweet_text": "jq handles JSON on the command line.\nhttps://t.co/QTcA76BVIJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:50.000Z"
        },
        {
            "id": 347,
            "username": "bascodes",
            "tweet_id": "1600002056600932353",
            "tweet_text": "icdiff is a visual diffing tool for your terminal.\nhttps://t.co/oCtSnPy5QY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:51.000Z"
        },
        {
            "id": 346,
            "username": "bascodes",
            "tweet_id": "1600002060572827649",
            "tweet_text": "Think of peco as a real-time `grep`.\nhttps://t.co/pewOvXSh9K",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:52.000Z"
        },
        {
            "id": 345,
            "username": "bascodes",
            "tweet_id": "1600002064582688768",
            "tweet_text": "ack is like `grep` but faster and more user friendly.\nhttps://t.co/HVXXwiwEcO https://t.co/CKoYLwr2aG",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjRZR5HXgAEbpu9.mp4\"]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:53.000Z"
        },
        {
            "id": 344,
            "username": "bascodes",
            "tweet_id": "1600002069036933120",
            "tweet_text": "httpie is like postman in your console window.\nhttps://t.co/kRaBaEC18B",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:54.000Z"
        },
        {
            "id": 343,
            "username": "bascodes",
            "tweet_id": "1600002072929353729",
            "tweet_text": "pgcli is like DataGrip on your terminal.\nhttps://t.co/99k017108Q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:55.000Z"
        },
        {
            "id": 342,
            "username": "bascodes",
            "tweet_id": "1600002076851019776",
            "tweet_text": "tig is a visual git client on the console.\nhttps://t.co/xAGUa2MvTU https://t.co/qA6xNVH1Hu",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjRZTfIWYAEFoR5.mp4\"]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:56.000Z"
        },
        {
            "id": 341,
            "username": "bascodes",
            "tweet_id": "1600002082500583424",
            "tweet_text": "ttygif is a tool to create animated gifs from your terminal sessions.\nhttps://t.co/j5xXc5AsWQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:57.000Z"
        },
        {
            "id": 340,
            "username": "bascodes",
            "tweet_id": "1600002086653018112",
            "tweet_text": "Here is the full list of modern CLI tools for devs:\nhttps://t.co/H9yn3nL1u8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600002022220206086",
            "tweet_type": "Others",
            "created_at": "2022-12-06T05:39:58.000Z"
        },
        {
            "id": 545,
            "username": "bbelderbos",
            "tweet_id": "1600024047294844928",
            "tweet_text": "Make a namedtuple with type hints \ud83d\ude0d\n\n#pybobtips https://t.co/HSjOTiQrL9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjRtC4OX0AM6RsK.jpg\"]",
            "tweet_conversation_id": "1600024047294844928",
            "tweet_type": "Others",
            "created_at": "2022-12-06T07:07:14.000Z"
        },
        {
            "id": 339,
            "username": "bascodes",
            "tweet_id": "1600031033826516992",
            "tweet_text": "\ud83c\udf85 Hohoho!\n#NewProfilePic https://t.co/UzrFRYSbTi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjP-860WYAI6jl6.jpg\"]",
            "tweet_conversation_id": "1600031033826516992",
            "tweet_type": "Others",
            "created_at": "2022-12-06T07:35:00.000Z"
        },
        {
            "id": 544,
            "username": "bbelderbos",
            "tweet_id": "1600033707913613312",
            "tweet_text": "I just completed \"Tuning Trouble\" - Day 6 - Advent of Code 2022 https://t.co/kxUT834tgq #AdventOfCode &lt; easier than yesterday :)\n\nStarted using template == saves time!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600033707913613312",
            "tweet_type": "Others",
            "created_at": "2022-12-06T07:45:37.000Z"
        },
        {
            "id": 338,
            "username": "bascodes",
            "tweet_id": "1600120104137752579",
            "tweet_text": "Everyone is talking about AI right now.\n\nAnd you can learn to master it!\n\nHere are 7\ufe0f\u20e3 free resources to learn AI with Python\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:28:56.000Z"
        },
        {
            "id": 337,
            "username": "bascodes",
            "tweet_id": "1600120141634846720",
            "tweet_text": "1\ufe0f\u20e3 General Introduction to Python by Google\nhttps://t.co/kewzdJV16e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:29:05.000Z"
        },
        {
            "id": 336,
            "username": "bascodes",
            "tweet_id": "1600120148454567936",
            "tweet_text": "2\ufe0f\u20e3 100 Page Python Intro by @learn_byexample\nhttps://t.co/r4ty4Ggxa7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:29:06.000Z"
        },
        {
            "id": 335,
            "username": "bascodes",
            "tweet_id": "1600120158105763842",
            "tweet_text": "3\ufe0f\u20e3 Free Harvard course on AI with Python\nhttps://t.co/5ZHDe6Oxoz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:29:09.000Z"
        },
        {
            "id": 334,
            "username": "bascodes",
            "tweet_id": "1600120170827096066",
            "tweet_text": "4\ufe0f\u20e3 @freeCodeCamp intro to scientific computing with Python\nhttps://t.co/PceAKvM9QI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:29:12.000Z"
        },
        {
            "id": 333,
            "username": "bascodes",
            "tweet_id": "1600120182978011137",
            "tweet_text": "5\ufe0f\u20e3 TensorFlow is one of the most popular ML libraries. And they have good learning resources\nhttps://t.co/plD6AWO1fp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:29:15.000Z"
        },
        {
            "id": 332,
            "username": "bascodes",
            "tweet_id": "1600120190993301504",
            "tweet_text": "6\ufe0f\u20e3 scikit-learn is another important library \u2013 try it out here:\nhttps://t.co/ynjlSNqmEk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:29:16.000Z"
        },
        {
            "id": 331,
            "username": "bascodes",
            "tweet_id": "1600120196118810624",
            "tweet_text": "7\ufe0f\u20e3 Keras is a deep learning library built on top of Tensorflow. Start here:\nhttps://t.co/SqZfAreglU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600120104137752579",
            "tweet_type": "Others",
            "created_at": "2022-12-06T13:29:18.000Z"
        },
        {
            "id": 330,
            "username": "bascodes",
            "tweet_id": "1600127976804417536",
            "tweet_text": "Newsletter goes out in two hours\n\nDon't miss this issue:\n\u2022 \ud83e\udd16 Artificial Intelligence\n\u2022 \ud83d\udcc9 Tech Layoffs\n\u2022 \ud83d\udc68\u200d\ud83d\udcbb some personal insights by @driscollis\n\nSubscribe here \ud83d\udc47\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600127976804417536",
            "tweet_type": "Others",
            "created_at": "2022-12-06T14:00:13.000Z"
        },
        {
            "id": 66,
            "username": "alexxubyte",
            "tweet_id": "1600169523453100044",
            "tweet_text": "/1 \ud835\udc07\ud835\udc28\ud835\udc30 \ud835\udc1d\ud835\udc28 \ud835\udc30\ud835\udc1e \ud835\udc25\ud835\udc1e\ud835\udc1a\ud835\udc2b\ud835\udc27 \ud835\udc04\ud835\udc25\ud835\udc1a\ud835\udc2c\ud835\udc2d\ud835\udc22\ud835\udc1c\ud835\udc12\ud835\udc1e\ud835\udc1a\ud835\udc2b\ud835\udc1c\ud835\udc21?\n\nBased on the Lucene library, Elasticsearch provides search capabilities. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface. The diagram below shows the outline. https://t.co/POAcFxNshE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjTxsyHUAAM3qD4.jpg\"]",
            "tweet_conversation_id": "1600169523453100044",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-06T16:45:18.000Z"
        },
        {
            "id": 65,
            "username": "alexxubyte",
            "tweet_id": "1600169532449882115",
            "tweet_text": "/2 Features of ElasticSearch:\n\ud83d\udd39 Real-time full-text search\n\ud83d\udd39 Analytics engine\n\ud83d\udd39 Distributed Lucene\n\nElasticSearch use cases:\n\ud83d\udd39 Product search on an eCommerce website\n\ud83d\udd39 Log analysis\n\ud83d\udd39 Auto completer, spell checker\n\ud83d\udd39 Business intelligence analysis\n\ud83d\udd39 Full-text search https://t.co/UGvyKHQVAd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjTxtLgUABEtffY.jpg\"]",
            "tweet_conversation_id": "1600169523453100044",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-06T16:45:20.000Z"
        },
        {
            "id": 64,
            "username": "alexxubyte",
            "tweet_id": "1600169536459636742",
            "tweet_text": "/3 \ud83d\udd39 Full-text search on StackOverflow\n\nThe core of ElasticSearch lies in the data structure and indexing. It is important to understand how ES builds the \ud835\udc2d\ud835\udc1e\ud835\udc2b\ud835\udc26 \ud835\udc1d\ud835\udc22\ud835\udc1c\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\ud835\udc1a\ud835\udc2b\ud835\udc32 using \ud835\udc0b\ud835\udc12\ud835\udc0c \ud835\udc13\ud835\udc2b\ud835\udc1e\ud835\udc1e (Log-Strucutured Merge Tree).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600169523453100044",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-06T16:45:21.000Z"
        },
        {
            "id": 63,
            "username": "alexxubyte",
            "tweet_id": "1600169538913304585",
            "tweet_text": "/4 \ud83d\udc49 Over to you: Have you used ElasticSearch in your project, and what is it for?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600169523453100044",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-06T16:45:22.000Z"
        },
        {
            "id": 62,
            "username": "alexxubyte",
            "tweet_id": "1600169541278892046",
            "tweet_text": "/5 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/b25k93oqJ1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600169523453100044",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-06T16:45:23.000Z"
        },
        {
            "id": 1437,
            "username": "testdrivenio",
            "tweet_id": "1600180775516635137",
            "tweet_text": "Django tip:\n\nIf you want to display alternate text when a variable has no value, you can use \"default\" filter instead of \"if\". \ud83d\udc47 https://t.co/Icl0gKRqTX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjT77vJagAAxViR.png\"]",
            "tweet_conversation_id": "1600180775516635137",
            "tweet_type": "Django tips",
            "created_at": "2022-12-06T17:30:01.000Z"
        },
        {
            "id": 61,
            "username": "alexxubyte",
            "tweet_id": "1600182713994002433",
            "tweet_text": "Congratulations @kinlane and @getpostman! I know you have been working on this for a while. Cannot wait to get a copy! https://t.co/xpZoMKDBWW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600182713994002433",
            "tweet_type": "Others",
            "created_at": "2022-12-06T17:37:43.000Z"
        },
        {
            "id": 329,
            "username": "bascodes",
            "tweet_id": "1600436470803636224",
            "tweet_text": "PHP or Python?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600436470803636224",
            "tweet_type": "Others",
            "created_at": "2022-12-07T10:26:03.000Z"
        },
        {
            "id": 328,
            "username": "bascodes",
            "tweet_id": "1600484784618278912",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Technical Debt, Clean Code, Design Patterns: \nComplex stuff just for \"Senior\" Python developers?\n\nNo! Here are 7\ufe0f\u20e3 tips for writing cleaner Python code:\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T13:38:02.000Z"
        },
        {
            "id": 327,
            "username": "bascodes",
            "tweet_id": "1600484788632174592",
            "tweet_text": "Use descriptive variable names. https://t.co/CwnEJ4i6Ne",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYQZhOXEAMAAVb.jpg\"]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:03.000Z"
        },
        {
            "id": 326,
            "username": "bascodes",
            "tweet_id": "1600484793279516674",
            "tweet_text": "Naming things should be consistent in your code base https://t.co/9PGym1jF9m",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYQZ0wXgAIwwGB.jpg\"]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:04.000Z"
        },
        {
            "id": 325,
            "username": "bascodes",
            "tweet_id": "1600484799629897728",
            "tweet_text": "Keep your functions/methods small and make sure they do only one thing https://t.co/Bd67S1O9Ma",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYQaFWWQAATlzm.jpg\"]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:06.000Z"
        },
        {
            "id": 324,
            "username": "bascodes",
            "tweet_id": "1600484805631791105",
            "tweet_text": "Don't overuse parameters in your functions, and avoid boolean flags that alter a function's behaviour https://t.co/VdbbsQNPVD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYQaZcWIAE1s4p.jpg\"]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:07.000Z"
        },
        {
            "id": 323,
            "username": "bascodes",
            "tweet_id": "1600484811273019393",
            "tweet_text": "Know your tools! Don't replicate features that are already available in your programming language https://t.co/7EerkIRWBM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYQau3X0AQdfLZ.jpg\"]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:09.000Z"
        },
        {
            "id": 322,
            "username": "bascodes",
            "tweet_id": "1600484817073852417",
            "tweet_text": "Optimize your code for readability, not for cleverness https://t.co/dzOGFb00hE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYQbDyXwAEYkP_.jpg\"]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:10.000Z"
        },
        {
            "id": 321,
            "username": "bascodes",
            "tweet_id": "1600484822182404097",
            "tweet_text": "On the other hand, shortcuts can enhance readability in some cases https://t.co/sq38uiPvii",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYQbYcWIAIBSXv.jpg\"]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:11.000Z"
        },
        {
            "id": 320,
            "username": "bascodes",
            "tweet_id": "1600484827484065793",
            "tweet_text": "If you liked these tips for cleaner Python code, you can follow me @bascodes for more Python tips and tricks!\n\nHelp others write better Python code by retweeting the first tweet in this thread  \ud83d\udc47\nhttps://t.co/dvU7C2UGjb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600484784618278912",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:38:13.000Z"
        },
        {
            "id": 319,
            "username": "bascodes",
            "tweet_id": "1600526535672348680",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Look closely! How many items are in the list\u2049\ufe0f \n#Python can be tricky sometimes! https://t.co/Z7m4RtuIhQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjY2Zo3WYAEYi1p.jpg\"]",
            "tweet_conversation_id": "1600526535672348680",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T16:23:57.000Z"
        },
        {
            "id": 1436,
            "username": "testdrivenio",
            "tweet_id": "1600528067906375681",
            "tweet_text": "Django tip:\n\nIf you want to create a clickable link in your template, use \"urlize\" filter instead of rendering the same text twice (once for &lt;a&gt; tag and once for text).\n\ud83d\udc47 https://t.co/6q5U5aTRoI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjY3yziVUAkmruu.png\"]",
            "tweet_conversation_id": "1600528067906375681",
            "tweet_type": "Django tips",
            "created_at": "2022-12-07T16:30:02.000Z"
        },
        {
            "id": 60,
            "username": "alexxubyte",
            "tweet_id": "1600528222390669315",
            "tweet_text": "/1 How do you decide which type of database to use?\n\nThere are hundreds or even thousands of databases available today, such as Oracle, MySQL, MariaDB, SQLite, PostgreSQL, Redis, ClickHouse, MongoDB, S3, Ceph, etc. How do you select the architecture for your system? https://t.co/gce7f0Iekn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjY37sAVUAA95ii.jpg\"]",
            "tweet_conversation_id": "1600528222390669315",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-07T16:30:39.000Z"
        },
        {
            "id": 59,
            "username": "alexxubyte",
            "tweet_id": "1600528234495430656",
            "tweet_text": "/2 My short summary is as follows:\n\ud83d\udd39Relational database. Almost anything could be solved by them.\n\ud83d\udd39In-memory store. Their speed and limited data size make them ideal for fast operations.\n\ud83d\udd39Time-series database. Store and manage time-stamped data. https://t.co/usmXNTAItW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjY38RdVUA0OAcp.jpg\"]",
            "tweet_conversation_id": "1600528222390669315",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-07T16:30:42.000Z"
        },
        {
            "id": 58,
            "username": "alexxubyte",
            "tweet_id": "1600528245807468549",
            "tweet_text": "/3 \ud83d\udd39Graph database. It is suitable for complex relationships between unstructured objects.\n\ud83d\udd39Document store. They are good for large immutable data.\n\ud83d\udd39Wide column store. They are usually used for big data, analytics, reporting, etc., which needs denormalized data. https://t.co/CzceUXHuz7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjY388nVUAcgRLB.jpg\"]",
            "tweet_conversation_id": "1600528222390669315",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-07T16:30:44.000Z"
        },
        {
            "id": 57,
            "username": "alexxubyte",
            "tweet_id": "1600528250706415617",
            "tweet_text": "/4 \ud83d\udc49 Over to you: Obviously, I did not cover every type of database. Is there anything else you often use, and why do you choose it?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600528222390669315",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-07T16:30:46.000Z"
        },
        {
            "id": 56,
            "username": "alexxubyte",
            "tweet_id": "1600528253109751813",
            "tweet_text": "/5 Subscribe to my weekly system design newsletter (10-min read): https://t.co/cL9Q6tUTac",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600528222390669315",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-07T16:30:46.000Z"
        },
        {
            "id": 55,
            "username": "alexxubyte",
            "tweet_id": "1600528255563419652",
            "tweet_text": "/6 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/g9LHqKwG6i",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600528222390669315",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-07T16:30:47.000Z"
        },
        {
            "id": 318,
            "username": "bascodes",
            "tweet_id": "1600746473615986691",
            "tweet_text": "What interesting articles or projects did you stumble upon this week?\n\nI'd be happy to include them in tomorrow's issue of #ThisWeekInPython\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600746473615986691",
            "tweet_type": "Others",
            "created_at": "2022-12-08T06:57:54.000Z"
        },
        {
            "id": 54,
            "username": "alexxubyte",
            "tweet_id": "1600762075055214592",
            "tweet_text": "Edit: Change \"Document store\" to \"Object store\" https://t.co/poNz1q4O6R",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjcMh15UUAE4WLN.jpg\"]",
            "tweet_conversation_id": "1600528222390669315",
            "tweet_type": "Others",
            "created_at": "2022-12-08T07:59:54.000Z"
        },
        {
            "id": 543,
            "username": "bbelderbos",
            "tweet_id": "1600798880731652096",
            "tweet_text": "I've completed \"Treetop Tree House\" - Day 8 - Advent of Code 2022 https://t.co/Kms7kC058U #AdventOfCode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600798880731652096",
            "tweet_type": "Others",
            "created_at": "2022-12-08T10:26:09.000Z"
        },
        {
            "id": 542,
            "username": "bbelderbos",
            "tweet_id": "1600799036755578880",
            "tweet_text": "This week we talk about #developer #mindfulness https://t.co/AllZ6kBo7Q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600799036755578880",
            "tweet_type": "Others",
            "created_at": "2022-12-08T10:26:46.000Z"
        },
        {
            "id": 53,
            "username": "alexxubyte",
            "tweet_id": "1600892447994695684",
            "tweet_text": "Discover the power of HTTPS and how it keeps your online information safe. Learn the basics in just a few minutes.\n\nThe original video from 6 months ago had a few audio issues, so we redid the audio and the animation. Hope you like it.\n\nWatch now on YT: https://t.co/RQWdMGnOy0 https://t.co/FHaZeUTzoF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjeDMeQUAAAXix-.jpg\"]",
            "tweet_conversation_id": "1600892447994695684",
            "tweet_type": "Others",
            "created_at": "2022-12-08T16:37:57.000Z"
        },
        {
            "id": 1435,
            "username": "testdrivenio",
            "tweet_id": "1600905552015503362",
            "tweet_text": "Python tip:\n\nDon't use pip freeze &gt; requirements.txt.\nYou'll end up with dozens of dependencies you didn't purposefully install and don't know what they do.\n\nInstead, add the requirement manually in requirements.txt. \n\nCompare the two \ud83d\udc47 https://t.co/KzUtoLFBEO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjePHQ2aMAEtLJD.png\"]",
            "tweet_conversation_id": "1600905552015503362",
            "tweet_type": "Python tips",
            "created_at": "2022-12-08T17:30:01.000Z"
        },
        {
            "id": 317,
            "username": "bascodes",
            "tweet_id": "1600906305870467079",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Python is a popular language for connecting different data sources. \n\nUse a \ud835\ude72\ud835\ude91\ud835\ude8a\ud835\ude92\ud835\ude97\ud835\ude7c\ud835\ude8a\ud835\ude99 to get a singular value from a collection of different \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9ds: https://t.co/O1UP5kEXyr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjePzEoXkAkvCZ5.jpg\"]",
            "tweet_conversation_id": "1600906305870467079",
            "tweet_type": "Python tips",
            "created_at": "2022-12-08T17:33:01.000Z"
        },
        {
            "id": 316,
            "username": "bascodes",
            "tweet_id": "1601165865084366848",
            "tweet_text": "How many programming languages do you speak?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601165865084366848",
            "tweet_type": "Others",
            "created_at": "2022-12-09T10:44:25.000Z"
        },
        {
            "id": 315,
            "username": "bascodes",
            "tweet_id": "1601209268438532097",
            "tweet_text": "Another week, another issue of #ThisWeekInPython\ud83d\udc0d\n\nHave a great weekend, and enjoy these interesting and fun articles and projects about Python\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:36:53.000Z"
        },
        {
            "id": 314,
            "username": "bascodes",
            "tweet_id": "1601209303943241735",
            "tweet_text": "+++\nOf course, this list is on my blog, too \ud83d\udc47\n+++\nhttps://t.co/EgcQelLFmT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:01.000Z"
        },
        {
            "id": 313,
            "username": "bascodes",
            "tweet_id": "1601209313086902272",
            "tweet_text": "Narrative Manipulation: Convincing Chat GPT to Write a Python Program to Eradicate Humanity \u2013\u00a0by @zac_denham\nhttps://t.co/ULgovGWQTP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:03.000Z"
        },
        {
            "id": 312,
            "username": "bascodes",
            "tweet_id": "1601209321639055363",
            "tweet_text": "Datasette\u2019s new JSON write API: The first alpha of Datasette 1.0 \u2013\u00a0by @simonw\nhttps://t.co/g6CSDSZdMv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:05.000Z"
        },
        {
            "id": 311,
            "username": "bascodes",
            "tweet_id": "1601209343289991170",
            "tweet_text": "Multiprocessing Race Conditions in Python\nhttps://t.co/kArDOnUgNM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:11.000Z"
        },
        {
            "id": 310,
            "username": "bascodes",
            "tweet_id": "1601209353201238018",
            "tweet_text": "The cloudy layers of modern-day programming \u2013\u00a0by @vboykis\nhttps://t.co/W33xHIBw87",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:13.000Z"
        },
        {
            "id": 309,
            "username": "bascodes",
            "tweet_id": "1601209361451433988",
            "tweet_text": "Lex Fridman interviews Guido van Rossum\nhttps://t.co/OzSsq6rviT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:15.000Z"
        },
        {
            "id": 308,
            "username": "bascodes",
            "tweet_id": "1601209374420205575",
            "tweet_text": "CausalPy \u2013 A Python package for causal inference in quasi-experimental settings \u2013 by @inferencelab\nhttps://t.co/MR0Y6PRGL9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:18.000Z"
        },
        {
            "id": 307,
            "username": "bascodes",
            "tweet_id": "1601209384503328769",
            "tweet_text": "codon \u2013\u00a0A high-performance, zero-overhead, extensible Python compiler using LLVM\nhttps://t.co/msui0QiiFh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:20.000Z"
        },
        {
            "id": 306,
            "username": "bascodes",
            "tweet_id": "1601209392371826689",
            "tweet_text": "mbdpy \u2013 Python module for model-based-design \u2013 by @vicarius_rd\nhttps://t.co/ZkFV4XsB3p",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:22.000Z"
        },
        {
            "id": 305,
            "username": "bascodes",
            "tweet_id": "1601209401280548865",
            "tweet_text": "lumi \u2013 nano framework to convert your python functions into a REST API \u2013\u00a0by @Tanmoy741127\nhttps://t.co/UFHLUQKMv5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:24.000Z"
        },
        {
            "id": 304,
            "username": "bascodes",
            "tweet_id": "1601209409811660802",
            "tweet_text": "python-easter-eggs \u2013 Curated list of all the easter eggs and hidden jokes in Python \u2013 by @OrkoHunter\nhttps://t.co/VqYqTGtHCl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:26.000Z"
        },
        {
            "id": 303,
            "username": "bascodes",
            "tweet_id": "1601209419794206721",
            "tweet_text": "Don't forget to subscribe to my newsletter. Next issue will be sent on Tuesday!\nhttps://t.co/ji4UXZoFzr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601209268438532097",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:37:29.000Z"
        },
        {
            "id": 52,
            "username": "alexxubyte",
            "tweet_id": "1601253928569487360",
            "tweet_text": "How does REST API work? What are its principles, methods, constraints, and best practices? I hope the diagram below gives you a quick overview.\n\nImage source: https://t.co/Bi0iWpu2Lg\n\nSubscribe to our weekly newsletter to learn something new every week:\nhttps://t.co/dkjDPxrTOt https://t.co/LwhTD51W3h",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjjL9htUoAAOlVk.jpg\"]",
            "tweet_conversation_id": "1601253928569487360",
            "tweet_type": "Others",
            "created_at": "2022-12-09T16:34:21.000Z"
        },
        {
            "id": 541,
            "username": "bbelderbos",
            "tweet_id": "1601265048973824004",
            "tweet_text": "See this Instagram video by @pybites https://t.co/oww7m2viBk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601265048973824004",
            "tweet_type": "Others",
            "created_at": "2022-12-09T17:18:32.000Z"
        },
        {
            "id": 1434,
            "username": "testdrivenio",
            "tweet_id": "1601267940078518273",
            "tweet_text": "Python tip:\n\nTuple consumes less memory than a list of the same size \ud83d\udc47 https://t.co/Pl5cvOO97K",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjjYtEuUUAAXt1R.png\"]",
            "tweet_conversation_id": "1601267940078518273",
            "tweet_type": "Python tips",
            "created_at": "2022-12-09T17:30:01.000Z"
        },
        {
            "id": 540,
            "username": "bbelderbos",
            "tweet_id": "1601490444105715712",
            "tweet_text": "I've completed \"Cathode-Ray Tube\" - Day 10 - Advent of Code 2022 https://t.co/VAStQTqBvv #AdventOfCode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601490444105715712",
            "tweet_type": "Others",
            "created_at": "2022-12-10T08:14:10.000Z"
        },
        {
            "id": 302,
            "username": "bascodes",
            "tweet_id": "1601587261585461249",
            "tweet_text": "What is favorite programming language and why is it Python?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601587261585461249",
            "tweet_type": "Others",
            "created_at": "2022-12-10T14:38:53.000Z"
        },
        {
            "id": 51,
            "username": "alexxubyte",
            "tweet_id": "1601616867977633799",
            "tweet_text": "Next week, we will cover:\n\ud83d\udd39ChatGPT\n\ud83d\udd39Thread vs. process (video)\n\ud83d\udd39DDoS\n\ud83d\udd39Fallacies of distributed computing\n\ud83d\udd39Scaling a distributed queue\n\nSubscribe to our weekly newsletter to learn something new every week: https://t.co/dkjDPxrTOt https://t.co/1Gx4luFMTb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjoWDLLUAAA0G0W.jpg\"]",
            "tweet_conversation_id": "1601616867977633799",
            "tweet_type": "Others",
            "created_at": "2022-12-10T16:36:32.000Z"
        },
        {
            "id": 1433,
            "username": "testdrivenio",
            "tweet_id": "1601630336412024833",
            "tweet_text": "Python tip:\n\nPython identity operator (`is`) and equality operator (`==`) are not the same thing.\n\n`==` compares the value of two objects.\n\n`is` checks if two variables point to the same object in memory. https://t.co/LzQNTV5IYl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjoiS0vUYAAFp2w.png\"]",
            "tweet_conversation_id": "1601630336412024833",
            "tweet_type": "Python tips",
            "created_at": "2022-12-10T17:30:03.000Z"
        },
        {
            "id": 301,
            "username": "bascodes",
            "tweet_id": "1601696167934713856",
            "tweet_text": "Or, in other words: no job opportunity is worth risking your health for it! Thanks, Eddie! https://t.co/4qF1btx8v0 https://t.co/AhUPjZyK6U",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601696167934713856",
            "tweet_type": "Others",
            "created_at": "2022-12-10T21:51:39.000Z"
        },
        {
            "id": 1432,
            "username": "testdrivenio",
            "tweet_id": "1601992714182348800",
            "tweet_text": "Python tip:\n\nIf you have two variables pointing to the same object and make a change to one of the variables, the object will change; \n\nthus, the value of the other variable will also change. \ud83d\udc47 https://t.co/n4MdQ4SOxY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjtr4fMUUAAcBqO.png\"]",
            "tweet_conversation_id": "1601992714182348800",
            "tweet_type": "Python tips",
            "created_at": "2022-12-11T17:30:01.000Z"
        },
        {
            "id": 300,
            "username": "bascodes",
            "tweet_id": "1602049324149608450",
            "tweet_text": "I almost forgot to tweet today!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602049324149608450",
            "tweet_type": "Others",
            "created_at": "2022-12-11T21:14:58.000Z"
        },
        {
            "id": 299,
            "username": "bascodes",
            "tweet_id": "1602049327068766209",
            "tweet_text": "I hope you\u2019ve enjoyed yourself during the weekend!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602049324149608450",
            "tweet_type": "Others",
            "created_at": "2022-12-11T21:14:58.000Z"
        },
        {
            "id": 298,
            "username": "bascodes",
            "tweet_id": "1602249142696398848",
            "tweet_text": "\ud83d\udca1\ud83d\uddc4\ufe0f Indexes can improve read performance on your SQL database significantly.\n\nYou can span an index across multiple columns.\n\nHowever, the order of these columns matters. \n\nLet's have a look \ud83d\udc40\ud83d\udc47 https://t.co/QrqHBvutZH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjxVGFfXwAEpqPx.jpg\"]",
            "tweet_conversation_id": "1602249142696398848",
            "tweet_type": "Others",
            "created_at": "2022-12-12T10:28:58.000Z"
        },
        {
            "id": 297,
            "username": "bascodes",
            "tweet_id": "1602249148056707075",
            "tweet_text": "Based on the query above, you'd consider an index covering the columns \ud835\ude99\ud835\ude9b\ud835\ude98\ud835\ude8d\ud835\ude9e\ud835\ude8c\ud835\ude9d_\ud835\ude8c\ud835\ude8a\ud835\ude9d\ud835\ude8e\ud835\ude90\ud835\ude98\ud835\ude9b\ud835\udea2_\ud835\ude92\ud835\ude8d, \ud835\ude8d\ud835\ude8e\ud835\ude95\ud835\ude92\ud835\ude9f\ud835\ude8e\ud835\ude9b\ud835\udea2, and \ud835\ude99\ud835\ude9b\ud835\ude92\ud835\ude8c\ud835\ude8e.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602249142696398848",
            "tweet_type": "Others",
            "created_at": "2022-12-12T10:28:59.000Z"
        },
        {
            "id": 296,
            "username": "bascodes",
            "tweet_id": "1602249151907074049",
            "tweet_text": "1) Start with the columns that you'll use for equality checks, and order them by their cardinality (i.e. the number of distinct values in that column)\n\n2) Put the columns for range checks (like price, or dates) at the end",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602249142696398848",
            "tweet_type": "Others",
            "created_at": "2022-12-12T10:29:00.000Z"
        },
        {
            "id": 295,
            "username": "bascodes",
            "tweet_id": "1602249155858120705",
            "tweet_text": "Our final index could then look like this: https://t.co/9V4Fv53Kij",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjxVGb4X0AA4BpT.jpg\"]",
            "tweet_conversation_id": "1602249142696398848",
            "tweet_type": "Others",
            "created_at": "2022-12-12T10:29:01.000Z"
        },
        {
            "id": 294,
            "username": "bascodes",
            "tweet_id": "1602275009048739840",
            "tweet_text": "I will send out the next newsletter tomorrow\n\nIn this issue:\n\ud83c\udfed Return to the Office?\n\ud83d\udc26 Twitter Rumours\n\ud83d\udc0d Some advice by @PythonWithRune \n\nAnd I will share some of my personal reflections for 2022\n\nSubscribe below \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602275009048739840",
            "tweet_type": "Others",
            "created_at": "2022-12-12T12:11:45.000Z"
        },
        {
            "id": 293,
            "username": "bascodes",
            "tweet_id": "1602275011208912897",
            "tweet_text": "In each issue I share \n\n\u2022 The latest buzz that moved the tech industry\n\u2022 Some personal reflections and a personal touch\n\u2022 Advice and insights from other developers\n\nMake sure to subscribe here:\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602275009048739840",
            "tweet_type": "Others",
            "created_at": "2022-12-12T12:11:46.000Z"
        },
        {
            "id": 539,
            "username": "bbelderbos",
            "tweet_id": "1602299262918090755",
            "tweet_text": "Built with AssemblyAI - IronScribe https://t.co/WzscMl7eKr &lt; last year I learned a lot building this tool (Django, Assembly AI, Celery, JS and more)\n\nBuilding projects is the best way to learn!\n\n#python #developer",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602299262918090755",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T13:48:08.000Z"
        },
        {
            "id": 50,
            "username": "alexxubyte",
            "tweet_id": "1602340393093169161",
            "tweet_text": "/1 Our newsletter ByteByteGo just reached an important milestone, and I wanted to share some of the learnings in this journey. https://t.co/Lr5oDKKWwt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjyoGDgUAAASApQ.jpg\"]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:34.000Z"
        },
        {
            "id": 49,
            "username": "alexxubyte",
            "tweet_id": "1602340396276645890",
            "tweet_text": "/2 How did we get here?\nBefore posting anything about system design on social media, I spent 2.5 years writing 2 system design interview books. Writing a good book is incredibly hard and usually not very rewarding, but this turned out to be my best investment.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:35.000Z"
        },
        {
            "id": 48,
            "username": "alexxubyte",
            "tweet_id": "1602340398772256771",
            "tweet_text": "/3 It taught me 3 things: 1) How to write technical content people like to read, 2) Good work takes time. Don\u2019t rush it. 3) Follow your intuition.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:35.000Z"
        },
        {
            "id": 47,
            "username": "alexxubyte",
            "tweet_id": "1602340401368530954",
            "tweet_text": "/4 After publishing the books, I experimented with posting on social media (Twitter, LinkedIn, Newsletter, Instagram, Tiktok, etc.). @sahnlam and I also started a YouTube channel. There is incredible growth on most platforms. Focusing on quality is the key to our growth.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:36.000Z"
        },
        {
            "id": 46,
            "username": "alexxubyte",
            "tweet_id": "1602340403948027918",
            "tweet_text": "/5 Time commitment\nIt takes time to create high-quality content. Some 200-word social media posts take 2-4 hours to write and rewrite, while others may take over 20 hours. To make a 5-minute YouTube video, it takes us about 30 hours on average.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:37.000Z"
        },
        {
            "id": 45,
            "username": "alexxubyte",
            "tweet_id": "1602340406468804619",
            "tweet_text": "/6 Income\nI make more than I did at my tech job. Using @lennysan words, instead of one boss, I have lots of micro-bosses. And as it grows, I get a raise.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:37.000Z"
        },
        {
            "id": 44,
            "username": "alexxubyte",
            "tweet_id": "1602340409039912970",
            "tweet_text": "/7 \nUpside\nI enjoyed what I was doing. I am happy to have been able to contribute to education.\n\nDownside\nNo PTOs, 401k match, no health benefits, unstructured work, and long hours. It is possible to improve this over time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:38.000Z"
        },
        {
            "id": 43,
            "username": "alexxubyte",
            "tweet_id": "1602340411543912464",
            "tweet_text": "/8 What\u2019s next?\n\nMy mission is to help industry experts write good technical content. You will see more books coming out from ByteByteGo in 2022.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:38.000Z"
        },
        {
            "id": 42,
            "username": "alexxubyte",
            "tweet_id": "1602340413993385990",
            "tweet_text": "/9 I hope this is useful.\n\nI want to express my gratitude for the support all of you've given me on this journey. It's truly amazing to see so many people like the content, and I feel incredibly blessed. Thank you!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:39.000Z"
        },
        {
            "id": 41,
            "username": "alexxubyte",
            "tweet_id": "1602340416568688651",
            "tweet_text": "/10 Here is our weekly newsletter if you want to subscribe:\nhttps://t.co/dkjDPxrTOt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:40.000Z"
        },
        {
            "id": 40,
            "username": "alexxubyte",
            "tweet_id": "1602340419018162185",
            "tweet_text": "/11 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/kOF5HUJsmc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602340393093169161",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-12T16:31:40.000Z"
        },
        {
            "id": 1431,
            "username": "testdrivenio",
            "tweet_id": "1602355097119227904",
            "tweet_text": "Did you know?\n\nPython is not named after a snake, but after  Monty Python\u2019s Flying Circus, a BBC comedy series from the 1970s. \n\nDjango is not named after a western, but after Django Reinhardt, a Romani-French jazz guitarist.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602355097119227904",
            "tweet_type": "Others",
            "created_at": "2022-12-12T17:30:00.000Z"
        },
        {
            "id": 292,
            "username": "bascodes",
            "tweet_id": "1602366903971975183",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Here is a good use case for a decorator in Python:\n\nDo you have a function that may fail (i.e. raise an Exception), and you want to retry the same function after 10 seconds?\n\nHere is a decorator that does it for you https://t.co/enYGefAVKI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjzAND7XkBAsgF1.jpg\"]",
            "tweet_conversation_id": "1602366903971975183",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T18:16:55.000Z"
        },
        {
            "id": 291,
            "username": "bascodes",
            "tweet_id": "1602526454117531649",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Another little Python Quiz:\n\nLet's say you want to insert an element into a sorted list\n\nWhat would be the most efficient way to do so? https://t.co/fq2BDdXC4J",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj1RULrXwAAKEXu.jpg\"]",
            "tweet_conversation_id": "1602526454117531649",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T04:50:54.000Z"
        },
        {
            "id": 538,
            "username": "bbelderbos",
            "tweet_id": "1602588700914978819",
            "tweet_text": "I learned about the \"least common multiple\" the other day which is the least possible number that is divisible by all the numbers in a list of numbers.\n\nFor example, the LCM of 2, 3, and 4 == 12. \n\n#Python has a function in the math module to conveniently calculate this for you: https://t.co/8BbrgswEGb",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj2JqsnX0AMcdMk.jpg\"]",
            "tweet_conversation_id": "1602588700914978819",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T08:58:15.000Z"
        },
        {
            "id": 537,
            "username": "bbelderbos",
            "tweet_id": "1602626812512706561",
            "tweet_text": "I usually leave __init__.py empty or put at most version + logging in there, however I see some libraries / packages have the complete implementation in there, pros / cons? \n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602626812512706561",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T11:29:42.000Z"
        },
        {
            "id": 536,
            "username": "bbelderbos",
            "tweet_id": "1602660862778548229",
            "tweet_text": "The other day (in the #AdventOfCode) I was given strings like \"1 + 2\" and \"3 * 4\".\n\nHow do you perform these operations without using eval()?\n\nYou can use the operator module in #Python: https://t.co/1HbERK5bnm",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj2LGFnWQAEN7_r.jpg\"]",
            "tweet_conversation_id": "1602660862778548229",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T13:45:00.000Z"
        },
        {
            "id": 290,
            "username": "bascodes",
            "tweet_id": "1602678620316745733",
            "tweet_text": "Newsletter goes out in 2 hours!\n\nIn this issue:\n\ud83c\udfed Return to the Office?\n\ud83d\udc26 Twitter Rumours\n\ud83d\udc0d Some advice by \n@PythonWithRune\n\nAnd I will share some of my personal reflections for 2022\n\nDon't forget to subscribe \ud83d\udc47\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602678620316745733",
            "tweet_type": "Others",
            "created_at": "2022-12-13T14:55:34.000Z"
        },
        {
            "id": 39,
            "username": "alexxubyte",
            "tweet_id": "1602702255802548224",
            "tweet_text": "Honored to see my books on the list. \n\nWill's blog/newsletter is among the best in the industry. He talks about system architecture, industry insights, hiring, etc. If you have not yet subscribed, I recommend checking it out at https://t.co/cd2Drr95o9 https://t.co/kNNv71lN4J",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602702255802548224",
            "tweet_type": "Others",
            "created_at": "2022-12-13T16:29:29.000Z"
        },
        {
            "id": 38,
            "username": "alexxubyte",
            "tweet_id": "1602704395090636800",
            "tweet_text": "/1 ChatGPT and copy. ai brought attention to AIGC (AI-generated Content). Why is AIGC gaining explosive growth?\n\nThe diagram below summarizes the development in this area.\n\nOpenAI has been developing GPT (Generative Pre-Train) since 2018. https://t.co/Ydm6cvQe85",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3zJsKVEAA9KvA.jpg\"]",
            "tweet_conversation_id": "1602704395090636800",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-13T16:37:59.000Z"
        },
        {
            "id": 37,
            "username": "alexxubyte",
            "tweet_id": "1602704399251357698",
            "tweet_text": "/2 GPT 1 was trained with BooksCorpus dataset (5GB), whose main focus is language understanding.\n\nOn Valentine\u2019s Day 2019, GPT 2 was released with the slogan \u201ctoo dangerous to release\u201d. It was trained with Reddit articles with over 3 likes (40GB). The training cost is $43k.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602704395090636800",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-13T16:38:00.000Z"
        },
        {
            "id": 36,
            "username": "alexxubyte",
            "tweet_id": "1602704401797238784",
            "tweet_text": "/3 Later GPT 2 was used to generate music in MuseNet and JukeBox.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602704395090636800",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-13T16:38:00.000Z"
        },
        {
            "id": 35,
            "username": "alexxubyte",
            "tweet_id": "1602704404229935104",
            "tweet_text": "/4 In June 2020, GPT 3 was released, which was trained by a much more comprehensive dataset.\n\nMore applications were developed based on GPT 3, including:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602704395090636800",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-13T16:38:01.000Z"
        },
        {
            "id": 34,
            "username": "alexxubyte",
            "tweet_id": "1602704406742376448",
            "tweet_text": "/5 \ud83d\udd39DALL-E: creating images from text\n\ud83d\udd39CLIP: connecting text and images\n\ud83d\udd39Whisper: multi-lingual voice to text\n\ud83d\udd39ChatGPT: chatbot, article writer, code writer",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602704395090636800",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-13T16:38:02.000Z"
        },
        {
            "id": 33,
            "username": "alexxubyte",
            "tweet_id": "1602704409372217344",
            "tweet_text": "/6 I strongly recommend you play with these applications. The results are astonishing!\n\n\ud83d\udc49 Over to you: Have you chatted with ChatGPT? What did you ask it?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602704395090636800",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-13T16:38:02.000Z"
        },
        {
            "id": 32,
            "username": "alexxubyte",
            "tweet_id": "1602704411913879553",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/YkI8ot2fJD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602704395090636800",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-13T16:38:03.000Z"
        },
        {
            "id": 1430,
            "username": "testdrivenio",
            "tweet_id": "1602717484955897857",
            "tweet_text": "Did you know?\n\nPython was on Mars.\n\nNASA used Python to process images and videos taken during landing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602717484955897857",
            "tweet_type": "Others",
            "created_at": "2022-12-13T17:30:00.000Z"
        },
        {
            "id": 1429,
            "username": "testdrivenio",
            "tweet_id": "1602717486004449282",
            "tweet_text": "Source:\nhttps://t.co/bSIOCfndqL\n\nhttps://t.co/L3nm4dN4Yg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602717484955897857",
            "tweet_type": "Others",
            "created_at": "2022-12-13T17:30:00.000Z"
        },
        {
            "id": 535,
            "username": "bbelderbos",
            "tweet_id": "1602734282425995264",
            "tweet_text": "#pybobtips",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602660862778548229",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:36:44.000Z"
        },
        {
            "id": 534,
            "username": "bbelderbos",
            "tweet_id": "1602747936357715969",
            "tweet_text": "Transposing a matrix ...\n\nnumpy makes this a breeze - numpy.transpose(matrix) - but you can also use the zip() built-in function, leveraging the fact that it iterates over several iterables in parallel, producing new tuples with an item from each one.\n\n#Python #tips https://t.co/q1ynPY3Twv",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3Q1PHXkAAZOFL.jpg\"]",
            "tweet_conversation_id": "1602747936357715969",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T19:31:00.000Z"
        },
        {
            "id": 289,
            "username": "bascodes",
            "tweet_id": "1602956772356104192",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 The fastest way to insert an element into an already ordered list is using the \ud835\ude8b\ud835\ude92\ud835\ude9c\ud835\ude8e\ud835\ude8c\ud835\ude9d.\ud835\ude92\ud835\ude97\ud835\ude9c\ud835\ude98\ud835\ude9b\ud835\ude9d method.\n\nThis works by dividing the list into halves repeatedly and then finding the right position. https://t.co/JMCH6nt2i5 https://t.co/rXoeNqd4rs",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj7X9K-XgAEuPT1.jpg\"]",
            "tweet_conversation_id": "1602956772356104192",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T09:20:50.000Z"
        },
        {
            "id": 533,
            "username": "bbelderbos",
            "tweet_id": "1602957644100435968",
            "tweet_text": "Programmer productivity tip (and reminder): \n\nIf you\u2019re stuck on a problem for too long, take a break (walks are awesome!) \n\nYou will come back to the problem refreshed and with new insights.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602957644100435968",
            "tweet_type": "Others",
            "created_at": "2022-12-14T09:24:18.000Z"
        },
        {
            "id": 532,
            "username": "bbelderbos",
            "tweet_id": "1603006813376487427",
            "tweet_text": "You can use the literal_eval() function from the ast module to parse a string into a #Python object. \n\nHere I get a nested list from a string: https://t.co/Avz1G1QSDZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj8GI7xWIAEHnWb.png\"]",
            "tweet_conversation_id": "1603006813376487427",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T12:39:41.000Z"
        },
        {
            "id": 288,
            "username": "bascodes",
            "tweet_id": "1603024237509361664",
            "tweet_text": "What was the book that most influenced you in 2022? \ud83d\udcda",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603024237509361664",
            "tweet_type": "Others",
            "created_at": "2022-12-14T13:48:55.000Z"
        },
        {
            "id": 1428,
            "username": "testdrivenio",
            "tweet_id": "1603027464371978241",
            "tweet_text": "Developing a Single Page App with FastAPI and Vue.js \n\nhttps://t.co/erDqB9sPLZ \n\nStep-by-step walkthrough of how to build and containerize a CRUD app with FastAPI, Vue, Docker, and Postgres. You'll wire up token-based auth as well.\n\n(Just updated by @amirtds!\ud83d\udcaa)\n\n#FastAPI #VueJS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603027464371978241",
            "tweet_type": "Others",
            "created_at": "2022-12-14T14:01:44.000Z"
        },
        {
            "id": 287,
            "username": "bascodes",
            "tweet_id": "1603058846800482307",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d There are several ways to merge dictionaries in Python\n\nBut what's the difference?\n\ud83d\udc47 https://t.co/IwLULOZxxD",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj81hf9WIAIYCcl.jpg\"]",
            "tweet_conversation_id": "1603058846800482307",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T16:06:27.000Z"
        },
        {
            "id": 286,
            "username": "bascodes",
            "tweet_id": "1603058851942699012",
            "tweet_text": "Using `update` actually mutates the original variable. \n\nUsing the asterisk (`{*a, *b}`) deconstruction or the `|` operator forces Python to create a new dict, leaving the original dicts untouched.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603058846800482307",
            "tweet_type": "Others",
            "created_at": "2022-12-14T16:06:28.000Z"
        },
        {
            "id": 31,
            "username": "alexxubyte",
            "tweet_id": "1603067499674681345",
            "tweet_text": "/1 What are the most common misconceptions about distributed environments?\n\nAbout 30 years ago, Peter Deutsch drafted a list of eight fallacies in distributed computing environments, now known as \"The 8 fallacies of distributed computing\". Many years later, the fallacies remain. https://t.co/j7rlXrwMIg",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj89Y_BVIAADpFr.jpg\"]",
            "tweet_conversation_id": "1603067499674681345",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-14T16:40:50.000Z"
        },
        {
            "id": 30,
            "username": "alexxubyte",
            "tweet_id": "1603067513507487744",
            "tweet_text": "/2 \ud83d\udd39The network is reliable\n\ud83d\udd39Latency is zero\n\ud83d\udd39Bandwidth is infinite\n\ud83d\udd39The network is secure\n\ud83d\udd39Topology doesn't change\n\ud83d\udd39There is one administrator\n\ud83d\udd39Transport cost is zero\n\ud83d\udd39The network is homogeneous. https://t.co/xMapL2sHGi",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj89ZupUYAULi-D.jpg\"]",
            "tweet_conversation_id": "1603067499674681345",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-14T16:40:53.000Z"
        },
        {
            "id": 29,
            "username": "alexxubyte",
            "tweet_id": "1603067519488561152",
            "tweet_text": "/3 Subscribe to our weekly newsletter to learn something new every week:\n\nhttps://t.co/dkjDPxrTOt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603067499674681345",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-14T16:40:54.000Z"
        },
        {
            "id": 28,
            "username": "alexxubyte",
            "tweet_id": "1603067521862488064",
            "tweet_text": "/4 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/X61G0PsiHK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603067499674681345",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-14T16:40:55.000Z"
        },
        {
            "id": 1427,
            "username": "testdrivenio",
            "tweet_id": "1603079879356198913",
            "tweet_text": "Python tip:\n\nWhen you need a counter inside a forloop, you don't need to manually create (and increase) it.\nInstead, you can use enumerate().\n\nThe enumerate() method adds a counter to an iterable and returns the enumerate object. https://t.co/wc9gcm474y",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj9Ip0YVEAA0zn3.png\"]",
            "tweet_conversation_id": "1603079879356198913",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T17:30:01.000Z"
        },
        {
            "id": 531,
            "username": "bbelderbos",
            "tweet_id": "1603081166088806407",
            "tweet_text": "I wrote a new article about 5 cool ways I'm using #GitHub Actions at the moment:\n\nhttps://t.co/OMx9IdZuif\n\nI hope you can adopt one or more. Also happy to hear what Actions are staples for you ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603081166088806407",
            "tweet_type": "Others",
            "created_at": "2022-12-14T17:35:08.000Z"
        },
        {
            "id": 530,
            "username": "bbelderbos",
            "tweet_id": "1603332649606647808",
            "tweet_text": "I had a blast interviewing @DataMovesHer on our @Pybites podcast.\n\nWe talk about her DS journey + some cool data projects she has built + the importance of building an audience\n\nhttps://t.co/ETgyVUFarR \n\n\ud83d\ude0e \ud83e\udd77 \ud83d\udc0d \ud83c\udfa7 \u2615 \ud83c\udf89 \ud83d\ude0d\n\nEnjoy!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603332649606647808",
            "tweet_type": "Others",
            "created_at": "2022-12-15T10:14:26.000Z"
        },
        {
            "id": 285,
            "username": "bascodes",
            "tweet_id": "1603366993075339265",
            "tweet_text": "Here are 5 things to do before age 30 that accelerate your career in tech by 97% \ud83e\uddbe\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603366993075339265",
            "tweet_type": "Others",
            "created_at": "2022-12-15T12:30:54.000Z"
        },
        {
            "id": 284,
            "username": "bascodes",
            "tweet_id": "1603366997236006913",
            "tweet_text": "Just kidding. There is no age limit. Just start now!\nYou belong in tech!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603366993075339265",
            "tweet_type": "Others",
            "created_at": "2022-12-15T12:30:55.000Z"
        },
        {
            "id": 529,
            "username": "bbelderbos",
            "tweet_id": "1603373239128002560",
            "tweet_text": "Check out my latest article: Teachers aren't the only ones who teach. As a developer you're expected to do so too ... https://t.co/4cSr0FuFOZ via @LinkedIn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603373239128002560",
            "tweet_type": "Others",
            "created_at": "2022-12-15T12:55:44.000Z"
        },
        {
            "id": 1426,
            "username": "testdrivenio",
            "tweet_id": "1603394198253838336",
            "tweet_text": "Deploying a Django App to Render\n\nhttps://t.co/E7wijPLdYV \n\nAlong with deployment, we'll also look at how to- \n1\u20e3 Configure Postgres\n2\u20e3 Handle static and media files\n3\u20e3 Add a custom domain and enable HTTPS\n\n#Django #WebDev @Render",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603394198253838336",
            "tweet_type": "Others",
            "created_at": "2022-12-15T14:19:01.000Z"
        },
        {
            "id": 283,
            "username": "bascodes",
            "tweet_id": "1603417061815902208",
            "tweet_text": "There will be another issue of #ThisWeekInPython\ud83d\udc0d tomorrow!\n\nWhat articles or projects did you create or stumble upon? I'd love to include your picks!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603417061815902208",
            "tweet_type": "Others",
            "created_at": "2022-12-15T15:49:52.000Z"
        },
        {
            "id": 528,
            "username": "bbelderbos",
            "tweet_id": "1603422204288442370",
            "tweet_text": "New article: \n\nBuilding a\u00a0500\u00a0line API regression test suite https://t.co/DauI6Te3i7 \n\n#python #testing #APIs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603422204288442370",
            "tweet_type": "Python tips",
            "created_at": "2022-12-15T16:10:18.000Z"
        },
        {
            "id": 27,
            "username": "alexxubyte",
            "tweet_id": "1603428674392293380",
            "tweet_text": "Popular interview question: What is the difference between \ud835\udc0f\ud835\udc2b\ud835\udc28\ud835\udc1c\ud835\udc1e\ud835\udc2c\ud835\udc2c and \ud835\udc13\ud835\udc21\ud835\udc2b\ud835\udc1e\ud835\udc1a\ud835\udc1d?\n\nWatch and subscribe here (YouTube video): https://t.co/5Oq5J1O09O https://t.co/r6LRKQRUal",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkCF4UTUAAEdUIp.jpg\"]",
            "tweet_conversation_id": "1603428674392293380",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:36:00.000Z"
        },
        {
            "id": 26,
            "username": "alexxubyte",
            "tweet_id": "1603428678494322834",
            "tweet_text": "Main differences between process and thread:\n\n\ud83d\udd39 Processes are usually independent, while threads exist as process subsets.\n\ud83d\udd39 Each process has its own memory space. Threads that belong to the same process share the same memory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603428674392293380",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:36:01.000Z"
        },
        {
            "id": 25,
            "username": "alexxubyte",
            "tweet_id": "1603428681036070920",
            "tweet_text": "\ud83d\udd39 A process is a heavyweight operation. It takes more time to create and terminate.\n\ud83d\udd39 Context switching is more expensive between processes.\n\ud83d\udd39 Inter-thread communication is faster for threads.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603428674392293380",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:36:02.000Z"
        },
        {
            "id": 24,
            "username": "alexxubyte",
            "tweet_id": "1603428683514904581",
            "tweet_text": "I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/55WRoypgUD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603428674392293380",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:36:03.000Z"
        },
        {
            "id": 1425,
            "username": "testdrivenio",
            "tweet_id": "1603442266894258176",
            "tweet_text": "Python tip:\n\nf-strings are the most popular way to format strings. \nDid you know they can do more than just print out variable values?\n\nFor example, you can do an expression or call a function within them. https://t.co/VlaL2IP5aN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkCSPfpVQAANE6x.png\"]",
            "tweet_conversation_id": "1603442266894258176",
            "tweet_type": "Python tips",
            "created_at": "2022-12-15T17:30:01.000Z"
        },
        {
            "id": 527,
            "username": "bbelderbos",
            "tweet_id": "1603465124299284480",
            "tweet_text": "FastAPI for Machine Learning: Live coding an ML web application. https://t.co/rEtmKus1WV via @YouTube",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603465124299284480",
            "tweet_type": "Others",
            "created_at": "2022-12-15T19:00:51.000Z"
        },
        {
            "id": 282,
            "username": "bascodes",
            "tweet_id": "1603677081073844225",
            "tweet_text": "The @ who visited bascodes's profile the most:\n1. @testdrivenio\n2. @rasbt\n3. @learn_byexample\n4. @bbelderbos\n5. @reuvenmlerner\n6. @AdamChainz\n7. @patloeber\n8. @LeahTCodes\n9. @willmcgugan https://t.co/jIuMWMrH8c",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkFnzfIXgAEFexN.jpg\"]",
            "tweet_conversation_id": "1603677081073844225",
            "tweet_type": "Others",
            "created_at": "2022-12-16T09:03:05.000Z"
        },
        {
            "id": 281,
            "username": "bascodes",
            "tweet_id": "1603679223276716033",
            "tweet_text": "What\u2019s more fun than coding?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603679223276716033",
            "tweet_type": "Others",
            "created_at": "2022-12-16T09:11:36.000Z"
        },
        {
            "id": 280,
            "username": "bascodes",
            "tweet_id": "1603679229228490752",
            "tweet_text": "Seems to be the hot question on #techtwitter https://t.co/8ecpYEHiU6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkFpwk8XoAE2JL2.jpg\"]",
            "tweet_conversation_id": "1603679223276716033",
            "tweet_type": "Others",
            "created_at": "2022-12-16T09:11:37.000Z"
        },
        {
            "id": 279,
            "username": "bascodes",
            "tweet_id": "1603726652537716737",
            "tweet_text": "Anyone up for a #CoffeeChat\u2615\ufe0f before Christmas?\n\nI have some slots available\n\nhttps://t.co/pwQjByKbgW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603726652537716737",
            "tweet_type": "Others",
            "created_at": "2022-12-16T12:20:04.000Z"
        },
        {
            "id": 278,
            "username": "bascodes",
            "tweet_id": "1603744470532497410",
            "tweet_text": "Last weekend before XMAS! \ud83c\udf84\n\nHere are some great reads and open source projects around Python \ud83d\udc47\n\n#ThisWeekInPython\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:52.000Z"
        },
        {
            "id": 277,
            "username": "bascodes",
            "tweet_id": "1603744474496225283",
            "tweet_text": "+++\nHere is the list on my blog \ud83d\udc47\n+++\nhttps://t.co/rq4SXacaso",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:53.000Z"
        },
        {
            "id": 276,
            "username": "bascodes",
            "tweet_id": "1603744478497472513",
            "tweet_text": "Building an environmental monitoring system from scratch \u2013\u00a0by @CognitiveDave\nhttps://t.co/TEuH4wjLQm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:54.000Z"
        },
        {
            "id": 275,
            "username": "bascodes",
            "tweet_id": "1603744482553364480",
            "tweet_text": "Django Settings Patterns to Avoid \u2013 by @AdamChainz\nhttps://t.co/BnhwDTzmhX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:55.000Z"
        },
        {
            "id": 274,
            "username": "bascodes",
            "tweet_id": "1603744486600986624",
            "tweet_text": "Maintain A Clean Architecture With Dependency Rules \u2013 by @rekahrv\nhttps://t.co/O05mEt6O94",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:56.000Z"
        },
        {
            "id": 273,
            "username": "bascodes",
            "tweet_id": "1603744490610622465",
            "tweet_text": "Practical Python Programming \u2013 by @dabeaz\nhttps://t.co/UztgwF9Deb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:57.000Z"
        },
        {
            "id": 272,
            "username": "bascodes",
            "tweet_id": "1603744494675017729",
            "tweet_text": "Python Magic Methods You Haven't Heard About \u2013\u00a0by @Martin_Heinz_\nhttps://t.co/8dsWStDv6F",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:58.000Z"
        },
        {
            "id": 271,
            "username": "bascodes",
            "tweet_id": "1603744498735005698",
            "tweet_text": "pynecone \u2013 Web apps in pure Python \u2013 by @pynecone_io\nhttps://t.co/EheCfx5vVo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:30:59.000Z"
        },
        {
            "id": 270,
            "username": "bascodes",
            "tweet_id": "1603744502782595076",
            "tweet_text": "panoptisch \u2013 A recursive dependency scanner for Python projects \nhttps://t.co/frclZHwzjX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:31:00.000Z"
        },
        {
            "id": 269,
            "username": "bascodes",
            "tweet_id": "1603744506809131009",
            "tweet_text": "reacton \u2013 A pure Python port of React for ipywidgets\nhttps://t.co/MP31Dltpwb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:31:01.000Z"
        },
        {
            "id": 268,
            "username": "bascodes",
            "tweet_id": "1603744510831468545",
            "tweet_text": "samila \u2013 Generative Art Generator \u2013 by @sepkjaer20\nhttps://t.co/wpFoCT1h4F",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:31:02.000Z"
        },
        {
            "id": 267,
            "username": "bascodes",
            "tweet_id": "1603744515046752256",
            "tweet_text": "qutebrowser \u2013 A keyboard-driven, vim-like browser based on Python and Qt \u2013 by @qutebrowser\nhttps://t.co/Uujut0tPMY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:31:03.000Z"
        },
        {
            "id": 266,
            "username": "bascodes",
            "tweet_id": "1603744519148765184",
            "tweet_text": "Remember to subscribe to my newsletter:\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603744470532497410",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:31:04.000Z"
        },
        {
            "id": 526,
            "username": "bbelderbos",
            "tweet_id": "1603747533544644613",
            "tweet_text": "Given a string representing one Unicode character, ord() returns an integer representing the Unicode code point of that character:\n\n#python https://t.co/7ZQw9TrAXM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGme_cX0AAQoz8.jpg\"]",
            "tweet_conversation_id": "1603747533544644613",
            "tweet_type": "Python tips",
            "created_at": "2022-12-16T13:43:02.000Z"
        },
        {
            "id": 23,
            "username": "alexxubyte",
            "tweet_id": "1603793341597945857",
            "tweet_text": "/1 What is a DDos (Distributed Denial-of-Service) Attack?\n\nWhy is it hazardous to the services?\n\nHere is an example of how DDoS works. https://t.co/Mxwx6pYsac",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkHRimkVQAAdRUz.jpg\"]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:04.000Z"
        },
        {
            "id": 22,
            "username": "alexxubyte",
            "tweet_id": "1603793345825738752",
            "tweet_text": "/2 The purpose of a DDos attack is to disrupt the normal traffic of the victim servers through malicious requests. As a result, the servers are swamped with malicious requests and have no buffer to handle normal requests.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:05.000Z"
        },
        {
            "id": 21,
            "username": "alexxubyte",
            "tweet_id": "1603793354646396929",
            "tweet_text": "/3 \ud83d\udd39Steps 1 and 2: An attacker remotely controls a network of zombies via the controller. These zombies are then instructed remotely by the attacker. https://t.co/UPa3D745ix",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkHRjVxUcAAnVp2.jpg\"]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:07.000Z"
        },
        {
            "id": 20,
            "username": "alexxubyte",
            "tweet_id": "1603793364888866816",
            "tweet_text": "/4 \ud83d\udd39Step 3: The zombies can send requests to the victim servers, exhausting the servers' resources. Since zombies are legitimate internet devices, it is difficult to distinguish DDoS traffic from normal traffic.\n\nAn example of a common DDos attack is a SYN flood. https://t.co/Z3JhMMNbxk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkHRj8NUcAA_pv0.jpg\"]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:09.000Z"
        },
        {
            "id": 19,
            "username": "alexxubyte",
            "tweet_id": "1603793369204871169",
            "tweet_text": "/5 Normally the client and server establish a TCP connection via a 3-way handshake. As a result of a SYN flood attack, zombies send many SYN requests to the server, but they never return an ACK from the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:10.000Z"
        },
        {
            "id": 18,
            "username": "alexxubyte",
            "tweet_id": "1603793371650134016",
            "tweet_text": "/6 This results in an exhaustion of resources on the victim server due to the accumulation of many half-open TCP connections.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:11.000Z"
        },
        {
            "id": 17,
            "username": "alexxubyte",
            "tweet_id": "1603793379921461257",
            "tweet_text": "/7 \ud83d\udc49 Over to you: Have you encountered a DDos attack in production? How did you solve it?\n\nGood read: https://t.co/NcSoWnp58j https://t.co/kbHbOqge5b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkHRk1TUUAINWP_.jpg\"]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:13.000Z"
        },
        {
            "id": 16,
            "username": "alexxubyte",
            "tweet_id": "1603793384862142465",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/QRhnXt1DL6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603793341597945857",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-16T16:45:14.000Z"
        },
        {
            "id": 525,
            "username": "bbelderbos",
            "tweet_id": "1603794331168657408",
            "tweet_text": "A quick way to get the change stats from this commit message line: https://t.co/RfYUJcoxc8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGpWygXkAIHCek.jpg\"]",
            "tweet_conversation_id": "1603794331168657408",
            "tweet_type": "Others",
            "created_at": "2022-12-16T16:49:00.000Z"
        },
        {
            "id": 265,
            "username": "bascodes",
            "tweet_id": "1603799584739934208",
            "tweet_text": "Do you use a code formatter for your Python code? \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603799584739934208",
            "tweet_type": "Others",
            "created_at": "2022-12-16T17:09:52.000Z"
        },
        {
            "id": 1424,
            "username": "testdrivenio",
            "tweet_id": "1603804653723865088",
            "tweet_text": "Python tip:\n\nPython comes with a built-in drawing library. \nIt provides a virtual canvas on which you can draw with a \"pen\" called turtle. \nThat's where the library got its name - turtle.\nIt was adopted from Logo language and can be a great way to introduce programming to kids.\ud83d\udc47 https://t.co/bZoOwWpFan",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkHb1PVaMAAC93H.png\", \"https://pbs.twimg.com/media/FkHb1PNaAAA9MlX.png\"]",
            "tweet_conversation_id": "1603804653723865088",
            "tweet_type": "Python tips",
            "created_at": "2022-12-16T17:30:01.000Z"
        },
        {
            "id": 264,
            "username": "bascodes",
            "tweet_id": "1604123726144016386",
            "tweet_text": "What are you using as a replacement for Twitter's Revue?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604123726144016386",
            "tweet_type": "Others",
            "created_at": "2022-12-17T14:37:54.000Z"
        },
        {
            "id": 263,
            "username": "bascodes",
            "tweet_id": "1604145558377369600",
            "tweet_text": "Some Xmas vibes https://t.co/AUqbNgYTvF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkMR4OQXwAULCna.jpg\"]",
            "tweet_conversation_id": "1604145558377369600",
            "tweet_type": "Others",
            "created_at": "2022-12-17T16:04:39.000Z"
        },
        {
            "id": 15,
            "username": "alexxubyte",
            "tweet_id": "1604155727492177920",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39 Microservices tech stack\n\ud83d\udd39 HTTP short/long poll, WebSocket, SSE\n\ud83d\udd39 Cache strategies\n\ud83d\udd39 OSI model (YouTube)\n\ud83d\udd39 TBD\n\nJoin a growing community of over 200,000 System Design fans. Subscribe here: https://t.co/PczMAd8Jdb https://t.co/otFFP0GBxe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkMbIcNUAAAMtGb.jpg\"]",
            "tweet_conversation_id": "1604155727492177920",
            "tweet_type": "Others",
            "created_at": "2022-12-17T16:45:03.000Z"
        },
        {
            "id": 1423,
            "username": "testdrivenio",
            "tweet_id": "1604167042977890311",
            "tweet_text": "Python tip:\n\nPythons filter method filters the given iterable with a function that tests each element to be true or not.\n\nSince \"filter\" doesn't create a copy of the iterable but a reference to it, it's faster than using comprehension. \ud83d\udc47 https://t.co/kjCNCorySB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkMla_IaMAA2y3p.png\"]",
            "tweet_conversation_id": "1604167042977890311",
            "tweet_type": "Python tips",
            "created_at": "2022-12-17T17:30:01.000Z"
        },
        {
            "id": 14,
            "username": "alexxubyte",
            "tweet_id": "1604285187617013760",
            "tweet_text": "Great visual on how ChatGPT is trained. https://t.co/QFxOWJGBzC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604285187617013760",
            "tweet_type": "Others",
            "created_at": "2022-12-18T01:19:29.000Z"
        },
        {
            "id": 262,
            "username": "bascodes",
            "tweet_id": "1604405793696145408",
            "tweet_text": "Which is the better programming language to learn first: Python or JavaScript?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604405793696145408",
            "tweet_type": "Others",
            "created_at": "2022-12-18T09:18:44.000Z"
        },
        {
            "id": 1422,
            "username": "testdrivenio",
            "tweet_id": "1604529424275476480",
            "tweet_text": "What advice would you give your past self at the start of you programming journey?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604529424275476480",
            "tweet_type": "Others",
            "created_at": "2022-12-18T17:30:00.000Z"
        },
        {
            "id": 261,
            "username": "bascodes",
            "tweet_id": "1604565889642283009",
            "tweet_text": "So, we\u2019re not allowed to talk about the elephant in the room? \ud83d\udc18 https://t.co/7j9XjnMoOT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604565889642283009",
            "tweet_type": "Others",
            "created_at": "2022-12-18T19:54:54.000Z"
        },
        {
            "id": 260,
            "username": "bascodes",
            "tweet_id": "1604565891689193477",
            "tweet_text": "I used to agree with Elon on that one \ud83d\udc47 https://t.co/cXzZs0hXZk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604565889642283009",
            "tweet_type": "Others",
            "created_at": "2022-12-18T19:54:54.000Z"
        },
        {
            "id": 13,
            "username": "alexxubyte",
            "tweet_id": "1604590910712315905",
            "tweet_text": "We'll see how long it takes for this to be deleted. If you want to connect, type the words instead of copying and pasting them. \n\n\ud835\udc08'\ud835\udc26 \ud835\udc1a\ud835\udc2f\ud835\udc1a\ud835\udc22\ud835\udc25\ud835\udc1a\ud835\udc1b\ud835\udc25\ud835\udc1e \ud835\udc1a\ud835\udc2d \ud835\udc0c\ud835\udc1a\ud835\udc2c\ud835\udc2d\ud835\udc28\ud835\udc1d\ud835\udc28\ud835\udc27:\n\ud835\udc27\ud835\udc28\ud835\udc1c.\ud835\udc2c\ud835\udc28\ud835\udc1c\ud835\udc22\ud835\udc1a\ud835\udc25/@\ud835\udc1a\ud835\udc25\ud835\udc1e\ud835\udc31\ud835\udc31\ud835\udc2e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604590910712315905",
            "tweet_type": "Others",
            "created_at": "2022-12-18T21:34:19.000Z"
        },
        {
            "id": 12,
            "username": "alexxubyte",
            "tweet_id": "1604590911844777984",
            "tweet_text": "LinkedIn: https://t.co/1UXoyavCAf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604590910712315905",
            "tweet_type": "Others",
            "created_at": "2022-12-18T21:34:19.000Z"
        },
        {
            "id": 259,
            "username": "bascodes",
            "tweet_id": "1604609173718695937",
            "tweet_text": "Why does Python live on land?\n\nBecause it's above C level!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604609173718695937",
            "tweet_type": "Others",
            "created_at": "2022-12-18T22:46:53.000Z"
        },
        {
            "id": 258,
            "username": "bascodes",
            "tweet_id": "1604774650143281153",
            "tweet_text": "Learning Python?\n\nDrop a \ud83d\udc4b",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604774650143281153",
            "tweet_type": "Others",
            "created_at": "2022-12-19T09:44:26.000Z"
        },
        {
            "id": 257,
            "username": "bascodes",
            "tweet_id": "1604817316189032448",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Python has decorators for functions, like in the code snippet below.\n\nWhat does that mean?\n\nLet's have a look \ud83d\udc47 https://t.co/RP9SwpMg5R",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkV00tIWYAEMl23.jpg\"]",
            "tweet_conversation_id": "1604817316189032448",
            "tweet_type": "Python tips",
            "created_at": "2022-12-19T12:33:58.000Z"
        },
        {
            "id": 256,
            "username": "bascodes",
            "tweet_id": "1604817320739852289",
            "tweet_text": "First of all, the @-sign is equivalent to wrapping the function in a decorator. These two blocks are the same: https://t.co/LtdGeMiLEl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkV01BDXwAIPVdI.jpg\"]",
            "tweet_conversation_id": "1604817316189032448",
            "tweet_type": "Others",
            "created_at": "2022-12-19T12:33:59.000Z"
        },
        {
            "id": 255,
            "username": "bascodes",
            "tweet_id": "1604817325739352064",
            "tweet_text": "Since the two are equivalent, it's clear that the decorator itself has to be a function. https://t.co/Zb7x3KxXDu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkV01UcWYAA8Hvn.jpg\"]",
            "tweet_conversation_id": "1604817316189032448",
            "tweet_type": "Others",
            "created_at": "2022-12-19T12:34:01.000Z"
        },
        {
            "id": 254,
            "username": "bascodes",
            "tweet_id": "1604817330315329540",
            "tweet_text": "And, it has to return a callable to the decorated function, so that the decorated function remains accessible with its original name.\nBut why would we want something like that?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604817316189032448",
            "tweet_type": "Others",
            "created_at": "2022-12-19T12:34:02.000Z"
        },
        {
            "id": 253,
            "username": "bascodes",
            "tweet_id": "1604817334320988162",
            "tweet_text": "In general, a decorator is able to extend the behaviour of a function without directly modifying it. We could, for example, log each call https://t.co/WPUCWBclmM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkV01meWIAENCbO.jpg\"]",
            "tweet_conversation_id": "1604817316189032448",
            "tweet_type": "Others",
            "created_at": "2022-12-19T12:34:03.000Z"
        },
        {
            "id": 252,
            "username": "bascodes",
            "tweet_id": "1604817339396022272",
            "tweet_text": "To sum it up, a decorator is useful when you want something before and/or after each function call to be executed.\nA popular example is the cache decorator: https://t.co/m2GMGH49Cn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkV0135XkAE5NZO.jpg\"]",
            "tweet_conversation_id": "1604817316189032448",
            "tweet_type": "Others",
            "created_at": "2022-12-19T12:34:04.000Z"
        },
        {
            "id": 251,
            "username": "bascodes",
            "tweet_id": "1604817344152354816",
            "tweet_text": "Did you enjoy this little thread about Python decorators? Leave a like or RT to the first tweet in the thread and follow me @bascodes!\n\nhttps://t.co/4YItcvb7UW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604817316189032448",
            "tweet_type": "Others",
            "created_at": "2022-12-19T12:34:05.000Z"
        },
        {
            "id": 524,
            "username": "bbelderbos",
            "tweet_id": "1604829921812979712",
            "tweet_text": "Wow 6 years of Pybites today! It flew by, so time to pause and reflect - article below.\n\nProud @juliansequeira of what we achieved and excited for what's next in 2023! https://t.co/liLc9ZoILL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604829921812979712",
            "tweet_type": "Others",
            "created_at": "2022-12-19T13:24:04.000Z"
        },
        {
            "id": 250,
            "username": "bascodes",
            "tweet_id": "1604867638487916544",
            "tweet_text": "The next issue of my tech newsletter is due tomorrow!\n\nIn this issue:\n\ud83c\udf0e The Open Web\n\ud83d\udd2c Scientific breakthroughs\n\ud83d\udcaf @petecodes learnings about the 80/20 rule\n\nDon't forget to subscribe here \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604867638487916544",
            "tweet_type": "Others",
            "created_at": "2022-12-19T15:53:56.000Z"
        },
        {
            "id": 249,
            "username": "bascodes",
            "tweet_id": "1604867642564689920",
            "tweet_text": "https://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604867638487916544",
            "tweet_type": "Others",
            "created_at": "2022-12-19T15:53:57.000Z"
        },
        {
            "id": 11,
            "username": "alexxubyte",
            "tweet_id": "1604880509086994436",
            "tweet_text": "/1 Data is cached everywhere, from the front end to the back end!\n\nThis diagram illustrates where we cache data in a typical architecture. https://t.co/5IaPja8UQS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkWuUG2UEAASpPw.jpg\"]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:05.000Z"
        },
        {
            "id": 10,
            "username": "alexxubyte",
            "tweet_id": "1604880513079971842",
            "tweet_text": "/2 There are \ud835\udc26\ud835\udc2e\ud835\udc25\ud835\udc2d\ud835\udc22\ud835\udc29\ud835\udc25\ud835\udc1e \ud835\udc25\ud835\udc1a\ud835\udc32\ud835\udc1e\ud835\udc2b\ud835\udc2c along the flow.\n\n\ud83d\udd39 1. Client apps: HTTP responses can be cached by the browser. We request data over HTTP for the first time; we request data again, and the client app tries to retrieve the data from the browser cache first.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:06.000Z"
        },
        {
            "id": 9,
            "username": "alexxubyte",
            "tweet_id": "1604880515575582727",
            "tweet_text": "/3 \n\n\ud83d\udd39 2. CDN: CDN caches static web resources. The clients can retrieve data from a CDN node nearby.\n\n\ud83d\udd39 3. Load Balancer: The load Balancer can cache resources as well.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:06.000Z"
        },
        {
            "id": 8,
            "username": "alexxubyte",
            "tweet_id": "1604880518066999299",
            "tweet_text": "/4 \n\ud83d\udd39 4. Messaging infra: Message brokers store messages on disk first, and then consumers retrieve them at their own pace. Depending on the retention policy, the data is cached in Kafka clusters for a period of time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:07.000Z"
        },
        {
            "id": 7,
            "username": "alexxubyte",
            "tweet_id": "1604880520503885824",
            "tweet_text": "/5 \n\ud83d\udd39 5. Services: There are multiple layers of cache in a service. If the data is not cached in CPU cache, the service will try to retrieve the data from memory. Sometimes the service has a second-level cache to store data on disk.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:07.000Z"
        },
        {
            "id": 6,
            "username": "alexxubyte",
            "tweet_id": "1604880522974334976",
            "tweet_text": "/6 \n\ud83d\udd39 6. Distributed Cache: Distributed cache like Redis hold key-value pairs for multiple services in memory. It provides much better read/write performance than the database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:08.000Z"
        },
        {
            "id": 5,
            "username": "alexxubyte",
            "tweet_id": "1604880525444780033",
            "tweet_text": "/7 \n\ud83d\udd39 7. Full-text Search: we sometimes need to use full-text searches like Elastic Search for document search or log search. A copy of data is indexed in the search engine as well.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:09.000Z"
        },
        {
            "id": 4,
            "username": "alexxubyte",
            "tweet_id": "1604880527986528258",
            "tweet_text": "/8 \n\ud83d\udd39 8. Database: Even in the database, we have different levels of caches:\n\n- WAL(Write-ahead Log): data is written to WAL first before building the B tree index\n- Bufferpool: A memory area allocated to cache query results\n- Materialized View",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:09.000Z"
        },
        {
            "id": 3,
            "username": "alexxubyte",
            "tweet_id": "1604880530503110665",
            "tweet_text": "/9 \n\n- Transaction log: record all the transactions and database updates\n- Replication Log: used to record the replication state in a database cluster",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:10.000Z"
        },
        {
            "id": 2,
            "username": "alexxubyte",
            "tweet_id": "1604880541827731463",
            "tweet_text": "/10 \ud83d\udc49 Over to you: With the data cached at so many levels, how can we guarantee the \ud835\udc2c\ud835\udc1e\ud835\udc27\ud835\udc2c\ud835\udc22\ud835\udc2d\ud835\udc22\ud835\udc2f\ud835\udc1e \ud835\udc2e\ud835\udc2c\ud835\udc1e\ud835\udc2b \ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1a is completely erased from the systems?\n\nSubscribe to our weekly newsletter to learn something new every week: https://t.co/dkjDPxrTOt https://t.co/Jq1uOlby5A",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkWuV8CUEAEx3Aw.jpg\"]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:13.000Z"
        },
        {
            "id": 1,
            "username": "alexxubyte",
            "tweet_id": "1604880545715851269",
            "tweet_text": "/11 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/UGaJTZC6rh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604880509086994436",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-19T16:45:13.000Z"
        },
        {
            "id": 248,
            "username": "bascodes",
            "tweet_id": "1605201570899132417",
            "tweet_text": "Newsletter goes out in 2 hours!\n\nIn this issue:\n\n\ud83c\udf0e The Open Web\n\ud83d\udd2c Scientific breakthroughs\n\ud83d\udcaf @petecodes learnings about the 80/20 rule\n\nAnd I will share some of my personal reflections on health in 2022\n\nDon't forget to subscribe \ud83d\udc47\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605201570899132417",
            "tweet_type": "Others",
            "created_at": "2022-12-20T14:00:52.000Z"
        },
        {
            "id": 247,
            "username": "bascodes",
            "tweet_id": "1605235339769118720",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1Want to know more about the history behind some concepts of Python?\n\nLet\u2019s meet some of Python\u2019s grand-grand-parents! \ud83d\udc74\ud83d\udc75\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T16:15:03.000Z"
        },
        {
            "id": 246,
            "username": "bascodes",
            "tweet_id": "1605235343690702848",
            "tweet_text": "C: The blocks\n\nIn some regards, the C programming language can be seen as the mother of most modern languages. It introduced \u201cblocks\u201d to structure programs, although they are limited by characters, not indentation https://t.co/vE7o1U1k8N",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkbw_naXwAASMxD.jpg\"]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:04.000Z"
        },
        {
            "id": 245,
            "username": "bascodes",
            "tweet_id": "1605235348925210625",
            "tweet_text": "Modula-3\n\nPython borrowed some ideas from Modula-3 that have influenced programming languages other than Python, but never saw a notable adoption in the industry:\n- self as an explicit parameter in class methods\n- from x import y\n- init as the name for constructors https://t.co/MYSMlRSYA7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkbw__mXwAMC9cb.jpg\"]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:05.000Z"
        },
        {
            "id": 244,
            "username": "bascodes",
            "tweet_id": "1605235354910482432",
            "tweet_text": "ABC\n\nABC is a language with Dutch roots, just like Python. Probably the most significant influences it had on Python are the structuring by indentation and the IN operator https://t.co/2oQkOBhHKE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbxAvnXgAIt91X.jpg\"]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:07.000Z"
        },
        {
            "id": 243,
            "username": "bascodes",
            "tweet_id": "1605235360191094787",
            "tweet_text": "Occam\n\nABC itself drew the idea of indentation-based structuring from occam \u2013 presumably the first language to use indentation as part of its syntax https://t.co/Lej0EiF5qz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbxBExX0AEenzG.jpg\"]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:08.000Z"
        },
        {
            "id": 242,
            "username": "bascodes",
            "tweet_id": "1605235365039726593",
            "tweet_text": "APL\n\nProbably the most obscure non-satiric programming language is APL. Back at the time, it even required a dedicated keyboard to enter all the symbols.\nWhile it has not influenced Python directly, its ideas about matrix calculations can be seen to some extent in NumPy https://t.co/ocp50jIXmH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbxBVtXgAAEcEX.jpg\"]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:09.000Z"
        },
        {
            "id": 241,
            "username": "bascodes",
            "tweet_id": "1605235370148433926",
            "tweet_text": "Java\n\nIf programming languages were a popularity contest, we would see Python as mature, but still hip, and Java as a dinosaur of the software world.\nBut: Python is five years older than Java. \nBoth drew the idea of OOP from languages like Simula and Smalltalk https://t.co/f7N2bQnK0j",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbxBsyWYAENgD3.jpg\"]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:10.000Z"
        },
        {
            "id": 240,
            "username": "bascodes",
            "tweet_id": "1605235375248654339",
            "tweet_text": "Fortran\n\nOne of the first programming languages that added some abstraction on top of binary code, and later, Assembly, was Fortran. Appearing in 1957, it did not influence Python directly, but some parts of the numerical cores NumPy are based upon, are still written in Fortran. https://t.co/JbPeN3y9zM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbxCDvXgAAvU5E.jpg\"]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:11.000Z"
        },
        {
            "id": 239,
            "username": "bascodes",
            "tweet_id": "1605235380143509504",
            "tweet_text": "If you liked that thread, please give the first tweet a Like or RT and follow me @bascodes for more content about programming!\n https://t.co/QaLmW81Ypv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605235339769118720",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:15:13.000Z"
        },
        {
            "id": 238,
            "username": "bascodes",
            "tweet_id": "1605527308680728579",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d We have \ud835\ude8f-strings in Python since 3.6\n\nLet's have a look at their powerful features \n\ud83d\udc47 https://t.co/SbmVXmUjkd",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6hqhaUAAlfWL.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:35:14.000Z"
        },
        {
            "id": 237,
            "username": "bascodes",
            "tweet_id": "1605527313583673344",
            "tweet_text": "You can execute arbitrary expressions inside f-strings https://t.co/Nqglh7fqS3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6h9pXEAA4dKC.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:15.000Z"
        },
        {
            "id": 236,
            "username": "bascodes",
            "tweet_id": "1605527318063104002",
            "tweet_text": "Of course, you can access attributes of objects or keys of a \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9d inside \ud835\ude8f-strings https://t.co/Amlg0e7TtZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6iQsWIAATRv6.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:16.000Z"
        },
        {
            "id": 235,
            "username": "bascodes",
            "tweet_id": "1605527323792625665",
            "tweet_text": "You can use \ud835\ude8f-strings for debugging. An equal sign will print out the name of a variable along with its value https://t.co/PjJmXc8rVg",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6izKWYAA-3RQ.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:17.000Z"
        },
        {
            "id": 234,
            "username": "bascodes",
            "tweet_id": "1605527328490225664",
            "tweet_text": "\ud835\ude8f-strings can be used to align content, e.g. for tabular contexts.\nYou can align center, left or right. https://t.co/ODCkGMSHVd",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6jHmUcAAjFvJ.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:19.000Z"
        },
        {
            "id": 233,
            "username": "bascodes",
            "tweet_id": "1605527333607292928",
            "tweet_text": "You can format numbers. For internationalisation, you'd still need the \ud835\ude95\ud835\ude98\ud835\ude8c\ud835\ude8a\ud835\ude95\ud835\ude8e module. https://t.co/c91peFySwv",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6jgrX0AAG596.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:20.000Z"
        },
        {
            "id": 232,
            "username": "bascodes",
            "tweet_id": "1605527338569158656",
            "tweet_text": "You can format dates https://t.co/FvUNi1yhYA",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6j3EX0AAqzfR.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:21.000Z"
        },
        {
            "id": 231,
            "username": "bascodes",
            "tweet_id": "1605527343371517954",
            "tweet_text": "You can create your own formatting rules by implementing a custom __\ud835\ude8f\ud835\ude98\ud835\ude9b\ud835\ude96\ud835\ude8a\ud835\ude9d__ method in your classes https://t.co/sqqwV7ydcK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf6kjaWAAQQu3R.jpg\"]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:22.000Z"
        },
        {
            "id": 230,
            "username": "bascodes",
            "tweet_id": "1605527348857786370",
            "tweet_text": "Hope you find value in this little thread. If you do, please retweet the first tweet to help others, too!\n\n https://t.co/BEeyl3KURa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605527308680728579",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:35:23.000Z"
        },
        {
            "id": 229,
            "username": "bascodes",
            "tweet_id": "1605573027172962304",
            "tweet_text": "\ud83d\udc0d Are you looking for a Python job? \ud83d\udc40\n\nHere are 5\ufe0f\u20e3 websites to find your next adventure!\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605573027172962304",
            "tweet_type": "Others",
            "created_at": "2022-12-21T14:36:54.000Z"
        },
        {
            "id": 228,
            "username": "bascodes",
            "tweet_id": "1605573070852440064",
            "tweet_text": "remoteok is a job board focussed on Remote Positions built by @levelsio\nhttps://t.co/VVR7jDrSrS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605573027172962304",
            "tweet_type": "Others",
            "created_at": "2022-12-21T14:37:04.000Z"
        },
        {
            "id": 227,
            "username": "bascodes",
            "tweet_id": "1605573087872913409",
            "tweet_text": "findwork .dev is a job site that aggregates job openings from different sources, including Hacker News and others. You can search for Python jobs quickly\n\nhttps://t.co/MbFK719Rdy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605573027172962304",
            "tweet_type": "Others",
            "created_at": "2022-12-21T14:37:08.000Z"
        },
        {
            "id": 226,
            "username": "bascodes",
            "tweet_id": "1605573095481397248",
            "tweet_text": "python .org is the official Python home on the Internet by @ThePSF. The website has a job board\nhttps://t.co/coqKX6g08T",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605573027172962304",
            "tweet_type": "Others",
            "created_at": "2022-12-21T14:37:10.000Z"
        },
        {
            "id": 225,
            "username": "bascodes",
            "tweet_id": "1605573109398093828",
            "tweet_text": "news .python .sc is a news aggregator for the Python community and hosts a job board that aggregates Python jobs from a variety of sources \u2013 by @pythonicnews\nhttps://t.co/gkeqe5OpEt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605573027172962304",
            "tweet_type": "Others",
            "created_at": "2022-12-21T14:37:14.000Z"
        },
        {
            "id": 224,
            "username": "bascodes",
            "tweet_id": "1605573118411640833",
            "tweet_text": "pythonengineer .pallet .com is a curated list of job openings for Python developers by @patloeber.\nhttps://t.co/8JMS04QQN4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605573027172962304",
            "tweet_type": "Others",
            "created_at": "2022-12-21T14:37:16.000Z"
        },
        {
            "id": 223,
            "username": "bascodes",
            "tweet_id": "1605573127865606144",
            "tweet_text": "Here is the list on my blog: \n\nhttps://t.co/yD88tt1y0v\n\nStay tuned for regular updates!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605573027172962304",
            "tweet_type": "Others",
            "created_at": "2022-12-21T14:37:18.000Z"
        },
        {
            "id": 1722,
            "username": "testdrivenio",
            "tweet_id": "1553780026763792384",
            "tweet_text": "Are you interested in Django, Flask or FastAPI?\n\nhttps://t.co/2SZcPR2Xsv\n\nhttps://t.co/Rq36wSjIjx\n\nhttps://t.co/LeowohddoI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553780025479929856",
            "tweet_type": "Others",
            "created_at": "2022-07-31T16:30:00.000Z"
        },
        {
            "id": 1723,
            "username": "testdrivenio",
            "tweet_id": "1553780025479929856",
            "tweet_text": "https://t.co/anw72Nv4Ce tip:\n\nTips on Twitter slip out of memory quickly.\nYou can check all the tips on https://t.co/aaDPvCoXPq\n\nYou can even browse them by topic \ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553780025479929856",
            "tweet_type": "Others",
            "created_at": "2022-07-31T16:30:00.000Z"
        },
        {
            "id": 1724,
            "username": "testdrivenio",
            "tweet_id": "1553763816726351872",
            "tweet_text": "Running Vault and Consul on Kubernetes \n\nhttps://t.co/uMKbLIHafQ\n\nA walk through guide on how to provision a highly-available @HashiCorp Vault and Consul cluster on Kubernetes with TLS.\n\nMain dependencies:\n\n\u23fa Vault v1.7.1\n\u23fa Consul v1.9.5\n\u23fa #Kubernetes v1.21.0\n\n#HashiCorp #k8s",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553763816726351872",
            "tweet_type": "Others",
            "created_at": "2022-07-31T15:25:36.000Z"
        },
        {
            "id": 1725,
            "username": "testdrivenio",
            "tweet_id": "1553417647282278400",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553417645210615810",
            "tweet_type": "Others",
            "created_at": "2022-07-30T16:30:02.000Z"
        },
        {
            "id": 1726,
            "username": "testdrivenio",
            "tweet_id": "1553417645210615810",
            "tweet_text": "Python tip:\n\nInstead of trying to keep your imports in order by hand, you can use the isort library. https://t.co/OMENX5xs98",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY7ZHU1akAACB8L.png\"]",
            "tweet_conversation_id": "1553417645210615810",
            "tweet_type": "Python tips",
            "created_at": "2022-07-30T16:30:02.000Z"
        },
        {
            "id": 1727,
            "username": "testdrivenio",
            "tweet_id": "1553393562372296705",
            "tweet_text": "Automating Performance Testing in Django \n\nhttps://t.co/nhqI6FddoA\n\nThis post looks at how to:\n\n\ud83d\udd38Test the number of queries executed by a request along with the duration of the queries\n\ud83d\udd38Prevent N+1 queries using the nplusone package\n\n#Django #Python #Testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553393562372296705",
            "tweet_type": "Others",
            "created_at": "2022-07-30T14:54:20.000Z"
        },
        {
            "id": 1728,
            "username": "testdrivenio",
            "tweet_id": "1553055258125139973",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553055248734126080",
            "tweet_type": "Others",
            "created_at": "2022-07-29T16:30:02.000Z"
        },
        {
            "id": 1729,
            "username": "testdrivenio",
            "tweet_id": "1553055255696674816",
            "tweet_text": "According to Django docs, imports should be grouped in the following order:\n\n1. future\n2. standard library\n3. third-party libraries\n4. other Django components\n5. local Django component\n6. try/excepts https://t.co/Yhu3JF0cNT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY2PhdWacAE1WqQ.png\"]",
            "tweet_conversation_id": "1553055248734126080",
            "tweet_type": "Others",
            "created_at": "2022-07-29T16:30:01.000Z"
        },
        {
            "id": 1730,
            "username": "testdrivenio",
            "tweet_id": "1552986588799451138",
            "tweet_text": "Dockerizing FastAPI with Postgres, Uvicorn, and Traefik\n\nhttps://t.co/E8OifHgTf7\n\nLook at how to set up FastAPI with Postgres, Uvicorn, and Docker. For production environments, we'll add on Gunicorn, Traefik, and Let's Encrypt.\n\nby @pydantic\n \n#FastAPI #Python @Traefik",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552986588799451138",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:57:10.000Z"
        },
        {
            "id": 1731,
            "username": "testdrivenio",
            "tweet_id": "1552692865167663111",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552692862961483776",
            "tweet_type": "Others",
            "created_at": "2022-07-28T16:30:01.000Z"
        },
        {
            "id": 1732,
            "username": "testdrivenio",
            "tweet_id": "1552692864043581440",
            "tweet_text": "Reading their philosophy may help you better understand how Django works and why it works the way it does: https://t.co/w6rJokrJSX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552692862961483776",
            "tweet_type": "Others",
            "created_at": "2022-07-28T16:30:01.000Z"
        },
        {
            "id": 1733,
            "username": "testdrivenio",
            "tweet_id": "1552692862961483776",
            "tweet_text": "Did you know? \ud83e\uddf5\n\nDjango has its own design philosophy that heavily impacts the way Django is and was developed.\nThe philosophy includes principles like loose coupling, \"Explicit is better than implicit\", and DRY.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552692862961483776",
            "tweet_type": "Others",
            "created_at": "2022-07-28T16:30:00.000Z"
        },
        {
            "id": 1734,
            "username": "testdrivenio",
            "tweet_id": "1552649450279079938",
            "tweet_text": "Dockerizing Flask with Postgres, Gunicorn, and Nginx\n\nhttps://t.co/gwYiD3Yat2\n\nThis tutorial details how to configure Flask to run on Docker along with Postgres, Nginx, and Gunicorn.\n\n\ud83d\udc0d\ud83d\udc33\n\n#Flask #Python #Docker",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552649450279079938",
            "tweet_type": "Others",
            "created_at": "2022-07-28T13:37:30.000Z"
        },
        {
            "id": 1735,
            "username": "testdrivenio",
            "tweet_id": "1552330486449860608",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552330482830159872",
            "tweet_type": "Others",
            "created_at": "2022-07-27T16:30:03.000Z"
        },
        {
            "id": 1736,
            "username": "testdrivenio",
            "tweet_id": "1552330482830159872",
            "tweet_text": "Did you know?\n\nThere's a Python library called art you can use to create ASCII art (visual shape made from special characters or letters). https://t.co/SsKtw8F60X",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYr8WJbaMAASLzl.png\"]",
            "tweet_conversation_id": "1552330482830159872",
            "tweet_type": "Others",
            "created_at": "2022-07-27T16:30:02.000Z"
        },
        {
            "id": 1737,
            "username": "testdrivenio",
            "tweet_id": "1551968096537022465",
            "tweet_text": "Read more about Django permissions:\nhttps://t.co/cypF3pweMW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551968094456688640",
            "tweet_type": "Others",
            "created_at": "2022-07-26T16:30:03.000Z"
        },
        {
            "id": 1738,
            "username": "testdrivenio",
            "tweet_id": "1551968094456688640",
            "tweet_text": "Django tip:\n\nYou can add custom permissions to a Django model (you still have to enforce it in the views) \ud83d\udc47 https://t.co/WCSrYFfroL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYmywT_UEAA7aIP.png\"]",
            "tweet_conversation_id": "1551968094456688640",
            "tweet_type": "Django tips",
            "created_at": "2022-07-26T16:30:02.000Z"
        },
        {
            "id": 1739,
            "username": "testdrivenio",
            "tweet_id": "1551911184626065408",
            "tweet_text": "Asynchronous Tasks with FastAPI and Celery\n\nhttps://t.co/B6X9IsakxR\n\nLooks at how to configure Celery to handle long-running tasks in a FastAPI app.\n\n#FastAPI #Python @FastAPI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551911184626065408",
            "tweet_type": "Others",
            "created_at": "2022-07-26T12:43:54.000Z"
        },
        {
            "id": 1740,
            "username": "testdrivenio",
            "tweet_id": "1551605706826006528",
            "tweet_text": "Read more about Django permissions:\nhttps://t.co/cypF3pweMW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551605705177964544",
            "tweet_type": "Others",
            "created_at": "2022-07-25T16:30:02.000Z"
        },
        {
            "id": 1741,
            "username": "testdrivenio",
            "tweet_id": "1551605705177964544",
            "tweet_text": "Django tip:\n\nA perms variable is available by default in a Django template, meaning you can render the content based on the permissions: https://t.co/H1dwEeAEoZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYhpKijVEAAwdCF.png\"]",
            "tweet_conversation_id": "1551605705177964544",
            "tweet_type": "Django tips",
            "created_at": "2022-07-25T16:30:02.000Z"
        },
        {
            "id": 1742,
            "username": "testdrivenio",
            "tweet_id": "1551551042940465152",
            "tweet_text": "Creating a Custom User Model in Django\n\nhttps://t.co/jlMbZ2qXF0 \n\nThis post explains step-by-step how to create a custom User model in Django so that an email address can be used as the primary user identifier instead of a username.\n\n#Django #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551551042940465152",
            "tweet_type": "Others",
            "created_at": "2022-07-25T12:52:49.000Z"
        },
        {
            "id": 1743,
            "username": "testdrivenio",
            "tweet_id": "1551243317102661634",
            "tweet_text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551243314648690688",
            "tweet_type": "Others",
            "created_at": "2022-07-24T16:30:02.000Z"
        },
        {
            "id": 1744,
            "username": "testdrivenio",
            "tweet_id": "1551243314648690688",
            "tweet_text": "Django tip:\n\nTo enforce permissions in function-based views, you can use the permission_required decorator \ud83d\udc47 https://t.co/3qef3StjSe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYcfkpOaIAAOTBQ.png\"]",
            "tweet_conversation_id": "1551243314648690688",
            "tweet_type": "Django tips",
            "created_at": "2022-07-24T16:30:01.000Z"
        },
        {
            "id": 1745,
            "username": "testdrivenio",
            "tweet_id": "1551206429222117378",
            "tweet_text": "Dockerizing Masonite with Postgres, Gunicorn, and Nginx \n\nhttps://t.co/BP8VOd9Hxs\n\n(Updated the tutorial to support Masonite 4! \u2728)\n\n@masoniteproject #Python #webdev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551206429222117378",
            "tweet_type": "Others",
            "created_at": "2022-07-24T14:03:27.000Z"
        },
        {
            "id": 1746,
            "username": "testdrivenio",
            "tweet_id": "1550880933255221248",
            "tweet_text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550880931207995392",
            "tweet_type": "Others",
            "created_at": "2022-07-23T16:30:03.000Z"
        },
        {
            "id": 1747,
            "username": "testdrivenio",
            "tweet_id": "1550880931207995392",
            "tweet_text": "Django tip:\n\nTo enforce permissions in class-based views, you can use the PermissionRequiredMixin from django.contrib.auth.mixins \ud83d\udc47 https://t.co/YKBAvaZ0of",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYXV_IXUsAEeT8A.png\"]",
            "tweet_conversation_id": "1550880931207995392",
            "tweet_type": "Django tips",
            "created_at": "2022-07-23T16:30:02.000Z"
        },
        {
            "id": 1748,
            "username": "testdrivenio",
            "tweet_id": "1550852091534577671",
            "tweet_text": "Microservices and Team Culture\n\nhttps://t.co/MR1Da1MPTd \n\n\ud83d\udd38Explains the concept of microservices\n\ud83d\udd38Looks at the kind of team culture or practices that are required in order to successfully adopt a microservices architecture design approach\n\nby @LuKE9ine\n\n#Microservices",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550852091534577671",
            "tweet_type": "Others",
            "created_at": "2022-07-23T14:35:26.000Z"
        },
        {
            "id": 1749,
            "username": "testdrivenio",
            "tweet_id": "1550556115867504645",
            "tweet_text": "Logging in Python: A Developer\u2019s Guide \n\nhttps://t.co/y7Qqph0m9H \n\nvia @getsentry \n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550556115867504645",
            "tweet_type": "Others",
            "created_at": "2022-07-22T18:59:20.000Z"
        },
        {
            "id": 1750,
            "username": "testdrivenio",
            "tweet_id": "1550518546253225984",
            "tweet_text": "Read more about Django permissions:\nhttps://t.co/cypF3pweMW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550518541870174208",
            "tweet_type": "Others",
            "created_at": "2022-07-22T16:30:03.000Z"
        },
        {
            "id": 1751,
            "username": "testdrivenio",
            "tweet_id": "1550518541870174208",
            "tweet_text": "Django tip:\n\nInstead of handling permissions for a single user, you can use groups and group-level permissions \ud83d\udc47 https://t.co/MxFcx5Cg0h",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYSMZRZUIAAHwEH.png\"]",
            "tweet_conversation_id": "1550518541870174208",
            "tweet_type": "Django tips",
            "created_at": "2022-07-22T16:30:02.000Z"
        },
        {
            "id": 1752,
            "username": "testdrivenio",
            "tweet_id": "1550495349726494720",
            "tweet_text": "Running Flower in Production\n\nhttps://t.co/2usVdmQ1Xe\n\nLooks at how to configure Flower (Celery monitoring tool) with basic authentication running behind Nginx with Docker.\n\n(Just updated! \ud83d\ude80)\n\n#Python #Celery #DevOps",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550495349726494720",
            "tweet_type": "Others",
            "created_at": "2022-07-22T14:57:52.000Z"
        },
        {
            "id": 1753,
            "username": "testdrivenio",
            "tweet_id": "1550156154642518016",
            "tweet_text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550156152499245057",
            "tweet_type": "Others",
            "created_at": "2022-07-21T16:30:02.000Z"
        },
        {
            "id": 1754,
            "username": "testdrivenio",
            "tweet_id": "1550156152499245057",
            "tweet_text": "Django tip:\n\nYou can check if a user has permission with the has_perm() method. https://t.co/TL35JddWiZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYNCzewUIAAWiCG.png\"]",
            "tweet_conversation_id": "1550156152499245057",
            "tweet_type": "Django tips",
            "created_at": "2022-07-21T16:30:01.000Z"
        },
        {
            "id": 1755,
            "username": "testdrivenio",
            "tweet_id": "1550119640679845894",
            "tweet_text": "Setting up a Private PyPI Server\n\nhttps://t.co/JLWG5kRswp \n\nLooks at how to set up your own private PyPI server using pypiserver, a PyPI compatible server, and Docker, hosted on an AWS EC2 instance.\n\n(just updated! \ud83d\udcaa)\n\n#Python #PyPI #Docker",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550119640679845894",
            "tweet_type": "Others",
            "created_at": "2022-07-21T14:04:56.000Z"
        },
        {
            "id": 1756,
            "username": "testdrivenio",
            "tweet_id": "1549793765027905536",
            "tweet_text": "Read more about Django permissions:\nhttps://t.co/cypF3pOo14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549793762766860288",
            "tweet_type": "Others",
            "created_at": "2022-07-20T16:30:02.000Z"
        },
        {
            "id": 1757,
            "username": "testdrivenio",
            "tweet_id": "1549793762766860288",
            "tweet_text": "Django tip:\n\nWith django.contrib.auth, Django automatically creates add, change, delete and view permissions for each Django model.\nEach permission is named like this: {app}.{action}_{model_name}\n\nYou can also see (and set) those permissions in Django admin \ud83d\udc47 https://t.co/KcDRcGtq5o",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYH5NnQaQAAd-U5.png\"]",
            "tweet_conversation_id": "1549793762766860288",
            "tweet_type": "Django tips",
            "created_at": "2022-07-20T16:30:01.000Z"
        },
        {
            "id": 1758,
            "username": "testdrivenio",
            "tweet_id": "1549764705392132098",
            "tweet_text": "Flask Stripe Subscriptions\n\nhttps://t.co/zvgRAEMiKm\n\nSet up and collect monthly recurring subscription payments with Flask and Stripe.\n\n(Just updated! \ud83d\udcaa)\n\n#Flask #Python #WebDev @StripeDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549764705392132098",
            "tweet_type": "Others",
            "created_at": "2022-07-20T14:34:33.000Z"
        },
        {
            "id": 1759,
            "username": "testdrivenio",
            "tweet_id": "1549431374196527104",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549431369922592776",
            "tweet_type": "Others",
            "created_at": "2022-07-19T16:30:01.000Z"
        },
        {
            "id": 1760,
            "username": "testdrivenio",
            "tweet_id": "1549431373156724736",
            "tweet_text": "Source: https://t.co/cypF3pOo14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549431369922592776",
            "tweet_type": "Others",
            "created_at": "2022-07-19T16:30:01.000Z"
        },
        {
            "id": 1761,
            "username": "testdrivenio",
            "tweet_id": "1549431372166885376",
            "tweet_text": "Authentication answers the question 'who are you?' while authorization answers 'what can you do?'.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549431369922592776",
            "tweet_type": "Others",
            "created_at": "2022-07-19T16:30:00.000Z"
        },
        {
            "id": 1762,
            "username": "testdrivenio",
            "tweet_id": "1549431371013074946",
            "tweet_text": "Authentication is the process of confirming if a user has access to a system. \n\nAuthorization pertains to what the \"authenticated\" user can do in a system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549431369922592776",
            "tweet_type": "Others",
            "created_at": "2022-07-19T16:30:00.000Z"
        },
        {
            "id": 1763,
            "username": "testdrivenio",
            "tweet_id": "1549431369922592776",
            "tweet_text": "Do you know the difference between authentication and authorization?\n\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549431369922592776",
            "tweet_type": "Others",
            "created_at": "2022-07-19T16:30:00.000Z"
        },
        {
            "id": 1764,
            "username": "testdrivenio",
            "tweet_id": "1549400298120253454",
            "tweet_text": "Guide to Unit Testing Vue Components  \n\n(just refreshed the article)\n\n\ud83d\udd38Why you should write unit tests\n\ud83d\udd38What you should (and should not) unit test\n\ud83d\udd38How to write unit tests\n\nby @patkennedy79\n \nhttps://t.co/hTSRMSnpYs\n\n#Vue #JavaScript #testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549400298120253454",
            "tweet_type": "Others",
            "created_at": "2022-07-19T14:26:32.000Z"
        },
        {
            "id": 1765,
            "username": "testdrivenio",
            "tweet_id": "1549068989287899137",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549068987484385281",
            "tweet_type": "Others",
            "created_at": "2022-07-18T16:30:02.000Z"
        },
        {
            "id": 1766,
            "username": "testdrivenio",
            "tweet_id": "1549068987484385281",
            "tweet_text": "Did you know?\n\nThere's a Python library that tells you jokes. https://t.co/JS4VJ9UWpr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FX9mCJqakAE6wqT.png\"]",
            "tweet_conversation_id": "1549068987484385281",
            "tweet_type": "Others",
            "created_at": "2022-07-18T16:30:01.000Z"
        },
        {
            "id": 1767,
            "username": "testdrivenio",
            "tweet_id": "1548777335696117760",
            "tweet_text": "Summary of common code smells\n\nhttps://t.co/2xiGCDI8tn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548777335696117760",
            "tweet_type": "Others",
            "created_at": "2022-07-17T21:11:06.000Z"
        },
        {
            "id": 1768,
            "username": "testdrivenio",
            "tweet_id": "1548706605494984705",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548706603020734464",
            "tweet_type": "Others",
            "created_at": "2022-07-17T16:30:02.000Z"
        },
        {
            "id": 1769,
            "username": "testdrivenio",
            "tweet_id": "1548706603020734464",
            "tweet_text": "Python tip:\n\nOne of the types Pythons typing module provides is a TypedDict. \n\nTypedDict specifies a dictionary type with a certain set of keys, where each key is associated with a value of a consistent type. https://t.co/DZPDfRKPsc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FX4ccjeaUAA1c2S.png\"]",
            "tweet_conversation_id": "1548706603020734464",
            "tweet_type": "Python tips",
            "created_at": "2022-07-17T16:30:02.000Z"
        },
        {
            "id": 1770,
            "username": "testdrivenio",
            "tweet_id": "1548677374274899971",
            "tweet_text": "Async in Flask 2.0 \n\nhttps://t.co/Y6PQAzSMTa \n\nThis article looks at Flask 2.0's new async functionality and how to leverage it in your Flask projects.\n\nby @patkennedy79\n \n#Flask #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548677374274899971",
            "tweet_type": "Others",
            "created_at": "2022-07-17T14:33:53.000Z"
        },
        {
            "id": 1771,
            "username": "testdrivenio",
            "tweet_id": "1548344219085176832",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548344217029619714",
            "tweet_type": "Others",
            "created_at": "2022-07-16T16:30:03.000Z"
        },
        {
            "id": 1772,
            "username": "testdrivenio",
            "tweet_id": "1548344217029619714",
            "tweet_text": "Python tip:\n\nAlthough Pythons typing module provides types for type hinting, you're not limited only to them.\n\nYou can use any other type. For example, UUID \ud83d\udc47 https://t.co/JAuXyPWs0M",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXzS27TaAAUkKwY.png\"]",
            "tweet_conversation_id": "1548344217029619714",
            "tweet_type": "Python tips",
            "created_at": "2022-07-16T16:30:02.000Z"
        },
        {
            "id": 1773,
            "username": "testdrivenio",
            "tweet_id": "1548318059370205186",
            "tweet_text": "Dockerizing Django with Postgres, Gunicorn, and Traefik\n\nhttps://t.co/0A0C13jjfE \n\nLooks at how to set up Django with Postgres and Docker. For production environments, we'll add on Gunicorn, Traefik, and Let's Encrypt.\n\nby @pydantic\n\n#Django #Python @Traefik @LetsEncrypt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548318059370205186",
            "tweet_type": "Others",
            "created_at": "2022-07-16T14:46:06.000Z"
        },
        {
            "id": 1774,
            "username": "testdrivenio",
            "tweet_id": "1547981828610748416",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547981825292701698",
            "tweet_type": "Others",
            "created_at": "2022-07-15T16:30:02.000Z"
        },
        {
            "id": 1775,
            "username": "testdrivenio",
            "tweet_id": "1547981825292701698",
            "tweet_text": "Python tip:\n\nTo enforce type hints, you can use mypy.\nmypy is a static type checker for Python. \n\nFor example, if we use the `List[float]` type hint for the function parameter and then provide a dictionary in a function call, this is what would happen when running mypy \ud83d\udc47 https://t.co/QF7XNWCTcL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXuJQ9_VQAAL5WG.png\"]",
            "tweet_conversation_id": "1547981825292701698",
            "tweet_type": "Python tips",
            "created_at": "2022-07-15T16:30:01.000Z"
        },
        {
            "id": 1776,
            "username": "testdrivenio",
            "tweet_id": "1547619443626217475",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547619441118044160",
            "tweet_type": "Others",
            "created_at": "2022-07-14T16:30:03.000Z"
        },
        {
            "id": 1777,
            "username": "testdrivenio",
            "tweet_id": "1547619441118044160",
            "tweet_text": "Python tip:\n\nSince version 3.5, Python supports type hints.\nThey aren't enforced by Python, but there are third-party tools that check them (mypy, IDEs).\n\nNone of the examples below produces an error, although only one gives the correct result \ud83d\udc47\n\nType hints can help with that. https://t.co/wnrlJhhq55",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXo_rZ8UcAEr2Qx.png\"]",
            "tweet_conversation_id": "1547619441118044160",
            "tweet_type": "Python tips",
            "created_at": "2022-07-14T16:30:02.000Z"
        },
        {
            "id": 1778,
            "username": "testdrivenio",
            "tweet_id": "1547571672005242882",
            "tweet_text": "OAuth2 in Python \n\nhttps://t.co/RfVES8xM68 \n\nThis article first provides an overview of Oauth2 concepts and then looks at how to implement OAuth2 with OAuthLib.\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547571672005242882",
            "tweet_type": "Others",
            "created_at": "2022-07-14T13:20:13.000Z"
        },
        {
            "id": 1779,
            "username": "testdrivenio",
            "tweet_id": "1547292676264951810",
            "tweet_text": "Review of Flask, From a Django Developer\n\nhttps://t.co/6tA20w8L57\n\nAre you familiar with Django, but you want to give Flask a try? \n\nThis article compares different aspects of both frameworks, so you can decide which one suits your needs.\n\nby @francofgp \n\n#Flask #Django #WebDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547292676264951810",
            "tweet_type": "Others",
            "created_at": "2022-07-13T18:51:35.000Z"
        },
        {
            "id": 1780,
            "username": "testdrivenio",
            "tweet_id": "1547257052568768513",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547257050257768448",
            "tweet_type": "Others",
            "created_at": "2022-07-13T16:30:02.000Z"
        },
        {
            "id": 1781,
            "username": "testdrivenio",
            "tweet_id": "1547257050257768448",
            "tweet_text": "Did you know?\n\nThere's a Python library that you can use to access and parse data from Wikipedia. https://t.co/hYu30RlEjq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXj2Ff_acAAjX1E.png\"]",
            "tweet_conversation_id": "1547257050257768448",
            "tweet_type": "Others",
            "created_at": "2022-07-13T16:30:02.000Z"
        },
        {
            "id": 1782,
            "username": "testdrivenio",
            "tweet_id": "1547220713634992128",
            "tweet_text": "Permissions in Django Rest Framework \n\nhttps://t.co/fXRNOXRm3X \n\nThis article looks at:\n\n\ud83d\udd38How DRF permissions work\n\ud83d\udd38The differences between 'has_permission' and 'has_object_permission'\n\ud83d\udd38When to use 'has_permission' and 'has_object_permission'\n\nby @GirlLovesToCode\n\n#Django \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547220713634992128",
            "tweet_type": "Others",
            "created_at": "2022-07-13T14:05:38.000Z"
        },
        {
            "id": 1783,
            "username": "testdrivenio",
            "tweet_id": "1546894666377101312",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546894664657420289",
            "tweet_type": "Others",
            "created_at": "2022-07-12T16:30:03.000Z"
        },
        {
            "id": 1784,
            "username": "testdrivenio",
            "tweet_id": "1546894664657420289",
            "tweet_text": "Did you know?\n\nPython Standard Library includes module cmath that provides access to mathematical functions for complex numbers. https://t.co/p2430bt7JE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXesf5wagAMinz4.png\"]",
            "tweet_conversation_id": "1546894664657420289",
            "tweet_type": "Others",
            "created_at": "2022-07-12T16:30:02.000Z"
        },
        {
            "id": 1785,
            "username": "testdrivenio",
            "tweet_id": "1546852822746107905",
            "tweet_text": "Developing RESTful APIs with Django REST Framework\n - new course!\n\nhttps://t.co/sIRe4wYTcf\n\n1\u20e3Views, Routers, and Serializers\n2\u20e3Auth and throttling\n3\u20e3Filters, pagination, and Browsable API\n4\u20e3Documenting, versioning, and deployment\n\nby @GirlLovesToCode \n\n#Django @RestFramework",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546852822746107905",
            "tweet_type": "Others",
            "created_at": "2022-07-12T13:43:46.000Z"
        },
        {
            "id": 1786,
            "username": "testdrivenio",
            "tweet_id": "1546587239559438347",
            "tweet_text": "Test-Driven Development helps:\n\n1. Reduce costs, bugs, coupling\n2. Make refactoring &amp; rewriting easier &amp; faster (\"make it work\" w/ red &amp; green stages, then refactor \"to make it right\")\n3. Increase confidence that the code works as expected\n\nhttps://t.co/LBUPvwfPIf\n\n#tdd #testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546587239559438347",
            "tweet_type": "Others",
            "created_at": "2022-07-11T20:08:26.000Z"
        },
        {
            "id": 1787,
            "username": "testdrivenio",
            "tweet_id": "1546532278201122817",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546532275885854720",
            "tweet_type": "Others",
            "created_at": "2022-07-11T16:30:02.000Z"
        },
        {
            "id": 1788,
            "username": "testdrivenio",
            "tweet_id": "1546532275885854720",
            "tweet_text": "Python tip:\n\nPython standard library includes an uuid module that you can use to generate a Universally Unique Identifier.\n\nThere are 4 different versions of UUID the module can produce (v 1, 3, 4, and 5).\n\nFunction uuid4 produces a random UUID and is probably used the most. https://t.co/6I8zzCc1yu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXZi6DoaIAAmMuU.png\"]",
            "tweet_conversation_id": "1546532275885854720",
            "tweet_type": "Python tips",
            "created_at": "2022-07-11T16:30:02.000Z"
        },
        {
            "id": 1789,
            "username": "testdrivenio",
            "tweet_id": "1546490063537807362",
            "tweet_text": "Dockerizing Flask with Postgres, Gunicorn, and Traefik \n\nhttps://t.co/57r1gNxI10 \n\nLooks at how to set up Flask with Postgres and Docker. For production environments, we'll add on Gunicorn, Traefik, and Let's Encrypt.\n\nby @pydantic\n\n#Flask #Python @Traefik",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546490063537807362",
            "tweet_type": "Others",
            "created_at": "2022-07-11T13:42:18.000Z"
        },
        {
            "id": 1790,
            "username": "testdrivenio",
            "tweet_id": "1546169889781850114",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546169887483039750",
            "tweet_type": "Others",
            "created_at": "2022-07-10T16:30:02.000Z"
        },
        {
            "id": 1791,
            "username": "testdrivenio",
            "tweet_id": "1546169887483039750",
            "tweet_text": "Python tip:\n\nPython standard library includes a webbrowser module that allows you to open a web-based document in a browser.\n\ud83d\udc47 https://t.co/q8Z53716Il",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXUZURgaMAAi5n6.png\"]",
            "tweet_conversation_id": "1546169887483039750",
            "tweet_type": "Python tips",
            "created_at": "2022-07-10T16:30:02.000Z"
        },
        {
            "id": 1792,
            "username": "testdrivenio",
            "tweet_id": "1546135230863523840",
            "tweet_text": "Deep Dive Into Flask Guide\n\nhttps://t.co/RhZSpmCLdx\n\nCovers topics like:\n\n1\u20e3The Application and Request Contexts\n2\u20e3Werkzeug\n3\u20e3Sessions\n4\u20e3Security\n5\u20e3Testing\n6\u20e3Asynchronous route handlers\n\nDeveloped by @patkennedy79\n \n#Flask @PalletsTeam",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546135230863523840",
            "tweet_type": "Others",
            "created_at": "2022-07-10T14:12:19.000Z"
        },
        {
            "id": 1793,
            "username": "testdrivenio",
            "tweet_id": "1545944550954475521",
            "tweet_text": "Asynchronous Tasks with Django and Celery\n\nhttps://t.co/m0ljbuKqHA\n\nObjectives:\n\n\ud83d\udd38Integrate Celery into a Django app and create tasks\n\ud83d\udd38Containerize Django, Celery, and Redis with Docker\n\ud83d\udd38Test a Celery task with both unit and integration tests\n\n#Django #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545944550954475521",
            "tweet_type": "Others",
            "created_at": "2022-07-10T01:34:37.000Z"
        },
        {
            "id": 1794,
            "username": "testdrivenio",
            "tweet_id": "1545807502410821632",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545807499852681216",
            "tweet_type": "Others",
            "created_at": "2022-07-09T16:30:02.000Z"
        },
        {
            "id": 1795,
            "username": "testdrivenio",
            "tweet_id": "1545807499852681216",
            "tweet_text": "Python tip:\n\nDid you know you can generate a complete HTML page with a yearly calendar using Python? https://t.co/yokgWEA326",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXPPuiraMAAB24n.png\", \"https://pbs.twimg.com/media/FXPPuiRUYAM6Lqq.png\"]",
            "tweet_conversation_id": "1545807499852681216",
            "tweet_type": "Python tips",
            "created_at": "2022-07-09T16:30:02.000Z"
        },
        {
            "id": 1796,
            "username": "testdrivenio",
            "tweet_id": "1545445118538547200",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545445113564114944",
            "tweet_type": "Others",
            "created_at": "2022-07-08T16:30:03.000Z"
        },
        {
            "id": 1797,
            "username": "testdrivenio",
            "tweet_id": "1545445113564114944",
            "tweet_text": "Python tip:\n\nYou can get a year\u2019s calendar in a multi-line string using Python's Calendar module.\n\nYou need to provide the year, and you can impact how it looks with optional parameters.\n\nYou can use formatyear to get the string or pryear to directly print the output. https://t.co/63NEZ0KqVw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXKGI5JacAA0Dl9.png\"]",
            "tweet_conversation_id": "1545445113564114944",
            "tweet_type": "Python tips",
            "created_at": "2022-07-08T16:30:02.000Z"
        },
        {
            "id": 1798,
            "username": "testdrivenio",
            "tweet_id": "1545389604454674433",
            "tweet_text": "Working with Django and Celery\n\nhttps://t.co/viiR7OSC6A\n\nGuide:\n\n1\u20e3 Asynchronous Tasks with Django and Celery\n2\u20e3 Periodic Tasks in Django with Celery and Docker\n3\u20e3 Automatically Retrying Failed Celery Tasks\n4\u20e3 Working with Celery and Database Transactions\n\n#Django #Celery",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545389604454674433",
            "tweet_type": "Others",
            "created_at": "2022-07-08T12:49:28.000Z"
        },
        {
            "id": 1799,
            "username": "testdrivenio",
            "tweet_id": "1545082725845319680",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545082723697455104",
            "tweet_type": "Others",
            "created_at": "2022-07-07T16:30:02.000Z"
        },
        {
            "id": 1800,
            "username": "testdrivenio",
            "tweet_id": "1545082723697455104",
            "tweet_text": "Python tip:\n\nPython's Calendar module lets you get a month\u2019s calendar in a multi-line string.\nRequired parameters are the year and the month.\n\nYou can use formatmonth to generate the string or prmonth to directly print it. https://t.co/uMBzS0atOB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXE8jDQaUAATDJ0.png\"]",
            "tweet_conversation_id": "1545082723697455104",
            "tweet_type": "Python tips",
            "created_at": "2022-07-07T16:30:02.000Z"
        },
        {
            "id": 1801,
            "username": "testdrivenio",
            "tweet_id": "1544720339644530689",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCoXPq\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544720337207562240",
            "tweet_type": "Others",
            "created_at": "2022-07-06T16:30:03.000Z"
        },
        {
            "id": 1802,
            "username": "testdrivenio",
            "tweet_id": "1544720337207562240",
            "tweet_text": "Python tip:\n\nYou can get a list of all months, containing all the dates for a year with a yeardatescalendar.\n\nYou need to provide the date and width as arguments.\n\nThe return looks like this: \n[list of months[month[week[datetime object]]]] https://t.co/N1WlI3lO5a",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW_y9VfaQAIkWSq.png\"]",
            "tweet_conversation_id": "1544720337207562240",
            "tweet_type": "Python tips",
            "created_at": "2022-07-06T16:30:02.000Z"
        },
        {
            "id": 1803,
            "username": "testdrivenio",
            "tweet_id": "1544692782090035201",
            "tweet_text": "Continuously Deploying Django to DigitalOcean with Docker and GitLab\n\nhttps://t.co/6kLYi5SfXD\n\nObjectives:\n\n\ud83d\udd38Deploy #Django to DigitalOcean with #Docker\n\ud83d\udd38Configure GitLab CI to continuously deploy Django to DigitalOcean\n\ud83d\udd38Configure @DigitalOcean's Managed Databases",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544692782090035201",
            "tweet_type": "Others",
            "created_at": "2022-07-06T14:40:32.000Z"
        },
        {
            "id": 1804,
            "username": "testdrivenio",
            "tweet_id": "1544418253677666309",
            "tweet_text": "Parallelism, Concurrency, and AsyncIO in Python - by example\n\nhttps://t.co/1vUrkMMz6a\n\nLooks at how to speed up CPU-bound and IO-bound operations with multiprocessing, threading, and AsyncIO and when you should use each.\n\nby @pydantic\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544418253677666309",
            "tweet_type": "Others",
            "created_at": "2022-07-05T20:29:40.000Z"
        },
        {
            "id": 1805,
            "username": "testdrivenio",
            "tweet_id": "1544357949199757312",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544357947274559488",
            "tweet_type": "Others",
            "created_at": "2022-07-05T16:30:02.000Z"
        },
        {
            "id": 1806,
            "username": "testdrivenio",
            "tweet_id": "1544357947274559488",
            "tweet_text": "Python tip:\n\nTo get a list of the weeks in a certain month, INCLUDING weekday numbers, you can use monthdays2calendar.\n\nYou need to provide the date and month as arguments.\n\nA list of lists, each containing seven tuples of day numbers and weekday numbers, is returned. https://t.co/dktuH7kHTM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW6pXf5VUAAOx3v.png\"]",
            "tweet_conversation_id": "1544357947274559488",
            "tweet_type": "Python tips",
            "created_at": "2022-07-05T16:30:02.000Z"
        },
        {
            "id": 1807,
            "username": "testdrivenio",
            "tweet_id": "1544067636354498560",
            "tweet_text": "The Complete Python Development Guide\n\nhttps://t.co/816EWFQ2Md\n\nWant to take your Python development to the next level?\n\nDevelop Python apps with confidence by mastering the tools needed to ship well-tested, high-quality code.\n\nby @jangiacomelli\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544067636354498560",
            "tweet_type": "Others",
            "created_at": "2022-07-04T21:16:26.000Z"
        },
        {
            "id": 1808,
            "username": "testdrivenio",
            "tweet_id": "1543995561665527809",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\n\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543995558834348032",
            "tweet_type": "Others",
            "created_at": "2022-07-04T16:30:02.000Z"
        },
        {
            "id": 1809,
            "username": "testdrivenio",
            "tweet_id": "1543995558834348032",
            "tweet_text": "Python tip:\n\nTo get a list of the weeks in a certain month, you can use the monthdatescalendar.\n\nYou need to provide the date and month as arguments.\n\nA list of lists, each containing 7 https://t.co/JA2fLO1bHw objects is returned. https://t.co/NTglCSHjMd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1fxtRagAEiqvH.png\"]",
            "tweet_conversation_id": "1543995558834348032",
            "tweet_type": "Python tips",
            "created_at": "2022-07-04T16:30:01.000Z"
        },
        {
            "id": 1810,
            "username": "testdrivenio",
            "tweet_id": "1543633172273176576",
            "tweet_text": "You can find this and other tips here:\nhttps://t.co/aaDPvCH73y\nDon't miss our daily Python tips - follow us on @testdrivenio \ud83d\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543633170385752065",
            "tweet_type": "Others",
            "created_at": "2022-07-03T16:30:02.000Z"
        },
        {
            "id": 1811,
            "username": "testdrivenio",
            "tweet_id": "1543633170385752065",
            "tweet_text": "Python tip:\n\nTo get complete dates (including a day in a week) for a certain month, you can use the itermonthdays4 function.\n\nReturned days will be tuples, consisting of a year, a month, a day of the month, and a week day number. https://t.co/2mBww1Xj4P",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWwWL7YaIAIvJTR.png\"]",
            "tweet_conversation_id": "1543633170385752065",
            "tweet_type": "Python tips",
            "created_at": "2022-07-03T16:30:01.000Z"
        },
        {
            "id": 1812,
            "username": "testdrivenio",
            "tweet_id": "1543588944117383170",
            "tweet_text": "Behavior-Driven Development with Django and Aloe \n\nhttps://t.co/4fs73Qqx4Q\n\nObjectives:\n\n- Describe and practice behavior-driven development (BDD)\n- Explain how to implement BDD in a new project\n- Test your Django applications using Aloe\n\n#Django #Python #Testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543588944117383170",
            "tweet_type": "Others",
            "created_at": "2022-07-03T13:34:17.000Z"
        },
        {
            "id": 1813,
            "username": "testdrivenio",
            "tweet_id": "1543309030898241536",
            "tweet_text": "Built-in Permission Classes in Django Rest Framework \n\nhttps://t.co/1UqVppOTR9 \n\nby @GirlLovesToCode\n \n#Django",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543309030898241536",
            "tweet_type": "Others",
            "created_at": "2022-07-02T19:02:00.000Z"
        },
        {
            "id": 1814,
            "username": "mathsppblog",
            "tweet_id": "1603784961911390209",
            "tweet_text": "These are two simpler examples of what ChatGPT got right \ud83d\udc47\n\nBut I saw amazing results with things like:\n\n - asyncio\n - list comprehensions\n - decorators\n - dunder methods\n - ... https://t.co/ON2Z4irWfy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkHJ6akWIAEpMXb.jpg\", \"https://pbs.twimg.com/media/FkHJ6bgWIAM2nuO.png\"]",
            "tweet_conversation_id": "1603784955926118402",
            "tweet_type": "Others",
            "created_at": "2022-12-16T16:11:46.000Z"
        },
        {
            "id": 1815,
            "username": "mathsppblog",
            "tweet_id": "1603784955926118402",
            "tweet_text": "Today I ran a Python \ud83d\udc0d REPL inside ChatGPT!\n\nI documented the amazing things ChatGPT knew and did and I also took note of its silly mistakes...\n\nHere's a read-up:\n\nhttps://t.co/AVZ5lxqGbo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603784955926118402",
            "tweet_type": "Python tips",
            "created_at": "2022-12-16T16:11:45.000Z"
        },
        {
            "id": 1816,
            "username": "mathsppblog",
            "tweet_id": "1603709489726869505",
            "tweet_text": "Spent some time playing with #ChatGPT this morning.\n\nAsked it to interpret my Python \ud83d\udc0d code.\n\nIt even understands async code!\n\nMaybe @willmcgugan should've hired ChatGPT instead of me \ud83e\udd37\n\nBlog post coming out soon (\ud83d\udd17https://t.co/KBf3Rsdnil) https://t.co/3yrgYa89Ec",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGEswXWQAAwak7.png\"]",
            "tweet_conversation_id": "1603709489726869505",
            "tweet_type": "Python tips",
            "created_at": "2022-12-16T11:11:52.000Z"
        },
        {
            "id": 1817,
            "username": "mathsppblog",
            "tweet_id": "1601262212450258944",
            "tweet_text": "After a lot of tinkering, filing bugs and fixing them, and a couple of headaches, I have my Secret Santa \ud83c\udf85 app in a state I enjoy.\n\nBelow \ud83d\udc47 is a demo.\n\nLink to the code: https://t.co/g95axXRAOw https://t.co/HzxvbTksXc",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1601262106233520133/pu/vid/1280x720/p174uU8qxEdIQDqd.mp4?tag=12\"]",
            "tweet_conversation_id": "1601262212450258944",
            "tweet_type": "Others",
            "created_at": "2022-12-09T17:07:16.000Z"
        },
        {
            "id": 1818,
            "username": "mathsppblog",
            "tweet_id": "1601172373276749824",
            "tweet_text": "Python \ud83d\udc0d continues to be a game-changer in the world of programming. From its robust libraries to its versatile capabilities, this language never ceases to impress me.\n\nHow do YOU feel?\n\n#python #coding #programming",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601172373276749824",
            "tweet_type": "Python tips",
            "created_at": "2022-12-09T11:10:16.000Z"
        },
        {
            "id": 1819,
            "username": "mathsppblog",
            "tweet_id": "1600548826192162816",
            "tweet_text": "Another Secret Santa \ud83c\udf81\ud83c\udf85 app update.\n\nI reworked the way the matches are generated to be much faster and I improved the display of the results a little bit.\n\nFor this last change I thought it would be fun to record the screen and then present a timelapse of what I did \ud83d\udc47 https://t.co/sPs2p4lnEz",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1600548713910485006/pu/vid/1280x720/otV2gQ3CWKrdoSqf.mp4?tag=12\"]",
            "tweet_conversation_id": "1600548826192162816",
            "tweet_type": "Others",
            "created_at": "2022-12-07T17:52:31.000Z"
        },
        {
            "id": 1820,
            "username": "mathsppblog",
            "tweet_id": "1600499946414907398",
            "tweet_text": "TL;DR:\n\nPython \ud83d\udc0d:\n\n \ud83d\udc49 support for OOP and many other paradigms\n \ud83d\udc49 dynamically-typed\n \ud83d\udc49 big standard library\n \ud83d\udc49 huge, active ecosystem\n \ud83d\udc49 popular for ML and data science\n \ud83d\udc49 low barrier to entry for beginners...\n \ud83d\udc49 and huge potential for experienced devs!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:17.000Z"
        },
        {
            "id": 1821,
            "username": "mathsppblog",
            "tweet_id": "1600499943562690561",
            "tweet_text": "As I've heard @reuvenmlerner put it so many times, Python is a language with low floors and very high ceilings.\n\nIn other words, the barrier to entry is very low and the potential is very high!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Others",
            "created_at": "2022-12-07T14:38:17.000Z"
        },
        {
            "id": 1822,
            "username": "mathsppblog",
            "tweet_id": "1600499941247537157",
            "tweet_text": "Overall, Python \ud83d\udc0d is a versatile language that can be used for many different purposes.\n\nWhether you're a beginner looking to learn to code or an experienced developer looking to build a complex application, Python is worth considering.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:16.000Z"
        },
        {
            "id": 1823,
            "username": "mathsppblog",
            "tweet_id": "1600499939070681090",
            "tweet_text": "Python \ud83d\udc0d is also a VERY popular language for data science and machine learning.\n\nIt has powerful libraries like keras, TensorFlow, and scikit-learn, that make it easy to build and train machine learning models.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:15.000Z"
        },
        {
            "id": 1824,
            "username": "mathsppblog",
            "tweet_id": "1600499936952549376",
            "tweet_text": "Python \ud83d\udc0d also has a vibrant ecosystem of third-party libraries and frameworks that you can use to extend its functionality.\n\nSome of the most popular ones include:\n\ud83d\udc49 Django \ud83c\udf10 for web development\n\ud83d\udc49 NumPy \ud83e\uddee for scientific computing\n\ud83d\udc49 Pandas \ud83d\udc3c for data analysis",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:15.000Z"
        },
        {
            "id": 1825,
            "username": "mathsppblog",
            "tweet_id": "1600499934725275650",
            "tweet_text": "Another key feature of Python \ud83d\udc0d is its large standard library, which provides many common tools that you can use in your code without having to write them yourself.\n\nThis means you can do a lot with just a few lines of code.\n\nIt's all just one `import` away.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:14.000Z"
        },
        {
            "id": 1826,
            "username": "mathsppblog",
            "tweet_id": "1600499932003274759",
            "tweet_text": "As a wise uncle once said, https://t.co/c55H22EPjJ",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjYeM1MXoAA146L.mp4\"]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Others",
            "created_at": "2022-12-07T14:38:14.000Z"
        },
        {
            "id": 1827,
            "username": "mathsppblog",
            "tweet_id": "1600499919931990021",
            "tweet_text": "Python \ud83d\udc0d is also a dynamically-typed language, which means you don't have to specify the data type of a variable when you declare it.\n\nThis makes it easy to quickly write and test code.\n\n(It can also make your code more difficult to read if you don't think things through.)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:11.000Z"
        },
        {
            "id": 1828,
            "username": "mathsppblog",
            "tweet_id": "1600499917348392962",
            "tweet_text": "One of the key features of Python \ud83d\udc0d is its support for OOP, which is a way of organizing your code into classes and objects.\n\nThis makes it easy to create modular and reusable code.\n\nHowever, Python is very flexible because it supports many other paradigms.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:10.000Z"
        },
        {
            "id": 1829,
            "username": "mathsppblog",
            "tweet_id": "1600499914252886017",
            "tweet_text": "Python \ud83d\udc0d is a high-level, interpreted language that is easy to learn and use.\n\nIt's a great language for beginners because it has a simple syntax and reads like English.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:10.000Z"
        },
        {
            "id": 1830,
            "username": "mathsppblog",
            "tweet_id": "1600499911690166275",
            "tweet_text": "How is Python \ud83d\udc0d as a programming language?\n\nIf someone asked me that question, this is what I would say \ud83d\udc47\n\nTake a look and let me know what I'm missing or what you would actually remove!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600499911690166275",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:38:09.000Z"
        },
        {
            "id": 1831,
            "username": "mathsppblog",
            "tweet_id": "1599821807292293121",
            "tweet_text": "Now you can remove names that you didn't mean to add to the draw!\n\nWhat is the next feature that I should build? \u2692\ufe0f https://t.co/EbMVJNFmCK",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1599821590396649472/pu/vid/1280x720/aVcCi3NKwqcTowls.mp4?tag=12\"]",
            "tweet_conversation_id": "1599077776648065025",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:43:36.000Z"
        },
        {
            "id": 1832,
            "username": "mathsppblog",
            "tweet_id": "1599803248613158913",
            "tweet_text": "Added a nice custom footer \ud83d\udc47\n\nNext, I think I'll work on the ability to remove people from the list of entrants. https://t.co/UZvL3RmIgE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOkkBzXEAol8yK.png\"]",
            "tweet_conversation_id": "1599077776648065025",
            "tweet_type": "Others",
            "created_at": "2022-12-05T16:29:52.000Z"
        },
        {
            "id": 1833,
            "username": "mathsppblog",
            "tweet_id": "1599094499879239680",
            "tweet_text": "Played around a bit with the messaging system to create the results screen in a better way.\n\nNow I also have a \u201creset draw\u201d button to create a new draw.\n\nI have some layout issues to fix now, though. https://t.co/exc1Tj6HOz",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1599094253627613184/pu/vid/1280x720/z4u6Dd3Ao1U3JHg3.mp4?tag=12\"]",
            "tweet_conversation_id": "1599077776648065025",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:33:33.000Z"
        },
        {
            "id": 1834,
            "username": "mathsppblog",
            "tweet_id": "1599087984011538435",
            "tweet_text": "Progress is being made \ud83d\udcaa\n\nNow, I have a little check to see if I try to add the same person twice.\n\nI also have a basic results screen that shows the result of the draw. https://t.co/HtLtDFbOgY",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1599087820072783873/pu/vid/1280x720/JrAUlXd5wCMswTdi.mp4?tag=12\"]",
            "tweet_conversation_id": "1599077776648065025",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:07:39.000Z"
        },
        {
            "id": 1835,
            "username": "mathsppblog",
            "tweet_id": "1599077949856133121",
            "tweet_text": "I banged my head against the new failing tests and the bug for a while, then I called it a day.\n\nI will keep writing about my progress here:\n\nhttps://t.co/wyFpgN7rdq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-03T16:27:47.000Z"
        },
        {
            "id": 1836,
            "username": "mathsppblog",
            "tweet_id": "1599077776648065025",
            "tweet_text": "Yesterday I started developing a Secret Santa \ud83c\udf85 app with Textual.\n\nThen, I got sidetracked because I found a bug and started fixing it.\n\nNow, I'm going to keep working on the app.\n\nThis is a video of what I have so far:\n\n\ud83d\udc49 a welcome screen\n\ud83d\udc49 a screen to add names to the draw https://t.co/4LhJ19P1qd",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1599077659081953280/pu/vid/1280x720/4T6-BGjdSovFNY9K.mp4?tag=12\"]",
            "tweet_conversation_id": "1599077776648065025",
            "tweet_type": "Others",
            "created_at": "2022-12-03T16:27:06.000Z"
        },
        {
            "id": 1837,
            "username": "mathsppblog",
            "tweet_id": "1598705391738552321",
            "tweet_text": "\ud83d\ude0c nothing like writing a couple of failing tests... https://t.co/Vc71uCydTR",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi--EGcWAAAZKmI.png\"]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T15:47:22.000Z"
        },
        {
            "id": 1838,
            "username": "mathsppblog",
            "tweet_id": "1598678306282414080",
            "tweet_text": "Gotta take a detour here.\n\nFound the source of the bug and I think I know how to fix it.\n\nLet me add some (failing) tests and see if I can fix them. https://t.co/HzG0Xm33Iw",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Fi-lcSPWIAAC0k-.mp4\"]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:59:44.000Z"
        },
        {
            "id": 1839,
            "username": "mathsppblog",
            "tweet_id": "1598669354404646912",
            "tweet_text": "This video also shows a nice debugging \u201ctrick\u201d I do (and everyone else does):\n\nGive different background colours to your widgets to make sure you know what is in front of what, the size of each thing, etc.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:24:10.000Z"
        },
        {
            "id": 1840,
            "username": "mathsppblog",
            "tweet_id": "1598669350977896449",
            "tweet_text": "Hit a bug and also had my lunch break \ud83c\udf74\n\nThe bug: I have a Vertical container with `height: auto`, meaning it should be tall enough to hold its children.\n\nIn the video, I keep removing child labels and the container gets shorter, until it stretches wildly when it has 0 children. https://t.co/NYkxn5IFBg",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1598669042306498561/pu/vid/1280x720/zDtvqQrypXG-x29z.mp4?tag=12\"]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:24:09.000Z"
        },
        {
            "id": 1841,
            "username": "mathsppblog",
            "tweet_id": "1598643703471562753",
            "tweet_text": "Alright, so names can be added now!\n\nLet me add a \u201cGenerate \ud83c\udf81\u201d button and v0.0.0.0.0.1 of the app will be finished! https://t.co/sE5DVIissF",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1598643504254779393/pu/vid/1280x720/4nk48QXbCkjWFQk8.mp4?tag=12\"]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T11:42:14.000Z"
        },
        {
            "id": 1842,
            "username": "mathsppblog",
            "tweet_id": "1598641183504433153",
            "tweet_text": "Looking much better now!\n\nNow, I'm gonna start with just letting the user type a bunch of names and then generate the draw from those. https://t.co/Ebh3HOmz52",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-DcjLWYAEgEDK.png\"]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T11:32:14.000Z"
        },
        {
            "id": 1843,
            "username": "mathsppblog",
            "tweet_id": "1598636594642165761",
            "tweet_text": "If I run the app in development mode, I can live-edit the CSS and see what the changes look like! \u2728 https://t.co/N4k298YIEX",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1598636577277755392/pu/vid/1280x720/hy9nkMNz7QLMG4Vi.mp4?tag=12\"]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T11:14:00.000Z"
        },
        {
            "id": 1844,
            "username": "mathsppblog",
            "tweet_id": "1598634598220681219",
            "tweet_text": "Today I'll be working on a Secret Santa \ud83c\udf85 app.\n\nI'll be building it with Textual.\n\nThis is my starting point, a welcome screen: https://t.co/h8xL5sBEGa",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi99rlDX0AcfW4T.png\"]",
            "tweet_conversation_id": "1598634598220681219",
            "tweet_type": "Others",
            "created_at": "2022-12-02T11:06:04.000Z"
        },
        {
            "id": 1845,
            "username": "mathsppblog",
            "tweet_id": "1595724934436868098",
            "tweet_text": "Did you know that Python \ud83d\udc0d can round to the nearest tens, hundreds, thousands, etc?\n\nSee the examples below \ud83d\udc47\n\nWhat are the results missing here?\n\n&gt;&gt;&gt; num = 9182.7365\n&gt;&gt;&gt; round(num, -1)\n???\n&gt;&gt;&gt; round(num, -2)\n??? https://t.co/6R2aFkOkL3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiUnRpXXEAIbil8.jpg\"]",
            "tweet_conversation_id": "1595724934436868098",
            "tweet_type": "Python tips",
            "created_at": "2022-11-24T10:24:06.000Z"
        },
        {
            "id": 1846,
            "username": "mathsppblog",
            "tweet_id": "1593554788561653762",
            "tweet_text": "Having fun at @textualizeio, playing with squares and rectangles \ud83d\ude43 https://t.co/MH7pcYSJdU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh1xav2XgAEcSjZ.png\"]",
            "tweet_conversation_id": "1593554788561653762",
            "tweet_type": "Others",
            "created_at": "2022-11-18T10:40:43.000Z"
        },
        {
            "id": 1847,
            "username": "mathsppblog",
            "tweet_id": "1591130992244244480",
            "tweet_text": "So stoked!\n\nStarting from next week, if Textual breaks, you know whose fault it was \ud83d\ude43 https://t.co/N4sa0jieDA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591130992244244480",
            "tweet_type": "Others",
            "created_at": "2022-11-11T18:09:24.000Z"
        },
        {
            "id": 1848,
            "username": "mathsppblog",
            "tweet_id": "1590839454352429058",
            "tweet_text": "On top of everything, I don't even really know what this means because \u201cyou invented Python\u201d isn't even the typical \u201cmax grade\u201d.\n\nEvery single day I learn something new about Python!\nAnd I'm sure even the members of the Python core team learn new things relatively frequently..!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590837026383106049",
            "tweet_type": "Others",
            "created_at": "2022-11-10T22:50:56.000Z"
        },
        {
            "id": 1849,
            "username": "mathsppblog",
            "tweet_id": "1590837026383106049",
            "tweet_text": "I can't believe this interview question: \ud83e\udd26\n\n\u201cWhat is the level of your Python \ud83d\udc0d coding skill \u2013 say on a scale of 1-10 with 1 being beginner and 10 \"you invented Python?\"\u201d\n\nHonestly, who asks this in an interview question? \ud83d\ude21\n\nHow would you answer this, if you really had to?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590837026383106049",
            "tweet_type": "Python tips",
            "created_at": "2022-11-10T22:41:18.000Z"
        },
        {
            "id": 1850,
            "username": "mathsppblog",
            "tweet_id": "1590781232253530112",
            "tweet_text": "Hey @nathanbarry, can we get a monospaced font for ConvertKit (broadcasts), please? \ud83d\ude4f\n\nIt would add so much value to creators like me, who dabble in the world of programming.\n\nIf it were Christmas and you were Santa, I'd even ask for a \u201ccode snippet\u201d block for emails \ud83d\ude01\ud83d\ude01",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590781232253530112",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:59:35.000Z"
        },
        {
            "id": 1851,
            "username": "mathsppblog",
            "tweet_id": "1588863098848710656",
            "tweet_text": "Just in case Twitter goes under \u2620\ufe0f, join me and 15,000 others in the Mathspp Insider \ud83d\udce7\n\nIt's the newsletter that is taking your Python \ud83d\udc0d skills to the next level \ud83d\ude80\n\nSign up here \ud83d\udc47\n\nhttps://t.co/DOWZZCNEMI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588863098848710656",
            "tweet_type": "Python tips",
            "created_at": "2022-11-05T11:57:37.000Z"
        },
        {
            "id": 1852,
            "username": "mathsppblog",
            "tweet_id": "1588590685762224129",
            "tweet_text": "TL;DR:\n\n \ud83d\udc49 Python \ud83d\udc0d functions take their parameters by position and/or name;\n \ud83d\udc49 keyword parameters come after positional ones;\n \ud83d\udc49 `*` forces parameters to its right to be keyword-only; and\n \ud83d\udc49 `/` forces parameters to its left to be positional-only.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588589939100241920",
            "tweet_type": "Python tips",
            "created_at": "2022-11-04T17:55:08.000Z"
        },
        {
            "id": 1853,
            "username": "mathsppblog",
            "tweet_id": "1588590683052310528",
            "tweet_text": "If you enjoy diagrams like this, go ahead and retweet \ud83d\udd01 the first tweet of this mini thread to help me out \ud83d\ude4f\n\nI teach Python \ud83d\udc0d on the internet and I will teach YOU, if you want. You just have to follow me @mathsppblog \ud83d\ude09\n\nhttps://t.co/NT6Et1EyCx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588589939100241920",
            "tweet_type": "Python tips",
            "created_at": "2022-11-04T17:55:08.000Z"
        },
        {
            "id": 1854,
            "username": "mathsppblog",
            "tweet_id": "1588589963079450625",
            "tweet_text": "Finally, `/` and `*` can be mixed together for maximum havoc!\n\nTo the left of `/`, positional-only.\n\nTo the right of `*`, keyword-only.\n\nBetween the 2? Whatever you prefer! https://t.co/qzsMTgkzoc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgvOFNhXgAEn8CZ.jpg\"]",
            "tweet_conversation_id": "1588589939100241920",
            "tweet_type": "Others",
            "created_at": "2022-11-04T17:52:16.000Z"
        },
        {
            "id": 1855,
            "username": "mathsppblog",
            "tweet_id": "1588589957349679105",
            "tweet_text": "If you decide to include a `/` in your parameter list, then the `/` says that all the parameters to the left of `/` must be passed in by position.\n\nThey become positional-only parameters.\n\nThe ones to the right of `/` can be positional or keyword, it is up to the user. https://t.co/NIUf7AXImZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgvN6YPXwAMolyR.jpg\"]",
            "tweet_conversation_id": "1588589939100241920",
            "tweet_type": "Others",
            "created_at": "2022-11-04T17:52:15.000Z"
        },
        {
            "id": 1856,
            "username": "mathsppblog",
            "tweet_id": "1588589951028932608",
            "tweet_text": "If you decide to include a `*` in your parameter list, then the `*` says that all the parameters to the right of `*` must be passed in by name.\n\nThey become keyword-only parameters.\n\nThe ones to the left of `*` can be positional or keyword, it is up to the user. https://t.co/wQewhpbX5F",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgvNv44XoAAU5wh.jpg\"]",
            "tweet_conversation_id": "1588589939100241920",
            "tweet_type": "Others",
            "created_at": "2022-11-04T17:52:13.000Z"
        },
        {
            "id": 1857,
            "username": "mathsppblog",
            "tweet_id": "1588589945534701568",
            "tweet_text": "A regular parameter list only lists the names of the parameters.\n\nYou choose which ones you pass in by position, and which ones you pass in by name.\n\nHowever, when a parameter is used by name, all others to the right must be by name as well.\n\nE.g., f(1, arg2=2, 3) does NOT work. https://t.co/6sg95xhM0q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgvNfE9XgAEgWQv.jpg\"]",
            "tweet_conversation_id": "1588589939100241920",
            "tweet_type": "Others",
            "created_at": "2022-11-04T17:52:12.000Z"
        },
        {
            "id": 1858,
            "username": "mathsppblog",
            "tweet_id": "1588589939100241920",
            "tweet_text": "Python \ud83d\udc0d functions take positional and keyword arguments.\n\nYou can tell Python to force arguments to be either positional-only or keyword-only.\n\nHere is how \ud83d\udc47 https://t.co/hg6NLQpDgN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgvNU6BXoAIRAvi.jpg\", \"https://pbs.twimg.com/media/FgvNVroX0AEMmPC.jpg\", \"https://pbs.twimg.com/media/FgvNWd1XgAcH6aE.jpg\", \"https://pbs.twimg.com/media/FgvNW9vXgAALWiB.jpg\"]",
            "tweet_conversation_id": "1588589939100241920",
            "tweet_type": "Python tips",
            "created_at": "2022-11-04T17:52:10.000Z"
        },
        {
            "id": 1859,
            "username": "mathsppblog",
            "tweet_id": "1587740371622285312",
            "tweet_text": "Here is a diagram showing various types of function signatures in Python \ud83d\udc0d https://t.co/VB7VQw3HUp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgjJaO8WAAA4kMI.jpg\"]",
            "tweet_conversation_id": "1587740371622285312",
            "tweet_type": "Python tips",
            "created_at": "2022-11-02T09:36:18.000Z"
        },
        {
            "id": 1860,
            "username": "mathsppblog",
            "tweet_id": "1587103556947136513",
            "tweet_text": "Here is a question you probably can't answer \ud83d\udc47\n\nThat is fine, though.\nTomorrow, I send out a newsletter issue about a method you can use to estimate the answer to this question, and many others.\n\nSign up here \ud83d\udc49 https://t.co/DOWZZCN6Xa https://t.co/4Id8X7EXef",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgaF7NOXoAETkrt.jpg\"]",
            "tweet_conversation_id": "1587103556947136513",
            "tweet_type": "Others",
            "created_at": "2022-10-31T15:25:49.000Z"
        },
        {
            "id": 1861,
            "username": "mathsppblog",
            "tweet_id": "1585922240797093888",
            "tweet_text": "These are the steps I suggest to a newcomer to programming/Python \ud83d\udc0d.\n\nWhat would you suggest if you were in my place?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585922223788810240",
            "tweet_type": "Python tips",
            "created_at": "2022-10-28T09:11:41.000Z"
        },
        {
            "id": 1862,
            "username": "mathsppblog",
            "tweet_id": "1585922238271946753",
            "tweet_text": "Another thing I always recommend, and that I do myself, is this:\n\nEvery once in a while (say, after every couple of chapters), ask yourself \u201cWhat have I learned so far?\u201d, and then use those things to create a new small program.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585922223788810240",
            "tweet_type": "Others",
            "created_at": "2022-10-28T09:11:41.000Z"
        },
        {
            "id": 1863,
            "username": "mathsppblog",
            "tweet_id": "1585922235528712192",
            "tweet_text": "By making these changes to the code you wrote, you get to exercise your understanding of the things you are learning...\n\nAnd like pretty much everything else, getting better at programming involves a lot of practice!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585922223788810240",
            "tweet_type": "Others",
            "created_at": "2022-10-28T09:11:40.000Z"
        },
        {
            "id": 1864,
            "username": "mathsppblog",
            "tweet_id": "1585922232810758144",
            "tweet_text": "You should try to modify the code you just wrote.\n\nDid you just write code to create a random number between 1 and 100? Change it to create a random number between 2 and 200.\n\nDid you ask for the user to input their first name?\nThen, also ask for the user's last name.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585922223788810240",
            "tweet_type": "Others",
            "created_at": "2022-10-28T09:11:39.000Z"
        },
        {
            "id": 1865,
            "username": "mathsppblog",
            "tweet_id": "1585922230029930496",
            "tweet_text": "Going through a coding book isn't like reading your average novel.\n\nYou should read the book and the explanations, write the code ON YOUR OWN, and then, you should do what I think is the most important thing...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585922223788810240",
            "tweet_type": "Others",
            "created_at": "2022-10-28T09:11:39.000Z"
        },
        {
            "id": 1866,
            "username": "mathsppblog",
            "tweet_id": "1585922227241091072",
            "tweet_text": "For someone with no coding experience, I think one of the best ways to start is by following a beginner book.\n\nI often recommend \u201cAutomate the Boring Stuff with Python\u201d, which is available for free at https://t.co/fsvLUsPEl9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585922223788810240",
            "tweet_type": "Others",
            "created_at": "2022-10-28T09:11:38.000Z"
        },
        {
            "id": 1867,
            "username": "mathsppblog",
            "tweet_id": "1585922223788810240",
            "tweet_text": "Someone just DM'd me, asking how to start learning Python \ud83d\udc0d\n\nHere's what I replied \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585922223788810240",
            "tweet_type": "Python tips",
            "created_at": "2022-10-28T09:11:37.000Z"
        },
        {
            "id": 1868,
            "username": "mathsppblog",
            "tweet_id": "1585600581510594561",
            "tweet_text": "What's something you did that made you a better Python \ud83d\udc0d programmer indirectly?\n\nI'll start: learning another programming language.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585600581510594561",
            "tweet_type": "Python tips",
            "created_at": "2022-10-27T11:53:32.000Z"
        },
        {
            "id": 1869,
            "username": "mathsppblog",
            "tweet_id": "1583716269756362753",
            "tweet_text": "Sorry folks, I've been busy. https://t.co/jCktUVPXhj",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ffp9jX6X0AAFVQ9.jpg\"]",
            "tweet_conversation_id": "1583716269756362753",
            "tweet_type": "Others",
            "created_at": "2022-10-22T07:05:57.000Z"
        },
        {
            "id": 1870,
            "username": "mathsppblog",
            "tweet_id": "1580965832288763905",
            "tweet_text": "Had *so much fun* presenting at my very first Dyalog user meeting.\n\nIt was a wonderful conference!\n\nI'll be back soon with Python \ud83d\udc0d  content for you. In the meantime, give APL a chance. I did and I don't regret it \ud83d\ude09 https://t.co/Yc2aGPQktw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580965832288763905",
            "tweet_type": "Python tips",
            "created_at": "2022-10-14T16:56:41.000Z"
        },
        {
            "id": 1871,
            "username": "mathsppblog",
            "tweet_id": "1577318549760217091",
            "tweet_text": "\ud83d\udce8 new issue sent to +15,000:\n\nPartial function application is a technique that lets you derive useful functions from other existing functions.\n\n15k Insiders just learned about it with 3 concrete examples &amp; exercises.\n\nMissed the issue? Grab it here \ud83d\udc47\n\nhttps://t.co/KtzNdBOSVt https://t.co/uHaUwugliW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FePBuSMWIAIWbxU.jpg\"]",
            "tweet_conversation_id": "1577318549760217091",
            "tweet_type": "Others",
            "created_at": "2022-10-04T15:23:42.000Z"
        },
        {
            "id": 1872,
            "username": "mathsppblog",
            "tweet_id": "1575832598797901824",
            "tweet_text": "I hope you enjoy the book, @JonAzpiroz \ud83e\udd17\n\nhttps://t.co/TaFBbA5xvK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566003697955778560",
            "tweet_type": "Others",
            "created_at": "2022-09-30T12:59:03.000Z"
        },
        {
            "id": 1873,
            "username": "mathsppblog",
            "tweet_id": "1575760129890435072",
            "tweet_text": "TL;DR:\n\nA function definition has:\n\n - its defining keyword\n - the function name\n - a (possibly empty) parameter list\n - a colon to start the body\n - a docstring with a function description\n - the function body to do stuff\n - a return statement to give results back",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Others",
            "created_at": "2022-09-30T08:11:05.000Z"
        },
        {
            "id": 1874,
            "username": "mathsppblog",
            "tweet_id": "1575760128581713922",
            "tweet_text": "This was the gist of how you define a function in Python \ud83d\udc0d\n\nDid I forget anything? Let me know \ud83d\udc47\n\nIf you liked this short thread, follow me @mathsppblog.\n\nI'm helping you take your Python \ud83d\udc0d skills to the next level \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Python tips",
            "created_at": "2022-09-30T08:11:05.000Z"
        },
        {
            "id": 1875,
            "username": "mathsppblog",
            "tweet_id": "1575760127235334144",
            "tweet_text": "Functions typically have return statments.\n\nReturn statements signal the end of the function &amp; the data that comes off of the function.\n\nIf your function computes some result, you probably will use a return statement to give it back to the function user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Others",
            "created_at": "2022-09-30T08:11:05.000Z"
        },
        {
            "id": 1876,
            "username": "mathsppblog",
            "tweet_id": "1575760125880672257",
            "tweet_text": "The function body is indented once with respect to the header and contains the code that runs when the function is called.\n\nBefore the body, it is customary to see a docstring, a comment that describes the function.\n\nYour IDE will show you the docstring when you use the function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Others",
            "created_at": "2022-09-30T08:11:04.000Z"
        },
        {
            "id": 1877,
            "username": "mathsppblog",
            "tweet_id": "1575760124563562497",
            "tweet_text": "The list of parameters starts and ends respectively with ( &amp; ).\n\nBetween the parens, you write a comma-separated list of parameters.\n\nThe parameters are the data your function receives.\n\nThe parameter list can be empty, in which case you just have `():` next to the function name.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Others",
            "created_at": "2022-09-30T08:11:04.000Z"
        },
        {
            "id": 1878,
            "username": "mathsppblog",
            "tweet_id": "1575760123233968129",
            "tweet_text": "The header starts with the keyword `def`, which is how Python \ud83d\udc0d knows we are about to define a function.\n\nThen, we have the function name, which should be descriptive.\n\nAfter that, we have the list of parameters.\n\nAfter the list of parameters, a colon.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Python tips",
            "created_at": "2022-09-30T08:11:04.000Z"
        },
        {
            "id": 1879,
            "username": "mathsppblog",
            "tweet_id": "1575760121833168896",
            "tweet_text": "To define a function in Python you need two main parts:\n\n - the header\n - the body\n\nThe header gives defines how the function is called and the arguments it needs.\n\nThe body is the code that does stuff.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Others",
            "created_at": "2022-09-30T08:11:03.000Z"
        },
        {
            "id": 1880,
            "username": "mathsppblog",
            "tweet_id": "1575760120100884487",
            "tweet_text": "This is a complete diagram of how you define a function in Python \ud83d\udc0d https://t.co/Mb0631efCK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd45enbXwAYwrhx.jpg\"]",
            "tweet_conversation_id": "1575760120100884487",
            "tweet_type": "Python tips",
            "created_at": "2022-09-30T08:11:03.000Z"
        },
        {
            "id": 1881,
            "username": "mathsppblog",
            "tweet_id": "1575185875910041600",
            "tweet_text": "I couldn't make it...\n\nI was supposed to be at the FIRST PyCon in my home country where I was going to give a talk @PyConPT.\n\nSadly, I had a family emergency.\n(Everything is fine, now! \ud83d\ude2e\u200d\ud83d\udca8)\n\nI decided to record my talk.\nI hope you enjoy it \ud83d\udc47\n\nhttps://t.co/vb3qq6XsZq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575185875910041600",
            "tweet_type": "Others",
            "created_at": "2022-09-28T18:09:13.000Z"
        },
        {
            "id": 1882,
            "username": "mathsppblog",
            "tweet_id": "1574387419440238594",
            "tweet_text": "In a fantasy job market, what startup would you join?\n\nFor me, it would be @textualizeio \n\nBut it's no fantasy! I'll be joining @willmcgugan and the others to help them build Textual. The TUI framework for #Python that will eat some of the browser's lunch!\n\nCan't wait to start \ud83d\udd25 https://t.co/8UfMOCIffl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574387419440238594",
            "tweet_type": "Others",
            "created_at": "2022-09-26T13:16:26.000Z"
        },
        {
            "id": 1883,
            "username": "mathsppblog",
            "tweet_id": "1573378414169538562",
            "tweet_text": "Use the built-in `help` in Python \ud83d\udc0d!\n\nIt works with functions, classes, methods, etc!\n\nYou will learn a ton by using it. https://t.co/1Wi5xepn5P",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdXDUu9WQAIvE1m.jpg\"]",
            "tweet_conversation_id": "1573378414169538562",
            "tweet_type": "Python tips",
            "created_at": "2022-09-23T18:27:00.000Z"
        },
        {
            "id": 1884,
            "username": "mathsppblog",
            "tweet_id": "1573264356346839043",
            "tweet_text": "When do you take a piece of code you've written and decide it should be a function?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573264356346839043",
            "tweet_type": "Others",
            "created_at": "2022-09-23T10:53:47.000Z"
        },
        {
            "id": 1885,
            "username": "mathsppblog",
            "tweet_id": "1573072178718842881",
            "tweet_text": "Code in MS PowerPoint with syntax highlighting \u2728\u2728\n\n 1. Copy your code from VS Code\n 2. Paste your code into your PP slide\n\nThe video below shows me doing it for some Python \ud83d\udc0d code.\n\n(May work with other editors! Let me know if it does!) https://t.co/aqq97DuWlz",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1573071790502559744/pu/vid/1280x720/KX43qzZ6emJtQBv-.mp4?tag=12\"]",
            "tweet_conversation_id": "1573072178718842881",
            "tweet_type": "Python tips",
            "created_at": "2022-09-22T22:10:08.000Z"
        },
        {
            "id": 1886,
            "username": "mathsppblog",
            "tweet_id": "1572865795574595584",
            "tweet_text": "\ud83c\udf89\ud83c\udf89\ud83c\udf89\n\nMy article on Python packaging is the first Google result for \u201cPython packaging 2022\u201d! \ud83c\udfc5\n\nI'm so happy :P https://t.co/MQFoCxU3VJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdPwnUsXkAAtBe1.png\"]",
            "tweet_conversation_id": "1572865795574595584",
            "tweet_type": "Others",
            "created_at": "2022-09-22T08:30:02.000Z"
        },
        {
            "id": 1887,
            "username": "mathsppblog",
            "tweet_id": "1572575441038508035",
            "tweet_text": "TL;DR:\n\n \ud83d\udc49 functions are tools;\n \ud83d\udc49 functions have purposes;\n \ud83d\udc49 we use the function because we want its functionality;\n \ud83d\udc49 using a function is \u201ccalling a function\u201d;\n \ud83d\udc49 functions may accept data they need; and\n \ud83d\udc49 functions may \u201creturn\u201d useful results back.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:16.000Z"
        },
        {
            "id": 1888,
            "username": "mathsppblog",
            "tweet_id": "1572575439394320385",
            "tweet_text": "Feel free to comment with your own explanations.\n\nWould you have said something differently?\n\nWhat / why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:16.000Z"
        },
        {
            "id": 1889,
            "username": "mathsppblog",
            "tweet_id": "1572575437615669248",
            "tweet_text": "In a short thread, this is what a function is.\n\nI hope this cleared some doubts for you and let me know if it didn't.\n\nFollow me @mathsppblog if you want to improve your Python \ud83d\udc0d knowledge.\n\nAnd btw, retweet the thread so others can learn from this!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Python tips",
            "created_at": "2022-09-21T13:16:16.000Z"
        },
        {
            "id": 1890,
            "username": "mathsppblog",
            "tweet_id": "1572575436294557697",
            "tweet_text": "We say that these functions \u201creturn\u201d things.\n\nFor example, the function `sorted` returns a sorted list.\n\nThe function `print`, on the other hand, does not return the string.\n\nNo.\n\nIt affects the environment we are in by printing the string to the screeen.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:15.000Z"
        },
        {
            "id": 1891,
            "username": "mathsppblog",
            "tweet_id": "1572575434570596352",
            "tweet_text": "Some functions \u201cdo things\u201d for you.\n\nFor example, the function `print` puts information on the screen.\n\nOther functions also \u201cdo things\u201d, but to the data you give them.\n\nFor example, the function `sorted` takes a list and gives back the list in sorted order. https://t.co/JZj3Oj7MDb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdLpAq3X0AABtwk.jpg\"]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:15.000Z"
        },
        {
            "id": 1892,
            "username": "mathsppblog",
            "tweet_id": "1572575433169801217",
            "tweet_text": "As you can see above, functions sometimes accept data.\n\nThis data might be needed by the function to fulfil its purpose.\n\nJust like a screwdriver is useless if you do not give it a screw to turn.\n\nAbove, I passed a string to `print` so it could print it on the screen.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:14.000Z"
        },
        {
            "id": 1893,
            "username": "mathsppblog",
            "tweet_id": "1572575431328518145",
            "tweet_text": "Different programming languages might call functions in different ways.\n\nA common way, which is how Python \ud83d\udc0d and JavaScript do it, for example, is to write the name of the function and then parenthesis. https://t.co/zSz6Z4Artu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdLpAAdXoAEMLTZ.png\"]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Python tips",
            "created_at": "2022-09-21T13:16:14.000Z"
        },
        {
            "id": 1894,
            "username": "mathsppblog",
            "tweet_id": "1572575425733214211",
            "tweet_text": "In programming, when you use a function we say you \u201ccall it\u201d.\n\n\u201cCalling a function\u201d just means that: using the functionality of that function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:13.000Z"
        },
        {
            "id": 1895,
            "username": "mathsppblog",
            "tweet_id": "1572575424353288193",
            "tweet_text": "A function in programming is just like that.\n\nIt is a tool with a well-defined purpose.\n\nWhenever you need to do that _thing_, you reach for that tool \u2013 that function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:12.000Z"
        },
        {
            "id": 1896,
            "username": "mathsppblog",
            "tweet_id": "1572575422835224576",
            "tweet_text": "A function in programming is just like any tool, like a screwdriver.\n\nA screwdriver has a specific purpose: to turn screws.\n\nSo, whenever you need to tighten or loosen a screw, you reach for a screwdriver.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:12.000Z"
        },
        {
            "id": 1897,
            "username": "mathsppblog",
            "tweet_id": "1572575421362835458",
            "tweet_text": "What is a function in programming?\n\nWhat's the point? What are they for?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572575421362835458",
            "tweet_type": "Others",
            "created_at": "2022-09-21T13:16:12.000Z"
        },
        {
            "id": 1898,
            "username": "mathsppblog",
            "tweet_id": "1572543221376647171",
            "tweet_text": "Erick liked the email \ud83d\ude09 https://t.co/K2MizBwYG6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdLLuSyX0AEfNJN.jpg\"]",
            "tweet_conversation_id": "1572305106103685121",
            "tweet_type": "Others",
            "created_at": "2022-09-21T11:08:15.000Z"
        },
        {
            "id": 1899,
            "username": "mathsppblog",
            "tweet_id": "1572490828999712768",
            "tweet_text": "If your life depended on it, could you convince me there's a language better than Python \ud83d\udc0d?\n\nJust kidding, I understand programming languages are just tools and you have to pick the best tool for the job.\n\nJust kidding!\n\nI know Python \ud83d\udc0d is the best language, period \ud83d\ude01\ud83d\ude02",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572490828999712768",
            "tweet_type": "Python tips",
            "created_at": "2022-09-21T07:40:03.000Z"
        },
        {
            "id": 1900,
            "username": "mathsppblog",
            "tweet_id": "1572305108242677760",
            "tweet_text": "I ended today's issue in suspense, though.\n\nI'll only send the \"best\" solution to the challenge next week.\n\nYou can still join 15,000 others who improve their Python \ud83d\udc0d knowledge every week \ud83d\udc47\n\nhttps://t.co/DOWZZCN6Xa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572305106103685121",
            "tweet_type": "Python tips",
            "created_at": "2022-09-20T19:22:04.000Z"
        },
        {
            "id": 1901,
            "username": "mathsppblog",
            "tweet_id": "1572305106103685121",
            "tweet_text": "I just sent it \ud83d\udce8\n\nThe latest issue of the Mathspp Insider is out.\n\nIn it, we solve a simple problem like a Python \ud83d\udc0d beginner would.\n\nThen, we go over successive improvements to the solution.\n\nWe cover:\n\n - iterables\n - zip\n - ordering tuples\n - grouped assignments\n - ... https://t.co/4H5oLTGcrz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdHzKQ3XwAI-41g.jpg\"]",
            "tweet_conversation_id": "1572305106103685121",
            "tweet_type": "Python tips",
            "created_at": "2022-09-20T19:22:03.000Z"
        },
        {
            "id": 1902,
            "username": "mathsppblog",
            "tweet_id": "1572246733664718848",
            "tweet_text": "Python \ud83d\udc0d beginners make this \u201cmistake\u201d:\n\nThey use `range(len(some_list))` in their `for` loops...\n\nBut _almost always_ that is not what they want.\n\nIn Python \ud83d\udc0d, you can iterate directly over lists \ud83d\udc47 https://t.co/BDbjGymW91",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdG-EjZWYAAxLx6.jpg\"]",
            "tweet_conversation_id": "1572246733664718848",
            "tweet_type": "Python tips",
            "created_at": "2022-09-20T15:30:06.000Z"
        },
        {
            "id": 1903,
            "username": "mathsppblog",
            "tweet_id": "1572162697562554369",
            "tweet_text": "Silly me, the result was so long that the image doesn't show it.\n\nHere's a shorter example:\n\nIf you're in the Python \ud83d\udc0d REPL, `_` refers to the result of the last expression. https://t.co/8tDdAMcP2F",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdFxhHZXgAEEeR7.jpg\"]",
            "tweet_conversation_id": "1572120908004823040",
            "tweet_type": "Python tips",
            "created_at": "2022-09-20T09:56:11.000Z"
        },
        {
            "id": 1904,
            "username": "mathsppblog",
            "tweet_id": "1572120908004823040",
            "tweet_text": "If you're in the Python \ud83d\udc0d REPL, `_` refers to the result of the last expression. https://t.co/znoHcW28vG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdFLognX0AEvI6N.jpg\"]",
            "tweet_conversation_id": "1572120908004823040",
            "tweet_type": "Python tips",
            "created_at": "2022-09-20T07:10:07.000Z"
        },
        {
            "id": 1905,
            "username": "mathsppblog",
            "tweet_id": "1571942729516716032",
            "tweet_text": "What's happening to my Python \ud83d\udc0d dictionary?\n\nWhere did my keys and values go?!\n\n@somacdivad @willmcgugan no spoilers, please \ud83d\ude36 https://t.co/onLefUgNAn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdCplIaXwAI-RL_.png\"]",
            "tweet_conversation_id": "1571942729516716032",
            "tweet_type": "Python tips",
            "created_at": "2022-09-19T19:22:06.000Z"
        },
        {
            "id": 1906,
            "username": "mathsppblog",
            "tweet_id": "1571758533028511744",
            "tweet_text": "Use functools.cache to add a simple cache to your Python \ud83d\udc0d functions.\n\nHere, I'm using it to prevent recursion from branching like crazy.\n\nCompare the images \u2b05\ufe0f\u27a1\ufe0f https://t.co/srl8Mahjet",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdACCuUXoAAONgp.jpg\", \"https://pbs.twimg.com/media/FdACDeOWAAA_7hI.jpg\"]",
            "tweet_conversation_id": "1571758533028511744",
            "tweet_type": "Python tips",
            "created_at": "2022-09-19T07:10:10.000Z"
        },
        {
            "id": 1907,
            "username": "mathsppblog",
            "tweet_id": "1571580390912950272",
            "tweet_text": "Remember:\n\nDecorators are usually a function with a nested function inside.\n\nIf your decorator receives arguments, then it is going to be a function with a function inside, with a function inside.\n\n\ud83e\udd2f\ud83e\udd2f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571580380938911745",
            "tweet_type": "Others",
            "created_at": "2022-09-18T19:22:18.000Z"
        },
        {
            "id": 1908,
            "username": "mathsppblog",
            "tweet_id": "1571580389432631296",
            "tweet_text": "Decorators are fun \ud83d\ude09\n\nIt just takes some practise.\n\nI'll write an explanation of this that is more comprehensive in this week's newsletter issue.\n\nIf you aren't a Mathspp Insider yet, join 15k others now:\n\nhttps://t.co/DOWZZCNEMI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571580380938911745",
            "tweet_type": "Others",
            "created_at": "2022-09-18T19:22:18.000Z"
        },
        {
            "id": 1909,
            "username": "mathsppblog",
            "tweet_id": "1571580387419193349",
            "tweet_text": "In order to implement the decorator `print_args`, you need:\n\n - an outer function `print_args` that accepts the string prefix;\n - an inner function `decorator` that will be the decorator returned; and\n - an inner inner function `wrapped` that is your decorated function. https://t.co/Aak6HoENWw",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc9gBqvXgAQF6fs.jpg\"]",
            "tweet_conversation_id": "1571580380938911745",
            "tweet_type": "Others",
            "created_at": "2022-09-18T19:22:17.000Z"
        },
        {
            "id": 1910,
            "username": "mathsppblog",
            "tweet_id": "1571580385548435459",
            "tweet_text": "So, we see that what comes after the @ is the callable that receives the function.\n\nHence, if your decorator accepts arguments, it must return a callable to serve as the actual decorator.\n\nThat's because, without syntactic sugar, this is what `print_args` does: https://t.co/pdKiDfMHwV",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc9gA84XkAgAF5F.jpg\"]",
            "tweet_conversation_id": "1571580380938911745",
            "tweet_type": "Others",
            "created_at": "2022-09-18T19:22:17.000Z"
        },
        {
            "id": 1911,
            "username": "mathsppblog",
            "tweet_id": "1571580382969208832",
            "tweet_text": "Decorators in Python can be applied with the at operator @.\n\nHowever, that is just syntactic sugar!\n\nUsing the @ before or calling the decorator after is the same thing: https://t.co/BkN3B9iTYd",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc9gARaXgAElswT.png\"]",
            "tweet_conversation_id": "1571580380938911745",
            "tweet_type": "Others",
            "created_at": "2022-09-18T19:22:16.000Z"
        },
        {
            "id": 1912,
            "username": "mathsppblog",
            "tweet_id": "1571580380938911745",
            "tweet_text": "Python \ud83d\udc0d decorators are usually 2 nested functions.\n\nIf you need a decorator with arguments, then it's 3.\n\nBut how do those work? https://t.co/oipHTcuQeK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc9f_jNWQAIBoC3.jpg\"]",
            "tweet_conversation_id": "1571580380938911745",
            "tweet_type": "Python tips",
            "created_at": "2022-09-18T19:22:16.000Z"
        },
        {
            "id": 1913,
            "username": "mathsppblog",
            "tweet_id": "1571501900238839812",
            "tweet_text": "It's Sunday but I'm getting some work done.\n\nSadly, it is not Python \ud83d\udc0d related...\n\nBut I'm listening to my \u201cDeep Focus\u201d playlist, which really puts me in the zone.\n\nIt's mostly tracks by @HansZimmer, if I'm being honest \ud83e\udd23\n\nhttps://t.co/rnkSZmfRRg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571501900238839812",
            "tweet_type": "Python tips",
            "created_at": "2022-09-18T14:10:24.000Z"
        },
        {
            "id": 1914,
            "username": "mathsppblog",
            "tweet_id": "1571191663552335872",
            "tweet_text": "What was the first Python \ud83d\udc0d version you used?\n\nMe?\n2.7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571191663552335872",
            "tweet_type": "Python tips",
            "created_at": "2022-09-17T17:37:38.000Z"
        },
        {
            "id": 1915,
            "username": "mathsppblog",
            "tweet_id": "1570855580943761408",
            "tweet_text": "@EduardodMexico The reason that instance of `C` doesn't go away is because it is referenced by `_`.\n\nIn a REPL, you can use `_` to refer to the last result \ud83d\udc47\n\nYou would know this if you read my free book Pydon'ts...\n\nAfter all, I have a chapter that teaches tricks like these in the REPL! \ud83d\ude09 https://t.co/iyyOwkYbuf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FczM0pcWQAIi8i0.jpg\"]",
            "tweet_conversation_id": "1570855578896945153",
            "tweet_type": "Others",
            "created_at": "2022-09-16T19:22:10.000Z"
        },
        {
            "id": 1916,
            "username": "mathsppblog",
            "tweet_id": "1570855578896945153",
            "tweet_text": "Garbage collection and the REPL interact in a funky way in Python \ud83d\udc0d\n\nBelow is a class `C` whose instances say goodbye when they are deleted.\n\nAn instance cannot be garbage collected if it was the last result in the REPL!\n\nHats off to @EduardodMexico for teaching me this. https://t.co/ubVCXFdn7A",
            "tweet_media": "[\"https://pbs.twimg.com/media/FczMz4yWYAIZCGF.jpg\"]",
            "tweet_conversation_id": "1570855578896945153",
            "tweet_type": "Python tips",
            "created_at": "2022-09-16T19:22:09.000Z"
        },
        {
            "id": 1917,
            "username": "mathsppblog",
            "tweet_id": "1570790893510082561",
            "tweet_text": "The first \ud83d\udc0d context manager I learned was to open files.\n\nIt _always_ looked like this:\n\nwith open(filepath, mode) as f:\n    ...\n\nThat is why I thought that \u201cf\u201d was a special name...\n\nBut that \u201cf\u201d has nothing special! It can be ANY variable name: https://t.co/ns6P9SL6bw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcyR_dDWIAEQpY9.jpg\"]",
            "tweet_conversation_id": "1570790893510082561",
            "tweet_type": "Others",
            "created_at": "2022-09-16T15:05:07.000Z"
        },
        {
            "id": 1918,
            "username": "mathsppblog",
            "tweet_id": "1570493192709210113",
            "tweet_text": "Want your function to ONLY accept positional arguments?\n\nIn Python \ud83d\udc0d, you can do that by ending your parameter list with `/`.\n\nHere is a demo of this functionality \ud83d\udc47\n\nTrying to use a keyword parameter raises an error! https://t.co/EeE670INDD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcuDO9iXoAEW1ff.jpg\"]",
            "tweet_conversation_id": "1570493192709210113",
            "tweet_type": "Python tips",
            "created_at": "2022-09-15T19:22:10.000Z"
        },
        {
            "id": 1919,
            "username": "mathsppblog",
            "tweet_id": "1570427669711306752",
            "tweet_text": "Learn Python \ud83d\udc0d with examples.\n\nMy YouTube channel features short \u26a1 videos where I explain bits and pieces about Python.\n\nYou know what they say...\n\nOne video a day improves your Python right away.\n\nhttps://t.co/bz3Qe2p37l",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570427669711306752",
            "tweet_type": "Python tips",
            "created_at": "2022-09-15T15:01:48.000Z"
        },
        {
            "id": 1920,
            "username": "mathsppblog",
            "tweet_id": "1570344208916963328",
            "tweet_text": "Files in Python \ud83d\udc0d can be opened in different modes:\n\n - normal text mode\n - or binary mode (\"b\")\n\nThey can also be opened to:\n\n - read only (\"r\")\n - write only (\"w\")\n - append only (\"a\")\n\nAdd a \"+\" to read &amp; write or read &amp; append.\n\nExamples \ud83d\udc47 https://t.co/772jtb9SfM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fcr7vA-X0AEoydJ.jpg\"]",
            "tweet_conversation_id": "1570344208916963328",
            "tweet_type": "Python tips",
            "created_at": "2022-09-15T09:30:09.000Z"
        },
        {
            "id": 1921,
            "username": "mathsppblog",
            "tweet_id": "1570130805460013059",
            "tweet_text": "You can force your functions to accept some parameters as positional only in Python \ud83d\udc0d\n\nTo do that, use a `/` after the parameters that must be positional only. https://t.co/zwkWBg1ngw",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fco5pREXgAIe2XM.jpg\"]",
            "tweet_conversation_id": "1570130805460013059",
            "tweet_type": "Python tips",
            "created_at": "2022-09-14T19:22:10.000Z"
        },
        {
            "id": 1922,
            "username": "mathsppblog",
            "tweet_id": "1570038693125136384",
            "tweet_text": "Do not use useless lambdas in Python \ud83d\udc0d\n\nLambdas are VERY useful in Python.\n\nHowever, if a lambda looks like `lambda x: f(x)`, then you don't need it.\n\nJust use `f` instead.\n\nHere is an example: https://t.co/rpJxsuAtfx",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fcnl3qAWAAkbktA.jpg\"]",
            "tweet_conversation_id": "1570038693125136384",
            "tweet_type": "Python tips",
            "created_at": "2022-09-14T13:16:09.000Z"
        },
        {
            "id": 1923,
            "username": "mathsppblog",
            "tweet_id": "1569971413641043969",
            "tweet_text": "Good feedback feels great!\n\nJim @ames_deann\n replied to yesterday's Mathspp Insider email with this:\n\n\u201cI love your [Mathspp Insider] emails: practical and concisely written \u201cbytes\u201d of knowledge that I can immediately apply to my coding\u201d\n\n\ud83d\udd17 https://t.co/DOWZZCN6Xa https://t.co/Gx9BlfO8pi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcmoqdeXEAARtoU.png\"]",
            "tweet_conversation_id": "1569971413641043969",
            "tweet_type": "Others",
            "created_at": "2022-09-14T08:48:48.000Z"
        },
        {
            "id": 1924,
            "username": "mathsppblog",
            "tweet_id": "1569946588394528768",
            "tweet_text": "Use `collections.ChainMap` to combine dictionaries in Python \ud83d\udc0d without merging.\n\nThis combined result gets updated automatically.\n\nUseful, for e.g., to combine configuration levels. https://t.co/QUMLjgPUBg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcmSGcFWQAAVAvR.jpg\"]",
            "tweet_conversation_id": "1569946588394528768",
            "tweet_type": "Python tips",
            "created_at": "2022-09-14T07:10:09.000Z"
        },
        {
            "id": 1925,
            "username": "mathsppblog",
            "tweet_id": "1569795532394045441",
            "tweet_text": "Some of you mentioned, in the comments, the method `dict.update`.\n\nThat is the same as `|=`, except that the method `.update` works in all Python 3, not just in Python 3.9+!\n\nThanks for adding this info, folks! https://t.co/vqNu8hd63U",
            "tweet_media": "[\"https://pbs.twimg.com/media/FckIkoqWQAAEsUh.jpg\"]",
            "tweet_conversation_id": "1569603325225537536",
            "tweet_type": "Others",
            "created_at": "2022-09-13T21:09:54.000Z"
        },
        {
            "id": 1926,
            "username": "mathsppblog",
            "tweet_id": "1569768413215576066",
            "tweet_text": "You can force your users to use some arguments as keyword-only in Python \ud83d\udc0d\n\nFor that, include `*` in the list of parameters. https://t.co/XjFngDOyWu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcjwDRNX0AcmeR_.jpg\"]",
            "tweet_conversation_id": "1569768413215576066",
            "tweet_type": "Python tips",
            "created_at": "2022-09-13T19:22:09.000Z"
        },
        {
            "id": 1927,
            "username": "mathsppblog",
            "tweet_id": "1569676283629522946",
            "tweet_text": "You can get a sample of the content here \ud83d\udc47\n\nIn this past issue I walk you through the first decorator I ever wrote in Python \ud83d\udc0d\n\nhttps://t.co/GKYglHyoPU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569676282178174979",
            "tweet_type": "Python tips",
            "created_at": "2022-09-13T13:16:03.000Z"
        },
        {
            "id": 1928,
            "username": "mathsppblog",
            "tweet_id": "1569676282178174979",
            "tweet_text": "The most recent Mathspp Insider \ud83d\udc0d\ud83d\udcdd issue is out \ud83d\udce8\n\nIn this issue, I wrote about `functools.wraps` and why you'd want to use it.\n\nJoin 15k other Insiders who are learning to write beautiful Python code:\n\nhttps://t.co/DOWZZCN6Xa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569676282178174979",
            "tweet_type": "Others",
            "created_at": "2022-09-13T13:16:03.000Z"
        },
        {
            "id": 1929,
            "username": "mathsppblog",
            "tweet_id": "1569603325225537536",
            "tweet_text": "Merging two dictionaries in Python \ud83d\udc0d\n\nIn 3 ways:\n\n \ud83d\udfe2 using the splat operator `**`\n \ud83d\udfe1 using the pipe operator `|` (Python 3.9+)\n \ud83d\udd34 updating a dict in-place with `|` (also Python 3.9+) https://t.co/VPw6TZvq4R",
            "tweet_media": "[\"https://pbs.twimg.com/media/FchZ561XEAAt3J8.jpg\"]",
            "tweet_conversation_id": "1569603325225537536",
            "tweet_type": "Python tips",
            "created_at": "2022-09-13T08:26:09.000Z"
        },
        {
            "id": 1930,
            "username": "mathsppblog",
            "tweet_id": "1568995559322656769",
            "tweet_text": "What is the result of the final `next(it)`?\n\nPython \ud83d\udc0d iterators power `for` loops, one of the best tools in Python \ud83d\udc0d https://t.co/WmpZcwgqN9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcYxJQ3WIAMrlRb.png\"]",
            "tweet_conversation_id": "1568995559322656769",
            "tweet_type": "Python tips",
            "created_at": "2022-09-11T16:11:06.000Z"
        },
        {
            "id": 1931,
            "username": "mathsppblog",
            "tweet_id": "1568935765652000769",
            "tweet_text": "`enumerate` is one of the nicest built-ins in Python \ud83d\udc0d and beginners often do not use it.\n\nIt's so important, there's a whole chapter about it in my book.\n\nThis thread can serve as a short introduction \ud83d\udc47 https://t.co/guRHJlfd9A",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568935765652000769",
            "tweet_type": "Python tips",
            "created_at": "2022-09-11T12:13:30.000Z"
        },
        {
            "id": 1932,
            "username": "mathsppblog",
            "tweet_id": "1568589142271074306",
            "tweet_text": "Generators in Python \ud83d\udc0d are lazy \ud83d\ude34\n\nThey only produce their values when they are needed.\n\nIf you need all the values from a generator, use the built-in `list`.\n\nPRO TIP: if you use `list` around a generator expression, you actually meant to use a list comprehension. https://t.co/WUEVRrBnrK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcS_gtIXgAEB1vh.png\"]",
            "tweet_conversation_id": "1568589142271074306",
            "tweet_type": "Python tips",
            "created_at": "2022-09-10T13:16:09.000Z"
        },
        {
            "id": 1933,
            "username": "mathsppblog",
            "tweet_id": "1568522209240424451",
            "tweet_text": "I do not know how to copy &amp; paste \ud83d\ude43\n\nThe piece of code above uses `gen` out of the blue.\n\nObviously, I meant to assign the generator to it.\n\nHere is the code, fixed: https://t.co/scOEK4kUzw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcSCfpBWIAAC6sf.jpg\"]",
            "tweet_conversation_id": "1568518675568771072",
            "tweet_type": "Others",
            "created_at": "2022-09-10T08:50:11.000Z"
        },
        {
            "id": 1934,
            "username": "mathsppblog",
            "tweet_id": "1568518675568771072",
            "tweet_text": "Generator expressions in Python \ud83d\udc0d are just like list comprehensions.\n\nBut instead of using [], you use ().\n\nThen, the generator will produce your values _when_ you ask it to: https://t.co/j2aa14dXiM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcR_a_QXoAEc-lF.jpg\"]",
            "tweet_conversation_id": "1568518675568771072",
            "tweet_type": "Python tips",
            "created_at": "2022-09-10T08:36:08.000Z"
        },
        {
            "id": 1935,
            "username": "mathsppblog",
            "tweet_id": "1568318847580622851",
            "tweet_text": "Save the code below as a Python \ud83d\udc0d script.\n\nNotice that the code prints itself.\n\nEXACTLY the same.\n\nHow cool is that? https://t.co/6upC8icCYO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcPJrfcXEAItzP6.jpg\"]",
            "tweet_conversation_id": "1568318847580622851",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T19:22:05.000Z"
        },
        {
            "id": 1936,
            "username": "mathsppblog",
            "tweet_id": "1568264038739484674",
            "tweet_text": "If you want to learn more about decorators, I will be giving a remote workshop on this topic.\n\nThe workshop will be Saturday, 3rd December, 4pm UTC.\n\nOnly 30 spots available.\n\nhttps://t.co/slmfp4rpYd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568264031752048643",
            "tweet_type": "Others",
            "created_at": "2022-09-09T15:44:18.000Z"
        },
        {
            "id": 1937,
            "username": "mathsppblog",
            "tweet_id": "1568264036780744704",
            "tweet_text": "The job of `functools.wraps` is to preserve this meta information.\n\nIt preserves things like the function name and the docstring.\n\nHow do you do that, though?\n\nJust decorate your wrapper function! https://t.co/N3JopwhNYo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcOX0x3XEAADBC7.jpg\"]",
            "tweet_conversation_id": "1568264031752048643",
            "tweet_type": "Others",
            "created_at": "2022-09-09T15:44:17.000Z"
        },
        {
            "id": 1938,
            "username": "mathsppblog",
            "tweet_id": "1568264034511888391",
            "tweet_text": "Look at the example below.\n\nI defined a simple decorator and then applied it to a function of mine.\n\nMy function loses important meta information: https://t.co/FSdRnvkGCm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcOXz7zXEAA7Y6Q.jpg\"]",
            "tweet_conversation_id": "1568264031752048643",
            "tweet_type": "Others",
            "created_at": "2022-09-09T15:44:17.000Z"
        },
        {
            "id": 1939,
            "username": "mathsppblog",
            "tweet_id": "1568264031752048643",
            "tweet_text": "There is one thing you should probably do EVERY TIME you define a Python \ud83d\udc0d decorator.\n\nAnd that is: use the `functools.wraps` decorator!\n\nWhy? https://t.co/rarJ3Xeels",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcOXzGGX0AQ2VoB.png\"]",
            "tweet_conversation_id": "1568264031752048643",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T15:44:16.000Z"
        },
        {
            "id": 1940,
            "username": "mathsppblog",
            "tweet_id": "1568155288502501376",
            "tweet_text": "I created a Python \ud83d\udc0d bot that uses @StableDiffusion to tweet beautiful images periodically!\n\nHere are some examples:\n\n \ud83d\ude97 Luxurious sports car\n \ud83c\udf0d Galaxy digital art\n \ud83e\uded6 Witch making a potion\n \u2699\ufe0f Steampunk digital art\n\nFollow @stablediffbot for more and suggest your own prompts! https://t.co/syBlmBewoi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcM06QBWAAA6-KJ.png\", \"https://pbs.twimg.com/media/FcM06QHXkAQfxZG.png\", \"https://pbs.twimg.com/media/FcM06QDWYAIlYIC.png\", \"https://pbs.twimg.com/media/FcM06QBWQAA00su.png\"]",
            "tweet_conversation_id": "1568155288502501376",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T08:32:10.000Z"
        },
        {
            "id": 1941,
            "username": "mathsppblog",
            "tweet_id": "1567864422634250245",
            "tweet_text": "The obvious alternative?\n\nDo regular string formatting and convert in the end: https://t.co/8uDzXlHvgn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcIsYWVX0AAmIIo.jpg\"]",
            "tweet_conversation_id": "1567864420771954689",
            "tweet_type": "Others",
            "created_at": "2022-09-08T13:16:22.000Z"
        },
        {
            "id": 1942,
            "username": "mathsppblog",
            "tweet_id": "1567864420771954689",
            "tweet_text": "f-strings cannot be used with bytes sequences in Python \ud83d\udc0d\n\nIf you want to format a bytes sequence, the old %-style is the only thing that works: https://t.co/0P70AHkU9n",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcIsXrBWYAAZcyc.png\"]",
            "tweet_conversation_id": "1567864420771954689",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T13:16:22.000Z"
        },
        {
            "id": 1943,
            "username": "mathsppblog",
            "tweet_id": "1567785932077649920",
            "tweet_text": "That's not what I meant \ud83e\udd23 https://t.co/X8NtVpio7u",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567785932077649920",
            "tweet_type": "Others",
            "created_at": "2022-09-08T08:04:28.000Z"
        },
        {
            "id": 1944,
            "username": "mathsppblog",
            "tweet_id": "1567530922190192640",
            "tweet_text": "Deleting a file with Python \ud83d\udc0d is simple. https://t.co/0PiWwBbVXQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcD9EKRXEAE8OfN.jpg\"]",
            "tweet_conversation_id": "1567530922190192640",
            "tweet_type": "Python tips",
            "created_at": "2022-09-07T15:11:09.000Z"
        },
        {
            "id": 1945,
            "username": "mathsppblog",
            "tweet_id": "1567231685934153728",
            "tweet_text": "Everyone knows the formula for the area of a triangle:\n\nLength of the base times the height divided by two.\n\nWhat if you know all of the side lengths, but none of the heights?\n\nEnter Heron's formula \ud83d\udc47 https://t.co/R0waQzWdGY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb_s6WKXoAA70Ca.jpg\"]",
            "tweet_conversation_id": "1567231685934153728",
            "tweet_type": "Others",
            "created_at": "2022-09-06T19:22:06.000Z"
        },
        {
            "id": 1946,
            "username": "mathsppblog",
            "tweet_id": "1567197128765612034",
            "tweet_text": "What's something a beginner would do in 6-8 lines of Python \ud83d\udc0d that a more proficient user would do in 3 or less?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567197128765612034",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T17:04:47.000Z"
        },
        {
            "id": 1947,
            "username": "mathsppblog",
            "tweet_id": "1567139581614608390",
            "tweet_text": "Python \ud83d\udc0d functions can expect an arbitrary number of positional arguments.\n\nTo do that, add `*` to the left of a parameter.\n\nThat parameter will be a tuple with all arguments passed in.\n\nTypically, we call it `*args`, but \u201cargs\u201d is not a special word. https://t.co/xb4roXFH56",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb-ZJLAXoAAMngL.jpg\"]",
            "tweet_conversation_id": "1567139581614608390",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T13:16:06.000Z"
        },
        {
            "id": 1948,
            "username": "mathsppblog",
            "tweet_id": "1567063838956175362",
            "tweet_text": "Python \ud83d\udc0d has the infamous \u201cf-strings\u201d.\n\nBut did you know of \u201cr-strings\u201d?\n\nR stands for Raw.\n\nIn r-strings, all characters are interpreted literally.\n\nUsed, for example, in Windows paths or regular expressions: https://t.co/lwCuJLcown",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb9UQWEXwAEokjs.jpg\"]",
            "tweet_conversation_id": "1567063838956175362",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T08:15:08.000Z"
        },
        {
            "id": 1949,
            "username": "mathsppblog",
            "tweet_id": "1566869303126855680",
            "tweet_text": "You can use the Python \ud83d\udc0d built-in `max` to find the longest word in a list.\n\nYou just need to use the keyword argument `key=len`.\n\nHere is the longest word in a list of 170,000+ English words.\n\nBonus points for you if you know what it means \ud83d\ude35 https://t.co/L6t658OcZN",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb6jU5jWYAEEUZ4.jpg\"]",
            "tweet_conversation_id": "1566869303126855680",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T19:22:07.000Z"
        },
        {
            "id": 1950,
            "username": "mathsppblog",
            "tweet_id": "1566777243380113410",
            "tweet_text": "The switch `-q` opens the REPL Quietly.\n\nWhat this means is that it opens the REPL without displaying all the version/platform information.\n\nI use it when recording videos and demoing stuff (thanks @learn_byexample!) https://t.co/BMzD8gpWvH",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5Pl3mXkAEM5wB.png\"]",
            "tweet_conversation_id": "1566777236035870720",
            "tweet_type": "Others",
            "created_at": "2022-09-05T13:16:18.000Z"
        },
        {
            "id": 1951,
            "username": "mathsppblog",
            "tweet_id": "1566777241324888070",
            "tweet_text": "The switch `-i` stands for Interactive.\n\nBy running your code with `-i`, after the script is done, you get a REPL session with the variables and functions from that script.\n\nUseful to play around with functions you just defined. https://t.co/zEaO7Awvra",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5PlRLWIAgEeEH.png\"]",
            "tweet_conversation_id": "1566777236035870720",
            "tweet_type": "Others",
            "created_at": "2022-09-05T13:16:18.000Z"
        },
        {
            "id": 1952,
            "username": "mathsppblog",
            "tweet_id": "1566777239609511941",
            "tweet_text": "The switch `-m` runs a module as a script.\n\nThis will run an installed module's section that is inside `if __name__ == \"__main__\":`.\n\nThe one I use the most is the module `timeit` to measure execution time. https://t.co/naROIZ4rCi",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5PkoNWQAAXaXp.jpg\"]",
            "tweet_conversation_id": "1566777236035870720",
            "tweet_type": "Others",
            "created_at": "2022-09-05T13:16:17.000Z"
        },
        {
            "id": 1953,
            "username": "mathsppblog",
            "tweet_id": "1566777237818441728",
            "tweet_text": "The switch `-c` runs code directly from the command line.\n\nIt doesn't open the REPL, and it is convenient for short, one-off expressions.\n\nThe result isn't printed by default, so don't forget your `print`! https://t.co/kvwXvscK4L",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5Pj98XwAI_hUK.jpg\"]",
            "tweet_conversation_id": "1566777236035870720",
            "tweet_type": "Others",
            "created_at": "2022-09-05T13:16:17.000Z"
        },
        {
            "id": 1954,
            "username": "mathsppblog",
            "tweet_id": "1566777236035870720",
            "tweet_text": "The Python \ud83d\udc0d command has many different switches.\n\nHere are the 4 switches I use the most: https://t.co/Navo2i1fg7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5PjQaXoAYRleg.jpg\"]",
            "tweet_conversation_id": "1566777236035870720",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T13:16:17.000Z"
        },
        {
            "id": 1955,
            "username": "mathsppblog",
            "tweet_id": "1566703018778804226",
            "tweet_text": "If your module \u201cyourmodule\u201d has a file `__main__.py`, then `python -m yourmodule` will actually run the **whole** file `yourmodule/__main__.py`.\n\nThanks for the added info, @rochacbruno \n\nhttps://t.co/1hCAo6JHsg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566685105065791489",
            "tweet_type": "Others",
            "created_at": "2022-09-05T08:21:22.000Z"
        },
        {
            "id": 1956,
            "username": "mathsppblog",
            "tweet_id": "1566685108542836737",
            "tweet_text": "Another one from the Standard Library is the module `calendar`.\n\nWhen used with `-m`, you can print the calendar for a month or for a whole year! https://t.co/mPMuX5p5YG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb37zBeXgAEEGP1.png\"]",
            "tweet_conversation_id": "1566685105065791489",
            "tweet_type": "Others",
            "created_at": "2022-09-05T07:10:12.000Z"
        },
        {
            "id": 1957,
            "username": "mathsppblog",
            "tweet_id": "1566685106777079808",
            "tweet_text": "The library `rich` is a nice module that also makes heavy use of `-m`.\n\nIf you use `-m` with its submodules, you typically get an example of what that module does.\n\nHere is a screenshot of me using `python -m rich.palette` and `python -m rich.progress`. https://t.co/4qzHaOMeXW",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb37zOVWYAEl2ie.jpg\"]",
            "tweet_conversation_id": "1566685105065791489",
            "tweet_type": "Others",
            "created_at": "2022-09-05T07:10:11.000Z"
        },
        {
            "id": 1958,
            "username": "mathsppblog",
            "tweet_id": "1566685105065791489",
            "tweet_text": "Python \ud83d\udc0d has a switch `-m` that \u201cruns library module as a script\u201d.\n\nMany modules from the standard library have useful script versions.\n\nIn your own code, the `-m` switch will run the `if __name__ == \"__main__\"`  section of your code. https://t.co/xBauScaLyx",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb37yVDXEAAbFoP.jpg\"]",
            "tweet_conversation_id": "1566685105065791489",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T07:10:11.000Z"
        },
        {
            "id": 1959,
            "username": "mathsppblog",
            "tweet_id": "1566568650139729920",
            "tweet_text": "Apparently, people love free stuff.\n\n(I think it helps that the free stuff is good \u2728)\n\n@blackmagic_so says my tweet sharing my free Python \ud83d\udc0d book is completely off the charts!\n\nThe orange lines are the average performance of my tweets! They look completely flat here\ud83e\udd23 https://t.co/h2sPj39kWP",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb2RtlYWIAYDWiS.png\"]",
            "tweet_conversation_id": "1566568650139729920",
            "tweet_type": "Python tips",
            "created_at": "2022-09-04T23:27:26.000Z"
        },
        {
            "id": 1960,
            "username": "mathsppblog",
            "tweet_id": "1566365689153216518",
            "tweet_text": "Thanks for the overwhelming response! In the last 24h my free Python \ud83d\udc0d book was downloaded over 2.5k times!\n\nIf only 1 of those 2,500 learns something and gains a deeper appreciation for Python...\n\nThen my mission is successful!\n\n(Book link on my Twitter profile.) https://t.co/ey5xrJYFL9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbzZSwoXgAImPzJ.jpg\"]",
            "tweet_conversation_id": "1566365689153216518",
            "tweet_type": "Python tips",
            "created_at": "2022-09-04T10:00:56.000Z"
        },
        {
            "id": 1961,
            "username": "mathsppblog",
            "tweet_id": "1566052801167462402",
            "tweet_text": "@KrMa_TZ is in it to win it:\n\nhttps://t.co/UKbPQnk2R2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566003697955778560",
            "tweet_type": "Others",
            "created_at": "2022-09-03T13:17:38.000Z"
        },
        {
            "id": 1962,
            "username": "mathsppblog",
            "tweet_id": "1566003697955778560",
            "tweet_text": "I learned Python \ud83d\udc0d on the Internet for free.\n\nThat's why my Pydon'ts book is free:\n\n\ud83d\udc49 +300 pages\n\ud83d\udc49 +25 chapters\n\ud83d\udc49 Available for $0\n\ud83d\udc49 Always growing\n\nI can't do the hard work for you, but I can make it *easier*!\n\nLink on my profile!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566003697955778560",
            "tweet_type": "Python tips",
            "created_at": "2022-09-03T10:02:31.000Z"
        },
        {
            "id": 1963,
            "username": "mathsppblog",
            "tweet_id": "1565792511796322306",
            "tweet_text": "My new favourite way of programming:\n\nLet the framework guess what I'm trying to do.\n\ncc @textualize https://t.co/Ik9bsyv86U",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbrP-d9WYAACq9H.png\"]",
            "tweet_conversation_id": "1565792511796322306",
            "tweet_type": "Others",
            "created_at": "2022-09-02T20:03:20.000Z"
        },
        {
            "id": 1964,
            "username": "mathsppblog",
            "tweet_id": "1565690031800475649",
            "tweet_text": "Best tip to ace that Python \ud83d\udc0d interview question: https://t.co/XTPKm8s73a",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbpyyPdWIAAvMsY.jpg\"]",
            "tweet_conversation_id": "1565690031800475649",
            "tweet_type": "Python tips",
            "created_at": "2022-09-02T13:16:07.000Z"
        },
        {
            "id": 1965,
            "username": "mathsppblog",
            "tweet_id": "1565661857427472385",
            "tweet_text": "You can use `str.replace` to do string replacements.\n\nBe careful, however, if you need to do many replacements in a row.\n\nIn that case, using `str.maketrans` might be better. https://t.co/Ihovhpfv6T",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbpZKQOXgAEfL90.jpg\"]",
            "tweet_conversation_id": "1565661857427472385",
            "tweet_type": "Others",
            "created_at": "2022-09-02T11:24:10.000Z"
        },
        {
            "id": 1966,
            "username": "mathsppblog",
            "tweet_id": "1565422861732483072",
            "tweet_text": "The fact that the `StopIteration` was being swallowed by the generator actually looked like a bug and now the bug is fixed!\n\nToday I can sleep in peace!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:29.000Z"
        },
        {
            "id": 1967,
            "username": "mathsppblog",
            "tweet_id": "1565422860360884225",
            "tweet_text": "PEP 479 essentially says that there were weird interactions with StopIteration inside generators and those are now handled correctly.\n\nThis makes sense, because the `StopIteration` that was being raised inside the generator did not have the appropriate semantic meaning.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:28.000Z"
        },
        {
            "id": 1968,
            "username": "mathsppblog",
            "tweet_id": "1565422858926424067",
            "tweet_text": "The next thing I did was go look up the changes in Python 3.7 to see if the behaviour had been changed.\n\nI opened the page \u201cWhat's new in Python 3.7?\u201d and searched the page for \u201cgenerator\u201d...\n\nI found out that \u201cPEP 479 is enabled for all code in Python 3.7 [...]\u201d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:28.000Z"
        },
        {
            "id": 1969,
            "username": "mathsppblog",
            "tweet_id": "1565422856686735361",
            "tweet_text": "But here's the twist!\n\nI tested it on my phone with a Python 3.6 REPL and on my computer I only have Python 3.7 through 3.10.\n\nIn none of my computer REPLs I could get my example to work.\n\nHere is the examples on my phone and on my computer: https://t.co/V20avEtJwI",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbl_w_jXgAAM97P.jpg\", \"https://pbs.twimg.com/media/Fbl_x5xWIAE8i7r.jpg\"]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:27.000Z"
        },
        {
            "id": 1970,
            "username": "mathsppblog",
            "tweet_id": "1565422853855608834",
            "tweet_text": "So, generators _are_ iterators, and probably that is why the `StopIteration` seems to be drowning inside the generator expression.\n\nMy thought?\n\nMaybe the generator expression is taking that `StopIteration` to mean \u201cthe generator is done\u201d.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:27.000Z"
        },
        {
            "id": 1971,
            "username": "mathsppblog",
            "tweet_id": "1565422851917750273",
            "tweet_text": "But generators are iterators!\n\nHow can you know?\n\nAn iterator is an object that:\n\n - returns itself when `iter` is called on it;\n - returns successive items when passed to `next`, raising `StopIteration` to say there are no more items.\n\nAnd this is exactly what generators do \ud83d\udc47 https://t.co/CSIrP2QhPf",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbl_wI5XEAAGkS0.jpg\"]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:26.000Z"
        },
        {
            "id": 1972,
            "username": "mathsppblog",
            "tweet_id": "1565422850474901508",
            "tweet_text": "- each iteration calls `__next__` on the instance to get the next value; and\n - when `__next__` raises `StopIteration` the loop knows it's over.\n\nSo that is what `StopIteration` is for.\n\nNow, the thing is, the more common _iterables_ are not _iterators_...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:26.000Z"
        },
        {
            "id": 1973,
            "username": "mathsppblog",
            "tweet_id": "1565422849099272195",
            "tweet_text": "In the example above we do not _see_ the `StopIteration`.\n\nIt is Python that handles it in the background:\n\n - the loop calls `__iter__` to create an iterator out of the `MyIter` instance;\n - turns out `MyIter()` is _already_ an iterator, so `__iter__` returns self;\n\nThen:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:26.000Z"
        },
        {
            "id": 1974,
            "username": "mathsppblog",
            "tweet_id": "1565422847245287431",
            "tweet_text": "I was thinking about what this meant...\n\nSo, I started by thinking about `StopIteration`.\n\n`StopIteration` is the exception iterators should raise to signal they're done.\n\nHere is an example: https://t.co/QuaQzKzd45",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbl_vROWAAgpOLO.jpg\"]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:25.000Z"
        },
        {
            "id": 1975,
            "username": "mathsppblog",
            "tweet_id": "1565422845064368130",
            "tweet_text": "I found this \ud83d\udc47 and was confused.\n\nWhy the heck doesn't the generator expression raise an error as well?!\n\nI decided to dig a bit deeper and here are my findings.\n\nYou won't believe how it ended \ud83e\udd21 I swear this isn't \u201cclickbait\u201d \ud83e\udd23 https://t.co/dr6xNIuug3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbl_uVyXgAMpCzG.jpg\"]",
            "tweet_conversation_id": "1565422845064368130",
            "tweet_type": "Others",
            "created_at": "2022-09-01T19:34:25.000Z"
        },
        {
            "id": 1976,
            "username": "mathsppblog",
            "tweet_id": "1565410337901387778",
            "tweet_text": "Turns out, there's always more to the story!\n\nLearn more \ud83d\udc47\n\nhttps://t.co/yksEa1RH5a",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564965270325698565",
            "tweet_type": "Others",
            "created_at": "2022-09-01T18:44:43.000Z"
        },
        {
            "id": 1977,
            "username": "mathsppblog",
            "tweet_id": "1565284617174794240",
            "tweet_text": "How many weeks are there in 31 days?\n\n4 weeks and 3 days.\n\nHow many days are there in 126 hours?\n\n5 days and 6 hours.\n\nHow many hours are there in 375 minutes?\n\n6 hours and 15 minutes.\n\nThat is what `divmod` does in Python \ud83d\udc0d: integer division and remainder. https://t.co/OHgQNcMMS6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbkCEA6XoAM38-3.jpg\"]",
            "tweet_conversation_id": "1565284617174794240",
            "tweet_type": "Python tips",
            "created_at": "2022-09-01T10:25:08.000Z"
        },
        {
            "id": 1978,
            "username": "mathsppblog",
            "tweet_id": "1564965270325698565",
            "tweet_text": "The tuples in Python \ud83d\udc0d are not defined by the parenthesis.\n\nIt's the commas. https://t.co/mlswxHCRmo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbffnlHWIAAdYvD.jpg\"]",
            "tweet_conversation_id": "1564965270325698565",
            "tweet_type": "Python tips",
            "created_at": "2022-08-31T13:16:10.000Z"
        },
        {
            "id": 1979,
            "username": "mathsppblog",
            "tweet_id": "1564873162344595456",
            "tweet_text": "Python \ud83d\udc0d iterators raise `StopIteration` when they become empty.\n\nBut something funky happens inside generator expressions! https://t.co/mugdpts9FZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbeL2NGXEAAzda_.jpg\"]",
            "tweet_conversation_id": "1564873162344595456",
            "tweet_type": "Python tips",
            "created_at": "2022-08-31T07:10:10.000Z"
        },
        {
            "id": 1980,
            "username": "mathsppblog",
            "tweet_id": "1564653454731186179",
            "tweet_text": "The Python \ud83d\udc0d range always has a `stop` argument.\n\nIf you need to count numbers starting at a given point but _without_ specifying a stopping value, use `itertools.count`.\n\nYou can also specify a `step` value. https://t.co/uKc9HD9xpR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbbEBhgWQAAcFp1.jpg\"]",
            "tweet_conversation_id": "1564653454731186179",
            "tweet_type": "Python tips",
            "created_at": "2022-08-30T16:37:08.000Z"
        },
        {
            "id": 1981,
            "username": "mathsppblog",
            "tweet_id": "1564510744665899008",
            "tweet_text": "I'll be announcing something new in a couple of hours.\n\nIt's about Python \ud83d\udc0d, in case you are wondering \ud83d\ude43\n\nSadly, it's something w/ limited availability, so I'm announcing it to the Mathspp Insiders first.\n\nJoin now &amp; you'll be the first to know too!\n\nhttps://t.co/DOWZZCN6Xa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564510744665899008",
            "tweet_type": "Python tips",
            "created_at": "2022-08-30T07:10:03.000Z"
        },
        {
            "id": 1982,
            "username": "mathsppblog",
            "tweet_id": "1564332586243080193",
            "tweet_text": "For a programming language using indentation instead of braces, Python \ud83d\udc0d does play fast &amp; loose with spaces... \ud83e\udd23 https://t.co/ChVrP5IbDu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbWgMiwXoAEhrOK.jpg\"]",
            "tweet_conversation_id": "1564332586243080193",
            "tweet_type": "Python tips",
            "created_at": "2022-08-29T19:22:07.000Z"
        },
        {
            "id": 1983,
            "username": "mathsppblog",
            "tweet_id": "1564240490408591360",
            "tweet_text": "Python \ud83d\udc0d strings have a method `.replace`.\n\nThis method replaces strings with other strings, but you can specify a maximum number of replacements. https://t.co/GLYEx5HkGl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbVMb1_WAAEygoU.jpg\"]",
            "tweet_conversation_id": "1564240490408591360",
            "tweet_type": "Python tips",
            "created_at": "2022-08-29T13:16:09.000Z"
        },
        {
            "id": 1984,
            "username": "mathsppblog",
            "tweet_id": "1564148399494111232",
            "tweet_text": "TL;DR:\n\n - `str.removeprefix` removes a string from the beginning:\n   - don't care about partial matches\n   - don't care about repeated matches\n - `str.lstrip` removes all given characters from the left of a string\n\nCan you guess what `removesuffix` and `rstrip` do?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564148392971960322",
            "tweet_type": "Others",
            "created_at": "2022-08-29T07:10:13.000Z"
        },
        {
            "id": 1985,
            "username": "mathsppblog",
            "tweet_id": "1564148398227324930",
            "tweet_text": "I hope this short thread was useful.\n\nIf it was, follow me @mathsppblog for more and retweet so others learn too \ud83d\ude4f\n\nDon't forget to check my free Python book that helps you write elegant Python code (link in the Twitter profile!).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564148392971960322",
            "tweet_type": "Others",
            "created_at": "2022-08-29T07:10:13.000Z"
        },
        {
            "id": 1986,
            "username": "mathsppblog",
            "tweet_id": "1564148396549603328",
            "tweet_text": "The method `.lstrip` is very different.\n\nThe string arguments represents \u201call characters I want to get rid of\u201d, regardless of order and quantity.\n\nThen, `.lstrip` will get rid of all those characters on the left of the string.\n\nHere are two examples: https://t.co/G4u4YFfPwp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbT4rFhXwAYfUzE.jpg\"]",
            "tweet_conversation_id": "1564148392971960322",
            "tweet_type": "Others",
            "created_at": "2022-08-29T07:10:12.000Z"
        },
        {
            "id": 1987,
            "username": "mathsppblog",
            "tweet_id": "1564148394796453890",
            "tweet_text": "The method `.removeprefix` was added in Python \ud83d\udc0d 3.9 and does what it says on the tin.\n\nYou give it a prefix and if the original string starts with that, it removes it.\n\nIt just removes it once, and only if the prefix is 100% present: https://t.co/lwgpWOgqYs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbT4qfmXkAIPTPh.jpg\"]",
            "tweet_conversation_id": "1564148392971960322",
            "tweet_type": "Python tips",
            "created_at": "2022-08-29T07:10:12.000Z"
        },
        {
            "id": 1988,
            "username": "mathsppblog",
            "tweet_id": "1564148392971960322",
            "tweet_text": "The Python \ud83d\udc0d string methods `.lstrip` and `.removeprefix` look very similar.\n\nBut they do very different things!\n\nLet me explain. https://t.co/f9lfTUV0WR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbT4p1_WAAIw4Eb.png\"]",
            "tweet_conversation_id": "1564148392971960322",
            "tweet_type": "Python tips",
            "created_at": "2022-08-29T07:10:12.000Z"
        },
        {
            "id": 1989,
            "username": "mathsppblog",
            "tweet_id": "1563970194149621762",
            "tweet_text": "You can deduplicate a list of values in two ways.\n\nPython \ud83d\udc0d has sets, and those don't have duplicates...\n\nBut sets do not preserve order.\n\nIf you _need_ the order to be preserved, use `dict.fromkeys`! https://t.co/LTMUXRa1Jj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbRWmj0WYAM55MR.jpg\"]",
            "tweet_conversation_id": "1563970194149621762",
            "tweet_type": "Python tips",
            "created_at": "2022-08-28T19:22:06.000Z"
        },
        {
            "id": 1990,
            "username": "mathsppblog",
            "tweet_id": "1563878085942022144",
            "tweet_text": "Python \ud83d\udc0d integers / floats have a method `as_integer_ratio`.\n\nThis gives you a numerator and denominator to produce that exact number.\n\nHowever, \u201cexact\u201d may not mean what you expect: https://t.co/1WUItFkuib",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbQC1H6XwAErNgW.jpg\"]",
            "tweet_conversation_id": "1563878085942022144",
            "tweet_type": "Python tips",
            "created_at": "2022-08-28T13:16:05.000Z"
        },
        {
            "id": 1991,
            "username": "mathsppblog",
            "tweet_id": "1563785980833939456",
            "tweet_text": "I just found out that you can convert Python \ud83d\udc0d floats to hexadecimal.\n\nFrom a mathematician's point of view, this doesn't surprise me.\n\nFloats are floats, who cares if it's base 10, 16, or 42 \ud83e\udd37\n\nBut as a (Python) programmer, I find this very curious!\n\nDid you know this? https://t.co/YOliShyQkf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbOvD7tWYAA8nF-.png\"]",
            "tweet_conversation_id": "1563785980833939456",
            "tweet_type": "Python tips",
            "created_at": "2022-08-28T07:10:06.000Z"
        },
        {
            "id": 1992,
            "username": "mathsppblog",
            "tweet_id": "1563607811329777664",
            "tweet_text": "You can't call methods on Python \ud83d\udc0d integers / floats directly.\n\n(I guess it's because the dot `.` \u201ccould\u201d be a decimal point..?)\n\nInstead, what you can do is wrap the integer / float in parenthesis.\n\nThen, you can call the methods you want: https://t.co/vtayzIGTND",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbMNBFKUIAEiKTb.jpg\"]",
            "tweet_conversation_id": "1563607811329777664",
            "tweet_type": "Python tips",
            "created_at": "2022-08-27T19:22:07.000Z"
        },
        {
            "id": 1993,
            "username": "mathsppblog",
            "tweet_id": "1563245420976885763",
            "tweet_text": "The Python \ud83d\udc0d string method `.rjust` JUSTifies text on the Right.\n\nYou give it a width and Python does the rest...\n\nYou can also specify a character to fill the empty space...\n\nAnd you can do all this with string formatting as well...\n\n(Who can guess what `.ljust` does?!) https://t.co/gRdn4wi32O",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbHDbJGUIAIRagX.jpg\"]",
            "tweet_conversation_id": "1563245420976885763",
            "tweet_type": "Python tips",
            "created_at": "2022-08-26T19:22:06.000Z"
        },
        {
            "id": 1994,
            "username": "mathsppblog",
            "tweet_id": "1563153371347177472",
            "tweet_text": "Here's a quick recap:\n\n 1. `dict` accepts an iterable that contains key, value pairs;\n 2. use keyword arguments in `dict` if you want string keys; and\n 3. `.fromkeys` gives the same value (default is `None`) to a bunch of keys.\n\nIn what other ways can you create a Python \ud83d\udc0d dict?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563153357359181824",
            "tweet_type": "Python tips",
            "created_at": "2022-08-26T13:16:20.000Z"
        },
        {
            "id": 1995,
            "username": "mathsppblog",
            "tweet_id": "1563153369531039750",
            "tweet_text": "These are just 3 ways of creating a Python dictionary.\n\nNext Tuesday, I'll send out a Mathspp Insider article talking about all the ways in which you can create dictionaries in Python \ud83d\udc0d\n\nJoin 13k others to keep learning:\n\nhttps://t.co/DOWZZCNEMI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563153357359181824",
            "tweet_type": "Python tips",
            "created_at": "2022-08-26T13:16:19.000Z"
        },
        {
            "id": 1996,
            "username": "mathsppblog",
            "tweet_id": "1563153366985080834",
            "tweet_text": "The class method `.fromkeys` has a gotcha associated with it, though.\n\nBe careful when using mutable values, because the value isn't copied to each key.\n\nIt's exactly the same object used over and over: https://t.co/WjoSKgBqJo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbFvsXkXgAATTUA.jpg\"]",
            "tweet_conversation_id": "1563153357359181824",
            "tweet_type": "Others",
            "created_at": "2022-08-26T13:16:19.000Z"
        },
        {
            "id": 1997,
            "username": "mathsppblog",
            "tweet_id": "1563153364636299267",
            "tweet_text": "#3 class method `dict.fromkeys`\n\nThe class method `dict.fromkeys` accepts an iterable and a value, and produces a dictionary where all keys have that value.\n\nBy default, that value is `None`: https://t.co/ZL2rynMRnU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbFvrwQXoAAceU8.jpg\"]",
            "tweet_conversation_id": "1563153357359181824",
            "tweet_type": "Others",
            "created_at": "2022-08-26T13:16:18.000Z"
        },
        {
            "id": 1998,
            "username": "mathsppblog",
            "tweet_id": "1563153362090340362",
            "tweet_text": "#2 keyword arguments\n\nYou can use the keyword arguments to `dict` to define key, value pairs in your dictionary!\n\nHowever, this only works if your keys are valid variable names: https://t.co/6uJ5ZkoOxA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbFvrFfXwAA8Xj5.jpg\"]",
            "tweet_conversation_id": "1563153357359181824",
            "tweet_type": "Others",
            "created_at": "2022-08-26T13:16:18.000Z"
        },
        {
            "id": 1999,
            "username": "mathsppblog",
            "tweet_id": "1563153359929872387",
            "tweet_text": "#1 an iterable of key, value pairs.\n\nThe built-in `dict` can take an iterable with key, value pairs.\n\nUseful, for example, when you have a bunch of keys and a bunch of values that you put together with `zip`: https://t.co/GtiJQgbl11",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbFvqYHWIAANz7M.jpg\"]",
            "tweet_conversation_id": "1563153357359181824",
            "tweet_type": "Others",
            "created_at": "2022-08-26T13:16:17.000Z"
        },
        {
            "id": 2000,
            "username": "mathsppblog",
            "tweet_id": "1563153357359181824",
            "tweet_text": "Here are 3 ways in which you can create a Python \ud83d\udc0d dictionary.\n\nI bet you never used the last one \ud83e\udd14 https://t.co/epBuYv7pv5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbFvpvbXoAARE2b.jpg\"]",
            "tweet_conversation_id": "1563153357359181824",
            "tweet_type": "Python tips",
            "created_at": "2022-08-26T13:16:17.000Z"
        },
        {
            "id": 2001,
            "username": "mathsppblog",
            "tweet_id": "1563061204280434688",
            "tweet_text": "Use `!r` in Python \ud83d\udc0d f-strings to distinguish some data types from others.\n \nBy using `!r`, you tell Python to use the unambiguous representation of an object, instead of its pretty string.\n\nThis is equivalent to using the built-in `repr` explicitly.\n \nExamples \ud83d\udc47 https://t.co/WZ0CWHbDcw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbEb4XiXkAAEBtf.jpg\"]",
            "tweet_conversation_id": "1563061204280434688",
            "tweet_type": "Python tips",
            "created_at": "2022-08-26T07:10:06.000Z"
        },
        {
            "id": 2002,
            "username": "mathsppblog",
            "tweet_id": "1562883030850478088",
            "tweet_text": "Here is a Python \ud83d\udc0d challenge for you.\n\nThe built-in `range` can be sliced and it returns an updated range.\n\nImplement a function `slice_range` that accepts a range, a slice, and returns the new corresponding range.\n\nHere are some examples: https://t.co/ajngsRXjYq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbB51SbXwAAOoWE.jpg\"]",
            "tweet_conversation_id": "1562883030850478088",
            "tweet_type": "Python tips",
            "created_at": "2022-08-25T19:22:06.000Z"
        },
        {
            "id": 2003,
            "username": "mathsppblog",
            "tweet_id": "1562790939394879489",
            "tweet_text": "Python \ud83d\udc0d ranges are extremely useful and versatile.\n\nYou can slice ranges, and they return NEW ranges with updates boundaries.\n\nThat blew my mind \ud83e\udd2f when I found out... https://t.co/rT8E3OCtAA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbAmE2_XEAA0u44.jpg\"]",
            "tweet_conversation_id": "1562790939394879489",
            "tweet_type": "Python tips",
            "created_at": "2022-08-25T13:16:09.000Z"
        },
        {
            "id": 2004,
            "username": "mathsppblog",
            "tweet_id": "1562715019715915781",
            "tweet_text": "Here is a quick summary:\n\nReverse a Python list with:\n\n 1. the built-in `reversed` that will notice changes to the original list;\n 2. slicing `[::-1]` that creates a copy of the original list; and\n 3. the method `.reverse` that reverses a list in place.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:29.000Z"
        },
        {
            "id": 2005,
            "username": "mathsppblog",
            "tweet_id": "1562715018009124865",
            "tweet_text": "There you have it, three ways in which you can reverse a Python list.\n\nI hope this was useful and, if it was, follow me @mathsppblog for more daily Python knowledge \ud83d\ude09\n\nExtra internet points if you retweet this thread for me \ud83d\ude4f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:28.000Z"
        },
        {
            "id": 2006,
            "username": "mathsppblog",
            "tweet_id": "1562715015500922883",
            "tweet_text": "#3: the method `.reverse`:\n\nLists have a method `.reverse` that reverses the list IN PLACE.\n\nWhat this means is that you do not get a return value with the reversed list...\n\nInstead, the list itself gets turned around \ud83d\ude43 https://t.co/kIZUmJKxqQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa_hAi4XgAAT3Q2.png\"]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:28.000Z"
        },
        {
            "id": 2007,
            "username": "mathsppblog",
            "tweet_id": "1562715013873250304",
            "tweet_text": "Slicing is very powerful and useful, and that is why I wrote a whole chapter of my free book \u201cPydon'ts\u201d on the subject.\n\nThe link to the free book is in my Twitter profile and the chapter can also be read online:\n\nhttps://t.co/B2buRRBihY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:27.000Z"
        },
        {
            "id": 2008,
            "username": "mathsppblog",
            "tweet_id": "1562715011554115584",
            "tweet_text": "Notice that slices are not \u201clinked\u201d to the original list.\n\nThat's because slicing creates a copy of the list.\n\nSo, if you change the elements in a given index, the reversed list will not notice: https://t.co/YMwz4JgQgO",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa_g_2IWYAA6xVS.jpg\"]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:27.000Z"
        },
        {
            "id": 2009,
            "username": "mathsppblog",
            "tweet_id": "1562715009322405889",
            "tweet_text": "Slices in Python \ud83d\udc0d are regular objects, so you can also name them.\n\nThus, you could go as far as creating a named slice to reverse lists, and then use it: https://t.co/kdWEQ4NJ1A",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa_g_J_XoAAZxRt.jpg\"]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Python tips",
            "created_at": "2022-08-25T08:14:26.000Z"
        },
        {
            "id": 2010,
            "username": "mathsppblog",
            "tweet_id": "1562715006822916098",
            "tweet_text": "#2: slicing with `[::-1]`:\n\nThe slicing syntax with brackets `[]` and colons `:` accepts a \u201cstep\u201d that can be negative.\n\nIf the \u201cstart\u201d and \u201cstop\u201d are omitted and the \u201cstep\u201d is -1, we get a copy in the reverse order: https://t.co/5kflU0wOPf",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa_g-gwWAAA3c7o.png\"]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:26.000Z"
        },
        {
            "id": 2011,
            "username": "mathsppblog",
            "tweet_id": "1562715004100431872",
            "tweet_text": "The `list_reverseiterator` object that is returned is \u201clinked\u201d to the original list...\n\nSo, if you change the original list, the reverse iterator will notice: https://t.co/BmSpayiXp9",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa_g934XoAAkYJC.jpg\"]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:25.000Z"
        },
        {
            "id": 2012,
            "username": "mathsppblog",
            "tweet_id": "1562715001412268033",
            "tweet_text": "#1: the built-in `reversed`:\n\nThe built-in `reversed` accepts a sequence and returns an object that knows how to iterate over that sequence IN REVERSE.\n\nHence, `reversed`.\n\nNotice it doesn't return a list: https://t.co/Dr3tXKJ5Wt",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa_g9ICXkAAgfTM.jpg\"]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Others",
            "created_at": "2022-08-25T08:14:24.000Z"
        },
        {
            "id": 2013,
            "username": "mathsppblog",
            "tweet_id": "1562714998757277696",
            "tweet_text": "Here are 3 simple ways in which you can reverse a Python \ud83d\udc0d list.\n\nLet's see how they are different. https://t.co/mAWZARL9xe",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa_g8XbWQAAKBMr.png\"]",
            "tweet_conversation_id": "1562714998757277696",
            "tweet_type": "Python tips",
            "created_at": "2022-08-25T08:14:24.000Z"
        },
        {
            "id": 2014,
            "username": "mathsppblog",
            "tweet_id": "1562000381864968192",
            "tweet_text": "Modification of the evil code that @dabeaz shared yesterday(?).\n\nhttps://t.co/ufIXZbRzKF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561999718401572864",
            "tweet_type": "Others",
            "created_at": "2022-08-23T08:54:46.000Z"
        },
        {
            "id": 2015,
            "username": "mathsppblog",
            "tweet_id": "1561999718401572864",
            "tweet_text": "I have too much fun doing what shouldn't be done \ud83e\udd21\n\nLo and behold, the Collatz conjecture in a weird Python \ud83d\udc0d dialect \ud83d\ude43 https://t.co/Kp7F2YSO60",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa1Wdt_WIAA8ULF.jpg\"]",
            "tweet_conversation_id": "1561999718401572864",
            "tweet_type": "Python tips",
            "created_at": "2022-08-23T08:52:08.000Z"
        },
        {
            "id": 2016,
            "username": "mathsppblog",
            "tweet_id": "1561995412348747777",
            "tweet_text": "Tried writing my own factorial version using this dialect.\n\nIt was an interesting exercise \ud83d\ude43 https://t.co/7zcxnVoVMc",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa1SbjqXkAE_WEP.jpg\"]",
            "tweet_conversation_id": "1561765223408730116",
            "tweet_type": "Others",
            "created_at": "2022-08-23T08:35:01.000Z"
        },
        {
            "id": 2017,
            "username": "mathsppblog",
            "tweet_id": "1561812514006093825",
            "tweet_text": "I spend way too much time in the Python \ud83d\udc0d Standard Library source code...\n\nJust now, I found a tiny piece of code in the module CSV that my ignorant self feels could be improved.\n\nIs this PR-worthy?\nWhat if I find 10 things like this?\nOr 100? https://t.co/6m1N1beKnl",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fayr2nBWAAEf8kw.jpg\"]",
            "tweet_conversation_id": "1561812514006093825",
            "tweet_type": "Python tips",
            "created_at": "2022-08-22T20:28:15.000Z"
        },
        {
            "id": 2018,
            "username": "mathsppblog",
            "tweet_id": "1561765232229457922",
            "tweet_text": "@dabeaz In the lambda `loop`, `n` is the value for which we still have to compute the factorial.\n\nIt goes down with each call.\n\n`r0` is the accumulated factorial that grows as we reduce the value of `n`.\n\nDoes this make sense?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561765223408730116",
            "tweet_type": "Others",
            "created_at": "2022-08-22T17:20:22.000Z"
        },
        {
            "id": 2019,
            "username": "mathsppblog",
            "tweet_id": "1561765230304174085",
            "tweet_text": "@dabeaz The function `fact` defines `loop` in its body, which is a tail recursive factorial.\n\nI commented ou the successive calls below.\n\nRemember that the 3rd arguments of sub, mul, and eqv, can be read as what happens after that operation. https://t.co/JlZjQxyK63",
            "tweet_media": "[\"https://pbs.twimg.com/media/FayBMRgXkAAxVSY.jpg\"]",
            "tweet_conversation_id": "1561765223408730116",
            "tweet_type": "Others",
            "created_at": "2022-08-22T17:20:21.000Z"
        },
        {
            "id": 2020,
            "username": "mathsppblog",
            "tweet_id": "1561765228840353792",
            "tweet_text": "@dabeaz Alright, we are halfway there!\n\nNow, we just need to understand how David put everything together to implement the factorial function.\n\nYou still with me? \ud83d\udcaa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561765223408730116",
            "tweet_type": "Others",
            "created_at": "2022-08-22T17:20:21.000Z"
        },
        {
            "id": 2021,
            "username": "mathsppblog",
            "tweet_id": "1561765227120791553",
            "tweet_text": "@dabeaz The fourth lambda is a bit more interesting but also crazier.\n\nIt implements conditionals.\n\n(I have no idea what \u201cbnz\u201d means, though \ud83e\udd37)\n\nThe first argument is the Boolean value, then:\n\n - if the Boolean is `True`, we call `c`\n - if it is `False`, we call the alternative `a` https://t.co/QryRjynKOu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FayBKuUWQAAlai0.jpg\"]",
            "tweet_conversation_id": "1561765223408730116",
            "tweet_type": "Others",
            "created_at": "2022-08-22T17:20:20.000Z"
        },
        {
            "id": 2022,
            "username": "mathsppblog",
            "tweet_id": "1561765225183027208",
            "tweet_text": "@dabeaz Let us start by looking at the four lambdas at the top.\n\nThe first three are quite similar to each other:\n\nTake the first two arguments, operate on them, and recursively call `c` with the result.\n\nSo, David is going to chain operations by doing these crazy recursive calls. https://t.co/nrvjpBPGBH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FayBKCvWIAI7iS3.png\"]",
            "tweet_conversation_id": "1561765223408730116",
            "tweet_type": "Others",
            "created_at": "2022-08-22T17:20:20.000Z"
        },
        {
            "id": 2023,
            "username": "mathsppblog",
            "tweet_id": "1561765223408730116",
            "tweet_text": "I just found another Python \ud83d\udc0d monstrosity.\n\nThis one was brought to you by the infamous @dabeaz...\n\nBut what does it do?\n\nSit tight, here we go \ud83e\uddd1\u200d\ud83d\ude80 https://t.co/CuCyniodKJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FayBJRNWQAECKrr.jpg\"]",
            "tweet_conversation_id": "1561765223408730116",
            "tweet_type": "Python tips",
            "created_at": "2022-08-22T17:20:20.000Z"
        },
        {
            "id": 2024,
            "username": "mathsppblog",
            "tweet_id": "1561394376902729728",
            "tweet_text": "What's the caveat associated with this example?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560945777832239104",
            "tweet_type": "Others",
            "created_at": "2022-08-21T16:46:43.000Z"
        },
        {
            "id": 2025,
            "username": "mathsppblog",
            "tweet_id": "1561036455983579139",
            "tweet_text": "I am going to submit a couple of Python \ud83d\udc0d talk proposals to @PyjamasConf.\n\nDo you have any suggestions you'd like me to consider as well..? https://t.co/8xXXGFYCLZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561036455983579139",
            "tweet_type": "Python tips",
            "created_at": "2022-08-20T17:04:28.000Z"
        },
        {
            "id": 2026,
            "username": "mathsppblog",
            "tweet_id": "1560945777832239104",
            "tweet_text": "Everyone knows the string method `.split` in Python \ud83d\udc0d\n\nBut did you know you can specify the maximum number of splits?\n\nHere is how you get the first three words in a sentence: https://t.co/ZbKetSq7Vq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FamX6XJXwAAqVQq.jpg\"]",
            "tweet_conversation_id": "1560945777832239104",
            "tweet_type": "Python tips",
            "created_at": "2022-08-20T11:04:09.000Z"
        },
        {
            "id": 2027,
            "username": "mathsppblog",
            "tweet_id": "1560589660862066688",
            "tweet_text": "I love font ligatures.\n\nFirst time I saw them, it was in the context of Haskell and I thought they were really beautiful!\n\nNaturally, I started using them with Python \ud83d\udc0d\n\nBut I've heard good arguments against them, so I think I'll stop using them \ud83d\ude22\n\nHere are some examples \ud83d\udc47 https://t.co/KNxkmXNdN8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FahTS-GUUAEOTOE.jpg\", \"https://pbs.twimg.com/media/FahTS-CUYAA2gF-.jpg\"]",
            "tweet_conversation_id": "1560589660862066688",
            "tweet_type": "Python tips",
            "created_at": "2022-08-19T11:29:04.000Z"
        },
        {
            "id": 2028,
            "username": "mathsppblog",
            "tweet_id": "1560208738220392448",
            "tweet_text": "For reference, here is the naive solution I wrote before posting the challenge.\n\nIt is a simple solution and the quality isn't nowhere close to some of the things shared in the comments! https://t.co/k4QODzMFtJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fab5UhgX0AA8grH.jpg\"]",
            "tweet_conversation_id": "1557625401031233536",
            "tweet_type": "Others",
            "created_at": "2022-08-18T10:15:25.000Z"
        },
        {
            "id": 2029,
            "username": "mathsppblog",
            "tweet_id": "1560173946317807616",
            "tweet_text": "You could also achieve this particular effect by using `str.partition`.\n\nThat would likely be more appropriate...\n\nBut that doesn't mean the key ideas shown above are not worth understanding \ud83d\ude09 https://t.co/8fwljZMwVo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FabZ7uJWQAAlzGS.jpg\"]",
            "tweet_conversation_id": "1560173944476520448",
            "tweet_type": "Others",
            "created_at": "2022-08-18T07:57:10.000Z"
        },
        {
            "id": 2030,
            "username": "mathsppblog",
            "tweet_id": "1560173944476520448",
            "tweet_text": "Did you know you can combine `compress` and `accumulate` from the Python \ud83d\udc0d itertools and write really powerful things?\n\nFor example, you can use them to extract a comment from code, or to extract the code before a comment.\n\nStudying these ideas can be really eye-opening: https://t.co/QH9YaxTe7v",
            "tweet_media": "[\"https://pbs.twimg.com/media/FabZ7AuWQAU9LMw.jpg\"]",
            "tweet_conversation_id": "1560173944476520448",
            "tweet_type": "Python tips",
            "created_at": "2022-08-18T07:57:09.000Z"
        },
        {
            "id": 2031,
            "username": "mathsppblog",
            "tweet_id": "1559891827863560193",
            "tweet_text": "Did you know you can set a default argument to be a lambda function in Python \ud83d\udc0d?\n\nThis can be useful, for example, when a function can have some pre- or post-processing...\n\nNot saying you should, but you could!\n\nHere's an example \ud83d\udc47 https://t.co/PdPQSAjeeS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaXZWWYWQAITVrR.jpg\"]",
            "tweet_conversation_id": "1559891827863560193",
            "tweet_type": "Python tips",
            "created_at": "2022-08-17T13:16:07.000Z"
        },
        {
            "id": 2032,
            "username": "mathsppblog",
            "tweet_id": "1559837007584583682",
            "tweet_text": "Finally, if you want your chunks to always have the same size, you can use `strict=True` in `zip`!\n\nThis will make your `chunk` function error if the chunk size doesn't divide evenly!\n\nHowever, this only works in Python 3.10+ https://t.co/uXF6CVimPP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaWnfNBXkAA6xg9.jpg\"]",
            "tweet_conversation_id": "1559837003973287936",
            "tweet_type": "Others",
            "created_at": "2022-08-17T09:38:17.000Z"
        },
        {
            "id": 2033,
            "username": "mathsppblog",
            "tweet_id": "1559837005730701321",
            "tweet_text": "The code above has a limitation, though.\n\nAnd that is: it ignores the last elements if the chunk size doesn't divide evenly into the length of the iterable.\n\nSometimes this is ok... Sometimes, it is not.\n\nIf you use https://t.co/SlEF2boxYV_longest, you get the opposite behaviour: https://t.co/cYJJoFd1vx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaWnea5WIAIg7pm.jpg\"]",
            "tweet_conversation_id": "1559837003973287936",
            "tweet_type": "Others",
            "created_at": "2022-08-17T09:38:17.000Z"
        },
        {
            "id": 2034,
            "username": "mathsppblog",
            "tweet_id": "1559837003973287936",
            "tweet_text": "Do you need to chunk a Python \ud83d\udc0d list or another iterable into groups of `n` items?\n\nFor example, do you need to split a list of integers into groups of 4 integers?\n\nYou can do that with the built-in `zip`: https://t.co/i4pxtTMAd9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaWndpnXkAAxHdl.jpg\"]",
            "tweet_conversation_id": "1559837003973287936",
            "tweet_type": "Python tips",
            "created_at": "2022-08-17T09:38:16.000Z"
        },
        {
            "id": 2035,
            "username": "mathsppblog",
            "tweet_id": "1559510926260375556",
            "tweet_text": "I am preparing one or two Python \ud83d\udc0d remote workshops for September.\n\nMy newsletter subscribers will have a say on what topic(s) I choose, and I will be sending out the form shortly!\n\nSo, you still have a bit to subscribe (https://t.co/32yn3xZkqE) to help me decide!\n\nSee you soon! https://t.co/pBkwxpw349",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaR-XQCX0AMd1ht.jpg\"]",
            "tweet_conversation_id": "1559510926260375556",
            "tweet_type": "Python tips",
            "created_at": "2022-08-16T12:02:33.000Z"
        },
        {
            "id": 2036,
            "username": "mathsppblog",
            "tweet_id": "1559259155764072448",
            "tweet_text": "What is this dark magic?\n\nIt's the power of the methods `translate` and `maketrans`!\n\nThere's a chapter about them in my free book Pydon'ts.\n\nThe link is in my profile!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559259154014953472",
            "tweet_type": "Others",
            "created_at": "2022-08-15T19:22:07.000Z"
        },
        {
            "id": 2037,
            "username": "mathsppblog",
            "tweet_id": "1559259154014953472",
            "tweet_text": "Remove punctuation from a string in 2 lines of Python \ud83d\udc0d!\n\nIngredients:\n\n - the module `string`\n - the str methods `translate` and `maketrans`\n - the dictionary method `fromkeys` https://t.co/cRW55FGFba",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaOZ748XoAAAnwt.jpg\"]",
            "tweet_conversation_id": "1559259154014953472",
            "tweet_type": "Python tips",
            "created_at": "2022-08-15T19:22:06.000Z"
        },
        {
            "id": 2038,
            "username": "mathsppblog",
            "tweet_id": "1559195232931037185",
            "tweet_text": "Did you know the sentence \"the quick brown fox jumps over the lazy dog\" has the 26 letters of the alphabet?\n\nYou can easily check that in Python \ud83d\udc0d with sets!\n\nWe use `A &gt;= B` to mean \"A contains everything in B\". https://t.co/s5Fg9somgf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaNfzOdXEAEYHTy.jpg\"]",
            "tweet_conversation_id": "1559195232931037185",
            "tweet_type": "Python tips",
            "created_at": "2022-08-15T15:08:06.000Z"
        },
        {
            "id": 2039,
            "username": "mathsppblog",
            "tweet_id": "1559105648373252097",
            "tweet_text": "Python \ud83d\udc0d sets use the comparison operators for set containment operations.\n\nFor example, `setA &lt; setB` means:\n\n\"Is the set A strictly contained in the set B?\"\n\nCan you guess what `setA &gt; setB` means? https://t.co/xqxOMrGZnX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaMOUvHWQAA9C7z.png\"]",
            "tweet_conversation_id": "1559105648373252097",
            "tweet_type": "Python tips",
            "created_at": "2022-08-15T09:12:08.000Z"
        },
        {
            "id": 2040,
            "username": "mathsppblog",
            "tweet_id": "1559088232725467138",
            "tweet_text": "If you don't want to miss it, subscribe to the Mathspp Insider here:\n\nhttps://t.co/DOWZZCN6Xa\n\nLearn today what you'll need tomorrow \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559088230666063872",
            "tweet_type": "Others",
            "created_at": "2022-08-15T08:02:55.000Z"
        },
        {
            "id": 2041,
            "username": "mathsppblog",
            "tweet_id": "1559088230666063872",
            "tweet_text": "Last week I posted an algorithmic challenge for you!\n\nYou had to implement an integer spiral grid.\n\nI got many replies!\n\nIn tomorrow's edition of the Mathspp Insider, I'm going to be analysing your code and sharing Python \ud83d\udc0d tips. https://t.co/2CdOwgQIB6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaL-e8kXwAErn39.jpg\"]",
            "tweet_conversation_id": "1559088230666063872",
            "tweet_type": "Python tips",
            "created_at": "2022-08-15T08:02:55.000Z"
        },
        {
            "id": 2042,
            "username": "mathsppblog",
            "tweet_id": "1558800130467368961",
            "tweet_text": "The Python \ud83d\udc0d built-in `set` has many common set operations.\n\nThe set difference is represented with `-`:\n\n`C = setA - setB`\n\nC contains the items of A that are not in B.\n\nAn example: https://t.co/e1Zx0cRKVE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaH4dNrXwAEsaeH.jpg\"]",
            "tweet_conversation_id": "1558800130467368961",
            "tweet_type": "Python tips",
            "created_at": "2022-08-14T12:58:06.000Z"
        },
        {
            "id": 2043,
            "username": "mathsppblog",
            "tweet_id": "1558799885616484352",
            "tweet_text": "The Python \ud83d\udc0d built-in `set` has many common set operations.\n\nThe set difference is represented with `-`:\n\n`C = setA - setB`\n\nC contains the items of A that are not in B.\n\nAn example: https://t.co/3aK04z3aXM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaH4O_UWIAMYzqP.jpg\"]",
            "tweet_conversation_id": "1558799885616484352",
            "tweet_type": "Python tips",
            "created_at": "2022-08-14T12:57:08.000Z"
        },
        {
            "id": 2044,
            "username": "mathsppblog",
            "tweet_id": "1558528083912712193",
            "tweet_text": "Python \ud83d\udc0d defines many useful constants in the module `string`.\n\nIf you ever need the Latin alphabet, use it! https://t.co/1KtGaSakDD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaEBCBiX0AAsL_n.jpg\"]",
            "tweet_conversation_id": "1558528083912712193",
            "tweet_type": "Python tips",
            "created_at": "2022-08-13T18:57:05.000Z"
        },
        {
            "id": 2045,
            "username": "mathsppblog",
            "tweet_id": "1558350164108115970",
            "tweet_text": "Do you know any other ridiculous ways of creating a string with the alphabet?\n\nIf you do, share them above!\n\nLet's see who can figure out the weirdest one of them all!\n\nI owe this one to @ZechCodes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558350162199777281",
            "tweet_type": "Others",
            "created_at": "2022-08-13T07:10:06.000Z"
        },
        {
            "id": 2046,
            "username": "mathsppblog",
            "tweet_id": "1558350162199777281",
            "tweet_text": "One of the reasons why I love Python \ud83d\udc0d is...\n\nIt makes my life easy!\n\nI can be lazy all I want!\n\nFor example, why would I write down the 26 letters of the latin alphabet...\n\nWhen I can just tell Python to compute them for me! \ud83e\udd21 https://t.co/IEAMdSGSpp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaBfNomWAAEnFXU.jpg\"]",
            "tweet_conversation_id": "1558350162199777281",
            "tweet_type": "Python tips",
            "created_at": "2022-08-13T07:10:06.000Z"
        },
        {
            "id": 2047,
            "username": "mathsppblog",
            "tweet_id": "1558272442845609984",
            "tweet_text": "It makes me very happy to see so many folks deriving value from this packaging article! https://t.co/wjyEXVmXJO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558272442845609984",
            "tweet_type": "Others",
            "created_at": "2022-08-13T02:01:16.000Z"
        },
        {
            "id": 2048,
            "username": "mathsppblog",
            "tweet_id": "1558171992586702849",
            "tweet_text": "Python \ud83d\udc0d f-strings can be parametrised.\n\nDid you know that?\n\nThis is useful, for example, when you want to align a bunch of values...\n\nBut you need to compute the width dynamically!\n\nHere is an example with values in a column. https://t.co/BN9Qto82wU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ-9KwMWIAEyoNs.jpg\"]",
            "tweet_conversation_id": "1558171992586702849",
            "tweet_type": "Python tips",
            "created_at": "2022-08-12T19:22:07.000Z"
        },
        {
            "id": 2049,
            "username": "mathsppblog",
            "tweet_id": "1558086688538333186",
            "tweet_text": "Are you familiar with Python \ud83d\udc0d f-strings?\n\nWhen using f-strings, you can specify a fixed-width field, and you can align your data inside it.\n\nHere are the three alignment options:\n\n - left;\n - centre; and\n - right. https://t.co/xV1j1d5N5V",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ9vlcXWYAM0bd5.jpg\"]",
            "tweet_conversation_id": "1558086688538333186",
            "tweet_type": "Python tips",
            "created_at": "2022-08-12T13:43:09.000Z"
        },
        {
            "id": 2050,
            "username": "mathsppblog",
            "tweet_id": "1557625402729893888",
            "tweet_text": "My function returns a \u201cmatrix\u201d as a list of lists.\n\nYou can also return a NumPy matrix.\n\nI'm using the auxiliary function `print_grid` to print it decently.\n\nIf you want, you can use the function `print_grid`, included below.\n(The code is in the ALT text of the image.) https://t.co/yPjwpLOO2F",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ3MC_aXwAA-JaF.jpg\"]",
            "tweet_conversation_id": "1557625401031233536",
            "tweet_type": "Others",
            "created_at": "2022-08-11T07:10:09.000Z"
        },
        {
            "id": 2051,
            "username": "mathsppblog",
            "tweet_id": "1557625401031233536",
            "tweet_text": "Here is a Python \ud83d\udc0d algorithm challenge for you.\n\nYour task is to implement a function `involute` that produces the pattern shown below.\n\nIt's the pattern of a \u201cspiral of integers\u201d \ud83d\udc47\n\nReply with your code and then I'll write a comparison of all submissions. https://t.co/6Wybp1CDhn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ3MCXiXgAEYbCp.jpg\"]",
            "tweet_conversation_id": "1557625401031233536",
            "tweet_type": "Python tips",
            "created_at": "2022-08-11T07:10:09.000Z"
        },
        {
            "id": 2052,
            "username": "mathsppblog",
            "tweet_id": "1557370604059348992",
            "tweet_text": "The module `bisect` has four more methods: `bisect_left`, `bisect_right`, `insort_left`, and `insort_right`...\n\nThe `_left` and `_right` where to place ties (elements that are equal).\n\nThe methods `bisect` and `insort` match their `_right` variants.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557367701252734976",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:17:41.000Z"
        },
        {
            "id": 2053,
            "username": "mathsppblog",
            "tweet_id": "1557367703052115968",
            "tweet_text": "The function `bisect` tells you where a value _would_ go...\n\nBut if you want to insert it, `bisect` can also do that for you!\n\nJust use the method `insort` \ud83d\udc47 https://t.co/zKNPLvkvpW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZzhq4gXgAAEu8g.jpg\"]",
            "tweet_conversation_id": "1557367701252734976",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:06:09.000Z"
        },
        {
            "id": 2054,
            "username": "mathsppblog",
            "tweet_id": "1557367701252734976",
            "tweet_text": "Are you familiar with the module `bisect` from the Python \ud83d\udc0d standard library?\n\nIt is a small module to help you work with sorted lists.\n\nIf you have a sorted list and a new value, you can find the index where the new value would go \ud83d\udc47 https://t.co/rSR4tVT0va",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZzhqMcXgAACBt9.jpg\"]",
            "tweet_conversation_id": "1557367701252734976",
            "tweet_type": "Python tips",
            "created_at": "2022-08-10T14:06:09.000Z"
        },
        {
            "id": 2055,
            "username": "mathsppblog",
            "tweet_id": "1557327952634855426",
            "tweet_text": "Have you heard of floating point errors?\n\nThey can be a nuisance!\n\nIn Python \ud83d\udc0d, you can get around them by making use of `fractions.Fraction`!\n\nHere is a simple example \ud83d\udc47 https://t.co/lPa9HMuGQa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZy9hNbXkAQZg1h.jpg\"]",
            "tweet_conversation_id": "1557327952634855426",
            "tweet_type": "Python tips",
            "created_at": "2022-08-10T11:28:12.000Z"
        },
        {
            "id": 2056,
            "username": "mathsppblog",
            "tweet_id": "1557005070235058177",
            "tweet_text": "Did you know that Python \ud83d\udc0d 3.10 introduced the keyword argument `strict` in `zip`?\n\nIf your iterables _should_ have the same length, you can signal so with `strict=True`.\n\nThis makes it so that a `ValueError` is raised if the iterables have different lengths: https://t.co/LaINx73pIL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZuX29MX0AMVRj7.jpg\"]",
            "tweet_conversation_id": "1557005070235058177",
            "tweet_type": "Python tips",
            "created_at": "2022-08-09T14:05:11.000Z"
        },
        {
            "id": 2057,
            "username": "mathsppblog",
            "tweet_id": "1556915962141708288",
            "tweet_text": "Here is a Python \ud83d\udc0d quiz for you!\n\nTake a look at the function `f` below.\n\nWhat is the result of `f(4, 3)`?\n\n(`f` only works on Python 3.10+ because of the match statement.)\n\n\ud83e\udd21 https://t.co/PPPn6FoEki",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZtG0MTXgAAQQc2.jpg\"]",
            "tweet_conversation_id": "1556915962141708288",
            "tweet_type": "Python tips",
            "created_at": "2022-08-09T08:11:06.000Z"
        },
        {
            "id": 2058,
            "username": "mathsppblog",
            "tweet_id": "1556707089099247622",
            "tweet_text": "Do you know how to use the second argument of `itertools.accumulate` in Python \ud83d\udc0d?\n\nThe second argument is a function that must accept two arguments.\n\nHere are examples of calling `accumulate` with different second arguments \ud83d\udc47\n\nCan you see what's happening? https://t.co/vxoKtlU1WL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZqI2K6WQAsBONH.jpg\"]",
            "tweet_conversation_id": "1556707089099247622",
            "tweet_type": "Python tips",
            "created_at": "2022-08-08T18:21:06.000Z"
        },
        {
            "id": 2059,
            "username": "mathsppblog",
            "tweet_id": "1556646444588847108",
            "tweet_text": "Python \ud83d\udc0d has a nice tool called `itertools.accumulate`.\n\nWhat does it do?\n\nIt accepts an iterable and returns partial sums lazily.\n\nIf you need all partial sums immediately, use `list`: https://t.co/3UskTOlyBY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZpRsL8WQAI07bP.jpg\"]",
            "tweet_conversation_id": "1556646444588847108",
            "tweet_type": "Python tips",
            "created_at": "2022-08-08T14:20:08.000Z"
        },
        {
            "id": 2060,
            "username": "mathsppblog",
            "tweet_id": "1556555349309767681",
            "tweet_text": "By this time tomorrow, 13,000 readers of the Mathspp Insider will get the full explanation in their inbox.\n\nIf you want to become a better programmer, you should subscribe too \ud83d\ude09\n\nhttps://t.co/DOWZZCN6Xa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556555347413852163",
            "tweet_type": "Others",
            "created_at": "2022-08-08T08:18:09.000Z"
        },
        {
            "id": 2061,
            "username": "mathsppblog",
            "tweet_id": "1556555347413852163",
            "tweet_text": "Did you know that the Python \ud83d\udc0d `functools.reduce` and `itertools.accumulate` are related?\n\nThis relationship may not be obvious at first...\n\n(Heck, they are in different modules!)\n\nBut once you see it, there is no going back.\n\nHere is a hint: https://t.co/qYDMOf1bC6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZn-1qlWQAA6IHz.jpg\"]",
            "tweet_conversation_id": "1556555347413852163",
            "tweet_type": "Python tips",
            "created_at": "2022-08-08T08:18:08.000Z"
        },
        {
            "id": 2062,
            "username": "mathsppblog",
            "tweet_id": "1555997661039321088",
            "tweet_text": "Do you know the pain of being in the Python \ud83d\udc0d REPL...\n\nYou write a huge expression, it takes a long time to run, and you forgot to assign the result?!\n\nHappens to me all the time \ud83d\ude05\n\nIn those cases, use `_` to recover the last result you got! https://t.co/Hro8JQ7sXZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZgDoArWAAA_Umw.jpg\"]",
            "tweet_conversation_id": "1555997661039321088",
            "tweet_type": "Python tips",
            "created_at": "2022-08-06T19:22:06.000Z"
        },
        {
            "id": 2063,
            "username": "mathsppblog",
            "tweet_id": "1555952866283720707",
            "tweet_text": "What is short-circuiting in programming?\n\nIt is when you have a binary logical operation that returns its value without checking the right side, because the result is already known.\n\nShort-circuiting can be really useful!\n\nHere is a Python \ud83d\udc0d example showing it in action: https://t.co/4sBUkdaS13",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZfa4m-XgAEs0gi.jpg\"]",
            "tweet_conversation_id": "1555952866283720707",
            "tweet_type": "Python tips",
            "created_at": "2022-08-06T16:24:06.000Z"
        },
        {
            "id": 2064,
            "username": "mathsppblog",
            "tweet_id": "1555866057314865152",
            "tweet_text": "The Python \ud83d\udc0d interpreter can run with the flag `-q`.\n\nCan you guess what it does?\n\n`q` stands for `quiet`, and if you start the REPL with `python -q`, it won't print the copyright and version info: https://t.co/xD5W9bVMtm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZeL7COXoAItDz0.jpg\", \"https://pbs.twimg.com/media/FZeL7tcXkAATQF9.png\"]",
            "tweet_conversation_id": "1555866057314865152",
            "tweet_type": "Python tips",
            "created_at": "2022-08-06T10:39:09.000Z"
        },
        {
            "id": 2065,
            "username": "mathsppblog",
            "tweet_id": "1555619924487426048",
            "tweet_text": "You can run your Python \ud83d\udc0d programs with the flag `-i`.\n\nWhat for?\n\nAfter the program runs, a REPL starts and you have access to all your script variables!\n\nAt this point, you can Interactively Inspect your program state.\n\n(That's what `-i` stands for.) https://t.co/H0jtBwrfSv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZasE2TXkAEn6SI.png\"]",
            "tweet_conversation_id": "1555619924487426048",
            "tweet_type": "Python tips",
            "created_at": "2022-08-05T18:21:06.000Z"
        },
        {
            "id": 2066,
            "username": "mathsppblog",
            "tweet_id": "1555560785207771138",
            "tweet_text": "You can run Python \ud83d\udc0d with the flag `-c` to run a short line of code directly.\n\nUseful if you are too lazy to drop into the REPL, run your code, and then exit!\n\nHere is a short example: https://t.co/ciuFkBraLA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZ2SiYX0AAbLmJ.jpg\"]",
            "tweet_conversation_id": "1555560785207771138",
            "tweet_type": "Python tips",
            "created_at": "2022-08-05T14:26:06.000Z"
        },
        {
            "id": 2067,
            "username": "mathsppblog",
            "tweet_id": "1555527834185129991",
            "tweet_text": "For a bonus tip, see @guilatrova 's tweet on a similar tip.\n\nHats off to @learn_byexample and @gjmos as well for some interesting follow-up remarks!\n\nhttps://t.co/8zDrVhC2Bf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555527830603239430",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:15:10.000Z"
        },
        {
            "id": 2068,
            "username": "mathsppblog",
            "tweet_id": "1555527832360701961",
            "tweet_text": "Using `in` is a great tip but it isn't always a suitable alternative!\n\nThe operator `or` short-circuits, which means it stops comparing as soon as it finds a `True`.\n\nThis isn't the case if you use `in` \ud83d\udc47 https://t.co/VqcRW6ImCB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZYUS-WYAAtyws.jpg\"]",
            "tweet_conversation_id": "1555527830603239430",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:15:10.000Z"
        },
        {
            "id": 2069,
            "username": "mathsppblog",
            "tweet_id": "1555527830603239430",
            "tweet_text": "Do you want to check if a Python \ud83d\udc0d variable matches one of several possible values?\n\nInstead of writing a big chain of `or` and equalities `==`, use the `in` operator! https://t.co/Xz6rCGwx7a",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZYTjyX0AA2yKa.jpg\"]",
            "tweet_conversation_id": "1555527830603239430",
            "tweet_type": "Python tips",
            "created_at": "2022-08-05T12:15:09.000Z"
        },
        {
            "id": 2070,
            "username": "mathsppblog",
            "tweet_id": "1555490199341334529",
            "tweet_text": "Pros vs Cons?\n\nCons: I don't love is the startup time of the software.\n\nPros:\n - the cameraman mode (the webcam follows me!)\n - the customisation options\n - I look great even with my terrible lighting setup\n\nHere's a link if you're interested \ud83d\udc47\n\nhttps://t.co/C63vNFaZRA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555490197311201281",
            "tweet_type": "Others",
            "created_at": "2022-08-05T09:45:37.000Z"
        },
        {
            "id": 2071,
            "username": "mathsppblog",
            "tweet_id": "1555490197311201281",
            "tweet_text": "The team at @get_lumina sent me their AI-powered webcam to try.\n\nI've been using it for the past 2 weeks and it's been a great experience.\n\nIt is now my default webcam.\n\nHere is an example video I recorded with the Lumina webcam \ud83d\udc47\nDon't I look good? \u2728\n\nhttps://t.co/DWJDL4w7wf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555490197311201281",
            "tweet_type": "Others",
            "created_at": "2022-08-05T09:45:37.000Z"
        },
        {
            "id": 2072,
            "username": "mathsppblog",
            "tweet_id": "1555478670990606340",
            "tweet_text": "Many have replied, talking about things like a frozen dataclass and a namedtuple!\n\nThanks a lot for all of your insights, those are great tools from the standard library...\n\nBut I was showing how to create an immutable object _from scratch_!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555088698512916480",
            "tweet_type": "Others",
            "created_at": "2022-08-05T08:59:49.000Z"
        },
        {
            "id": 2073,
            "username": "mathsppblog",
            "tweet_id": "1555088702279335936",
            "tweet_text": "Finally, to define the attributes we actually care about and to make those immutable...\n\nWe inherit from `tuple`, save the attributes as tuple values, and use properties to fetch them!\n\nHere is what the `Person` implementation looks like \ud83d\udc47\n\nQuite cool, right? https://t.co/3JE6yJRh9B",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZTI7dUX0AAXASC.jpg\"]",
            "tweet_conversation_id": "1555088698512916480",
            "tweet_type": "Others",
            "created_at": "2022-08-04T07:10:13.000Z"
        },
        {
            "id": 2074,
            "username": "mathsppblog",
            "tweet_id": "1555088700396244993",
            "tweet_text": "There are two key steps.\n\nThe first one is setting `__slots__` to the empty list `[]`.\n\nBy setting `__slots__` to the empty list, we make it so that no attributes can be assigned to our class: https://t.co/gIHwq3w7IH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZTI6sGWQAAOxsU.jpg\"]",
            "tweet_conversation_id": "1555088698512916480",
            "tweet_type": "Others",
            "created_at": "2022-08-04T07:10:12.000Z"
        },
        {
            "id": 2075,
            "username": "mathsppblog",
            "tweet_id": "1555088698512916480",
            "tweet_text": "How can you define an immutable object in Python \ud83d\udc0d?\n\nIt is not obvious, but it can be done.\n\nCome with me, let's create an immutable `Person` object \ud83d\ude80 https://t.co/DiiH4p3GqC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZTI6BqXEAAVb1v.jpg\"]",
            "tweet_conversation_id": "1555088698512916480",
            "tweet_type": "Python tips",
            "created_at": "2022-08-04T07:10:12.000Z"
        },
        {
            "id": 2076,
            "username": "mathsppblog",
            "tweet_id": "1554942740479328257",
            "tweet_text": "As a rule of thumb, `__repr__` should return a string that will let you know with 100% certainty what you are looking at.\n\nIdeally, it would be something you could copy &amp; paste to create a new, equal object of that same type.\n\nHere is an example of a good VS bad `__repr__`: https://t.co/Wemou8vOIe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZRELWHXEAAXUD7.jpg\"]",
            "tweet_conversation_id": "1554942737308426245",
            "tweet_type": "Others",
            "created_at": "2022-08-03T21:30:13.000Z"
        },
        {
            "id": 2077,
            "username": "mathsppblog",
            "tweet_id": "1554942739065749505",
            "tweet_text": "As you can see, `__str__` was called with `print`:\n\n`__str__` is used for the pretty representation of an object.\n\n`__repr__`, on the other hand, is used automatically when an object is inside containers.\n\n`__repr__` is supposed to be unambiguous and useful for debugging.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554942737308426245",
            "tweet_type": "Others",
            "created_at": "2022-08-03T21:30:13.000Z"
        },
        {
            "id": 2078,
            "username": "mathsppblog",
            "tweet_id": "1554942737308426245",
            "tweet_text": "The Python \ud83d\udc0d dunder methods `__str__` and `__repr__` are responsible for creating string versions of your objects.\n\nThey have different purposes, and that is why they are called in different situations.\n\nHere is a small example in the session \ud83d\udc47 https://t.co/HER9aL2Kbu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZREKdoXEAAPMin.jpg\"]",
            "tweet_conversation_id": "1554942737308426245",
            "tweet_type": "Python tips",
            "created_at": "2022-08-03T21:30:12.000Z"
        },
        {
            "id": 2079,
            "username": "mathsppblog",
            "tweet_id": "1554519661022269442",
            "tweet_text": "\u201cHuge difference in speed and readability!\u201d\n\nThat's what Jeremy wrote when they started using list comprehensions at their work.\n\nYou can write better \u2728 Python \ud83d\udc0d code like Jeremy!\n\nJust check out my ebook \u201cComprehending Comprehensions\u201d \ud83d\ude09\n\nhttps://t.co/3tfAXbSOat",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554519661022269442",
            "tweet_type": "Python tips",
            "created_at": "2022-08-02T17:29:03.000Z"
        },
        {
            "id": 2080,
            "username": "mathsppblog",
            "tweet_id": "1554363899079806976",
            "tweet_text": "Python \ud83d\udc0d indexing supports slicing with `[:]` and `[::]`...\n\nBut did you know you can create `slice` objects?\n\nYou can even name your slices! \ud83d\udc47 https://t.co/LZzHFc3NOn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZI1ukLWQAE3uMH.jpg\"]",
            "tweet_conversation_id": "1554363899079806976",
            "tweet_type": "Python tips",
            "created_at": "2022-08-02T07:10:06.000Z"
        },
        {
            "id": 2081,
            "username": "mathsppblog",
            "tweet_id": "1554233791023120389",
            "tweet_text": "Do you need to call a Python \ud83d\udc0d function over all combinations of some values?\n\nYou can do that with `starmap` and `product`, two tools from the module `itertools`.\n\nHere is an example: https://t.co/hLFyaFIMGa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZG_ZSTXoAI59sQ.jpg\"]",
            "tweet_conversation_id": "1554233791023120389",
            "tweet_type": "Python tips",
            "created_at": "2022-08-01T22:33:06.000Z"
        },
        {
            "id": 2082,
            "username": "mathsppblog",
            "tweet_id": "1554146275213320193",
            "tweet_text": "As a (Python \ud83d\udc0d) programmer, what areas of maths interest you the most?\n\nFor me, I love everything-graphs!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554146275213320193",
            "tweet_type": "Python tips",
            "created_at": "2022-08-01T16:45:21.000Z"
        },
        {
            "id": 2083,
            "username": "mathsppblog",
            "tweet_id": "1554026928918626305",
            "tweet_text": "Did you know Python \ud83d\udc0d has a matrix multiplication operator?\n\nIt was added in Python 3.5 and it is `@`.\n\nIt's just that built-in types do nothing with it \ud83e\udd37\n\nIf you want to use `@` with your own objects, just implement `__matmul__` / `__rmatmul__` / `__imatmul__`: https://t.co/BSH7Y7wWlf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZEDQWEX0AE-3va.jpg\"]",
            "tweet_conversation_id": "1554026928918626305",
            "tweet_type": "Python tips",
            "created_at": "2022-08-01T08:51:06.000Z"
        },
        {
            "id": 2084,
            "username": "mathsppblog",
            "tweet_id": "1553899303340576771",
            "tweet_text": "Do you use VS Code in your Python \ud83d\udc0d programming?\n\nI just discovered that you can CTRL + click on multiple locations to edit multiple locations at the same time!\n\n@vscodetips, how about that? https://t.co/17Yvy71jNn",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1553898834404728832/pu/vid/1280x720/HxKeWXjS6pwSAPlv.mp4?tag=12\"]",
            "tweet_conversation_id": "1553899303340576771",
            "tweet_type": "Python tips",
            "created_at": "2022-08-01T00:23:58.000Z"
        },
        {
            "id": 2085,
            "username": "mathsppblog",
            "tweet_id": "1553688194977243139",
            "tweet_text": "Python \ud83d\udc0d has the built-in type `bytearray`.\n\nIt's just like the type `bytes`, but it's mutable.\n\nHave you ever used it for something? https://t.co/wUJXvBTTW2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY_PLcEWQAMXhVd.jpg\"]",
            "tweet_conversation_id": "1553688194977243139",
            "tweet_type": "Python tips",
            "created_at": "2022-07-31T10:25:06.000Z"
        },
        {
            "id": 2086,
            "username": "mathsppblog",
            "tweet_id": "1553644134103146496",
            "tweet_text": "Thank you so much for your support!\n\nLet's gooo \ud83d\ude80 https://t.co/CJavRSzLDH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553644134103146496",
            "tweet_type": "Others",
            "created_at": "2022-07-31T07:30:01.000Z"
        },
        {
            "id": 2087,
            "username": "mathsppblog",
            "tweet_id": "1553550507251306497",
            "tweet_text": "I still have to work on the 5 chapters missing.\n\nHere is what the ToC looks like, so far \ud83d\udc47 https://t.co/zFC4r3ZzAq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY9R7wWXoAIy5fH.png\", \"https://pbs.twimg.com/media/FY9R8hsWQAMSbAn.png\"]",
            "tweet_conversation_id": "1551336014651834368",
            "tweet_type": "Others",
            "created_at": "2022-07-31T01:17:59.000Z"
        },
        {
            "id": 2088,
            "username": "mathsppblog",
            "tweet_id": "1553550058628472832",
            "tweet_text": "It's past 2am here and my brain is essentially asleep.\n\nEven though I had the 100+ tweets from my series, I decided I'd rewrite the explanations and create even more exercises...\n\nSo, that means today I was only able to have 8 out of 13 chapters out.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551336014651834368",
            "tweet_type": "Others",
            "created_at": "2022-07-31T01:16:12.000Z"
        },
        {
            "id": 2089,
            "username": "mathsppblog",
            "tweet_id": "1553452511473844225",
            "tweet_text": "@PyOhio Done! Thanks to everyone \n\nHere are the relevant links:\n\n\ud83e\uddd1\u200d\ud83d\udcbb the slides: https://t.co/vxPbokoEKg\n\n\ud83d\udcfd\ufe0f video recording: https://t.co/DWJDL4w7wf\n\n\ud83d\udcd6 the book: https://t.co/3tfAXbSOat",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553397095540965378",
            "tweet_type": "Others",
            "created_at": "2022-07-30T18:48:35.000Z"
        },
        {
            "id": 2090,
            "username": "mathsppblog",
            "tweet_id": "1553425952063066113",
            "tweet_text": "@PyOhio @jugmac00 \ud83d\udcfd\ufe0f\ud83d\udd34\n\nI'll be ON in 30 minutes: https://t.co/2fkskw8B9V",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553397095540965378",
            "tweet_type": "Others",
            "created_at": "2022-07-30T17:03:02.000Z"
        },
        {
            "id": 2091,
            "username": "mathsppblog",
            "tweet_id": "1553397095540965378",
            "tweet_text": "It's happening! @PyOhio is happening right now.\n\nI'll be ON in two and a half hours at this link: https://t.co/2fkskw8B9V\n\nMeanwhile, catch some of the other talks at https://t.co/QltE9DUlTy\n\n@jugmac00's was my favourite so far, settling the debate on the % of codecov to aim for. https://t.co/PxOlM1F4Xk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY7GYViWAAAhafJ.jpg\"]",
            "tweet_conversation_id": "1553397095540965378",
            "tweet_type": "Others",
            "created_at": "2022-07-30T15:08:22.000Z"
        },
        {
            "id": 2092,
            "username": "mathsppblog",
            "tweet_id": "1553343282054397954",
            "tweet_text": "Later today I'll be speaking at @PyOhio, helping you get your black belt in comprehension-fu.\n\nI put up a whole performance just for you, but I need your feedback after you watch it!\n\nWill I see you there? There is still time to register (for free!) :)\n\nHere is a sneak peek \ud83d\udc47 https://t.co/1s0rOmroBL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY6VebTWIAEv4O2.jpg\", \"https://pbs.twimg.com/media/FY6VekoWIAI33ok.jpg\", \"https://pbs.twimg.com/media/FY6VevBXoAAQYDq.jpg\", \"https://pbs.twimg.com/media/FY6Ve4oWQAEDgeW.jpg\"]",
            "tweet_conversation_id": "1553343282054397954",
            "tweet_type": "Others",
            "created_at": "2022-07-30T11:34:32.000Z"
        },
        {
            "id": 2093,
            "username": "mathsppblog",
            "tweet_id": "1553298722062229504",
            "tweet_text": "Hey there \ud83d\udc4b,\n\nI'm Rodrigo, a Python \ud83d\udc0d aficionado and an indie author.\n\nFollow me if you are interested in:\n\n\ud83d\udc0d Python\n\ud83d\udc40 Learning in public\n\ud83d\udc0d Python\n\ud83e\udde0 Mathematics\n\ud83d\udc0d Python\n\nOh, and sometimes, I also tweet about Python \ud83d\udc0d!\n\nI'll see you around \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553298722062229504",
            "tweet_type": "Python tips",
            "created_at": "2022-07-30T08:37:28.000Z"
        },
        {
            "id": 2094,
            "username": "mathsppblog",
            "tweet_id": "1553054269250715651",
            "tweet_text": "Btw, if you know of any crazy and wild list comprehensions, send them to me and I'll include them in the \u201cDo not try this at home\u201d chapter \ud83d\ude02\ud83d\ude09\n\nAnd while you're at it, get the book here \u2192 https://t.co/s0RpceMxf2\n\nJust crossed 40 pre-sales! \u2764\ufe0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553054266012712960",
            "tweet_type": "Others",
            "created_at": "2022-07-29T16:26:06.000Z"
        },
        {
            "id": 2095,
            "username": "mathsppblog",
            "tweet_id": "1553054266012712960",
            "tweet_text": "It's not an exciting screenshot, but here is a screenshot of the table of contents of the \u201cComprehending Comprehensions\u201d ebook.\n\nMany of you asked for it, and I obliged! \ud83d\udc47\n\nThese are the top-level chapters. https://t.co/Y2XEq7eE4Q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY2OHGdXkAMEqGO.jpg\"]",
            "tweet_conversation_id": "1553054266012712960",
            "tweet_type": "Others",
            "created_at": "2022-07-29T16:26:06.000Z"
        },
        {
            "id": 2096,
            "username": "mathsppblog",
            "tweet_id": "1553008991445422082",
            "tweet_text": "Generator expressions are a very powerful Python \ud83d\udc0d feature.\n\nLuckily for you, I teach you about this in the ebook I am releasing tomorrow! \ud83d\ude09\n\nIt's 40% off until tomorrow.\n\nhttps://t.co/iXEdzLpmta",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553008987800571904",
            "tweet_type": "Python tips",
            "created_at": "2022-07-29T13:26:11.000Z"
        },
        {
            "id": 2097,
            "username": "mathsppblog",
            "tweet_id": "1553008989683818501",
            "tweet_text": "You are also likely to find this pattern with generator expressions, which are more common than `filter`.\n\nIn that case, you just need to make sure to parenthesise the generator expression: https://t.co/7ZOJjiFOAL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1lcWrXkAAYTF-.jpg\"]",
            "tweet_conversation_id": "1553008987800571904",
            "tweet_type": "Others",
            "created_at": "2022-07-29T13:26:11.000Z"
        },
        {
            "id": 2098,
            "username": "mathsppblog",
            "tweet_id": "1553008987800571904",
            "tweet_text": "The Python \ud83d\udc0d built-in `next` fetches the next value of a generator.\n\nThis is useful, for example, to fetch the first element that satisfies a condition.\n\nBut, if no values satisfy the restriction, `next` raises an error!\n\nYou can use the 2nd argument to provide a default value. https://t.co/i4iqj8cdoe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1lbjsWIAEy4hK.jpg\"]",
            "tweet_conversation_id": "1553008987800571904",
            "tweet_type": "Python tips",
            "created_at": "2022-07-29T13:26:10.000Z"
        },
        {
            "id": 2099,
            "username": "mathsppblog",
            "tweet_id": "1552761099111522304",
            "tweet_text": "I knew this, but I had forgotten it!\n\nI stumbled upon this when working on my comprehensions ebook, \u201cComprehending Comprehensions\u201d.\n\nDo you think this should be explained in the book?\n\nhttps://t.co/iXEdzLpmta",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552761097215696896",
            "tweet_type": "Others",
            "created_at": "2022-07-28T21:01:09.000Z"
        },
        {
            "id": 2100,
            "username": "mathsppblog",
            "tweet_id": "1552761097215696896",
            "tweet_text": "The Python \ud83d\udc0d built-in `map` doesn't get much love nowadays...\n\nI'd say, mainly because of list comprehensions...\n\nBut `map` is awesome!\n\nDid you know it can take multiple iterables, and it fetches an argument from each iterable? https://t.co/lL3DPr3YTb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYyD_PIWAAYswHM.jpg\"]",
            "tweet_conversation_id": "1552761097215696896",
            "tweet_type": "Python tips",
            "created_at": "2022-07-28T21:01:09.000Z"
        },
        {
            "id": 2101,
            "username": "mathsppblog",
            "tweet_id": "1552726215039062023",
            "tweet_text": "Lots of people want to know how to create Python \ud83d\udc0d packages, which is awesome!\n\nI wrote a question on Stack Overflow and answered it myself with the findings of my latest article.\n\nI hope this serves many of you.\n\nhttps://t.co/70VKv4PvHE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552726215039062023",
            "tweet_type": "Python tips",
            "created_at": "2022-07-28T18:42:32.000Z"
        },
        {
            "id": 2102,
            "username": "mathsppblog",
            "tweet_id": "1552647442943787009",
            "tweet_text": "Internet fame doesn't last long! Look at me, at the #10 spot now :P\n\nFor those interested, the article linked is this one: https://t.co/qfI0vGfxjq\n\nIf you want to stay up to date with the stuff I write, you should check out Mathspp Insider: https://t.co/6qSQvHbcHC https://t.co/0R4zhoTtdh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYwb0XzUEAQoL5o.png\"]",
            "tweet_conversation_id": "1552540755092185088",
            "tweet_type": "Others",
            "created_at": "2022-07-28T13:29:31.000Z"
        },
        {
            "id": 2103,
            "username": "mathsppblog",
            "tweet_id": "1552545291026530310",
            "tweet_text": "I am so excited to be speaking at the VERY FIRST PYCON in Portugal, my home country!\n\nWill I see you there? https://t.co/FYyVfn5Ka9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552545291026530310",
            "tweet_type": "Others",
            "created_at": "2022-07-28T06:43:36.000Z"
        },
        {
            "id": 2104,
            "username": "mathsppblog",
            "tweet_id": "1552545209703096322",
            "tweet_text": "Someone pinch me, the internet is being nice?\n\n\u201cThis is really nicely written; kudos to the author for compiling a great deal of information in a readable format.\u201d\n\n\u201cdelivered as promised!\u201d\n\n\u201cVery well written , thanks!!\u201d\n\n\u201cExcellent and very informative post\u201d\n\n\ud83d\ude0a\ud83d\ude33",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552540755092185088",
            "tweet_type": "Others",
            "created_at": "2022-07-28T06:43:17.000Z"
        },
        {
            "id": 2105,
            "username": "mathsppblog",
            "tweet_id": "1552540755092185088",
            "tweet_text": "Look who made it to the front page of Hacker News \ud83d\ude1b https://t.co/g8VaCho6zh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYu7fVlWQAIacRy.png\"]",
            "tweet_conversation_id": "1552540755092185088",
            "tweet_type": "Others",
            "created_at": "2022-07-28T06:25:35.000Z"
        },
        {
            "id": 2106,
            "username": "mathsppblog",
            "tweet_id": "1552478613664055296",
            "tweet_text": "Take a look at this article if you want to know about all the dunder methods that Python has. https://t.co/UWvN7RiIyq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552478613664055296",
            "tweet_type": "Others",
            "created_at": "2022-07-28T02:18:39.000Z"
        },
        {
            "id": 2107,
            "username": "mathsppblog",
            "tweet_id": "1552302428753641477",
            "tweet_text": "I'll wrap this up for now.\n\nI took this whole thread and wrote it down, more thoroughly, in an article.\n\nFeel free to bookmark that article and use it as a reference!\n\nhttps://t.co/qfI0vFXWrS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-27T14:38:34.000Z"
        },
        {
            "id": 2108,
            "username": "mathsppblog",
            "tweet_id": "1552299266999197702",
            "tweet_text": "I got some cool badges there!\n\nI gotta say, this was one of THE most satisfying steps of the whole thing! https://t.co/QdDg7OyBz4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYq26bUWIAYMkAG.jpg\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-27T14:26:00.000Z"
        },
        {
            "id": 2109,
            "username": "mathsppblog",
            "tweet_id": "1552252388974755845",
            "tweet_text": "How do you create a Python \ud83d\udc0d package?\n\nHow to publish it? How to set up CI/CD?\n\nHow do you check code coverage?\n\nMost importantly, how do you add those cute badges to your README file?\n\nI was writing a thread on this, now I turned it into an article \ud83d\udc47\n\nhttps://t.co/qfI0vFXWrS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552252388974755845",
            "tweet_type": "Python tips",
            "created_at": "2022-07-27T11:19:43.000Z"
        },
        {
            "id": 2110,
            "username": "mathsppblog",
            "tweet_id": "1552041848226578433",
            "tweet_text": "Python \ud83d\udc0d has `functools.partial` that lets you \u201cfreeze\u201d arguments to functions.\n\nFor example, want to create a function that reads binary strings and converts to integers?\n\nFreeze the argument `base` in the built-in `int`: https://t.co/sQL122UYnL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYn11ahWQAEJ-Y_.jpg\"]",
            "tweet_conversation_id": "1552041848226578433",
            "tweet_type": "Python tips",
            "created_at": "2022-07-26T21:23:06.000Z"
        },
        {
            "id": 2111,
            "username": "mathsppblog",
            "tweet_id": "1551906549551042560",
            "tweet_text": "The Python \ud83d\udc0d book \u201cComprehending Comprehensions\u201d will be out this Saturday!\n\nIt covers:\n\n - list comprehensions (simple, nested, common use cases, ...)\n - set and dict comprehensions\n - generator expressions\n - and more!\n\nGet it now for 40% off \ud83d\ude09\n\nhttps://t.co/3tfAXbSOat https://t.co/ZWrjU6rNTj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYl6MfZXkAEysaH.jpg\"]",
            "tweet_conversation_id": "1551906549551042560",
            "tweet_type": "Python tips",
            "created_at": "2022-07-26T12:25:29.000Z"
        },
        {
            "id": 2112,
            "username": "mathsppblog",
            "tweet_id": "1551683743139627010",
            "tweet_text": "Here's a neat trick for your Python \ud83d\udc0d classes.\n\nWhen defining `__repr__`, you can use:\n\n - `type(self).__name__` to get the string name of your class; and\n - use `vars(self).values()` to access all the attributes of the instance.\n\nAnd it works neatly for subclasses! \ud83d\udc47 https://t.co/wIgT3eYH05",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYiwI7FX0AE63E_.jpg\"]",
            "tweet_conversation_id": "1551683743139627010",
            "tweet_type": "Python tips",
            "created_at": "2022-07-25T21:40:07.000Z"
        },
        {
            "id": 2113,
            "username": "mathsppblog",
            "tweet_id": "1551570050787774464",
            "tweet_text": "Am I reaching the end of this whole endeavour?\n\nWhat else is there left to do?\n\nI am going to add a bunch of colourful badges to the README file... But is there anything left I should check / try to do?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T14:08:21.000Z"
        },
        {
            "id": 2114,
            "username": "mathsppblog",
            "tweet_id": "1551569664970571776",
            "tweet_text": "@codecov @coveragepy Of course I messed up the YAML syntax on my first try!\n\nBut look at that!\n\nGitHub Actions published to PyPI for me! Now you can get extendedjson 0.1.3 \ud83d\ude43 https://t.co/JIZp7tWtAx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYhILMtXkAIQzRo.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T14:06:49.000Z"
        },
        {
            "id": 2115,
            "username": "mathsppblog",
            "tweet_id": "1551561544860700672",
            "tweet_text": "@codecov @coveragepy The final step I want to go over is publishing automatically to PyPI.\n\nThankfully, I have seen example workflows that do this (and I'm sure there are actions out there that already do it!) but I want to do it by hand.\n\nSo, new workflow = new YAML file in .github/workflows...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T13:34:33.000Z"
        },
        {
            "id": 2116,
            "username": "mathsppblog",
            "tweet_id": "1551560198413762561",
            "tweet_text": "Ok, code coverage is back at 100%.\n\nNow I'll integrate with @codecov.\n\nI log in into their website, update the workflow, and that's it! I think... \u231b\n\nAnd yeah, I did it!\nI had to change @coveragepy to write the report as XML, but then it all worked. https://t.co/CJE4q518qz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYg_xXoXEAc-hAz.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T13:29:12.000Z"
        },
        {
            "id": 2117,
            "username": "mathsppblog",
            "tweet_id": "1551521160705327105",
            "tweet_text": "I have some CI set up, but I just noticed the checks passed and I only have 77% code coverage...\n\nI think I'll set code coverage to fail when under 100%...\n\nAnd then, I'll also integrate GH Actions with some nice code coverage tools! \u2728\n\nJust give me a second!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T10:54:05.000Z"
        },
        {
            "id": 2118,
            "username": "mathsppblog",
            "tweet_id": "1551510565545287681",
            "tweet_text": "So, in order to make sure tox knows what environments to run, I needed to add a `[gh-actions]` section to the file `tox.ini`.\n\nBut it was just a mapping of Python versions and environments \ud83d\udc47 https://t.co/EJiGM1CDaI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYgSoGGWIAA89Yl.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T10:11:59.000Z"
        },
        {
            "id": 2119,
            "username": "mathsppblog",
            "tweet_id": "1551510561678139392",
            "tweet_text": "But as I was writing this, one obvious advantage came to mind:\n\nGitHub Actions CI can run in parallel, so this is faster than letting tox go over all the Python environments successively.\n\nThis is also useful if we have other things to be done per each Python version.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T10:11:58.000Z"
        },
        {
            "id": 2120,
            "username": "mathsppblog",
            "tweet_id": "1551510559597727745",
            "tweet_text": "tox can make use of a plugin `tox-gh-actions` to only run specific environments from within the action, if I tell the action to run on multiple Python versions.\n\nAt first, I thought \u201cwhat's the point if tox already goes through the environments separately...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T10:11:57.000Z"
        },
        {
            "id": 2121,
            "username": "mathsppblog",
            "tweet_id": "1551509630806892545",
            "tweet_text": "I got some tests to run on GitHub Actions!\n\nI set it up so that CI runs when there are commits to the main branch or PRs against the main branch.\n\nThe first CI run was successful because it was not set up properly, so it was essentially a no-op \ud83e\udd23\n\nHere's why: https://t.co/UbQv2YfSdo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYgRhURWAAUBGzS.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T10:08:16.000Z"
        },
        {
            "id": 2122,
            "username": "mathsppblog",
            "tweet_id": "1551500148991295493",
            "tweet_text": "So, it looks like GitHub actions are defined in YAML files that live in the folder .github/workflows.\n\nLet me start with a `build.yml` file that will run `tox` and code coverage checks and whatnot.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T09:30:35.000Z"
        },
        {
            "id": 2123,
            "username": "mathsppblog",
            "tweet_id": "1551499987799969792",
            "tweet_text": "Alright, I'm finally finishing this off!\n\nI just want to add CI/CD to this with GitHub Actions.\n\nI'll be doing a lot of copying and pasting from projects that do similar things.\n\nI'll also use the GitHub Actions docs if needed.\n\nhttps://t.co/YKLs8zzOza\nhttps://t.co/jiX5p0VBy5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-07-25T09:29:57.000Z"
        },
        {
            "id": 2124,
            "username": "mathsppblog",
            "tweet_id": "1551336019357835265",
            "tweet_text": "I took all the feedback you folks gave me during this really long journey!\n\nI fixed and improved many exercises, and created even more exercises to cover all topics really well!\n\nThe book releases next Saturday, just in time for my @PyOhio talk on the same subject \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551336014651834368",
            "tweet_type": "Others",
            "created_at": "2022-07-24T22:38:24.000Z"
        },
        {
            "id": 2125,
            "username": "mathsppblog",
            "tweet_id": "1551336014651834368",
            "tweet_text": "Day 100/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nWe made it \ud83e\udd73\ud83c\udf89\ud83c\udf8a\n\nWe reached the end! And, with it, I'd like to announce my book on comprehending comprehensions!\n\n100+ exercises on all-things-comprehensions!\n\nAnd 40% OFF for now!!\n\nhttps://t.co/3tfAXbSOat https://t.co/4T7j2TuVzR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYdzPbkXgAEesNt.jpg\"]",
            "tweet_conversation_id": "1551336014651834368",
            "tweet_type": "Python tips",
            "created_at": "2022-07-24T22:38:22.000Z"
        },
        {
            "id": 2126,
            "username": "mathsppblog",
            "tweet_id": "1551166829816578050",
            "tweet_text": "Playing around with Python \ud83d\udc0d?\n\nNeed to inspect an instance of a custom object..?\n\nUse `vars`! It will show you the instance attributes and values. https://t.co/fR1Zwst0X8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYbaArIX0AAqyum.jpg\"]",
            "tweet_conversation_id": "1551166829816578050",
            "tweet_type": "Python tips",
            "created_at": "2022-07-24T11:26:06.000Z"
        },
        {
            "id": 2127,
            "username": "mathsppblog",
            "tweet_id": "1550947051852238856",
            "tweet_text": "Kudos to @gjmos for prompting me to tweet this and to @willmcgugan for teaching me this.\n\nThe other tweet about list comp speed:\n\nhttps://t.co/1ZMLf2sMvn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550946630546882560",
            "tweet_type": "Others",
            "created_at": "2022-07-23T20:52:47.000Z"
        },
        {
            "id": 2128,
            "username": "mathsppblog",
            "tweet_id": "1550946630546882560",
            "tweet_text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSome days ago I asked why list comprehensions tend to be faster than loops.\n\nThe experiment below shows that the fact that we explicitly call `lst.append` in the loop takes a LOT of time! https://t.co/xGWr8VRzw5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYYRvXkWYAgdTHM.jpg\"]",
            "tweet_conversation_id": "1550946630546882560",
            "tweet_type": "Python tips",
            "created_at": "2022-07-23T20:51:06.000Z"
        },
        {
            "id": 2129,
            "username": "mathsppblog",
            "tweet_id": "1550801755318910976",
            "tweet_text": "Only 2 days left!\n\nYou can get this bundle of Python \ud83d\udc0d books by me, @learn_byexample, @tw_lgiordani, and @driscollis for FREE!\n\nAfter you get the books, let us know your feedback \ud83d\udcaa\n\nhttps://t.co/W0lCU7u6qg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550801755318910976",
            "tweet_type": "Python tips",
            "created_at": "2022-07-23T11:15:25.000Z"
        },
        {
            "id": 2130,
            "username": "mathsppblog",
            "tweet_id": "1550617466149261312",
            "tweet_text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nToday I want to share two common patterns I use a lot:\n\n - using a list comprehension to draw many random numbers; and\n - using `sum` and a generator expression to count values.\n\nLet us roll a die: https://t.co/vWloKNWrvP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYTmXfCWQAYv0NC.jpg\"]",
            "tweet_conversation_id": "1550617466149261312",
            "tweet_type": "Python tips",
            "created_at": "2022-07-22T23:03:07.000Z"
        },
        {
            "id": 2131,
            "username": "mathsppblog",
            "tweet_id": "1550157668085628928",
            "tweet_text": "If three minutes and a half is too much for you, I also have a written version of the talk.\n\nYou can read it here:\n\nhttps://t.co/Gb45ookVQx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550157666537848832",
            "tweet_type": "Others",
            "created_at": "2022-07-21T16:36:03.000Z"
        },
        {
            "id": 2132,
            "username": "mathsppblog",
            "tweet_id": "1550157666537848832",
            "tweet_text": "Sadly, EuroPython 2022 is over.\n\nIt was my first (Python \ud83d\udc0d) conference in person and I absolutely loved it!\n\nNone of my talks got accepted, but I did give a lightning \u26a1 talk.\n\nIt was called \u201cSmoosh all the things\u201d.\n\nHere is the video recording:\n\nhttps://t.co/hYQ3X84R4E",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550157666537848832",
            "tweet_type": "Python tips",
            "created_at": "2022-07-21T16:36:02.000Z"
        },
        {
            "id": 2133,
            "username": "mathsppblog",
            "tweet_id": "1550063077915299840",
            "tweet_text": "Of course that this can be mixed and matched with the other built-ins I mentioned.\n\nWe can figure out who is:\n\n - the heaviest (Bob)\n - the lightest (Charles)\n - the tallest (Diana)\n - the shortest (Alice) https://t.co/r7CE5AblpL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYLuJusXwAElaj6.jpg\"]",
            "tweet_conversation_id": "1550063076015329281",
            "tweet_type": "Others",
            "created_at": "2022-07-21T10:20:11.000Z"
        },
        {
            "id": 2134,
            "username": "mathsppblog",
            "tweet_id": "1550063076015329281",
            "tweet_text": "The Python \ud83d\udc0d built-ins `sorted`, `max`, and `min`, all accept a keyword argument `key`.\n\nThis `key` functions lets you determine how things are ordered.\n\nThis is useful when **not** ordering numbers directly.\n\nHere is an example where we find the heaviest person in a list: https://t.co/VuKNprNCXe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYLuI8CXgAIw4o9.jpg\"]",
            "tweet_conversation_id": "1550063076015329281",
            "tweet_type": "Python tips",
            "created_at": "2022-07-21T10:20:10.000Z"
        },
        {
            "id": 2135,
            "username": "mathsppblog",
            "tweet_id": "1549820756615372804",
            "tweet_text": "What's a Python \ud83d\udc0d dunder method you have been trying to learn?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549820756615372804",
            "tweet_type": "Python tips",
            "created_at": "2022-07-20T18:17:17.000Z"
        },
        {
            "id": 2136,
            "username": "mathsppblog",
            "tweet_id": "1549118845591474177",
            "tweet_text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nYou verify that list comprehensions are faster than loops (in general).\n\nJust take a look at the timing results below, obtained with `python -m timeit`.\n\nBut why are list comps faster..? https://t.co/kGQwKvZ0o0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FX-TYRsXwAIxWIX.jpg\"]",
            "tweet_conversation_id": "1549118845591474177",
            "tweet_type": "Python tips",
            "created_at": "2022-07-18T19:48:08.000Z"
        },
        {
            "id": 2137,
            "username": "mathsppblog",
            "tweet_id": "1548685197746511873",
            "tweet_text": "I wrote an explanation of how this works here:\n\nhttps://t.co/oxaAFgPOeq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548657801144291329",
            "tweet_type": "Others",
            "created_at": "2022-07-17T15:04:58.000Z"
        },
        {
            "id": 2138,
            "username": "mathsppblog",
            "tweet_id": "1548657803115495425",
            "tweet_text": "Credit to eztab on Reddit:\n\nhttps://t.co/ik0yGvWRwt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548657801144291329",
            "tweet_type": "Others",
            "created_at": "2022-07-17T13:16:07.000Z"
        },
        {
            "id": 2139,
            "username": "mathsppblog",
            "tweet_id": "1548657801144291329",
            "tweet_text": "Python \ud83d\udc0d is a really elegant language.\n\nAnd yet, it can also give birth to monstrosities like the one below.\n\nI recommend you take a sit before taking a look at the code...\n\nThe program below prints `\"Hello, world!\"` in Python 3.9+! https://t.co/fQTKBvVePe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FX3wD9HXgAAJwq7.jpg\"]",
            "tweet_conversation_id": "1548657801144291329",
            "tweet_type": "Python tips",
            "created_at": "2022-07-17T13:16:07.000Z"
        },
        {
            "id": 2140,
            "username": "mathsppblog",
            "tweet_id": "1548594377966108672",
            "tweet_text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSuppose you want to find an item (in a list, for example) that satisfies a condition.\n\nUsing `any`, `:=`, and a generator expression, you can find the first element that satisfies the condition: https://t.co/9rYuLN7C4Y",
            "tweet_media": "[\"https://pbs.twimg.com/media/FX22YRKXoAAv_MP.jpg\"]",
            "tweet_conversation_id": "1548594377966108672",
            "tweet_type": "Python tips",
            "created_at": "2022-07-17T09:04:05.000Z"
        },
        {
            "id": 2141,
            "username": "mathsppblog",
            "tweet_id": "1548368814848364545",
            "tweet_text": "I wrote a more verbose and detailed explanation of the horrendous (but intriguing) Python \ud83d\udc0d program that Ned shared a couple of days ago.\n\nIf you are unsure how this crazy program prints \u201cHello, world\u201d, give this a read!\n\nhttps://t.co/sFS9qPhgyh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1548368814848364545",
            "tweet_type": "Python tips",
            "created_at": "2022-07-16T18:07:47.000Z"
        },
        {
            "id": 2142,
            "username": "mathsppblog",
            "tweet_id": "1548218656122753026",
            "tweet_text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSay you have a collection.\n\nWith `all` and a generator expression it is easy to check if all values satisfy a condition.\n\nWith `:=`, you can also find the **first** item that does not satisfy your condition: https://t.co/15DhuujNvU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXxgqSxUYAIvb2Z.jpg\"]",
            "tweet_conversation_id": "1548218656122753026",
            "tweet_type": "Python tips",
            "created_at": "2022-07-16T08:11:06.000Z"
        },
        {
            "id": 2143,
            "username": "mathsppblog",
            "tweet_id": "1547992195071762437",
            "tweet_text": "However, the built-in `next` accepts a second argument.\n\nThis second argument is the default value you get if `next` cannot grab a next item: https://t.co/KfiMtUY37d",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXuSsTAUYAIjqW_.jpg\"]",
            "tweet_conversation_id": "1547992190898515970",
            "tweet_type": "Others",
            "created_at": "2022-07-15T17:11:14.000Z"
        },
        {
            "id": 2144,
            "username": "mathsppblog",
            "tweet_id": "1547992193150754817",
            "tweet_text": "The only caveat to bear in mind is what happens if nothing satisfies the condition.\n\nIn that case, Python raises a `StopIteration` error: https://t.co/II82bvMA2f",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXuSropUIAMX8l2.jpg\"]",
            "tweet_conversation_id": "1547992190898515970",
            "tweet_type": "Others",
            "created_at": "2022-07-15T17:11:13.000Z"
        },
        {
            "id": 2145,
            "username": "mathsppblog",
            "tweet_id": "1547992190898515970",
            "tweet_text": "Bonus day of learning and practising Python \ud83d\udc0d list comprehensions!\n\nHere's a SUPER useful pattern with generator expressions:\n\nUse `next` and an `if` when you want the **first** object that satisfies a condition.\n\nLet's go \ud83d\ude80 https://t.co/CkTWzlqaCj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXuSq7IVUAUvw-r.jpg\"]",
            "tweet_conversation_id": "1547992190898515970",
            "tweet_type": "Python tips",
            "created_at": "2022-07-15T17:11:13.000Z"
        },
        {
            "id": 2146,
            "username": "mathsppblog",
            "tweet_id": "1547729770619711488",
            "tweet_text": "Bonus points: what's wrong with this code?\n\nThe code works fine for this case, but can you find an example of a bag of words for which the anagrams are wrongly computed? https://t.co/gJeY3ZCug6",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FXqkBNyUsAE14sd.mp4\"]",
            "tweet_conversation_id": "1547493884384710656",
            "tweet_type": "Others",
            "created_at": "2022-07-14T23:48:27.000Z"
        },
        {
            "id": 2147,
            "username": "mathsppblog",
            "tweet_id": "1547580286006751240",
            "tweet_text": "Really nice poster session by @fharper on the benefits of working on your personal brand as a developer!\n\nAnd the poster itself looks really cool! \ud83d\udc47 https://t.co/vwo3OltrOo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXocEVZVUAAWmML.jpg\"]",
            "tweet_conversation_id": "1547580286006751240",
            "tweet_type": "Others",
            "created_at": "2022-07-14T13:54:27.000Z"
        },
        {
            "id": 2148,
            "username": "mathsppblog",
            "tweet_id": "1547493884384710656",
            "tweet_text": "Day 99/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThis is the toughest exercise so far! I think..?\n\nThis code aggregates anagrams from a bag of words.\n\nLet's go \ud83d\ude80 https://t.co/J6zcVxf9OS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXnNfDpWAAABA3y.jpg\"]",
            "tweet_conversation_id": "1547493884384710656",
            "tweet_type": "Python tips",
            "created_at": "2022-07-14T08:11:07.000Z"
        },
        {
            "id": 2149,
            "username": "mathsppblog",
            "tweet_id": "1547228704455233542",
            "tweet_text": "Was at a discussion panel earlier, lots of interesting back and forth between the audience and the core members who replied to all the questions!\n\nNow it's time for @reuvenmlerner to tell me \"What happens when you import a module?\". https://t.co/9uoEvcGsKf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXjcToVXoAA2tsE.jpg\"]",
            "tweet_conversation_id": "1547144749219553283",
            "tweet_type": "Others",
            "created_at": "2022-07-13T14:37:23.000Z"
        },
        {
            "id": 2150,
            "username": "mathsppblog",
            "tweet_id": "1547171202497757184",
            "tweet_text": "Now it's time to learn a bit about packaging Python packages.\n\nWhat a horror story Vin\u00edcius just shared about dependencies that broke last minute! \ud83d\ude28\ud83d\ude31\n\n#EuroPython2022 https://t.co/AAtcmiLyV7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXinASvX0AA_Srt.jpg\"]",
            "tweet_conversation_id": "1547144749219553283",
            "tweet_type": "Others",
            "created_at": "2022-07-13T10:48:54.000Z"
        },
        {
            "id": 2151,
            "username": "mathsppblog",
            "tweet_id": "1547158798074351643",
            "tweet_text": "\u201cYou can also do bad things with a spoon, but people don't hate spoons...\nDon't quote me on that.\u201d\n\n\u2015 @pyblogsal",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547144749219553283",
            "tweet_type": "Others",
            "created_at": "2022-07-13T09:59:36.000Z"
        },
        {
            "id": 2152,
            "username": "mathsppblog",
            "tweet_id": "1547158241322434560",
            "tweet_text": "@europython When I started writing Python code, I remember error messages scared me a lot...\n\nI really appreciate the work that's being put in making these messages more accurate and easier to understand!\n\nThanks for the work &amp; the talk, @pyblogsal!\n\n#EuroPython2022 https://t.co/1ndNhq7Z3A",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXib0_3XkAosiqh.jpg\"]",
            "tweet_conversation_id": "1547144749219553283",
            "tweet_type": "Others",
            "created_at": "2022-07-13T09:57:24.000Z"
        },
        {
            "id": 2153,
            "username": "mathsppblog",
            "tweet_id": "1547146436541906945",
            "tweet_text": "@europython At the keynote \u201cPython's role in unlocking the secrets of the Universe with the James Webb Space Telescope\u201d by Dr. Patrick Kavanagh.\n\nHere's a quote from the talk:\n\n\u201cI have never given a Python talk before, so I'm not sure if I'm supposed to show Python code.\u201d\n\n#europython2022 https://t.co/EvvTsxom39",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXiQgX3WAAApjsx.jpg\"]",
            "tweet_conversation_id": "1547144749219553283",
            "tweet_type": "Others",
            "created_at": "2022-07-13T09:10:29.000Z"
        },
        {
            "id": 2154,
            "username": "mathsppblog",
            "tweet_id": "1547144749219553283",
            "tweet_text": "So stoked about all the @europython talks!\n\nTell no one, but I got to the opening session a couple minutes late \ud83d\ude14\n\nI love the \"happy to hug\", \"happy to handshake\", \"elbow bumps only\", and \"I like my distance\" stickers! https://t.co/41App1b46U",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXiP8gxXkAAPyJS.jpg\"]",
            "tweet_conversation_id": "1547144749219553283",
            "tweet_type": "Others",
            "created_at": "2022-07-13T09:03:47.000Z"
        },
        {
            "id": 2155,
            "username": "mathsppblog",
            "tweet_id": "1547131521575931904",
            "tweet_text": "Dictionary comprehensions work in the same way as list comprehensions.\n\nHowever, instead of a single value on the left, you have three things:\n\n - an expression to build the key;\n - a colon `:`; and\n - an expression to build the value.\n\nHere are some examples: https://t.co/vGp1tddkzd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXiD6s0XgAEU14v.jpg\"]",
            "tweet_conversation_id": "1547131519826903041",
            "tweet_type": "Others",
            "created_at": "2022-07-13T08:11:13.000Z"
        },
        {
            "id": 2156,
            "username": "mathsppblog",
            "tweet_id": "1547131519826903041",
            "tweet_text": "Day 98/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThere is one other comprehension you haven't met...\n\nIt also uses `{}` instead of `[]`.\n\nCan you guess what it is..?\n\nI'm talking about dictionary comprehensions, that build dictionaries instead of lists! https://t.co/VV35fhzAzR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXiD5_hXkAE9qIT.jpg\"]",
            "tweet_conversation_id": "1547131519826903041",
            "tweet_type": "Python tips",
            "created_at": "2022-07-13T08:11:13.000Z"
        },
        {
            "id": 2157,
            "username": "mathsppblog",
            "tweet_id": "1546958857666269184",
            "tweet_text": "Day 97/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nHere are some exercises on set comprehensions!\n\nAgain: set comprehensions are JUST like list comprehensions...\n\nBut they start and end with `{}` instead of `[]`!\n\nLet's go \ud83d\ude80 https://t.co/4fNicTuunp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXfm4aOXkAAToHN.jpg\"]",
            "tweet_conversation_id": "1546958857666269184",
            "tweet_type": "Python tips",
            "created_at": "2022-07-12T20:45:07.000Z"
        },
        {
            "id": 2158,
            "username": "mathsppblog",
            "tweet_id": "1546868508864151557",
            "tweet_text": "Python \ud83d\udc0d has some objects with really cool custom string formatting!\n\nFor example, `datetime.datetime`!\n\nHere's a nice example \ud83d\udc47\n\nThanks, @puppy_ninja! https://t.co/tpJA2ckfqW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXeUtdgXgAMAGs5.png\"]",
            "tweet_conversation_id": "1546868508864151557",
            "tweet_type": "Python tips",
            "created_at": "2022-07-12T14:46:06.000Z"
        },
        {
            "id": 2159,
            "username": "mathsppblog",
            "tweet_id": "1546859920842170380",
            "tweet_text": "And last, but not least, the link to The Indie Python Extravaganza bundle on @leanpub , free for the duration of the @europython conference!\n\nThis bundle has books by me, @tw_lgiordani, @driscollis, @learn_byexample \ud83d\udc4d\n\nhttps://t.co/W0lCU7u6qg https://t.co/2q1GaW82Xs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXeMw4DWAAIuG4T.jpg\"]",
            "tweet_conversation_id": "1546859914592665607",
            "tweet_type": "Others",
            "created_at": "2022-07-12T14:11:59.000Z"
        },
        {
            "id": 2160,
            "username": "mathsppblog",
            "tweet_id": "1546859916765306880",
            "tweet_text": "The slides on GitHub \u2192 https://t.co/vxPbokoEKg\n\nThe tutorial will be available as a series of articles on my blog, of which there are 2 already:\n\n - https://t.co/staAVeck4o\n - https://t.co/IaX8vblpDc\n\nIf you attended, please give me feedback! \u2192 https://t.co/7AWZuBxdGC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546859914592665607",
            "tweet_type": "Others",
            "created_at": "2022-07-12T14:11:58.000Z"
        },
        {
            "id": 2161,
            "username": "mathsppblog",
            "tweet_id": "1546859914592665607",
            "tweet_text": "Another day at @europython!\n\nThe morning started with my tutorial \u201cPython objects under the hood\u201d!\n\nI had a lot of fun, so thanks for that!\n\nHere are the links to the slides and all the other resources \ud83d\udc47 https://t.co/MNF8Hj0Qf2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXeLotLXkAMoiDq.png\"]",
            "tweet_conversation_id": "1546859914592665607",
            "tweet_type": "Others",
            "created_at": "2022-07-12T14:11:57.000Z"
        },
        {
            "id": 2162,
            "username": "mathsppblog",
            "tweet_id": "1546503873933852674",
            "tweet_text": "@nedbat Obviously, the first class `Person` shouldn't be there.\n\nI copied it by mistake...\n\nhttps://t.co/x2f5vr5apW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546491779238739970",
            "tweet_type": "Others",
            "created_at": "2022-07-11T14:37:10.000Z"
        },
        {
            "id": 2163,
            "username": "mathsppblog",
            "tweet_id": "1546491779238739970",
            "tweet_text": "Yesterday, @nedbat tweeted a really weird piece of code and there was a lot to learn from there!\n\nString formatting is used very often in Python.\n\nDid you know you can implement formatting for your own objects as well?\n\nJust implement the dunder method `__format__` \ud83d\udc47 https://t.co/Y8eU4fBjNI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXY-E32WYAA1OwF.jpg\"]",
            "tweet_conversation_id": "1546491779238739970",
            "tweet_type": "Others",
            "created_at": "2022-07-11T13:49:07.000Z"
        },
        {
            "id": 2164,
            "username": "mathsppblog",
            "tweet_id": "1546481053556154368",
            "tweet_text": "Enjoying @europython a lot and it's just the first day!\n\nWent to the \u201cproperty-based testing with Hypothesis\u201d tutorial in the morning by @seifertm0, was GREAT! \ud83c\udf89\n\nNow at the TDD workshop by @tw_lgiordani.\n\n\u201cThis is the most important slide.\u201d\n\u2015 Leonardo\n\nBack to paying attention! https://t.co/VixdzGgvWo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXY0PTSXgAAVcwX.jpg\"]",
            "tweet_conversation_id": "1546481053556154368",
            "tweet_type": "Others",
            "created_at": "2022-07-11T13:06:30.000Z"
        },
        {
            "id": 2165,
            "username": "mathsppblog",
            "tweet_id": "1546409635174879232",
            "tweet_text": "Let the games begin!\n\nAlready jumped on @llanga, met @tw_lgiordani, the organiser team, and even people who are not on Twitter so I couldn't tag them \ud83d\ude02\n\nNote to self: buy the ticket on time so I get a nicely-printed badge next time! https://t.co/504K0oM1UY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXXzXWWX0AEEZTI.jpg\"]",
            "tweet_conversation_id": "1546409635174879232",
            "tweet_type": "Others",
            "created_at": "2022-07-11T08:22:42.000Z"
        },
        {
            "id": 2166,
            "username": "mathsppblog",
            "tweet_id": "1546256429429948416",
            "tweet_text": "So yeah, this was more or less my journey through unravelling what was going on.\n\nDid I do good, @nedbat?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T22:13:55.000Z"
        },
        {
            "id": 2167,
            "username": "mathsppblog",
            "tweet_id": "1546256179680133123",
            "tweet_text": "Of course, at this point, we are just using `__format__` as the setter for that property, so might as well define a setter properly. For the property.\n\nI properly set a setter for the property \ud83e\udd23\n\nOf course, at this point, the program isn't that crazy anymore. https://t.co/hWCSB4uKE5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXVntyPXgAAyjkj.jpg\"]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T22:12:55.000Z"
        },
        {
            "id": 2168,
            "username": "mathsppblog",
            "tweet_id": "1546255332300787712",
            "tweet_text": "The intricacy here is that we are using a closure so that \u201c.prop\u201d remembers what needs to be printed.\n\nBy using an auxiliary variable, we could define `prop` as a \u201cproper\u201d property \ud83d\udc47... https://t.co/GaHBPF0Hje",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXVnAEVX0AAnYpK.jpg\"]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T22:09:33.000Z"
        },
        {
            "id": 2169,
            "username": "mathsppblog",
            "tweet_id": "1546254676861255680",
            "tweet_text": "whenever we try to access `.prop`, we call that lambda.\n\nBut what does the lambda do..?\n\nIt prints the format `fmt` that was passed in to the dunder method `__format__`!\n\nWhich, in our code example, is \u201cHello, world!\u201d.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T22:06:57.000Z"
        },
        {
            "id": 2170,
            "username": "mathsppblog",
            "tweet_id": "1546254675044868096",
            "tweet_text": "Then, we set `C.prop` to `property(...)`.\n\n`property` is a built-in that is typically used as a decorator... But decorators are just syntactic sugar and they can be called directly \ud83e\udd37\n\nSo, the lambda inside is what becomes the property.\n\nIn other words, ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T22:06:57.000Z"
        },
        {
            "id": 2171,
            "username": "mathsppblog",
            "tweet_id": "1546253908372324352",
            "tweet_text": "Not sure if that is ALWAYS the case in situations with weird metaclasses or lots of inheritance, but in this simple case, they are the same thing.\n\nSo, `self.__class__` is just a way of accessing the original `C` class.\n\nBecause we have proper names, we can access it directly: https://t.co/JSPd5B31OK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXVls5EWIAALwy7.jpg\"]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T22:03:54.000Z"
        },
        {
            "id": 2172,
            "username": "mathsppblog",
            "tweet_id": "1546253562665209862",
            "tweet_text": "Now we need to understand what the line with `self.__class__.prop = ...` is doing.\n\nLet us start with the assignment target, `self.__class__.prop`.\n\n`self.__class__` is just the type of `self`, which is `C`.\n\nIn fact, `type(self)` and `self.__class__` are the same here.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T22:02:31.000Z"
        },
        {
            "id": 2173,
            "username": "mathsppblog",
            "tweet_id": "1546252659098787840",
            "tweet_text": "You can learn more about the details of how proper custom string formatting works in this article: https://t.co/hP3PkwBRYV\n\nI swear my examples hurt less than this \ud83e\udd23\n\nBut let us not lose track of what we are doing.\n\nWe are inside `__format__` now...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:58:56.000Z"
        },
        {
            "id": 2174,
            "username": "mathsppblog",
            "tweet_id": "1546252431172018176",
            "tweet_text": "Then, the expression `f\"{C_instance:Hello, world!}\"` calls the dunder method `__format__` with two arguments:\n\n - `self`, which is the instance; and\n - the format specification which is everything to the right of `:`.\n\nIn this case, the string \"Hello, world!\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:58:02.000Z"
        },
        {
            "id": 2175,
            "username": "mathsppblog",
            "tweet_id": "1546252013045956608",
            "tweet_text": "That's why the annotation is there!\n\nBut that's just a very convoluted way of doing things!\n\nWe can actually get rid of the whole function, and just do \u201cstandard\u201d string formatting \ud83d\udc47 https://t.co/85E9Q1kDoS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXVkAB1WYAET0t0.jpg\"]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:56:22.000Z"
        },
        {
            "id": 2176,
            "username": "mathsppblog",
            "tweet_id": "1546252009484992515",
            "tweet_text": "So, it is by calling `__format__` that we populate `prop` with something.\n\nSo, how do we call `__format__`?\n\n`__format__` is the dunder method responsible for doing custom string formatting, so we need to format the instance of C into a string...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:56:21.000Z"
        },
        {
            "id": 2177,
            "username": "mathsppblog",
            "tweet_id": "1546251490150555649",
            "tweet_text": "Now, let's try to understand what the very last line `C_instance.prop` actually triggers the print!\n\nSo, the program ends with us accessing the attribute `prop`, but when was that defined?\n\nWell, it wasn't set inside `__init__`, for example...\n\nIt was set inside `__format__`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:54:17.000Z"
        },
        {
            "id": 2178,
            "username": "mathsppblog",
            "tweet_id": "1546251219806584833",
            "tweet_text": "The name `C` appears three times, but the two last times they represent an instance of the class.\n\nSo, semantically, it's kind of as if we were doing this \ud83d\udc47\n\nWe get rid of the decorator by creating an instance and giving it a name in the usual way. https://t.co/6oKjHhNzpj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXVjRVnXgAAxP2j.jpg\"]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:53:13.000Z"
        },
        {
            "id": 2179,
            "username": "mathsppblog",
            "tweet_id": "1546250639067549697",
            "tweet_text": "Now there are three moments here to understand:\n\n 1. first we define the class C and immediately afterwards we do C = C() with the decorator;\n 2. we (use a convoluted string annotation to) call the dunder method __format__ to set a property in C; and\n 3. we get the property.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:50:54.000Z"
        },
        {
            "id": 2180,
            "username": "mathsppblog",
            "tweet_id": "1546250145691570177",
            "tweet_text": "First thing to do is assign slightly less terrible names to things that we care about.\n\nIn this version below \ud83d\udc47 the only things that remained `_` are things that are throwaways and which we do not care about. https://t.co/0NO9EHhtxZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXViTozWIAUBS0y.jpg\"]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:48:57.000Z"
        },
        {
            "id": 2181,
            "username": "mathsppblog",
            "tweet_id": "1546249080485076994",
            "tweet_text": "This insane program prints \u201cHello, world!\u201d, but how?\n\nCome with me as I unravel this madness. https://t.co/gfjDj4xXkH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546249080485076994",
            "tweet_type": "Others",
            "created_at": "2022-07-10T21:44:43.000Z"
        },
        {
            "id": 2182,
            "username": "mathsppblog",
            "tweet_id": "1546236581463396354",
            "tweet_text": "The Python \ud83d\udc0d dunder method `__init__` was the first dunder method I ever learned.\n\nAt the time, I didn't even know it was a dunder method! \ud83d\ude01\n\nI published an article explaining it and with exercises.\n\nLet me know your thoughts \ud83d\udc47\n\nhttps://t.co/IaX8vblpDc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546236581463396354",
            "tweet_type": "Python tips",
            "created_at": "2022-07-10T20:55:03.000Z"
        },
        {
            "id": 2183,
            "username": "mathsppblog",
            "tweet_id": "1546092856690999297",
            "tweet_text": "Apparently, coding Python \ud83d\udc0d blindfolded makes you forget about the useful predicate methods that strings have...\n\nThis is a screenshot from my @PyjamasConf talk, coming soon to a circus near y\u2015ahem, to a streaming service near you. https://t.co/EHc8Bzm8LL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXTTEKjX0AAPzT3.jpg\"]",
            "tweet_conversation_id": "1546092856690999297",
            "tweet_type": "Python tips",
            "created_at": "2022-07-10T11:23:56.000Z"
        },
        {
            "id": 2184,
            "username": "mathsppblog",
            "tweet_id": "1546044327037739008",
            "tweet_text": "Sets can be iterated over like lists, but sets are great when you want to do a lot of membership checking.\n\nYou can read more about sets in this blog article of mine: https://t.co/FplbyYnQmW\n\nI'll tell you more about set comprehensions in my list comps course, so see you there!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546044325070622725",
            "tweet_type": "Others",
            "created_at": "2022-07-10T08:11:06.000Z"
        },
        {
            "id": 2185,
            "username": "mathsppblog",
            "tweet_id": "1546044325070622725",
            "tweet_text": "Day 96/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nWhat's the cue that tells you you are building a **list** comprehension..?\n\nIt's the `[]` around the code `f(value) for value in iterator`, right?\n\nSwap `[]` with `{}` and you get set comprehensions! https://t.co/um6B32esjL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXSnHoZWQAAmYwV.jpg\"]",
            "tweet_conversation_id": "1546044325070622725",
            "tweet_type": "Python tips",
            "created_at": "2022-07-10T08:11:05.000Z"
        },
        {
            "id": 2186,
            "username": "mathsppblog",
            "tweet_id": "1546002804803833856",
            "tweet_text": "I'm really lazy...\n\nI needed a list with month names...\n\nPython \ud83d\udc0d has got my back!\n\nA list of month names in the current locale is just an import away! https://t.co/CAvhMXnnX0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXSBW1DX0AA_Vyg.jpg\"]",
            "tweet_conversation_id": "1546002804803833856",
            "tweet_type": "Python tips",
            "created_at": "2022-07-10T05:26:06.000Z"
        },
        {
            "id": 2187,
            "username": "mathsppblog",
            "tweet_id": "1545885535859888128",
            "tweet_text": "In the example above, I consumed the iterator by using the built-in `list`.\n\nHowever, in real code, if you use the generator expression, you probably don't want to use the built-in `list` afterwards.\n\nI'll write more on this in my list comp course, so stay tuned!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545885534022778880",
            "tweet_type": "Others",
            "created_at": "2022-07-09T21:40:07.000Z"
        },
        {
            "id": 2188,
            "username": "mathsppblog",
            "tweet_id": "1545885534022778880",
            "tweet_text": "Day 95/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\n**Generator** expressions create lazy iterators.\n\nWhen creating a generator expression, bear in mind that it becomes _empty_ when you consume it!\n\n(\"Consuming\" kinda means to use its values...) https://t.co/BaRniPtyQN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXQWsxmWYAExSIc.jpg\"]",
            "tweet_conversation_id": "1545885534022778880",
            "tweet_type": "Python tips",
            "created_at": "2022-07-09T21:40:07.000Z"
        },
        {
            "id": 2189,
            "username": "mathsppblog",
            "tweet_id": "1545704088473567234",
            "tweet_text": "I love that Python \ud83d\udc0d comes with batteries included.\n\nOne of my favourite modules is `collections`, with which you can do a lot of cool stuff!\n\nUsing `collections.deque`, it's really easy to get the last N lines of a file!\n\nCheck it out \ud83d\udc47 https://t.co/sBkfAdfWC3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXNxrQGX0AAmQW9.jpg\"]",
            "tweet_conversation_id": "1545704088473567234",
            "tweet_type": "Python tips",
            "created_at": "2022-07-09T09:39:07.000Z"
        },
        {
            "id": 2190,
            "username": "mathsppblog",
            "tweet_id": "1545051844237410307",
            "tweet_text": "I submitted 4 talks / tutorials to @DjangoConEurope !\n\nSadly, none of them got accepted!\n\nMaybe next time \ud83d\ude01\n\nMeanwhile, if you go to the conference, be sure to go out and eat a \u201cfrancesinha\u201d, a typical (~ local) dish.\n\nI hope you enjoy Porto, it's a beautiful city!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545051844237410307",
            "tweet_type": "Others",
            "created_at": "2022-07-07T14:27:19.000Z"
        },
        {
            "id": 2191,
            "username": "mathsppblog",
            "tweet_id": "1544739514177970176",
            "tweet_text": "However, if you pass a generator expression to `all`, you will apply the condition to one value at a time,\nand `all` will know to stop as soon as you find a `False`.\n\nThis means you can save a lot of time if your list is big or if the `False`s show up early!\n\nHere's an example: https://t.co/S7wjghl86k",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXAEZOeWIAQzaJ6.jpg\"]",
            "tweet_conversation_id": "1544739507056115716",
            "tweet_type": "Others",
            "created_at": "2022-07-06T17:46:14.000Z"
        },
        {
            "id": 2192,
            "username": "mathsppblog",
            "tweet_id": "1544739512726740994",
            "tweet_text": "So, imagine you have a bunch of values and you want to check if they all satisfy a condition.\n\nYou can pass a list comprehension to `all`.\n\nThat will apply the condition to **all** the values, and only then check if they are `all` true.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544739507056115716",
            "tweet_type": "Others",
            "created_at": "2022-07-06T17:46:14.000Z"
        },
        {
            "id": 2193,
            "username": "mathsppblog",
            "tweet_id": "1544739511342710784",
            "tweet_text": "Generators (and generator expressions) are awesome for many reasons.\n\nOne of them is that, because they are lazy, some functions can save time when doing computations!\n\nFor example, the function `all` can return `False` **as soon** as it finds a value `False`, right?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544739507056115716",
            "tweet_type": "Others",
            "created_at": "2022-07-06T17:46:14.000Z"
        },
        {
            "id": 2194,
            "username": "mathsppblog",
            "tweet_id": "1544739509140656129",
            "tweet_text": "In the snippet above you can find _generator expressions_.\n\nGenerator expressions are like list comprehensions, but _lazy_.\n\nWhat does that mean?\n\nIt means they only compute the values that are needed **when** they are needed. https://t.co/VAvMwDoTXQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXAEYgGXkAEVUhW.jpg\"]",
            "tweet_conversation_id": "1544739507056115716",
            "tweet_type": "Others",
            "created_at": "2022-07-06T17:46:13.000Z"
        },
        {
            "id": 2195,
            "username": "mathsppblog",
            "tweet_id": "1544739507056115716",
            "tweet_text": "Day 94/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comprehensions are usually passed directly to functions like `min`, `all`, or `join`.\n\nIn these situations, you often see the list comprehensions _without_ the `[]`...\n\nBut what are those? \ud83d\udd0e https://t.co/bbQra5VSyZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXAEXx1XkAETEgF.jpg\"]",
            "tweet_conversation_id": "1544739507056115716",
            "tweet_type": "Python tips",
            "created_at": "2022-07-06T17:46:13.000Z"
        },
        {
            "id": 2196,
            "username": "mathsppblog",
            "tweet_id": "1544267450925072387",
            "tweet_text": "I made a mistake in one of the code snippets up there.\n\nWhen calling `super()` inside `__init__`, I shouldn't have included `self`.\n\nHowever, taking `self` from the arguments to `super().__init__` doesn't change the error/output.\n\nhttps://t.co/MaoQM61qrK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-05T10:30:26.000Z"
        },
        {
            "id": 2197,
            "username": "mathsppblog",
            "tweet_id": "1544087685647802368",
            "tweet_text": "Day 93/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comprehensions are often used directly as arguments to other functions.\n\nFor example, as arguments to functions like `min`, `all`, or `join`.\n\nKeep this in mind for tomorrow...\n\nLet's go \ud83d\ude80 https://t.co/6T66wBeEa1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW2zkLsXwAI7HPo.jpg\"]",
            "tweet_conversation_id": "1544087685647802368",
            "tweet_type": "Python tips",
            "created_at": "2022-07-04T22:36:06.000Z"
        },
        {
            "id": 2198,
            "username": "mathsppblog",
            "tweet_id": "1543964725012201474",
            "tweet_text": "@raymondh The key learning points here, are:\n\n - __init__ initialises an instance...\n - but first it was created with __new__\n - __init__ is a no-op for immutables...\n - so if you want to customise subclasses of immutable types, you need to override __new__",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:30.000Z"
        },
        {
            "id": 2199,
            "username": "mathsppblog",
            "tweet_id": "1543964723619717120",
            "tweet_text": "@raymondh I hope you enjoyed this thread.\n\nFollow me @mathsppblog for more Python \ud83d\udc0d knowledge!\n\nI've been obsessing with list comprehensions, but I can teach you other things \ud83e\udd23\n\nSee you around! And remember:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Python tips",
            "created_at": "2022-07-04T14:27:30.000Z"
        },
        {
            "id": 2200,
            "username": "mathsppblog",
            "tweet_id": "1543964722277613569",
            "tweet_text": "@raymondh Go ahead and play around with the code, to get comfortable with these ideas!\n\nI have a bonus challenge for you:\n\nI'm setting the relative tolerance in `__init__`.\n\nWhat would be different if I did it in `__new__`?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:29.000Z"
        },
        {
            "id": 2201,
            "username": "mathsppblog",
            "tweet_id": "1543964720251764736",
            "tweet_text": "@raymondh Now that this is set up, we can use `math.isclose` to implement the tolerant equality comparison: https://t.co/JcEsiNYyAT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1DtrCWIAAX9v2.jpg\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:29.000Z"
        },
        {
            "id": 2202,
            "username": "mathsppblog",
            "tweet_id": "1543964718439796737",
            "tweet_text": "@raymondh Floats can't handle the `rel_tol` argument!\n\nSo, what we need to do is:\n\n - implement `TolerantFloat.__new__` to intercept `float.__new__`;\n - call `float.__new__` only with the value, not the `rel_tol`; and then\n - initialise the tolerant float with its relative tolerance. https://t.co/mbLl6dQp3Y",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1DtAVWIAAL5El.jpg\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:29.000Z"
        },
        {
            "id": 2203,
            "username": "mathsppblog",
            "tweet_id": "1543964716984320001",
            "tweet_text": "@raymondh So, the issue is that the dunder method `float.__new__` is being called, because we didn't define one for `TolerantFloat`.\n\nAnd when that's being called, it receives the arguments `0.5` and `rel_tol=0.1`, because that's what we passed in...\n\nHowever,",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:28.000Z"
        },
        {
            "id": 2204,
            "username": "mathsppblog",
            "tweet_id": "1543964715528978435",
            "tweet_text": "@raymondh This error message can look puzzling, but that's because something else is happening in the background...\n\n`__init__` **initialises your instance**, but first the instance had to be created...\n\nAnd **the dunder method `__new__` is responsible for _creating_ the instance**.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:28.000Z"
        },
        {
            "id": 2205,
            "username": "mathsppblog",
            "tweet_id": "1543964713809285120",
            "tweet_text": "@raymondh Alas, this doesn't work when you try it.\n\nIt says floats expect up to 1 argument, and you are giving it 2: https://t.co/wCygog1zYl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1DsZQXgAItFN0.jpg\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:27.000Z"
        },
        {
            "id": 2206,
            "username": "mathsppblog",
            "tweet_id": "1543964712081281025",
            "tweet_text": "@raymondh How do we do this?\n\nMy first instinct would be to modify `__init__` to accept the relative tolerance and to save it for later.\n\nSomething along these lines: https://t.co/7yKGMgNT3v",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1DrwcXwAEtVJ9.jpg\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:27.000Z"
        },
        {
            "id": 2207,
            "username": "mathsppblog",
            "tweet_id": "1543964710323847168",
            "tweet_text": "@raymondh When checking for equality, use a tolerance that allows wiggle room for floating point errors.\n\nSomething like this: https://t.co/hUXIyQt0os",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1DrHqWQAEbiVO.jpg\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:27.000Z"
        },
        {
            "id": 2208,
            "username": "mathsppblog",
            "tweet_id": "1543964708964818944",
            "tweet_text": "So, as you can see, `__init__` does nothing for the built-in immutable types...\n\nNow, let's borrow inspiration from @raymondh and suppose we want to do the following:\n\nLet's create a `float` subclass with a nice property:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:26.000Z"
        },
        {
            "id": 2209,
            "username": "mathsppblog",
            "tweet_id": "1543964707241037824",
            "tweet_text": "Notice how I tried to (re-)initialize `x` and nothing happened!\n\nThis is different from what happens to, say, a list object: https://t.co/BbaOtfkV7O",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1DqfSXwAEH_QS.jpg\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:26.000Z"
        },
        {
            "id": 2210,
            "username": "mathsppblog",
            "tweet_id": "1543964705332629505",
            "tweet_text": "The first thing I want to show you is that `__init__`, the method that **initialises class instances**, does nothing for immutable objects.\n\nIn other words, I'll show that for immutable types, `__init__` is a no-op.\n\nJust take a look at the REPL session below: https://t.co/4rXZqLbBTz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1Dp08XkAI8kAr.png\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Others",
            "created_at": "2022-07-04T14:27:25.000Z"
        },
        {
            "id": 2211,
            "username": "mathsppblog",
            "tweet_id": "1543964703432605696",
            "tweet_text": "What is `__new__` for?\n\nThe Python \ud83d\udc0d docs say \"__new__() is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize instance creation.\"...\n\nWhat does that mean?!\n\nLet me explain \ud83d\ude80 https://t.co/PZDeOELmfb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW1DpKdWIAAOghk.png\"]",
            "tweet_conversation_id": "1543964703432605696",
            "tweet_type": "Python tips",
            "created_at": "2022-07-04T14:27:25.000Z"
        },
        {
            "id": 2212,
            "username": "mathsppblog",
            "tweet_id": "1543726319703408641",
            "tweet_text": "Now, here's a bonus \ud83c\udf1f\u2728 exercise.\n\nInstead of stuffing everything in a single comprehension, write the code above in two passes:\n\n - convert everything to floats and filter out `None`s; then\n - format everything as desired.\n\nDoes it look better? https://t.co/4sUBYPX8Kb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWxq53lWIAIv3Yr.jpg\"]",
            "tweet_conversation_id": "1543726317761449984",
            "tweet_type": "Others",
            "created_at": "2022-07-03T22:40:10.000Z"
        },
        {
            "id": 2213,
            "username": "mathsppblog",
            "tweet_id": "1543726317761449984",
            "tweet_text": "Day 92/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThis exercise will mix filtering with conditional expressions!\n\nYou got some data about percentages.\n\nYou want to format all in the same way, ignoring missing values.\n\nGood luck \ud83d\ude80 https://t.co/EjSheEZEiG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWxq5M_XoAEYUVu.jpg\"]",
            "tweet_conversation_id": "1543726317761449984",
            "tweet_type": "Python tips",
            "created_at": "2022-07-03T22:40:09.000Z"
        },
        {
            "id": 2214,
            "username": "mathsppblog",
            "tweet_id": "1543540080362639360",
            "tweet_text": "In other words, if the two women are not there and I say\n\n\u201cOh dang, I should've stayed at the bus stop\u201d,\n\nI'm being illogical!\n\nThat statement does not follow from a logical deduction!\n\nAnd I am very fond of logical deductions \ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:07.000Z"
        },
        {
            "id": 2215,
            "username": "mathsppblog",
            "tweet_id": "1543540079033040909",
            "tweet_text": "So, what I want you to really pay attention to is this apparent asymmetry:\n\n - The 2 women are there \u21d2 I made the right call in going home.\n\n - The 2 women are not there \u21d2 I *don't know* if I made the right call or not.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:07.000Z"
        },
        {
            "id": 2216,
            "username": "mathsppblog",
            "tweet_id": "1543540077762068482",
            "tweet_text": "No!\n\nThere would be many possible explanations for the absence of the two women:\n\n - they started walking to their destination;\n\n - they caught a different bus;\n\n - they called an Uber;\n\n - \u2026",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:06.000Z"
        },
        {
            "id": 2217,
            "username": "mathsppblog",
            "tweet_id": "1543540076507979776",
            "tweet_text": "But bear with me for a second.\n\nWhat if, when I got to the stop for the second time, the two women weren't there?\n\nWould I be able to conclude I made the wrong choice, because the bus showed up while I was at home?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:06.000Z"
        },
        {
            "id": 2218,
            "username": "mathsppblog",
            "tweet_id": "1543540075287511042",
            "tweet_text": "Then, at 3:05pm, the (next) bus showed up.\n\nAnd we took it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:06.000Z"
        },
        {
            "id": 2219,
            "username": "mathsppblog",
            "tweet_id": "1543540074004025345",
            "tweet_text": "At 2:55pm I walk to the bus stop again and guess who I saw?\n\nThe same two women, still waiting for the bus\u2026\n\nAnd when I saw them, I concluded I made the right choice!\n\nThe bus hadn't come yet, so I spent a nicer time waiting at home rather than at the bus stop.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:05.000Z"
        },
        {
            "id": 2220,
            "username": "mathsppblog",
            "tweet_id": "1543540072724717569",
            "tweet_text": "The stop is awfully close to my home and so it was really easy to go back inside and wait there.\n\nI decided to go back home.\n\nSadly, the two women had nowhere else to go, so they just had to sit there and hope the bus would come soon.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:05.000Z"
        },
        {
            "id": 2221,
            "username": "mathsppblog",
            "tweet_id": "1543540071328092160",
            "tweet_text": "I started wondering whether the 2:05pm bus was late or if it simply wasn't coming!\n\nAnd so I was faced with a choice:\n\n - sit there, under the heat, waiting for a possibly late bus, or for the 3:05pm bus; or\n\n - go back home for 30min and come back to catch the 3:05pm bus.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:05.000Z"
        },
        {
            "id": 2222,
            "username": "mathsppblog",
            "tweet_id": "1543540070057132038",
            "tweet_text": "When I got to the stop, two women were sitting there, clearly waiting for the same bus as me.\n\nAnd we waited.\n\n2:05pm and no bus in sight.\n\n2:15pm and still no bus\u2026\n\n2:25pm and still no bus!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:04.000Z"
        },
        {
            "id": 2223,
            "username": "mathsppblog",
            "tweet_id": "1543540068689842176",
            "tweet_text": "It was Sunday, and on Sundays the bus has a reduced schedule.\n\nThere is one bus per hour, and they show up approximately at 5min past the hour.\n\nSo, at 1:55pm, I walked to the bus stop for the 2:05pm bus, with plenty of breathing in case the bus was running early.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:04.000Z"
        },
        {
            "id": 2224,
            "username": "mathsppblog",
            "tweet_id": "1543540066752012294",
            "tweet_text": "The other day, I waited over 1h for the bus.\n\nHere's what that taught me about logic: https://t.co/FYbwqFSKln",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWvBgptWQAA1JP3.jpg\"]",
            "tweet_conversation_id": "1543540066752012294",
            "tweet_type": "Others",
            "created_at": "2022-07-03T10:20:04.000Z"
        },
        {
            "id": 2225,
            "username": "mathsppblog",
            "tweet_id": "1543349071775207424",
            "tweet_text": "Day 91/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nThis one is just an exercise on conditionals!\n\nNotice how we unpack values in the loop, directly...\n\nLet's go \ud83d\ude80 https://t.co/5XYEHxQP0E",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWsTzN5XkAABWAy.jpg\"]",
            "tweet_conversation_id": "1543349071775207424",
            "tweet_type": "Python tips",
            "created_at": "2022-07-02T21:41:07.000Z"
        },
        {
            "id": 2226,
            "username": "mathsppblog",
            "tweet_id": "1543191263436066816",
            "tweet_text": "Will you be joining me at @PyOhio 2022 online?\n\nIt's free to register and attend online!\n\nBut that would be worthless if it weren't for the many great talks lined up!\n\nAnd I'll also be giving a talk! \ud83e\udd2a\n\nSee you there?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543191263436066816",
            "tweet_type": "Others",
            "created_at": "2022-07-02T11:14:02.000Z"
        },
        {
            "id": 2227,
            "username": "mathsppblog",
            "tweet_id": "1543009951353896960",
            "tweet_text": "Forgot to include the comment, but the point of the second piece of code is to take a string and only take every other character from it!\n\nThat's why we go from\n\nHELLO world to EL ol\n   ^   ^  ^   ^  ^",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543008827519418369",
            "tweet_type": "Others",
            "created_at": "2022-07-01T23:13:34.000Z"
        },
        {
            "id": 2228,
            "username": "mathsppblog",
            "tweet_id": "1543008827519418369",
            "tweet_text": "Day 90/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comprehensions can contain `if`s, conditionals.\n\nThey can be filters, if after loops...\n\nOr they can be conditional expressions, to create different values.\n\nUse them in the next exercise \ud83d\ude80 https://t.co/9cxyN3gO5k",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWneWauWYAIBIO2.jpg\"]",
            "tweet_conversation_id": "1543008827519418369",
            "tweet_type": "Python tips",
            "created_at": "2022-07-01T23:09:06.000Z"
        },
        {
            "id": 2229,
            "username": "mathsppblog",
            "tweet_id": "1542826610889474052",
            "tweet_text": "Python \ud83d\udc0d (and many programming languages) have expressions and statements.\n\nHow would you explain the difference?\n\nWhat if you are talking to a non-programmer?\n\nHow would you give them an intuitive notion of the difference?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542826610889474052",
            "tweet_type": "Python tips",
            "created_at": "2022-07-01T11:05:03.000Z"
        },
        {
            "id": 2230,
            "username": "mathsppblog",
            "tweet_id": "1542633641230180358",
            "tweet_text": "To conclude, beware of a source of confusion:\n\n - conditional expressions in the beginning; vs\n - using `if` after a `for` to filter values.\n\nThey do different things, and\n\n - the former always looks like `... if ... else ...`; while\n - the latter _cannot_ have an `else`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542633129999056897",
            "tweet_type": "Others",
            "created_at": "2022-06-30T22:18:15.000Z"
        },
        {
            "id": 2231,
            "username": "mathsppblog",
            "tweet_id": "1542633136269545473",
            "tweet_text": "At this point, the classic list comprehension pattern arises and you can rewrite the loop above as a list comprehension.\n\nTo give you a hand, I did it for you below.\n\nWhen using a conditional expression, I like to have the conditional expression by itself. https://t.co/gmORoxa7WK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWiIqAaX0AAr3DP.jpg\"]",
            "tweet_conversation_id": "1542633129999056897",
            "tweet_type": "Others",
            "created_at": "2022-06-30T22:16:15.000Z"
        },
        {
            "id": 2232,
            "username": "mathsppblog",
            "tweet_id": "1542633134029737984",
            "tweet_text": "Notice how, in the example above, we always want to append to the final list.\n\nIt's just that we want to append one of two different things, depending on `n % 2`.\n\nThis is where a conditional expression comes in: https://t.co/Jm0qQuiHcC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWiIpaAWQAIc_KS.jpg\"]",
            "tweet_conversation_id": "1542633129999056897",
            "tweet_type": "Others",
            "created_at": "2022-06-30T22:16:14.000Z"
        },
        {
            "id": 2233,
            "username": "mathsppblog",
            "tweet_id": "1542633131756457984",
            "tweet_text": "List comprehensions start with an expression that modifies values.\n\nTypically, you always modify values in the same way, with the same function or formula.\n\nHowever, sometimes you may want to adapt the modification to the value itself.\n\nHere's an example: https://t.co/UwEZDdg0bO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWiIoyuXEAIcOlr.jpg\"]",
            "tweet_conversation_id": "1542633129999056897",
            "tweet_type": "Others",
            "created_at": "2022-06-30T22:16:14.000Z"
        },
        {
            "id": 2234,
            "username": "mathsppblog",
            "tweet_id": "1542633129999056897",
            "tweet_text": "Day 89/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's talk about using conditional expressions with list comprehensions.\n\nThis will let us write more flexible comprehensions.\n\nLet's go \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542633129999056897",
            "tweet_type": "Python tips",
            "created_at": "2022-06-30T22:16:13.000Z"
        },
        {
            "id": 2235,
            "username": "mathsppblog",
            "tweet_id": "1542290623587356674",
            "tweet_text": "As pointed out in a reply, I can configure tox to fail if code coverage is below a certain threshold.\n\nFor example, I could have tox fail if coverage is under 100:\n\nI just need to add `--fail-under 100` to my `coverage report -m` command...\n\nNot for now\n\nhttps://t.co/aNkN9R5dte",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-29T23:35:13.000Z"
        },
        {
            "id": 2236,
            "username": "mathsppblog",
            "tweet_id": "1542287072492457984",
            "tweet_text": "Day 88/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nUsing `zip` in a `for` loop is a very common pattern to put together multiple sources of data.\n\nWhat if you use a `zip` together with a nested list comprehension?\n\nGive it a try \ud83d\ude80 https://t.co/f30xPD8urY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWdN6yCXwAEHmdU.jpg\"]",
            "tweet_conversation_id": "1542287072492457984",
            "tweet_type": "Python tips",
            "created_at": "2022-06-29T23:21:07.000Z"
        },
        {
            "id": 2237,
            "username": "mathsppblog",
            "tweet_id": "1542282472792137730",
            "tweet_text": "They say a picture is worth a thousand words...\n\nI did it! 100% code coverage!\n\nDon't tell anyone I only had to cover 23 statements \ud83e\udd23 https://t.co/kjMza8ncOL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWdJom3XEAUI-mk.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-29T23:02:50.000Z"
        },
        {
            "id": 2238,
            "username": "mathsppblog",
            "tweet_id": "1542174833705877506",
            "tweet_text": "In Python \ud83d\udc0d, you can import multiple things from a module with a comma-separated list.\n\nYou can also rename things by using an `import ... as ...` statement.\n\nDid you know you can mix the two? https://t.co/3TKpq39e7S",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWbn1oOWYAUMoaR.jpg\"]",
            "tweet_conversation_id": "1542174833705877506",
            "tweet_type": "Python tips",
            "created_at": "2022-06-29T15:55:07.000Z"
        },
        {
            "id": 2239,
            "username": "mathsppblog",
            "tweet_id": "1541893477918818304",
            "tweet_text": "Day 87/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nUsing `zip` in a `for` loop is a very common pattern to put together two sources of data.\n\nThis pattern can also be translated into a list comprehension with `zip`!\n\nYou try it :)\n\nLet's go \ud83d\ude80 https://t.co/bkWj64exqC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWXn8i_XgAEi0Xw.jpg\"]",
            "tweet_conversation_id": "1541893477918818304",
            "tweet_type": "Python tips",
            "created_at": "2022-06-28T21:17:06.000Z"
        },
        {
            "id": 2240,
            "username": "mathsppblog",
            "tweet_id": "1541856382328213511",
            "tweet_text": "Or is tox just to automate the generation of the report..?\n\nI'm not 100% sure of that.\n\nHowever, I do NOT have 100% code coverage, so let me work on that...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-28T18:49:42.000Z"
        },
        {
            "id": 2241,
            "username": "mathsppblog",
            "tweet_id": "1541856170184511488",
            "tweet_text": "Alright, there's nothing special about adding https://t.co/rWUpWyyG0G to tox, it's just a matter of adding the dependency and the correct commands...\n\nHowever, there's something I'm not getting...\n\nDo I want tox to complain if code coverage isn't 100%?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-28T18:48:51.000Z"
        },
        {
            "id": 2242,
            "username": "mathsppblog",
            "tweet_id": "1541726809347297281",
            "tweet_text": "Ok ok, this looks simple enough!\n\nI just pip installed coverage and I already have my first coverage report!\n\nTurns out it was dead simple to use https://t.co/rWUpWyyG0G. @nedbat must be doing something right \ud83d\ude02\n\nNow let's see if I can have tox run this for me... https://t.co/SqMorXB29S",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWVP1HHWIAI32zc.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-28T10:14:49.000Z"
        },
        {
            "id": 2243,
            "username": "mathsppblog",
            "tweet_id": "1541722629224251392",
            "tweet_text": "Done and dusted \u2728\u2728\n\nCode quality 10/10!\n\nNow I want to set up code coverage!\n\nI hope this isn't too hard to set up\ud83e\udd1e https://t.co/LLeBv0RQYX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWVMgE6WIAAuU1B.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-28T09:58:13.000Z"
        },
        {
            "id": 2244,
            "username": "mathsppblog",
            "tweet_id": "1541717317196857344",
            "tweet_text": "I started with a simple tox configuration, just to see how it works.\n\nI enabled black and pytest.\n\nAfter that, I included more things: flake8, pylint, and the mccabe complexity checker.\n\nNow it blows in my face because my current code quality sucks!\n\nLet's fix this! https://t.co/iFpNDI8gyx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWVHsY8XkAAERwa.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-28T09:37:06.000Z"
        },
        {
            "id": 2245,
            "username": "mathsppblog",
            "tweet_id": "1541587463335968770",
            "tweet_text": "Day 86/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nI have a folder with a bunch of CSV files with data.\n\nI want to collect all of those, but I want them grouped by original folder!\n\nCan you do it with a nested list comprehension?\n\nLet's go \ud83d\ude80 https://t.co/bBpzZYsZGB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWTRoITX0AEqJvf.jpg\"]",
            "tweet_conversation_id": "1541587463335968770",
            "tweet_type": "Python tips",
            "created_at": "2022-06-28T01:01:07.000Z"
        },
        {
            "id": 2246,
            "username": "mathsppblog",
            "tweet_id": "1541157625739493377",
            "tweet_text": "Day 85/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nDid they also force you to memorise the times table when you were in school?\n\nAll you need is a nested list comprehension!\n\nCan you build the correct list comprehension?\n\nLet's go \ud83d\ude80 https://t.co/uGessGURRo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWNKsW2XkAAmnN6.jpg\"]",
            "tweet_conversation_id": "1541157625739493377",
            "tweet_type": "Python tips",
            "created_at": "2022-06-26T20:33:05.000Z"
        },
        {
            "id": 2247,
            "username": "mathsppblog",
            "tweet_id": "1540824181914337280",
            "tweet_text": "Day 84/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nSome emoji are composed of simpler emoji that are connected by a \u201cglue\u201d.\n\nJust see the example below!\n\nAlso, can you rewrite the outer loop + the inner `map` as a nested list comprehension?\n\nLet's go \ud83d\ude80 https://t.co/4ykCJ5uFUB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWIbbXGXoAEDbGg.jpg\"]",
            "tweet_conversation_id": "1540824181914337280",
            "tweet_type": "Python tips",
            "created_at": "2022-06-25T22:28:06.000Z"
        },
        {
            "id": 2248,
            "username": "mathsppblog",
            "tweet_id": "1540816994320191488",
            "tweet_text": "All the `tox.ini` files I've seen have an option `isolated_build = True`.\n\n(Although I've only looked at 2 files \ud83d\ude43)\n\nHad to go search the tox docs to understand if I need that, or not...\n\nBecause I'm using Poetry to build the package, I do need that setting\ud83d\udc4d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-25T21:59:33.000Z"
        },
        {
            "id": 2249,
            "username": "mathsppblog",
            "tweet_id": "1540812730483056641",
            "tweet_text": "because Poetry can list (development) dependencies in `pyproject.toml`...\n\nBut Poetry/pyproject.toml is for the dependencies you are going to use directly while developing/using the package.\n\n`tox.ini` is for all the dependencies that `tox` needs, even if there's overlap.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-25T21:42:36.000Z"
        },
        {
            "id": 2250,
            "username": "mathsppblog",
            "tweet_id": "1540812728549376001",
            "tweet_text": "I have been looking at a fairly simple `tox.ini` file to try and understand how that works.\n\nI see the section `deps` with the dependencies that tox needs, and for a while I wasn't sure how the dependencies in `tox.ini` relates to the dependencies listed in `pyproject.toml`,",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-25T21:42:36.000Z"
        },
        {
            "id": 2251,
            "username": "mathsppblog",
            "tweet_id": "1540809576332812295",
            "tweet_text": "Now I want to set up tox to automate testing and linting and formatting and whatnot.\n\nIt's a shame that tox can't be configured from `pyproject.toml` quite yet...\n\nIt kind of can, but not in native TOML syntax, so I'll just go with a tox.ini file (https://t.co/1cue9XA5gf)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-25T21:30:04.000Z"
        },
        {
            "id": 2252,
            "username": "mathsppblog",
            "tweet_id": "1540804824345653249",
            "tweet_text": "Next up I did something that maybe I should've done earlier:\n\nAdd tests!\n\nPoetry already created the `tests` directory AND a test file, so I really just need to put some tests in there!\n\nIt feels nice when all your tests pass \ud83d\udc4d https://t.co/ATkktICwbE",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FWIJzuVUEAAsyYF.mp4\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-25T21:11:11.000Z"
        },
        {
            "id": 2253,
            "username": "mathsppblog",
            "tweet_id": "1540695833800212481",
            "tweet_text": "The Python \ud83d\udc0d programming language got its name from the Monty Python comedy group...\n\nSo it's quite fitting that the Python language has some humour hidden!\n\nOpen your Python REPL and try typing this in \ud83d\udc47 https://t.co/ppH9mR2zPU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWGmsi0XEAIvYAZ.jpg\"]",
            "tweet_conversation_id": "1540695833800212481",
            "tweet_type": "Python tips",
            "created_at": "2022-06-25T13:58:06.000Z"
        },
        {
            "id": 2254,
            "username": "mathsppblog",
            "tweet_id": "1540474627612463104",
            "tweet_text": "Day 83/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nList comps \u2665\ufe0f grids!\n\nGrids span in two directions:\n\n - left/right\n - up/down\n\nSuppose the outer list comp controls the up/down...\n\nAnd the inner list comp controls the left/right.\n\nNow solve this \ud83d\ude80 https://t.co/rmIBRBGcbn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWDdgojWAAAyaiy.jpg\"]",
            "tweet_conversation_id": "1540474627612463104",
            "tweet_type": "Python tips",
            "created_at": "2022-06-24T23:19:06.000Z"
        },
        {
            "id": 2255,
            "username": "mathsppblog",
            "tweet_id": "1540286548247199750",
            "tweet_text": "I'm talking about a free Python \ud83d\udc0d book.\n\n25+ chapters that will help you understand how to use some powerful features of Python.\n\nI can't do the hard work for you, but I can make it easier :)\n\nIf you want to upgrade your Python skills, just follow the link in my profile \ud83d\udcaa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1540286544199749633",
            "tweet_type": "Python tips",
            "created_at": "2022-06-24T10:51:44.000Z"
        },
        {
            "id": 2256,
            "username": "mathsppblog",
            "tweet_id": "1540286544199749633",
            "tweet_text": "Any plans for the weekend? \ud83c\udfaf\ud83d\udcc6\n\nI have been - and will continue to - tend to family.\n\nIf YOUR plans involve studying Python \ud83d\udc0d, I can help!\n\nAnd I'm not even talking about my list comprehension obsession!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1540286544199749633",
            "tweet_type": "Python tips",
            "created_at": "2022-06-24T10:51:43.000Z"
        },
        {
            "id": 2257,
            "username": "mathsppblog",
            "tweet_id": "1540000759521099777",
            "tweet_text": "Day 82/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nNested list comprehensions are great when you need to work with (2D) grids.\n\nCan you help me create a chessboard?\n\nLet's go \ud83d\ude80 https://t.co/ix18UygZ9b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FV8uh3pXwAMSL_M.jpg\"]",
            "tweet_conversation_id": "1540000759521099777",
            "tweet_type": "Python tips",
            "created_at": "2022-06-23T15:56:07.000Z"
        },
        {
            "id": 2258,
            "username": "mathsppblog",
            "tweet_id": "1539671676870221824",
            "tweet_text": "I was trying to use `scriv github-release` to make the release, but something's not working on my end :/\n\nThe documentation wasn't very clear on how the command should be used, so I opened an issue (https://t.co/gidxQKutfn).\n\nThen, I made the release by hand \ud83e\udd1a",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-22T18:08:28.000Z"
        },
        {
            "id": 2259,
            "username": "mathsppblog",
            "tweet_id": "1539652242499784704",
            "tweet_text": "I think it's reasonable to publish a release (0.1.0) as my next step, but first:\n\nLet's spruce up the README:\n\n - add instructions on how to install\n - give a short usage example\n\nI'll also create the CHANGELOG file.\n\nThen I'll publish the release v0.1.0 on GH.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-22T16:51:14.000Z"
        },
        {
            "id": 2260,
            "username": "mathsppblog",
            "tweet_id": "1539649258307330050",
            "tweet_text": "Yesterday I started tweeting about the whole process of setting a Python \ud83d\udc0d package.\n\nI'm learning much of this stuff as I go (and writing about it) so it's taking some time!\n\nToday I'll try to get some more stuff done!\n\nWish me luck \ud83e\udd1e https://t.co/dOvImWKXsc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539649258307330050",
            "tweet_type": "Python tips",
            "created_at": "2022-06-22T16:39:23.000Z"
        },
        {
            "id": 2261,
            "username": "mathsppblog",
            "tweet_id": "1539608171534319623",
            "tweet_text": "Day 81/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's write a nested list comprehension!\n\nLet's go \ud83d\ude80\n\n(Bonus points if you can tell me what `casefold` does!) https://t.co/ZTLIQfN4O6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FV3JeOIWIAAWg_x.jpg\"]",
            "tweet_conversation_id": "1539608171534319623",
            "tweet_type": "Python tips",
            "created_at": "2022-06-22T13:56:07.000Z"
        },
        {
            "id": 2262,
            "username": "mathsppblog",
            "tweet_id": "1539287204035428355",
            "tweet_text": "By the way, this thread is just a high-level overview of what I have been doing.\n\nWhile figuring this out and writing this thread, I have also been writing a more complete blog post!\n\nI'll share the link as soon as this is finished \ud83d\udc4d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T16:40:42.000Z"
        },
        {
            "id": 2263,
            "username": "mathsppblog",
            "tweet_id": "1539287202148102150",
            "tweet_text": "I'm going to take a short break now.\n\nI'll keep going tomorrow:\n\n - Setting up tests.\n - Checking code coverage.\n - CI/CD (running tests, building, uploading to PyPI).\n\nSee you there?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T16:40:42.000Z"
        },
        {
            "id": 2264,
            "username": "mathsppblog",
            "tweet_id": "1539285586745368576",
            "tweet_text": "After I publish a new package to PyPI, I always like doing a victory lap:\n\n 1. Open a terminal.\n 2. Use pip to install my package.\n 3. Import it in the Python REPL.\n 4. Exit Python.\n 5. Uninstall my package.\n\nIt just feels nice \ud83d\ude01 https://t.co/keasQlSOk0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVykEbtWIAAvwFR.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T16:34:17.000Z"
        },
        {
            "id": 2265,
            "username": "mathsppblog",
            "tweet_id": "1539283414519619589",
            "tweet_text": "@nedbat Now we're in a position to publish the actual package to the real PyPI.\n\nThis is fairly similar to publishing to TestPyPI, so make sure to grab an API key, build the package, and then publish!\n\nAnd there it goes, it's live on PyPI! https://t.co/ClLJriJqcT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVyiGYLXEAAIRTj.jpg\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T16:25:39.000Z"
        },
        {
            "id": 2266,
            "username": "mathsppblog",
            "tweet_id": "1539279160991940611",
            "tweet_text": "Now I can populate the package with the actual code.\n\nAs I make changes to the code, I want to document them in a changelog, so I'm gonna go ahead and also add scriv by @nedbat as a devt dependency.\n\nConfigure scriv, commit the code, add the changelog entry, done.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T16:08:45.000Z"
        },
        {
            "id": 2267,
            "username": "mathsppblog",
            "tweet_id": "1539258845427552258",
            "tweet_text": "Then, go to your account settings and create an API key.\n\nWe are going to configure Poetry to know about TestPyPI and give it your credentials.\n\nAfter that, we build the package (stub) and we publish it to TestPyPI!\n\nLook, here is the stub already online \ud83d\udc47 https://t.co/C6MlS667f7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVyLwP3XEAII1dU.png\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T14:48:01.000Z"
        },
        {
            "id": 2268,
            "username": "mathsppblog",
            "tweet_id": "1539258573343051776",
            "tweet_text": "Now I want to test the building and uploading of the package.\n\nAfter all, I want to be able to distribute my package with everyone out there!\n\nFirst things first, create an account on TestPyPI if you ain't got one!\n\nhttps://t.co/IBxqyqM22q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T14:46:56.000Z"
        },
        {
            "id": 2269,
            "username": "mathsppblog",
            "tweet_id": "1539243604782243840",
            "tweet_text": "Next up, I want to set up some pre-commit hooks.\n\nA couple of boring ones about files and whitespace and line endings...\n\nBut also one for `black` and another one for `isort`.\nI like my code to be formatted consistently :D\n\nHad to check how to do this \ud83d\udc49 https://t.co/T007aA8dv8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T13:47:27.000Z"
        },
        {
            "id": 2270,
            "username": "mathsppblog",
            "tweet_id": "1539226945380032513",
            "tweet_text": "Ok, I've done the next step enough times already:\n\nSet up a (GitHub) repo.\n\nLet's init, commit what we have, and push to remote!\n\n_My_ repo is now live:\n\nhttps://t.co/TuEN5S6ZET https://t.co/vkNBmHLogF",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FVxuvkJXEAEfshQ.mp4\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T12:41:15.000Z"
        },
        {
            "id": 2271,
            "username": "mathsppblog",
            "tweet_id": "1539225077966950401",
            "tweet_text": "Alright, so we're using Poetry for dep. management.\n\nLet's create a new project with\n\n```\npoetry new your_project_folder\n```\n\nMove inside the folder, and install your dependencies with\n\n```\npoetry install\n```\n\nI won't be adding any dependencies just yet.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T12:33:50.000Z"
        },
        {
            "id": 2272,
            "username": "mathsppblog",
            "tweet_id": "1539147237577588736",
            "tweet_text": "Right now, that code is just a random file on my filesystem, among dozens of other random files with bits and bobs of Python code.\n\nTherefore, the first thing I want to do is to set up the folder structure for the project.\n\nAnd, and dependency management.\n\nI'll use Poetry.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T07:24:32.000Z"
        },
        {
            "id": 2273,
            "username": "mathsppblog",
            "tweet_id": "1539146798454947840",
            "tweet_text": "Ok, so if you are creating a package, you have (an idea for) some code you want to share...\n\nIn my case, I already have most of the code.\n\nI want to package my mechanism that makes it easy to extend JSON to arbitrary Python objects.\n\nhttps://t.co/GNkJrONbPI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Others",
            "created_at": "2022-06-21T07:22:47.000Z"
        },
        {
            "id": 2274,
            "username": "mathsppblog",
            "tweet_id": "1539140936336392193",
            "tweet_text": "How do you set up a Python \ud83d\udc0d package?\n\nHow do you set up CI/CD with testing and code coverage?\n\nHow do you publish a package to PyPI?\n\nI don't know \ud83e\udd37\n\nBut today I'll be finding out and tweeting my findings in this thread.\n\nCome join me \ud83d\ude09 https://t.co/YCUvWWAwP4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVwgFkoXoAEoaq-.jpg\"]",
            "tweet_conversation_id": "1539140936336392193",
            "tweet_type": "Python tips",
            "created_at": "2022-06-21T06:59:29.000Z"
        },
        {
            "id": 2275,
            "username": "mathsppblog",
            "tweet_id": "1539018553331965952",
            "tweet_text": "Nested list comprehensions are at the frontier of what are acceptable list comprehensions.\n\nThey are great when all the list comprehensions involved are short and straightforward.\n\nBy the way, when nesting list comprehensions, you may want to split them across multiple lines: https://t.co/3PJENV2gqW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVuxNw9XwAIoMnk.jpg\"]",
            "tweet_conversation_id": "1539018549989187584",
            "tweet_type": "Others",
            "created_at": "2022-06-20T22:53:11.000Z"
        },
        {
            "id": 2276,
            "username": "mathsppblog",
            "tweet_id": "1539018551369007104",
            "tweet_text": "List comprehensions are expressions: it's code that evaluates to a result.\n\nList comprehensions can contain arbitrary expressions on the left...\n\nSo, list comprehensions can be nested!\n\nTo nest list comprehensions, focus on one list comprehension at a time!\n\nExample \ud83d\udc47 https://t.co/kypk27GSmU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVuxNIgXsAAfLCP.jpg\"]",
            "tweet_conversation_id": "1539018549989187584",
            "tweet_type": "Others",
            "created_at": "2022-06-20T22:53:10.000Z"
        },
        {
            "id": 2277,
            "username": "mathsppblog",
            "tweet_id": "1539018549989187584",
            "tweet_text": "Day 80/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nDid you know that list comprehensions can be nested?\n\nIt's not as bad as it sounds, I'll show you.\n\nLet's go \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539018549989187584",
            "tweet_type": "Python tips",
            "created_at": "2022-06-20T22:53:10.000Z"
        },
        {
            "id": 2278,
            "username": "mathsppblog",
            "tweet_id": "1538873349518008320",
            "tweet_text": "This is something you can even verify if you look under the hood.\n\nJust import the module `dis` and ask it to disassemble your function.\n\nIf you take a look at the bytecode, you will see that it:\n\n - \u201cloads the constant `None`\u201d; and\n - \u201creturns it\u201d. https://t.co/VvX4pzS5SK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVstJyJXEAAbpFd.jpg\"]",
            "tweet_conversation_id": "1538873345948753922",
            "tweet_type": "Others",
            "created_at": "2022-06-20T13:16:12.000Z"
        },
        {
            "id": 2279,
            "username": "mathsppblog",
            "tweet_id": "1538873347756392454",
            "tweet_text": "In a similar way, all the functions you define return SOMETHING.\n\nIf you don't tell your function to return anything, it will return `None` for you!\n\nLet me show you: https://t.co/YxWnp8ED5K",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVstJI2XwAAvlwY.jpg\"]",
            "tweet_conversation_id": "1538873345948753922",
            "tweet_type": "Others",
            "created_at": "2022-06-20T13:16:11.000Z"
        },
        {
            "id": 2280,
            "username": "mathsppblog",
            "tweet_id": "1538873345948753922",
            "tweet_text": "ALL Python \ud83d\udc0d functions return SOMETHING.\n\nEven those that look like they return nothing.\n\nIf a function returns \"nothing\", it actually returns `None`. https://t.co/d656lMRbG2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVstIiKXoAA_Kb9.jpg\"]",
            "tweet_conversation_id": "1538873345948753922",
            "tweet_type": "Python tips",
            "created_at": "2022-06-20T13:16:11.000Z"
        },
        {
            "id": 2281,
            "username": "mathsppblog",
            "tweet_id": "1538806402537476098",
            "tweet_text": "If you are unsure whether the list comprehensions above are good or not...\n\nTake a look at what I wrote yesterday.\n\nIt should clear some doubts:\n\nhttps://t.co/rkhgSOibjr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1538806398989086720",
            "tweet_type": "Others",
            "created_at": "2022-06-20T08:50:10.000Z"
        },
        {
            "id": 2282,
            "username": "mathsppblog",
            "tweet_id": "1538806400742215681",
            "tweet_text": "Now, take a look at this related piece of code.\n\nIs this a good list comprehension?\n\nHow would you rewrite it as a proper loop? https://t.co/A4mJW9PJj5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVrwQ8DXsAAHI11.jpg\"]",
            "tweet_conversation_id": "1538806398989086720",
            "tweet_type": "Others",
            "created_at": "2022-06-20T08:50:10.000Z"
        },
        {
            "id": 2283,
            "username": "mathsppblog",
            "tweet_id": "1538806398989086720",
            "tweet_text": "Day 79/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nTake a look at the loop below.\n\nHow would you rewrite it as a list comprehension?\n\nAnd would it be \"good\" Python code? https://t.co/wZcQRatP8c",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVrwQS2WAAATDF3.jpg\"]",
            "tweet_conversation_id": "1538806398989086720",
            "tweet_type": "Python tips",
            "created_at": "2022-06-20T08:50:09.000Z"
        },
        {
            "id": 2284,
            "username": "mathsppblog",
            "tweet_id": "1538206487398457344",
            "tweet_text": "Because you used a list comprehension to build a list that you just ignored!\n\nSo, for now, remember: list comprehensions should produce no side-effects.\n\nAnd let us end with a quiz:\n\nWhat's the output of the code below? https://t.co/Bdu8w7s6mT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVjOo7gXEAAZdBx.jpg\"]",
            "tweet_conversation_id": "1538206477726404609",
            "tweet_type": "Others",
            "created_at": "2022-06-18T17:06:19.000Z"
        },
        {
            "id": 2285,
            "username": "mathsppblog",
            "tweet_id": "1538206486022737922",
            "tweet_text": "What's the issue here?\n\nThe issue is that the list comprehension is producing side-effects:\n\nAs a side-effect to the list comprehension running, the list called `squares` is growing!\n\nThat's a big no no!\n\nOn top of that, you are defeating the purpose of list comps, because ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1538206477726404609",
            "tweet_type": "Others",
            "created_at": "2022-06-18T17:06:19.000Z"
        },
        {
            "id": 2286,
            "username": "mathsppblog",
            "tweet_id": "1538206484370161665",
            "tweet_text": "So, list comprehensions produce no side-effects by themselves...\n\nAnd that's also why you are typically advised against doing work in list comprehensions that produces side-effects.\n\nFor example, I see many people replying to my list comp exercises with something similar to this: https://t.co/ziJc82WyDS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVjOoW7WIAwRecW.jpg\"]",
            "tweet_conversation_id": "1538206477726404609",
            "tweet_type": "Others",
            "created_at": "2022-06-18T17:06:19.000Z"
        },
        {
            "id": 2287,
            "username": "mathsppblog",
            "tweet_id": "1538206482206179328",
            "tweet_text": "List comprehensions provide just that:\n\nList comps provide a way to transform iterables into new lists without having a single side-effect!\n\nThis is not true for the equivalent `for`-loop.\n\nCheck the two examples below.\nThe `for` loop produces a variable as a side-effect. https://t.co/DmnE3npLOv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVjOm-YXsAAlKm3.jpg\", \"https://pbs.twimg.com/media/FVjOnrFWYAAZ0l8.jpg\"]",
            "tweet_conversation_id": "1538206477726404609",
            "tweet_type": "Others",
            "created_at": "2022-06-18T17:06:18.000Z"
        },
        {
            "id": 2288,
            "username": "mathsppblog",
            "tweet_id": "1538206480519790593",
            "tweet_text": "Purity of what?\n\nPurity of results and behaviour.\n\nIn functional programming you are not supposed to produce side-effects.\n\nProper discussion would make for a huge thread, so let's stick with this:\n\nIn functional programming, we (typically) don't want side-effects.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1538206477726404609",
            "tweet_type": "Others",
            "created_at": "2022-06-18T17:06:18.000Z"
        },
        {
            "id": 2289,
            "username": "mathsppblog",
            "tweet_id": "1538206479110512641",
            "tweet_text": "The first thing that you need to understand is what the core of functional programming is.\n\nAnd while a bad CS class might make you think functional programming is all about `map` and `filter` and things like that...\n\nThat's not what FP is about!\n\nFP is about purity...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1538206477726404609",
            "tweet_type": "Others",
            "created_at": "2022-06-18T17:06:17.000Z"
        },
        {
            "id": 2290,
            "username": "mathsppblog",
            "tweet_id": "1538206477726404609",
            "tweet_text": "Day 78/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nDid you know that list comprehensions are actually a great tool for functional programming?\n\nAnd this doesn't have to be something scary, I'll explain what I mean.\n\nLet's go \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1538206477726404609",
            "tweet_type": "Python tips",
            "created_at": "2022-06-18T17:06:17.000Z"
        },
        {
            "id": 2291,
            "username": "mathsppblog",
            "tweet_id": "1537811770139623425",
            "tweet_text": "I am of the opinion that `reduce`'s complexity is overestimated and its value underestimated.\n\nLuckily for you, I have written an article where I explain how `reduce` really works \ud83d\udc47\n\nThis is precisely one of the (more advanced) examples I give.\n\nhttps://t.co/ajExTX2Tdh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1537811387883339776",
            "tweet_type": "Others",
            "created_at": "2022-06-17T14:57:51.000Z"
        },
        {
            "id": 2292,
            "username": "mathsppblog",
            "tweet_id": "1537811387883339776",
            "tweet_text": "Problem: fetch data inside nested dictionaries.\n\nSolution: use `reduce` to reduce the chain of keys into the successive (sub-)dictionaries.\n\nHere is my solution: https://t.co/Wuax47l3iU https://t.co/QQpxIa15Sb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVdnSHZXsAMoGFr.jpg\"]",
            "tweet_conversation_id": "1537811387883339776",
            "tweet_type": "Others",
            "created_at": "2022-06-17T14:56:20.000Z"
        },
        {
            "id": 2293,
            "username": "mathsppblog",
            "tweet_id": "1537709410574815233",
            "tweet_text": "Day 77/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use list comprehensions to implement a `deepcopy` for lists?\n\nThis exercise even has a bit of recursion! https://t.co/QrYdR9U079",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVcKjz_XwAMPOlR.jpg\"]",
            "tweet_conversation_id": "1537709410574815233",
            "tweet_type": "Python tips",
            "created_at": "2022-06-17T08:11:07.000Z"
        },
        {
            "id": 2294,
            "username": "mathsppblog",
            "tweet_id": "1537347505922445317",
            "tweet_text": "Weird \ud83d\ude15\nThe second emoji there should've been\n\n&gt;&gt;&gt; chr(0x1f90c)\n'\ud83e\udd0c'\n\n@VittoStack @FrancescoCiull4 is this a conspiracy against Italians?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1537347033803153409",
            "tweet_type": "Others",
            "created_at": "2022-06-16T08:13:02.000Z"
        },
        {
            "id": 2295,
            "username": "mathsppblog",
            "tweet_id": "1537347033803153409",
            "tweet_text": "Day 76/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to find the codepoints of some simple emoji? https://t.co/fdw6zuxh6Q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVXA-tcWQAAAuW5.jpg\"]",
            "tweet_conversation_id": "1537347033803153409",
            "tweet_type": "Python tips",
            "created_at": "2022-06-16T08:11:10.000Z"
        },
        {
            "id": 2296,
            "username": "mathsppblog",
            "tweet_id": "1536984640937938944",
            "tweet_text": "Day 75/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to get attributes dynamically? https://t.co/720Sg2EouO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVR3YqbWIAET3Xx.jpg\"]",
            "tweet_conversation_id": "1536984640937938944",
            "tweet_type": "Python tips",
            "created_at": "2022-06-15T08:11:08.000Z"
        },
        {
            "id": 2297,
            "username": "mathsppblog",
            "tweet_id": "1536622247032590336",
            "tweet_text": "Day 74/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to learn new string methods?\n\nIn Python 3.10, there are 12 predicate methods. Do you know all of them? https://t.co/bHVP84zE22",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVMtykgXwAUTj5S.jpg\"]",
            "tweet_conversation_id": "1536622247032590336",
            "tweet_type": "Python tips",
            "created_at": "2022-06-14T08:11:07.000Z"
        },
        {
            "id": 2298,
            "username": "mathsppblog",
            "tweet_id": "1536356517166841856",
            "tweet_text": "I have a detailed article with the ins and outs of comparison chaining on my blog.\n\nIt also contains some suggestions of things to do and things NOT to do.\n\nhttps://t.co/d8DkbiBk1p",
            "tweet_media": "[]",
            "tweet_conversation_id": "1536355919507988481",
            "tweet_type": "Others",
            "created_at": "2022-06-13T14:35:12.000Z"
        },
        {
            "id": 2299,
            "username": "mathsppblog",
            "tweet_id": "1536355919507988481",
            "tweet_text": "Chaining comparisons CAN be useful.\n\nI like it a lot.\n\nBut if you are not careful, you can run into weird situations.\n\nFor example, chaining `==` gives \u201call equal\u201d, but chaining `!=` does NOT give \u201call different\u201d. https://t.co/e867uGMuJZ https://t.co/HT8Qr5ZdG4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVI7a5iXoAITFT0.jpg\"]",
            "tweet_conversation_id": "1536355919507988481",
            "tweet_type": "Others",
            "created_at": "2022-06-13T14:32:49.000Z"
        },
        {
            "id": 2300,
            "username": "mathsppblog",
            "tweet_id": "1536259855530528768",
            "tweet_text": "Day 73/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to swap keys and values in a dictionary?\n\nUse `dict` and a list comprehension.\n\nSoon, we'll see an even better way of doing this! https://t.co/um4XjaQerR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVHkMlZWQAEJdB3.jpg\"]",
            "tweet_conversation_id": "1536259855530528768",
            "tweet_type": "Python tips",
            "created_at": "2022-06-13T08:11:06.000Z"
        },
        {
            "id": 2301,
            "username": "mathsppblog",
            "tweet_id": "1536027073453735936",
            "tweet_text": "Day 72/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nCan you use a list comprehension to read and trim all the lines of a text file? https://t.co/bFJUXeZtsf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVEQe6OWYAEZwRF.jpg\"]",
            "tweet_conversation_id": "1536027073453735936",
            "tweet_type": "Python tips",
            "created_at": "2022-06-12T16:46:06.000Z"
        },
        {
            "id": 2302,
            "username": "mathsppblog",
            "tweet_id": "1535934575670706176",
            "tweet_text": "My free Python book \u201cPydon'ts\u201d has over 110 \u2b50\u2b50\u2b50\u2b50\u2b50 reviews.\n\nIf you don't know why, take a look at the review I quoted \ud83d\udc4c\n\nIf you are convinced already, get the book here: https://t.co/RzImwaLUOJ https://t.co/JwUO0unQWj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535934575670706176",
            "tweet_type": "Others",
            "created_at": "2022-06-12T10:38:33.000Z"
        },
        {
            "id": 2303,
            "username": "mathsppblog",
            "tweet_id": "1535375298874703875",
            "tweet_text": "Using 1-letter variable names in list comprehensions can be useful.\n\nJust make sure that's ok in the context you are doing that.\n\nYou may have to adhere to a coding style that is very much against 1-letter variable names!\n\nI hope this helps \ud83d\udcaa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535375291291471875",
            "tweet_type": "Others",
            "created_at": "2022-06-10T21:36:11.000Z"
        },
        {
            "id": 2304,
            "username": "mathsppblog",
            "tweet_id": "1535375296890818561",
            "tweet_text": "In other words, these variables are fairly short-lived and only matter in that single place.\n\nSo, if you have a fairly long list comprehension, I think it is fairly reasonable to shorten the names of the variables a bit.\n\nHere is an example: https://t.co/eF1mwBsHl8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FU6_sJpXsAMgcqm.jpg\"]",
            "tweet_conversation_id": "1535375291291471875",
            "tweet_type": "Others",
            "created_at": "2022-06-10T21:36:11.000Z"
        },
        {
            "id": 2305,
            "username": "mathsppblog",
            "tweet_id": "1535375295569702920",
            "tweet_text": "Strive to use descriptive names as often as possible.\n\nHowever, list comprehensions lend themselves to a bit more flexibility, in my opinion.\n\nThe auxiliary variables (like `age` above) only exist inside the list comprehension.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535375291291471875",
            "tweet_type": "Others",
            "created_at": "2022-06-10T21:36:11.000Z"
        },
        {
            "id": 2306,
            "username": "mathsppblog",
            "tweet_id": "1535375293942218752",
            "tweet_text": "Overall, you should always use descriptive names.\n\nAs a simplified example, compare the two list comprehensions below:\n\nBecause of the descriptive names, it becomes much easier to understand what is going on in the second list comp! https://t.co/yL0mUR6gnM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FU6_rSzWQAE6IEO.jpg\"]",
            "tweet_conversation_id": "1535375291291471875",
            "tweet_type": "Others",
            "created_at": "2022-06-10T21:36:10.000Z"
        },
        {
            "id": 2307,
            "username": "mathsppblog",
            "tweet_id": "1535375292633686016",
            "tweet_text": "Naming things is the hardest problem in programming.\n\nThat's something I've heard people say quite a bit \ud83d\ude01\n\nBecause naming can be quite difficult, I wrote an article that can help you with that:\n\nhttps://t.co/jzH3Q6EneA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535375291291471875",
            "tweet_type": "Others",
            "created_at": "2022-06-10T21:36:10.000Z"
        },
        {
            "id": 2308,
            "username": "mathsppblog",
            "tweet_id": "1535375291291471875",
            "tweet_text": "Day 71/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's talk about naming variables inside a list comprehension.\n\nLet's go \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535375291291471875",
            "tweet_type": "Python tips",
            "created_at": "2022-06-10T21:36:09.000Z"
        },
        {
            "id": 2309,
            "username": "mathsppblog",
            "tweet_id": "1535016183988117537",
            "tweet_text": "Now you know what to do with a long list comprehension.\n\nI hope you are not super tired of list comprehensions yet!\n\nThis series is almost over!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535016174496407555",
            "tweet_type": "Others",
            "created_at": "2022-06-09T21:49:12.000Z"
        },
        {
            "id": 2310,
            "username": "mathsppblog",
            "tweet_id": "1535016181924519955",
            "tweet_text": "- the loop goes on a new line by itself and aligned with the main expression; and\n - the closing bracket `]` goes in a new line, with the indentation of the line where the `[` is.\n\nIf there are more loops or if there are conditions, they all get their own lines: https://t.co/sOF0oyedUs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FU15EynWYAEAxpA.jpg\"]",
            "tweet_conversation_id": "1535016174496407555",
            "tweet_type": "Others",
            "created_at": "2022-06-09T21:49:11.000Z"
        },
        {
            "id": 2311,
            "username": "mathsppblog",
            "tweet_id": "1535016180573954050",
            "tweet_text": "When a list comprehension is too long, `black` splits it:\n\n - the opening bracket `[` stays right where it is;\n - the main expression goes on a new line by itself and is indentend with respect to the line where the `[` is;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535016174496407555",
            "tweet_type": "Others",
            "created_at": "2022-06-09T21:49:11.000Z"
        },
        {
            "id": 2312,
            "username": "mathsppblog",
            "tweet_id": "1535016178451636237",
            "tweet_text": "As for categories 2. and 3., you can do whatever you want.\n\nI do both:\n\n - I use `black` to format my code consistently; but\n - I try to write my code already in the style that `black` likes.\n\nFor list comprehensions, I think it looks pretty nifty: https://t.co/R31EDLn9ut",
            "tweet_media": "[\"https://pbs.twimg.com/media/FU15EFiWYBg6lu-.jpg\"]",
            "tweet_conversation_id": "1535016174496407555",
            "tweet_type": "Others",
            "created_at": "2022-06-09T21:49:10.000Z"
        },
        {
            "id": 2313,
            "username": "mathsppblog",
            "tweet_id": "1535016177155596290",
            "tweet_text": "In my opinion, you shouldn't be in category 1.\n\nAs I have written before, code style matters:\n\nhttps://t.co/5NdbnWGOzY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535016174496407555",
            "tweet_type": "Others",
            "created_at": "2022-06-09T21:49:10.000Z"
        },
        {
            "id": 2314,
            "username": "mathsppblog",
            "tweet_id": "1535016175826001938",
            "tweet_text": "When it comes to formatting, there are three ways to go about it:\n\n 1. Don't worry with code formatting **at all*.\n 2. Applying a consistent (personal) style.\n 3. Letting an auto-formatter do the heavy lifting.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535016174496407555",
            "tweet_type": "Others",
            "created_at": "2022-06-09T21:49:10.000Z"
        },
        {
            "id": 2315,
            "username": "mathsppblog",
            "tweet_id": "1535016174496407555",
            "tweet_text": "What to do when you have a list comprehension that is too long?\n\nThis is day 70/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535016174496407555",
            "tweet_type": "Python tips",
            "created_at": "2022-06-09T21:49:09.000Z"
        },
        {
            "id": 2316,
            "username": "mathsppblog",
            "tweet_id": "1534679217547485187",
            "tweet_text": "With these rules of thumb in mind, here are some list comprehensions that I think are OK:\n\nAnd remember, these are just _rules of thumb_.\n\nUse your best judgement and consider the context when writing a list comprehension! https://t.co/FrkYzyS2sz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUxGmf4WYAM5KJ4.jpg\"]",
            "tweet_conversation_id": "1534679211302178816",
            "tweet_type": "Others",
            "created_at": "2022-06-08T23:30:13.000Z"
        },
        {
            "id": 2317,
            "username": "mathsppblog",
            "tweet_id": "1534679216217784321",
            "tweet_text": "Usually, this is what I go for:\n\n - If the list comp has no `if`s\n   - and the main expression is simple, I go up to 3 loops; but\n   - if the main expression is long or complex, I go up to 2 loops.\n - If the list comp has an `if`, I only use a single loop and an `if`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534679211302178816",
            "tweet_type": "Others",
            "created_at": "2022-06-08T23:30:12.000Z"
        },
        {
            "id": 2318,
            "username": "mathsppblog",
            "tweet_id": "1534679214439407616",
            "tweet_text": "I have a couple of rules of thumb I follow when writing list comps.\n\nI use those to decide if my list comp is decent or too complicated.\n\nNow, obviously, readability is in the eye of the beholder.\n\nTherefore, depending on the context, my rules of thumb may not make much sense.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534679211302178816",
            "tweet_type": "Others",
            "created_at": "2022-06-08T23:30:12.000Z"
        },
        {
            "id": 2319,
            "username": "mathsppblog",
            "tweet_id": "1534679212568850432",
            "tweet_text": "List comprehensions can become ugly, quickly.\n\nAnd if they do, they lose their appeal.\n\nA list comprehension that is too long is tough to understand.\n\nWant an example?\n\nJust look at the list comprehension in the image below. https://t.co/WDPGx9K9bD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUxGm-EWIAEPOmC.jpg\"]",
            "tweet_conversation_id": "1534679211302178816",
            "tweet_type": "Others",
            "created_at": "2022-06-08T23:30:11.000Z"
        },
        {
            "id": 2320,
            "username": "mathsppblog",
            "tweet_id": "1534679211302178816",
            "tweet_text": "How long should a list comprehension be?\n\nThis is day 69/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534679211302178816",
            "tweet_type": "Python tips",
            "created_at": "2022-06-08T23:30:11.000Z"
        },
        {
            "id": 2321,
            "username": "mathsppblog",
            "tweet_id": "1534182976786993153",
            "tweet_text": "I hope you enjoyed this write-up.\n\nFeel free to leave your thoughts below!\n\nAnd follow me @mathsppblog for more Python knowledge.\n\nBtw, all my threads can be read on my blog: https://t.co/bF07zerCkC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:20.000Z"
        },
        {
            "id": 2322,
            "username": "mathsppblog",
            "tweet_id": "1534182975377661952",
            "tweet_text": "Do you see what I mean?\n\nList comprehensions emphasise the data transformation.\n\nWhy?\n\nBecause that's the main thing, the most important thing.\n\nAnd that, in my opinion, is the best argument in favour of list comprehensions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:19.000Z"
        },
        {
            "id": 2323,
            "username": "mathsppblog",
            "tweet_id": "1534182973955792897",
            "tweet_text": "Fine, but if list comprehensions are just a shorter version of that recipe, why is the order different?\n\nList comprehensions switch up the order to highlight the only thing that changes:\n\nThe way in which we modify the original elements!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:19.000Z"
        },
        {
            "id": 2324,
            "username": "mathsppblog",
            "tweet_id": "1534182972236111873",
            "tweet_text": "A list comprehension takes that recipe and makes it shorter.\n\nHere is the comparison side-by-side: https://t.co/11ymyTKoIa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUqDRguXEAI8Rwm.jpg\"]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:18.000Z"
        },
        {
            "id": 2325,
            "username": "mathsppblog",
            "tweet_id": "1534182970726449153",
            "tweet_text": "We have this recipe that is fairly easy to understand.\n\nNot only that, it is also fairly common.\n\nGoing over a list and creating a new one is a common task.\n\nSo, Python decided to take that recipe and make it shorter!\n\nThat's where list comprehensions come in.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:18.000Z"
        },
        {
            "id": 2326,
            "username": "mathsppblog",
            "tweet_id": "1534182968792588289",
            "tweet_text": "In other words, when you have a task like this:\n\n\u201cTake a list with values and build a new list of modified values\u201d,\n\nYou just have to fill in the blanks in this code: https://t.co/Cq9xsuiKjb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUqDQ68WAAIOvXA.jpg\"]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:18.000Z"
        },
        {
            "id": 2327,
            "username": "mathsppblog",
            "tweet_id": "1534182967404281858",
            "tweet_text": "Notice that the descriptions of the 2 tasks are the same!\n\nWhat's the only difference?\n\nThe way in which we _modify_ the original values:\n\n - For the squares, we took a number and squared it with `num ** 2`.\n - For the months, we took a name and sliced it with `month[:3]`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:17.000Z"
        },
        {
            "id": 2328,
            "username": "mathsppblog",
            "tweet_id": "1534182965722374144",
            "tweet_text": "Easy enough, right?\n\nLet's go with another example.\n\nI have a list of months and I want another list with the first 3 letters.\n\nHere is the code in a `for` loop:\n\nHow does this work?\n\n - create an empty list;\n - iterate over the source list; and\n - append the modified values. https://t.co/uTA0lhY22b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUqDQSHWQAACkUZ.jpg\"]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:17.000Z"
        },
        {
            "id": 2329,
            "username": "mathsppblog",
            "tweet_id": "1534182963709104128",
            "tweet_text": "Let me pick a very simple example.\n\nI have a list of numbers and I want to create another list with the squares.\n\nHere is the code in a `for` loop:\n\nHow does this work?\n\n - create an empty list;\n - iterate over the source list; and\n - append the modified values. https://t.co/L1QOi6EXkl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUqDPh9WAAEFs83.png\"]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Others",
            "created_at": "2022-06-07T14:38:16.000Z"
        },
        {
            "id": 2330,
            "username": "mathsppblog",
            "tweet_id": "1534182962303991810",
            "tweet_text": "Why are list comprehensions good?\n\nWhy are list comprehensions useful?\n\nThis is day 68/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534182962303991810",
            "tweet_type": "Python tips",
            "created_at": "2022-06-07T14:38:16.000Z"
        },
        {
            "id": 2331,
            "username": "mathsppblog",
            "tweet_id": "1533723138780979203",
            "tweet_text": "Day 67/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/wA8rlsjyh2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUjhEOUWQAAiOyB.jpg\"]",
            "tweet_conversation_id": "1533723138780979203",
            "tweet_type": "Python tips",
            "created_at": "2022-06-06T08:11:06.000Z"
        },
        {
            "id": 2332,
            "username": "mathsppblog",
            "tweet_id": "1533360750693163008",
            "tweet_text": "Day 66/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/Z0lDgYNShS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUeXegiXwAAo_IS.jpg\"]",
            "tweet_conversation_id": "1533360750693163008",
            "tweet_type": "Python tips",
            "created_at": "2022-06-05T08:11:06.000Z"
        },
        {
            "id": 2333,
            "username": "mathsppblog",
            "tweet_id": "1532998365461479424",
            "tweet_text": "Or they must be defined outside the list comprehension.\n\nThus, if you order things the wrong way, you will be using variables before they are defined.\n\nFor example, here is a list comprehension that can't work: https://t.co/AqwglPDkD3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUZN4z6WYAED9Sq.jpg\"]",
            "tweet_conversation_id": "1532998364106719234",
            "tweet_type": "Others",
            "created_at": "2022-06-04T08:11:06.000Z"
        },
        {
            "id": 2334,
            "username": "mathsppblog",
            "tweet_id": "1532998364106719234",
            "tweet_text": "Day 65/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nWhen writing list comprehensions, recall that the nesting increases from left to right.\n\nThis means that the names you iterate over/use in the conditions must be defined on the left...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532998364106719234",
            "tweet_type": "Python tips",
            "created_at": "2022-06-04T08:11:06.000Z"
        },
        {
            "id": 2335,
            "username": "mathsppblog",
            "tweet_id": "1532640900475764742",
            "tweet_text": "It's the second time I have issues with my system. This should have been posted yesterday...\n\nI deeply apologise and I'll keep a closer look on what I'm doing \ud83d\udc40",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532635983266684930",
            "tweet_type": "Others",
            "created_at": "2022-06-03T08:30:40.000Z"
        },
        {
            "id": 2336,
            "username": "mathsppblog",
            "tweet_id": "1532635983266684930",
            "tweet_text": "Day 64/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/2TXVe9Fgdq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUUETerWYAAy0rJ.jpg\"]",
            "tweet_conversation_id": "1532635983266684930",
            "tweet_type": "Python tips",
            "created_at": "2022-06-03T08:11:08.000Z"
        },
        {
            "id": 2337,
            "username": "mathsppblog",
            "tweet_id": "1531911206457442304",
            "tweet_text": "Day 63/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/jptOoxaiDC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUJxH5_XsAAeT4l.jpg\"]",
            "tweet_conversation_id": "1531911206457442304",
            "tweet_type": "Python tips",
            "created_at": "2022-06-01T08:11:07.000Z"
        },
        {
            "id": 2338,
            "username": "mathsppblog",
            "tweet_id": "1531628244704714753",
            "tweet_text": "Funny! I noticed that whatever 3 flowers I pick, one is sure to be blue!\n\nAt this point, I got even closer to them and added:\n\nOh, so that means that whatever 3 flowers I pick, one must be yellow, right?\n\nAm I right? Or am I wrong?\n\nhttps://t.co/bMaXirdQOn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531628242574184449",
            "tweet_type": "Others",
            "created_at": "2022-05-31T13:26:44.000Z"
        },
        {
            "id": 2339,
            "username": "mathsppblog",
            "tweet_id": "1531628243555606529",
            "tweet_text": "Mike: I don't know if you noticed, but every flower in that garden is either blue, red, or yellow.\n\nSundeep: Indeed! And there _are_ flowers of each of those colours...\n\nMike: Right. And I realised that whatever 3 flowers I pick, one is sure to be red.\n\nThen Sundeep replied:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531628242574184449",
            "tweet_type": "Others",
            "created_at": "2022-05-31T13:26:44.000Z"
        },
        {
            "id": 2340,
            "username": "mathsppblog",
            "tweet_id": "1531628242574184449",
            "tweet_text": "I overheard Mike @driscollis and Sundeep @learn_byexample talking the other day.\n\nI thought they were talking about Python \ud83d\udc0d, but they were not!\n\nThey were talking about a beautiful garden they had visited.\n\nI got closer, and this is what I heard them say:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531628242574184449",
            "tweet_type": "Python tips",
            "created_at": "2022-05-31T13:26:43.000Z"
        },
        {
            "id": 2341,
            "username": "mathsppblog",
            "tweet_id": "1531548816192806912",
            "tweet_text": "Day 62/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/v8gZLXk97n",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUEniBfXsAA7_FJ.jpg\"]",
            "tweet_conversation_id": "1531548816192806912",
            "tweet_type": "Python tips",
            "created_at": "2022-05-31T08:11:07.000Z"
        },
        {
            "id": 2342,
            "username": "mathsppblog",
            "tweet_id": "1531186432630480897",
            "tweet_text": "Day 61/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/oMIQ6WwbzO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FT_d8hrX0AQwQTZ.jpg\"]",
            "tweet_conversation_id": "1531186432630480897",
            "tweet_type": "Python tips",
            "created_at": "2022-05-30T08:11:08.000Z"
        },
        {
            "id": 2343,
            "username": "mathsppblog",
            "tweet_id": "1530824035155722241",
            "tweet_text": "Day 60/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/NY1geAlE2b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FT6UWNNWIAEMMvO.jpg\"]",
            "tweet_conversation_id": "1530824035155722241",
            "tweet_type": "Python tips",
            "created_at": "2022-05-29T08:11:05.000Z"
        },
        {
            "id": 2344,
            "username": "mathsppblog",
            "tweet_id": "1530461649794125824",
            "tweet_text": "Day 59/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/AP5egHdVj1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FT1KwmdXEAEsd9D.jpg\"]",
            "tweet_conversation_id": "1530461649794125824",
            "tweet_type": "Python tips",
            "created_at": "2022-05-28T08:11:06.000Z"
        },
        {
            "id": 2345,
            "username": "mathsppblog",
            "tweet_id": "1530099263363067906",
            "tweet_text": "Day 57/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/tRdQH5Cd8j",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTwBK8QXEAAKzeT.jpg\"]",
            "tweet_conversation_id": "1530099263363067906",
            "tweet_type": "Python tips",
            "created_at": "2022-05-27T08:11:06.000Z"
        },
        {
            "id": 2346,
            "username": "mathsppblog",
            "tweet_id": "1529736876034228228",
            "tweet_text": "Day 56/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/0VOH6aylbc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTq3lNxWAAEsAqT.jpg\"]",
            "tweet_conversation_id": "1529736876034228228",
            "tweet_type": "Python tips",
            "created_at": "2022-05-26T08:11:07.000Z"
        },
        {
            "id": 2347,
            "username": "mathsppblog",
            "tweet_id": "1529497591217537026",
            "tweet_text": "I will be giving a short talk at @PyOhio !\n\nCan anyone guess the topic?\n\nHint \ud83d\udca1: I've been tweeting A LOT about it \ud83d\ude43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529497591217537026",
            "tweet_type": "Others",
            "created_at": "2022-05-25T16:20:17.000Z"
        },
        {
            "id": 2348,
            "username": "mathsppblog",
            "tweet_id": "1529374488621723648",
            "tweet_text": "Day 55/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/EBkdUYbv5d",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTlt_gNXwAAus0h.jpg\"]",
            "tweet_conversation_id": "1529374488621723648",
            "tweet_type": "Python tips",
            "created_at": "2022-05-25T08:11:07.000Z"
        },
        {
            "id": 2349,
            "username": "mathsppblog",
            "tweet_id": "1529107037094912000",
            "tweet_text": "I just realised there was an issue with the scheduling of days 55, 56, and 57, of the 100 days of list comprehensions.\n\nI apologise for that!\n\nI will post them in the coming days.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529107037094912000",
            "tweet_type": "Others",
            "created_at": "2022-05-24T14:28:21.000Z"
        },
        {
            "id": 2350,
            "username": "mathsppblog",
            "tweet_id": "1529012111757688834",
            "tweet_text": "Day 58/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/2rP7mwx9pW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTgkaY7XoAAG5-y.jpg\"]",
            "tweet_conversation_id": "1529012111757688834",
            "tweet_type": "Python tips",
            "created_at": "2022-05-24T08:11:09.000Z"
        },
        {
            "id": 2351,
            "username": "mathsppblog",
            "tweet_id": "1527685342928715776",
            "tweet_text": "Want to learn how to write more Pythonic code?\n\nIf so, all you have to do is check my ebook Pydon'ts.\n\nIt is a WIP, but it already covers plenty of Python features and how to use them.\n\nIt's a free ebook, by the way.\n\nWant the link?\n\nIt's in my Twitter bio.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527685342928715776",
            "tweet_type": "Others",
            "created_at": "2022-05-20T16:19:03.000Z"
        },
        {
            "id": 2352,
            "username": "mathsppblog",
            "tweet_id": "1527639288904548353",
            "tweet_text": "How to learn Python \ud83d\udc0d in 3 easy steps:\n\n Step 1: don't learn Python.\n\n Step 2: don't learn Python.\n\n Step 3: learn Python.\n\nDid I forget anything?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527639288904548353",
            "tweet_type": "Python tips",
            "created_at": "2022-05-20T13:16:03.000Z"
        },
        {
            "id": 2353,
            "username": "mathsppblog",
            "tweet_id": "1527562549608206336",
            "tweet_text": "Day 54/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/cpJWpk0XTO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTL-CxiXsAEoHHU.jpg\"]",
            "tweet_conversation_id": "1527562549608206336",
            "tweet_type": "Python tips",
            "created_at": "2022-05-20T08:11:07.000Z"
        },
        {
            "id": 2354,
            "username": "mathsppblog",
            "tweet_id": "1527307602110971905",
            "tweet_text": "Have you ever contributed to open source?\n\nRecently, I have been slowly trying to fix issue 2073 of `rich`.\n\nI have been documenting my journey on my blog: my doubts, my guesses, my approach to solving the issue.\n\nFeel free to give it a read:\n\nhttps://t.co/nVBfxCrxJm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527307602110971905",
            "tweet_type": "Others",
            "created_at": "2022-05-19T15:18:03.000Z"
        },
        {
            "id": 2355,
            "username": "mathsppblog",
            "tweet_id": "1527200147104575489",
            "tweet_text": "Day 53/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nThe nesting in list comprehensions can also contain `if`s!\n\nThis means you can filter at multiple levels.\n\nRemember: when nesting, write from left to right.\n\nThe diagram below should help you: https://t.co/qPbl3kqDDT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTG0cJWWIAAom83.jpg\"]",
            "tweet_conversation_id": "1527200147104575489",
            "tweet_type": "Python tips",
            "created_at": "2022-05-19T08:11:03.000Z"
        },
        {
            "id": 2356,
            "username": "mathsppblog",
            "tweet_id": "1526945212299366403",
            "tweet_text": "Do you like listening to music while coding?\n\nTo me, the right music can really help me get in the zone \u2013 that zone of deep focus where time flies by.\n\nI have been creating a hand-curated playlist based off of powerful soundtracks \ud83d\udc47\n\nhttps://t.co/QOWd2WUlEa\n\nSuggestions?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526945212299366403",
            "tweet_type": "Others",
            "created_at": "2022-05-18T15:18:02.000Z"
        },
        {
            "id": 2357,
            "username": "mathsppblog",
            "tweet_id": "1526837777647943680",
            "tweet_text": "Day 52/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/LSmmrgKoR3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTBq3e6WUAAlq3r.jpg\"]",
            "tweet_conversation_id": "1526837777647943680",
            "tweet_type": "Python tips",
            "created_at": "2022-05-18T08:11:08.000Z"
        },
        {
            "id": 2358,
            "username": "mathsppblog",
            "tweet_id": "1526699749382004737",
            "tweet_text": "Today I woke up to a notification saying someone had bought my free Python book for $50! \ud83e\udd2f\n\nThat's insane!\n\nI appreciate all of your support, thank you so much \ud83d\ude80\n\nIf you also want to get my (free) book (for free), here's the link: https://t.co/RzImwaLUOJ https://t.co/oiLXXlkPWH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FS_sifOXEAAA3np.png\"]",
            "tweet_conversation_id": "1526699749382004737",
            "tweet_type": "Others",
            "created_at": "2022-05-17T23:02:39.000Z"
        },
        {
            "id": 2359,
            "username": "mathsppblog",
            "tweet_id": "1526582824358354944",
            "tweet_text": "I created a niche tool to share Python \ud83d\udc0d code.\n\nYou paste code in and get a link to the code.\n\nThe links never expire!\n\nThe URL encodes the code, so the URL works forever \u2013 no accounts, sign-ups, whatever.\n\nHere is an example link to some Python code:\n\nhttps://t.co/AUYpMQ0Qk9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526582824358354944",
            "tweet_type": "Python tips",
            "created_at": "2022-05-17T15:18:02.000Z"
        },
        {
            "id": 2360,
            "username": "mathsppblog",
            "tweet_id": "1526475382186188800",
            "tweet_text": "Day 51/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/CK6l86fQIZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FS8hRR0XEAIpGTa.jpg\"]",
            "tweet_conversation_id": "1526475382186188800",
            "tweet_type": "Python tips",
            "created_at": "2022-05-17T08:11:06.000Z"
        },
        {
            "id": 2361,
            "username": "mathsppblog",
            "tweet_id": "1526220437763522562",
            "tweet_text": "Every now and then I post a problem on my blog.\n\nI try to do that every 2 weeks.\n\nLast week I published problem #60.\n\nIt's an interesting problem.\n\nPeople sent me a couple of nice solutions already.\n\nHow about you give it a go?\n\nhttps://t.co/mW3iCCh0q3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526220437763522562",
            "tweet_type": "Others",
            "created_at": "2022-05-16T15:18:02.000Z"
        },
        {
            "id": 2362,
            "username": "mathsppblog",
            "tweet_id": "1526112995813871617",
            "tweet_text": "By the way, this is the halfway mark!\n\nToday is day 50 of 100!\n\nExcellent work you are doing \ud83d\udcaa\n\nFollow me @mathsppblog for more! Or don't!\n\nBut don't give up now!\n\nThis is how it all started... \ud83d\udc47\n\nhttps://t.co/Si6m7Uu5I4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526112993972473857",
            "tweet_type": "Others",
            "created_at": "2022-05-16T08:11:06.000Z"
        },
        {
            "id": 2363,
            "username": "mathsppblog",
            "tweet_id": "1526112993972473857",
            "tweet_text": "Day 50/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/vjpvxqD744",
            "tweet_media": "[\"https://pbs.twimg.com/media/FS3XrhUWIAAb1LN.jpg\"]",
            "tweet_conversation_id": "1526112993972473857",
            "tweet_type": "Python tips",
            "created_at": "2022-05-16T08:11:06.000Z"
        },
        {
            "id": 2364,
            "username": "mathsppblog",
            "tweet_id": "1525954103767142403",
            "tweet_text": "I am over the moon!\n\n@europython just dropped me an email saying my tutorial on how Python \ud83d\udc0d objects work under the hood just got accepted!\n\nI look forward to attending EuroPython and sharing all my knowledge with you!\n\nSee you there?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1525954103767142403",
            "tweet_type": "Python tips",
            "created_at": "2022-05-15T21:39:43.000Z"
        },
        {
            "id": 2365,
            "username": "mathsppblog",
            "tweet_id": "1525750609672028163",
            "tweet_text": "Day 49/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/hHX1G4aOBR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSyOF_eX0AIms7S.jpg\"]",
            "tweet_conversation_id": "1525750609672028163",
            "tweet_type": "Python tips",
            "created_at": "2022-05-15T08:11:07.000Z"
        },
        {
            "id": 2366,
            "username": "mathsppblog",
            "tweet_id": "1525388224239218690",
            "tweet_text": "Day 48/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/ADv7CNhhJD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FStEgYjWIAMcQEy.jpg\"]",
            "tweet_conversation_id": "1525388224239218690",
            "tweet_type": "Python tips",
            "created_at": "2022-05-14T08:11:07.000Z"
        },
        {
            "id": 2367,
            "username": "mathsppblog",
            "tweet_id": "1525025818174541824",
            "tweet_text": "Day 47/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nList comprehensions can contain nested loops.\n\nWhen nesting in a list comp, the loops should be written from left to right.\n\nThe diagram below summarises this information. https://t.co/aHFQrZARId",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSn65hxWYAEoZ65.jpg\"]",
            "tweet_conversation_id": "1525025818174541824",
            "tweet_type": "Python tips",
            "created_at": "2022-05-13T08:11:03.000Z"
        },
        {
            "id": 2368,
            "username": "mathsppblog",
            "tweet_id": "1524663458675179520",
            "tweet_text": "Day 46/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/HNcHlcMXiN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSixVd8XwAEoakg.jpg\"]",
            "tweet_conversation_id": "1524663458675179520",
            "tweet_type": "Python tips",
            "created_at": "2022-05-12T08:11:10.000Z"
        },
        {
            "id": 2369,
            "username": "mathsppblog",
            "tweet_id": "1524301052618629122",
            "tweet_text": "Day 45/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UzNaHX6mIn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSdnupRXsAMol1P.jpg\"]",
            "tweet_conversation_id": "1524301052618629122",
            "tweet_type": "Python tips",
            "created_at": "2022-05-11T08:11:05.000Z"
        },
        {
            "id": 2370,
            "username": "mathsppblog",
            "tweet_id": "1523938675263954944",
            "tweet_text": "Day 44/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/FrcokBlG5H",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSYeJhqXoAAzfe1.jpg\"]",
            "tweet_conversation_id": "1523938675263954944",
            "tweet_type": "Python tips",
            "created_at": "2022-05-10T08:11:08.000Z"
        },
        {
            "id": 2371,
            "username": "mathsppblog",
            "tweet_id": "1523576273813086213",
            "tweet_text": "Day 43/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/HXvg22qGG4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSTUi-RXIAA1gOI.jpg\"]",
            "tweet_conversation_id": "1523576273813086213",
            "tweet_type": "Python tips",
            "created_at": "2022-05-09T08:11:05.000Z"
        },
        {
            "id": 2372,
            "username": "mathsppblog",
            "tweet_id": "1523213900417691650",
            "tweet_text": "Day 42/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/V5dH9yDkS3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSOK-FFXIAEWfHc.jpg\"]",
            "tweet_conversation_id": "1523213900417691650",
            "tweet_type": "Python tips",
            "created_at": "2022-05-08T08:11:08.000Z"
        },
        {
            "id": 2373,
            "username": "mathsppblog",
            "tweet_id": "1523048551160623104",
            "tweet_text": "I just wanted to remind you that all my threads end up on my blog!\n\nYou can read this thread (slightly edited) here:\n\nhttps://t.co/X2mz19n051 https://t.co/1C4eHfDait",
            "tweet_media": "[]",
            "tweet_conversation_id": "1523048551160623104",
            "tweet_type": "Others",
            "created_at": "2022-05-07T21:14:06.000Z"
        },
        {
            "id": 2374,
            "username": "mathsppblog",
            "tweet_id": "1522851500271325185",
            "tweet_text": "Day 41/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/tinypW7tMn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSJBXnPX0AEucoh.jpg\"]",
            "tweet_conversation_id": "1522851500271325185",
            "tweet_type": "Python tips",
            "created_at": "2022-05-07T08:11:05.000Z"
        },
        {
            "id": 2375,
            "username": "mathsppblog",
            "tweet_id": "1522683684322750464",
            "tweet_text": "TL;DR:\n\nIf a problem can be split into subproblems and the subproblems are similar to the original problem...\n\n... then recursion might be appropriate!\n\nAlso:\n\n - Recursion happens when you solve the subproblems.\n - Recursion needs a base case that you write first in the code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:15.000Z"
        },
        {
            "id": 2376,
            "username": "mathsppblog",
            "tweet_id": "1522683682972180483",
            "tweet_text": "This was a tiny toy example of recursion.\n\nThere are many other things to be said about recursion, but I hope this gave you an overview of the concept.\n\nIf you enjoyed this thread, follow me @mathsppblog!\n\nAlso, retweet the beginning of the thread so others learn too! \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:14.000Z"
        },
        {
            "id": 2377,
            "username": "mathsppblog",
            "tweet_id": "1522683681072111616",
            "tweet_text": "Does this function work?\n\nWell, we can try it out...\n\nAnd it does seem like it is working!\n\nHere you go, a recursive function that we built together!\n\nI really like to think that the recursive part is asking someone for help.\n\nDoes that analogy make sense to you? https://t.co/bctEBhGi3u",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSGot5zXwAALc3E.jpg\"]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:14.000Z"
        },
        {
            "id": 2378,
            "username": "mathsppblog",
            "tweet_id": "1522683678987632644",
            "tweet_text": "Is this making any sense?\n\nCan you see what I'm getting at?\n\nLet's take this receipt example and translate it to Python \ud83d\udc0d.\n\nMy function takes a stack of receipts (a list of receipts) and another receipt and looks for it.\n\nHere it is, with lots of comments: https://t.co/cuAa7T3x7W",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSGotPJXIAIRBaB.jpg\"]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Python tips",
            "created_at": "2022-05-06T21:04:13.000Z"
        },
        {
            "id": 2379,
            "username": "mathsppblog",
            "tweet_id": "1522683677649612801",
            "tweet_text": "I don't need to split the stack in half again...\n\nI barely even have a _stack_, it's just a single receipt!\n\nI just look at the receipt and check if it's the one I'm looking for.\n\nIf it is, good. I found it!\n\nIf it's not, I'll wait for my family members to report back to me.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:13.000Z"
        },
        {
            "id": 2380,
            "username": "mathsppblog",
            "tweet_id": "1522683676320051201",
            "tweet_text": "In the world of recursion, we call it the base case.\n\nSay I had plenty of family members around and I kept splitting the stack in half.\n\nI split, and split, and split, and suddenly I look at my stack: it's a single receipt.\n\nWell, that's easy to handle, right?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:13.000Z"
        },
        {
            "id": 2381,
            "username": "mathsppblog",
            "tweet_id": "1522683674944282625",
            "tweet_text": "Because it's when you start with one problem:\n\nLook for a receipt in a stack of receipts.\n\nAnd you create multiple problems:\n\nLook for a receipt in the two stacks of receipts.\n\nThe other ingredient missing tells you when to stop splitting the stack in half.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:12.000Z"
        },
        {
            "id": 2382,
            "username": "mathsppblog",
            "tweet_id": "1522683673547616256",
            "tweet_text": "So, this is a big part of recursion.\n\nIf a problem you have can be split into smaller problems, and the smaller problems still look like the original...\n\nThat's a good candidate for recursion.\n\nThe part where you split the problem into smaller ones is the recursive part.\n\nWhy?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:12.000Z"
        },
        {
            "id": 2383,
            "username": "mathsppblog",
            "tweet_id": "1522683672125661186",
            "tweet_text": "Task: find a specific receipt in a stack of receipts.\n\nStrategy:\n\n 1. split stack in two halves;\n 2. give one half to someone and ask for help; and\n 3. look for the specific receipt in my stack of receipts.\n\nNotice how the 3rd bullet point of the strategy matches the task.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:12.000Z"
        },
        {
            "id": 2384,
            "username": "mathsppblog",
            "tweet_id": "1522683670729039874",
            "tweet_text": "But these look like the same task, don't they?\n\nSo, why did I ask for help? Was it even worth it?\n\nYes it was!\n\nWhy?\n\nBecause now I have a much smaller stack to look through!\n\nSo, I have a subproblem (a smaller problem) that looks pretty much like the original problem.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:11.000Z"
        },
        {
            "id": 2385,
            "username": "mathsppblog",
            "tweet_id": "1522683669365805056",
            "tweet_text": "I started the example with this sentence:\n\n\u201cSo, I took my stack of receipts and started looking for it...\u201d\n\nAnd just now, after asking for help a couple of times, I wrote this:\n\n\u201cThen, I took the stack I kept for myself and I looked for the receipt in there.\u201d\n\nRight?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:11.000Z"
        },
        {
            "id": 2386,
            "username": "mathsppblog",
            "tweet_id": "1522683667973300224",
            "tweet_text": "Can you guess what I did?\n\nI split the stack in half again and asked someone else to help me.\n\nThen, I took the stack I kept for myself and I looked for the receipt in there.\n\nAnd here's the key idea!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:11.000Z"
        },
        {
            "id": 2387,
            "username": "mathsppblog",
            "tweet_id": "1522683666534703104",
            "tweet_text": "Easy:\n\n 1. I split the stack of receipts in half;\n 2. I went looking for my brother; and\n 3. I gave him half of the receipts and asked for help with those.\n\nThe other half, I kept for myself, and started looking for the receipt there.\n\nBut I was in a hurry!\n\nSo, what did I do?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:10.000Z"
        },
        {
            "id": 2388,
            "username": "mathsppblog",
            "tweet_id": "1522683665121259520",
            "tweet_text": "Easy:\n\n 1. I split the stack of receipts in half;\n 2. I went looking for my girlfriend; and\n 3. I gave her half of the receipts and asked for help with those.\n\nThe other half, I kept for myself and started looking for the receipt there.\n\nBut I was in a hurry!\n\nSo, what did I do?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:10.000Z"
        },
        {
            "id": 2389,
            "username": "mathsppblog",
            "tweet_id": "1522683663770607616",
            "tweet_text": "The other day, I had to look for a receipt for something I had purchased.\n\nI didn't remember the address of the store and I needed to go there again.\n\nSo, I took my stack of receipts and started looking for it...\n\nBut the stack was big and I was in a hurry!\n\nSo, what did I do?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:10.000Z"
        },
        {
            "id": 2390,
            "username": "mathsppblog",
            "tweet_id": "1522683662319374337",
            "tweet_text": "Recursion is useful in _certain_ types of problems.\n\nRecursion is mostly useful when:\n\n 1. you have a big problem;\n 2. that big problem can be split into smaller subproblems; and\n 3. the smaller subproblems look like the big problem.\n\nBut what kind of problem looks like that?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:09.000Z"
        },
        {
            "id": 2391,
            "username": "mathsppblog",
            "tweet_id": "1522683660889116672",
            "tweet_text": "When people think of recursion, people think of functions that call themselves.\n\nAfter all, recursion is about self-reference.\n\nSomething that is recursive is something that depends on itself.\n\nTherefore, a recursive function will call itself.\n\nBut how? And why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:09.000Z"
        },
        {
            "id": 2392,
            "username": "mathsppblog",
            "tweet_id": "1522683659362385922",
            "tweet_text": "Recently I tweeted a thread that explained recursion.\n\nIn case you missed it, I included it here \ud83d\udc47\n\nBut that was mostly a joke.\n\nIn this thread, I'll try to explain recursion with a real life example.\n\nLet's go \ud83d\ude80\n\nhttps://t.co/TVzuEVdJIA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522683659362385922",
            "tweet_type": "Others",
            "created_at": "2022-05-06T21:04:09.000Z"
        },
        {
            "id": 2393,
            "username": "mathsppblog",
            "tweet_id": "1522489113483558914",
            "tweet_text": "Day 40/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/YYkQeUJz8b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSD3x6nWUAU7mwk.jpg\"]",
            "tweet_conversation_id": "1522489113483558914",
            "tweet_type": "Python tips",
            "created_at": "2022-05-06T08:11:05.000Z"
        },
        {
            "id": 2394,
            "username": "mathsppblog",
            "tweet_id": "1522303222702039041",
            "tweet_text": "I write some pretty decent Python \ud83d\udc0d threads from time to time.\n\nNow I have a system that posts my threads automatically to my blog.\n\nSo... You can find some of my old threads here \ud83d\udc47\n\nDo you remember any thread from the past that you'd like me to upload?\n\nhttps://t.co/bF07zerCkC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522303222702039041",
            "tweet_type": "Python tips",
            "created_at": "2022-05-05T19:52:25.000Z"
        },
        {
            "id": 2395,
            "username": "mathsppblog",
            "tweet_id": "1522126733943750658",
            "tweet_text": "Day 39/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UbSTQ6LWOi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FR-uMo4WUAAP5mD.jpg\"]",
            "tweet_conversation_id": "1522126733943750658",
            "tweet_type": "Python tips",
            "created_at": "2022-05-05T08:11:07.000Z"
        },
        {
            "id": 2396,
            "username": "mathsppblog",
            "tweet_id": "1521764338847174660",
            "tweet_text": "Day 38/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/lG4h5M6xoN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FR5kmfeXsAAhXvz.jpg\"]",
            "tweet_conversation_id": "1521764338847174660",
            "tweet_type": "Python tips",
            "created_at": "2022-05-04T08:11:06.000Z"
        },
        {
            "id": 2397,
            "username": "mathsppblog",
            "tweet_id": "1521401962171965447",
            "tweet_text": "Day 37/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/aSNy4jb3ku",
            "tweet_media": "[\"https://pbs.twimg.com/media/FR0bBXmXoAEGnrR.jpg\"]",
            "tweet_conversation_id": "1521401962171965447",
            "tweet_type": "Python tips",
            "created_at": "2022-05-03T08:11:08.000Z"
        },
        {
            "id": 2398,
            "username": "mathsppblog",
            "tweet_id": "1521320554665746432",
            "tweet_text": "I wanted the populated example to be super simple, but I could include more interesting examples below.\n\nDo you have any suggestions?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521320320443064320",
            "tweet_type": "Others",
            "created_at": "2022-05-03T02:47:39.000Z"
        },
        {
            "id": 2399,
            "username": "mathsppblog",
            "tweet_id": "1521320320443064320",
            "tweet_text": "I created a PyScript playground for you to have fun with Python \ud83d\udc0d in the browser.\n\nIt has a couple of buttons and divs for you to play with.\n\nIt's what I've been using to test a couple of things, so I thought I'd make it available for you too.\n\nhttps://t.co/J6fIbTq06Y",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521320320443064320",
            "tweet_type": "Python tips",
            "created_at": "2022-05-03T02:46:43.000Z"
        },
        {
            "id": 2400,
            "username": "mathsppblog",
            "tweet_id": "1521039564562911234",
            "tweet_text": "Day 36/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/7oBX0lmt9n",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRvRbFEXsAAv-_g.jpg\"]",
            "tweet_conversation_id": "1521039564562911234",
            "tweet_type": "Python tips",
            "created_at": "2022-05-02T08:11:06.000Z"
        },
        {
            "id": 2401,
            "username": "mathsppblog",
            "tweet_id": "1520864441541312514",
            "tweet_text": "Here is a slightly more involved example:\n\nIt combines Python and JavaScript:\n\n - I defined a Python function that creates a nice timestamp and writes it to an element with a given ID\n - I used JavaScript's `setInterval` to run that function every second\n\nhttps://t.co/QY6uLVkUW4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520864438416461824",
            "tweet_type": "Others",
            "created_at": "2022-05-01T20:35:13.000Z"
        },
        {
            "id": 2402,
            "username": "mathsppblog",
            "tweet_id": "1520864438416461824",
            "tweet_text": "Now you can run Python \ud83d\udc0d code in your HTML!\n\nYou just need to use the &lt;py-script&gt; tag, and that's it! \n\nI wrote a short TIL describing how you can start using it.\n\nThe post itself uses PyScript to print a timestamp formatted with Python's `datetime`.\n\nhttps://t.co/gr3QZgGuMX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520864438416461824",
            "tweet_type": "Python tips",
            "created_at": "2022-05-01T20:35:13.000Z"
        },
        {
            "id": 2403,
            "username": "mathsppblog",
            "tweet_id": "1520769282111639553",
            "tweet_text": "The method `setdefault` of Python \ud83d\udc0d dictionaries lets you set a default value for a key.\n\nIn the example below, I use it to change the default value of a keyword argument of the built-in `print`. https://t.co/EUBSP4780d",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRrbmhNX0AA6TvY.jpg\"]",
            "tweet_conversation_id": "1520769282111639553",
            "tweet_type": "Python tips",
            "created_at": "2022-05-01T14:17:06.000Z"
        },
        {
            "id": 2404,
            "username": "mathsppblog",
            "tweet_id": "1520677171643170816",
            "tweet_text": "Day 35/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/PcukxYtzgy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRqH1ByXsAcW4-1.jpg\"]",
            "tweet_conversation_id": "1520677171643170816",
            "tweet_type": "Python tips",
            "created_at": "2022-05-01T08:11:05.000Z"
        },
        {
            "id": 2405,
            "username": "mathsppblog",
            "tweet_id": "1520468283845083137",
            "tweet_text": "I can take it!\n\nJust drop a reply below with some honest, constructive criticism of my work. No praises!\n\nIt could be about my tweets, my blog articles, my book, ...\n\nJust drop a reply with something that, in your opinion, I can improve \ud83d\ude80\n\nThank you so much!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520468283845083137",
            "tweet_type": "Others",
            "created_at": "2022-04-30T18:21:02.000Z"
        },
        {
            "id": 2406,
            "username": "mathsppblog",
            "tweet_id": "1520382541940895747",
            "tweet_text": "That's why I had 4 exercises that looked so similar.\n\nDo you think my motivation makes sense?\n\nJust reply with your thoughts on this!\n\nAs a bonus task, here are four short snippets.\n\nSome are `filter`s, some are list comprehensions: rewrite them as the other type of expression. https://t.co/oimosCCMsJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRl72iLXIAMs_G5.jpg\"]",
            "tweet_conversation_id": "1520382534902759426",
            "tweet_type": "Others",
            "created_at": "2022-04-30T12:40:19.000Z"
        },
        {
            "id": 2407,
            "username": "mathsppblog",
            "tweet_id": "1520382540057620482",
            "tweet_text": "I think this quote from Alan Perlis is very eye opening.\n\nI am especially fond of the comparison to Shakespeare!\n\nIdioms are useful because they are pieces of code that convey a specific idea.\n\nAn idea that is bigger as a whole than the lines of code that write it. https://t.co/sj96DqkOcG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRl7260WUAE-MeA.jpg\"]",
            "tweet_conversation_id": "1520382534902759426",
            "tweet_type": "Others",
            "created_at": "2022-04-30T12:40:19.000Z"
        },
        {
            "id": 2408,
            "username": "mathsppblog",
            "tweet_id": "1520382538715484160",
            "tweet_text": "I am a huge proponent of understand **how** and **why** things work.\n\nAfter all, memorising something is very different from learning it.\n\nBut there is value in making things automatic.\n\nThe 4 exercises were about converting `filter`s &lt;&gt; list comprehensions automatically.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520382534902759426",
            "tweet_type": "Others",
            "created_at": "2022-04-30T12:40:19.000Z"
        },
        {
            "id": 2409,
            "username": "mathsppblog",
            "tweet_id": "1520382536828035072",
            "tweet_text": "Over the past four days I asked you to take a look at:\n\n - two usages of `filter`; and\n - a list comprehension.\n\nI asked for the similarities and for the differences.\n\nHere are those four exercises: https://t.co/tdg5mqqR9o",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRl7z8vXwAIRJdD.jpg\", \"https://pbs.twimg.com/media/FRl70jBWQAIu_8r.jpg\", \"https://pbs.twimg.com/media/FRl71JEWQAArHkK.jpg\", \"https://pbs.twimg.com/media/FRl712aXoAAy8J8.jpg\"]",
            "tweet_conversation_id": "1520382534902759426",
            "tweet_type": "Others",
            "created_at": "2022-04-30T12:40:18.000Z"
        },
        {
            "id": 2410,
            "username": "mathsppblog",
            "tweet_id": "1520382534902759426",
            "tweet_text": "Day 34/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nList comprehensions with conditions tend to be good replacements for the built-in `filter`.\n\nBut... Is that it?\n\nIf so, why did I spend 4 days with `filter`/list comprehension comparisons? https://t.co/9GXOR7a8OM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRl72utWYAAylRy.jpg\"]",
            "tweet_conversation_id": "1520382534902759426",
            "tweet_type": "Python tips",
            "created_at": "2022-04-30T12:40:18.000Z"
        },
        {
            "id": 2411,
            "username": "mathsppblog",
            "tweet_id": "1520128037177675780",
            "tweet_text": "What are your plans for this weekend?\n\nAny Python \ud83d\udc0d learning/coding at all?\n\nI have to go and study the module `pathlib`.\n\n(I'm actually working this weekend as if it were Mon/Tue, because I'll be off Mon/Tue \ud83d\ude43)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520128037177675780",
            "tweet_type": "Python tips",
            "created_at": "2022-04-29T19:49:01.000Z"
        },
        {
            "id": 2412,
            "username": "mathsppblog",
            "tweet_id": "1519952417747517440",
            "tweet_text": "Day 33/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code and compare the three snippets...\n\nWhat do you see?\n\nDon't dispair. Tomorrow I'll explain my insistence on this. https://t.co/blZPwzZomS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRf0po4X0AAGpJV.jpg\", \"https://pbs.twimg.com/media/FRf0qQbWQAA6ibk.jpg\", \"https://pbs.twimg.com/media/FRf0q0KWUAAOXVn.jpg\"]",
            "tweet_conversation_id": "1519952417747517440",
            "tweet_type": "Python tips",
            "created_at": "2022-04-29T08:11:10.000Z"
        },
        {
            "id": 2413,
            "username": "mathsppblog",
            "tweet_id": "1519743511335251969",
            "tweet_text": "Spoilers:\n\n - install `rich` by @willmcgugan;\n - write two lines of code;\n - enjoy beautiful tracebacks when your code goes crazy; and\n - you can also enable beautiful tracebacks when logging with `rich`.\n\nI wonder what I'll learn about `rich` tomorrow... \ud83e\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519743509779173377",
            "tweet_type": "Others",
            "created_at": "2022-04-28T18:21:03.000Z"
        },
        {
            "id": 2414,
            "username": "mathsppblog",
            "tweet_id": "1519743509779173377",
            "tweet_text": "Python \ud83d\udc0d tracebacks look so dull and dense...\n\nThankfully, today I learned how to make them **beautiful**!\n\nI wrote a short article on how to do it, so you can do it to.\n(But don't worry, it's not like it's hard to set up...)\n\nhttps://t.co/Gf9eOx9k8V",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519743509779173377",
            "tweet_type": "Python tips",
            "created_at": "2022-04-28T18:21:02.000Z"
        },
        {
            "id": 2415,
            "username": "mathsppblog",
            "tweet_id": "1519590035095437313",
            "tweet_text": "Day 32/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/4oeVsw6s0B",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRarD5YVUAAkyRn.jpg\", \"https://pbs.twimg.com/media/FRarEmzaUAAoC09.jpg\", \"https://pbs.twimg.com/media/FRarFXAVEAEZRZV.jpg\"]",
            "tweet_conversation_id": "1519590035095437313",
            "tweet_type": "Python tips",
            "created_at": "2022-04-28T08:11:11.000Z"
        },
        {
            "id": 2416,
            "username": "mathsppblog",
            "tweet_id": "1519437492801445889",
            "tweet_text": "Spoilers:\n\n - install `rich` by @willmcgugan;\n - copy a couple of lines of code from the `rich` docs;\n - enjoy beautiful logging in your console.\n\nIt is so simple, it makes me wonder why people don't talk about this more.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519437491291492355",
            "tweet_type": "Others",
            "created_at": "2022-04-27T22:05:02.000Z"
        },
        {
            "id": 2417,
            "username": "mathsppblog",
            "tweet_id": "1519437491291492355",
            "tweet_text": "Logging in Python \ud83d\udc0d can be done with the module `logging`.\n\nTIL how to do **beautiful** logging.\nIt's so pretty, I wish my code errors just so I can see all the colours.\n\nI wrote a short article on how to do it!\n\nIt's surprisingly simple to set up.\n\nhttps://t.co/GFBa5x1ot8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519437491291492355",
            "tweet_type": "Python tips",
            "created_at": "2022-04-27T22:05:02.000Z"
        },
        {
            "id": 2418,
            "username": "mathsppblog",
            "tweet_id": "1519381151181324288",
            "tweet_text": "Go ahead and give that a read!\n\nOne of the main takeaways is that you **don't** need to learn all of Python.\n\nYou just need to learn a bit and start practising and building things.\n\nThen, keep learning, bit by bit, gradually...\n\nAnd you will keep improving \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:09.000Z"
        },
        {
            "id": 2419,
            "username": "mathsppblog",
            "tweet_id": "1519381149637914633",
            "tweet_text": "I actually wrote an article a couple of months ago about this subject.\n\nIn it, I describe how I go about navigating those numbers and always learning something new without suffering from paralysis by analysis:\n\nhttps://t.co/mY8pxRKN8B",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:09.000Z"
        },
        {
            "id": 2420,
            "username": "mathsppblog",
            "tweet_id": "1519381148212031488",
            "tweet_text": "So, as you can see, Python really is huge and there is a LOT to learn.\n\nIn fact, I think you will never learn **ALL** of it.\n\nBut that's fine.\n\nIn fact, I am of the opinion that mastering Python is impossible, and that's actually OK.\n\nThe point is not to know it all.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:09.000Z"
        },
        {
            "id": 2421,
            "username": "mathsppblog",
            "tweet_id": "1519381146689224704",
            "tweet_text": "And if all of this isn't enough, you can always head over to PyPI, the Python Package Index.\n\nOn PyPI you can find all the packages that people have published for others to use.\n\nAs of writing this thread, there are 371,830 projects on PyPI!\n\nThat's a lot of code \ud83d\ude01",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:08.000Z"
        },
        {
            "id": 2422,
            "username": "mathsppblog",
            "tweet_id": "1519381144994779136",
            "tweet_text": "There is also the standard library, which is also huge!\n\nThe Python Standard Library has almost 250 modules!\n\nBut over 200 modules! That's why they say Python has \u201cbatteries included\u201d...\n\nThose are some big batteries! \ud83e\udd23\n\nhttps://t.co/6b7QJON1LO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:08.000Z"
        },
        {
            "id": 2423,
            "username": "mathsppblog",
            "tweet_id": "1519381143623188481",
            "tweet_text": "And these counts I presented exclude things like dunder methods, which are also quite a few...\n\nSo, learning all of this will take you some time!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:08.000Z"
        },
        {
            "id": 2424,
            "username": "mathsppblog",
            "tweet_id": "1519381142121631748",
            "tweet_text": "But also ljust, lower, lstrip, maketrans, partition, removeprefix, removesuffix, replace, rfind, rindex, rjust, rpartition, rsplit, rstrip, split, splitlines, startswith, strip, swapcase, title, translate, upper, and zfill!\n\nThat's a lot of string methods...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:07.000Z"
        },
        {
            "id": 2425,
            "username": "mathsppblog",
            "tweet_id": "1519381140720791552",
            "tweet_text": "Strings have 47 methods!\n\ncapitalize, casefold, center, count, encode, endswith, expandtabs, find, format, format_map, index, isalnum, isalpha, isascii, isdecimal, isdigit, isidentifier, islower, isnumeric, isprintable, isspace, istitle, isupper, join, ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:07.000Z"
        },
        {
            "id": 2426,
            "username": "mathsppblog",
            "tweet_id": "1519381139202392064",
            "tweet_text": "And strings?!\n\nDon't even get me started on strings.\n\nHow many methods do you think strings have?\n\nCare to take a guess?\n\nDrumroll, please...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:06.000Z"
        },
        {
            "id": 2427,
            "username": "mathsppblog",
            "tweet_id": "1519381137742831623",
            "tweet_text": "Python 3.10 has many built-in types and they come with many methods:\n\n - floats have 7 methods and integers have 10;\n - lists have 11 methods (and tuples have 2);\n - dictionaries also have 11 methods;\n - sets have 17 methods (but frozensets only 8);",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:06.000Z"
        },
        {
            "id": 2428,
            "username": "mathsppblog",
            "tweet_id": "1519381135880597505",
            "tweet_text": "Python 3.10 has 71 built-in functions.\n\nThe built-in functions are the functions that you can use without having to import anything.\n\nAmong them you can find `print` or `int`...\n\nBut also `compile` or `__import__`. https://t.co/bveqEkimA2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRXtFthXIAAamEZ.jpg\"]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Others",
            "created_at": "2022-04-27T18:21:06.000Z"
        },
        {
            "id": 2429,
            "username": "mathsppblog",
            "tweet_id": "1519381134408396800",
            "tweet_text": "Python \ud83d\udc0d is a huge language:\n\n - it has many built-in functions;\n - it has a rich set of built-in types + their methods;\n - it has a great standard library;\n - it has a HUGE ecosystem;\n - ...\n\nThere's always something to keep you busy!\n\nLet me tell you exactly _how_ busy:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519381134408396800",
            "tweet_type": "Python tips",
            "created_at": "2022-04-27T18:21:05.000Z"
        },
        {
            "id": 2430,
            "username": "mathsppblog",
            "tweet_id": "1519227653835923456",
            "tweet_text": "Day 31/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/1j67LJPKGj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRVhe39X0AEfB05.jpg\", \"https://pbs.twimg.com/media/FRVhfbnWYAAnpYx.jpg\", \"https://pbs.twimg.com/media/FRVhf_0XwAATq8O.jpg\"]",
            "tweet_conversation_id": "1519227653835923456",
            "tweet_type": "Python tips",
            "created_at": "2022-04-27T08:11:13.000Z"
        },
        {
            "id": 2431,
            "username": "mathsppblog",
            "tweet_id": "1518984288317972481",
            "tweet_text": "When you write about something, how do you go about making corrections or further clarifications?\n\nOn my blog, I just edit the article(s) in question. That's easy.\n\nBut what about Twitter content? E.g., tweets/threads are not editable. What's the best way to go about it?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518984288317972481",
            "tweet_type": "Others",
            "created_at": "2022-04-26T16:04:10.000Z"
        },
        {
            "id": 2432,
            "username": "mathsppblog",
            "tweet_id": "1518865250560495617",
            "tweet_text": "Day 30/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/fd2cHNceSx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRQX4NcX0AAXp7s.jpg\", \"https://pbs.twimg.com/media/FRQX40qXEAAzZvq.jpg\", \"https://pbs.twimg.com/media/FRQX5WxXMAEdHRI.jpg\"]",
            "tweet_conversation_id": "1518865250560495617",
            "tweet_type": "Python tips",
            "created_at": "2022-04-26T08:11:09.000Z"
        },
        {
            "id": 2433,
            "username": "mathsppblog",
            "tweet_id": "1518684133668622343",
            "tweet_text": "TL;DR:\n\nWhen writing code:\n\n - don't check if you *really* have a duck (`type`);\n - instead, check if you have something that looks enough like a duck (`isinstance`).\n\nI hope this made sense!\n\nRetweet the beginning of the thread if it did \ud83d\ude80\n\nAnd I'll see you around \ud83d\udc4b",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:27.000Z"
        },
        {
            "id": 2434,
            "username": "mathsppblog",
            "tweet_id": "1518684132104146944",
            "tweet_text": "I hope this thread cleared some doubts you might have had about `isinstance` and/or duck typing in Python.\n\nIf you have questions, feel free to ask them at the beginning of the thread.\n\nI like writing about Python, so follow me @mathsppblog if you like reading about Python \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:27.000Z"
        },
        {
            "id": 2435,
            "username": "mathsppblog",
            "tweet_id": "1518684130665541640",
            "tweet_text": "Most of the times, you don't need a specific type, so no need to use `type`.\n\nYou just need things that _look_ like those types, hence you use `isinstance`.\n\nCan you go back to some code you wrote previously and find a check with `type` that you can replace with `isinstance`?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:27.000Z"
        },
        {
            "id": 2436,
            "username": "mathsppblog",
            "tweet_id": "1518684128799084551",
            "tweet_text": "With me so far?\n\nBecause this is the essence of duck typing!\n\nIf something walks like a duck and quacks like a duck, just pretend it's a duck and get it over with.\n\nHow do we check, in Python \ud83d\udc0d, if something looks like a duck?\n\nWe use `isinstance`: https://t.co/Aqu7F16YJh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRNzJ0ZX0AE-5Vv.jpg\"]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Python tips",
            "created_at": "2022-04-25T20:11:26.000Z"
        },
        {
            "id": 2437,
            "username": "mathsppblog",
            "tweet_id": "1518684127406563329",
            "tweet_text": "Instances of `Pos` behave pretty much like floats, so maybe we could change the function `sqrt`.\n\nInstead of checking if we really **have** floats or integers...\n\nWe can just check if the argument **looks** like a float or an integer!\n\nIf it does, compute the square root!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:26.000Z"
        },
        {
            "id": 2438,
            "username": "mathsppblog",
            "tweet_id": "1518684125481340928",
            "tweet_text": "How can I use `pow` and string formatting with instances of `Pos`?\n\nBecause, for the purposes of `pow` and formatting, `Pos` objects look *a lot* like floats.\n\n`pow` works on instances of `Pos`...\n\nSo, can I compute square roots of my instances of `Pos`?\n\nAs of now, not really: https://t.co/DqrYmX54iw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRNzI8MWYAMGm9c.jpg\"]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:25.000Z"
        },
        {
            "id": 2439,
            "username": "mathsppblog",
            "tweet_id": "1518684123606433794",
            "tweet_text": "In other words, you don't really *need* the argument to be *really* an `int` or a `float`.\n\nFor example, imagine I create a toy class for positive floats only.\n\nNotice how little I wrote to define `Pos` below...\n\nAnd yet, I can already do plenty with `Pos` objects: https://t.co/WXUJDVIJno",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRNzINwWUAEGYLq.jpg\"]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:25.000Z"
        },
        {
            "id": 2440,
            "username": "mathsppblog",
            "tweet_id": "1518684122209820674",
            "tweet_text": "But when you write code like this, you are not taking into account Python's duck typing.\n\nWhat's duck typing?\n\n\"If it walks like a duck and it quacks like a duck, then it must be a duck.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:25.000Z"
        },
        {
            "id": 2441,
            "username": "mathsppblog",
            "tweet_id": "1518684120406269957",
            "tweet_text": "The error above may be surprising.\n\nI called `sqrt` and get an error in `**`/`pow`..?\n\nSo, maybe you should check the type of the argument.\n\nLet's check if it's an integer or a float, and if it's not, we complain more accurately.\n\nThat's when you might think of using `type`: https://t.co/nwXM3UJQnw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRNzHhhWQAMnk_l.jpg\"]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:24.000Z"
        },
        {
            "id": 2442,
            "username": "mathsppblog",
            "tweet_id": "1518684118560686080",
            "tweet_text": "This also means that, when you write a function, you can't tell what types of arguments you'll get.\n\nE.g., I may write a function to compute square roots of numbers.\n\nI want numbers.\n\nBut nothing stops you from calling my function with a string: https://t.co/QHacH5zA7R",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRNzG4dXoAAfYKL.jpg\"]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:24.000Z"
        },
        {
            "id": 2443,
            "username": "mathsppblog",
            "tweet_id": "1518684116778110978",
            "tweet_text": "\u201cPython is a dynamically typed language.\u201d\n\nWhat does this mean?\n\nIt means that the types of things are dynamic \u2013 they can change.\n\nFor example, a variable `x` can start by holding a string, which can then change into an integer, and then into a list: https://t.co/CElkOSUL4i",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRNzGMrX0AE_qYV.jpg\"]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Others",
            "created_at": "2022-04-25T20:11:23.000Z"
        },
        {
            "id": 2444,
            "username": "mathsppblog",
            "tweet_id": "1518684114634907648",
            "tweet_text": "Python \ud83d\udc0d has 2 built-ins that are often misused: `type` and `isinstance`.\n\nThe built-in `type` tells you the type of an object...\n\nSo, many beginners think you should use `type` to check the type of an object.\n\nSounds reasonable!\n\nBut here's why you should use `isinstance`: https://t.co/NkSHfWmGpD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRNzFi1X0AAFyEc.jpg\"]",
            "tweet_conversation_id": "1518684114634907648",
            "tweet_type": "Python tips",
            "created_at": "2022-04-25T20:11:23.000Z"
        },
        {
            "id": 2445,
            "username": "mathsppblog",
            "tweet_id": "1518502835423518720",
            "tweet_text": "Day 28/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nThe simplest form of a list comprehension is a good substitute for the built-in `map`. https://t.co/eiMl3yfrQs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRLOR_AXwAIXCs2.jpg\"]",
            "tweet_conversation_id": "1518502835423518720",
            "tweet_type": "Python tips",
            "created_at": "2022-04-25T08:11:03.000Z"
        },
        {
            "id": 2446,
            "username": "mathsppblog",
            "tweet_id": "1518289262634061824",
            "tweet_text": "That's it!\n\nI hope you found my example enlightening.\n\nTo recap, recursion is based on:\n - a base case; and\n - the recursive step.\n\nIf you enjoyed this explanation, consider retweeting the first tweet to help others understand recursion!\n\nCheers \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518288648961155074",
            "tweet_type": "Others",
            "created_at": "2022-04-24T18:02:23.000Z"
        },
        {
            "id": 2447,
            "username": "mathsppblog",
            "tweet_id": "1518288908978728964",
            "tweet_text": "If recursion is a concept you don't understand yet, I strongly recommend you start by reading a thread I wrote on the subject \ud83d\udc47\n\nIf you already get recursion, you can go to the next tweet.\n\nhttps://t.co/TVzuEVdJIA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518288648961155074",
            "tweet_type": "Others",
            "created_at": "2022-04-24T18:00:59.000Z"
        },
        {
            "id": 2448,
            "username": "mathsppblog",
            "tweet_id": "1518288648961155074",
            "tweet_text": "I have gotten multiple requests to explain recursion.\n\nRecursion is a maths/computer science concept and it goes beyond Python \ud83d\udc0d, or JavaScript, or whatever language you use.\n\nLet me explain recursion with an example \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518288648961155074",
            "tweet_type": "Python tips",
            "created_at": "2022-04-24T17:59:57.000Z"
        },
        {
            "id": 2449,
            "username": "mathsppblog",
            "tweet_id": "1518140484505460736",
            "tweet_text": "Day 28/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/YnzLjNCEj8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRGEs9IXIAAtXFw.jpg\", \"https://pbs.twimg.com/media/FRGEty3WQAczBRa.jpg\", \"https://pbs.twimg.com/media/FRGEuY3XoAEVU6P.jpg\"]",
            "tweet_conversation_id": "1518140484505460736",
            "tweet_type": "Python tips",
            "created_at": "2022-04-24T08:11:11.000Z"
        },
        {
            "id": 2450,
            "username": "mathsppblog",
            "tweet_id": "1517840200675778560",
            "tweet_text": "Oh hey, we are 30,000 strong!\n\nIf you are new around, welcome \ud83d\udc4b\n\nMy name is Rodrigo and most of my tweets revolve around Python \ud83d\udc0d\n\nI sprinkle some maths \ud83e\udde0 and ML \ud83e\udd16 and other things here and there.\n\nLet's get to know each other. AMA!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517840200675778560",
            "tweet_type": "Python tips",
            "created_at": "2022-04-23T12:17:58.000Z"
        },
        {
            "id": 2451,
            "username": "mathsppblog",
            "tweet_id": "1517778092932177922",
            "tweet_text": "Day 27/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/dfhtiPrKmy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRA7HPFXMAAjxEg.jpg\", \"https://pbs.twimg.com/media/FRA7H5hXwAA7QrQ.jpg\", \"https://pbs.twimg.com/media/FRA7IczXMAAvTo2.jpg\"]",
            "tweet_conversation_id": "1517778092932177922",
            "tweet_type": "Python tips",
            "created_at": "2022-04-23T08:11:10.000Z"
        },
        {
            "id": 2452,
            "username": "mathsppblog",
            "tweet_id": "1517603908553740290",
            "tweet_text": "Do you have Python \ud83d\udc0d plans for this weekend?\n\nOr will you write 0 lines of code during the weekend?\n\nBoth answers are 110% fine \ud83d\ude01\n\nI will try to squeeze in a bit of open source work \ud83d\udcaa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517603908553740290",
            "tweet_type": "Python tips",
            "created_at": "2022-04-22T20:39:02.000Z"
        },
        {
            "id": 2453,
            "username": "mathsppblog",
            "tweet_id": "1517415699869753344",
            "tweet_text": "Day 26/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/I37O7C75dG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQ7xhQEXIAAVCut.png\", \"https://pbs.twimg.com/media/FQ7xhxmXMAAz5l9.jpg\", \"https://pbs.twimg.com/media/FQ7xiZqXoAE0QjW.jpg\"]",
            "tweet_conversation_id": "1517415699869753344",
            "tweet_type": "Python tips",
            "created_at": "2022-04-22T08:11:09.000Z"
        },
        {
            "id": 2454,
            "username": "mathsppblog",
            "tweet_id": "1517213109530034176",
            "tweet_text": "There's 3 main ways to iterate over a dictionary in Python \ud83d\udc0d.\n\nUse:\n\n - `.keys` to go over the keys;\n - `.values` to go over the values;\n - `.items` to go over the key, value pairs.\n\nIterating directly over the dictionary with `for foo in d:` iterates over the keys. https://t.co/ghMoIwzi8Y",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQ45SDpXwAAUH6y.jpg\"]",
            "tweet_conversation_id": "1517213109530034176",
            "tweet_type": "Python tips",
            "created_at": "2022-04-21T18:46:08.000Z"
        },
        {
            "id": 2455,
            "username": "mathsppblog",
            "tweet_id": "1517053314948640768",
            "tweet_text": "Day 25/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/Gc4My4DbYS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQ2n7p6XsAAUqLi.png\", \"https://pbs.twimg.com/media/FQ2n8OOWYAAUv9H.jpg\", \"https://pbs.twimg.com/media/FQ2n80aWYAU5QIH.jpg\"]",
            "tweet_conversation_id": "1517053314948640768",
            "tweet_type": "Python tips",
            "created_at": "2022-04-21T08:11:10.000Z"
        },
        {
            "id": 2456,
            "username": "mathsppblog",
            "tweet_id": "1516690904026947588",
            "tweet_text": "Day 24/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UmRtb9q8HN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQxeVtkXsAAp9uw.jpg\"]",
            "tweet_conversation_id": "1516690904026947588",
            "tweet_type": "Python tips",
            "created_at": "2022-04-20T08:11:04.000Z"
        },
        {
            "id": 2457,
            "username": "mathsppblog",
            "tweet_id": "1516548199233863685",
            "tweet_text": "**SPOILER**\n\nI just wanted to give a shout-out to @ZechCodes who solved this and recorded the solution.\n\nI just have a question...\n\nWhy haven't you eaten those chocolates yet? \ud83e\udd23\n\nhttps://t.co/Mvh9632O8Q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516482044708241415",
            "tweet_type": "Others",
            "created_at": "2022-04-19T22:44:01.000Z"
        },
        {
            "id": 2458,
            "username": "mathsppblog",
            "tweet_id": "1516482049896501250",
            "tweet_text": "@MOI_OrlandoFL @iconparkorlando Give this puzzle your best shot and let me know how it goes!\n\nMaybe record yourself solving it? \ud83d\ude03\n\nIf you manage to solve this, I'll add you to the list of solvers of the puzzle \ud83d\udc47\n\nhttps://t.co/YYyFtiVbBo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516482044708241415",
            "tweet_type": "Others",
            "created_at": "2022-04-19T18:21:10.000Z"
        },
        {
            "id": 2459,
            "username": "mathsppblog",
            "tweet_id": "1516482048092946436",
            "tweet_text": "@MOI_OrlandoFL @iconparkorlando Coins can only move forward!\n\n - Heads can only go right; and\n - Tails can only go left.\n\nCoins can only move one space at a time...\n\nOr jump once over a different coin: https://t.co/lY3ys6B3th",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQugYgsXoAE_TL3.jpg\"]",
            "tweet_conversation_id": "1516482044708241415",
            "tweet_type": "Others",
            "created_at": "2022-04-19T18:21:09.000Z"
        },
        {
            "id": 2460,
            "username": "mathsppblog",
            "tweet_id": "1516482046679568391",
            "tweet_text": "@MOI_OrlandoFL @iconparkorlando What is the challenge?\n\nTo swap the two groups of coins!\n\n - the 3 Heads should go to the right; and\n - the 3 Tails should go to the left.\n\nBut you can only move the coins in a specific way!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516482044708241415",
            "tweet_type": "Others",
            "created_at": "2022-04-19T18:21:09.000Z"
        },
        {
            "id": 2461,
            "username": "mathsppblog",
            "tweet_id": "1516482044708241415",
            "tweet_text": "I have a puzzle for you \ud83e\udde0\ud83e\udd2f\n\nI solved this at the Museum of Illusions lobby @MOI_OrlandoFL, at @iconparkorlando.\n\nYou can play this yourself in your head, or with 6 coins:\n\n3 Heads and 3 Tails.\n\nLay them out like this, with a space in the middle: https://t.co/OY7qwN6rmM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQugX0bWUAEnc7M.png\"]",
            "tweet_conversation_id": "1516482044708241415",
            "tweet_type": "Others",
            "created_at": "2022-04-19T18:21:08.000Z"
        },
        {
            "id": 2462,
            "username": "mathsppblog",
            "tweet_id": "1516408594232659983",
            "tweet_text": "I was going to submit a couple of Python \ud83d\udc0d talks to a Python conference.\n\nI was a bit shocked \ud83d\ude31 to find out that speakers also have to pay a full conference ticket.\n\nAm I being cheap?!\n\nWhat do you think? Conference speakers should...\n\nFeel free to reply w/ your views.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516408594232659983",
            "tweet_type": "Python tips",
            "created_at": "2022-04-19T13:29:17.000Z"
        },
        {
            "id": 2463,
            "username": "mathsppblog",
            "tweet_id": "1516328520259153927",
            "tweet_text": "Day 24/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/uaLo9J5qmC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQsUwMzXIAEavsM.jpg\"]",
            "tweet_conversation_id": "1516328520259153927",
            "tweet_type": "Python tips",
            "created_at": "2022-04-19T08:11:05.000Z"
        },
        {
            "id": 2464,
            "username": "mathsppblog",
            "tweet_id": "1516042874843979783",
            "tweet_text": "I've been training myself to use them in a specific situation:\n\n - when I want to collect things; and\n - the only operations I need are\n   - membership checking;\n   - adding/removing things.\n\nI always used lists for this, but sets are more appropriate.\n\nI rarely use frozen sets.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516042873577345024",
            "tweet_type": "Others",
            "created_at": "2022-04-18T13:16:02.000Z"
        },
        {
            "id": 2465,
            "username": "mathsppblog",
            "tweet_id": "1516042873577345024",
            "tweet_text": "Do you ever use Python \ud83d\udc0d sets?\n\nWhat for?\n\nWhat about frozen sets?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516042873577345024",
            "tweet_type": "Python tips",
            "created_at": "2022-04-18T13:16:02.000Z"
        },
        {
            "id": 2466,
            "username": "mathsppblog",
            "tweet_id": "1515966129835020294",
            "tweet_text": "Day 23/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/6qnrlzqETa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQnLKTzWYAAgIKg.jpg\"]",
            "tweet_conversation_id": "1515966129835020294",
            "tweet_type": "Python tips",
            "created_at": "2022-04-18T08:11:05.000Z"
        },
        {
            "id": 2467,
            "username": "mathsppblog",
            "tweet_id": "1515603757375098882",
            "tweet_text": "Day 22/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/ixwrZwgB2n",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQiBlVZXsAIhXg-.jpg\"]",
            "tweet_conversation_id": "1515603757375098882",
            "tweet_type": "Python tips",
            "created_at": "2022-04-17T08:11:08.000Z"
        },
        {
            "id": 2468,
            "username": "mathsppblog",
            "tweet_id": "1515318097577717782",
            "tweet_text": "For me, one huge thing would be how to use `for` loops properly!\n\nI took way too long to learn about `zip`, `enumerate`, what iterables are, etc...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515318096281620488",
            "tweet_type": "Others",
            "created_at": "2022-04-16T13:16:02.000Z"
        },
        {
            "id": 2469,
            "username": "mathsppblog",
            "tweet_id": "1515318096281620488",
            "tweet_text": "What is something that you took tooooooo long to learn in Python \ud83d\udc0d...\n\nBut would learn right away if you started over?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515318096281620488",
            "tweet_type": "Python tips",
            "created_at": "2022-04-16T13:16:02.000Z"
        },
        {
            "id": 2470,
            "username": "mathsppblog",
            "tweet_id": "1515241353629868032",
            "tweet_text": "Day 21/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/BP21I8dHlD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQc3-yCWQAUmK-J.jpg\"]",
            "tweet_conversation_id": "1515241353629868032",
            "tweet_type": "Python tips",
            "created_at": "2022-04-16T08:11:05.000Z"
        },
        {
            "id": 2471,
            "username": "mathsppblog",
            "tweet_id": "1515060237442691080",
            "tweet_text": "But wait!\n\nThere is one example left!\n\nCan you tell me what the result is?\n\nAnd can you justify it with the help of the built-in `ord`?\n\nGive it a shot \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:23.000Z"
        },
        {
            "id": 2472,
            "username": "mathsppblog",
            "tweet_id": "1515060236003983363",
            "tweet_text": "TL;DR:\n\n - for words, think of a dictionary (the book) as a mnemonic;\n - strings are compared char by char;\n - short strings come first (\"car\" vs \"carnivore\");\n - characters are ordered by their Unicode code point;\n - the built-in `ord` returns the code point of a char.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:23.000Z"
        },
        {
            "id": 2473,
            "username": "mathsppblog",
            "tweet_id": "1515060234007552006",
            "tweet_text": "The 1 comes before the 2 in the Unicode standard, so `\"10\" &lt; \"2.5\"` evaluates to `True`.\n\n**Attention**: this shows that comparing strings that contain numbers is **different** from comparing the numbers themselves.\n\nThis can be misleading, because some times the results agree: https://t.co/VBDWyEGVlA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQaTPMAXwAkHNMJ.jpg\"]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:22.000Z"
        },
        {
            "id": 2474,
            "username": "mathsppblog",
            "tweet_id": "1515060232631767041",
            "tweet_text": "With this in mind, you should be able to answer the next examples.\n\nNow, let us tackle the comparison `\"10\" &lt; \"2.5\"`.\n\nIn the Unicode standard, the digits 0 to 9 have consecutive code points.\n\nSo, when comparing `\"10\"` to `\"2.5\"`, we start with comparing the `\"1\"` and the `\"2\"`:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:22.000Z"
        },
        {
            "id": 2475,
            "username": "mathsppblog",
            "tweet_id": "1515060230551388162",
            "tweet_text": "So, in other words, Python didn't come up with random ids for all the characters.\n\nIt actually borrows those ids from the Unicode standard.\n\nHow can you check the codepoint of a character?\n\nWith the `ord` built-in: https://t.co/xBRmDMKGkA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQaTOj2XoA0mOjw.png\"]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:22.000Z"
        },
        {
            "id": 2476,
            "username": "mathsppblog",
            "tweet_id": "1515060229091860494",
            "tweet_text": "So, the solution that people came up with is to attach an integer to each character.\n\nThink of it like an id.\n\nThen, when comparing characters, we compare the associated ids instead.\n\nIn reality, the id of each character is its Unicode code point...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:21.000Z"
        },
        {
            "id": 2477,
            "username": "mathsppblog",
            "tweet_id": "1515060227686678530",
            "tweet_text": "The thing that comes first is actually the upper case R!\n\nWhy?\n\nPython can compare _any_ two strings.\n\nEven strings that don't have letters, for example.\n\nAnd all those strings need to be comparable to each other.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:21.000Z"
        },
        {
            "id": 2478,
            "username": "mathsppblog",
            "tweet_id": "1515060226260709387",
            "tweet_text": "Well, now we can't just think about dictionaries.\n\nWhy is that?\n\nBecause `\"Rice\"` and `\"corn\"` are capitalised differently.\n\nSo, we need to know what comes first:\n\n - an upper case R?\n - or a lower case C?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:21.000Z"
        },
        {
            "id": 2479,
            "username": "mathsppblog",
            "tweet_id": "1515060224280907778",
            "tweet_text": "Now we are ready to tackle the next set of examples:\n\nWhat is the result of `\"Rice\" &lt;= \"corn\"`? https://t.co/nJvgL7Szrw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQaTN9dXEAEPuSK.png\"]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:20.000Z"
        },
        {
            "id": 2480,
            "username": "mathsppblog",
            "tweet_id": "1515060222913617926",
            "tweet_text": "What about `\"car\" &gt; \"carnivore\"`?\n\n - both start with C;\n - 2nd letter of both is A; and\n - 3rd letter of both is R.\n\nBut then, one word ends and the other continues...\n\nWhat comes first in the dictionary?\n\nThe short one!\n\nSo `\"car\" &gt; \"carnivore\"` is actually false.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:20.000Z"
        },
        {
            "id": 2481,
            "username": "mathsppblog",
            "tweet_id": "1515060221449805829",
            "tweet_text": "- \"bar\" starts with B.\n - \"acorn\" starts with A.\n\nSo, `\"bar\" &gt; \"acorn\"` is `True`.\n\nWhat about `\"dice\" &gt; \"dolphin\"`?\n\nThink about it.\n\nThey start with the same letter, D.\n\nBut then, \"dice\" has an I and \"dolphin\" has an O.\n\nI comes before O, so \"dice\" comes before \"dolphin\".",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:19.000Z"
        },
        {
            "id": 2482,
            "username": "mathsppblog",
            "tweet_id": "1515060219549790210",
            "tweet_text": "That's why I like looking at `str1 &lt; str2` and reading:\n\n\u201cDoes `str1` come **before** `str2` in the dictionary?\u201d\n\nAnd I look at `str1 &gt; str2` and I read:\n\n\u201cDoes `str1` come **after** `str2` in the dictionary?\"\n\nWith this in mind, what are the results of the comparisons below? https://t.co/7uxL3a1zme",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQaTNZ5XIAktqfu.png\"]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:19.000Z"
        },
        {
            "id": 2483,
            "username": "mathsppblog",
            "tweet_id": "1515060218073423876",
            "tweet_text": "Have you ever seen a dictionary? The book kind?\n\nThat book with thousands of words and their meanings.\n\nHow are words ordered in there?\n\nIn alphabetical order, right?\n\nFirst, we have all the words starting with A.\n\nThen, all the words starting with B.\n\nAnd so on...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Others",
            "created_at": "2022-04-15T20:11:19.000Z"
        },
        {
            "id": 2484,
            "username": "mathsppblog",
            "tweet_id": "1515060216232132609",
            "tweet_text": "How are strings ordered in Python \ud83d\udc0d?\n\nHow do the operators &lt;, &lt;=, &gt;=, and &gt;, work for strings?\n\nYou can find a couple of examples below.\n\nCan you tell what the outputs will be? https://t.co/4WV533JMsi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQaTMymX0AcjtcO.jpg\"]",
            "tweet_conversation_id": "1515060216232132609",
            "tweet_type": "Python tips",
            "created_at": "2022-04-15T20:11:18.000Z"
        },
        {
            "id": 2485,
            "username": "mathsppblog",
            "tweet_id": "1514971147368120330",
            "tweet_text": "Mike is sharing his Python 101 book for free for a limited time!\n\nWhat a cool offer!\n\nIf you pair Mike's book with my Pydon'ts book (link in my profile) here is what will happen to your Python skills:\n\n\ud83d\ude80\ud83d\ude80\ud83d\ude80\n\nThey will take off!\n\nThere is NO excuse for you to not learn Python \ud83d\udc0d https://t.co/mFoxR2ATP9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514971147368120330",
            "tweet_type": "Python tips",
            "created_at": "2022-04-15T14:17:22.000Z"
        },
        {
            "id": 2486,
            "username": "mathsppblog",
            "tweet_id": "1514878960521338881",
            "tweet_text": "Day 20/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nList comprehensions can include filters.\n\nThese filters let you only use the values that you want.\n\nHere is a diagram comparing the loop + if + append to a list comprehension \ud83d\udc47 https://t.co/ckAybn8lis",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQXuYslWQAg2dm9.jpg\"]",
            "tweet_conversation_id": "1514878960521338881",
            "tweet_type": "Python tips",
            "created_at": "2022-04-15T08:11:03.000Z"
        },
        {
            "id": 2487,
            "username": "mathsppblog",
            "tweet_id": "1514632584030048269",
            "tweet_text": "I need your help.\n\nI have a Discord server with 500+ people interested in (Python) programming.\n\nHow do I turn that into a **community**?\n\nHow do I get people to talk, help each other, ask questions..?\n\nRight now, it's just... Silent \ud83e\udd23",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514632584030048269",
            "tweet_type": "Others",
            "created_at": "2022-04-14T15:52:03.000Z"
        },
        {
            "id": 2488,
            "username": "mathsppblog",
            "tweet_id": "1514516598043914240",
            "tweet_text": "Day 19/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the two snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/qr6V2cnLgO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSkz2NWUAUPbGd.jpg\", \"https://pbs.twimg.com/media/FQSk0d7XEAUCupS.jpg\"]",
            "tweet_conversation_id": "1514516598043914240",
            "tweet_type": "Python tips",
            "created_at": "2022-04-14T08:11:09.000Z"
        },
        {
            "id": 2489,
            "username": "mathsppblog",
            "tweet_id": "1514154210375487493",
            "tweet_text": "Day 18/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the two snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/S68ihTi3O6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQNbOH3XMAI1FYQ.png\", \"https://pbs.twimg.com/media/FQNbOuvXIAIY86Q.jpg\"]",
            "tweet_conversation_id": "1514154210375487493",
            "tweet_type": "Python tips",
            "created_at": "2022-04-13T08:11:10.000Z"
        },
        {
            "id": 2490,
            "username": "mathsppblog",
            "tweet_id": "1513950861453627406",
            "tweet_text": "In the last 6 hours, more than 1200 people downloaded my free Python \ud83d\udc0d book.\n\nIt is an honour that YOU are trusting ME to help you master Python!\n\nAlso, huge shout-out to @svpino for helping me reach a massive audience!\n\nLet's go \ud83d\ude80 https://t.co/Lxyohs2m7J",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513950861453627406",
            "tweet_type": "Python tips",
            "created_at": "2022-04-12T18:43:07.000Z"
        },
        {
            "id": 2491,
            "username": "mathsppblog",
            "tweet_id": "1513791816776228866",
            "tweet_text": "Day 17/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's an exercise for you \ud83d\udcd6\u270d\ufe0f\n\nRun the two snippets of code.\n\nWhat do their results look like?\n\nWhat parts of the code are different in the snippets?\nAnd what parts are the same? https://t.co/Q0r2mcgmL4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQIRoCXXIAEhS8p.png\", \"https://pbs.twimg.com/media/FQIRoo3X0AMYct7.jpg\"]",
            "tweet_conversation_id": "1513791816776228866",
            "tweet_type": "Python tips",
            "created_at": "2022-04-12T08:11:08.000Z"
        },
        {
            "id": 2492,
            "username": "mathsppblog",
            "tweet_id": "1513621673698013184",
            "tweet_text": "@f But wait, there is even MORE!\n\nMy original snippet of code wasn't like this.\n\nThere was a subtle (but not so subtle!) difference.\n\nHere is the original code: https://t.co/swzha7ysUn\n\nCan you spot the differences?\n\nCan you explain them?\n\nHint: look at the final result.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:03.000Z"
        },
        {
            "id": 2493,
            "username": "mathsppblog",
            "tweet_id": "1513621672087203843",
            "tweet_text": "@f Here are some of the things we have seen:\n\n - callable classes\n - custom operators for classes (the `|`)\n - decorators (and classes as decorators)\n - `*args` and `**kwargs`\n - function composition\n - lambdas\n - and more!\n\nFollow me @mathsppblog for more \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:03.000Z"
        },
        {
            "id": 2494,
            "username": "mathsppblog",
            "tweet_id": "1513621670719852544",
            "tweet_text": "@f This is a lot to digest!\n\nMy number 1 advice?\n\nWrite the code and play with it.\n\nAdd prints.\n\nTest your understanding.\n\nFor your convenience, this thread is on my site.\n\nThis means you can bookmark the link or go there and copy &amp; paste the code: https://t.co/bF07zerCkC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:02.000Z"
        },
        {
            "id": 2495,
            "username": "mathsppblog",
            "tweet_id": "1513621668974968836",
            "tweet_text": "@f This is the pattern of decorators!\n\nInstead of doing the final assignment by hand, after making the functions go through `F`, I can just write `@F` at the top.\n\nBy writing the `@F`, Python does that assignment for me.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:02.000Z"
        },
        {
            "id": 2496,
            "username": "mathsppblog",
            "tweet_id": "1513621667473408000",
            "tweet_text": "@f Now, take a look at the pattern that emerges!\n\nI took the functions `add_two` and `divide_3_floor` and tweaked them.\n\nInstead of letting them be vanilla functions, I added some functionality.\n\nI decorated them with some bells and whistles.\n\nI **decorated** them...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:01.000Z"
        },
        {
            "id": 2497,
            "username": "mathsppblog",
            "tweet_id": "1513621665376256002",
            "tweet_text": "@f They could've gone through `F` like `str` did:\n\nBecause I only care about the cool version of these functions, I can reuse the same name.\n\n(For `s` and `str` I used two names: `s = F(str)`.) https://t.co/NDV3MR0d9r",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF211CWUAQzyFU.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:01.000Z"
        },
        {
            "id": 2498,
            "username": "mathsppblog",
            "tweet_id": "1513621663262421002",
            "tweet_text": "The final piece of the puzzle is the `@F` on top of the definitions of `add_two` and `divide_3_floor`:\n\nBy using the keyword `def` I can create regular Python functions, right?\n\nBut I want these to be cool functions I can combine.\n\nSo, they need to go through `F`.\n\nBut how? https://t.co/E71rbLgynB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF21REXwAAYIV2.png\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:00.000Z"
        },
        {
            "id": 2499,
            "username": "mathsppblog",
            "tweet_id": "1513621661404250130",
            "tweet_text": "In the end, we just add the `F` around that so that the lambda can also be combined with other things.\n\nThe lambda, by itself, is a regular lambda.\n\nIf I put it inside an `F`, we get one of these cool things that can be combined with each other: https://t.co/hhrvv0Ps8t",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF20t2XEAIiZal.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:00.000Z"
        },
        {
            "id": 2500,
            "username": "mathsppblog",
            "tweet_id": "1513621659508518921",
            "tweet_text": "We could define a regular function with `def` and whatnot, but I opted for something leaner.\n\nBy using a `lambda`, I can write a function that wraps `self` and `other`: https://t.co/YJmkuXgZ7U",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF20GMXsAc0X3G.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:55:00.000Z"
        },
        {
            "id": 2501,
            "username": "mathsppblog",
            "tweet_id": "1513621658044612610",
            "tweet_text": "What are we missing?\n\nNot too much, now!\n\nRemember how instances of `F` are created?\n\nWe need to feed `F` with a function.\n\nSo, in order to combine `F(int)` with `F(bin)`, which are `self` and `other`, respectively, we need to wrap them in a function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:59.000Z"
        },
        {
            "id": 2502,
            "username": "mathsppblog",
            "tweet_id": "1513621656320847876",
            "tweet_text": "And we want the whole thing to be an `F`.\n\nWhy?\n\nSo that we can later combine that _again_ if we want to!\n\nThat explains part of what is going on: https://t.co/SINPQWq4LW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2zgMXMAIl8th.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:59.000Z"
        },
        {
            "id": 2503,
            "username": "mathsppblog",
            "tweet_id": "1513621654664097804",
            "tweet_text": "Inside `__or__`, after writing `F(int) | F(bin)`, these are the arguments:\n\n - `self` is `F(int)`; and\n - `other` is `F(bin)`.\n\nWe want the combination to be an `F` that calls `bin` after calling `int`:\n\nWe want the function inside `other` after the function inside `self`. https://t.co/TDWe5TlTZa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2y5lWQAkqTRc.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:58.000Z"
        },
        {
            "id": 2504,
            "username": "mathsppblog",
            "tweet_id": "1513621652839571457",
            "tweet_text": "When we write `F(int) | F(bin)`, we want to combine the `F(int)` with the `F(bin)`.\n\nAlso, when we write `F(int) | F(bin)`, the dunder `__or__` is called.\n\nWhen that happens, we go inside the `__or__` that looks like this:\n\nWhat's what? https://t.co/LSVaz2ebwu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2yStXIAoRINE.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:58.000Z"
        },
        {
            "id": 2505,
            "username": "mathsppblog",
            "tweet_id": "1513621651090518027",
            "tweet_text": "Remember that `F`s are supposed to look like functions.\n\nWhen we combine two `F`s, we want to create a new one that represents the two `F`s in succession.\n\nLet us use the built-ins `int` and `bin` to see what happens when we do `F(int) | F(bin)`. https://t.co/YXz3Stjdkx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2xuVX0AMD7xH.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:58.000Z"
        },
        {
            "id": 2506,
            "username": "mathsppblog",
            "tweet_id": "1513621649702146056",
            "tweet_text": "By implementing `__or__`, we hijack the operator `|` and we get to use it for whatever we want!\n\nIn this case, we want `|` to be able to combine instances of `F` with each other.\n\nHow do we do that?\n\n\u201cSimple\u201d:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:57.000Z"
        },
        {
            "id": 2507,
            "username": "mathsppblog",
            "tweet_id": "1513621648313884675",
            "tweet_text": "Now we know what is going on with `__call__`...\n\nBut what's up with `__or__`..?\n\nThe dunder method `__or__` is what is called when we use `|` next to instances of `F`.\n\nBut what gives?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:57.000Z"
        },
        {
            "id": 2508,
            "username": "mathsppblog",
            "tweet_id": "1513621646925512710",
            "tweet_text": "One good thing you can do is modify `__call__` to print `args` and `kwargs` before the `return`.\n\nThat will help you visualise things!\n\nIt's also something I do very often:\n\nI tweak the code I'm studying to see what is really going on.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:57.000Z"
        },
        {
            "id": 2509,
            "username": "mathsppblog",
            "tweet_id": "1513621645109383172",
            "tweet_text": "By using `*args` and `**kwargs` again, we are trying to unpack the arguments we got so far.\n\nBy unpacking those arguments, we pass them down to `self.f`, which is the original function:\n\nCan you trace the journey that the `15` makes? https://t.co/DbIHAQw9Cg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2xGDXwA0ODyE.png\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:56.000Z"
        },
        {
            "id": 2510,
            "username": "mathsppblog",
            "tweet_id": "1513621643394007050",
            "tweet_text": "Now we can understand the signature of `__call__`:\n\n`def __call__(self, *args, **kwargs)`\n\nBut there is more!\n\nWhat about the body of the definition?\n\nWhy do we use `*args` and `**kwargs` again..? https://t.co/FZxA7HPrs9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2wnWXMAUl6rt.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:56.000Z"
        },
        {
            "id": 2511,
            "username": "mathsppblog",
            "tweet_id": "1513621641519058945",
            "tweet_text": "This cool behaviour comes from using `*` and `**` on the left of the parameters.\n\nThe words `args` and `kwargs` are just the common choice in Python!\n\nWe can pick other names: https://t.co/v85OuWm93S",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2wDHXEAYwqQp.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:55.000Z"
        },
        {
            "id": 2512,
            "username": "mathsppblog",
            "tweet_id": "1513621639669465089",
            "tweet_text": "Similarly, by using `**kwargs`, a function can receive however many **keyword** arguments:\n\nOh, by the way, here is an important remark: https://t.co/MylhBTBCxc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2vcPWUAgfxEg.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:55.000Z"
        },
        {
            "id": 2513,
            "username": "mathsppblog",
            "tweet_id": "1513621637698146306",
            "tweet_text": "So, we have to plan for _any_ and _all_ cases!\n\nHow do we do that?\n\nWith `*args` and `**kwargs`.\n\nBy using `*args`, a function can receive however many **positional** arguments: https://t.co/hnT7pzZimD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2u3eXwAAM_bi.png\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:54.000Z"
        },
        {
            "id": 2514,
            "username": "mathsppblog",
            "tweet_id": "1513621636309786629",
            "tweet_text": "But the original functions might be **arbitrary** functions, right?\n\nThe original function can be a function with 0 or 3 arguments.\n\nIt can be a function with an argument called `this_is_just_an_argument`.\n\nWe can't _guess_ how many/what arguments we'll have...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:54.000Z"
        },
        {
            "id": 2515,
            "username": "mathsppblog",
            "tweet_id": "1513621634627817475",
            "tweet_text": "So, what's the behaviour of `s` when we call it with `s(...)`?\n\nTo understand that, we need to look at `__call__`.\n\nFirst, let us understand the signature:\n\nWhat do the `*args*` and `**kwargs` do?\n\nThink with me:\n\nInstances of `F` must act like the original functions, right? https://t.co/8R4n7X03E5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2uRPXwAA3RHF.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:54.000Z"
        },
        {
            "id": 2516,
            "username": "mathsppblog",
            "tweet_id": "1513621632950091781",
            "tweet_text": "In other words, after I write `s = F(str)`, I need to be able to write `s(...)`.\n\nI need to be able to call `s` (hence, callable).\n\nThat is why I needed to implement the dunder method `__call__`.\n\nThe dunder method `__call__` is responsible for making instances of `F` callable. https://t.co/A0bpMzhqBK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2tsMWUAUvMVD.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:53.000Z"
        },
        {
            "id": 2517,
            "username": "mathsppblog",
            "tweet_id": "1513621631561834507",
            "tweet_text": "Then, the instance of `F` just stores that function in `self.f`.\n\nWhy?\n\nFor later use \ud83d\ude43\n\nThe idea is that instances of `F` **behave** like the functions passed in originally.\n\nSo, if an instance of `F` must behave like a function, it must be callable.\n\nCall-huh?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:53.000Z"
        },
        {
            "id": 2518,
            "username": "mathsppblog",
            "tweet_id": "1513621629506670600",
            "tweet_text": "The class `F` only expects an argument `f`.\n\nI used a lowercase `f`, not because I wanted to be mysterious, but because `f` is mathematician-speak for a function.\n\nSo, to create an instance of `F`, I just feed it a function.\n\nSo, `s = F(str)` creates an `F` out of `str`. https://t.co/LMu9mq1HFf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2tI2WUAo2HVm.png\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:52.000Z"
        },
        {
            "id": 2519,
            "username": "mathsppblog",
            "tweet_id": "1513621627627614229",
            "tweet_text": "Did you notice how I defined `s`?\n\nI created `s` by taking the built-in `str` and putting it through `F`.\n\nBut what IS `F`?\n\nIt's just a class I created, right?\n\nBut it's a very special class \ud83d\ude09 https://t.co/VMZdQcNYgl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2smHXIAM7feL.png\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:52.000Z"
        },
        {
            "id": 2520,
            "username": "mathsppblog",
            "tweet_id": "1513621626268618763",
            "tweet_text": "Formally speaking, the operator pipe `|` is being used to do function composition.\n\nIn other words, by using `|` I have another way of composing functions in a convenient way.\n\nBut I lied \ud83d\ude05 `add_two`, `divide_3_floor`, and `s`, aren't \u201cfunctions\u201d per se...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:52.000Z"
        },
        {
            "id": 2521,
            "username": "mathsppblog",
            "tweet_id": "1513621624397963266",
            "tweet_text": "In my code, I wrote `f = add_two | divide_3_floor | s`.\n\nSo, when I write `f(7)`, it actually means something else: https://t.co/6b67OrE6UC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2sA2XIAEQg6y.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:51.000Z"
        },
        {
            "id": 2522,
            "username": "mathsppblog",
            "tweet_id": "1513621623026376709",
            "tweet_text": "The `|` is doing some \u201cmagic\u201d I asked it to do, this is not default behaviour in Python.\n\n`f = g | h` means that the function `f` corresponds to calling `h` after calling `g`.\n\nSo, `f(x)` actually means `h(g(x))`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:51.000Z"
        },
        {
            "id": 2523,
            "username": "mathsppblog",
            "tweet_id": "1513621621327765511",
            "tweet_text": "Let us start... from the end!\n\nThe assignment to `f` takes 3 functions:\n\n - `add_two`\n - `divide_3_floor`\n - `s`\n\nand then combines them.\n\nThe `|` is in charge of doing this combination, but what combination is this? https://t.co/nVCzkxclp4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2rXQXEAs6tnW.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:50.000Z"
        },
        {
            "id": 2524,
            "username": "mathsppblog",
            "tweet_id": "1513621619373137924",
            "tweet_text": "Here is some Python \ud83d\udc0d code using\n\n - decorators\n - callable classes\n - custom operators\n - \u201cfunctional\u201d function composition\n - arbitrary args and kwargs\n\nHere is a breakdown of everything that is going on \ud83d\udc47 https://t.co/s0gHVvl9wD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2quZWYAYhl_2.jpg\"]",
            "tweet_conversation_id": "1513621619373137924",
            "tweet_type": "Python tips",
            "created_at": "2022-04-11T20:54:50.000Z"
        },
        {
            "id": 2525,
            "username": "mathsppblog",
            "tweet_id": "1513621437772451849",
            "tweet_text": "@f But wait, there is even MORE!\n\nMy original snippet of code wasn't like this.\n\nThere was a subtle (but not so subtle!) difference.\n\nHere is the original code: https://t.co/swzha7xV4P\n\nCan you spot the differences?\n\nCan you explain them?\n\nHint: look at the final result.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:07.000Z"
        },
        {
            "id": 2526,
            "username": "mathsppblog",
            "tweet_id": "1513621436325376011",
            "tweet_text": "@f Here are some of the things we have seen:\n\n - callable classes\n - custom operators for classes (the `|`)\n - decorators (and classes as decorators)\n - `*args` and `**kwargs`\n - function composition\n - lambdas\n - and more!\n\nFollow me @mathsppblog for more \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:06.000Z"
        },
        {
            "id": 2527,
            "username": "mathsppblog",
            "tweet_id": "1513621434907639813",
            "tweet_text": "@f This is a lot to digest!\n\nMy number 1 advice?\n\nWrite the code and play with it.\n\nAdd prints.\n\nTest your understanding.\n\nFor your convenience, this thread is on my site.\n\nThis means you can bookmark the link or go there and copy &amp; paste the code: https://t.co/bF07zerCkC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:06.000Z"
        },
        {
            "id": 2528,
            "username": "mathsppblog",
            "tweet_id": "1513621433456414720",
            "tweet_text": "@f This is the pattern of decorators!\n\nInstead of doing the final assignment by hand, after making the functions go through `F`, I can just write `@F` at the top.\n\nBy writing the `@F`, Python does that assignment for me.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:06.000Z"
        },
        {
            "id": 2529,
            "username": "mathsppblog",
            "tweet_id": "1513621431908810757",
            "tweet_text": "@f Now, take a look at the pattern that emerges!\n\nI took the functions `add_two` and `divide_3_floor` and tweaked them.\n\nInstead of letting them be vanilla functions, I added some functionality.\n\nI decorated them with some bells and whistles.\n\nI **decorated** them...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:05.000Z"
        },
        {
            "id": 2530,
            "username": "mathsppblog",
            "tweet_id": "1513621430059118598",
            "tweet_text": "@f They could've gone through `F` like `str` did:\n\nBecause I only care about the cool version of these functions, I can reuse the same name.\n\n(For `s` and `str` I used two names: `s = F(str)`.) https://t.co/2GCVHkp4TC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2oEiWUAIccqJ.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:05.000Z"
        },
        {
            "id": 2531,
            "username": "mathsppblog",
            "tweet_id": "1513621427689250828",
            "tweet_text": "The final piece of the puzzle is the `@F` on top of the definitions of `add_two` and `divide_3_floor`:\n\nBy using the keyword `def` I can create regular Python functions, right?\n\nBut I want these to be cool functions I can combine.\n\nSo, they need to go through `F`.\n\nBut how? https://t.co/TIyGKNdT8c",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2ndhWUAIsUcY.png\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:04.000Z"
        },
        {
            "id": 2532,
            "username": "mathsppblog",
            "tweet_id": "1513621425797713926",
            "tweet_text": "In the end, we just add the `F` around that so that the lambda can also be combined with other things.\n\nThe lambda, by itself, is a regular lambda.\n\nIf I put it inside an `F`, we get one of these cool things that can be combined with each other: https://t.co/1InWI5dgvD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2m5-XIAYLnWS.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:04.000Z"
        },
        {
            "id": 2533,
            "username": "mathsppblog",
            "tweet_id": "1513621423826350086",
            "tweet_text": "We could define a regular function with `def` and whatnot, but I opted for something leaner.\n\nBy using a `lambda`, I can write a function that wraps `self` and `other`: https://t.co/kdUVcJoyui",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2mUBXoAQIuqE.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:03.000Z"
        },
        {
            "id": 2534,
            "username": "mathsppblog",
            "tweet_id": "1513621422442258442",
            "tweet_text": "What are we missing?\n\nNot too much, now!\n\nRemember how instances of `F` are created?\n\nWe need to feed `F` with a function.\n\nSo, in order to combine `F(int)` with `F(bin)`, which are `self` and `other`, respectively, we need to wrap them in a function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:03.000Z"
        },
        {
            "id": 2535,
            "username": "mathsppblog",
            "tweet_id": "1513621420768649224",
            "tweet_text": "And we want the whole thing to be an `F`.\n\nWhy?\n\nSo that we can later combine that _again_ if we want to!\n\nThat explains part of what is going on: https://t.co/P2mFg5oWx4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2loXXsAItJ3O.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:03.000Z"
        },
        {
            "id": 2536,
            "username": "mathsppblog",
            "tweet_id": "1513621419007041543",
            "tweet_text": "Inside `__or__`, after writing `F(int) | F(bin)`, these are the arguments:\n\n - `self` is `F(int)`; and\n - `other` is `F(bin)`.\n\nWe want the combination to be an `F` that calls `bin` after calling `int`:\n\nWe want the function inside `other` after the function inside `self`. https://t.co/K52SJB7Yj4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2lCyWYAsQjLT.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:02.000Z"
        },
        {
            "id": 2537,
            "username": "mathsppblog",
            "tweet_id": "1513621416742166537",
            "tweet_text": "When we write `F(int) | F(bin)`, we want to combine the `F(int)` with the `F(bin)`.\n\nAlso, when we write `F(int) | F(bin)`, the dunder `__or__` is called.\n\nWhen that happens, we go inside the `__or__` that looks like this:\n\nWhat's what? https://t.co/OHGhARXtvu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2khKWYAUxqLW.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:02.000Z"
        },
        {
            "id": 2538,
            "username": "mathsppblog",
            "tweet_id": "1513621414863118344",
            "tweet_text": "Remember that `F`s are supposed to look like functions.\n\nWhen we combine two `F`s, we want to create a new one that represents the two `F`s in succession.\n\nLet us use the built-ins `int` and `bin` to see what happens when we do `F(int) | F(bin)`. https://t.co/V7MwHwQ6e2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2j5UWQAcx1-u.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:01.000Z"
        },
        {
            "id": 2539,
            "username": "mathsppblog",
            "tweet_id": "1513621413319618566",
            "tweet_text": "By implementing `__or__`, we hijack the operator `|` and we get to use it for whatever we want!\n\nIn this case, we want `|` to be able to combine instances of `F` with each other.\n\nHow do we do that?\n\n\u201cSimple\u201d:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:01.000Z"
        },
        {
            "id": 2540,
            "username": "mathsppblog",
            "tweet_id": "1513621411969081348",
            "tweet_text": "Now we know what is going on with `__call__`...\n\nBut what's up with `__or__`..?\n\nThe dunder method `__or__` is what is called when we use `|` next to instances of `F`.\n\nBut what gives?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:00.000Z"
        },
        {
            "id": 2541,
            "username": "mathsppblog",
            "tweet_id": "1513621410555600897",
            "tweet_text": "One good thing you can do is modify `__call__` to print `args` and `kwargs` before the `return`.\n\nThat will help you visualise things!\n\nIt's also something I do very often:\n\nI tweak the code I'm studying to see what is really going on.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:00.000Z"
        },
        {
            "id": 2542,
            "username": "mathsppblog",
            "tweet_id": "1513621408613609474",
            "tweet_text": "By using `*args` and `**kwargs` again, we are trying to unpack the arguments we got so far.\n\nBy unpacking those arguments, we pass them down to `self.f`, which is the original function:\n\nCan you trace the journey that the `15` makes? https://t.co/8BEFmQFgCI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2jFtWYAwnQY1.png\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:54:00.000Z"
        },
        {
            "id": 2543,
            "username": "mathsppblog",
            "tweet_id": "1513621406881300488",
            "tweet_text": "Now we can understand the signature of `__call__`:\n\n`def __call__(self, *args, **kwargs)`\n\nBut there is more!\n\nWhat about the body of the definition?\n\nWhy do we use `*args` and `**kwargs` again..? https://t.co/OPdprurWtV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2iiOX0A8C3LB.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:59.000Z"
        },
        {
            "id": 2544,
            "username": "mathsppblog",
            "tweet_id": "1513621405006540803",
            "tweet_text": "This cool behaviour comes from using `*` and `**` on the left of the parameters.\n\nThe words `args` and `kwargs` are just the common choice in Python!\n\nWe can pick other names: https://t.co/nUTseJxDn9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2h-eXEAQmPaM.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:59.000Z"
        },
        {
            "id": 2545,
            "username": "mathsppblog",
            "tweet_id": "1513621403253321740",
            "tweet_text": "Similarly, by using `**kwargs`, a function can receive however many **keyword** arguments:\n\nOh, by the way, here is an important remark: https://t.co/kk6XUT2Po1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2hXyX0AEbLKh.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:58.000Z"
        },
        {
            "id": 2546,
            "username": "mathsppblog",
            "tweet_id": "1513621401269329922",
            "tweet_text": "So, we have to plan for _any_ and _all_ cases!\n\nHow do we do that?\n\nWith `*args` and `**kwargs`.\n\nBy using `*args`, a function can receive however many **positional** arguments: https://t.co/4beTmgIAZw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2g0YWQAk_uZI.png\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:58.000Z"
        },
        {
            "id": 2547,
            "username": "mathsppblog",
            "tweet_id": "1513621399839068170",
            "tweet_text": "But the original functions might be **arbitrary** functions, right?\n\nThe original function can be a function with 0 or 3 arguments.\n\nIt can be a function with an argument called `this_is_just_an_argument`.\n\nWe can't _guess_ how many/what arguments we'll have...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:58.000Z"
        },
        {
            "id": 2548,
            "username": "mathsppblog",
            "tweet_id": "1513621397993664522",
            "tweet_text": "So, what's the behaviour of `s` when we call it with `s(...)`?\n\nTo understand that, we need to look at `__call__`.\n\nFirst, let us understand the signature:\n\nWhat do the `*args*` and `**kwargs` do?\n\nThink with me:\n\nInstances of `F` must act like the original functions, right? https://t.co/73VUfEBXVZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2gNlX0AEJ9fc.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:57.000Z"
        },
        {
            "id": 2549,
            "username": "mathsppblog",
            "tweet_id": "1513621396282347521",
            "tweet_text": "In other words, after I write `s = F(str)`, I need to be able to write `s(...)`.\n\nI need to be able to call `s` (hence, callable).\n\nThat is why I needed to implement the dunder method `__call__`.\n\nThe dunder method `__call__` is responsible for making instances of `F` callable. https://t.co/4S48XKqqpy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2fiuXsAkxxvh.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:57.000Z"
        },
        {
            "id": 2550,
            "username": "mathsppblog",
            "tweet_id": "1513621394780823556",
            "tweet_text": "Then, the instance of `F` just stores that function in `self.f`.\n\nWhy?\n\nFor later use \ud83d\ude43\n\nThe idea is that instances of `F` **behave** like the functions passed in originally.\n\nSo, if an instance of `F` must behave like a function, it must be callable.\n\nCall-huh?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:56.000Z"
        },
        {
            "id": 2551,
            "username": "mathsppblog",
            "tweet_id": "1513621392712945675",
            "tweet_text": "The class `F` only expects an argument `f`.\n\nI used a lowercase `f`, not because I wanted to be mysterious, but because `f` is mathematician-speak for a function.\n\nSo, to create an instance of `F`, I just feed it a function.\n\nSo, `s = F(str)` creates an `F` out of `str`. https://t.co/AjZ5Ssj0Np",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2e-kXEAEsXCm.png\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:56.000Z"
        },
        {
            "id": 2552,
            "username": "mathsppblog",
            "tweet_id": "1513621390871646213",
            "tweet_text": "Did you notice how I defined `s`?\n\nI created `s` by taking the built-in `str` and putting it through `F`.\n\nBut what IS `F`?\n\nIt's just a class I created, right?\n\nBut it's a very special class \ud83d\ude09 https://t.co/8FdYRRvhuw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2eW3XIAoHcYG.png\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:55.000Z"
        },
        {
            "id": 2553,
            "username": "mathsppblog",
            "tweet_id": "1513621389500108800",
            "tweet_text": "Formally speaking, the operator pipe `|` is being used to do function composition.\n\nIn other words, by using `|` I have another way of composing functions in a convenient way.\n\nBut I lied \ud83d\ude05 `add_two`, `divide_3_floor`, and `s`, aren't \u201cfunctions\u201d per se...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:55.000Z"
        },
        {
            "id": 2554,
            "username": "mathsppblog",
            "tweet_id": "1513621387847639043",
            "tweet_text": "In my code, I wrote `f = add_two | divide_3_floor | s`.\n\nSo, when I write `f(7)`, it actually means something else: https://t.co/VWiAL9TXs7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2dmUXMAQmFRX.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:55.000Z"
        },
        {
            "id": 2555,
            "username": "mathsppblog",
            "tweet_id": "1513621386484502531",
            "tweet_text": "The `|` is doing some \u201cmagic\u201d I asked it to do, this is not default behaviour in Python.\n\n`f = g | h` means that the function `f` corresponds to calling `h` after calling `g`.\n\nSo, `f(x)` actually means `h(g(x))`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:54.000Z"
        },
        {
            "id": 2556,
            "username": "mathsppblog",
            "tweet_id": "1513621384756436995",
            "tweet_text": "Let us start... from the end!\n\nThe assignment to `f` takes 3 functions:\n\n - `add_two`\n - `divide_3_floor`\n - `s`\n\nand then combines them.\n\nThe `|` is in charge of doing this combination, but what combination is this? https://t.co/N6ZsylLNBM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2dAiXsAQ7SCf.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Others",
            "created_at": "2022-04-11T20:53:54.000Z"
        },
        {
            "id": 2557,
            "username": "mathsppblog",
            "tweet_id": "1513621382818680840",
            "tweet_text": "Here is some Python \ud83d\udc0d code using\n\n - decorators\n - callable classes\n - custom operators\n - \u201cfunctional\u201d function composition\n - arbitrary args and kwargs\n\nHere is a breakdown of everything that is going on \ud83d\udc47 https://t.co/SA9GSaLPJO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQF2cTxX0AMoB5l.jpg\"]",
            "tweet_conversation_id": "1513621382818680840",
            "tweet_type": "Python tips",
            "created_at": "2022-04-11T20:53:54.000Z"
        },
        {
            "id": 2558,
            "username": "mathsppblog",
            "tweet_id": "1513429425894928386",
            "tweet_text": "And that's the data transformation!\n\nSuppose you want to square a bunch of numbers.\n\nIf you use a `for` loop with `.append` calls, the squaring is going to be hidden in the middle of all that.\n\nIf you use a list comprehension, the squaring is very visible! https://t.co/5y7HhkfbEl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQDICouWQAQ8W84.jpg\"]",
            "tweet_conversation_id": "1513429424582107141",
            "tweet_type": "Others",
            "created_at": "2022-04-11T08:11:07.000Z"
        },
        {
            "id": 2559,
            "username": "mathsppblog",
            "tweet_id": "1513429424582107141",
            "tweet_text": "Day 16/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nWhy would someone bother with list comprehensions?\n\nThe main argument in favour of list comprehensions has to do with what they highlight...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513429424582107141",
            "tweet_type": "Python tips",
            "created_at": "2022-04-11T08:11:07.000Z"
        },
        {
            "id": 2560,
            "username": "mathsppblog",
            "tweet_id": "1513067029703671813",
            "tweet_text": "Day 15/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/EtAa2u1GSW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FP9-cdVXEAIDBh6.jpg\"]",
            "tweet_conversation_id": "1513067029703671813",
            "tweet_type": "Python tips",
            "created_at": "2022-04-10T08:11:05.000Z"
        },
        {
            "id": 2561,
            "username": "mathsppblog",
            "tweet_id": "1512704639371776004",
            "tweet_text": "Day 14/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/Mas4uS9O04",
            "tweet_media": "[\"https://pbs.twimg.com/media/FP402ktXsAMOpxl.jpg\"]",
            "tweet_conversation_id": "1512704639371776004",
            "tweet_type": "Python tips",
            "created_at": "2022-04-09T08:11:05.000Z"
        },
        {
            "id": 2562,
            "username": "mathsppblog",
            "tweet_id": "1512495768300572674",
            "tweet_text": "Here is some Python \ud83d\udc0d code with a bunch of interesting things going on:\n\n\ud83d\udccc decorators\n\ud83d\udccc callable classes\n\ud83d\udccc custom operators\n\ud83d\udccc \u201cfunctional\u201d function composition\n\ud83d\udccc arbitrary args and kwargs\n\nPick this code apart and study it!\n\nI'll explain it in a thread later \ud83d\ude09 https://t.co/pUhKWslfLD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FP124mpXoAgs1Of.jpg\"]",
            "tweet_conversation_id": "1512495768300572674",
            "tweet_type": "Python tips",
            "created_at": "2022-04-08T18:21:06.000Z"
        },
        {
            "id": 2563,
            "username": "mathsppblog",
            "tweet_id": "1512342254060457984",
            "tweet_text": "Day 13/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/1HBQuGDgxT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPzrQ8kXEAEDxt4.jpg\"]",
            "tweet_conversation_id": "1512342254060457984",
            "tweet_type": "Python tips",
            "created_at": "2022-04-08T08:11:05.000Z"
        },
        {
            "id": 2564,
            "username": "mathsppblog",
            "tweet_id": "1512148713577275401",
            "tweet_text": "You can get it yourself (for free, duh!).\n\nThe link is in my Twitter profile.\n\nJust click on my name @mathsppblog or on my face and it's right there.\n\nWhen the checkout page opens, just type \"0\" to pay nothing for the book.\n\nYou should be able to download it right away \ud83d\ude03",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512148712155500552",
            "tweet_type": "Others",
            "created_at": "2022-04-07T19:22:02.000Z"
        },
        {
            "id": 2565,
            "username": "mathsppblog",
            "tweet_id": "1512148712155500552",
            "tweet_text": "I started learning Python \ud83d\udc0d almost 10 years ago.\n\nWhen I started out, I _only_ used free resources.\n\nAfter all, I was just a kid and didn't even have money!\n\nThose generous people taught me almost everything I know!\n\nI want to give back, and that's why MY Python book is free.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512148712155500552",
            "tweet_type": "Python tips",
            "created_at": "2022-04-07T19:22:01.000Z"
        },
        {
            "id": 2566,
            "username": "mathsppblog",
            "tweet_id": "1512087385227464709",
            "tweet_text": "Sorry for the long ramble!\n\nHere are three key takeaways:\n\n - lists in `for` loops _can_ be modified but _shouldn't_;\n - Boolean values can be used as integers; and\n - `True` corresponds to `1` and `False` corresponds to `0`.\n\nFollow me @mathsppblog for more hilarious code bugs!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:20.000Z"
        },
        {
            "id": 2567,
            "username": "mathsppblog",
            "tweet_id": "1512087383562354693",
            "tweet_text": "This particular situation arose because I made a mistake when writing my program.\n\nAnd also because I didn't triple-check my code.\n\nBut one key thing we learn from this is that we shouldn't append to lists that are being used in `for` loops.\n\nThat's typically a bad idea!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:20.000Z"
        },
        {
            "id": 2568,
            "username": "mathsppblog",
            "tweet_id": "1512087381934968845",
            "tweet_text": "`True &gt; 10` is `False`, and so is `False &gt; 10`.\n\nThus, after 5 more iterations, `numbers` becomes:\n\n`[42, 73, 0, 16, 10,\n True, True, False, True, False,\n False, False, False, False, False]`\n\nSo, we reach a point where we keep appending `False` to the list, over and over again.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:19.000Z"
        },
        {
            "id": 2569,
            "username": "mathsppblog",
            "tweet_id": "1512087380244643841",
            "tweet_text": "After the first 5 iterations, `numbers` becomes this:\n\n`[42, 73, 0, 16, 10, True, True, False, True, False]`\n\nThen, `idx` goes from 5 to 9:\n\nWe take those 5 Boolean values and compare them with 10:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:19.000Z"
        },
        {
            "id": 2570,
            "username": "mathsppblog",
            "tweet_id": "1512087378566864897",
            "tweet_text": "In other words, when need be, we can\n\n - look at `False` as if it were `0`; and\n - look at `True` as if it were `1`.\n\nThus, when `num` is `True` and we do the comparison `num &gt; 10`, Python does the comparison `1 &gt; 10`.\n\nThe result, we know, is `False`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:18.000Z"
        },
        {
            "id": 2571,
            "username": "mathsppblog",
            "tweet_id": "1512087376876564487",
            "tweet_text": "Therefore, later down the road, when `idx` becomes `5`, `num` becomes `True`.\n\nSo, if `num` is `True`, why doesn't `num &gt; 10` raise an error?\n\nBecause Boolean values in Python \ud83d\udc0d (that is, `True` and `False`) can also be seen as integers!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Python tips",
            "created_at": "2022-04-07T15:18:18.000Z"
        },
        {
            "id": 2572,
            "username": "mathsppblog",
            "tweet_id": "1512087375245045760",
            "tweet_text": "Then, we add the results of those comparisons to the same list!\n\nIn the first iteration, we have:\n\n - idx = 0\n - num = 42\n - num &gt; 10 = True\n\nSo, we append `True` to the list.\n\nThen, the list `numbers` becomes `[42, 73, 0, 16, 10, True]`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:18.000Z"
        },
        {
            "id": 2573,
            "username": "mathsppblog",
            "tweet_id": "1512087373617655809",
            "tweet_text": "It may look weird, but it makes sense:\n\nThe loop adds Booleans to the list because the expression inside `numbers.append(...)` is a comparison: `num &gt; 10`.\n\nSo, for the first 5 iterations, we go over the original numbers in the list...\n\nAnd check which ones are greater than 10.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:17.000Z"
        },
        {
            "id": 2574,
            "username": "mathsppblog",
            "tweet_id": "1512087371268845573",
            "tweet_text": "If you run this program, you'll be flooded with output \ud83d\udc47\n\nThat's because we're iterating over a list that keeps growing!\n\nBut the output looks interesting, doesn't it?\n\nFor the first 5 lines, `num` is one of the original numbers.\n\nThen, `num` becomes a Boolean value?!\n\nWhy/how? https://t.co/vuojWZopO1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPwDcZNVUAQ4RAp.jpg\"]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:17.000Z"
        },
        {
            "id": 2575,
            "username": "mathsppblog",
            "tweet_id": "1512087369234538506",
            "tweet_text": "Let us clean this up a bit more.\n\nFirst, notice that the list `is_big` isn't really used, so we can get rid of it.\n\nThen, we can add some `print` calls to see what is happening real time:\n\nWhat are the successive values that `numbers` takes? https://t.co/iOIE9akPQP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPwDbo-UYAc0_Ds.jpg\"]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:16.000Z"
        },
        {
            "id": 2576,
            "username": "mathsppblog",
            "tweet_id": "1512087366747385863",
            "tweet_text": "This script never finishes!\n\n(By the way, use Ctrl + C to interrupt an infinite loop!)\n\nCan you see why?\n\nLet me rewrite that `for` loop with a `while` loop that does more or less the same thing \ud83d\udc47\n\nCan you see now what is happening? https://t.co/cZcw13U4Uu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPwDa_jUYB4PK3O.png\"]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Others",
            "created_at": "2022-04-07T15:18:16.000Z"
        },
        {
            "id": 2577,
            "username": "mathsppblog",
            "tweet_id": "1512087364406951937",
            "tweet_text": "Yesterday I posted a Python \ud83d\udc0d code snippet with a major typo \ud83d\udc47\n\nLet's explore this accident.\n\nQuestion \u2753: what's the behaviour of this script? https://t.co/FSyiRtNf6T",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPwDaUkUcAkXruo.png\"]",
            "tweet_conversation_id": "1512087364406951937",
            "tweet_type": "Python tips",
            "created_at": "2022-04-07T15:18:15.000Z"
        },
        {
            "id": 2578,
            "username": "mathsppblog",
            "tweet_id": "1511979864538165249",
            "tweet_text": "Day 12/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/3xrf0isD2Z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPuhrH3WUAIzwwX.jpg\"]",
            "tweet_conversation_id": "1511979864538165249",
            "tweet_type": "Python tips",
            "created_at": "2022-04-07T08:11:05.000Z"
        },
        {
            "id": 2579,
            "username": "mathsppblog",
            "tweet_id": "1511867428518744067",
            "tweet_text": "\ud83d\udea8 MAJOR typo alert \ud83e\udd26\n\nThe loop was supposed to be:\n\nis_big = []\nfor num in numbers:\n    is_big.append(num &gt; 10)\n\nI am _very_ sorry for the terrible typo \ud83d\ude29\nWith the typo, the program actually goes into an infinite loop! https://t.co/nqe3k1IgtG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511867428518744067",
            "tweet_type": "Others",
            "created_at": "2022-04-07T00:44:18.000Z"
        },
        {
            "id": 2580,
            "username": "mathsppblog",
            "tweet_id": "1511617478039904257",
            "tweet_text": "Day 11/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/UafVHoI16q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPpYFdgXIAEAOvm.jpg\"]",
            "tweet_conversation_id": "1511617478039904257",
            "tweet_type": "Python tips",
            "created_at": "2022-04-06T08:11:05.000Z"
        },
        {
            "id": 2581,
            "username": "mathsppblog",
            "tweet_id": "1511400945426571267",
            "tweet_text": "The original thread had a typo in the bullet point regarding the mutability of lists.\n\nAs we all know, lists are mutable = their contents CAN change.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Others",
            "created_at": "2022-04-05T17:50:40.000Z"
        },
        {
            "id": 2582,
            "username": "mathsppblog",
            "tweet_id": "1511400724286038018",
            "tweet_text": "Key takeaways:\n\n\ud83d\udccc `[:]` copies sliced object\n\ud83d\udccc lists are mutable, i.e., their contents CAN change\n\ud83d\udccc useful, for example, when you want to modify a list &amp; also keep the original\n\ud83d\udccc irrelevant for strings because strings are immutable, i.e., their contents can't change",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Others",
            "created_at": "2022-04-05T17:49:47.000Z"
        },
        {
            "id": 2583,
            "username": "mathsppblog",
            "tweet_id": "1511342980212445192",
            "tweet_text": "Key takeaways:\n\n\ud83d\udccc `[:]` copies sliced object\n\ud83d\udccc lists are mutable, i.e., their contents can't change\n\ud83d\udccc useful, for example, when you want to modify a list &amp; also keep the original\n\ud83d\udccc irrelevant for strings because strings are immutable, i.e., their contents can't change",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Others",
            "created_at": "2022-04-05T14:00:20.000Z"
        },
        {
            "id": 2584,
            "username": "mathsppblog",
            "tweet_id": "1511342978756919308",
            "tweet_text": "Was this thread a waste of time?\n\nIf not, retweet it and follow @mathsppblog for more Python \ud83d\udc0d knowledge!\n\nThis thread, together with all my other threads, can be found on my website: https://t.co/bF07zerCkC.\n\nYou can go there and bookmark this thread if you need it for later!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Python tips",
            "created_at": "2022-04-05T14:00:20.000Z"
        },
        {
            "id": 2585,
            "username": "mathsppblog",
            "tweet_id": "1511342977343537167",
            "tweet_text": "That is why it never makes sense to make a copy of a string.\n\nYou can't change it either way, so might as well use the original string from the start!\n\nDid this make sense?\n\nI hope so \ud83e\udd1e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Others",
            "created_at": "2022-04-05T14:00:19.000Z"
        },
        {
            "id": 2586,
            "username": "mathsppblog",
            "tweet_id": "1511342975464484866",
            "tweet_text": "It doesn't make sense to get a copy of a string because strings are _immutable_!\n\nWhat does this mean?\n\nIt means that the contents of a string never change!\n\nFor example, haven't you noticed how `.upper` returns a _new_ string?\n\nYou never modify the original string! https://t.co/MBhsKzpyQX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPlea9ZXwAkKs03.png\"]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Others",
            "created_at": "2022-04-05T14:00:19.000Z"
        },
        {
            "id": 2587,
            "username": "mathsppblog",
            "tweet_id": "1511342973648351246",
            "tweet_text": "Sometimes you need a copy of a list because lists are _mutable_.\n\nThis means that the contents of a list can change!\n\nSo, if you want to modify a list but also keep its original values, you need a copy.\n\nBut this doesn't make sense for strings!\n\nCan you see why? https://t.co/ZaYJLy2YOS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPleaO-WUA4SCzB.jpg\"]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Others",
            "created_at": "2022-04-05T14:00:18.000Z"
        },
        {
            "id": 2588,
            "username": "mathsppblog",
            "tweet_id": "1511342971697905664",
            "tweet_text": "Recall that slices do a copy of the sliced chunk.\n\nIf you are using a full slice `my_str[:]`, that means you are getting the whole string.\n\nSo, why wouldn't you just use `my_str`..?\n\nWhy do you need a _copy_ of your string?\n\nSometimes you _do_ need a copy of a list: https://t.co/eQA1X6y9VA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPleZjxWQAE1nsk.jpg\"]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Others",
            "created_at": "2022-04-05T14:00:18.000Z"
        },
        {
            "id": 2589,
            "username": "mathsppblog",
            "tweet_id": "1511342969990823937",
            "tweet_text": "Yesterday I challenged your Python \ud83d\udc0d knowledge!\n\nI asked:\n\nWhy is it always 100% unnecessary to use a full slice `[:]` with a string?\n\nNow it's time I give you the answer!\n\nLet's go \ud83d\ude80 https://t.co/ShHz7UCXF9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPleYnXWYAcrfrj.jpg\"]",
            "tweet_conversation_id": "1511342969990823937",
            "tweet_type": "Python tips",
            "created_at": "2022-04-05T14:00:18.000Z"
        },
        {
            "id": 2590,
            "username": "mathsppblog",
            "tweet_id": "1511255097745022980",
            "tweet_text": "Day 10/100 of learning and practising Python \ud83d\udc0d list comprehensions!\n\nLet's go \ud83d\ude80\n\nHere's a short exercise for you \ud83d\udcd6\u270d\ufe0f\n\nFeel free to share your solution and help others in the comments \ud83d\udde8\ufe0f https://t.co/rmrb5TrJvZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPkOgJ2XMAEQiGZ.jpg\"]",
            "tweet_conversation_id": "1511255097745022980",
            "tweet_type": "Python tips",
            "created_at": "2022-04-05T08:11:07.000Z"
        },
        {
            "id": 2591,
            "username": "raymondh",
            "tweet_id": "1604180659085377536",
            "tweet_text": "Over the years, my \"here there be dragons\" list has gotten long.\n\nMixing threading and forking --&gt; page fault\nFloating point equality --&gt; page fault\nHigh serialization loads --&gt; page fault\nXML macros --&gt; page fault\n...\n\n4/4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604180654530650114",
            "tweet_type": "Others",
            "created_at": "2022-12-17T18:24:08.000Z"
        },
        {
            "id": 2592,
            "username": "raymondh",
            "tweet_id": "1604180657378205697",
            "tweet_text": "For example with regexes, I don't have a mental catalog\nof all the ways to trigger quadratic behavior.\n\nBut I have mentally marked some patterns as\n\"here there be dragons\".\n\nWhen programming, I \"page fault\" and can either avoid the issue or pick up my sword and work through it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604180654530650114",
            "tweet_type": "Others",
            "created_at": "2022-12-17T18:24:07.000Z"
        },
        {
            "id": 2593,
            "username": "raymondh",
            "tweet_id": "1604180655990087681",
            "tweet_text": "In copy-on-write, we mark page table\nentries as read-only.  Subsequent accesses\ntrigger page-faults, allowing the copy on\ndemand.\n\nThe human equivalent is study-on-demand,\nmarking some areas of knowledge as needing\nto be filled in when needed.\n\n2/4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604180654530650114",
            "tweet_type": "Others",
            "created_at": "2022-12-17T18:24:07.000Z"
        },
        {
            "id": 2594,
            "username": "raymondh",
            "tweet_id": "1604180654530650114",
            "tweet_text": "How do we #Python programmers manage the complexity of there just being too many things you need to know?\n\nI think a good model is study-on-demand, a hybrid of lazy evaluation and copy-on-write adapted for the human brain.\n\n1/4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604180654530650114",
            "tweet_type": "Others",
            "created_at": "2022-12-17T18:24:06.000Z"
        },
        {
            "id": 2595,
            "username": "raymondh",
            "tweet_id": "1604125695394865158",
            "tweet_text": "#Python practices question:   Have you ever been able to put the builtin memoryview() to good use?\n\nISTM the underlying object typically already offers at least as many capabilities.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604125695394865158",
            "tweet_type": "Others",
            "created_at": "2022-12-17T14:45:43.000Z"
        },
        {
            "id": 2596,
            "username": "raymondh",
            "tweet_id": "1602839429634310144",
            "tweet_text": "I was pretty impressed by the @RoyKishony's Quibbler demo.  It has the highest payoff for least amount of effort that I've seen in a long time.\n\nImagine converting static data analysis to interactive analysis with only one line of code.\n\nI recommend taking five minutes to try it. https://t.co/ikrX5VypFi",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602839429634310144",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:34:33.000Z"
        },
        {
            "id": 2597,
            "username": "raymondh",
            "tweet_id": "1601056596729073665",
            "tweet_text": "Interestingly, I never get questions about mmap() in class, nor when I do code reviews for teams.\nIt seems absent from Twitter and blog posts. On the core development issue tracker, we don't get mmap() feature requests. And it doesn't come up in Python-ideas or tutor lists.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601056595202277376",
            "tweet_type": "Others",
            "created_at": "2022-12-09T03:30:13.000Z"
        },
        {
            "id": 2598,
            "username": "raymondh",
            "tweet_id": "1601056595202277376",
            "tweet_text": "Have any of you ever put #Python's mmap() module to good use?\n\nIt seems awesome and toy examples are easy to code, but I've never had occasion to apply it to real world problems.  I'm wonder whether I've missed an obvious but common use case.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601056595202277376",
            "tweet_type": "Others",
            "created_at": "2022-12-09T03:30:13.000Z"
        },
        {
            "id": 2599,
            "username": "raymondh",
            "tweet_id": "1600016395626061824",
            "tweet_text": "So come on and give it a try\nYou'll love what you can do with Python, oh Python!\n\n--- #GPTChat prompt: Write an advertising jingle for the #Python programming language.\n\n(2/2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600016393763577857",
            "tweet_type": "Others",
            "created_at": "2022-12-06T06:36:50.000Z"
        },
        {
            "id": 2600,
            "username": "raymondh",
            "tweet_id": "1600016393763577857",
            "tweet_text": "A #Python jingle:\n\nPython, oh Python\nThe language that's so fun\nFrom web development to data analysis\nPython gets the job done\n\nWith a simple and elegant syntax\nIt's easy to learn and use\nWhether you're a beginner or a pro\nPython is the way to go\n\n(1/2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600016393763577857",
            "tweet_type": "Others",
            "created_at": "2022-12-06T06:36:49.000Z"
        },
        {
            "id": 2601,
            "username": "raymondh",
            "tweet_id": "1596586516536594434",
            "tweet_text": "Your coding style controls the failure mode.\n\nDo you prefer \"fail fast, fail hard\" or do you prefer \"defensive coding\" that can obscure logic errors?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596586512396980225",
            "tweet_type": "Others",
            "created_at": "2022-11-26T19:27:43.000Z"
        },
        {
            "id": 2602,
            "username": "raymondh",
            "tweet_id": "1596586514951024640",
            "tweet_text": "Suppose your reasoning is wrong and \"i\" can jump above \"n\" without hitting \"i==n\" first.\n\nWould you prefer an infinite loop or termination?\n\nIf the infinite loop surfaces during testing, you can find and fix the bug.\n\nBut if it happens in production, it might be embarrassing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596586512396980225",
            "tweet_type": "Others",
            "created_at": "2022-11-26T19:27:42.000Z"
        },
        {
            "id": 2603,
            "username": "raymondh",
            "tweet_id": "1596586513759961088",
            "tweet_text": "Consider incrementing i up to n.\n\nAn \"at the boundary\" test such as \"i != n\" expresses confidence that \"i &gt; n\" cannot occur without hitting \"i == n\" first.\n\nAn \"at or beyond the boundary\" test such as \"i &gt;= n\" tries to encompass cases that presumably cannot happen.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596586512396980225",
            "tweet_type": "Others",
            "created_at": "2022-11-26T19:27:42.000Z"
        },
        {
            "id": 2604,
            "username": "raymondh",
            "tweet_id": "1596586512396980225",
            "tweet_text": "#Python practices survey:  What is your style for checking boundary conditions?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596586512396980225",
            "tweet_type": "Others",
            "created_at": "2022-11-26T19:27:42.000Z"
        },
        {
            "id": 2605,
            "username": "raymondh",
            "tweet_id": "1594415208163905536",
            "tweet_text": "Integer arithmetic version:\n\npool = range(500)\nss = list(accumulate(map(lambda x: x*x, pool), initial=0))\nfor lo, mi, hi in combinations(pool, 3):\n    r1 = range(lo, mi)\n    r2 = range(mi, hi)\n    if ss[mi] - ss[lo] == ss[hi] - ss[mi]:\n        print(r1, r2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594409295072104448",
            "tweet_type": "Others",
            "created_at": "2022-11-20T19:39:43.000Z"
        },
        {
            "id": 2606,
            "username": "raymondh",
            "tweet_id": "1594409297571627008",
            "tweet_text": "(3/3) #Python makes short work of this search.\n\nfrom itertools import combinations\nfrom math import hypot\n\nfor lo, mi, hi in combinations(range(500), 3):\n    r1 = range(lo, mi)\n    r2 = range(mi, hi)\n    if hypot(*r1) == hypot(*r2):\n        print(r1, r2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594409295072104448",
            "tweet_type": "Others",
            "created_at": "2022-11-20T19:16:13.000Z"
        },
        {
            "id": 2607,
            "username": "raymondh",
            "tweet_id": "1594409296346890241",
            "tweet_text": "(2/3) There are many more of these and some are incredible:\n\nhypot(78, 79, 80, 81, 82, 83, 84) == hypot(85, 86, 87, 88, 89, 90)\n\nhypot(*range(12, 51)) == hypot(*range(51, 64))\n\nhypot(*range(16, 143)) == hypot(*range(143, 180))",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594409295072104448",
            "tweet_type": "Others",
            "created_at": "2022-11-20T19:16:13.000Z"
        },
        {
            "id": 2608,
            "username": "raymondh",
            "tweet_id": "1594409295072104448",
            "tweet_text": "(1/3) #Python amusement for numberphiles:\n\nfrom math import hypot\n\nhypot(3, 4) == hypot(5)\nhypot(10, 11, 12) == hypot(13, 14)\nhypot(21, 22, 23, 24) == hypot(25, 26, 27)\nhypot(36, 37, 38, 39, 40) == hypot(41, 42, 43, 44)\nhypot(55, 56, 57, 58, 59, 60) == hypot(61, 62, 63, 64, 65)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594409295072104448",
            "tweet_type": "Others",
            "created_at": "2022-11-20T19:16:13.000Z"
        },
        {
            "id": 2609,
            "username": "raymondh",
            "tweet_id": "1592571088831410177",
            "tweet_text": "P.S. I had to repost this thread because Dropbox unrecoverably killed the source code link after a minor edit.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:50.000Z"
        },
        {
            "id": 2610,
            "username": "raymondh",
            "tweet_id": "1592571087405342720",
            "tweet_text": "(10/10) I've come up with these tools by helping people with maintenance issues.\n\nIf you want to create other useful pattern matchers, a good way to start is by trying to convert existing if/elif/else code to match-case.\n\nEvery obstacle you encounter is a potential new tool.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:50.000Z"
        },
        {
            "id": 2611,
            "username": "raymondh",
            "tweet_id": "1592571086205440001",
            "tweet_text": "(9/10) Please try out the toolkit and provide feedback on what works for you.\n\nUltimately the goal is fulfill the PEP 622 deferred promise of \"a new Python standard library module which would contain a rich set of useful matchers.\"\n\nhttps://t.co/2Ij4QIANGD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:50.000Z"
        },
        {
            "id": 2612,
            "username": "raymondh",
            "tweet_id": "1592571084884287488",
            "tweet_text": "(8/10) You could skip all of these techniques by using wildcard cases with guard expressions, but then you've thrown away any of the benefits of match/case and should switch back to an if/elif/else chain.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:49.000Z"
        },
        {
            "id": 2613,
            "username": "raymondh",
            "tweet_id": "1592571083538198528",
            "tweet_text": "(7/10) Cases have been written with floating point numbers, but you're getting mismatches due to round-off error.\n\nWhat you want is approximate matching.\n\nThe Approximately() class makes this fix trivially easy.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:49.000Z"
        },
        {
            "id": 2614,
            "username": "raymondh",
            "tweet_id": "1592571082061803520",
            "tweet_text": "(6/10) Cases have been written using the or-pattern.\n\nPerhaps the number of alternatives is growing too large.\n\nOr perhaps the alternatives can change.\n\nWhat you really want is a set membership test.\n\nThe InSet() class solves this problem without much fuss.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:49.000Z"
        },
        {
            "id": 2615,
            "username": "raymondh",
            "tweet_id": "1592571080728018944",
            "tweet_text": "(5/10) Cases have been written with string constants, but a new requirement is to match regular expression patterns instead.\n\nInterestingly, this use case is often what people first think of when they hear about pattern matching.\n\nThe RegexEqual() class provides a solution.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:48.000Z"
        },
        {
            "id": 2616,
            "username": "raymondh",
            "tweet_id": "1592571079373250562",
            "tweet_text": "(4/10) Cases have been written with string constants, but now a new requirement is to internationalize the strings with gettext. The target language can change at any time.\n\nProblem: You have to wrap the constants with function calls.\n\nThe FuncCall() class provides a solution.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:48.000Z"
        },
        {
            "id": 2617,
            "username": "raymondh",
            "tweet_id": "1592571078022664192",
            "tweet_text": "(3/10) A case has been written to match a constant, but now a new requirement arises and the constant will be user specified.\n\nProblem: You have to replace the constant with a variable.  \n\nIn this situation, the Var() class provides an easy solution.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:48.000Z"
        },
        {
            "id": 2618,
            "username": "raymondh",
            "tweet_id": "1592571075153776640",
            "tweet_text": "(1/10) Here's a small toolkit to extend #Python Structural Pattern Matching beyond its core capabilities.\n\nhttps://t.co/hAHhPTBYTQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592571075153776640",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:31:47.000Z"
        },
        {
            "id": 2619,
            "username": "raymondh",
            "tweet_id": "1592566710082895873",
            "tweet_text": "New link:  https://t.co/hAHhPTBYTQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T17:14:26.000Z"
        },
        {
            "id": 2620,
            "username": "raymondh",
            "tweet_id": "1592562000479281153",
            "tweet_text": "(10/10) I've come up with these tools by helping people with maintenance issues.\n\nIf you want to create other useful pattern matchers, a good way to start is by trying to convert existing if/elif/else code to match-case.\n\nEvery obstacle you encounter is a potential new tool.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:43.000Z"
        },
        {
            "id": 2621,
            "username": "raymondh",
            "tweet_id": "1592561998835109889",
            "tweet_text": "(9/10) Please try out the toolkit and provide feedback on what works for you.\n\nUltimately the goal is fulfill the PEP 622 deferred promise of \"a new Python standard library module which would contain a rich set of useful matchers.\"\n\nhttps://t.co/2Ij4QISWUL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:43.000Z"
        },
        {
            "id": 2622,
            "username": "raymondh",
            "tweet_id": "1592561996977037312",
            "tweet_text": "(8/10) You could skip all of these techniques by using wildcard cases with guard expressions, but then you've thrown away any of the benefits of match/case and should switch back to an if/elif/else chain.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:43.000Z"
        },
        {
            "id": 2623,
            "username": "raymondh",
            "tweet_id": "1592561995492249601",
            "tweet_text": "(7/10) Cases have been written with floating point numbers, but you're getting mismatches due to round-off error.\n\nWhat you want is approximate matching.\n\nThe Approximately() class makes this fix trivially easy.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:42.000Z"
        },
        {
            "id": 2624,
            "username": "raymondh",
            "tweet_id": "1592561994053619712",
            "tweet_text": "(6/10) Cases have been written using the or-pattern.\n\nPerhaps the number of alternatives is growing too large.\n\nOr perhaps the alternatives can change.\n\nWhat you really want is a set membership test.\n\nThe InSet() class solves this problem without much fuss.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:42.000Z"
        },
        {
            "id": 2625,
            "username": "raymondh",
            "tweet_id": "1592561992774332421",
            "tweet_text": "(5/10) Cases have been written with string constants, but a new requirement is to match regular expression patterns instead.\n\nInterestingly, this use case is often what people first think of when they hear about pattern matching.\n\nThe RegexEqual() class provides a solution.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:42.000Z"
        },
        {
            "id": 2626,
            "username": "raymondh",
            "tweet_id": "1592561991537004544",
            "tweet_text": "(4/10) Cases have been written with string constants, but now a new requirement is to internationalize the strings with gettext. The target language can change at any time.\n\nProblem: You have to wrap the constants with function calls.\n\nThe FuncCall() class provides a solution.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:41.000Z"
        },
        {
            "id": 2627,
            "username": "raymondh",
            "tweet_id": "1592561990199021569",
            "tweet_text": "(3/10) A case has been written to match a constant, but now a new requirement arises and the constant will be user specified.\n\nProblem: You have to replace the constant with a variable.  \n\nIn this situation, the Var() class provides an easy solution.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:41.000Z"
        },
        {
            "id": 2628,
            "username": "raymondh",
            "tweet_id": "1592561988479045632",
            "tweet_text": "(2/10) Except for the named constants, I wouldn't recommend starting with any of these because you would likely be better off with an old-fashioned if/elif/else chain.\n\nMostly, these tools are helpful with solving issues that arise during maintenance of existing match/case code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:41.000Z"
        },
        {
            "id": 2629,
            "username": "raymondh",
            "tweet_id": "1592561986919108608",
            "tweet_text": "(1/10) Here's a small toolkit to extend #Python Structural Pattern Matching beyond its core capabilities.\n\nhttps://t.co/Ak5nd3CAPe",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592561986919108608",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:55:40.000Z"
        },
        {
            "id": 2630,
            "username": "raymondh",
            "tweet_id": "1590110847233593344",
            "tweet_text": "It would have been nice to use the callable() built-in function instead of having to import Callable from typing.\n\nAlas, callable() is a predicate, not a type.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590110845308407809",
            "tweet_type": "Others",
            "created_at": "2022-11-08T22:35:43.000Z"
        },
        {
            "id": 2631,
            "username": "raymondh",
            "tweet_id": "1590110845308407809",
            "tweet_text": "The secret to adding #Python type annotations to lambda expressions is to write a variable annotation:\n\nf: Callable[[int, int], int] = lambda x, y: 3*x + y\n\nI don't think there is way to annotate in-line lambdas that aren't assigned to variables.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590110845308407809",
            "tweet_type": "Others",
            "created_at": "2022-11-08T22:35:43.000Z"
        },
        {
            "id": 2632,
            "username": "raymondh",
            "tweet_id": "1589017195274997760",
            "tweet_text": "It's ultimate irony day. Earlier today, we taught our son that if a book started with, \"It was a dark and stormy night\", then it probably wasn't a good book.\n\nLater, we went to the library and checked out, \"A Wrinkle in Time\", one of my childhood favorites.\n\nOops!  \ud83e\uddd0 https://t.co/RNe9eiTYys",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589017195274997760",
            "tweet_type": "Others",
            "created_at": "2022-11-05T22:09:56.000Z"
        },
        {
            "id": 2633,
            "username": "raymondh",
            "tweet_id": "1588943332184854530",
            "tweet_text": "How not to factor your code ;-)\n\nstart, stop, step --&gt; art, op, ep",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588943332184854530",
            "tweet_type": "Others",
            "created_at": "2022-11-05T17:16:26.000Z"
        },
        {
            "id": 2634,
            "username": "raymondh",
            "tweet_id": "1586170413700505601",
            "tweet_text": "Let's settle this:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586170413700505601",
            "tweet_type": "Others",
            "created_at": "2022-10-29T01:37:50.000Z"
        },
        {
            "id": 2635,
            "username": "raymondh",
            "tweet_id": "1584593523986550784",
            "tweet_text": "Today is my first day to teach #Python with version 3.11.\n\nThe improved error messages are a real joy.\n\nWhen the final release happens, likely later today, do yourself a favor and upgrade immediately.\n\nIt is mostly better, faster, and stronger but doesn't cost $6 million dollars.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584593523986550784",
            "tweet_type": "Others",
            "created_at": "2022-10-24T17:11:51.000Z"
        },
        {
            "id": 2636,
            "username": "raymondh",
            "tweet_id": "1581675718718550016",
            "tweet_text": "Presumably, this is right out:\n\naint_coprime(p, q)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581670191745757185",
            "tweet_type": "Others",
            "created_at": "2022-10-16T15:57:32.000Z"
        },
        {
            "id": 2637,
            "username": "raymondh",
            "tweet_id": "1581670191745757185",
            "tweet_text": "Just asking for a friend ;-). How true to English should you make your #Python function names?\n\nis_coprime(p, q)\n\nor\n\nare_coprime(p, q)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581670191745757185",
            "tweet_type": "Others",
            "created_at": "2022-10-16T15:35:34.000Z"
        },
        {
            "id": 2638,
            "username": "raymondh",
            "tweet_id": "1578866925240999936",
            "tweet_text": "The idea is to support write-once, read-many concatenation logic.\n\nThink about newsfeeds, worm drives, event logs, concatenating to file, accounting journals, ...\n\nFor linked lists in particular, the current abstract methods are irritating if all you want is append logic.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578866923642949632",
            "tweet_type": "Others",
            "created_at": "2022-10-08T21:56:23.000Z"
        },
        {
            "id": 2639,
            "username": "raymondh",
            "tweet_id": "1578866923642949632",
            "tweet_text": "Would any of you #Python folks have a need for a new https://t.co/oLLyulh4Oc class called ExtendableSequence that only grows to the right?\n\nThe current MutableSequence has abtractmethods for __setitem__(), __delitem__(), and insert().\n\nExtendableSequence would only need append().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578866923642949632",
            "tweet_type": "Others",
            "created_at": "2022-10-08T21:56:23.000Z"
        },
        {
            "id": 2640,
            "username": "raymondh",
            "tweet_id": "1575956437632942082",
            "tweet_text": "Hint:  Think in terms of use cases.  Why is the current behavior useful and why would the alternative be a PITA?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575950841995210752",
            "tweet_type": "Others",
            "created_at": "2022-09-30T21:11:09.000Z"
        },
        {
            "id": 2641,
            "username": "raymondh",
            "tweet_id": "1575955622860066818",
            "tweet_text": "&gt;&gt;&gt; s = 'abc'\n\n&gt;&gt;&gt; s[5]\nTraceback\n  ...\nIndexError: string index out of range\n\n&gt;&gt;&gt; s[:5]\n'abc'\n\nAlso interesting:\n\n&gt;&gt;&gt; s[5:6]\n''\n&gt;&gt;&gt; s[5:]\n''",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575950841995210752",
            "tweet_type": "Others",
            "created_at": "2022-09-30T21:07:54.000Z"
        },
        {
            "id": 2642,
            "username": "raymondh",
            "tweet_id": "1575950841995210752",
            "tweet_text": "One way to develop your #Python intuition is to explain some its design decisions in your own words.\n\nGiven a sequence s of length three, explain why s[5] raises an IndexError, but s[:5] doesn't.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575950841995210752",
            "tweet_type": "Others",
            "created_at": "2022-09-30T20:48:55.000Z"
        },
        {
            "id": 2643,
            "username": "raymondh",
            "tweet_id": "1573527758717784072",
            "tweet_text": "Another rule of thumb from Matthew: The number seconds in a year is about \u03c0 x 10\u2077",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573527758717784072",
            "tweet_type": "Others",
            "created_at": "2022-09-24T04:20:27.000Z"
        },
        {
            "id": 2644,
            "username": "raymondh",
            "tweet_id": "1569730933003001860",
            "tweet_text": "A variant using set() is prettier but much slower and uses more memory.\n\ndef sieve(n) -&gt; set[int]:\n    'Primes less than n.'\n    s = set(range(2, n))\n    for c in range(2, isqrt(n)+1):\n        if c in s:\n            s.difference_update(range(c+c, n, c))\n    return s.copy()\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569725172537610241",
            "tweet_type": "Others",
            "created_at": "2022-09-13T16:53:13.000Z"
        },
        {
            "id": 2645,
            "username": "raymondh",
            "tweet_id": "1569725175834509312",
            "tweet_text": "If we had a builtin bitarray(), memory consumption could be reduced by a factor of eight.\n\nIf we had a new itertool called iter_index(), speed and clarity could be improved as well.\n\nThen \"compress(count(), data)\" could then be replaced with \"iter_index(data, 1)\".\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569725172537610241",
            "tweet_type": "Others",
            "created_at": "2022-09-13T16:30:20.000Z"
        },
        {
            "id": 2646,
            "username": "raymondh",
            "tweet_id": "1569725174022545409",
            "tweet_text": "The imports are:\n\nfrom itertools import count, compress, islice\nfrom math import isqrt\n\nThe recipe is reasonably fast and memory efficient. To list all primes under 10**9, it takes 17 seconds and 1 extra Gb of RAM:\n\n&gt;&gt;&gt; len(sieve(10**9))\n50847534\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569725172537610241",
            "tweet_type": "Others",
            "created_at": "2022-09-13T16:30:20.000Z"
        },
        {
            "id": 2647,
            "username": "raymondh",
            "tweet_id": "1569725172537610241",
            "tweet_text": "Fun #Python recipe.\n\ndef sieve(n):\n   'Primes less than n'\n   data = bytearray([1]) * n\n   data[:2] = 0, 0\n   limit = isqrt(n) + 1\n   for c in compress(count(), islice(data, limit)):\n      data[c+c::c] = bytearray(len(range(c+c, n, c)))\n   return list(compress(count(), data))\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569725172537610241",
            "tweet_type": "Others",
            "created_at": "2022-09-13T16:30:19.000Z"
        },
        {
            "id": 2648,
            "username": "raymondh",
            "tweet_id": "1567323557901787143",
            "tweet_text": "#Python and #Sympy show that in the limit, the relationship is exact:\n\n&gt;&gt;&gt; a, b = symbols('a b')\n&gt;&gt;&gt; difference = 1/a - 1/b - 1/(a+b)\n&gt;&gt;&gt; phi = (1 + sqrt(5)) / 2\n&gt;&gt;&gt; difference.subs([(b, a*phi)]).simplify()\n0\n\nWhere phi is the Golden Ratio, the limit of F\u2099\u208a\u2081 / F\u2099.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567321337131155463",
            "tweet_type": "Others",
            "created_at": "2022-09-07T01:27:10.000Z"
        },
        {
            "id": 2649,
            "username": "raymondh",
            "tweet_id": "1567321337131155463",
            "tweet_text": "Matthew's noticed an interesting relationship between Fibonacci reciprocals:\n\n1/5  + 1/8  \u2248 1/3\n1/8  + 1/13 \u2248 1/5\n1/13 + 1/21 \u2248 1/8\n1/21 + 1/34 \u2248 1/13\n  ...\n1/F\u2099 +  1/F\u2099\u208a\u2081 \u2248 1/F\u2099\u208b\u2081\n\nAs n gets larger, this approximation converges.  Pretty cool.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567321337131155463",
            "tweet_type": "Others",
            "created_at": "2022-09-07T01:18:20.000Z"
        },
        {
            "id": 2650,
            "username": "raymondh",
            "tweet_id": "1566573034084995073",
            "tweet_text": "Kudos to the #MyPy team for a very high quality error message.\n\nIt first gives the difference between the inferred type and the expected type, then it refers you to the relevant section of the docs, and lastly, it makes an appropriate suggestion.\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566569890600943616",
            "tweet_type": "Others",
            "created_at": "2022-09-04T23:44:51.000Z"
        },
        {
            "id": 2651,
            "username": "raymondh",
            "tweet_id": "1566569892907737090",
            "tweet_text": "Here is the relevant reference to the #MyPy docs:\n\nhttps://t.co/wr4gonqNmD\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566569890600943616",
            "tweet_type": "Others",
            "created_at": "2022-09-04T23:32:22.000Z"
        },
        {
            "id": 2652,
            "username": "raymondh",
            "tweet_id": "1566569891813097473",
            "tweet_text": "Interestingly, both forms work when called with:\n\nsum_valid([10, 20])\n\nThe issue is that #MyPy infers that \"data = [10, 20]\" is of type list[int], but it cannot figure-out that sum_valid() only reads the data. It must assumes that sum_valid() could have:\n\ndata.append(None)\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566569890600943616",
            "tweet_type": "Others",
            "created_at": "2022-09-04T23:32:22.000Z"
        },
        {
            "id": 2653,
            "username": "raymondh",
            "tweet_id": "1566569890600943616",
            "tweet_text": "#Python typing tip:  Use immutable collections as annotations whenever possible.\n\nPrefer:\n\ndef sum_valid(data: Sequence[int | None]):\n   ...\n\nOver:\n\ndef sum_valid(data: list[int | None]):\n   ...\n\nThe latter will fail with:\n\ndata = [10, 20]\nsum_valid(data)\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566569890600943616",
            "tweet_type": "Python tips",
            "created_at": "2022-09-04T23:32:22.000Z"
        },
        {
            "id": 2654,
            "username": "raymondh",
            "tweet_id": "1565409199630286848",
            "tweet_text": "SDD -&gt; SSD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565403495792082951",
            "tweet_type": "Others",
            "created_at": "2022-09-01T18:40:11.000Z"
        },
        {
            "id": 2655,
            "username": "raymondh",
            "tweet_id": "1565403498107359235",
            "tweet_text": "My favorite was in a Python course. We saved a file and a former physics professor asked \"where did it go?\"\n\nI said, \"it is in your laptop\".\n\nHe said, \"yes, but where\" as he looked all around it.\n\nIt took a physics level description of how data is stored in a SDD to satisfy him.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565403495792082951",
            "tweet_type": "Others",
            "created_at": "2022-09-01T18:17:32.000Z"
        },
        {
            "id": 2656,
            "username": "raymondh",
            "tweet_id": "1565403496907685890",
            "tweet_text": "Well the last one is easy.  You see, on a manifold in a connected metric space, a straight line is the locus of points such that local the curvature is everywhere zero except for ...\n\nWait, what I meant to say is that it is a line that doesn't wiggle.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565403495792082951",
            "tweet_type": "Others",
            "created_at": "2022-09-01T18:17:32.000Z"
        },
        {
            "id": 2657,
            "username": "raymondh",
            "tweet_id": "1565403495792082951",
            "tweet_text": "The more basic the question, the harder it is to answer.\n\nMartial arts stack exchange:  How do weapons work?\n\nMy son: Why are there wars?\n\nTormenting a PhD in math:  What is a straight line?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565403495792082951",
            "tweet_type": "Others",
            "created_at": "2022-09-01T18:17:31.000Z"
        },
        {
            "id": 2658,
            "username": "raymondh",
            "tweet_id": "1564008981210845185",
            "tweet_text": "My child uses my YouTube account, so videos recommended to him are affected by what I watch.\n\nSo now we're in an odd situation where he's still learning 5th grade math but asking me questions about the p-adic number video he just watched. \ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564008981210845185",
            "tweet_type": "Others",
            "created_at": "2022-08-28T21:56:13.000Z"
        },
        {
            "id": 2659,
            "username": "raymondh",
            "tweet_id": "1563635855624998920",
            "tweet_text": "&gt;&gt;&gt; data = 'AAABCCC'\n\n&gt;&gt;&gt; mode(data)\n'A'\n\n&gt;&gt;&gt; multimode(data)\n['A', 'C']\n\n&gt;&gt;&gt; mode([])\nTraceback\n...\nstatistics.StatisticsError: no mode for empty data\n\n&gt;&gt;&gt; multimode([])\n[]\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563635854320492545",
            "tweet_type": "Others",
            "created_at": "2022-08-27T21:13:33.000Z"
        },
        {
            "id": 2660,
            "username": "raymondh",
            "tweet_id": "1563635854320492545",
            "tweet_text": "#Python tip:  In the statistics module, mode() returns the first mode encountered and multimode() returns all of the modes in the order they were first encountered.\n\nAlso mode() requires at least one datum while multimode() can handle an empty input.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563635854320492545",
            "tweet_type": "Python tips",
            "created_at": "2022-08-27T21:13:33.000Z"
        },
        {
            "id": 2661,
            "username": "raymondh",
            "tweet_id": "1557099999091212289",
            "tweet_text": "What extra work does randrange() do?\n\n* Call start.__index__() to get an int\n* Verify that *step* and *stop* aren't specified\n* Verify that n &gt; 0\n* Count the bits in n.\n* Apply rejection sampling to achieve a uniform distribution using getrandbits() as the source.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556898398502064128",
            "tweet_type": "Others",
            "created_at": "2022-08-09T20:22:23.000Z"
        },
        {
            "id": 2662,
            "username": "raymondh",
            "tweet_id": "1556898399810625536",
            "tweet_text": "The same holds for larger ranges:\n\n370 nsec: randrange(2**200)\n51.9 nsec: getrandbits(200)\n\nStill 7x faster!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556898398502064128",
            "tweet_type": "Others",
            "created_at": "2022-08-09T07:01:18.000Z"
        },
        {
            "id": 2663,
            "username": "raymondh",
            "tweet_id": "1556898398502064128",
            "tweet_text": "#Python performance tip:   randrange() handles arbitrary ranges, but if all you need is a power of two, then getrandbits() blows it out of the water.\n\nPython 3.11 timings:\n\n166 nsec:  randrange(1024)\n22.6 nsec:  getrandbits(10)\n\n7x faster",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556898398502064128",
            "tweet_type": "Python tips",
            "created_at": "2022-08-09T07:01:18.000Z"
        },
        {
            "id": 2664,
            "username": "raymondh",
            "tweet_id": "1555997671214796802",
            "tweet_text": "from math import floor\n\nlevel = 0\ntotal = 0.0\nlast_uf = 1.0\nfor n in range(1, 100_000_001):\n    uf = 1 / n\n    total += uf\n    if floor(total) != level:\n        level = floor(total)\n        print(last_uf / uf)\n        last_uf = uf\n\n6/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555997645621059586",
            "tweet_type": "Others",
            "created_at": "2022-08-06T19:22:08.000Z"
        },
        {
            "id": 2665,
            "username": "raymondh",
            "tweet_id": "1555997665996972033",
            "tweet_text": "I wrote this in #Python and ran it out 100,000,000 steps.\n\nThe last integer boundary crossed at 18.00000000371793 and the last unit fraction ratio was 2.718281861553586.\n\nVerdict:  Not a coincidence!\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555997645621059586",
            "tweet_type": "Others",
            "created_at": "2022-08-06T19:22:07.000Z"
        },
        {
            "id": 2666,
            "username": "raymondh",
            "tweet_id": "1555997659961376771",
            "tweet_text": "Record the unit fractions that caused the accumulation to cross the integer boundary:\n[1.0, 0.25, 0.09090909090909091, 0.03225806451612903, ...]\n\nGet the ratios of consecutive pairs:\n[4.0, 2.75, 2.8181818181818183, 2.6774193548387095, 2.7349397590361444, ...]\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555997645621059586",
            "tweet_type": "Others",
            "created_at": "2022-08-06T19:22:05.000Z"
        },
        {
            "id": 2667,
            "username": "raymondh",
            "tweet_id": "1555997654596943873",
            "tweet_text": "Start with unit fractions:\n[1.0, 0.5, 0.3333333333333333, 0.25, 0.2, ...]\n\nAccumulate them:\n[1.0, 1.5, 1.8333333333333333, 2.083333333333333, ...]\n\nKeep only the ones that cross an integer boundary:\n[1.0, 2.083333333333333, 3.0198773448773446, 4.02724519543652, ...]\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555997645621059586",
            "tweet_type": "Others",
            "created_at": "2022-08-06T19:22:04.000Z"
        },
        {
            "id": 2668,
            "username": "raymondh",
            "tweet_id": "1555997650159386626",
            "tweet_text": "Today while playing with MS Excel he said, \"I found e!\"\n\nHe presented me with a Byzantine procedure where 2.7 emerged after 250 steps. He hypothesized that this unlikely procedure would converge to e.\n\nI fired up #Python to test it.\n\nLo and behold, e emerged. \ud83e\uddd0\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555997645621059586",
            "tweet_type": "Others",
            "created_at": "2022-08-06T19:22:03.000Z"
        },
        {
            "id": 2669,
            "username": "raymondh",
            "tweet_id": "1555997645621059586",
            "tweet_text": "Nurturing a #Python seedling:  How on earth can I feed my ten-year-old's amazing mind?\n\nI'm afraid that if I teach him conventional programming and mathematics that he will lose his natural, instinctive ability to successfully navigate uncharted waters.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555997645621059586",
            "tweet_type": "Others",
            "created_at": "2022-08-06T19:22:02.000Z"
        },
        {
            "id": 2670,
            "username": "raymondh",
            "tweet_id": "1553266040708026368",
            "tweet_text": "I once used this harmonic number factlet in a #Python heapq module comment to analyze the running time for heapq.nsmallest() and heapq.nlargest() for random inputs.\n\nhttps://t.co/8g51b4uCmb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553266037382004736",
            "tweet_type": "Others",
            "created_at": "2022-07-30T06:27:37.000Z"
        },
        {
            "id": 2671,
            "username": "raymondh",
            "tweet_id": "1553266039562981377",
            "tweet_text": "It's also pretty cool that in approximating the differences of harmonic numbers, the magic constant cancels out and only natural logs remain:\n\n# \u03a3 1/x from x=10,001 to x=20,000\n&gt;&gt;&gt; math.log(20_000) - math.log(10_000)\n0.6931471805599436\n&gt;&gt;&gt; H(20_000) - H(10_000)\n0.693122181184945",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553266037382004736",
            "tweet_type": "Others",
            "created_at": "2022-07-30T06:27:36.000Z"
        },
        {
            "id": 2672,
            "username": "raymondh",
            "tweet_id": "1553266038501912576",
            "tweet_text": "def H(n):\n    'Sum of unit fractions up from 1/1 to 1/n.'\n    return math.fsum(1/x for x in range(1, n+1))\n\ndef EstimatedH(n):\n    'Nth harmonic number (approx).'\n    return math.log(n) + 0.57721_56649\n\n&gt;&gt;&gt; H(100_000)\n12.090146129863427\n\n&gt;&gt;&gt; EstimatedH(100_000)\n12.09014112987023",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553266037382004736",
            "tweet_type": "Others",
            "created_at": "2022-07-30T06:27:36.000Z"
        },
        {
            "id": 2673,
            "username": "raymondh",
            "tweet_id": "1553266037382004736",
            "tweet_text": "Today was another happy math question day:  Dad, what do all the unit fractions add up to?\n\nSo, we made a spreadsheet, wrote some #Python, talked about convergence and divergence, graphed H(n) vs ln(n), and derived the Euler\u2013Mascheroni constant.  \ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553266037382004736",
            "tweet_type": "Others",
            "created_at": "2022-07-30T06:27:36.000Z"
        },
        {
            "id": 2674,
            "username": "raymondh",
            "tweet_id": "1552769759594262528",
            "tweet_text": "Matthew's math rule of thumb:   \u03c0 \u2248 3.15 \u2248 \u221a10\n\nHe checked by computing ratio ratio \u03c0/\u221a10 and getting 0.993",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552769759594262528",
            "tweet_type": "Others",
            "created_at": "2022-07-28T21:35:34.000Z"
        },
        {
            "id": 2675,
            "username": "raymondh",
            "tweet_id": "1551660234984329218",
            "tweet_text": "The prefix \u201chypo\u201d means below or under, while the word \u201cchondriac\u201d means cartilage, referring to the cartilage of the ribs. Therefore, the hypochondriac region is located beneath the ribcage. https://t.co/zblq0xrxkU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551660234984329218",
            "tweet_type": "Others",
            "created_at": "2022-07-25T20:06:43.000Z"
        },
        {
            "id": 2676,
            "username": "raymondh",
            "tweet_id": "1551609261473529857",
            "tweet_text": "Source for this wonderful fact let:\n\nhttps://t.co/QBgkhjYKUQ\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551609257472172034",
            "tweet_type": "Others",
            "created_at": "2022-07-25T16:44:10.000Z"
        },
        {
            "id": 2677,
            "username": "raymondh",
            "tweet_id": "1551609260211052545",
            "tweet_text": "The approximation becomes more accurate with smaller changes:\n\n&gt;&gt;&gt; x1, x2 = 25.1, 25.4\n&gt;&gt;&gt; (x2 - x1) / x1\n0.011952191235059646\n&gt;&gt;&gt; log(x2) - log(x1)\n0.011881327886752224\n\nHere's the math:\n\nhttps://t.co/KNHcjZpf6C\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551609257472172034",
            "tweet_type": "Others",
            "created_at": "2022-07-25T16:44:09.000Z"
        },
        {
            "id": 2678,
            "username": "raymondh",
            "tweet_id": "1551609259129020421",
            "tweet_text": "It works for percentage decreases as well:\n\n&gt;&gt;&gt; x1, x2 = 25.1, 19.9\n&gt;&gt;&gt; (x2 - x1) / x1\n-0.20717131474103595\n&gt;&gt;&gt; log(x2) - log(x1)\n-0.23214811440729166\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551609257472172034",
            "tweet_type": "Others",
            "created_at": "2022-07-25T16:44:09.000Z"
        },
        {
            "id": 2679,
            "username": "raymondh",
            "tweet_id": "1551609257472172034",
            "tweet_text": "#Python Data science rule of thumb:  Percentage changes are approximated by the difference in natural logarithms.\n\n&gt;&gt;&gt; x1, x2 = 25.1, 29.7\n&gt;&gt;&gt; (x2 - x1) / x1\n0.18326693227091623\n&gt;&gt;&gt; log(x2) - log(x1)\n0.16827919967091542\n\nThis is useful for interpreting log plots.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551609257472172034",
            "tweet_type": "Others",
            "created_at": "2022-07-25T16:44:09.000Z"
        },
        {
            "id": 2680,
            "username": "raymondh",
            "tweet_id": "1551282440777437184",
            "tweet_text": "The lion's share of the speed-up is due to argument parsing.\n\nA tiny portion of the speed-up is algorithmic:\n\nhttps://t.co/hdrJOrE2PI\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551282437510021120",
            "tweet_type": "Others",
            "created_at": "2022-07-24T19:05:29.000Z"
        },
        {
            "id": 2681,
            "username": "raymondh",
            "tweet_id": "1551282439569526787",
            "tweet_text": "% python3.11 -m timeit -s 'from math import pi, log, log2' 'log(pi)'\n5000000 loops, best of 5: 42 nsec per loop\n\n% python3.11 -m timeit -s 'from math import pi, log, log2' 'log2(pi)'\n10000000 loops, best of 5: 23.2 nsec per loop\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551282437510021120",
            "tweet_type": "Others",
            "created_at": "2022-07-24T19:05:29.000Z"
        },
        {
            "id": 2682,
            "username": "raymondh",
            "tweet_id": "1551282438625808385",
            "tweet_text": "I just used this fact to get a 25% speed-up for the standard library's new random.binomialvariate() function.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551282437510021120",
            "tweet_type": "Others",
            "created_at": "2022-07-24T19:05:29.000Z"
        },
        {
            "id": 2683,
            "username": "raymondh",
            "tweet_id": "1551282437510021120",
            "tweet_text": "#Python performance tip:  Specialized functions with simpler signatures tend to beat their more generalized counterparts.\n\nlog2(x) and log10(x) are almost twice as fast as log(x) and three times as fast as log(x, 2) or log(x, 2.0).\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551282437510021120",
            "tweet_type": "Python tips",
            "created_at": "2022-07-24T19:05:29.000Z"
        },
        {
            "id": 2684,
            "username": "raymondh",
            "tweet_id": "1547227459329957888",
            "tweet_text": "More from the docs:\n\nThe replacement fields within the format_spec are substituted before the format_spec string is interpreted. This allows the formatting of a value to be dynamically specified.\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547227455009734658",
            "tweet_type": "Others",
            "created_at": "2022-07-13T14:32:27.000Z"
        },
        {
            "id": 2685,
            "username": "raymondh",
            "tweet_id": "1547227458256125952",
            "tweet_text": "Per the docs:\n\nA format_spec field can also include nested replacement fields within it. These nested replacement fields may contain a field name, conversion flag and format specification, but deeper nesting is not allowed.\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547227455009734658",
            "tweet_type": "Others",
            "created_at": "2022-07-13T14:32:26.000Z"
        },
        {
            "id": 2686,
            "username": "raymondh",
            "tweet_id": "1547227457257963521",
            "tweet_text": "Even the type field can also be variable:\n\n&gt;&gt;&gt; n = 123\n&gt;&gt;&gt; t = 'd'; f'{n:{t}}'  # decimal\n'123'\n&gt;&gt;&gt; t = 'o'; f'{n:{t}}'  # octal\n'173'\n&gt;&gt;&gt; t = 'x'; f'{n:{t}}'  # hex\n'7b'\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547227455009734658",
            "tweet_type": "Others",
            "created_at": "2022-07-13T14:32:26.000Z"
        },
        {
            "id": 2687,
            "username": "raymondh",
            "tweet_id": "1547227456289087493",
            "tweet_text": "Interestingly, this works for any part of the format specifier, including justification:\n\n&gt;&gt;&gt; s = 'aloha'\n&gt;&gt;&gt; just = '&lt;'\n&gt;&gt;&gt; f'{s:{just}10}'\n'aloha     '\n\n&gt;&gt;&gt; just = '&gt;'\n&gt;&gt;&gt; f'{s:{just}10}'\n'     aloha'\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547227455009734658",
            "tweet_type": "Others",
            "created_at": "2022-07-13T14:32:26.000Z"
        },
        {
            "id": 2688,
            "username": "raymondh",
            "tweet_id": "1547227455009734658",
            "tweet_text": "#Python tip: Create variable width fields in f-strings with an inner pair of curly braces.\n\n&gt;&gt;&gt; s = 'hello'\n&gt;&gt;&gt; n = 10\n&gt;&gt;&gt; f'{s:^{n}}'\n'  hello   '\n\n&gt;&gt;&gt; n = 20\n&gt;&gt;&gt; f'{s:^{n}}'\n'       hello        '\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547227455009734658",
            "tweet_type": "Python tips",
            "created_at": "2022-07-13T14:32:26.000Z"
        },
        {
            "id": 2689,
            "username": "raymondh",
            "tweet_id": "1545896319067340801",
            "tweet_text": "The bug in BTRS was much harder to find and involved tracing through all the mathematical reasoning and relating it back to the code step-by-step.\n\nhttps://t.co/iL0iGRCRHH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545896314545790978",
            "tweet_type": "Others",
            "created_at": "2022-07-09T22:22:58.000Z"
        },
        {
            "id": 2690,
            "username": "raymondh",
            "tweet_id": "1545896317611909121",
            "tweet_text": "The error in BG only ate an hour.\n\nhttps://t.co/BB4ZuXZ3jM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545896314545790978",
            "tweet_type": "Others",
            "created_at": "2022-07-09T22:22:58.000Z"
        },
        {
            "id": 2691,
            "username": "raymondh",
            "tweet_id": "1545896316013879298",
            "tweet_text": "This weekend, I implemented random.binomialvariate() for #Python.\n\nBOTH of the papers I relied on had errors in the algorithm specifications.  Argh!\n\nOn the plus side, after debugging their papers, I now understand the code much better ;-)\n\nhttps://t.co/bGoRsVz8Ed",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545896314545790978",
            "tweet_type": "Others",
            "created_at": "2022-07-09T22:22:57.000Z"
        },
        {
            "id": 2692,
            "username": "raymondh",
            "tweet_id": "1545896314545790978",
            "tweet_text": "Protip for the under appreciated:  If you're publishing an algorithm, be sure to put a subtle error in the code.\n\nThat will ensure the implementers have to thoroughly read, understand, and check every step before they can get a useful result.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1545896314545790978",
            "tweet_type": "Others",
            "created_at": "2022-07-09T22:22:57.000Z"
        },
        {
            "id": 2693,
            "username": "raymondh",
            "tweet_id": "1543592205268426757",
            "tweet_text": "#Python PEP 695 proposes a new syntax for declaring type parameters for generic classes, functions, and type aliases.\n\nThis will be a big win. The current state of affairs is a recurring source of confusion and is quite unpleasant.\n\nhttps://t.co/6dLNti4pm1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1543592205268426757",
            "tweet_type": "Others",
            "created_at": "2022-07-03T13:47:14.000Z"
        },
        {
            "id": 2694,
            "username": "raymondh",
            "tweet_id": "1542940115638550528",
            "tweet_text": "Takeways:\n\n* Sets, itertools, and collections make short work of problems like this.\n\n* Big-Oh running times matter.\n\n* Constant factors matter.\n\n* Discrete mathematics is a treasure trove of ideas.\n\n* It is hard to know what is best until you do analysis and run timings :-)\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542940114388750336",
            "tweet_type": "Others",
            "created_at": "2022-07-01T18:36:04.000Z"
        },
        {
            "id": 2695,
            "username": "raymondh",
            "tweet_id": "1542940114388750336",
            "tweet_text": "Some #Python questions on StackOverflow are surprisingly fertile. They teach you to not stop thinking once a first solution is found.\n\n1/\n\nhttps://t.co/XHceH6acMr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542940114388750336",
            "tweet_type": "Others",
            "created_at": "2022-07-01T18:36:04.000Z"
        },
        {
            "id": 2696,
            "username": "raymondh",
            "tweet_id": "1541722008987340801",
            "tweet_text": "The name indices() had been a proposed because a principal use case was associated values with the indices of those values.\n\n&gt;&gt;&gt; s = 'abc'\n&gt;&gt;&gt; list(enumerate(s))\n[(0, 'a'), (1, 'b'), (2, 'c')]\n&gt;&gt;&gt; s[0]\n'a'\n&gt;&gt;&gt; s[1]\n'b'\n&gt;&gt;&gt; s[2]\n'c'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1541722007687020545",
            "tweet_type": "Others",
            "created_at": "2022-06-28T09:55:45.000Z"
        },
        {
            "id": 2697,
            "username": "raymondh",
            "tweet_id": "1541722007687020545",
            "tweet_text": "#Python tidbit:  Names matter.  If enumerate() had been called indices(), we never would have gotten a *start* argument.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1541722007687020545",
            "tweet_type": "Others",
            "created_at": "2022-06-28T09:55:45.000Z"
        },
        {
            "id": 2698,
            "username": "raymondh",
            "tweet_id": "1536120072867037184",
            "tweet_text": "I you want more background and detail, I created StackOverflow Q&amp;A for this topic:\n\nhttps://t.co/5tqawuU5tv\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1536105875441590279",
            "tweet_type": "Others",
            "created_at": "2022-06-12T22:55:39.000Z"
        },
        {
            "id": 2699,
            "username": "raymondh",
            "tweet_id": "1536105880185356291",
            "tweet_text": "The kwargs are there to support the rel_tol and abs_tol arguments for isclose().\n\nassert approx(1.1 + 2.2) != 3.4\nassert approx(1.1 + 2.2, abs_tol=0.2) == 3.4\n\nComplex values are supported.\n\nassert approx(1.1j + 2.2j) == 0.0 + 3.3j\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1536105875441590279",
            "tweet_type": "Others",
            "created_at": "2022-06-12T21:59:15.000Z"
        },
        {
            "id": 2700,
            "username": "raymondh",
            "tweet_id": "1536105878486654976",
            "tweet_text": "class approximately(complex):\n    def __new__(cls, x, /, **kwargs):\n        result = complex.__new__(cls, x)\n        result.kwargs = kwargs\n        return result\n    def __eq__(self, other):\n        return cmath.isclose(self, other, **self.kwargs)\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1536105875441590279",
            "tweet_type": "Others",
            "created_at": "2022-06-12T21:59:15.000Z"
        },
        {
            "id": 2701,
            "username": "raymondh",
            "tweet_id": "1536105877006127105",
            "tweet_text": "Without the approximately() wrapper, the case would not match due to round-off error.\n\n&gt;&gt;&gt; 1.1 + 2.2 == 3.3\nFalse\n\n&gt;&gt;&gt; 1.1 + 2.2\n3.3000000000000003\n\n&gt;&gt;&gt; 1.1 + 2.2 - 3.3\n4.440892098500626e-16\n\nSo, we need an approximate match wrapper.\n\n/2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1536105875441590279",
            "tweet_type": "Others",
            "created_at": "2022-06-12T21:59:15.000Z"
        },
        {
            "id": 2702,
            "username": "raymondh",
            "tweet_id": "1536105875441590279",
            "tweet_text": "Structural pattern matching in #Python supports float and complex literals in case statements.\n\nHowever, exact equality tests for float/complex are often a bad idea.\n\nHere's a fix.\n\nmatch approximately(1.1 + 2.2):\n    case 3.3:\n        print('hit!')\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1536105875441590279",
            "tweet_type": "Others",
            "created_at": "2022-06-12T21:59:14.000Z"
        },
        {
            "id": 2703,
            "username": "raymondh",
            "tweet_id": "1535635420578553858",
            "tweet_text": "&gt;&gt;&gt; Fraction(39, 143)\nFraction(3, 11)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535635417306914820",
            "tweet_type": "Others",
            "created_at": "2022-06-11T14:49:49.000Z"
        },
        {
            "id": 2704,
            "username": "raymondh",
            "tweet_id": "1535635419001405440",
            "tweet_text": "There is a currently a proposal to add __match_args__ to Fraction.  Apparently, I'm the only one who thinks this is a bad idea:\n\nmatch Fraction(n, 143):\n    case Fraction(38, 143):\n        print('possible match')\n    case Fraction(39, 143):\n        print('this can never match')",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535635417306914820",
            "tweet_type": "Others",
            "created_at": "2022-06-11T14:49:49.000Z"
        },
        {
            "id": 2705,
            "username": "raymondh",
            "tweet_id": "1535635417306914820",
            "tweet_text": "#Python anti-pattern.   Don't use __match_args__ in classes where the stored attribute values don't agree with those used in the constructor.\n\n&gt;&gt;&gt; f = Fraction(6, 8)\n&gt;&gt;&gt; f.numerator == 6\nFalse\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1535635417306914820",
            "tweet_type": "Others",
            "created_at": "2022-06-11T14:49:48.000Z"
        },
        {
            "id": 2706,
            "username": "raymondh",
            "tweet_id": "1534642378522378240",
            "tweet_text": "If you switch to an infinite source of primes, the loop condition simplifies to \"n &gt;= 1\":\n\nn = 2759484\np = next(prime)\nwhile n &gt;= 1:\n    q, r = divmod(n, p)\n    if r:\n        p = next(prime)\n    else:\n        print(p, q)\n        n = q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534632938511400966",
            "tweet_type": "Others",
            "created_at": "2022-06-08T21:03:49.000Z"
        },
        {
            "id": 2707,
            "username": "raymondh",
            "tweet_id": "1534632943078998016",
            "tweet_text": "prime = iter((2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37))\n\nn = 2_759_484\np = next(prime)\nwhile True:\n    q, r = divmod(n, p)\n    if r == 0:\n        print(p)\n        n = q\n    if r != 0:\n        p = next(prime)\n    if q &lt; p:\n        break",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534632938511400966",
            "tweet_type": "Others",
            "created_at": "2022-06-08T20:26:20.000Z"
        },
        {
            "id": 2708,
            "username": "raymondh",
            "tweet_id": "1534632941594284033",
            "tweet_text": "n - number    p - prime   q - quotient   r - remainder\n\nq, r = divmod(n, p)\nif r == 0: then p is a factor and q is the new n\nif r != 0: set p to the next largest prime\nrepeat until q &lt; p",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534632938511400966",
            "tweet_type": "Others",
            "created_at": "2022-06-08T20:26:20.000Z"
        },
        {
            "id": 2709,
            "username": "raymondh",
            "tweet_id": "1534632938511400966",
            "tweet_text": "This #Python daddy is impressed. My ten year-old wanted to \"run a new algorithm\", so I sketched out a procedure for prime factorizations. He then manually factored 2,759,484 into 2*2*3*7*7*13*19*19.\n\nWe also wrote it in #Python so the computer could have some fun as well.  \ud83d\ude09 https://t.co/eUdH392DGM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUwVPDyXoAARSxs.jpg\"]",
            "tweet_conversation_id": "1534632938511400966",
            "tweet_type": "Others",
            "created_at": "2022-06-08T20:26:19.000Z"
        },
        {
            "id": 2710,
            "username": "raymondh",
            "tweet_id": "1534458121212645376",
            "tweet_text": "My first intuition is that this is essentially the Euclidean GCD algorithm being run in reverse, generating all cases where gcd(m, n) = 1 and m &gt; n.\n\nBy covering all possible one-step reductions, it is guaranteed to be exhaustive.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534458117068668929",
            "tweet_type": "Others",
            "created_at": "2022-06-08T08:51:39.000Z"
        },
        {
            "id": 2711,
            "username": "raymondh",
            "tweet_id": "1534458119132172289",
            "tweet_text": "This exhaustively lists all combinations of relatively prime positive integers \u2014 pairs that don't have a common factor other than one.\n\nTo me, this seems like great magic.\n\nWikipedia attributes the algorithm to various Math Gazette articles (behind a paywall).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534458117068668929",
            "tweet_type": "Others",
            "created_at": "2022-06-08T08:51:39.000Z"
        },
        {
            "id": 2712,
            "username": "raymondh",
            "tweet_id": "1534458117068668929",
            "tweet_text": "Cute #Python math algorithm of the day:\n\ndef coprimes():\n    pairs = deque([(2,1), (3,1)])\n    while True:\n        m, n = p = pairs.popleft()\n        yield p\n        pairs.append((2*m - n, m))\n        pairs.append((2*m + n, m))\n        pairs.append((m + 2*n, n))",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534458117068668929",
            "tweet_type": "Others",
            "created_at": "2022-06-08T08:51:38.000Z"
        },
        {
            "id": 2713,
            "username": "raymondh",
            "tweet_id": "1533431676717744134",
            "tweet_text": "This #StackOverflow #Python question is even worse.\n\nThe OP already knows they are using the wrong tool for the job but is persisting never-the-less.\n\n\"I know helicopters make bad submarines, but how would you do it anyway?\"\n\nhttps://t.co/tWlyL8KMWu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533399872669351938",
            "tweet_type": "Others",
            "created_at": "2022-06-05T12:52:56.000Z"
        },
        {
            "id": 2714,
            "username": "raymondh",
            "tweet_id": "1533399872669351938",
            "tweet_text": "More and more, #Python questions on #StackOverflow are in the form: \"I have a shovel and rake. How do I modify the shovel to easily rake leaves, and how do I modify the rake to move easily shovel dirt?\"\n\nhttps://t.co/aexUj7czHP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533399872669351938",
            "tweet_type": "Others",
            "created_at": "2022-06-05T10:46:33.000Z"
        },
        {
            "id": 2715,
            "username": "raymondh",
            "tweet_id": "1533370271092117505",
            "tweet_text": "The other conference hash tag is #PyConItalia",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:48:55.000Z"
        },
        {
            "id": 2716,
            "username": "raymondh",
            "tweet_id": "1533369947191140353",
            "tweet_text": "The PDF isn't pretty.  My slides are generated by Sphinx in a read-tuhe-docs format.  When I get a chance (and figure-out how), I'll post the beautiful version of the slides on Github pages.\n\nHopefully, by then I'll have a video link to post as well.\n\nEnjoy!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:47:38.000Z"
        },
        {
            "id": 2717,
            "username": "raymondh",
            "tweet_id": "1533369945534472192",
            "tweet_text": "#Python 's Structural pattern matching is amazing.\n\nBut when you apply it to real world code, all kinds of interesting problems arise and the solutions aren't always obvious.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:47:38.000Z"
        },
        {
            "id": 2718,
            "username": "raymondh",
            "tweet_id": "1533369943764488192",
            "tweet_text": "I'll post a link to the presentation video when it is available, but I only had 30 minutes.\n\nPerhaps another conference has an open back to back timeslots for 60 to 75 minutes.\n\nThis is a super interesting topic.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:47:37.000Z"
        },
        {
            "id": 2719,
            "username": "raymondh",
            "tweet_id": "1533369942090948610",
            "tweet_text": "There is a problems and solutions section:\n\n* Inverting case logic\n* Matching sets and frozensets\n* Exact type matches\n* Order of overlapping cases\n* Converting hasattr() duck typed cases\n* Handling difficult cases\n* Fooling aggressive linters\n* Floating point special values",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:47:37.000Z"
        },
        {
            "id": 2720,
            "username": "raymondh",
            "tweet_id": "1533369940153188353",
            "tweet_text": "We draw key learning points from real #Python applications:\n\n* Datetime formatting mini language\n* Language tokenizer\n* SQL logic for JSON lines\n* SQL logic for two level JSON\n* Traversing arbitrary depth JSON trees\n* Marshal style data serializer",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:47:37.000Z"
        },
        {
            "id": 2721,
            "username": "raymondh",
            "tweet_id": "1533369938559356929",
            "tweet_text": "You'll find #Python pattern matching recipes for:\n\n* Replacing literals with variables and named constants\n* Replacing literals with regexes\n* Replacing literals with function calls\n* Replacing literals with set membership tests",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:47:36.000Z"
        },
        {
            "id": 2722,
            "username": "raymondh",
            "tweet_id": "1533369936739016705",
            "tweet_text": "Here's a PDF for my #Python #PyConIT2022 talk:  Structural Pattern Matching in the Real World:  New tooling, real code, problems solved.\n\nThis is intermediate and advanced level Structural Pattern Matching.\n\ntl;dr The \u201cgood stuff\u201d is in section 1.2\n\nhttps://t.co/CwguxhRaZS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533369936739016705",
            "tweet_type": "Others",
            "created_at": "2022-06-05T08:47:36.000Z"
        },
        {
            "id": 2723,
            "username": "raymondh",
            "tweet_id": "1530398889852952580",
            "tweet_text": "This will be my first #Python conference since the start of the pandemic. It will be liberating to be among friends in-person once again. \ud83d\ude42\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1530398887864897536",
            "tweet_type": "Others",
            "created_at": "2022-05-28T04:01:43.000Z"
        },
        {
            "id": 2724,
            "username": "raymondh",
            "tweet_id": "1530398888888356865",
            "tweet_text": "The keynote will be about the craft of writing unit tests.\n\nI also have an intermediate level talk about real world applications for structural pattern matching, the problems encountered and their solutions (one of which is truly magical, removing a major obstacle).\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1530398887864897536",
            "tweet_type": "Others",
            "created_at": "2022-05-28T04:01:43.000Z"
        },
        {
            "id": 2725,
            "username": "raymondh",
            "tweet_id": "1530398887864897536",
            "tweet_text": "Twelve years ago, I took my new bride to #PyItalia just before our honeymoon.\n\nIn just a few hours, we're leaving the U.S., destined once again for that cherished #Python conference.  This time, we'll have our ten year old child in tow ;-)\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1530398887864897536",
            "tweet_type": "Others",
            "created_at": "2022-05-28T04:01:42.000Z"
        },
        {
            "id": 2726,
            "username": "raymondh",
            "tweet_id": "1529920415052746762",
            "tweet_text": "It wouldn't be just for magic methods.\n\n# Examples from collections.UserLIst\n\ndef append(self, item):\n    https://t.co/ncHwUzZ0LU.append(item)\n\ndef insert(self, i, item):\n     https://t.co/ncHwUzZ0LU.insert(i, item)\n\ndef pop(self, i=-1):\n    return https://t.co/ncHwUzZ0LU.pop(i)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529917438728491029",
            "tweet_type": "Others",
            "created_at": "2022-05-26T20:20:26.000Z"
        },
        {
            "id": 2727,
            "username": "raymondh",
            "tweet_id": "1529917438728491029",
            "tweet_text": "#Python idea:  Would auto delegation be useful for you?\n\n@dataclass\nclass A:\n   seq: list\n   __len__ = delegate('seq')\n   __getitem__ = delegate('seq')\n\nSpelled-out equivalent code:\n\n  def __len__(self):\n    return len(self.seq)\n\n  def __getitem__(self, i):\n    return self.seq[I]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529917438728491029",
            "tweet_type": "Others",
            "created_at": "2022-05-26T20:08:36.000Z"
        },
        {
            "id": 2728,
            "username": "raymondh",
            "tweet_id": "1529534491043274752",
            "tweet_text": "\"Write a data structure that works like collections.Counter that reduces the speed of the most_common(k) to O(k) but at the expense of O(log n) update costs.\"\n\nSo the hash table needs to be replaced by a balanced binary tree or by a sorted list updated by bisect.insort().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529534487465451521",
            "tweet_type": "Others",
            "created_at": "2022-05-25T18:46:54.000Z"
        },
        {
            "id": 2729,
            "username": "raymondh",
            "tweet_id": "1529534489889845250",
            "tweet_text": "Another variation is for a teacher (or interviewer) to weight problem requirements so as to preclude the most common, obvious, or builtin solutions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529534487465451521",
            "tweet_type": "Others",
            "created_at": "2022-05-25T18:46:54.000Z"
        },
        {
            "id": 2730,
            "username": "raymondh",
            "tweet_id": "1529534488702754819",
            "tweet_text": "\"I have to reverse a list but cannot use slicing or call any methods or functions\".\n\nThat precludes, s[::-1], s.reverse(), and list(reversed(s)).\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529534487465451521",
            "tweet_type": "Others",
            "created_at": "2022-05-25T18:46:54.000Z"
        },
        {
            "id": 2731,
            "username": "raymondh",
            "tweet_id": "1529534487465451521",
            "tweet_text": "StackOverflow provides a testament to the richness of #Python tooling.\n\nOver and over, people post questions from teachers (or interviewers) in the form of \"Write a function that does x, but you're not allowed to use the tool that already does that\".\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529534487465451521",
            "tweet_type": "Others",
            "created_at": "2022-05-25T18:46:53.000Z"
        },
        {
            "id": 2732,
            "username": "raymondh",
            "tweet_id": "1528772343211892738",
            "tweet_text": "I'm curious. What do you all do?\n\na) Don't ever have a need for do-while\n\nb) while True: &lt;body&gt; if not &lt;cond&gt;: break\n\nc) Duplicate code.  &lt;body&gt; while &lt;cond&gt;: &lt;body&gt;\n\nAlso, do you like this?\n\ndo ... while &lt;cond&gt;:\n    &lt;body&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528772337306419200",
            "tweet_type": "Others",
            "created_at": "2022-05-23T16:18:24.000Z"
        },
        {
            "id": 2733,
            "username": "raymondh",
            "tweet_id": "1528772342024966144",
            "tweet_text": "I'm not happy with the status quo.  With two levels of indentation and an inverted test condition, it is awkward enough to where people seem to prefer duplicating code.\n\n&lt;body&gt;\nwhile &lt;cond&gt;:\n    &lt;same body&gt;\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528772337306419200",
            "tweet_type": "Others",
            "created_at": "2022-05-23T16:18:24.000Z"
        },
        {
            "id": 2734,
            "username": "raymondh",
            "tweet_id": "1528772340917600259",
            "tweet_text": "It was a mistake for the PEP to address the more general \"loop and a half\" problem \u2014 while loops where the termination test is in the middle.\n\nIt's the do-while case that is important.  Everything else was a distraction.\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528772337306419200",
            "tweet_type": "Others",
            "created_at": "2022-05-23T16:18:23.000Z"
        },
        {
            "id": 2735,
            "username": "raymondh",
            "tweet_id": "1528772339818717185",
            "tweet_text": "If you want to avoid repeating code, our status quo solution/recommendation is this:\n\nwhile True:\n   &lt;body&gt;\n   if not &lt;cond&gt;:\n       break\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528772337306419200",
            "tweet_type": "Others",
            "created_at": "2022-05-23T16:18:23.000Z"
        },
        {
            "id": 2736,
            "username": "raymondh",
            "tweet_id": "1528772338610839553",
            "tweet_text": "To put the condition at the bottom, we have to fight #Python's pattern of a colon preceding an indented suite of statements terminated by unindenting.\n\nThat leads to awkward proposals like this:\n\ndo:\n    &lt;setup code&gt;\nwhile &lt;condition&gt;:\n    &lt;loop body&gt;\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528772337306419200",
            "tweet_type": "Others",
            "created_at": "2022-05-23T16:18:23.000Z"
        },
        {
            "id": 2737,
            "username": "raymondh",
            "tweet_id": "1528772337306419200",
            "tweet_text": "Once upon a time in PEP 315, I explored adding a do-while loop to #Python.  No perfect fit was found.  The best candidate was:\n\ndo ... while &lt;cond&gt;:\n    &lt;body&gt;\n\nI liked this, but most core devs intensely disliked the condition being at the top of the loop.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528772337306419200",
            "tweet_type": "Others",
            "created_at": "2022-05-23T16:18:23.000Z"
        },
        {
            "id": 2738,
            "username": "raymondh",
            "tweet_id": "1528436079992397825",
            "tweet_text": "The ChainMap order is helpful when the \"base\" dict defines keys in a meaningful order and the \"shallower\" dicts serve to override values or add new key/value pairs.\n\noptions = ChainMap(vars(comm_line_args), os.environ, application_defaults)\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528436075689086977",
            "tweet_type": "Others",
            "created_at": "2022-05-22T18:02:13.000Z"
        },
        {
            "id": 2739,
            "username": "raymondh",
            "tweet_id": "1528436078880907269",
            "tweet_text": "ChainMap resolves ordering differences by favoring the \"deepest\" dicts over the \"shallowest\":\n\n&gt;&gt;&gt; dict(ChainMap(dict(c=6, f=7), dict(a=1, b=2, c=3, d=4, e=5)))\n{'a': 1, 'b': 2, 'c': 6, 'd': 4, 'e': 5, 'f': 7}\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528436075689086977",
            "tweet_type": "Others",
            "created_at": "2022-05-22T18:02:12.000Z"
        },
        {
            "id": 2740,
            "username": "raymondh",
            "tweet_id": "1528436077513547779",
            "tweet_text": "The order for d |= e makes sense because it matches d.update(e).\n\nThis supports use cases where the \"base\" dict \"d\" defines a meaningful order and the update either overrides values or adds new key/value pairs.\n\n{**d, **e} behaves similarly.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528436075689086977",
            "tweet_type": "Others",
            "created_at": "2022-05-22T18:02:12.000Z"
        },
        {
            "id": 2741,
            "username": "raymondh",
            "tweet_id": "1528436075689086977",
            "tweet_text": "#Python factlet:  When merging dicts with the \"|\" operator, ordering differences are resolved in favor of the leftmost dictionary.\n\n&gt;&gt; dict(a=1, b=2, c=3, d=4, e=5) | dict(c=6, f=7)\n{'a': 1, 'b': 2, 'c': 6, 'd': 4, 'e': 5, 'f': 7}\n\n'c' keeps original order\n'f' goes at the end\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1528436075689086977",
            "tweet_type": "Others",
            "created_at": "2022-05-22T18:02:12.000Z"
        },
        {
            "id": 2742,
            "username": "raymondh",
            "tweet_id": "1527831693268242433",
            "tweet_text": "There's no intent to go down the path of Go, Rust, or Monads.\n\nThis is just a convenience for testing that two functions have the same API.  I need to loop over a variety of input values and assert that the outputs, either values or exceptions, are the same.\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527756863005138944",
            "tweet_type": "Others",
            "created_at": "2022-05-21T02:00:36.000Z"
        },
        {
            "id": 2743,
            "username": "raymondh",
            "tweet_id": "1527756866364874752",
            "tweet_text": "It might be better with a named tuple, but I haven't needed that yet:\n\nclass CallResult(NamedTuple):\n    exception: Exception\n    return_value: Any\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527756863005138944",
            "tweet_type": "Others",
            "created_at": "2022-05-20T21:03:15.000Z"
        },
        {
            "id": 2744,
            "username": "raymondh",
            "tweet_id": "1527756865249193984",
            "tweet_text": "def exc_and_value(func, *args, **kwargs):\n    try:\n        return (None, func(*args, **kwargs))\n    except Exception as e:\n        return (type(e), None)\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527756863005138944",
            "tweet_type": "Others",
            "created_at": "2022-05-20T21:03:15.000Z"
        },
        {
            "id": 2745,
            "username": "raymondh",
            "tweet_id": "1527756864120832004",
            "tweet_text": "This is especially helpful when writing tests to show that two functions are equivalent, both in regular operation and in raising exceptions:\n\nself.assertEqual(\n   exc_and_value(math.comb, n, r),\n   exc_and_value(pure_python.comb, n, r)\n)\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527756863005138944",
            "tweet_type": "Others",
            "created_at": "2022-05-20T21:03:15.000Z"
        },
        {
            "id": 2746,
            "username": "raymondh",
            "tweet_id": "1527756863005138944",
            "tweet_text": "My new favorite #Python helper function makes a call and puts the results in an (exception, result) pair:\n\n&gt;&gt;&gt; exc_and_value('abcde'.index, 'd')\n(None, 3)\n&gt;&gt;&gt; exc_and_value('abcde'.index, 'f')\n(&lt;class 'ValueError'&gt;, None)\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527756863005138944",
            "tweet_type": "Others",
            "created_at": "2022-05-20T21:03:15.000Z"
        },
        {
            "id": 2747,
            "username": "raymondh",
            "tweet_id": "1526654942429302784",
            "tweet_text": "#Python crowd sourcing:   The docstring for str.join() has as awkward sentence that only makes sense after you know what the method does.\n\nCan you suggest an improvement?\n\n\"The string whose method is called is inserted in between each given string.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526654942429302784",
            "tweet_type": "Others",
            "created_at": "2022-05-17T20:04:36.000Z"
        },
        {
            "id": 2748,
            "username": "raymondh",
            "tweet_id": "1526204324078043136",
            "tweet_text": "Instead, you need to use a line continuation character:\n\nassert 'Active/Standby' in output or 'Active/Active' in output, \\\n       'Check failover in the licensed features'\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526204322744262656",
            "tweet_type": "Others",
            "created_at": "2022-05-16T14:14:01.000Z"
        },
        {
            "id": 2749,
            "username": "raymondh",
            "tweet_id": "1526204322744262656",
            "tweet_text": "#Python tip: Don't use parentheses for multiline assert statements \u2014 they form a non-empty tuple which is always True.\n\nassert ('Active/Standby' in output or 'Active/Active' in output,\n        'Check failover in the licensed features')\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526204322744262656",
            "tweet_type": "Python tips",
            "created_at": "2022-05-16T14:14:00.000Z"
        },
        {
            "id": 2750,
            "username": "raymondh",
            "tweet_id": "1525219029425717250",
            "tweet_text": "Hmm.  My previous #Python tweet seems to be on hold by Twitter.  I wonder what bot was triggered by a straight-forward technical tweet?\n\nThe impression count grew at a normal rate for a half-hour and then froze with zero additional views in the new half hour. https://t.co/1qjkkGUFMZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1525219029425717250",
            "tweet_type": "Others",
            "created_at": "2022-05-13T20:58:48.000Z"
        },
        {
            "id": 2751,
            "username": "raymondh",
            "tweet_id": "1525193716113317888",
            "tweet_text": "In normal #Python code, a constant can always be replaced with a variable or expression.\n\nWith structural pattern matching, you need to replace a literal pattern with a value pattern so that an expression can be called outside of the case clause.\n\nhttps://t.co/pYmFqiGZjY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1525193716113317888",
            "tweet_type": "Others",
            "created_at": "2022-05-13T19:18:13.000Z"
        },
        {
            "id": 2752,
            "username": "raymondh",
            "tweet_id": "1524858058576384000",
            "tweet_text": "Also, people may be legitimately using ** unpacking:\n\n    randrange(**parameters)\n\nSo, deprecation would cause unnecessary pain.\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524834238289301514",
            "tweet_type": "Others",
            "created_at": "2022-05-12T21:04:26.000Z"
        },
        {
            "id": 2753,
            "username": "raymondh",
            "tweet_id": "1524857588344668171",
            "tweet_text": "We could deprecate having keyword arguments for randrange().  That would avoid the weird cases and harmonize the API with range() which never took keyword arguments.\n\nHowever, there are people who have cleanly and legitimately written:\n\n     randrange(start=100, stop=200)\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524834238289301514",
            "tweet_type": "Others",
            "created_at": "2022-05-12T21:02:34.000Z"
        },
        {
            "id": 2754,
            "username": "raymondh",
            "tweet_id": "1524834242571579392",
            "tweet_text": "I do have a patch to catch cases like this, but it is somewhat messy and gross.\n\n2/ https://t.co/CD7QAzQSeW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSlMiQgWUBoMtLN.jpg\"]",
            "tweet_conversation_id": "1524834238289301514",
            "tweet_type": "Others",
            "created_at": "2022-05-12T19:29:48.000Z"
        },
        {
            "id": 2755,
            "username": "raymondh",
            "tweet_id": "1524834238289301514",
            "tweet_text": "The API for #Python's randrange() predates our ability to define positional-only arguments.\n\nSo we have to live with minor atrocities like this:\n\n&gt;&gt;&gt; randrange(start=100)\n64\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524834238289301514",
            "tweet_type": "Others",
            "created_at": "2022-05-12T19:29:47.000Z"
        },
        {
            "id": 2756,
            "username": "raymondh",
            "tweet_id": "1524801727593078784",
            "tweet_text": "\"Sgr A* it completes an orbit in mere minutes. This means the brightness and pattern of the gas around Sgr A* was changing rapidly as the EHT Collaboration was observing it \u2014 a bit like trying to take a clear picture of a puppy quickly chasing its tail.\"\n\nhttps://t.co/ufkFZc31n5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524801727593078784",
            "tweet_type": "Others",
            "created_at": "2022-05-12T17:20:35.000Z"
        },
        {
            "id": 2757,
            "username": "raymondh",
            "tweet_id": "1524246957987975170",
            "tweet_text": "#Python pop quiz:\n\nIn bisect(array, value, key=somefunc), the key function is only applied to elements of the array but not the value.\n\nIn insort(array, value, key=somefunc), the key function is applied to both the elements of the array and the value.\n\nCan you figure-out why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524246957987975170",
            "tweet_type": "Others",
            "created_at": "2022-05-11T04:36:08.000Z"
        },
        {
            "id": 2758,
            "username": "raymondh",
            "tweet_id": "1523804319459549184",
            "tweet_text": "Interestingly, it wouldn't be hard to add that capability to dataclasses:\n\n  age: int = field(assert_isinstance=int)\n\nor\n\n  age: int = field(type_converter=int)\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1523804316775362560",
            "tweet_type": "Others",
            "created_at": "2022-05-09T23:17:15.000Z"
        },
        {
            "id": 2759,
            "username": "raymondh",
            "tweet_id": "1523804318238920704",
            "tweet_text": "The effect is strong in beginners who've only recently been introduced to type annotations.\n\nThe effect is even stronger for people who have been exposed to ORMs, traitlets, argparse, or other tools where class variables are used to define actions at the instance level.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1523804316775362560",
            "tweet_type": "Others",
            "created_at": "2022-05-09T23:17:15.000Z"
        },
        {
            "id": 2760,
            "username": "raymondh",
            "tweet_id": "1523804316775362560",
            "tweet_text": "When people first encounter @dataclass or NamedTuple in #Python, it is common for people to believe that the type annotations will generate type checks or type coercions.\n\n@ dataclass \nclass Person:\n  name: str\n  age: int\n\nPerson('Alice', '30')\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1523804316775362560",
            "tweet_type": "Others",
            "created_at": "2022-05-09T23:17:14.000Z"
        },
        {
            "id": 2761,
            "username": "raymondh",
            "tweet_id": "1522417711061610496",
            "tweet_text": "#Python is great for simple demonstrations like this.\n\nA pencil and paper solution is too tedious and lacks the magic of having instant results:  Ukelele \u2248 Guitar and Flute \u2248 Recorder.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522414873065541632",
            "tweet_type": "Others",
            "created_at": "2022-05-06T03:27:22.000Z"
        },
        {
            "id": 2762,
            "username": "raymondh",
            "tweet_id": "1522414878052556801",
            "tweet_text": "This was all a little hand wavy (include eyeball measurements of instruments, contrived model parameters, and very shallow learning), but he got the gist of it.\n\nComputers can be trained to recognize and generalize with math that a 4th grader can understand. \ud83d\ude09\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522414873065541632",
            "tweet_type": "Others",
            "created_at": "2022-05-06T03:16:06.000Z"
        },
        {
            "id": 2763,
            "username": "raymondh",
            "tweet_id": "1522414876878123008",
            "tweet_text": "# Validation set\nukulele = [0, 0, 2, 2, 6, 8, 7, 10, 8, 7, 2, 0]\nflute = [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]\n\n&gt;&gt;&gt; what_is_it(ukulele)\n'guitar'\n&gt;&gt; what_is_it(flute)\n'recorder'\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522414873065541632",
            "tweet_type": "Others",
            "created_at": "2022-05-06T03:16:06.000Z"
        },
        {
            "id": 2764,
            "username": "raymondh",
            "tweet_id": "1522414875724685312",
            "tweet_text": "def what_is_it(v):\n    total = sum(v_i * m_i for (v_i, m_i) in zip(v, model))\n    return 'guitar' if total &gt; 150 else 'recorder'\n\n&gt;&gt;&gt; what_is_it(guitar)\n'guitar'\n&gt;&gt;&gt; what_is_it(recorder)\n'recorder'\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522414873065541632",
            "tweet_type": "Others",
            "created_at": "2022-05-06T03:16:06.000Z"
        },
        {
            "id": 2765,
            "username": "raymondh",
            "tweet_id": "1522414874495754240",
            "tweet_text": "# Training set\n# Width of instruments at various heights\nguitar = [3, 2, 2, 2, 8, 10, 9, 10, 12, 14, 4, 2]\nrecorder = [0, 0, 0, 1, 0.80, .75, 0.70, 1, 0, 0, 0, 0]\n\n# Hand-built perceptron\nmodel = [10, 10, 10, 5, 8, -1, -1, -1, 1, 10, 10, 10]\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522414873065541632",
            "tweet_type": "Others",
            "created_at": "2022-05-06T03:16:05.000Z"
        },
        {
            "id": 2766,
            "username": "raymondh",
            "tweet_id": "1522414873065541632",
            "tweet_text": "Highlight of my day: My 10 year old son asked, \"What is AI?\" and \"How do machines learn?\".\n\nSo, we built a 12 element perceptron and hand-trained it to distinguish a guitar from a recorder.\n\nThe model generalized that Ukuleles are like Guitars and Flutes are like Recorders.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522414873065541632",
            "tweet_type": "Others",
            "created_at": "2022-05-06T03:16:05.000Z"
        },
        {
            "id": 2767,
            "username": "raymondh",
            "tweet_id": "1522299643228573702",
            "tweet_text": "In the past 24 hours, I've gained a new appreciation for the median_grouped() function in the #Python statistics module.\n\nLast night, I greatly improved the docstring with a reasonable use case and explained why this can be better than the usual median(),\n\nhttps://t.co/IFrzMtwZ6J",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522299643228573702",
            "tweet_type": "Others",
            "created_at": "2022-05-05T19:38:12.000Z"
        },
        {
            "id": 2768,
            "username": "raymondh",
            "tweet_id": "1522025369003601920",
            "tweet_text": "When data in is binned, information is lost.\n\nIn particular, you lose the distribution of data within a bin.\n\nThe premise of median_grouped() is that some \"unbinning\" is possible if you assume the data was evenly distributed within the bin.\n\nOf course, you don't really know that.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521949684897660934",
            "tweet_type": "Others",
            "created_at": "2022-05-05T01:28:20.000Z"
        },
        {
            "id": 2769,
            "username": "raymondh",
            "tweet_id": "1522011224929718273",
            "tweet_text": "I get what is doing but think the underlying premise is dubious.\n\nYou know there are 1,251 people in the 30-39 year old age group.\n\nNow, estimate the median of the *entire* population using the additional information of:\n\n* 497 people under 30\n* 953 people over 30\n\nAnswer: 36.82",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521949684897660934",
            "tweet_type": "Others",
            "created_at": "2022-05-05T00:32:08.000Z"
        },
        {
            "id": 2770,
            "username": "raymondh",
            "tweet_id": "1521949684897660934",
            "tweet_text": "#Python statistics people, do you ever use median_grouped()?\n\nDoes it even make sense?\n\nMy mind rebels at the concept.\n\n&gt;&gt;&gt; median_grouped([1, 2, 2, 3, 4, 4, 4, 4, 4, 5])\n3.7\n&gt;&gt;&gt; median_grouped([1, 3, 3, 5, 7], interval=1)\n3.25\n&gt;&gt;&gt; median_grouped([1, 3, 3, 5, 7], interval=2)\n3.5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521949684897660934",
            "tweet_type": "Others",
            "created_at": "2022-05-04T20:27:35.000Z"
        },
        {
            "id": 2771,
            "username": "raymondh",
            "tweet_id": "1521705875999707137",
            "tweet_text": "#Python tip: bisect left and right work nicely together to locate the span of successive equal values.\n\n&gt;&gt;&gt; data = [20, 25, 30, 30, 30, 30, 40, 50]\n&gt;&gt;&gt; # Find all the 30's\n&gt;&gt;&gt; i = bisect_left(data, 30)\n&gt;&gt;&gt; j = bisect_right(data, 30)\n&gt;&gt;&gt; data[i : j]\n[30, 30, 30, 30]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521705875999707137",
            "tweet_type": "Python tips",
            "created_at": "2022-05-04T04:18:47.000Z"
        },
        {
            "id": 2772,
            "username": "raymondh",
            "tweet_id": "1521362149154738176",
            "tweet_text": "Roughly I'm looking for a definition a bit like this:\n\nA set of functions S is called _______ iff the domain and codomain are the same and \u2200f\u2208S, \u2200g\u2208S that f \u2218 g is well-defined.\n\nMaybe there is a category theory term for this (all arrows loop back or some such)?\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521362146738778113",
            "tweet_type": "Others",
            "created_at": "2022-05-03T05:32:56.000Z"
        },
        {
            "id": 2773,
            "username": "raymondh",
            "tweet_id": "1521362148131319808",
            "tweet_text": "Think square matrices, decorators, int-to-int functions, complex-to-complex etc:\n\nGiven these:\n\ndouble(x: int) -&gt; int\nsquare(x: int) -&gt; int\ndecrement(x: int) -&gt; int\n\nI could make these calls:\n\ndouble(square(decrement(double(x)))\nsquare(square(decrement(x)))\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521362146738778113",
            "tweet_type": "Others",
            "created_at": "2022-05-03T05:32:56.000Z"
        },
        {
            "id": 2774,
            "username": "raymondh",
            "tweet_id": "1521362146738778113",
            "tweet_text": "Okay math people or #Python people what is the technical term for a function or set of functions where the input and output signatures match so that they can be nested, chained, or composed arbitrarily?\n\nI've been using the term \"operator\" but that isn't quite right.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521362146738778113",
            "tweet_type": "Others",
            "created_at": "2022-05-03T05:32:55.000Z"
        },
        {
            "id": 2775,
            "username": "raymondh",
            "tweet_id": "1517556935666589698",
            "tweet_text": "#Python typing gurus:  Is there a reason that Literal couldn't have used the curly brace set notation?\n\ndef open(filename: str, mode: {'r', 'w'}):\n    ...\n\nI like that better than:\n\ndef open(filename: str, mode: Literal['r', 'w']):\n    ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517556935666589698",
            "tweet_type": "Others",
            "created_at": "2022-04-22T17:32:22.000Z"
        },
        {
            "id": 2776,
            "username": "raymondh",
            "tweet_id": "1517355808136351744",
            "tweet_text": "% python3.10 -m timeit 'x=2.5' 'x * x'\n20000000 loops, best of 5: 15.5 nsec per loop\n\n% python3.10 -m timeit 'x=2.5' 'x ** 2.0'\n10000000 loops, best of 5: 26.9 nsec per loop\n\n% python3.10 -m timeit 'x=2.5' 'x ** 2'\n10000000 loops, best of 5: 29.4 nsec per loop",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517355807117127681",
            "tweet_type": "Others",
            "created_at": "2022-04-22T04:13:10.000Z"
        },
        {
            "id": 2777,
            "username": "raymondh",
            "tweet_id": "1517355807117127681",
            "tweet_text": "#Python factlet:  For floats, x*x is faster and more accurate than x**2.\n\n# Expect around 130 mismatches\nfor i in range(100_000):\n    x = expovariate(2**12) + expovariate(2**-12)\n    if x**2 != x*x:\n        print(x)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517355807117127681",
            "tweet_type": "Others",
            "created_at": "2022-04-22T04:13:10.000Z"
        },
        {
            "id": 2778,
            "username": "raymondh",
            "tweet_id": "1515792273518247938",
            "tweet_text": "Whoa! \u201cTransforming Code into Beautiful, Idiomatic #Python\u201d is coming up on one million views.\n\nhttps://t.co/bMiN4PkqOW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1515792273518247938",
            "tweet_type": "Others",
            "created_at": "2022-04-17T20:40:14.000Z"
        },
        {
            "id": 2779,
            "username": "raymondh",
            "tweet_id": "1514290247705759745",
            "tweet_text": "#Python student question: How can you replace literals with variables (not constants) in structural pattern matching?\n\nHere's one way:\n\nns = SimpleNamespace(limit=10)\n...\nns.limit += 1        # Update limit variable\n\nmatch value:\n    case ns.limit: ...   # Match current limit",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514290247705759745",
            "tweet_type": "Others",
            "created_at": "2022-04-13T17:11:43.000Z"
        },
        {
            "id": 2780,
            "username": "raymondh",
            "tweet_id": "1513965648468185097",
            "tweet_text": "Today's student question:  Why doesn't #python have constants?\n\nAs in:\n\nconst pi = 3.1415926535\n\nWhat's your answer?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513965648468185097",
            "tweet_type": "Others",
            "created_at": "2022-04-12T19:41:53.000Z"
        },
        {
            "id": 2781,
            "username": "raymondh",
            "tweet_id": "1513528029712105476",
            "tweet_text": "So what do *you* say in your mind (or to another dev) when reading an expression containing the walrus operator (a.k.a. an assignment expression)?\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513528027392655360",
            "tweet_type": "Others",
            "created_at": "2022-04-11T14:42:56.000Z"
        },
        {
            "id": 2782,
            "username": "raymondh",
            "tweet_id": "1513528028562923525",
            "tweet_text": "The non-walrus code was wordier but had an obvious pronunciation:\n\nwhile True:\n    block = https://t.co/6b7mYPkERH(15)\n    if block == '':\n        break\n    blocks.append(block)\n\nRead as:  \"While True.  Block equals eff read fifteen. If block equals an empty string, break...\"\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513528027392655360",
            "tweet_type": "Others",
            "created_at": "2022-04-11T14:42:56.000Z"
        },
        {
            "id": 2783,
            "username": "raymondh",
            "tweet_id": "1513528027392655360",
            "tweet_text": "Today, a learner asked an excellent #Python question, \"how do you mentally pronounce the following code?\"\n\nwhile (block := https://t.co/6b7mYPkERH(15)) != '':\n    blocks.append(block)\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513528027392655360",
            "tweet_type": "Others",
            "created_at": "2022-04-11T14:42:56.000Z"
        },
        {
            "id": 2784,
            "username": "raymondh",
            "tweet_id": "1512287660626391045",
            "tweet_text": "\"Identical underlying dict\" was plausible and recently proposed as possible new semantics for dict.values().\n\nThis was a weak proposal, but it did fix the shocking lack of reflexivity in the current implementation:\n\n&gt;&gt;&gt; d = {}\n&gt;&gt;&gt; d.values() == d.values()\nFalse\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512287657157607428",
            "tweet_type": "Others",
            "created_at": "2022-04-08T04:34:09.000Z"
        },
        {
            "id": 2785,
            "username": "raymondh",
            "tweet_id": "1512287659628154882",
            "tweet_text": "\"Unordered counts agree\" was plausible because keys() and items() are set like and because values don't have to be unique.\n\nd1 = dict(chris='eng', pat='sales', mark='eng')\nd2 = dict(mary='sales', sue='eng', dave='eng')\n\nBoth teams have two engineers and one sales rep.\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512287657157607428",
            "tweet_type": "Others",
            "created_at": "2022-04-08T04:34:09.000Z"
        },
        {
            "id": 2786,
            "username": "raymondh",
            "tweet_id": "1512287658516570112",
            "tweet_text": "\"Same order &amp; same counts\" was plausible because values() in Python 2 returned lists.\n\n# Python 2.7\n&gt;&gt;&gt; d1 = {1: 'x', 2: 'y', 3: 'y'}\n&gt;&gt;&gt; d2 = {4: 'x', 5: 'y', 6: 'y'}\n&gt;&gt;&gt; d1.values()\n['x', 'y', 'y']\n&gt;&gt;&gt; d2.values()\n['x', 'y', 'y']\n&gt;&gt;&gt; d1.values() == d2.values()\nTrue\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512287657157607428",
            "tweet_type": "Others",
            "created_at": "2022-04-08T04:34:09.000Z"
        },
        {
            "id": 2787,
            "username": "raymondh",
            "tweet_id": "1512287657157607428",
            "tweet_text": "Answer to the #Python quiz twitter poll: In Python 3, the expression d1.values() == d2.values() is never true.\n\nEach dict.values() method call returns a new ValuesView.\n\nThe inherited equality test only looks at object identity.\n\nHence: never equal\n\nhttps://t.co/jfn0I49DCT\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1512287657157607428",
            "tweet_type": "Others",
            "created_at": "2022-04-08T04:34:09.000Z"
        },
        {
            "id": 2788,
            "username": "raymondh",
            "tweet_id": "1511548621216358408",
            "tweet_text": "#Python quiz: Given dicts d1 and d2, when does d1.values() == d2.values() return True?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511548621216358408",
            "tweet_type": "Others",
            "created_at": "2022-04-06T03:37:29.000Z"
        },
        {
            "id": 2789,
            "username": "raymondh",
            "tweet_id": "1511151184098254852",
            "tweet_text": "#Python development survey.  Do any of you have a use case for the one argument form of super() that returns an unbound super object?\n\nWould you miss it?  Would removing it break any of your code?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511151184098254852",
            "tweet_type": "Others",
            "created_at": "2022-04-05T01:18:12.000Z"
        },
        {
            "id": 2790,
            "username": "raymondh",
            "tweet_id": "1510675860562583564",
            "tweet_text": "#Python tip:  It is sometimes handy to define:\n\n    U = frozenset().union\n\nso that you can write:\n\n    combined = U(*sets)\n\nand have it handle the edge case where the input iterable is empty.\n\nThe variable name was chosen to match the \\bigcup notation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1510675860562583564",
            "tweet_type": "Python tips",
            "created_at": "2022-04-03T17:49:26.000Z"
        },
        {
            "id": 2791,
            "username": "raymondh",
            "tweet_id": "1508451119634255883",
            "tweet_text": "Today's lesson in tech ethics:  Don't be the one who designs the Death Star for the Emperor Palpatine.\n\nhttps://t.co/nKvBaw5VdL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1508451119634255883",
            "tweet_type": "Others",
            "created_at": "2022-03-28T14:29:07.000Z"
        },
        {
            "id": 2792,
            "username": "raymondh",
            "tweet_id": "1508138571189960712",
            "tweet_text": "#Python programmers: We have a monopoly on bad variable names.\n\n@TxDOT: Hold my beer.\n\nLoop = TypeVar('Loop', bound=StraightLineConnector)\n\nhttps://t.co/s6uV5aNCFa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1508138571189960712",
            "tweet_type": "Others",
            "created_at": "2022-03-27T17:47:09.000Z"
        },
        {
            "id": 2793,
            "username": "raymondh",
            "tweet_id": "1507221523853152257",
            "tweet_text": "#Python itertools pop quiz:  Why is chain.from_iterable(source) preferable to chain(*source)?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1507221523853152257",
            "tweet_type": "Others",
            "created_at": "2022-03-25T05:03:08.000Z"
        },
        {
            "id": 2794,
            "username": "raymondh",
            "tweet_id": "1504266219402280965",
            "tweet_text": "Groups can also be given names:\n\n&gt;&gt;&gt; script = 'There are 4 lights!'\n&gt;&gt;&gt; mo =https://t.co/wyz8pxPXIU(r'[Tt]here are (?P&lt;count&gt;\\d+) lights', script)\n&gt;&gt;&gt; mo[1] == https://t.co/mviw1UXbwm(1) == mo['count'] == https://t.co/mviw1UXbwm('count')\nTrue\n&gt;&gt;&gt; mo.groupdict()\n{'count': '4'}\n\n/2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1504266218315919361",
            "tweet_type": "Others",
            "created_at": "2022-03-17T01:19:49.000Z"
        },
        {
            "id": 2795,
            "username": "raymondh",
            "tweet_id": "1504266218315919361",
            "tweet_text": "#Python tip:  In regexes, captured subgroups are numbered starting from one.  Group zero is reserved for the entire match.  Groups can be accessed in two equivalent ways:\n\n    https://t.co/mviw1UXbwm(1) == mo[1]\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1504266218315919361",
            "tweet_type": "Python tips",
            "created_at": "2022-03-17T01:19:49.000Z"
        },
        {
            "id": 2796,
            "username": "raymondh",
            "tweet_id": "1503552615468122112",
            "tweet_text": "Typo!  That should be:\n\n    z = z ** 2 + c\n\nor \n\n   z = z * z + c",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503500740752465930",
            "tweet_type": "Others",
            "created_at": "2022-03-15T02:04:12.000Z"
        },
        {
            "id": 2797,
            "username": "raymondh",
            "tweet_id": "1503500742824497152",
            "tweet_text": "Here is how it works:\n\nhttps://t.co/RKwpPNyCGo\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503500740752465930",
            "tweet_type": "Others",
            "created_at": "2022-03-14T22:38:05.000Z"
        },
        {
            "id": 2798,
            "username": "raymondh",
            "tweet_id": "1503500741687848965",
            "tweet_text": "Here's the full recipe from a decade ago.\n\nhttps://t.co/WszZmyVg3O\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503500740752465930",
            "tweet_type": "Others",
            "created_at": "2022-03-14T22:38:05.000Z"
        },
        {
            "id": 2799,
            "username": "raymondh",
            "tweet_id": "1503500740752465930",
            "tweet_text": "#Python Pi Day celebration:\n\n&gt;&gt;&gt; n = 0\n&gt;&gt;&gt; z = c = -0.75 + 1e-7j\n&gt;&gt;&gt;while abs(z) &lt; 2:\n...    n += 1\n...    z = z ** z + c\n...\n&gt;&gt;&gt; n\n31415926\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503500740752465930",
            "tweet_type": "Others",
            "created_at": "2022-03-14T22:38:04.000Z"
        },
        {
            "id": 2800,
            "username": "raymondh",
            "tweet_id": "1503453493109080065",
            "tweet_text": "Happy Pi day.\n\n&gt;&gt;&gt; 4 * sum((-1.0)**n / (2.0*n + 1.0) for n in reversed(range(100_000)))\n3.1415826535897935",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503453493109080065",
            "tweet_type": "Others",
            "created_at": "2022-03-14T19:30:20.000Z"
        },
        {
            "id": 2801,
            "username": "raymondh",
            "tweet_id": "1503407161011023878",
            "tweet_text": "IRS payment tip:  The IRS cannot accept individual checks (even cashier's checks) for more than $100,000,000.\n\nFor amounts larger than this, be sure to send multiple checks.\n\nHope this tip reaches you in time. This is a common mistake ;-)\n\nFor details, see Form 7004 instructions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503407161011023878",
            "tweet_type": "Others",
            "created_at": "2022-03-14T16:26:13.000Z"
        },
        {
            "id": 2802,
            "username": "raymondh",
            "tweet_id": "1503378976559054850",
            "tweet_text": "Also, for arcane reasons, lookups in dicts() are a little faster than for defaultdicts.\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502332146446479364",
            "tweet_type": "Others",
            "created_at": "2022-03-14T14:34:14.000Z"
        },
        {
            "id": 2803,
            "username": "raymondh",
            "tweet_id": "1502332149982187526",
            "tweet_text": "As an added bonus, the __str__, __repr__ and pprint outputs look much nicer with a regular dict.\n\nNice looking:\n\n    {'a': 0,\n     'b': 1,\n     'c': 2}\n\nIcky looking:\n\n    defaultdict(&lt;class 'int'&gt;,\n                {'a': 0,\n                 'b': 1,\n                 'c': 2})\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502332146446479364",
            "tweet_type": "Others",
            "created_at": "2022-03-11T17:14:31.000Z"
        },
        {
            "id": 2804,
            "username": "raymondh",
            "tweet_id": "1502332148757536771",
            "tweet_text": "Converting back to a regular dictionary is cheap.\n\nThe hash values are reused rather than recomputed. The new dict is presized in a single step.  The key and value pointers are copied rather than inserted. The only slow part is updating all the reference counts.\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502332146446479364",
            "tweet_type": "Others",
            "created_at": "2022-03-11T17:14:30.000Z"
        },
        {
            "id": 2805,
            "username": "raymondh",
            "tweet_id": "1502332147604017155",
            "tweet_text": "# During build-up, we want the factory magic.\nd = defaultdict(list)\nfor elem in data:\n    d[feature(elem)].append(elem)\n\n# Magic is no longer useful.\nd = dict(d)\n\n# Lookups are now safe.\nprint(d[some_feature])\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502332146446479364",
            "tweet_type": "Others",
            "created_at": "2022-03-11T17:14:30.000Z"
        },
        {
            "id": 2806,
            "username": "raymondh",
            "tweet_id": "1502332146446479364",
            "tweet_text": "#Python tip:  The default_factory feature of a defaultdict is only useful when building up a dictionary (automatically adding missing keys).\n\nHowever, that feature is a menace when doing lookups (risking accidental dict mutation).\n\nConsider converting back to a regular dict.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502332146446479364",
            "tweet_type": "Python tips",
            "created_at": "2022-03-11T17:14:30.000Z"
        },
        {
            "id": 2807,
            "username": "raymondh",
            "tweet_id": "1501700906424971267",
            "tweet_text": "Today, the red bar derailed an otherwise successful lesson about combinatorics:\n\nfrom math import factorial, comb, perm\n\nfrom itertools import product, combinations, permutations\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1501700903870468099",
            "tweet_type": "Others",
            "created_at": "2022-03-09T23:26:11.000Z"
        },
        {
            "id": 2808,
            "username": "raymondh",
            "tweet_id": "1501700905338818560",
            "tweet_text": "Reproducer:\n\n* In the shell, type \"from math\" and press return. That gets the red bar.\n\n* Then type a correct line \"from math import comb\".  The line will run but the bar remains.\n\n* Now type \"[]]\" and press return.  The old bar disappears and a new short one emerges.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1501700903870468099",
            "tweet_type": "Others",
            "created_at": "2022-03-09T23:26:10.000Z"
        },
        {
            "id": 2809,
            "username": "raymondh",
            "tweet_id": "1501700903870468099",
            "tweet_text": "OMG!  When teaching #Python to kids using IDLE, it's almost impossible to recapture their attention when a giant red bar splashes across the screen.\n\nEven when the SyntaxError is fixed on a subsequent line, the red bar remains until another SyntaxError occurs. \ud83d\ude2c\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1501700903870468099",
            "tweet_type": "Others",
            "created_at": "2022-03-09T23:26:10.000Z"
        },
        {
            "id": 2810,
            "username": "raymondh",
            "tweet_id": "1501584819112890368",
            "tweet_text": "In newer Pythons, adding defaults is much easier:\n\nAccount = namedtuple('Account', ['owner_name', 'acct_num', 'balance'], defaults=[0.0])",
            "tweet_media": "[]",
            "tweet_conversation_id": "953173419486359552",
            "tweet_type": "Others",
            "created_at": "2022-03-09T15:44:53.000Z"
        },
        {
            "id": 2811,
            "username": "raymondh",
            "tweet_id": "1500160801130389508",
            "tweet_text": "When updating an existing key in a #Python dict:\n* the old key is kept\n* the value is replaced\n* order doesn't change\n\n&gt;&gt;&gt; d = {1: 'a', 2: 'b'}\n&gt;&gt;&gt; d[1.0] = 'c'\n&gt;&gt;&gt; d\n{1: 'c', 2: 'b'}\n     ^-- new val\n ^------ old key\n\nThis is the way!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500160801130389508",
            "tweet_type": "Others",
            "created_at": "2022-03-05T17:26:21.000Z"
        },
        {
            "id": 2812,
            "username": "raymondh",
            "tweet_id": "1498505641685618694",
            "tweet_text": "While I'm on the subject of completely sensible yet completely opposite conventions:\n\nIn English, the knob labeled C has Cold water.\n\nIn Spanish, the knob labeled C has aqua Caliente (hot water).\n\nI'm wonder how often this has resulted in unexpected surprises.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1498505639651332101",
            "tweet_type": "Others",
            "created_at": "2022-03-01T03:49:20.000Z"
        },
        {
            "id": 2813,
            "username": "raymondh",
            "tweet_id": "1498505640649629697",
            "tweet_text": "I like the Jupyter convention a little better because A comes before B in the alphabet.\n\nHowever, grep significantly predates Jupyter.\n\nIt would have been nice if the conventions matched.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1498505639651332101",
            "tweet_type": "Others",
            "created_at": "2022-03-01T03:49:20.000Z"
        },
        {
            "id": 2814,
            "username": "raymondh",
            "tweet_id": "1498505639651332101",
            "tweet_text": "#Python dyslexia:\n\nIn Jupyter notebooks, \ud83c\udd30 stands for insert Above and \ud83c\udd31 for insert Below.\n\nWith grep, -A stands for After context and -B stands for Before content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1498505639651332101",
            "tweet_type": "Others",
            "created_at": "2022-03-01T03:49:20.000Z"
        },
        {
            "id": 2815,
            "username": "raymondh",
            "tweet_id": "1498135234277167109",
            "tweet_text": "\"Liskov violations\" are everywhere.\n\n* A Penguin is a Bird that swims but doesn't fly.\n* A Bat is a Mammal that flies.\n* A Dolphin is a Mammal that swims.\n* Flying fish swim and fly.\n* A Dict is an Object that isn't hashable.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1498135234277167109",
            "tweet_type": "Others",
            "created_at": "2022-02-28T03:17:28.000Z"
        },
        {
            "id": 2816,
            "username": "raymondh",
            "tweet_id": "1496385247084175361",
            "tweet_text": "The solution to the chicken and egg problem is that both type() and object() came into being at the same time, neither begat the other, yet they are both inextricably linked to one another in an infinite circular reference. \u262f\n\n&gt;&gt;&gt; object.__class__.__mro__[-1] is object\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1496385245859528704",
            "tweet_type": "Others",
            "created_at": "2022-02-23T07:23:39.000Z"
        },
        {
            "id": 2817,
            "username": "raymondh",
            "tweet_id": "1496385245859528704",
            "tweet_text": "#Python strange loop:  I like to think of classes as inheriting from object() and metaclasses as inheriting from type(). So it messes with my worldview to know that type inherits from object.\n\n&gt;&gt;&gt; object.__class__\n&lt;class 'type'&gt;\n&gt;&gt;&gt; type.__mro__\n(&lt;class 'type'&gt;, &lt;class 'object'&gt;)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1496385245859528704",
            "tweet_type": "Others",
            "created_at": "2022-02-23T07:23:38.000Z"
        },
        {
            "id": 2818,
            "username": "raymondh",
            "tweet_id": "1495840361066938378",
            "tweet_text": "Here's a fun talk about the basic dance moves with super():\n\nhttps://t.co/VHYV0wcI5r",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495840358869176322",
            "tweet_type": "Others",
            "created_at": "2022-02-21T19:18:28.000Z"
        },
        {
            "id": 2819,
            "username": "raymondh",
            "tweet_id": "1495840359880003593",
            "tweet_text": "Learning to use super() well is another story.\n\nhttps://t.co/vV0CaKvyX3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495840358869176322",
            "tweet_type": "Others",
            "created_at": "2022-02-21T19:18:27.000Z"
        },
        {
            "id": 2820,
            "username": "raymondh",
            "tweet_id": "1495840358869176322",
            "tweet_text": "Under the hood, #Python's super() is remarkably simple.\n\nhttps://t.co/7wvztwOfiy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495840358869176322",
            "tweet_type": "Others",
            "created_at": "2022-02-21T19:18:27.000Z"
        },
        {
            "id": 2821,
            "username": "raymondh",
            "tweet_id": "1495474663161532419",
            "tweet_text": "For len(d), I'm thinking that dict_length() needs to be moved from dict_as_mapping to dict_as_sequence..\n\nThe latter is given preference in PyObject_Size().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495444804959940616",
            "tweet_type": "Others",
            "created_at": "2022-02-20T19:05:18.000Z"
        },
        {
            "id": 2822,
            "username": "raymondh",
            "tweet_id": "1495448124860637185",
            "tweet_text": "Go figure.  I can beat an exact dict just by subclassing dict.\n\nSurreal!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495444804959940616",
            "tweet_type": "Others",
            "created_at": "2022-02-20T17:19:51.000Z"
        },
        {
            "id": 2823,
            "username": "raymondh",
            "tweet_id": "1495448123983990787",
            "tweet_text": "I like to test Python's speed-up by benchmarking the pure Python OrderedDict versus a regular dict in C.\n\nIteration is now only 3.3x slower. Lookups are only 1.5x slower. Store new/existing keys is 5.9/1.8 slower.\n\nBut somehow, len() and get() are faster!  How is this possible?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495444804959940616",
            "tweet_type": "Others",
            "created_at": "2022-02-20T17:19:51.000Z"
        },
        {
            "id": 2824,
            "username": "raymondh",
            "tweet_id": "1495444804959940616",
            "tweet_text": "Running #Python's timeit can cause you to question the nature your reality.\n\npython3.10 -m timeit -s 'd=dict()' 'len(d)'\n10000000 loops, best of 5: 21.4 nsec per loop\n\npython3.10 -m timeit -s 'class D(dict): pass' -s 'd=D()' 'len(d)'\n10000000 loops, best of 5: 20.1 nsec per loop",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495444804959940616",
            "tweet_type": "Others",
            "created_at": "2022-02-20T17:06:40.000Z"
        },
        {
            "id": 2825,
            "username": "raymondh",
            "tweet_id": "1495039262164668416",
            "tweet_text": "4/\n\nNotice that the mechanism is completely independent from __new__ or __init__.\n\nThe __match_args__ tuple isn't tied to the actual constructor signature.\n\nYou probably *should* make the two correspond, but it certainly isn't required.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494925658362986498",
            "tweet_type": "Others",
            "created_at": "2022-02-19T14:15:11.000Z"
        },
        {
            "id": 2826,
            "username": "raymondh",
            "tweet_id": "1495031796278386691",
            "tweet_text": "class G:\n    'Getattr version'\n    __match_args__ = ('a',)\n    def __getattr__(self, attr):\n        return 30 if attr == 'a' else 0\n\n&gt;&gt;&gt; match G():\n...     case G(30):\n...         print('hit')\n...\nhit",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494925658362986498",
            "tweet_type": "Others",
            "created_at": "2022-02-19T13:45:31.000Z"
        },
        {
            "id": 2827,
            "username": "raymondh",
            "tweet_id": "1495031347198500865",
            "tweet_text": "class D:\n    'Descriptor'\n    __match_args__ = ('a',)\n    \n@property\n\n    def a(self):\n        return 20\n\n&gt;&gt;&gt; match D():\n...     case D(20):\n...         print('hit')\n...\nhit\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494925658362986498",
            "tweet_type": "Others",
            "created_at": "2022-02-19T13:43:44.000Z"
        },
        {
            "id": 2828,
            "username": "raymondh",
            "tweet_id": "1494925659327680512",
            "tweet_text": "class V:\n    'Virtual attribute'\n    __match_args__ = ('a',)\n    def __getattribute__(self, attr):\n        return 10 if attr == 'a' else 0\n\n&gt;&gt;&gt; match V():\n...     case V(10):\n...         print('hit')\n...\nhit\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494925658362986498",
            "tweet_type": "Others",
            "created_at": "2022-02-19T06:43:46.000Z"
        },
        {
            "id": 2829,
            "username": "raymondh",
            "tweet_id": "1494925658362986498",
            "tweet_text": "#Python structural pattern matching factlet:\n\nClass patterns with positional arguments match by attribute lookup on the names in __match_args__.\n\nAccordingly, they match normal attributes, descriptors, and virtual attributes implemented with __getattribute__ or __getattr__.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494925658362986498",
            "tweet_type": "Others",
            "created_at": "2022-02-19T06:43:45.000Z"
        },
        {
            "id": 2830,
            "username": "raymondh",
            "tweet_id": "1492897893308669957",
            "tweet_text": "If you provide a custom __repr__, it flows through to str() and format().\n\nIf you provide a custom __str__, it flows only to format().\n\nIf you provide a custom __format__, it doesn't affect str() or repr().\n\nOtherwise, you get the default:\n'&lt;__main__.A object at 0x10a070ca0&gt;'\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1492897892121591818",
            "tweet_type": "Others",
            "created_at": "2022-02-13T16:26:09.000Z"
        },
        {
            "id": 2831,
            "username": "raymondh",
            "tweet_id": "1492897892121591818",
            "tweet_text": "#Python factlets:\n* f-strings call __format__ by default\n* object.__format__ delegates to object.__str__\n* object.__str__ delegates to object object.__repr__\n* object.__repr__ gives \"&lt;%s object at %p&gt;\" for the type name and object id.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1492897892121591818",
            "tweet_type": "Others",
            "created_at": "2022-02-13T16:26:08.000Z"
        },
        {
            "id": 2832,
            "username": "raymondh",
            "tweet_id": "1492274322899152897",
            "tweet_text": "The adjacent state heatmap color differences seem to spread across whole states, so this don't seem to just be an edge effect (mountains, rivers, etc), especially when a whole state like Tennessee is uniformly darker across all sides and the middle.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1492007450224046250",
            "tweet_type": "Others",
            "created_at": "2022-02-11T23:08:18.000Z"
        },
        {
            "id": 2833,
            "username": "raymondh",
            "tweet_id": "1492273671586598912",
            "tweet_text": "FWIW, the caption says, \"Average Daily Cases Per 100,000 People in the Last Week\".\n\nThat rules out daily collection fluctuations (i.e. not reporting on weekends) and population density variations (it is per 100,000 people).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1492007450224046250",
            "tweet_type": "Others",
            "created_at": "2022-02-11T23:05:43.000Z"
        },
        {
            "id": 2834,
            "username": "raymondh",
            "tweet_id": "1492007450224046250",
            "tweet_text": "Data science question:  Why are some states clearly outlined by the Covid heatmap?\n\nI'm not talking about the white outlines. The actual covid rates show state boundaries. I wouldn't have expected this.\n\nhttps://t.co/mB0b1ArOiX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1492007450224046250",
            "tweet_type": "Others",
            "created_at": "2022-02-11T05:27:50.000Z"
        },
        {
            "id": 2835,
            "username": "raymondh",
            "tweet_id": "1491189199252639746",
            "tweet_text": "References:\n\nhttps://t.co/DdGd2lJ8Oa\n\nhttps://t.co/pi4JlePk3E\n\n8/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:16:24.000Z"
        },
        {
            "id": 2836,
            "username": "raymondh",
            "tweet_id": "1491187813311987712",
            "tweet_text": "Here's what we're leaving behind:\n\nSelfType = TypeVar('SelfType', bound='P')\n\nclass P:\n    \n    @classmethod\n    def from_half(cls: Type[SelfType], x: int) -&gt; SelfType:\n        return cls(x * 2)\n\nGood riddance.\n\n7/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:10:54.000Z"
        },
        {
            "id": 2837,
            "username": "raymondh",
            "tweet_id": "1491187812112437248",
            "tweet_text": "It can also be nested in other types:\n\ndef returns_list(self) -&gt; list[Self]:\n    ...\n\n6/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:10:53.000Z"
        },
        {
            "id": 2838,
            "username": "raymondh",
            "tweet_id": "1491187810929635328",
            "tweet_text": "The __new__ method benefits as well:\n\ndef __new__(cls, value: int) -&gt; Self:\n    ...\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:10:53.000Z"
        },
        {
            "id": 2839,
            "username": "raymondh",
            "tweet_id": "1491187809658765313",
            "tweet_text": "Classmethods are dramatically easier to annotate:\n\n@classmethod\ndef from_config(cls, config: dict[str, float]) -&gt; Self:\n    return cls(config['scale'])\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:10:53.000Z"
        },
        {
            "id": 2840,
            "username": "raymondh",
            "tweet_id": "1491187808442421253",
            "tweet_text": "The __enter__ method for context managers is sometimes a beneficiary:\n\ndef __enter__(self) -&gt; Self:\n    return self\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:10:53.000Z"
        },
        {
            "id": 2841,
            "username": "raymondh",
            "tweet_id": "1491187807154761728",
            "tweet_text": "This works great for methods that return self.\n\ndef set_scale(self, scale: float) -&gt; Self:\n        self.scale = scale\n        return self\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:10:52.000Z"
        },
        {
            "id": 2842,
            "username": "raymondh",
            "tweet_id": "1491187805636407298",
            "tweet_text": "#Python news:  It was always awkward to write a type annotation for methods that returned self (an instance of the current class). As of yesterday, typing.Self was added to make this much easier and more readable.\n\nIt is a big win.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491187805636407298",
            "tweet_type": "Others",
            "created_at": "2022-02-08T23:10:52.000Z"
        },
        {
            "id": 2843,
            "username": "raymondh",
            "tweet_id": "1490929563509325824",
            "tweet_text": "One possibility is to have aliased it to \"until\".\n\nI'm looking for a word that communicates that the exception is expected and that it is how the loop ends.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490749277240537089",
            "tweet_type": "Others",
            "created_at": "2022-02-08T06:04:42.000Z"
        },
        {
            "id": 2844,
            "username": "raymondh",
            "tweet_id": "1490749279400570882",
            "tweet_text": "Aliasing \"suppress\" to \"catch\" reads nicely in this context (no pun intended), but it still falls short of being exactly the right word.\n\nWhat is \"le mot juste\"?\n\nWhat would you have called suppess() aka ignore() aka catch()?\n\n3/3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490749277240537089",
            "tweet_type": "Others",
            "created_at": "2022-02-07T18:08:19.000Z"
        },
        {
            "id": 2845,
            "username": "raymondh",
            "tweet_id": "1490749278352031744",
            "tweet_text": "Yesterday, I wrote this:\n\nfrom contextlib import suppress as catch\n\ndef runner(listen, respond):\n with catch(StopRunning):\n   while True:\n     task = listen()\n     result = task()\n     respond(result)\n\n2/3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490749277240537089",
            "tweet_type": "Others",
            "created_at": "2022-02-07T18:08:19.000Z"
        },
        {
            "id": 2846,
            "username": "raymondh",
            "tweet_id": "1490749277240537089",
            "tweet_text": "#Python 3.4 added the contextlib.suppress() as an elegant way to write the pattern:\n \n  try:\n      &lt;suite&gt;\n  except SomeException:\n      pass\n\nOriginally, I called it ignore() rather than suppress(),\nbut it is still not clear what the right name should have been.\n\n1/3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490749277240537089",
            "tweet_type": "Others",
            "created_at": "2022-02-07T18:08:19.000Z"
        },
        {
            "id": 2847,
            "username": "raymondh",
            "tweet_id": "1490377975749128198",
            "tweet_text": "In older movies, \"data\" is often used as an adjective to make something sound more technical.\n\nFrom Runaway (1984):\n- I was gonna be a data programmer.\n- I need data files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490377975749128198",
            "tweet_type": "Others",
            "created_at": "2022-02-06T17:32:53.000Z"
        },
        {
            "id": 2848,
            "username": "raymondh",
            "tweet_id": "1490017501652164608",
            "tweet_text": "10 ** 32 is a precomputed constant\n10 ** 33 is a runtime computation\n\n1e308 is an actual constant\n1e-308 is also an actual constant",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490011194228367364",
            "tweet_type": "Others",
            "created_at": "2022-02-05T17:40:30.000Z"
        },
        {
            "id": 2849,
            "username": "raymondh",
            "tweet_id": "1490011194228367364",
            "tweet_text": "#Python factlet:   10**6 is an int and 1E6 is a float.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490011194228367364",
            "tweet_type": "Others",
            "created_at": "2022-02-05T17:15:26.000Z"
        },
        {
            "id": 2850,
            "username": "raymondh",
            "tweet_id": "1489044757368250375",
            "tweet_text": "This isn't just a programming issue. It shows up in the real world.\n\nVice-president:  Give me a forecast every Monday morning.  (Assumes you can easily cut and paste into Excel)\n\nVice-president:  Hire McKinsey to do MBA work every week. (Significant difference in cost.)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489044756248334338",
            "tweet_type": "Others",
            "created_at": "2022-02-03T01:15:09.000Z"
        },
        {
            "id": 2851,
            "username": "raymondh",
            "tweet_id": "1489044756248334338",
            "tweet_text": "#Python tip:  Because properties look like attribute lookups, it is implied that they are cheap.  If that is not the case, use a regular method instead.\n\nCompare:\n\n    score = text.originality\n\nversus\n\n    score = text.count_related_articles()",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489044756248334338",
            "tweet_type": "Python tips",
            "created_at": "2022-02-03T01:15:09.000Z"
        },
        {
            "id": 2852,
            "username": "raymondh",
            "tweet_id": "1488189596357828611",
            "tweet_text": "Accordingly, the Counter docs don't feed you a rationalization.  They give reality:\n\nA Counter is a dict subclass where missing keys return zero.  It is unrestricted in what kind of values are stored.  It also offers methods supporting a variety of use cases.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:37:03.000Z"
        },
        {
            "id": 2853,
            "username": "raymondh",
            "tweet_id": "1488189595405766669",
            "tweet_text": "Getting back to Parnas and Clements though, it is clear that Counter's are rationalization challenged.\n\nWe can't just say, \"it is a multiset\" or \"it is a sparse array\".  Even the loose and ambiguous \"it is a counting dictionary\" misses the gestalt.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:37:03.000Z"
        },
        {
            "id": 2854,
            "username": "raymondh",
            "tweet_id": "1488189594491408390",
            "tweet_text": "Counter's are so flexible that there has been a need a draw a line and not have it grow methods supporting sparse array operations, histogram operations, or probability mass functions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:37:03.000Z"
        },
        {
            "id": 2855,
            "username": "raymondh",
            "tweet_id": "1488189593467904002",
            "tweet_text": "The hard requirement to be an unrestricted dict subclass pushed Counter is a different direction.\n\nMostly, it worked out well. Mostly, substitutable for dicts. Reasonably fast. Flexible enough to support a huge variety of use cases.\n\nThe main surprise is the lack of restrictions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:37:02.000Z"
        },
        {
            "id": 2856,
            "username": "raymondh",
            "tweet_id": "1488189592532619271",
            "tweet_text": "Here is what Counter originally aspired to be:\n\nhttps://t.co/nxLeygMigA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:37:02.000Z"
        },
        {
            "id": 2857,
            "username": "raymondh",
            "tweet_id": "1488189591509159950",
            "tweet_text": "However, a hard gatekeeper requirement was that Counter be a dict subclass, no more restrictive than a regular dict, but simplifying the common pattern:  d[x] = d.get(x, 0) + 1.\n\nGiven this seed, the rest is inevitable:\n\nclass Counter(dict):\n  def __missing__(self):\n    return 0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:37:02.000Z"
        },
        {
            "id": 2858,
            "username": "raymondh",
            "tweet_id": "1488189590561304576",
            "tweet_text": "Our minds are use case driven. Typically, we want to think of a Counter as a self contained multiset with only positive integer counts.\n\nInspired by success with Smalltalk's Bag class, that was my aspiration.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:37:02.000Z"
        },
        {
            "id": 2859,
            "username": "raymondh",
            "tweet_id": "1488181434833641472",
            "tweet_text": "For collections.Counter, the rationalization is tenuous and only barely holds together:\n\nA Counter is a dictionary that treats missing keys as defaulting to zero. It has extra methods to support use cases as bags, counters, or multisets.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T16:04:37.000Z"
        },
        {
            "id": 2860,
            "username": "raymondh",
            "tweet_id": "1488177949140570133",
            "tweet_text": "Continued:\n\nAnalogous reasoning applies to software. Those who read the software documentation want to understand the programs, not to relive their discovery. By presenting rationalized documentation, we provide what they need.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T15:50:46.000Z"
        },
        {
            "id": 2861,
            "username": "raymondh",
            "tweet_id": "1488177948070924295",
            "tweet_text": "Another gem:\n\nEven mathematics, the discipline that many of us regard as the most rational of all, follows this procedure. Mathematicians diligently polish their proofs, usually presenting a proof very different from the first one they discovered.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T15:50:46.000Z"
        },
        {
            "id": 2862,
            "username": "raymondh",
            "tweet_id": "1488173550154432514",
            "tweet_text": "Source:\n\nhttps://t.co/bFOjSZ5WNV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T15:33:17.000Z"
        },
        {
            "id": 2863,
            "username": "raymondh",
            "tweet_id": "1488173549269532673",
            "tweet_text": "This thought is equally interesting if you switch the judgment from \"burdened\" to \"empowered\".\n\nEither way, the core idea remains than programs have a human dimension that transcends requirements and \"rational design\".",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T15:33:17.000Z"
        },
        {
            "id": 2864,
            "username": "raymondh",
            "tweet_id": "1488173548418080770",
            "tweet_text": "We are often burdened by preconceived ideas, ideas that we invented, acquired on related projects, or heard about in class. Sometimes we undertake a project in order to try out a favorite idea. Such ideas may not be derived from our requirements by a rational process -\u2014  Parnas",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488173548418080770",
            "tweet_type": "Others",
            "created_at": "2022-01-31T15:33:17.000Z"
        },
        {
            "id": 2865,
            "username": "raymondh",
            "tweet_id": "1487878965775802369",
            "tweet_text": "https://t.co/sd8T6frysP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1487878096304943108",
            "tweet_type": "Others",
            "created_at": "2022-01-30T20:02:43.000Z"
        },
        {
            "id": 2866,
            "username": "raymondh",
            "tweet_id": "1487878096304943108",
            "tweet_text": "Sign of the times:  Today I was writing about multiset equality and inclusion operations.   Twice, it came out of my fingers as multiset equity and inclusion. \ud83e\udd14\n\n\u2200x \u2208 (M\u2081 \u222a M\u2082):  M\u2081[x] = M\u2082[x]    # Equality\n\u2200x \u2208 (M\u2081 \u222a M\u2082):  M\u2081[x] &lt;= M\u2082[x]   # Inclusion",
            "tweet_media": "[]",
            "tweet_conversation_id": "1487878096304943108",
            "tweet_type": "Others",
            "created_at": "2022-01-30T19:59:16.000Z"
        },
        {
            "id": 2867,
            "username": "raymondh",
            "tweet_id": "1486863239283494915",
            "tweet_text": "#Python functional programming tip:  Use islice() to skip past headers in data files.\n\n&gt;&gt;&gt; with open('austin_weather_2_2021.txt') as f:\n...     mean(map(int, islice(f, 3, None)))\n...\n38.107\n\nAustin, TX\nFeb 2021\n-----------\n41\n40\n45\n55\n44\n48\n40\n51\n46\n37\n31\n29\n26\n13\n 8\n 7\n24\n24\n \u2026",
            "tweet_media": "[]",
            "tweet_conversation_id": "1486863239283494915",
            "tweet_type": "Python tips",
            "created_at": "2022-01-28T00:46:35.000Z"
        },
        {
            "id": 2868,
            "username": "raymondh",
            "tweet_id": "1485763859680055297",
            "tweet_text": "#Python technique tip:\n\ndef next_power_of_two(n: int) -&gt; int:\n    ' Return 2\u2071 such than 2\u2071\u207b\u00b9 \u2264 n &lt; 2\u2071. '\n    return 1 &lt;&lt; n.bit_length()\n\n4 \u27f6 8\n5 \u27f6 8\n6 \u27f6 8\n7 \u27f6 8\n8 \u27f6 16\n9 \u27f6 16\n10 \u27f6 16\n11 \u27f6 16\n12 \u27f6 16\n13 \u27f6 16\n14 \u27f6 16\n15 \u27f6 16\n16 \u27f6 32",
            "tweet_media": "[]",
            "tweet_conversation_id": "1485763859680055297",
            "tweet_type": "Python tips",
            "created_at": "2022-01-24T23:58:02.000Z"
        },
        {
            "id": 2869,
            "username": "raymondh",
            "tweet_id": "1483948799974383630",
            "tweet_text": "There is also this bit flipping hack:\n\nnot (x - 1) &amp; x",
            "tweet_media": "[]",
            "tweet_conversation_id": "1483948152906522625",
            "tweet_type": "Others",
            "created_at": "2022-01-19T23:45:39.000Z"
        },
        {
            "id": 2870,
            "username": "raymondh",
            "tweet_id": "1483948152906522625",
            "tweet_text": "#Python technique tip:\n\ndef is_power_of_two(x: int) -&gt; bool:\n    return x &gt; 0 and x.bit_count() == 1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1483948152906522625",
            "tweet_type": "Python tips",
            "created_at": "2022-01-19T23:43:04.000Z"
        },
        {
            "id": 2871,
            "username": "raymondh",
            "tweet_id": "1482808340098990081",
            "tweet_text": "Dataclasses are in more hazy position.\n\nAdding a field will break any code using astuple(), but the structural pattern matching will still work as long (though field order still matters for positional matches).\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482808337808904198",
            "tweet_type": "Others",
            "created_at": "2022-01-16T20:13:52.000Z"
        },
        {
            "id": 2872,
            "username": "raymondh",
            "tweet_id": "1482808338987507714",
            "tweet_text": "A case like {'city': city, 'state': 'texas', size: size} can match a large dictionary.\n\nHowever, a case like (city, 'texas', size) can only match a three tuple.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482808337808904198",
            "tweet_type": "Others",
            "created_at": "2022-01-16T20:13:51.000Z"
        },
        {
            "id": 2873,
            "username": "raymondh",
            "tweet_id": "1482808337808904198",
            "tweet_text": "For me, #Python structural pattern matching clarified and codified an essential point about data structures.\n\nGenerally, you can add new fields to a dict without breaking consumer code.  But with tuples, changing the size breaks unpacking code.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482808337808904198",
            "tweet_type": "Others",
            "created_at": "2022-01-16T20:13:51.000Z"
        },
        {
            "id": 2874,
            "username": "raymondh",
            "tweet_id": "1482537473368637446",
            "tweet_text": "I'm not sure what to say to defuse this thread.\n\nBlack is good product. IPython is a good tool. The people involved are good developers.\n\nIdeally, let's focus on the problem rather the people. The main thread identifies five specific usability problems. That's what we care about.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-16T02:17:32.000Z"
        },
        {
            "id": 2875,
            "username": "raymondh",
            "tweet_id": "1482404874990104578",
            "tweet_text": "Note that #SymPy does the right thing here:\n\n&gt;&gt;&gt; from sympy import var\n&gt;&gt;&gt; var('x')\nx\n&gt;&gt;&gt; ((3*x + 5) * (2*x - 4)).expand()\n6*x**2 - 2*x - 20",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T17:30:38.000Z"
        },
        {
            "id": 2876,
            "username": "raymondh",
            "tweet_id": "1482227947843031043",
            "tweet_text": "It wasn't long ago that IDLE became unusable for teaching.  And now IPython decides to rewrite my inputs so that students never see what I actually typed.\n\nArgh!!!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:47:35.000Z"
        },
        {
            "id": 2877,
            "username": "raymondh",
            "tweet_id": "1482226991269089280",
            "tweet_text": "Even if you usually like how Black formats your scripts and modules, why would you ever do this line by line in a CLI?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:43:47.000Z"
        },
        {
            "id": 2878,
            "username": "raymondh",
            "tweet_id": "1482225226998063107",
            "tweet_text": "Yes, this can be turned off, but you have to get a whole classroom of mixed Windows, Mac, and Linux users to monkey through the steps to get back to a normal environment where you can see what you typed into the computer rather than what it wanted you to type.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:36:47.000Z"
        },
        {
            "id": 2879,
            "username": "raymondh",
            "tweet_id": "1482225225760661509",
            "tweet_text": "It's no longer possible to show students how to use the semicolon to separate statements:\n\n&gt;&gt;&gt; time.sleep(5); print(\"Done\")\n\nIn #IPython, this gets rewritten to:\n\nIn [15]: sleep(5)\n    ...: print(\"Done\")\nDone",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:36:46.000Z"
        },
        {
            "id": 2880,
            "username": "raymondh",
            "tweet_id": "1482225224607277060",
            "tweet_text": "For teaching purposes, it is especially annoying to have in-line comments smushed to two spaces after the code ends. And more so, when it splits your input lines.\n\nif n == 0: return 0   # 1st known case\nif n == 1: return 1     # 2nd known case\nreturn n * fact(n-1)   # Recurse",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:36:46.000Z"
        },
        {
            "id": 2881,
            "username": "raymondh",
            "tweet_id": "1482225223629950978",
            "tweet_text": "Black's quotation rewrites are especially distracting in a REPL where it clearly conflicts the language's internal preferences:\n\nIn [11]: {\"x\": 10}\nOut[11]: {'x': 10}",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:36:46.000Z"
        },
        {
            "id": 2882,
            "username": "raymondh",
            "tweet_id": "1482225222677848067",
            "tweet_text": "When doing math, you improve readability by grouping your terms as shown in PEP 8:\n\n3*x**2 - 5*x + 10\n\nHowever, the new #Ipython CLI immediately expands it to:\n\n3 * x ** 2 - 5 * x + 10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:36:46.000Z"
        },
        {
            "id": 2883,
            "username": "raymondh",
            "tweet_id": "1482225221432131585",
            "tweet_text": "In a #Python course, if you want to demonstrate that print('hello') and print(\"hello\") are the same, then too bad.  The CLI rewrites both to use double quotes and the students can't see what you were demonstrating.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:36:45.000Z"
        },
        {
            "id": 2884,
            "username": "raymondh",
            "tweet_id": "1482225220475883522",
            "tweet_text": "Argh!  Who thought Black should be automatically applied to lines in the IPython CLI?\n\nThe makes it less useful for education purposes, less useful for interactive math, and annoying when it rewrites your input across multiple lines.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1482225220475883522",
            "tweet_type": "Others",
            "created_at": "2022-01-15T05:36:45.000Z"
        },
        {
            "id": 2885,
            "username": "raymondh",
            "tweet_id": "1481723600797585409",
            "tweet_text": "The last version could be made purely functional and point free, but it is less readable and likely slower.\n\n&gt;&gt;&gt; from operator import itemgetter, sub\n&gt;&gt;&gt; swap = itemgetter(1, 0)\n&gt;&gt;&gt; list(starmap(sub, map(swap, pairwise(cumulative))))\n[11, 13, 15, 18, 9, 6, 30]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1481381046520360965",
            "tweet_type": "Others",
            "created_at": "2022-01-13T20:23:30.000Z"
        },
        {
            "id": 2886,
            "username": "raymondh",
            "tweet_id": "1481381046520360965",
            "tweet_text": "#Python tip:  The pairwise() itertool can undo an accumulation.\n\n&gt;&gt;&gt; daily = [11, 13, 15, 18, 9, 6, 30]\n\n&gt;&gt;&gt; (cumulative := list(accumulate(daily, initial=534)))\n[534, 545, 558, 573, 591, 600, 606, 636]\n\n&gt;&gt;&gt; [q - p for p, q in pairwise(cumulative)]\n[11, 13, 15, 18, 9, 6, 30]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1481381046520360965",
            "tweet_type": "Python tips",
            "created_at": "2022-01-12T21:42:18.000Z"
        },
        {
            "id": 2887,
            "username": "raymondh",
            "tweet_id": "1480630939290066946",
            "tweet_text": "Human beings with time on their hands can be amazingly creative. https://t.co/SZK2mGu2dY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1480630939290066946",
            "tweet_type": "Others",
            "created_at": "2022-01-10T20:01:39.000Z"
        },
        {
            "id": 2888,
            "username": "raymondh",
            "tweet_id": "1480605073898041346",
            "tweet_text": "DeMorgan's laws generalize to cover multiple variables:\n\n    \u00ac(P \u2228 Q \u2228 R)  \u27fa  (\u00acP) \u2227 (\u00acQ) \u2227 (\u00acR)\n    \u00ac(P \u2227 Q \u2227 Q)  \u27fa  (\u00acP) \u2228 (\u00acQ) \u2228 (\u00acR)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1480578691386290176",
            "tweet_type": "Others",
            "created_at": "2022-01-10T18:18:52.000Z"
        },
        {
            "id": 2889,
            "username": "raymondh",
            "tweet_id": "1480578693470818304",
            "tweet_text": "No one doesn't do well with single negatives rather than double negatives. \ud83d\ude09\n\nLogically, it's either raining or it's not raining.  It's not not raining; therefore, it's raining.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1480578691386290176",
            "tweet_type": "Others",
            "created_at": "2022-01-10T16:34:03.000Z"
        },
        {
            "id": 2890,
            "username": "raymondh",
            "tweet_id": "1480578692506173450",
            "tweet_text": "Also consider inverting conditionals to eliminate a \"not\":\n\n- status = 'standby' if not test(x) else 'ready'\n+ status = 'ready' if test(x) else 'standby'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1480578691386290176",
            "tweet_type": "Others",
            "created_at": "2022-01-10T16:34:02.000Z"
        },
        {
            "id": 2891,
            "username": "raymondh",
            "tweet_id": "1480578691386290176",
            "tweet_text": "De Morgan's laws can be a #Python programmer's best friend.\n\n    \u00ac(P \u2228 Q)  \u27fa  (\u00acP) \u2227 (\u00acQ)\n    \u00ac(P \u2227 Q)  \u27fa  (\u00acP) \u2228 (\u00acQ)\n\n- if not((word in blocked) or (word not in encougaged)):\n+ if (word not in blocked) and (word in encougaged)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1480578691386290176",
            "tweet_type": "Others",
            "created_at": "2022-01-10T16:34:02.000Z"
        },
        {
            "id": 2892,
            "username": "raymondh",
            "tweet_id": "1479506242817175553",
            "tweet_text": "#Python code review pop quiz:  What does this code do?\n\nassert(0 &lt;= i &lt; len(s), 'index out of bounds')",
            "tweet_media": "[]",
            "tweet_conversation_id": "1479506242817175553",
            "tweet_type": "Others",
            "created_at": "2022-01-07T17:32:30.000Z"
        },
        {
            "id": 2893,
            "username": "raymondh",
            "tweet_id": "1478139467651244036",
            "tweet_text": "Regular dicts already have d.popitem() which does the same as od.popitem(True) for OrderedDicts.\n\nOrdered dicts have an od.move_to_end(key, 0) that moves entries to the beginning.  There is no fast, clean equivalent for regular dicts.\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1478139464350412802",
            "tweet_type": "Others",
            "created_at": "2022-01-03T23:01:26.000Z"
        },
        {
            "id": 2894,
            "username": "raymondh",
            "tweet_id": "1478139465851973637",
            "tweet_text": "These two methods are all you need to efficiently implement your own LRU cache variants:\n\n# Cache miss:  Store new entry and remove oldest\nd[args] = func(*args)\nif len(d) &gt; maxsize:\n    d.popitem(0)\n\n# Cache hit:  Refresh position \nd.move_to_end(args)\n\nhttps://t.co/ptZfq1ZOO7\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1478139464350412802",
            "tweet_type": "Others",
            "created_at": "2022-01-03T23:01:25.000Z"
        },
        {
            "id": 2895,
            "username": "raymondh",
            "tweet_id": "1478139464350412802",
            "tweet_text": "Regular #python dicts can efficiently emulate methods exclusive to OrderedDict:\n\n# Remove oldest\n# od.popitem(0)\n&gt;&gt;&gt; d = dict(a=1, b=2, c=3)\n&gt;&gt;&gt; del d[next(iter(d))]\n&gt;&gt;&gt; d\n{'b': 2, 'c': 3}\n\n# Refresh position\n# od.move_to_end('b')\n&gt;&gt;&gt; d['b'] = d.pop('b')\n&gt;&gt;&gt; d\n{'c':3, 'b': 2}\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1478139464350412802",
            "tweet_type": "Others",
            "created_at": "2022-01-03T23:01:25.000Z"
        },
        {
            "id": 2896,
            "username": "raymondh",
            "tweet_id": "1477343405801832449",
            "tweet_text": "Relatively unknown #Python function that everyone needs sooner or later:  textwrap.dedent().\n\nThis gem removes the common leading whitespace from indented multiline strings.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1477343405801832449",
            "tweet_type": "Others",
            "created_at": "2022-01-01T18:18:10.000Z"
        },
        {
            "id": 2897,
            "username": "raymondh",
            "tweet_id": "1474222559872765958",
            "tweet_text": "It's not just individuals who succumb to self serving equivocations and prevarications.\n\nToday, the #CDC shortened the #Covid isolation period for health workers.\n\nIs this new science that only applies to them or do they just need these folks back at work?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474180653801377794",
            "tweet_type": "Others",
            "created_at": "2021-12-24T03:37:02.000Z"
        },
        {
            "id": 2898,
            "username": "raymondh",
            "tweet_id": "1474206006942920705",
            "tweet_text": "Of the tens of thousands who die from Covid over the next few months, I wonder how many of them will have been refused early and effective treatment because their BMI wasn't quite big enough.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474200986851835906",
            "tweet_type": "Others",
            "created_at": "2021-12-24T02:31:16.000Z"
        },
        {
            "id": 2899,
            "username": "raymondh",
            "tweet_id": "1474204552505147394",
            "tweet_text": "In a case near and dear to me, the doctor was ready to give a therapy but couldn't find a matching checkbox.\n\nShe said, your BMI is 22 but the cutoff is 25.\n\nSo if you overeat during the holidays, it will help your case. Thanks for nothing @US_FDA.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474200986851835906",
            "tweet_type": "Others",
            "created_at": "2021-12-24T02:25:29.000Z"
        },
        {
            "id": 2900,
            "username": "raymondh",
            "tweet_id": "1474200989775192064",
            "tweet_text": "We're two years into the pandemic.  Science has given us great tools.  But all you get is a recommendation to stay hydrated.  No proven therapies for you!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474200986851835906",
            "tweet_type": "Others",
            "created_at": "2021-12-24T02:11:19.000Z"
        },
        {
            "id": 2901,
            "username": "raymondh",
            "tweet_id": "1474200988718272513",
            "tweet_text": "So, if you test positive, the doctor will pretty much tell you, \"stay home, isolate, and call us back if you're pulse-ox drops to 92\".\n\nThen, they will tell you, \"Hmm, you would have been so much better off if we had treated you early.  Sorry.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474200986851835906",
            "tweet_type": "Others",
            "created_at": "2021-12-24T02:11:19.000Z"
        },
        {
            "id": 2902,
            "username": "raymondh",
            "tweet_id": "1474200987812335621",
            "tweet_text": "BTW, this might make sense if it were a rationing policy (allocating resources where there are the most effective), but that's not the story.\n\nEven if the supply were plentiful, the FDA approvals are only for those at high risk.\n\nWe have treatments but won't give them to you.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474200986851835906",
            "tweet_type": "Others",
            "created_at": "2021-12-24T02:11:19.000Z"
        },
        {
            "id": 2903,
            "username": "raymondh",
            "tweet_id": "1474200986851835906",
            "tweet_text": "#Covid catch-22:   Antivirals and monoclonal antibodies work best if given early, but the-powers-that-be won't give them to you unless you're in a high risk group.\n\nSo, if you're medium-risk, the only way to demonstrate you need the treatment is to wait until it's too late.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474200986851835906",
            "tweet_type": "Others",
            "created_at": "2021-12-24T02:11:19.000Z"
        },
        {
            "id": 2904,
            "username": "raymondh",
            "tweet_id": "1474194403145125894",
            "tweet_text": "Especially if their symptoms are/were mild, it will be easy to talk themselves into boarding an aircraft.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474180653801377794",
            "tweet_type": "Others",
            "created_at": "2021-12-24T01:45:09.000Z"
        },
        {
            "id": 2905,
            "username": "raymondh",
            "tweet_id": "1474193617312911364",
            "tweet_text": "It will be worse after the holidays.  People will have picked up an infection during their family gatherings but need to get home, back to school, and/or back to work.\n\nAlmost certainly, a huge number of people will misreport their infection status or number of days of isolation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474180653801377794",
            "tweet_type": "Others",
            "created_at": "2021-12-24T01:42:02.000Z"
        },
        {
            "id": 2906,
            "username": "raymondh",
            "tweet_id": "1474180653801377794",
            "tweet_text": "#Covid tip: Air travel is much less safe right now.\n\nHoliday travel commitments are compelling and humans have an unlimited ability to rationalize away their behaviors.\n\nAlso people mostly haven't recalibrated their risk assessments in the face of Omicron's high transmissibility.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474180653801377794",
            "tweet_type": "Others",
            "created_at": "2021-12-24T00:50:31.000Z"
        },
        {
            "id": 2907,
            "username": "raymondh",
            "tweet_id": "1474154401673539591",
            "tweet_text": "#Covid tip:  If you get a positive result with a rapid antigen kit, don't doubt the result.\n\nAny concerns you heard about reliability have to do with the sensitivity of the test.  This is different from specificity.\n\nIf you get two red lines, then covid proteins are present.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1474154401673539591",
            "tweet_type": "Others",
            "created_at": "2021-12-23T23:06:12.000Z"
        },
        {
            "id": 2908,
            "username": "raymondh",
            "tweet_id": "1472446813357719560",
            "tweet_text": "The juxtaposition of three Nones with different meanings feels a bit off.\n\n     def f(y: int | None = None) -&gt; None\n\n1st None if really a NoneType\n2nd None an instance of NoneType\n3rd None really means that no value at all is returned.\n\nx = f(7)  # This fails to typecheck",
            "tweet_media": "[]",
            "tweet_conversation_id": "1472426960349548549",
            "tweet_type": "Others",
            "created_at": "2021-12-19T06:00:51.000Z"
        },
        {
            "id": 2909,
            "username": "raymondh",
            "tweet_id": "1472431060512395264",
            "tweet_text": "Hmm, I didn't know you could do this in #Python:\n\n&gt;&gt;&gt; float(bytes([51, 46, 49, 52]))\n3.14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1472431060512395264",
            "tweet_type": "Others",
            "created_at": "2021-12-19T04:58:15.000Z"
        },
        {
            "id": 2910,
            "username": "raymondh",
            "tweet_id": "1472428419346481155",
            "tweet_text": "Typo:  The first assignment should be a colon.\n\ndef f(x: A | B, y: int | None = None) -&gt; dict[tuple[str, str]]: \n    ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1472426960349548549",
            "tweet_type": "Others",
            "created_at": "2021-12-19T04:47:46.000Z"
        },
        {
            "id": 2911,
            "username": "raymondh",
            "tweet_id": "1472426960349548549",
            "tweet_text": "A little birdie told me that #Python typing Optional and Union are going away.  It's all or-operators from here:\n\ndef f(x: A | B, y = int | None = None) -&gt; dict[tuple[str, str]]: ...\n\nI won't miss Union, but Optional was pleasantly readable.\n\nf(x: A | B, y: Optional[int] = None):",
            "tweet_media": "[]",
            "tweet_conversation_id": "1472426960349548549",
            "tweet_type": "Others",
            "created_at": "2021-12-19T04:41:58.000Z"
        },
        {
            "id": 2912,
            "username": "raymondh",
            "tweet_id": "1472331122797264897",
            "tweet_text": "#Python people, answer me this.  Is your metaclass appropriate or inappropriate?\n\nhttps://t.co/AdoLd8r3WP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1472331122797264897",
            "tweet_type": "Others",
            "created_at": "2021-12-18T22:21:08.000Z"
        },
        {
            "id": 2913,
            "username": "raymondh",
            "tweet_id": "1471943898452963329",
            "tweet_text": "I'm concerned about the Christmas holidays.   Omicron is so transmissible that it will infect entire families all at once.\n\nHopefully, the early reports of it being mild will turn out to be true.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1471943898452963329",
            "tweet_type": "Others",
            "created_at": "2021-12-17T20:42:27.000Z"
        },
        {
            "id": 2914,
            "username": "raymondh",
            "tweet_id": "1471713288153096193",
            "tweet_text": "QOTD: \"Breaking an addiction to false certainty is as hard as breaking any other addiction. But the first step is admitting you have a problem.\"\n\nhttps://t.co/YfpjMZvegQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1471713288153096193",
            "tweet_type": "Others",
            "created_at": "2021-12-17T05:26:05.000Z"
        },
        {
            "id": 2915,
            "username": "raymondh",
            "tweet_id": "1471293819702415368",
            "tweet_text": "It may just be old-timer's disease, but I think reason I find this unsettling is that what #Python does is diverging greatly from my mental model.\n\nI used to find the language to be more predictable and less willing to do the tricks used by C compilers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1471293377580838922",
            "tweet_type": "Others",
            "created_at": "2021-12-16T01:39:16.000Z"
        },
        {
            "id": 2916,
            "username": "raymondh",
            "tweet_id": "1471293380240224257",
            "tweet_text": "16 LOAD_CONST         0 (None)\n     18 RETURN_VALUE\n  &gt;&gt; 20 LOAD_CONST         0 (None)\n     22 RETURN_VALUE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1471293377580838922",
            "tweet_type": "Others",
            "created_at": "2021-12-16T01:37:31.000Z"
        },
        {
            "id": 2917,
            "username": "raymondh",
            "tweet_id": "1471293378956599296",
            "tweet_text": "&gt;&gt;&gt; dis(f)\n2     0 LOAD_FAST          0 (x)\n      2 POP_JUMP_IF_FALSE 10 (to 20)\n\n3 &gt;&gt;  4 LOAD_FAST          0 (x)\n      6 LOAD_CONST         1 (1)\n      8 INPLACE_SUBTRACT\n     10 STORE_FAST         0 (x)\n\n2    12 LOAD_FAST          0 (x)\n     14 POP_JUMP_IF_TRUE   2 (to 4)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1471293377580838922",
            "tweet_type": "Others",
            "created_at": "2021-12-16T01:37:31.000Z"
        },
        {
            "id": 2918,
            "username": "raymondh",
            "tweet_id": "1471293377580838922",
            "tweet_text": "#Python's word code generation has been changing quite a bit.  Perhaps it's for the good, but some parts are unsettling.\n\ndef f(x):\n    while x:\n        x -= 1\n\nThe test appears twice.\nThe lines numbers are no longer ascending.\nThere are two exits.\nSometimes NOPs appear.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1471293377580838922",
            "tweet_type": "Others",
            "created_at": "2021-12-16T01:37:31.000Z"
        },
        {
            "id": 2919,
            "username": "raymondh",
            "tweet_id": "1469705428674228224",
            "tweet_text": "As expected, the CPU is fast, the RAM is fast, the SSD is fast, the GPU supports multiple external monitors, and it is quiet.\n\nLikely, I over-provisioned with 64GB of RAM, but then who ever regrets having too much memory ;-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1469705426136616975",
            "tweet_type": "Others",
            "created_at": "2021-12-11T16:27:34.000Z"
        },
        {
            "id": 2920,
            "username": "raymondh",
            "tweet_id": "1469705427361447938",
            "tweet_text": "The finger print reader is a little large and that feels a little weird but maybe the smaller one on MacAir wasn't working well for some users.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1469705426136616975",
            "tweet_type": "Others",
            "created_at": "2021-12-11T16:27:34.000Z"
        },
        {
            "id": 2921,
            "username": "raymondh",
            "tweet_id": "1469705426136616975",
            "tweet_text": "I'm pretty happy with the new 16\" MacBook Pro M1 Max.\n\nSo far, the only thing I don't like is that side air vents are now large enough and sharp enough to be a little uncomfortable when carrying the laptop.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1469705426136616975",
            "tweet_type": "Others",
            "created_at": "2021-12-11T16:27:34.000Z"
        },
        {
            "id": 2922,
            "username": "raymondh",
            "tweet_id": "1468795729355456513",
            "tweet_text": "There are also issues that no one really thinks are important or valid but if the OP is insistent or persistent, no one wants to go out on a limb to close it.\n\nIn an era where one can be quickly savaged on the interwebs or by CoC complaints, ignoring an issue is the safe play.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T04:12:45.000Z"
        },
        {
            "id": 2923,
            "username": "raymondh",
            "tweet_id": "1468788647445078020",
            "tweet_text": "I would be surprised if any normal use case could fail.\n\nI would not be surprised if someone used a SAT solver to find an exotic combination of method overrides, callbacks, __del__ methods, and thread ordering that could make it segfault or drop entries.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:44:36.000Z"
        },
        {
            "id": 2924,
            "username": "raymondh",
            "tweet_id": "1468788646098649094",
            "tweet_text": "An example of the latter is the C code for the lru_cache(). \n\nIt is clearly, mostly correct, but it would be a somewhat difficult undertaking to prove it for all possible forms of callback reentrancy and thread orderings.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:44:36.000Z"
        },
        {
            "id": 2925,
            "username": "raymondh",
            "tweet_id": "1468788645100404736",
            "tweet_text": "Generally, the only important issues that sit for a long time is when there is agreement on a problem but no clear path to fixing it without breaking something else. \n\nAlso some problems are just hard (but we don't have many of those).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:44:36.000Z"
        },
        {
            "id": 2926,
            "username": "raymondh",
            "tweet_id": "1468788643947061250",
            "tweet_text": "Part of the reason, I think age is valid evidence of importance is the responsiveness I see on other issues.\n\nTypos, obvious errors, failure to support key use cases, code breakages and whatnot tend to get discussed and fixed rapidly.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:44:36.000Z"
        },
        {
            "id": 2927,
            "username": "raymondh",
            "tweet_id": "1468785240499961862",
            "tweet_text": "There are some old issues that are valid.  Perhaps they haven't had sufficient attention.  Perhaps, a reasonable solution hasn't been found.\n\nBut sometimes an old age issue means that the concerns were unfounded.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:31:04.000Z"
        },
        {
            "id": 2928,
            "username": "raymondh",
            "tweet_id": "1468785238855802882",
            "tweet_text": "The presence of the integer is likely a code smell, but it isn't clearly an error.\n\nGiven that the unused string variable \"x\" must be ignored, why is it important to type check all the inputs?\n\nI contend that a decade of inaction on the issue suggests it wasn't a real problem.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:31:04.000Z"
        },
        {
            "id": 2929,
            "username": "raymondh",
            "tweet_id": "1468783339230351360",
            "tweet_text": "Do we care about 10 being in the dict?\n\n&gt;&gt;&gt; d = {'answer': 'correct', 10: 'never used', 'x': 'unused'}\n\n&gt;&gt;&gt; \"You're %(answer)s\" % d\n\"You're correct\"\n\n&gt;&gt;&gt; \"You're {answer}\".format(**d)\n\"You're correct\"\n\n&gt;&gt;&gt; \"You're {answer}\".format_map(d)\n\"You're correct\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:23:31.000Z"
        },
        {
            "id": 2930,
            "username": "raymondh",
            "tweet_id": "1468783338244739073",
            "tweet_text": "For example, a person is worried that \"template.format(**d)\" and \"template % d\" don't raise an exception if the dict has some non-string keys.\n\nThese methods are 13 years old and 25 years old respectively.  If there were a real world problem, we would have known long ago.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:23:31.000Z"
        },
        {
            "id": 2931,
            "username": "raymondh",
            "tweet_id": "1468783337011564548",
            "tweet_text": "#Python core development thought for the day:  If a tracker issue has been open for a decade with little activity, it is evidence that the problem at hand isn't really important in practice.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468783337011564548",
            "tweet_type": "Others",
            "created_at": "2021-12-09T03:23:30.000Z"
        },
        {
            "id": 2932,
            "username": "raymondh",
            "tweet_id": "1468052783123292164",
            "tweet_text": "#Python quirk:  1 &lt;&lt; 65 constant folds but 2 ** 65 doesn't.\n\n&gt;&gt;&gt; dis(lambda: (1 &lt;&lt; 65, 2 ** 65))\n   0 LOAD_CONST        1 (36893488147419103232)\n   2 LOAD_CONST        2 (2)\n   4 LOAD_CONST        3 (65)\n   6 BINARY_POWER\n   8 BUILD_TUPLE       2\n  10 RETURN_VALUE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1468052783123292164",
            "tweet_type": "Others",
            "created_at": "2021-12-07T03:00:33.000Z"
        },
        {
            "id": 2933,
            "username": "raymondh",
            "tweet_id": "1467218332948615177",
            "tweet_text": "#Python tip:  y=heappushpop(h, x) is equivalent to but faster than heappush(h, x) followed by y=heappop(h).\n\nLikewise, y=heapreplace(h, x) is equivalent to but faster than y=heappop(h) followed by heappush(h, x).\n\nBoth keep the size unchanged and do fewer sifting operations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1467218332948615177",
            "tweet_type": "Python tips",
            "created_at": "2021-12-04T19:44:44.000Z"
        },
        {
            "id": 2934,
            "username": "raymondh",
            "tweet_id": "1466893123943079941",
            "tweet_text": "#Python typing question:  If an optional framework method call is guarded by hasattr(), can you use anything other than type:ignore on the actual call?\n\n        if hasattr(self, 'setup'):\n            self.setup()                # type: ignore",
            "tweet_media": "[]",
            "tweet_conversation_id": "1466893123943079941",
            "tweet_type": "Others",
            "created_at": "2021-12-03T22:12:28.000Z"
        },
        {
            "id": 2935,
            "username": "raymondh",
            "tweet_id": "1466841170022215680",
            "tweet_text": "For those wanting a bigger dataset, the Norway outbreak is informative:\n\nhttps://t.co/4vwKJ1Ps1F",
            "tweet_media": "[]",
            "tweet_conversation_id": "1466536919257518083",
            "tweet_type": "Others",
            "created_at": "2021-12-03T18:46:02.000Z"
        },
        {
            "id": 2936,
            "username": "raymondh",
            "tweet_id": "1466616803170263041",
            "tweet_text": "One more case just in:\n\nIn CA, (los angeles), traveled to South Africa, fully vaccinated, improving condition without treatment.\n\nhttps://t.co/f0mF48BN69",
            "tweet_media": "[]",
            "tweet_conversation_id": "1466536919257518083",
            "tweet_type": "Others",
            "created_at": "2021-12-03T03:54:28.000Z"
        },
        {
            "id": 2937,
            "username": "raymondh",
            "tweet_id": "1466582740577497089",
            "tweet_text": "More data:\n* In HI, mild to moderate case, no travel, previously infected\n* In NY, mild case, 67 y/o female, back from SA, at least one dose of vaccine\n* In NY, four other cases, 2 queens, 1 brooklyn, 1 nyc.  No info on severity, travel, or vaccination status.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1466536919257518083",
            "tweet_type": "Others",
            "created_at": "2021-12-03T01:39:07.000Z"
        },
        {
            "id": 2938,
            "username": "raymondh",
            "tweet_id": "1466539693340872715",
            "tweet_text": "This is a data science quiz.  Can you populate a beta distribution for the ability to overcome a vaccine or the probability of a mild case?\n\nDo the priors matter?  What percentage of international travelers are fully vaccinated. What percentage of people in CO are full vacc, etc?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1466536919257518083",
            "tweet_type": "Others",
            "created_at": "2021-12-02T22:48:04.000Z"
        },
        {
            "id": 2939,
            "username": "raymondh",
            "tweet_id": "1466536919257518083",
            "tweet_text": "Data science small sample pop quiz. What can you infer from the first three Omicron cases in the U.S.?\n\n* In CA, mild case, back South Africa, full vacc.\n* In CO, mild case, back from SA, full vacc.\n* In MN, mild case, back from NYC, vacc and booster.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1466536919257518083",
            "tweet_type": "Others",
            "created_at": "2021-12-02T22:37:03.000Z"
        },
        {
            "id": 2940,
            "username": "raymondh",
            "tweet_id": "1465890978007556100",
            "tweet_text": "class A:\n    @recursive_repr()\n    def __repr__(self):\n        return f'{self.__class__.__name__}({list(https://t.co/ncHwUzZ0LU)})'\n\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; https://t.co/RWeMrp5bKY = [10, 20, 30]\n&gt;&gt;&gt; https://t.co/RWeMrp5bKY.append(a)\n&gt;&gt;&gt; print(repr(a))\nA([10, 20, 30, ...])\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1465890976824766468",
            "tweet_type": "Others",
            "created_at": "2021-12-01T03:50:18.000Z"
        },
        {
            "id": 2941,
            "username": "raymondh",
            "tweet_id": "1465890976824766468",
            "tweet_text": "#Python tip:  The reprlib.recursive_repr() decorator prevents infinite recursion in containers that can potentially reference themselves.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1465890976824766468",
            "tweet_type": "Python tips",
            "created_at": "2021-12-01T03:50:18.000Z"
        },
        {
            "id": 2942,
            "username": "raymondh",
            "tweet_id": "1465050875546775555",
            "tweet_text": "The operator.countOf() function is very old and predates the lowercase and underscore naming convention.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1465050874200399875",
            "tweet_type": "Others",
            "created_at": "2021-11-28T20:12:02.000Z"
        },
        {
            "id": 2943,
            "username": "raymondh",
            "tweet_id": "1465050874200399875",
            "tweet_text": "#python factlet:  The operator module provides a countOf() function that works like the count() method for sequences but works on any iterable including generators:\n\n&gt;&gt;&gt; countOf('abracadabra', 'a')\n5\n\n&gt;&gt;&gt; countOf(map(attrgetter('age'), cohort), 30)\n9538",
            "tweet_media": "[]",
            "tweet_conversation_id": "1465050874200399875",
            "tweet_type": "Others",
            "created_at": "2021-11-28T20:12:02.000Z"
        },
        {
            "id": 2944,
            "username": "raymondh",
            "tweet_id": "1463651850780127235",
            "tweet_text": "Before moving to #Python we put this in an Excel spreadsheet.\n\nAdd commas and eliminating digits after the decimal point was easier than in Python. https://t.co/H7jtHYTE47",
            "tweet_media": "[\"https://pbs.twimg.com/media/FE_vTThXMAE3Z1-.png\"]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T23:32:49.000Z"
        },
        {
            "id": 2945,
            "username": "raymondh",
            "tweet_id": "1463596933407195140",
            "tweet_text": "I taught the algorithm but failed to mention that it is spelled \u201csquare root\u201d instead of \u201csquare route\u201d.\n\nThe box to the right means \u201cif it is too hard to compute the average in your head, write the sum of the guess and x in the third column.\u201d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:54:35.000Z"
        },
        {
            "id": 2946,
            "username": "raymondh",
            "tweet_id": "1463595946353344514",
            "tweet_text": "His line wrapping blew my mind.  Instead of 41,110.6, he wrote on two lines:\n\n4111\n  0.6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:50:40.000Z"
        },
        {
            "id": 2947,
            "username": "raymondh",
            "tweet_id": "1463595344609124353",
            "tweet_text": "each \u27f6 easy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:48:17.000Z"
        },
        {
            "id": 2948,
            "username": "raymondh",
            "tweet_id": "1463594887950094339",
            "tweet_text": "Successful run!\n\nEnter a square: 610,652,380,806.25\nEnter a guess:  800,000\nOur best guess is 781,657.738004\nOur best guess is 781,442.529634\nOur best guess is 781,442.500000\nOur best guess is 781,442.500000\n\n15/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:28.000Z"
        },
        {
            "id": 2949,
            "username": "raymondh",
            "tweet_id": "1463594886758809602",
            "tweet_text": "from math import isclose\n\nsquare = float(input('Enter a square: ').replace(',', ''))\nguess =float(input('Enter a guess:  ').replace(',', ''))\nwhile True:\n  x = square / guess\n  guess = (guess + x) / 2\n  print(f'Our best guess is {guess:,f}')\n  if isclose(guess, x):\n    break\n\n14/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:27.000Z"
        },
        {
            "id": 2950,
            "username": "raymondh",
            "tweet_id": "1463594885496385542",
            "tweet_text": "Difficulty:  Testing floats for equality is perilous.\n\nThe solution is to use math.isclose().  Interestingly, Matthew had enough experience with calculators being slightly off to understand why this was needed:\n\n    if isclose(guess, x):\n        break\n\n13/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:27.000Z"
        },
        {
            "id": 2951,
            "username": "raymondh",
            "tweet_id": "1463594884321976323",
            "tweet_text": "Difficulty:  mean() takes a single iterable input, so this doesn't work.\n\n    guess = average(guess, x)\n\nThe solution was to give-up on the standard library function:\n\n    guess = (guess + x) / 2\n\n12/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:27.000Z"
        },
        {
            "id": 2952,
            "username": "raymondh",
            "tweet_id": "1463594883109863425",
            "tweet_text": "Difficulty:  The statistics.mean() function isn't called average().\n\nThe solution is to rename it the during the import:\n\n    from statistics import mean as average\n\n11/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:27.000Z"
        },
        {
            "id": 2953,
            "username": "raymondh",
            "tweet_id": "1463594881876643848",
            "tweet_text": "Difficulty:  The flowchart loop naturally translates to an \"if\" and \"goto\", but #Python doesn't have a goto.\n\nThe solution involved a \"while True\" with a test and break at the bottom.\n\nwhile True:\n   ...\n   if guess == x:\n       break\n\nThe \"==\" notation was also confusing.\n\n10/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:26.000Z"
        },
        {
            "id": 2954,
            "username": "raymondh",
            "tweet_id": "1463594880597385218",
            "tweet_text": "Difficulty:  He wanted commas in the output\n\nThe solution involved formatted strings.  Surprisingly, he accepted this at face value as if it is obvious that \":,f\" means to add commas:\n\n    print(f'Our best guess is {guess:,f}')\n\n9/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:26.000Z"
        },
        {
            "id": 2955,
            "username": "raymondh",
            "tweet_id": "1463594879364255752",
            "tweet_text": "Difficulty:  He tried a decimal input.\n\n    Enter a square: 610,652,380,806.25\n\nThis raised a ValueError. The solution involved converting to a float.  The difference between ints and floats was easy to explain:\n\n    square = float(input('Enter a square: ').replace(',', ''))\n\n8/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:26.000Z"
        },
        {
            "id": 2956,
            "username": "raymondh",
            "tweet_id": "1463594878236082186",
            "tweet_text": "Difficulty:  He used commas in his input\n\n   Enter a square: 54,479,161\n\nThe raised a ValueError.  The solution was to strip the commas.  The code took a lot of explaining:\n\n    square = int(input('Enter a square: ').replace(',', ''))\n\n7/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:25.000Z"
        },
        {
            "id": 2957,
            "username": "raymondh",
            "tweet_id": "1463594877061681163",
            "tweet_text": "Translating the flowchart into #Python was fraught with difficulties.\n\n    square = input('Enter a square: ')\n\nDifficulty:  The type of square is a str but needs to be an integer.\n\n    square = int(input('Enter a square: '))\n\n6/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:25.000Z"
        },
        {
            "id": 2958,
            "username": "raymondh",
            "tweet_id": "1463594873567723530",
            "tweet_text": "After mastering doing the algorithm by hand, we wrote a flowchart for the algorithm.  That was easy.\n\nHe also asked for a decision logic table, but they are only helpful for algorithms with complex decision trees.\n\n5/ https://t.co/qidnaj6YeC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FE-7DcYXsAE1SJ7.jpg\"]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:24.000Z"
        },
        {
            "id": 2959,
            "username": "raymondh",
            "tweet_id": "1463594867129565203",
            "tweet_text": "His next input was 7,801,305,625.\n\nThe math challenge was learning to estimate the initial guess:\n\n78|01|30|56|25\n 9  0  0  0  0\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:23.000Z"
        },
        {
            "id": 2960,
            "username": "raymondh",
            "tweet_id": "1463594865858592776",
            "tweet_text": "Matthew immediately wanted larger inputs.\n\n54,479,161 \u00f7 5,000 \u2192 10,896 sums to 15,896\n54,479,161 \u00f7 7,948 \u2192  6,854 sums to 14,802\n54,479,161 \u00f7 7,401 \u2192  7,361 sums to 14,762\n54,479,161 \u00f7 7,381 -&gt; 7,381\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:22.000Z"
        },
        {
            "id": 2961,
            "username": "raymondh",
            "tweet_id": "1463594862691946503",
            "tweet_text": "We started by writing a table by hand, doing the divisions with a calculator:\n\n361 \u00f7 20 \u2192 18.05 sums to 38.05 \u00f7 2 \u2192 19.025\n361 \u00f7 19.025 \u2192 18.975 sums to 38 \u00f7 2 \u2192 19\n\n2/ https://t.co/DpdSfPqFwB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FE-6-t_XsA8VEcy.jpg\"]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:22.000Z"
        },
        {
            "id": 2962,
            "username": "raymondh",
            "tweet_id": "1463594856748658697",
            "tweet_text": "Teaching my nine-year-old about the divide and average method for computing square roots.\n\nThe math was each to teach, but the #Python coding presented many challenges.\n\nIn instructor-speak, these are called \u201clearning points\u201d  \ud83d\ude09\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1463594856748658697",
            "tweet_type": "Others",
            "created_at": "2021-11-24T19:46:20.000Z"
        },
        {
            "id": 2963,
            "username": "raymondh",
            "tweet_id": "1463049022382485506",
            "tweet_text": "The reason behind the camelCase spelling of indexOf is interesting.\n\nThe lowercase and underscore convention didn't emerge until Python had been in use for many years.\n\nThe operator.indexOf() function was created by Guido in July 1996.\n\nhttps://t.co/8ssL7xiIYL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1462857022689456132",
            "tweet_type": "Others",
            "created_at": "2021-11-23T07:37:23.000Z"
        },
        {
            "id": 2964,
            "username": "raymondh",
            "tweet_id": "1462857024140627972",
            "tweet_text": "I recently saw it used to find the first key matching a target value in a dictionary:\n\n  i = indexOf(d.values(), target_value)\n  k = next(islice(d.keys(), i, i+1))\n\nThat works but this is more readable:\n\n  k = next(key for (key, value) in d.items() if value==target_value)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1462857022689456132",
            "tweet_type": "Others",
            "created_at": "2021-11-22T18:54:27.000Z"
        },
        {
            "id": 2965,
            "username": "raymondh",
            "tweet_id": "1462857022689456132",
            "tweet_text": "#Python's operator module has an interesting function called indexOf().\n\nIt behaves like the index() method for sequences but will also work on other iterables and iterators:\n\n&gt;&gt;&gt; squares = (x**2 for x in range(100))\n&gt;&gt;&gt; indexOf(squares, 64)\n8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1462857022689456132",
            "tweet_type": "Others",
            "created_at": "2021-11-22T18:54:27.000Z"
        },
        {
            "id": 2966,
            "username": "raymondh",
            "tweet_id": "1462461275951271936",
            "tweet_text": "This technique is handy with space characters:\n\n    # space characters, comma, and underscore\n    r'[\\s,_]'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1462435365730635789",
            "tweet_type": "Others",
            "created_at": "2021-11-21T16:41:54.000Z"
        },
        {
            "id": 2967,
            "username": "raymondh",
            "tweet_id": "1462435365730635789",
            "tweet_text": "#Python tip:  Character sets in regular expressions can be specified with character classes as well as individual characters.\n\n    hex_pattern = r'[\\da-f]'\n\nis equivalent to:\n\n    hex_pattern = r'[0-9a-f]'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1462435365730635789",
            "tweet_type": "Python tips",
            "created_at": "2021-11-21T14:58:56.000Z"
        },
        {
            "id": 2968,
            "username": "raymondh",
            "tweet_id": "1461743479860649986",
            "tweet_text": "In the grand scheme, this change isn't important, but it does make the language slightly nicer.\n\n5 of 5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461743474542268416",
            "tweet_type": "Others",
            "created_at": "2021-11-19T17:09:38.000Z"
        },
        {
            "id": 2969,
            "username": "raymondh",
            "tweet_id": "1461743478174629892",
            "tweet_text": "Another use case was harmonizing  _pyio.open  with https://t.co/ftH19e19Tz:\n\nhttps://t.co/0U4g3K7Tlo\n\n4 of 5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461743474542268416",
            "tweet_type": "Others",
            "created_at": "2021-11-19T17:09:37.000Z"
        },
        {
            "id": 2970,
            "username": "raymondh",
            "tweet_id": "1461743476983353356",
            "tweet_text": "One valid use case was using a staticmethod inside a class definition as a function default argument to another class.\n\nhttps://t.co/0nq5St2qge\n\n3 of 5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461743474542268416",
            "tweet_type": "Others",
            "created_at": "2021-11-19T17:09:37.000Z"
        },
        {
            "id": 2971,
            "username": "raymondh",
            "tweet_id": "1461743475838398464",
            "tweet_text": "It took two decades to add this functionality because it wasn't clear there were any use cases for it.\n\nThe biggest benefit is that it matches the simple mental model of being a function pass-through rather the more complex model with descriptor specific logic.\n\n2 of 5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461743474542268416",
            "tweet_type": "Others",
            "created_at": "2021-11-19T17:09:37.000Z"
        },
        {
            "id": 2972,
            "username": "raymondh",
            "tweet_id": "1461743474542268416",
            "tweet_text": "In #Python3.10 instances of staticmethod() became callable without having to go through a class or instance.\n\n&gt;&gt; sm = staticmethod(ord)\n&gt;&gt; sm('A')\n65\n\n1 of 5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461743474542268416",
            "tweet_type": "Others",
            "created_at": "2021-11-19T17:09:36.000Z"
        },
        {
            "id": 2973,
            "username": "raymondh",
            "tweet_id": "1461619976943640576",
            "tweet_text": "Wow.  I'm impressed.  Tonight was the best lunar eclipse I've ever seen.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461619976943640576",
            "tweet_type": "Others",
            "created_at": "2021-11-19T08:58:52.000Z"
        },
        {
            "id": 2974,
            "username": "raymondh",
            "tweet_id": "1461442988157067269",
            "tweet_text": "How do you pronounce #Python 3.10's new aiter() builtin function?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461442988157067269",
            "tweet_type": "Others",
            "created_at": "2021-11-18T21:15:35.000Z"
        },
        {
            "id": 2975,
            "username": "raymondh",
            "tweet_id": "1461183802865299460",
            "tweet_text": "The final result passes mypy with a --strict option but it still needs more work.\n\nWhen a key function is supplied, the data can be any type and the key function return value must support comparison.\n\nWithout a key function, the input type must support direct comparison.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T04:05:40.000Z"
        },
        {
            "id": 2976,
            "username": "raymondh",
            "tweet_id": "1461183128538652672",
            "tweet_text": "Some time was lost by entering Tuple[T] instead of Tuple[T, ...].\n\nI already knew the correct way, but my fingers got reprogrammed after entering Iterable[T] a few times.\n\nThis was never a problem before, but the asymmetry between tuple and other container types makes it a risk.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T04:02:59.000Z"
        },
        {
            "id": 2977,
            "username": "raymondh",
            "tweet_id": "1461158549254549509",
            "tweet_text": "Writing the function and testing it took no more than 15 minutes.\n\nGetting the type annotations correct took about six hours in total (not contiguous).\n\nOnce or twice, I almost accepted defeat.  The mypy error messages can be inscrutable and provide no hint about how to proceed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T02:25:19.000Z"
        },
        {
            "id": 2978,
            "username": "raymondh",
            "tweet_id": "1461157239486619650",
            "tweet_text": "When using overloading, mypy checks to make sure that \nthe overloaded function implementation accepts all possible arguments of each overload.\n\nThe / and * restrictions are essential in this regard.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T02:20:07.000Z"
        },
        {
            "id": 2979,
            "username": "raymondh",
            "tweet_id": "1461155790459449346",
            "tweet_text": "We have abstract base class for Sized, Hashable, Iterable, etc.   But to determine whether an object is orderable, we need a Protocol() that can detect __gt__.\n\nInterestingly, this isn't thrown-off by object() already having __gt__ method.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T02:14:22.000Z"
        },
        {
            "id": 2980,
            "username": "raymondh",
            "tweet_id": "1461154952991195140",
            "tweet_text": "When mypy can't make a deduction across a conditional branch, a cast() is required to narrow the possibilities.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T02:11:02.000Z"
        },
        {
            "id": 2981,
            "username": "raymondh",
            "tweet_id": "1461154950763974663",
            "tweet_text": "The two argument trick was needed to distinguish a one argument case from a two-or-more argument case.\n\nSince *args means zero-or-more, two fixed args are needed:\n\n@overload\ndef f(arg1: T, arg2: T, *args):\n    ...\n\n@overload\ndef f(arg: T):\n    ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T02:11:01.000Z"
        },
        {
            "id": 2982,
            "username": "raymondh",
            "tweet_id": "1461154949593812999",
            "tweet_text": "MyPy has a known issue picking apart unions in the form:  Union[T, Iterable[T].\n\nSo, overloads were needed as a work-around.\n\n# https://t.co/uIIievQilP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T02:11:01.000Z"
        },
        {
            "id": 2983,
            "username": "raymondh",
            "tweet_id": "1461154948683554818",
            "tweet_text": "I normally use the \"is\" operator to test for sentinel values but mypy needs an instance() check to distinguish that case.\n\nChecking ininstance(x, object) always matches, so a custom Sentinel class was required.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T02:11:01.000Z"
        },
        {
            "id": 2984,
            "username": "raymondh",
            "tweet_id": "1461151307285336064",
            "tweet_text": "#Python success:  I was finally able to make a type annotated pure python version of max().\n\nAll it took was a protocol bound to a typevar, a custom sentinel class, unions, overloads, isinstance checks, casts, repeated arguments, and the / and * notation.\n\nhttps://t.co/KOqZ46Pmcj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1461151307285336064",
            "tweet_type": "Others",
            "created_at": "2021-11-18T01:56:33.000Z"
        },
        {
            "id": 2985,
            "username": "raymondh",
            "tweet_id": "1460852638782828544",
            "tweet_text": "@overload\ndef mymax(*args: T,\n          key = Optional[Callable[[T], Any]]) -&gt; T:\n    ...\n\ndef mymax(*args: Union[Iterable[T], T],\n          default: Union[Sentinel, D] = sentinel,\n          key: Optional[Callable[[T], Any]] = None) -&gt; Union[D, T]:\n\n#MyPy is not happy!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1460829569326456832",
            "tweet_type": "Others",
            "created_at": "2021-11-17T06:09:45.000Z"
        },
        {
            "id": 2986,
            "username": "raymondh",
            "tweet_id": "1460852637570588672",
            "tweet_text": "Hmm, I couldn't get mypy to accept any variation, so I'm stuck on this last step.\n\n@overload\ndef mymax(iterable: Iterable[T],\n          *,\n          default: Union[Sentinel, D],\n          key: Optional[Callable[[T], Any]]) -&gt; Union[D, T]:\n    ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1460829569326456832",
            "tweet_type": "Others",
            "created_at": "2021-11-17T06:09:44.000Z"
        },
        {
            "id": 2987,
            "username": "raymondh",
            "tweet_id": "1460840210258927619",
            "tweet_text": "Triple extra credit if you can figure-out how to how to type annotate the max() function including its *key* and *default* options.\n\nHint: overloading and typevars are required.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1460829569326456832",
            "tweet_type": "Others",
            "created_at": "2021-11-17T05:20:21.000Z"
        },
        {
            "id": 2988,
            "username": "raymondh",
            "tweet_id": "1460830518161858561",
            "tweet_text": "For a more accurate answer, start by reading the docs:\n\nhttps://t.co/RMfQlzunjN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1460829569326456832",
            "tweet_type": "Others",
            "created_at": "2021-11-17T04:41:51.000Z"
        },
        {
            "id": 2989,
            "username": "raymondh",
            "tweet_id": "1460829570593169408",
            "tweet_text": "Extra credit if you know which comparison operator to use and the order of its arguments.\n\nDouble extra credit if you find a way to make the signature nicer with __text_signature__.  (I only half succeeded at this step).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1460829569326456832",
            "tweet_type": "Others",
            "created_at": "2021-11-17T04:38:05.000Z"
        },
        {
            "id": 2990,
            "username": "raymondh",
            "tweet_id": "1460829569326456832",
            "tweet_text": "#Python argument handling challenge:  Write max() in pure python including both the iterable form and the multi-argument form.  Include the *key* and *default* keyword arguments and error handling.\n\nhttps://t.co/hw9d8H3qrA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1460829569326456832",
            "tweet_type": "Others",
            "created_at": "2021-11-17T04:38:04.000Z"
        },
        {
            "id": 2991,
            "username": "raymondh",
            "tweet_id": "1459936316871880705",
            "tweet_text": "Short proof for the relationship:\n\nhttps://t.co/hzxjMVOuJa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1459660308935495691",
            "tweet_type": "Others",
            "created_at": "2021-11-14T17:28:36.000Z"
        },
        {
            "id": 2992,
            "username": "raymondh",
            "tweet_id": "1459660313750614024",
            "tweet_text": "In case you're wondering where the \"b**2 - b - 1\" comes from, see this proof of Binet's formula for the Fibonacci sequence.\n\nhttps://t.co/Hkk8W4J5iR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1459660308935495691",
            "tweet_type": "Others",
            "created_at": "2021-11-13T23:11:52.000Z"
        },
        {
            "id": 2993,
            "username": "raymondh",
            "tweet_id": "1459660312408383494",
            "tweet_text": "The relationship holds for other bases as well:\n\n&gt;&gt;&gt; base = 12\n\n&gt;&gt;&gt; fsum(fib / base**(i + 1) for i, fib in enumerate(fibs))\n0.007633587786259542\n\n1 / (base ** 2 - base - 1)\n0.007633587786259542 https://t.co/fqsIlw0cSP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FEHAYe_XwAQ03Ei.png\"]",
            "tweet_conversation_id": "1459660308935495691",
            "tweet_type": "Others",
            "created_at": "2021-11-13T23:11:52.000Z"
        },
        {
            "id": 2994,
            "username": "raymondh",
            "tweet_id": "1459660310353227786",
            "tweet_text": "Playing around with a calculator, Matthew noticed the Fibonacci sequence embedded in the decimal expansion of 1 / 89th.\n\nThis identity isn't new, but he did discover it on his own. Needless to say, his dad is proud.  \n\n\u201cChance favors only the prepared mind.\u201d \u2014 Louis Pasteur",
            "tweet_media": "[]",
            "tweet_conversation_id": "1459660308935495691",
            "tweet_type": "Others",
            "created_at": "2021-11-13T23:11:51.000Z"
        },
        {
            "id": 2995,
            "username": "raymondh",
            "tweet_id": "1459660308935495691",
            "tweet_text": "#Python fun courtesy of my son (aged 9):\n\n# Fibonacci sequence\n&gt;&gt;&gt; fibs = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n\n&gt;&gt;&gt; fsum(fib / 10**(i + 1) for i, fib in enumerate(fibs))\n0.011235955056179775\n\n&gt;&gt;&gt; 1 / 89\n0.011235955056179775",
            "tweet_media": "[]",
            "tweet_conversation_id": "1459660308935495691",
            "tweet_type": "Others",
            "created_at": "2021-11-13T23:11:51.000Z"
        },
        {
            "id": 2996,
            "username": "raymondh",
            "tweet_id": "1459038551102926848",
            "tweet_text": "For those answering, \"yes, and I use it\", it would be helpful for my research to have a link to where it is used so I can look at the context.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1459024249600028673",
            "tweet_type": "Others",
            "created_at": "2021-11-12T06:01:12.000Z"
        },
        {
            "id": 2997,
            "username": "raymondh",
            "tweet_id": "1459024249600028673",
            "tweet_text": "#Python knowledge survey:  Before this tweet, did you know that __instancecheck__ can be used to override isinstance() ?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1459024249600028673",
            "tweet_type": "Others",
            "created_at": "2021-11-12T05:04:23.000Z"
        },
        {
            "id": 2998,
            "username": "raymondh",
            "tweet_id": "1458857057831067654",
            "tweet_text": "Since pattern matching is effectively an if-elif chain, ordering is important.\n\nSpecial cases should precede general cases.\n\n4 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458857054362345474",
            "tweet_type": "Others",
            "created_at": "2021-11-11T18:00:01.000Z"
        },
        {
            "id": 2999,
            "username": "raymondh",
            "tweet_id": "1458857056778215425",
            "tweet_text": "match sales_report:\n    case {'dept': dept, 'holiday': event}:\n        # Holiday case must precede other cases\n        ...\n    case {'dept': 'shoes'}:\n        ...\n    case {'dept': 'hats'}:\n        ...\n\n3 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458857054362345474",
            "tweet_type": "Others",
            "created_at": "2021-11-11T18:00:01.000Z"
        },
        {
            "id": 3000,
            "username": "raymondh",
            "tweet_id": "1458857055612289024",
            "tweet_text": "match x:\n    case bool():\n        ...\n    case int():\n        assert not isinstance(x, bool)\n        ...\n    case Counter():\n        ...\n    case dict():\n        assert not isinstance(x, Counter)\n    case _:\n        raise TypeError\n\n2 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458857054362345474",
            "tweet_type": "Others",
            "created_at": "2021-11-11T18:00:00.000Z"
        },
        {
            "id": 3001,
            "username": "raymondh",
            "tweet_id": "1458857054362345474",
            "tweet_text": "#Python's structural pattern matching is new, so the best practices aren't yet known.\n\nJust added to my personal list: Add a comment or assertion noting when case ordering is important.  \n\nOtherwise, a future maintainer will be bitten by the illusion of case independence.\n\n1 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458857054362345474",
            "tweet_type": "Others",
            "created_at": "2021-11-11T18:00:00.000Z"
        },
        {
            "id": 3002,
            "username": "raymondh",
            "tweet_id": "1458496961858920449",
            "tweet_text": "#Python mystery ;-)   There is a function called \"i saw a i table\" in the inspect module.  What do you think it does?  Can you see a ii table or iii table as well?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458496961858920449",
            "tweet_type": "Others",
            "created_at": "2021-11-10T18:09:07.000Z"
        },
        {
            "id": 3003,
            "username": "raymondh",
            "tweet_id": "1458160126427377668",
            "tweet_text": "Correction:\n\nmatch obj:\n    case Hashable():\n        ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458155867719733265",
            "tweet_type": "Others",
            "created_at": "2021-11-09T19:50:40.000Z"
        },
        {
            "id": 3004,
            "username": "raymondh",
            "tweet_id": "1458155872606212097",
            "tweet_text": "Note that matches only detect a promise that an API has been implemented.  It can't detect whether a call to the API will succeed.\n\nThe classic example is that issubclass(tuple, Hashable) returns true, but hashing a tuple will fail if its components are unhashable.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458155867719733265",
            "tweet_type": "Others",
            "created_at": "2021-11-09T19:33:45.000Z"
        },
        {
            "id": 3005,
            "username": "raymondh",
            "tweet_id": "1458155870886535175",
            "tweet_text": "For more complex ABCs, such as Sequence and Mapping, the presence of the required methods is insufficient.\n\nThe object's class needs to either inherit from the ABC or be registered with the ABC.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458155867719733265",
            "tweet_type": "Others",
            "created_at": "2021-11-09T19:33:45.000Z"
        },
        {
            "id": 3006,
            "username": "raymondh",
            "tweet_id": "1458155869275832326",
            "tweet_text": "Matching a collection ABC is preferable to looking for the required methods directly.\n\nThe complication is that those methods may be present but could be set to None.\n\nThe ABCs listed above handle the None checks for you.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458155867719733265",
            "tweet_type": "Others",
            "created_at": "2021-11-09T19:33:45.000Z"
        },
        {
            "id": 3007,
            "username": "raymondh",
            "tweet_id": "1458155867719733265",
            "tweet_text": "#Python tip:  Structural pattern matching works with abstract base classes such as: Contains, Hashable, Iterable, Iterator, Reversible, Generator, Sized, Callable, and Collection.\n\nmatch obj:\n    case Hashable:\n        ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1458155867719733265",
            "tweet_type": "Python tips",
            "created_at": "2021-11-09T19:33:44.000Z"
        },
        {
            "id": 3008,
            "username": "raymondh",
            "tweet_id": "1457847399578279939",
            "tweet_text": "#Python factlet:  Calling the close() method on a generator is equivalent to calling throw(GeneratorExit) and then verifying that the generator actually terminates, either with a GeneratorExit or a StopIteration exception.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1457847399578279939",
            "tweet_type": "Others",
            "created_at": "2021-11-08T23:08:00.000Z"
        },
        {
            "id": 3009,
            "username": "raymondh",
            "tweet_id": "1456342025805123600",
            "tweet_text": "Matching set constants is mainly useful when nested inside a class pattern:\n\ncase Request(action='delete', permissions=Perm.FULL):\n    ...\n\n3 of 3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1456342023531864068",
            "tweet_type": "Others",
            "created_at": "2021-11-04T19:26:11.000Z"
        },
        {
            "id": 3010,
            "username": "raymondh",
            "tweet_id": "1456342024714694656",
            "tweet_text": "Also note that a frozenset would match:\n\nmatch frozenset({3, 2, 1}):\n    case C.ones:\n        print('ones')\n    case C.tens:\n        print('tens')\n\n2 of 3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1456342023531864068",
            "tweet_type": "Others",
            "created_at": "2021-11-04T19:26:10.000Z"
        },
        {
            "id": 3011,
            "username": "raymondh",
            "tweet_id": "1456342023531864068",
            "tweet_text": "#Python structural pattern matching tip:  To match on sets, use the constant pattern.\n\nclass C:\n    ones = {1, 2, 3}\n    tens = {10, 20, 30}\n\nmatch {3, 2, 1}:\n    case C.ones:\n        print('ones')\n    case C.tens:\n        print('tens')\n\n1 of 3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1456342023531864068",
            "tweet_type": "Python tips",
            "created_at": "2021-11-04T19:26:10.000Z"
        },
        {
            "id": 3012,
            "username": "raymondh",
            "tweet_id": "1456270600335335432",
            "tweet_text": "#Python tip: Class patterns in structural pattern matching perform an isinstance() check.  For an exact type match, add a guard:\n\nmatch x:\n    case int() if type(x) is int:\n        print('exact int')\n    case str() if type(x) is str:\n        print('exact str')",
            "tweet_media": "[]",
            "tweet_conversation_id": "1456270600335335432",
            "tweet_type": "Python tips",
            "created_at": "2021-11-04T14:42:21.000Z"
        },
        {
            "id": 3013,
            "username": "raymondh",
            "tweet_id": "1454865294120325124",
            "tweet_text": "Cool #Python feature:  The constructor for functools.partial() detects nesting and automatically flattens itself to a more efficient form.\n\n&gt;&gt;&gt; partial(partial(partial(f, 10), 20), 30)\nfunctools.partial(&lt;function f at 0x10a8d5510&gt;, 10, 20, 30)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1454865294120325124",
            "tweet_type": "Others",
            "created_at": "2021-10-31T17:38:10.000Z"
        },
        {
            "id": 3014,
            "username": "raymondh",
            "tweet_id": "1452338081240125458",
            "tweet_text": "#Python factlet:  The os module provides access to environment variables either as strings or as bytes:\n\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ['USER']\n'raymond'\n&gt;&gt;&gt; os.environb[b'USER']\nb'raymond'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1452338081240125458",
            "tweet_type": "Others",
            "created_at": "2021-10-24T18:15:56.000Z"
        },
        {
            "id": 3015,
            "username": "raymondh",
            "tweet_id": "1450539365827072001",
            "tweet_text": "Interestingly, a similar result can be modeled by sorting a uniform distribution:\n\narrivals = sorted(uniform(0.0, n*rate) for i in range(n))\n\n2/2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1450539364430266373",
            "tweet_type": "Others",
            "created_at": "2021-10-19T19:08:29.000Z"
        },
        {
            "id": 3016,
            "username": "raymondh",
            "tweet_id": "1450539364430266373",
            "tweet_text": "#Python factlet: The interval between request arrival times can be modeled with random.expovariate().\n\nn = 1000\nrate = 5.0\n\narrivals = []\narrival_time = 0.0\nfor i in range(n):\n    interval = expovariate(1 / rate)\n    arrival_time += interval\n    arrivals.append(arrival_time)\n\n1/2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1450539364430266373",
            "tweet_type": "Others",
            "created_at": "2021-10-19T19:08:28.000Z"
        },
        {
            "id": 3017,
            "username": "raymondh",
            "tweet_id": "1446191250470735878",
            "tweet_text": "#Python pop quiz:  Is this code valid?  If so, what does it do?\n\ndef f():\n    yield 10\n    return 20\n\ng = f()\nprint(next(g))\nprint(next(g))",
            "tweet_media": "[]",
            "tweet_conversation_id": "1446191250470735878",
            "tweet_type": "Others",
            "created_at": "2021-10-07T19:10:37.000Z"
        },
        {
            "id": 3018,
            "username": "raymondh",
            "tweet_id": "1443238950919938054",
            "tweet_text": "If you want to understand #Python's global interpreter lock, I recommend this blog post.  It is well written and well researched.\n\nhttps://t.co/hNlcyOuLn6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1443238950919938054",
            "tweet_type": "Others",
            "created_at": "2021-09-29T15:39:14.000Z"
        },
        {
            "id": 3019,
            "username": "raymondh",
            "tweet_id": "1441103156956434433",
            "tweet_text": "For a fixed comparison function, the benefit occurs in only one of the partitioning passes \u2014 in particular, the one where the segment is split into mostly equal sized groups.\n\nWhat is really needed is an adaptive comparison that becomes more fine grained on successive passes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1441077960161865731",
            "tweet_type": "Others",
            "created_at": "2021-09-23T18:12:21.000Z"
        },
        {
            "id": 3020,
            "username": "raymondh",
            "tweet_id": "1441077960161865731",
            "tweet_text": "Fun #Python exercise:  Adapt a sort algorithm to take advantage of a more than 3-way comparison function, perhaps giving:  way under, under, a little under, exact, a little over, over, and way over.\n\nhttps://t.co/WppPQpLYT2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1441077960161865731",
            "tweet_type": "Others",
            "created_at": "2021-09-23T16:32:14.000Z"
        },
        {
            "id": 3021,
            "username": "raymondh",
            "tweet_id": "1440354762247999491",
            "tweet_text": "The code is here:\n\nhttps://t.co/zJ5pZuzrNX\n\nAnd the subtype test is here:\n\nhttps://t.co/vV47YAT9Kw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1440354754421411849",
            "tweet_type": "Others",
            "created_at": "2021-09-21T16:38:30.000Z"
        },
        {
            "id": 3022,
            "username": "raymondh",
            "tweet_id": "1440354760540844040",
            "tweet_text": "The logic is documented here:\n\nhttps://t.co/ZhCV0XWscI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1440354754421411849",
            "tweet_type": "Others",
            "created_at": "2021-09-21T16:38:30.000Z"
        },
        {
            "id": 3023,
            "username": "raymondh",
            "tweet_id": "1440354758154330119",
            "tweet_text": "Virtual subclassing is not considered, so isinstance() isn't called.  Instead the test scans the MRO of type(b) to see if type(a) is present.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1440354754421411849",
            "tweet_type": "Others",
            "created_at": "2021-09-21T16:38:29.000Z"
        },
        {
            "id": 3024,
            "username": "raymondh",
            "tweet_id": "1440354754421411849",
            "tweet_text": "#Python factlet:  The comparison a&lt;b calls b.__gt__(a) first if the operands are of different types, and right operand\u2019s type is a direct or indirect subclass of the left operand\u2019s type.\n\nOtherwise a.__lt__(b) is called first. If NotImplemented is returned, b.__gt__(a) is called.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1440354754421411849",
            "tweet_type": "Others",
            "created_at": "2021-09-21T16:38:28.000Z"
        },
        {
            "id": 3025,
            "username": "raymondh",
            "tweet_id": "1438538379545747457",
            "tweet_text": "#Python pop quiz:  Which of these is fastest?  Why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1438538379545747457",
            "tweet_type": "Others",
            "created_at": "2021-09-16T16:20:51.000Z"
        },
        {
            "id": 3026,
            "username": "raymondh",
            "tweet_id": "1437804595720474628",
            "tweet_text": "#Python tip:  A ChainMap view can easily collapsed into a regular dictionary:\n\nview = ChainMap(d1, d2, d3)\ncollapsed = dict(view)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1437804595720474628",
            "tweet_type": "Python tips",
            "created_at": "2021-09-14T15:45:03.000Z"
        },
        {
            "id": 3027,
            "username": "raymondh",
            "tweet_id": "1437026009942007819",
            "tweet_text": "#Python factlet:  s[0] is faster than s.__getitem__(0) even if you use a boundmethod for the latter.\n\nThe first compiles to BINARY_SUBSCR.\n\nThe second compiles to a LOAD_METHOD and CALL_METHOD.\n\nBoth are pathways to the same underlying implementation, but the first is faster.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1437026009942007819",
            "tweet_type": "Others",
            "created_at": "2021-09-12T12:11:14.000Z"
        },
        {
            "id": 3028,
            "username": "raymondh",
            "tweet_id": "1434199216562315277",
            "tweet_text": "#Python typing question:  Is there a way to annotate this:\n\n    def lowbit(x: int) -&gt; Literal[0, 1]:\n        return x &amp; 1\n\nwithout changing the actual code to something less efficient:\n\n    return 1 if x &amp; 1 else 0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1434199216562315277",
            "tweet_type": "Others",
            "created_at": "2021-09-04T16:58:34.000Z"
        },
        {
            "id": 3029,
            "username": "raymondh",
            "tweet_id": "1433611458370228224",
            "tweet_text": "If you're getting serious about using #Python's type annotations, I recommend @AdamChainz 's excellent write-up about the overload decorator.\n\nhttps://t.co/LlALksKEYK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1433611458370228224",
            "tweet_type": "Others",
            "created_at": "2021-09-03T02:03:01.000Z"
        },
        {
            "id": 3030,
            "username": "raymondh",
            "tweet_id": "1433555551133343746",
            "tweet_text": "#Python typing question:  How do you annotate a __getitem__ method that returns a int when the index is an int and returns a list when the index is a slice?\n\ns[0] -&gt; 10\ns[:3] -&gt; [10, 20, 30]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1433555551133343746",
            "tweet_type": "Others",
            "created_at": "2021-09-02T22:20:52.000Z"
        },
        {
            "id": 3031,
            "username": "raymondh",
            "tweet_id": "1432468641195466772",
            "tweet_text": "#Python factlets:  \n\nint(x) always returns an instance of int or a strict int subclass.  Returning int subclasses is deprecated.\n\nmath.trunc(x) can return any data type.  It is documented to \u201ctruncate a Real to the nearest Integral toward 0\u201d but that isn't checked.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1432468641195466772",
            "tweet_type": "Others",
            "created_at": "2021-08-30T22:21:52.000Z"
        },
        {
            "id": 3032,
            "username": "raymondh",
            "tweet_id": "1431016906740359169",
            "tweet_text": "Dealing with concurrency and reentrancy issues is tricky.\n\nTo my eyes, the PR correctly covers all possible cases.  However, some deadlocked buildbots say otherwise ;-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1431016905276633088",
            "tweet_type": "Others",
            "created_at": "2021-08-26T22:13:12.000Z"
        },
        {
            "id": 3033,
            "username": "raymondh",
            "tweet_id": "1431016905276633088",
            "tweet_text": "Anyone want to help me rescue #Python's cached_property decorator?\n\nIf I can't fix the race condition in my proposed fix, we're likely going to rip out locking entirely, losing the guarantee that a method cannot be called more than once per instance.\n\nhttps://t.co/dFzGyKNyqb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1431016905276633088",
            "tweet_type": "Others",
            "created_at": "2021-08-26T22:13:11.000Z"
        },
        {
            "id": 3034,
            "username": "raymondh",
            "tweet_id": "1430565266136698882",
            "tweet_text": "Other conventions:\n\ndef invalid_method():\n    \"Override a method that will never make sense for this subclass\"\n    raise NotImplentedError\n\ndef binop(self, other):\n    \"Allow reversed call to other\"\n    if not isinstance(other, KnownType):\n         return NotImplemented\n    ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1430540901772898306",
            "tweet_type": "Others",
            "created_at": "2021-08-25T16:18:32.000Z"
        },
        {
            "id": 3035,
            "username": "raymondh",
            "tweet_id": "1430540901772898306",
            "tweet_text": "Suggested #Python convention:  Mark stub functions with \"...\" and reserve \"pass\" for intentionally empty statement blocks.\n\ndef stub_function():\n   \"Going to write this someday\"\n    ...\n\nclass NewError(Exception):\n    \"Old errors aren't good enough\"\n    pass",
            "tweet_media": "[]",
            "tweet_conversation_id": "1430540901772898306",
            "tweet_type": "Others",
            "created_at": "2021-08-25T14:41:43.000Z"
        },
        {
            "id": 3036,
            "username": "raymondh",
            "tweet_id": "1430212867274461191",
            "tweet_text": "Face the facts.   \n\nAt some point @US_FDA WILL approve a vaccine for children under 12; otherwise, every child in country will eventually get covid.\n\nThe vaccine @US_FDAs approve WILL be the Pfizer vaccine, nothing else is in the works.\n\nKids are back in school, don't delay!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1430212865928142849",
            "tweet_type": "Others",
            "created_at": "2021-08-24T16:58:14.000Z"
        },
        {
            "id": 3037,
            "username": "raymondh",
            "tweet_id": "1429885389796478978",
            "tweet_text": "What is the best #Python approach to removing a default XML namespace?\n\n&lt;svg width=\"1346pt\" height=\"1550pt\"\n viewBox=\"0.00 0.00 1346.19 1550.00\" xmlns=\"https://t.co/409dJTfRmW\"&gt;\n\nI really don't want these tag qualifiers:\n\n&lt;Element '{https://t.co/409dJTfRmW}svg' at 0x1053b7b00&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1429885389796478978",
            "tweet_type": "Others",
            "created_at": "2021-08-23T19:16:57.000Z"
        },
        {
            "id": 3038,
            "username": "raymondh",
            "tweet_id": "1429865101281185795",
            "tweet_text": "OH:  When this is all over, we're going to party like it's 2019.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1429865101281185795",
            "tweet_type": "Others",
            "created_at": "2021-08-23T17:56:20.000Z"
        },
        {
            "id": 3039,
            "username": "raymondh",
            "tweet_id": "1429490076388630529",
            "tweet_text": "#Python tip:  Debuggers are wonderful, but sometimes just adding \"print(locals())\" is the easiest way to go ;-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1429490076388630529",
            "tweet_type": "Python tips",
            "created_at": "2021-08-22T17:06:07.000Z"
        },
        {
            "id": 3040,
            "username": "raymondh",
            "tweet_id": "1428457760186851328",
            "tweet_text": "Papers tended to use phrasing like, \"let n be the smallest integer such that ...\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1428457757674508289",
            "tweet_type": "Others",
            "created_at": "2021-08-19T20:44:04.000Z"
        },
        {
            "id": 3041,
            "username": "raymondh",
            "tweet_id": "1428457758941138948",
            "tweet_text": "This reminds me of the early days of BASIC when mathematically inclined people where uncomfortable with \"=\" for variable assignments, so the useless verb \"LET\" was used to mimic the style used in papers:\n\n10 LET PI = 3.1415926535\n20 LET E = 2.781281828",
            "tweet_media": "[]",
            "tweet_conversation_id": "1428457757674508289",
            "tweet_type": "Others",
            "created_at": "2021-08-19T20:44:03.000Z"
        },
        {
            "id": 3042,
            "username": "raymondh",
            "tweet_id": "1428457757674508289",
            "tweet_text": "#Python tip:  Don't unnecessarily prefix function names with \"get\".\n\nIn the sys module, getsizeof() should have been named sizeof().  The \"get\" is useless baggage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1428457757674508289",
            "tweet_type": "Python tips",
            "created_at": "2021-08-19T20:44:03.000Z"
        },
        {
            "id": 3043,
            "username": "raymondh",
            "tweet_id": "1427754866542325762",
            "tweet_text": "This is the general rule.  When there is an exceptions to the rule, it is always called out in the documentation.\n\nFor example, the __missing__ method for dict subclasses, do_get() method for HTTP handers, or the do_xxx() methods for the cmd module.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1427754865359474689",
            "tweet_type": "Others",
            "created_at": "2021-08-17T22:11:01.000Z"
        },
        {
            "id": 3044,
            "username": "raymondh",
            "tweet_id": "1427754865359474689",
            "tweet_text": "In general, the methods from #Python's builtin types are independent of one another.\n\nIf a dict subclass overrides __getitem__(), other methods such as get() or pop() are unaffected.\n\nhttps://t.co/RiXJqo0GDc\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1427754865359474689",
            "tweet_type": "Others",
            "created_at": "2021-08-17T22:11:00.000Z"
        },
        {
            "id": 3045,
            "username": "raymondh",
            "tweet_id": "1426924966944051203",
            "tweet_text": "I would also like to see opt-out biweekly pool testing for early detection of classroom spread.\n\nIf delta is in fact as contagious as chickenpox and can spread asymptomatically, then testing is the only opportunity for intervention.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1426718121281343489",
            "tweet_type": "Others",
            "created_at": "2021-08-15T15:13:17.000Z"
        },
        {
            "id": 3046,
            "username": "raymondh",
            "tweet_id": "1426718121281343489",
            "tweet_text": "A whole country with kids going back to school is going to pay a price for every day the @US_FDA delays approving a vaccine for children 5 to 12.\n\nA mask is very weak measure compared to an actual vaccination.\n\nhttps://t.co/wGHD9SXJlj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1426718121281343489",
            "tweet_type": "Others",
            "created_at": "2021-08-15T01:31:21.000Z"
        },
        {
            "id": 3047,
            "username": "raymondh",
            "tweet_id": "1425177488406286339",
            "tweet_text": "GHG:  Greenhouse gases\n\nCryosphere:  Frozen surface water (glaciers, permafrost)\n\nAustral:  Southern hemisphere\n\nEvapotranspiration:  Evaporation plus transpiration from plants\n\nLow probability, high impact event:  Russian Roulette\n\nCIDs:  Climate impact drivers",
            "tweet_media": "[]",
            "tweet_conversation_id": "1425177486418141187",
            "tweet_type": "Others",
            "created_at": "2021-08-10T19:29:26.000Z"
        },
        {
            "id": 3048,
            "username": "raymondh",
            "tweet_id": "1425177487487741958",
            "tweet_text": "Don't be intimidated the size of the full report.\n\nThe \"Summary for PolicyMakers\" has what you need to know and can be read in about 45 minutes, or get just the essentials in 15 to 20 minutes.\n\nThere are links from the summary to drill down into the details as needed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1425177486418141187",
            "tweet_type": "Others",
            "created_at": "2021-08-10T19:29:26.000Z"
        },
        {
            "id": 3049,
            "username": "raymondh",
            "tweet_id": "1425177486418141187",
            "tweet_text": "I suggest investing 15-20 minutes to read the Climate Change 2021 report for yourself.\n\nDon't let your knowledge be limited to just headlines and interpretations by others.\n\nhttps://t.co/Krn87Sdxdo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1425177486418141187",
            "tweet_type": "Others",
            "created_at": "2021-08-10T19:29:25.000Z"
        },
        {
            "id": 3050,
            "username": "raymondh",
            "tweet_id": "1422776981893140482",
            "tweet_text": "#Python tip:   For sets, the discard() method removes an element if present, and does nothing if the element is not present:\n\n    someset.discard(element)\n\nThe equivalent for dictionaries is:\n\n    somedict.pop(key, None)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1422776981893140482",
            "tweet_type": "Python tips",
            "created_at": "2021-08-04T04:30:41.000Z"
        },
        {
            "id": 3051,
            "username": "raymondh",
            "tweet_id": "1421856677763207173",
            "tweet_text": "Key learning point:  \n\nYour spidey sense should start to tingle whenever you see a lock being held for the duration of an arbitrary function call.\n\nhttps://t.co/4co9j4uDvx\n\n4 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1421856674730496001",
            "tweet_type": "Others",
            "created_at": "2021-08-01T15:33:43.000Z"
        },
        {
            "id": 3052,
            "username": "raymondh",
            "tweet_id": "1421856676806807555",
            "tweet_text": "There is an open bug report for this small catastrophe:\n\nhttps://t.co/nVMHi5F5YL\n\n3 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1421856674730496001",
            "tweet_type": "Others",
            "created_at": "2021-08-01T15:33:43.000Z"
        },
        {
            "id": 3053,
            "username": "raymondh",
            "tweet_id": "1421856675913469957",
            "tweet_text": "For the most part, you would be better off with a dirt simple, lockless implementation:\n\nhttps://t.co/rK7oIE9zvq\n\n2 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1421856674730496001",
            "tweet_type": "Others",
            "created_at": "2021-08-01T15:33:43.000Z"
        },
        {
            "id": 3054,
            "username": "raymondh",
            "tweet_id": "1421856674730496001",
            "tweet_text": "#Python limitation: The functools.cached_property() decorator blocks parallel calculation of cached values, even for *distinct* instances of the same class.\n\nThis makes it completely unsuitable for I/O bound methods in a threaded environment.\n\nhttps://t.co/UmSh7k1Vkd\n\n1 of 4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1421856674730496001",
            "tweet_type": "Others",
            "created_at": "2021-08-01T15:33:42.000Z"
        },
        {
            "id": 3055,
            "username": "raymondh",
            "tweet_id": "1410249807571165186",
            "tweet_text": "Fields are commonly delimited with commas, tabs, newlines, ampersands, and vertical bars (|).\n\nBut these need to be escaped if they appear in the data.\n\nInstead, try the ASCII unit separator (US), 'x1f'.\n\nAFAICT, the only disadvantage is that it isn't printable.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1410249807571165186",
            "tweet_type": "Others",
            "created_at": "2021-06-30T14:52:09.000Z"
        },
        {
            "id": 3056,
            "username": "raymondh",
            "tweet_id": "1404637229084024832",
            "tweet_text": "Useful #Python quirk:  The interactive REPL saves an expression result in a variable called \"_\" but only if the result is not None.\n\n&gt;&gt;&gt; s = [10, None]\n&gt;&gt;&gt; s[0]\n10\n&gt;&gt;&gt; _\n10\n&gt;&gt;&gt; s[1]\n&gt;&gt;&gt; _\n10",
            "tweet_media": "[]",
            "tweet_conversation_id": "1404637229084024832",
            "tweet_type": "Others",
            "created_at": "2021-06-15T03:09:46.000Z"
        },
        {
            "id": 3057,
            "username": "raymondh",
            "tweet_id": "1401745336868110338",
            "tweet_text": "My friend Grant makes everything better :-) https://t.co/vtl4R5e4H9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1401745336868110338",
            "tweet_type": "Others",
            "created_at": "2021-06-07T03:38:26.000Z"
        },
        {
            "id": 3058,
            "username": "raymondh",
            "tweet_id": "1401275497066110977",
            "tweet_text": "The early days of computing were a fertile time for creative thought.   Besides the ALGOL derivatives, there were so many wondrous ways of expressing code:  APL, Forth, Prolog, Lisp.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1401275497066110977",
            "tweet_type": "Others",
            "created_at": "2021-06-05T20:31:27.000Z"
        },
        {
            "id": 3059,
            "username": "raymondh",
            "tweet_id": "1400679343345397762",
            "tweet_text": "From the very beginning of my #Python career, I've liked the shelve module.  Sometimes though, I wonder if I'm the only one.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1400679343345397762",
            "tweet_type": "Others",
            "created_at": "2021-06-04T05:02:33.000Z"
        },
        {
            "id": 3060,
            "username": "raymondh",
            "tweet_id": "1397766237023707136",
            "tweet_text": "How does one design their code to make it as PyPy friendly as possible?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1397765939823714306",
            "tweet_type": "Others",
            "created_at": "2021-05-27T04:06:54.000Z"
        },
        {
            "id": 3061,
            "username": "raymondh",
            "tweet_id": "1397765939823714306",
            "tweet_text": "Are there any resources detailing which constructs work best with #PyPy ?\n\nWhich is better: a closure, an equivalent partial(), or an equivalent class?\n\nIs indexing preferred over iterators or vice versa?\n\nSpeed differences between globals, locals, instance vars, class vars, etc?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1397765939823714306",
            "tweet_type": "Others",
            "created_at": "2021-05-27T04:05:43.000Z"
        },
        {
            "id": 3062,
            "username": "raymondh",
            "tweet_id": "1397633146791677954",
            "tweet_text": "#Python question: What is the correct type annotation for the return value of a class method?\n\nclass P:\n\n    @classmethod \n    def from_half(cls, x: int) -&gt; ???:\n        return cls(x * 2)\n\nclass C(P):\n    pass",
            "tweet_media": "[]",
            "tweet_conversation_id": "1397633146791677954",
            "tweet_type": "Others",
            "created_at": "2021-05-26T19:18:03.000Z"
        },
        {
            "id": 3063,
            "username": "raymondh",
            "tweet_id": "1396976883812773891",
            "tweet_text": "#Python tip: Add a count to str.replace to prevent too many substitutions:\n\n&gt;&gt;&gt; s = 'There is a flow in the flowchart'\n\n&gt;&gt;&gt; s.replace('flow', 'flaw')  # Too much!\n'There is a flaw in the flawchart'\n\n&gt;&gt;&gt; s.replace('flow', 'flaw', 1) # Just right.\n'There is a flaw in the flowchart'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1396976883812773891",
            "tweet_type": "Python tips",
            "created_at": "2021-05-24T23:50:18.000Z"
        },
        {
            "id": 3064,
            "username": "raymondh",
            "tweet_id": "1393733384573095936",
            "tweet_text": "#Python factlet: The int() function supports base conversions from base-2 to base-36 using 0-9A-Z.\n\n&gt;&gt;&gt; [int('11', base) for base in range(2, 37)]\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1393733384573095936",
            "tweet_type": "Others",
            "created_at": "2021-05-16T01:01:47.000Z"
        },
        {
            "id": 3065,
            "username": "raymondh",
            "tweet_id": "1393337066956541955",
            "tweet_text": "This intent of the problem is to come up with a way to exploit the known sort order.\n\nThe OP could have specified that the data elements are not hashable and only support ordering operations.\n\nAnd, further that this output is required to be sorted.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1393331948286668800",
            "tweet_type": "Others",
            "created_at": "2021-05-14T22:46:58.000Z"
        },
        {
            "id": 3066,
            "username": "raymondh",
            "tweet_id": "1393331948286668800",
            "tweet_text": "#Python diversion:  Once in a while you get a good algorithmic question on StackOverflow. This one was fun.\n\nCompute the intersection of multiple sorted lists without using sets.  Ideally aim for O(n) time, minimal memory use, and a single pass over data.\n\nhttps://t.co/ta1RD4db6N",
            "tweet_media": "[]",
            "tweet_conversation_id": "1393331948286668800",
            "tweet_type": "Others",
            "created_at": "2021-05-14T22:26:37.000Z"
        },
        {
            "id": 3067,
            "username": "raymondh",
            "tweet_id": "1392565989993193472",
            "tweet_text": "In the software context where I want to use it, Extensible is likely the correct word.\n\nBut to my ear it sounds and feels a little off.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392177673581985792",
            "tweet_type": "Others",
            "created_at": "2021-05-12T19:42:59.000Z"
        },
        {
            "id": 3068,
            "username": "raymondh",
            "tweet_id": "1392560303242547201",
            "tweet_text": "To emulate list(data)[-n : ], use this recipe:\n\ndef tail(n, iterable):\n    # tail(3, 'ABCDEFG') --&gt; E F G\n    return iter(collections.deque(iterable, maxlen=n))\n\nThis keeps no more than n items in memory.\n\nIt reads entire input and is not lazy. Don't use with infinite inputs.\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392560300952494083",
            "tweet_type": "Others",
            "created_at": "2021-05-12T19:20:23.000Z"
        },
        {
            "id": 3069,
            "username": "raymondh",
            "tweet_id": "1392560302504386562",
            "tweet_text": "Performance notes:\n\nThe emulation still reads the entire input iterable; otherwise, there's no way to detect the endpoint.\n\nAlso, n elements are kept in memory by tee().\n\nIt works lazily and won't fail if the input happens to be infinite.\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392560300952494083",
            "tweet_type": "Others",
            "created_at": "2021-05-12T19:20:23.000Z"
        },
        {
            "id": 3070,
            "username": "raymondh",
            "tweet_id": "1392560301736828929",
            "tweet_text": "Example:\n\n    &gt;&gt;&gt; data = (x**2 for x in range(10))\n    &gt;&gt;&gt; list(remove_last(data, 3))\n    [0, 1, 4, 9, 16, 25, 36]\n\nGives the same answer as:\n\n    &gt;&gt;&gt; data = (x**2 for x in range(10))\n    &gt;&gt;&gt; list(data)[ : -3]\n    [0, 1, 4, 9, 16, 25, 36]\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392560300952494083",
            "tweet_type": "Others",
            "created_at": "2021-05-12T19:20:23.000Z"
        },
        {
            "id": 3071,
            "username": "raymondh",
            "tweet_id": "1392560300952494083",
            "tweet_text": "#Python tip:  Emulating negative slice offsets with iterators is awkward because the total length isn't known in advance.  But it is possible:\n\ndef remove_last(it, n):\n    # Like s[ : -n]\n    t1, t2 = tee(it, 2)\n    list(islice(t2, n))\n    return (x for x, y in zip(t1, t2)\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392560300952494083",
            "tweet_type": "Python tips",
            "created_at": "2021-05-12T19:20:22.000Z"
        },
        {
            "id": 3072,
            "username": "raymondh",
            "tweet_id": "1392222825994354688",
            "tweet_text": "Extensible (adj):  That which can be extensed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392177673581985792",
            "tweet_type": "Others",
            "created_at": "2021-05-11T20:59:22.000Z"
        },
        {
            "id": 3073,
            "username": "raymondh",
            "tweet_id": "1392209046359314432",
            "tweet_text": "ISTM programmers have conflated the original meaning of these words, the Java EXTENDS keyword or writing EXTENSIONS for example.\n\nPossibly this arose because tenses, conjugations, and participles of TO EXTEND are plentiful, but there isn't a good verb form of Extensible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392177673581985792",
            "tweet_type": "Others",
            "created_at": "2021-05-11T20:04:37.000Z"
        },
        {
            "id": 3074,
            "username": "raymondh",
            "tweet_id": "1392203994819223553",
            "tweet_text": "Not to be confused with Expendable.  \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392177673581985792",
            "tweet_type": "Others",
            "created_at": "2021-05-11T19:44:32.000Z"
        },
        {
            "id": 3075,
            "username": "raymondh",
            "tweet_id": "1392177673581985792",
            "tweet_text": "With respect to software, do you think Extendible, Extensible, and Extendable are interchangeable synonyms?\n\nAre there situations where one makes more sense than another?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1392177673581985792",
            "tweet_type": "Others",
            "created_at": "2021-05-11T17:59:57.000Z"
        },
        {
            "id": 3076,
            "username": "raymondh",
            "tweet_id": "1391909288235257856",
            "tweet_text": "Guido has said that it was a mistake for the += operator on lists to accept any iterable.  This is a common mistake:\n\n&gt;&gt;&gt; s = ['one', 'three']\n&gt;&gt;&gt; s += 'three'\n&gt;&gt;&gt; s\n['one', 'three', 't', 'h', 'r', 'e', 'e']\n\nIt should have been restricted to only take other lists.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1391909286599544833",
            "tweet_type": "Others",
            "created_at": "2021-05-11T00:13:29.000Z"
        },
        {
            "id": 3077,
            "username": "raymondh",
            "tweet_id": "1391909287400677377",
            "tweet_text": "s = [10, 20, 30]\n\ndef add_on(t):\n    s.extend(t)           # this works\n\ndef add_on(t):\n    s +=t           # this doesn't work\n\ndef add_on(t):\n    global s\n    s +=t           # this works",
            "tweet_media": "[]",
            "tweet_conversation_id": "1391909286599544833",
            "tweet_type": "Others",
            "created_at": "2021-05-11T00:13:29.000Z"
        },
        {
            "id": 3078,
            "username": "raymondh",
            "tweet_id": "1391909286599544833",
            "tweet_text": "#Python factlet:  The += operator on a list works about the same as the extend() method; however, the operator also makes an assignment back to the target variable.\n\n   s += t\n\nWorks like:\n\n   s.extend(t)\n   s = s\n\nDepending on the namespace for s, this can make a difference.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1391909286599544833",
            "tweet_type": "Others",
            "created_at": "2021-05-11T00:13:29.000Z"
        },
        {
            "id": 3079,
            "username": "raymondh",
            "tweet_id": "1391499966036672512",
            "tweet_text": "Now with the same equipment devise a test to determine whether the gravity you feel is the result of being in a centrifuge.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1391458376672894976",
            "tweet_type": "Others",
            "created_at": "2021-05-09T21:06:59.000Z"
        },
        {
            "id": 3080,
            "username": "raymondh",
            "tweet_id": "1391498891250438144",
            "tweet_text": "MacGyver pop quiz:   You wake up in a sealed room and notice that gravity seems \u201coff\u201d.  Given a stopwatch and a homemade pendulum of known length and unknown mass, compute a reasonably accurate estimate of the force of gravity.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1391458376672894976",
            "tweet_type": "Others",
            "created_at": "2021-05-09T21:02:43.000Z"
        },
        {
            "id": 3081,
            "username": "raymondh",
            "tweet_id": "1391458376672894976",
            "tweet_text": "Just finished Andy Weir's new book, \"Hail Mary.\"\n\nVerdict:  Definitely worth it!  \ud83d\ude04\n\nLike \"The Martian\", it's fast paced and full of science, engineering, and problem solving.\n\nFor maximum enjoyment, have a calculator at hand and check the math for yourself.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1391458376672894976",
            "tweet_type": "Others",
            "created_at": "2021-05-09T18:21:43.000Z"
        },
        {
            "id": 3082,
            "username": "raymondh",
            "tweet_id": "1389790630633611266",
            "tweet_text": "Just started reading Andy Weir's new book:  Hail Mary.\n\nOn page 5, he casually slipped in Euler's identity.  This is auspicious.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1389790630633611266",
            "tweet_type": "Others",
            "created_at": "2021-05-05T03:54:42.000Z"
        },
        {
            "id": 3083,
            "username": "raymondh",
            "tweet_id": "1389278015406759938",
            "tweet_text": "#Python tip:  The list.insert() method can add elements one at a time, but slicing can more clearly and efficiently insert multiple elements at a time.\n\n&gt;&gt;&gt; s = ['three', 'four', 'five']\n&gt;&gt;&gt; s[0:0] = ['one', 'two']\n&gt;&gt;&gt; s\n['one', 'two', 'three', 'four', 'five']",
            "tweet_media": "[]",
            "tweet_conversation_id": "1389278015406759938",
            "tweet_type": "Python tips",
            "created_at": "2021-05-03T17:57:45.000Z"
        },
        {
            "id": 3084,
            "username": "raymondh",
            "tweet_id": "1388571764544851971",
            "tweet_text": "Reason behind #Python's str.split() API:\n\n\"People seem to mentally model field-splitting as a single concept even though more than one algorithm is involved.\"\n\nhttps://t.co/5DiGuJhD5G",
            "tweet_media": "[]",
            "tweet_conversation_id": "1388571764544851971",
            "tweet_type": "Others",
            "created_at": "2021-05-01T19:11:21.000Z"
        },
        {
            "id": 3085,
            "username": "raymondh",
            "tweet_id": "1388234796447387648",
            "tweet_text": "For non-dunder methods, people readily create bound methods without guilt:\n\n    seed = prng.seed\n    sorted(words, key=str.casefold)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1388234795713404928",
            "tweet_type": "Others",
            "created_at": "2021-04-30T20:52:22.000Z"
        },
        {
            "id": 3086,
            "username": "raymondh",
            "tweet_id": "1388234795713404928",
            "tweet_text": "#Python psychology quirk:  The dunder naming convention makes people feel icky when calling them directly.  This natural aversion steers people away from using them as bound methods:\n\n    map(parent.__getitem__, children)\n    fetch = data_stream.__next__",
            "tweet_media": "[]",
            "tweet_conversation_id": "1388234795713404928",
            "tweet_type": "Others",
            "created_at": "2021-04-30T20:52:22.000Z"
        },
        {
            "id": 3087,
            "username": "raymondh",
            "tweet_id": "1387910547648114688",
            "tweet_text": "Computer experts on TV and Movies seem to magically know things.  You don't see them reading books, attending conferences, contributing to open source, debugging code, taking classes, working collaboratively, refactoring, or using StackOverflow.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1387910547648114688",
            "tweet_type": "Others",
            "created_at": "2021-04-29T23:23:55.000Z"
        },
        {
            "id": 3088,
            "username": "raymondh",
            "tweet_id": "1387166860190175232",
            "tweet_text": "BTW, that code should be:\n\ndef shuffle(arr):\n    for i in reversed(range(1, len(arr))):\n        j = randrange(i + 1)\n        arr[i], arr[j] = arr[j], arr[i]\n\nI left-off the +1 in the earlier tweet.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1387131523342635009",
            "tweet_type": "Others",
            "created_at": "2021-04-27T22:08:46.000Z"
        },
        {
            "id": 3089,
            "username": "raymondh",
            "tweet_id": "1387161864346374145",
            "tweet_text": "#Python oddity:  super() treat doesn't treat descriptors all descriptors the same.  It will __get__() but not __set__ () and __delete__().\n\nhttps://t.co/ee38iFE05j",
            "tweet_media": "[]",
            "tweet_conversation_id": "1387161864346374145",
            "tweet_type": "Others",
            "created_at": "2021-04-27T21:48:55.000Z"
        },
        {
            "id": 3090,
            "username": "raymondh",
            "tweet_id": "1387154699426488320",
            "tweet_text": "Here's an alternative that runs left-to-right:\n\ndef shuffle(arr):\n    for i in range(1, len(arr)):\n        j = randrange(i + 1)\n        arr[i], arr[j] = arr[j], arr[i]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1387131523342635009",
            "tweet_type": "Others",
            "created_at": "2021-04-27T21:20:27.000Z"
        },
        {
            "id": 3091,
            "username": "raymondh",
            "tweet_id": "1387152418111066113",
            "tweet_text": "https://t.co/MbisQnghA7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1387131523342635009",
            "tweet_type": "Others",
            "created_at": "2021-04-27T21:11:23.000Z"
        },
        {
            "id": 3092,
            "username": "raymondh",
            "tweet_id": "1387131523342635009",
            "tweet_text": "Algorithm question:   Does anyone know why the Fisher\u2013Yates shuffle is typically presented with a decreasing loop index?\n\ndef shuffle(arr):\n    for i in reversed(range(1, len(arr))):\n        j = randrange(i)\n        arr[i], arr[j] = arr[j], arr[i]\n\nThe reversed() isn't necessary.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1387131523342635009",
            "tweet_type": "Others",
            "created_at": "2021-04-27T19:48:21.000Z"
        },
        {
            "id": 3093,
            "username": "raymondh",
            "tweet_id": "1386503547890503682",
            "tweet_text": "Timings for:\n\n    s = {Wrecker() : i for i in range(n)}\n\n511 \u00b5s     # n = 100 \n44.8 ms    # n = 1,000\n4.34 s     # n = 10,000\n9 min 50s  # n = 100,000\n\nCompare with:\n\n    s = {object() : i for i in range(100000)}\n\nwhich only takes 17 ms.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1386503546632249344",
            "tweet_type": "Others",
            "created_at": "2021-04-26T02:13:00.000Z"
        },
        {
            "id": 3094,
            "username": "raymondh",
            "tweet_id": "1386503546632249344",
            "tweet_text": "#Python factlet:  Here's an easy way to wreck hash table performance:\n    \nclass Wrecker:\n    def __eq__(self, other):\n        return False\n    def __hash__(self):\n        return 0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1386503546632249344",
            "tweet_type": "Others",
            "created_at": "2021-04-26T02:13:00.000Z"
        },
        {
            "id": 3095,
            "username": "raymondh",
            "tweet_id": "1386464708593557506",
            "tweet_text": "Another recurring the theme is that whenever adults behave badly, the children suffer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385694283114565635",
            "tweet_type": "Others",
            "created_at": "2021-04-25T23:38:40.000Z"
        },
        {
            "id": 3096,
            "username": "raymondh",
            "tweet_id": "1385697860931362817",
            "tweet_text": "Even the morally depraved like Detective Miller have their limits for how much badness they are willing to be part of.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385694283114565635",
            "tweet_type": "Others",
            "created_at": "2021-04-23T20:51:29.000Z"
        },
        {
            "id": 3097,
            "username": "raymondh",
            "tweet_id": "1385697860138659842",
            "tweet_text": "At some point, all of the major characters have turned on their leaders.  James Holden wouldn't ignore a distress call. Fred Johnson and Bobbie Draper both turned on their respective militaries.  Amos is always willing to administer blunt force trauma but only for good guys :-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385694283114565635",
            "tweet_type": "Others",
            "created_at": "2021-04-23T20:51:29.000Z"
        },
        {
            "id": 3098,
            "username": "raymondh",
            "tweet_id": "1385694283114565635",
            "tweet_text": "Just finished Season 2 of The Expanse.\n\nAn interesting, relevant, and recurring moral theme is that it is not sufficient to be good at your job.  You must also figure-out whether the people you're working for are good guys or bad guys.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385694283114565635",
            "tweet_type": "Others",
            "created_at": "2021-04-23T20:37:16.000Z"
        },
        {
            "id": 3099,
            "username": "raymondh",
            "tweet_id": "1385295871638528002",
            "tweet_text": "A year ago, I wrote a PR for this but it didn't garner any interest\n\nhttps://t.co/UUdNdmrPhk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-22T18:14:08.000Z"
        },
        {
            "id": 3100,
            "username": "raymondh",
            "tweet_id": "1385295870548058112",
            "tweet_text": "Every example I can think of is a bit contrived.  Here's my latest attempt:\n\nmain_plan, backup_plan = sample(plans, k=2,\n    weights=probabilty_of_success)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-22T18:14:07.000Z"
        },
        {
            "id": 3101,
            "username": "raymondh",
            "tweet_id": "1385295869390458881",
            "tweet_text": "So far, the only reasons to add it are:\n\n* numpy has it already\n* it is tricky to implement own your own\n   in a way that is efficient\n\nThe reasons against:\n\n* it seems to be a really confusing concept\n* no strong use cases have emerged\n* no one has ever asked for this",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-22T18:14:07.000Z"
        },
        {
            "id": 3102,
            "username": "raymondh",
            "tweet_id": "1385295868220248064",
            "tweet_text": "What I'm trying to figure-out is whether anyone actually needs an API for weighted sampling without replacement.\n\nNote, we already have an API for \"urn\" problems:\n\n  sample(colors, k=2, counts=[7, 5, 3])\n\nBut that isn't same thing because the same color can be chosen twice.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-22T18:14:07.000Z"
        },
        {
            "id": 3103,
            "username": "raymondh",
            "tweet_id": "1385295866999676928",
            "tweet_text": "The existing #Python sampling with replacement API:\n\n  choices(colors, k=2, weights=weights)\n\ndoes the same as this in #numpy:\n\n  np.random.choice(colors, 2, p=weights, replace=True)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-22T18:14:06.000Z"
        },
        {
            "id": 3104,
            "username": "raymondh",
            "tweet_id": "1385295865640734722",
            "tweet_text": "Given:\n   colors = ['red', 'green', 'blue']\n   weights = [0.5, 0.3, 0.2]\n\nThe proposed #Python sampling without replacement API:\n\n  sample(colors, k=2, weights=weights)\n\nwould do the same as this in #numpy:\n\n  np.random.choice(colors, 2, p=weights, replace=False)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-22T18:14:06.000Z"
        },
        {
            "id": 3105,
            "username": "raymondh",
            "tweet_id": "1385045021057961987",
            "tweet_text": "The \"weights\" parameter would have the same meaning as it does for random.choices(). It is the relative likelihood of being chosen.\n\nrandom.choices() makes selections with replacement.\n\nrandom.sample() makes selections without replacement.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-22T01:37:20.000Z"
        },
        {
            "id": 3106,
            "username": "raymondh",
            "tweet_id": "1385018981375889411",
            "tweet_text": "If #Python's random sampling without replacement had optional weights, what would you use it for?\n\nMy only example is choosing tributes for the hunger games.\n\n&gt;&gt;&gt; sample(['katniss', 'prim', 'gale', 'peeta'] , weights=[20, 1, 42, 10], k=2)\n['prim', 'peeta']",
            "tweet_media": "[]",
            "tweet_conversation_id": "1385018981375889411",
            "tweet_type": "Others",
            "created_at": "2021-04-21T23:53:52.000Z"
        },
        {
            "id": 3107,
            "username": "raymondh",
            "tweet_id": "1384525830471131137",
            "tweet_text": "#Python tip:  The \"counts\" argument for random.sample() makes it easy to model classic \u201curn problems\u201d where balls are chosen without replacement.\n\n&gt;&gt;&gt; sample(['white', 'blue', 'red'], counts=[8, 6, 9], k=6)\n['red', 'red', 'white', 'white', 'blue', 'red']\n\nhttps://t.co/Rpc06K8Gr2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1384525830471131137",
            "tweet_type": "Python tips",
            "created_at": "2021-04-20T15:14:15.000Z"
        },
        {
            "id": 3108,
            "username": "raymondh",
            "tweet_id": "1382894553473052677",
            "tweet_text": "#Python tip:  Fraction.limit_denominator() is useful for making rational approximations of real numbers:\n\n&gt;&gt;&gt; Fraction(pi).limit_denominator(10)\nFraction(22, 7)\n&gt;&gt;&gt; Fraction(pi).limit_denominator(10_000)\nFraction(355, 113)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1382894553473052677",
            "tweet_type": "Python tips",
            "created_at": "2021-04-16T03:12:09.000Z"
        },
        {
            "id": 3109,
            "username": "raymondh",
            "tweet_id": "1382172793865834499",
            "tweet_text": "#Python news:  Next week, we'll reach 300,000 projects in the #PyPI package index.\n\nThat's up from 200,000 on 14 Oct 2019 and 100,000 on 4 Mar 2017.\n\nWhat is your prediction for when we'll reach 400,000? https://t.co/KeiSDCLc24",
            "tweet_media": "[]",
            "tweet_conversation_id": "1382172793865834499",
            "tweet_type": "Others",
            "created_at": "2021-04-14T03:24:08.000Z"
        },
        {
            "id": 3110,
            "username": "raymondh",
            "tweet_id": "1380617138411425792",
            "tweet_text": "Probably, we should at least change the value of hash(math.nan) to not collide with hash(0).\n\n&gt;&gt;&gt; hash(math.nan) == hash(0)\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1380602207045787649",
            "tweet_type": "Others",
            "created_at": "2021-04-09T20:22:31.000Z"
        },
        {
            "id": 3111,
            "username": "raymondh",
            "tweet_id": "1380602207783936004",
            "tweet_text": "We could mitigate this issue by either:\n\n1) making the hash() of NaNs equal to their id()\n2) making NaNs into singletons\n\nHowever, both approaches have their downsides.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1380602207045787649",
            "tweet_type": "Others",
            "created_at": "2021-04-09T19:23:11.000Z"
        },
        {
            "id": 3112,
            "username": "raymondh",
            "tweet_id": "1380602207045787649",
            "tweet_text": "#Python irritant:   Instances float('NaN') all have the same hash value but never compare as equal.\n\nThis causes catastrophic linear pileups in dict and set hash tables.\n\n&gt;&gt;&gt; nans = [float('NaN') for i in range(1000)]\n&gt;&gt;&gt; len(set(nans))\n1000\n&gt;&gt;&gt; len(set(map(hash, nans)))\n1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1380602207045787649",
            "tweet_type": "Others",
            "created_at": "2021-04-09T19:23:11.000Z"
        },
        {
            "id": 3113,
            "username": "raymondh",
            "tweet_id": "1380240448606756865",
            "tweet_text": "#Python tip:  Database queries are especially fast if you copy the database into RAM:\n\nimport sqlite3\nsource = sqlite3.connect('main_database.db')\ndest = sqlite3.connect(':memory:')\nsource.backup(dest)\n\nhttps://t.co/ydIDVrAHqt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1380240448606756865",
            "tweet_type": "Python tips",
            "created_at": "2021-04-08T19:25:41.000Z"
        },
        {
            "id": 3114,
            "username": "raymondh",
            "tweet_id": "1379520633244033025",
            "tweet_text": "These API differences reflect the capabilities of the underlying implementations.\n\ndict() keeps keys in space-efficient sequence, so only right-side appends and pops are fast.\n\nOrderedDict uses a regular dict plus a doubly-linked list, the extra operations are fast.\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1379520630899449856",
            "tweet_type": "Others",
            "created_at": "2021-04-06T19:45:23.000Z"
        },
        {
            "id": 3115,
            "username": "raymondh",
            "tweet_id": "1379520632497442816",
            "tweet_text": "OrderedDict can efficiently move entries to either end without a hash table update.\n\n&gt;&gt;&gt; d = OrderedDict(red=1, green=2, blue=3)\n\n&gt;&gt;&gt; d.move_to_end('green')\n&gt;&gt;&gt; list(d)\n['red', 'blue', 'green']\n\n&gt;&gt;&gt; d.move_to_end('green', last=False)\n&gt;&gt;&gt; list(d)\n['green', 'red', 'blue']\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1379520630899449856",
            "tweet_type": "Others",
            "created_at": "2021-04-06T19:45:23.000Z"
        },
        {
            "id": 3116,
            "username": "raymondh",
            "tweet_id": "1379520631692161026",
            "tweet_text": "In contrast, OrderedDict.popitem() supports both FIFO and LIFO extraction of key/value pairs.\n\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; d = OrderedDict(red=1, green=2, blue=3)\n\n&gt;&gt;&gt; d.popitem(last=False)  # FIFO\n('red', 1)\n\n&gt;&gt;&gt; d.popitem()  # LIFO\n('blue', 3)\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1379520630899449856",
            "tweet_type": "Others",
            "created_at": "2021-04-06T19:45:23.000Z"
        },
        {
            "id": 3117,
            "username": "raymondh",
            "tweet_id": "1379520630899449856",
            "tweet_text": "#Python factlet:  The dict.popitem() method is guaranteed to remove key/value pairs in LIFO order.\n\n&gt;&gt;&gt; d = dict(red=1, green=2, blue=3)\n&gt;&gt;&gt; d.popitem()\n('blue', 3)\n&gt;&gt;&gt; d.popitem()\n('green', 2)\n&gt;&gt;&gt; d.popitem()\n('red', 1)\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1379520630899449856",
            "tweet_type": "Others",
            "created_at": "2021-04-06T19:45:23.000Z"
        },
        {
            "id": 3118,
            "username": "raymondh",
            "tweet_id": "1379222005598146560",
            "tweet_text": "On my M1, deque.rotate() is twice as fast on my Mac with Intel silicon.  \n\nUsing Python3.9, a 500 step rotation of a 1000 element deque takes 138 nsec.\n\nThe throughput is 0.28 ns per object pointer.  Not bad!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1378783853087612931",
            "tweet_type": "Others",
            "created_at": "2021-04-05T23:58:45.000Z"
        },
        {
            "id": 3119,
            "username": "raymondh",
            "tweet_id": "1379206836935516161",
            "tweet_text": "This is comparable to @lemire recently discovering that mul and umulh are fused together.\n\nApple did a fine job with their new silicon.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1379204180527607809",
            "tweet_type": "Others",
            "created_at": "2021-04-05T22:58:29.000Z"
        },
        {
            "id": 3120,
            "username": "raymondh",
            "tweet_id": "1379204180527607809",
            "tweet_text": "Amazingly, the Apple M-1 chip fuses together division and modulo calculations.\n\nDivision has a single instruction.  Modulo requires an additional instruction.  But both computations run in the same total time.\n\nhttps://t.co/0Io6T3Nqa7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1379204180527607809",
            "tweet_type": "Others",
            "created_at": "2021-04-05T22:47:55.000Z"
        },
        {
            "id": 3121,
            "username": "raymondh",
            "tweet_id": "1378783853087612931",
            "tweet_text": "#Python nerd happiness:  On the Apple M1, the inner loop for deque.rotate() moves 4 pointers at a time!\n\nLBB24_20:\n    ldpq0, q1, [x14, #-16]\n    stpq0, q1, [x13, #-16]\n    addx13, x13, #32\n    addx14, x14, #32\n    subsx15, x15, #4\n    b.neLBB24_20",
            "tweet_media": "[]",
            "tweet_conversation_id": "1378783853087612931",
            "tweet_type": "Others",
            "created_at": "2021-04-04T18:57:41.000Z"
        },
        {
            "id": 3122,
            "username": "raymondh",
            "tweet_id": "1378111105457815554",
            "tweet_text": "Teaching tip for non-programmers:  Madlibs are a great way to explain #Python grammar constraints and what a SyntaxError means.\n\ndef \u00abvarname\u00bb():\n    return \u00abexpression\u00bb\n\nfor \u00abvarname\u00bb in \u00abiterable\u00bb:\n    if \u00abcond\u00bb:\n        \u00abvarname\u00bb = \u00abexpression\u00bb\n\nhttps://t.co/NwkcAnIS7v",
            "tweet_media": "[]",
            "tweet_conversation_id": "1378111105457815554",
            "tweet_type": "Others",
            "created_at": "2021-04-02T22:24:26.000Z"
        },
        {
            "id": 3123,
            "username": "raymondh",
            "tweet_id": "1377733692219555841",
            "tweet_text": "This is why user testing is important.\n\nThe problem being solved by the programmer may not reflect the actual problem as experienced by the user.\n\nA solution that is obvious to the person who wrote the feature may be opaque to user who has a different mental model.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1377733690676051970",
            "tweet_type": "Others",
            "created_at": "2021-04-01T21:24:43.000Z"
        },
        {
            "id": 3124,
            "username": "raymondh",
            "tweet_id": "1377733691451961344",
            "tweet_text": "Misfeatures:\n\n* It is opt-out rather than opt-in\n* No clean way to disable it.\n* It is unusual.\n* What to do isn't obvious.\n* A single click does nothing. \n* Triggers based on line count rather than line width (IDLE gets slow when wrapping long lines).\n* No re-squeeze option.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1377733690676051970",
            "tweet_type": "Others",
            "created_at": "2021-04-01T21:24:43.000Z"
        },
        {
            "id": 3125,
            "username": "raymondh",
            "tweet_id": "1377733690676051970",
            "tweet_text": "When teaching #Python with IDLE, my nemesis is a feature called the Squeezer.  Almost every week, it trips-up students and I have to show them how to disable it.\n\nA student doing homework types:\n&gt;&gt;&gt; help(str)\n\nThe next they day, they report, \"I couldn't see anything!\"\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1377733690676051970",
            "tweet_type": "Others",
            "created_at": "2021-04-01T21:24:43.000Z"
        },
        {
            "id": 3126,
            "username": "raymondh",
            "tweet_id": "1375486230821888004",
            "tweet_text": "3/ The important underlying rule from #Python PEP 634 is:\n\nA match statement may have at most one irrefutable case block, and it must be last.\n\nhttps://t.co/F7mFNrU1Gg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375486229160988677",
            "tweet_type": "Others",
            "created_at": "2021-03-26T16:34:07.000Z"
        },
        {
            "id": 3127,
            "username": "raymondh",
            "tweet_id": "1375486230033362945",
            "tweet_text": "2/ #Python code example:\n\nmatch return_code:\n        case 200: ...\n        case 304: ...\ncase NOT_FOUND: ...\ncase _: raise ValueError\n\nSyntaxError: name capture 'NOT_FOUND' makes remaining patterns unreachable",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375486229160988677",
            "tweet_type": "Others",
            "created_at": "2021-03-26T16:34:07.000Z"
        },
        {
            "id": 3128,
            "username": "raymondh",
            "tweet_id": "1375486229160988677",
            "tweet_text": "1/ #Python 3.10 tip:  When pattern matching, include a default match with \"case _\".\n\nThen if someone mistakenly introduces a capture variable, a syntax error will be raised when the module is imported.\n\nIt also protects against unintentional fall through for unhandled cases.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375486229160988677",
            "tweet_type": "Python tips",
            "created_at": "2021-03-26T16:34:06.000Z"
        },
        {
            "id": 3129,
            "username": "raymondh",
            "tweet_id": "1375237454018473984",
            "tweet_text": "5/ The lxml docs section title \"Elements are lists\" should expanded to say \"kinda, sorta, but not\" \ud83d\ude09\n\nhttps://t.co/K6yitxBonn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375195718361620486",
            "tweet_type": "Others",
            "created_at": "2021-03-26T00:05:34.000Z"
        },
        {
            "id": 3130,
            "username": "raymondh",
            "tweet_id": "1375217612758544384",
            "tweet_text": "The #Python super-considered-super video now has over 100,000 unique views.   The associated blog post is over a half million.\n\nThis seems to be an area of great interest. https://t.co/wssChWQLCd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375217612758544384",
            "tweet_type": "Others",
            "created_at": "2021-03-25T22:46:43.000Z"
        },
        {
            "id": 3131,
            "username": "raymondh",
            "tweet_id": "1375195720802729984",
            "tweet_text": "4/ Practical use of this knowledge:  Don't use random.shuffle() with lxml Element instances. \n\nInstead, either use Python's ElementTree or do the shuffling outside of the Element instance:\n\n    root[:] = sample(list(root), k=len(root))\n\nhttps://t.co/AWRKs3VqM1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375195718361620486",
            "tweet_type": "Others",
            "created_at": "2021-03-25T21:19:44.000Z"
        },
        {
            "id": 3132,
            "username": "raymondh",
            "tweet_id": "1375195719955402753",
            "tweet_text": "3/ lxml's behavior is super surprising because it is so different from other mutable sequences like lists.\n\nHowever the #Python standard library ElementTree also surprised people because it didn't make a copy.  So, changes to root[0] would also show-up in root[1].",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375195718361620486",
            "tweet_type": "Others",
            "created_at": "2021-03-25T21:19:44.000Z"
        },
        {
            "id": 3133,
            "username": "raymondh",
            "tweet_id": "1375195719145902080",
            "tweet_text": "2/ #Python code:\n\nfrom lxml.etree import Element\n\nroot = Element('outer')\nroot.append(Element('zero'))\nroot.append(Element('one'))\nroot.append(Element('two'))\nroot[0] = root[1]\nprint([e.tag for e in root])\n\n# lxml prints: ['one', 'two']\n# ElementTree prints: ['one', 'one', 'two']",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375195718361620486",
            "tweet_type": "Others",
            "created_at": "2021-03-25T21:19:44.000Z"
        },
        {
            "id": 3134,
            "username": "raymondh",
            "tweet_id": "1375195718361620486",
            "tweet_text": "1/ TIL an essential difference between lxml and #Python's ElementTree:\n\n  elem[0] = elem[1]\n \nlxml will MOVE the element from position one to position zero, CHANGING the length of the outer element!?\n\nThe standard library is much more list like.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1375195718361620486",
            "tweet_type": "Others",
            "created_at": "2021-03-25T21:19:43.000Z"
        },
        {
            "id": 3135,
            "username": "raymondh",
            "tweet_id": "1374170505540816900",
            "tweet_text": "UX complaint: more than one airline can't cope with my son and I having the same first and last names (the middle names are different).\n\nYet again, booking two separate reservations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1374170505540816900",
            "tweet_type": "Others",
            "created_at": "2021-03-23T01:25:54.000Z"
        },
        {
            "id": 3136,
            "username": "raymondh",
            "tweet_id": "1373317619365814279",
            "tweet_text": "BTW, if you're against the proposed short, fast form, it would be helpful to know why.\n\nIn your view, what makes the map(str, data) form better?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1373315362062626823",
            "tweet_type": "Others",
            "created_at": "2021-03-20T16:56:50.000Z"
        },
        {
            "id": 3137,
            "username": "raymondh",
            "tweet_id": "1373315362863771655",
            "tweet_text": "Besides being more compact, the second form can be made more efficient than the first.\n\nStill there isn't yet a consensus on whether to proceed.\n\nSee https://t.co/nJ6ctHZS3S",
            "tweet_media": "[]",
            "tweet_conversation_id": "1373315362062626823",
            "tweet_type": "Others",
            "created_at": "2021-03-20T16:47:52.000Z"
        },
        {
            "id": 3138,
            "username": "raymondh",
            "tweet_id": "1373315362062626823",
            "tweet_text": "#Python user poll:  Would you like str.join() to work like print() and automatically coerce its arguments to strings?\n\nGiven:\n\n    data = [10, 20, 30, 40, 50]\n\nWhich do you prefer?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1373315362062626823",
            "tweet_type": "Others",
            "created_at": "2021-03-20T16:47:51.000Z"
        },
        {
            "id": 3139,
            "username": "raymondh",
            "tweet_id": "1372376415195205635",
            "tweet_text": "Even worse anti-pattern:\n\n&gt;&gt;&gt; {} == {**{}}\nTrue\n\nYuck!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1372376414184296448",
            "tweet_type": "Others",
            "created_at": "2021-03-18T02:36:49.000Z"
        },
        {
            "id": 3140,
            "username": "raymondh",
            "tweet_id": "1372376414184296448",
            "tweet_text": "#Python anti-pattern:  you can create an empty set with generalized argument unpacking:\n\n&gt;&gt;&gt; set() == {*()}\nTrue\n\nBut I don't like it at all.\n\nUse set() instead.\n\nUnless you're in an obfuscated code contest \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1372376414184296448",
            "tweet_type": "Others",
            "created_at": "2021-03-18T02:36:49.000Z"
        },
        {
            "id": 3141,
            "username": "raymondh",
            "tweet_id": "1371609236765995009",
            "tweet_text": "One part of the proposal may yet have a chance:\n\n   `x[*y]` including things like `x[a, *b, c]`\n\nThat part will likely be added to PEP 646, Variadic Generics.\n\nLike __class_getitem__(), that more modest proposal will be helpful for type annotations.\n\nhttps://t.co/VUkUCdaumk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1371606366331150336",
            "tweet_type": "Others",
            "created_at": "2021-03-15T23:48:19.000Z"
        },
        {
            "id": 3142,
            "username": "raymondh",
            "tweet_id": "1371606366331150336",
            "tweet_text": "#Python news:  PEP 637 was rejected by the Steering Council today, so __getitem__, __setitem__, and __delitem__ will not be adding support for keyword arguments.\n\nYou square brackets are safe \ud83d\ude09\n\nhttps://t.co/3iIezp6MIJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1371606366331150336",
            "tweet_type": "Others",
            "created_at": "2021-03-15T23:36:55.000Z"
        },
        {
            "id": 3143,
            "username": "raymondh",
            "tweet_id": "1371251901476392962",
            "tweet_text": "Histograms for the first, second, and third smallest: https://t.co/ly18elYDVt",
            "tweet_media": "[\"https://pbs.twimg.com/media/EweqVX9VEAMWHxD.jpg\", \"https://pbs.twimg.com/media/EweqVX6VIAEdfeL.jpg\"]",
            "tweet_conversation_id": "1371232788762877952",
            "tweet_type": "Others",
            "created_at": "2021-03-15T00:08:24.000Z"
        },
        {
            "id": 3144,
            "username": "raymondh",
            "tweet_id": "1371251128004841473",
            "tweet_text": "Today\u2019s results rolling five 20 sided dice and tracking the first, second, and third smallest.\n\nBox and whisker plots with black for actual and red for expected: https://t.co/t8F4ub7EL0",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ewepoc0UYAAOaqj.jpg\"]",
            "tweet_conversation_id": "1371232788762877952",
            "tweet_type": "Others",
            "created_at": "2021-03-15T00:05:20.000Z"
        },
        {
            "id": 3145,
            "username": "raymondh",
            "tweet_id": "1371232788762877952",
            "tweet_text": "Today's data science lesson for my son.  IQR interquartile ranges.\n\n#Python one-liners:\n\n&gt;&gt;&gt; quantiles([4, 4, 10, 11, 15, 7, 14, 12, 6])\n&gt;&gt;&gt; [5.0, 10.0, 13.0]\n\n&gt;&gt;&gt; quantiles(Counter({7:1, 9:2, 10:3, 11:1, 12:2, 14:1}).elements())\n[9.0, 10.0, 12.0]\n\nhttps://t.co/y1nL4vcXAn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1371232788762877952",
            "tweet_type": "Others",
            "created_at": "2021-03-14T22:52:27.000Z"
        },
        {
            "id": 3146,
            "username": "raymondh",
            "tweet_id": "1369798248639041539",
            "tweet_text": "It's pretty cool to hear a nine year old properly using the terms \"statistical anomaly\" and \"reversion to the mean\".  \n\n\ud83d\ude00",
            "tweet_media": "[]",
            "tweet_conversation_id": "1369774921010667520",
            "tweet_type": "Others",
            "created_at": "2021-03-10T23:52:06.000Z"
        },
        {
            "id": 3147,
            "username": "raymondh",
            "tweet_id": "1369795378543951875",
            "tweet_text": "Here's the output:\n\n{1: 2234,\n 2: 6135,\n 3: 8594,\n 4: 9915,\n 5: 9995,\n 6: 10399,\n 7: 9477,\n 8: 8967,\n 9: 8088,\n 10: 7068,\n 11: 5993,\n 12: 4577,\n 13: 3271,\n 14: 2428,\n 15: 1394,\n 16: 855,\n 17: 395,\n 18: 178,\n 19: 35,\n 20: 2}",
            "tweet_media": "[]",
            "tweet_conversation_id": "1369774921010667520",
            "tweet_type": "Others",
            "created_at": "2021-03-10T23:40:42.000Z"
        },
        {
            "id": 3148,
            "username": "raymondh",
            "tweet_id": "1369795262051360769",
            "tweet_text": "Here are the imports:\n\nfrom random import choices\nfrom collections import Counter\nfrom pprint import pprint",
            "tweet_media": "[]",
            "tweet_conversation_id": "1369774921010667520",
            "tweet_type": "Others",
            "created_at": "2021-03-10T23:40:14.000Z"
        },
        {
            "id": 3149,
            "username": "raymondh",
            "tweet_id": "1369795004776935425",
            "tweet_text": "Just finished.  Here\u2019s the final tally : https://t.co/ObJkX6ZoDO",
            "tweet_media": "[\"https://pbs.twimg.com/media/EwJ9SRCVEAM_dIj.jpg\"]",
            "tweet_conversation_id": "1369774921010667520",
            "tweet_type": "Others",
            "created_at": "2021-03-10T23:39:13.000Z"
        },
        {
            "id": 3150,
            "username": "raymondh",
            "tweet_id": "1369781121462902786",
            "tweet_text": "Running the histogram in #Python is faster but less satisfying than by hand.\n\nd20 = tuple(range(1, 21))\nwidth = 5\norder = 1\nn = 100_000\n\ndata = choices(d20, k = n + width - 1)\nhistogram = Counter(sorted(data[i: i+width])[order] for i in range(n))\npprint(dict(Counter(histogram)))",
            "tweet_media": "[]",
            "tweet_conversation_id": "1369774921010667520",
            "tweet_type": "Others",
            "created_at": "2021-03-10T22:44:03.000Z"
        },
        {
            "id": 3151,
            "username": "raymondh",
            "tweet_id": "1369774921010667520",
            "tweet_text": "Working with my 3rd grader on beta distributions.  This is his histogram for the second lowest of five 20-sided dice. https://t.co/94RIJQMBOg",
            "tweet_media": "[\"https://pbs.twimg.com/media/EwJrBuTVcAEmZIH.jpg\"]",
            "tweet_conversation_id": "1369774921010667520",
            "tweet_type": "Others",
            "created_at": "2021-03-10T22:19:25.000Z"
        },
        {
            "id": 3152,
            "username": "raymondh",
            "tweet_id": "1368997898382315520",
            "tweet_text": "#Python tip:  Ways to call methods on integers without tokenizing as a float:\n\n&gt;&gt;&gt; 23 .bit_length()   # space after the digits\n5\n&gt;&gt;&gt; (23).bit_length()   # parens\n5\n&gt;&gt;&gt; x=23; x.bit_length()  # variable\n5\n&gt;&gt;&gt; getattr(23, 'bit_length')()  # the hard way ;-)\n5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1368997898382315520",
            "tweet_type": "Python tips",
            "created_at": "2021-03-08T18:51:48.000Z"
        },
        {
            "id": 3153,
            "username": "raymondh",
            "tweet_id": "1367657741838213121",
            "tweet_text": "ISTM the number and duration of ads on YouTube is being dialed-up to an intolerable level, presumably in an effort to drive users to paying for premium access ($18 per month for the family plan).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367657741838213121",
            "tweet_type": "Others",
            "created_at": "2021-03-05T02:06:30.000Z"
        },
        {
            "id": 3154,
            "username": "raymondh",
            "tweet_id": "1367195786522419202",
            "tweet_text": "7/ It isn't perfect.  Subclassers have to make their own decisions about __slots__.  Harder to inspect with vars().  Doesn't work with cached_property(), you have the nest property() and cache() instead.\n\nBut mostly, I like __slots__.  \ud83d\ude00",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367195779954143232",
            "tweet_type": "Others",
            "created_at": "2021-03-03T19:30:51.000Z"
        },
        {
            "id": 3155,
            "username": "raymondh",
            "tweet_id": "1367195785599721472",
            "tweet_text": "6/ You can turn-off weak-referencing just by omitting '__weakref__' from the __slots__ list.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367195779954143232",
            "tweet_type": "Others",
            "created_at": "2021-03-03T19:30:51.000Z"
        },
        {
            "id": 3156,
            "username": "raymondh",
            "tweet_id": "1367195784572067846",
            "tweet_text": "5/ There are also speed and space benefits.\n\nPer Tools/scripts/var_access_benchmark.py:\n\n  17.7 nsread_instancevar\n  11.1 nsread_instancevar_slots\n\nSize for instances of Point as reported by sys.getsizeof(p):\n\n  152 bytes without __slots__\n   48 bytes without __slots__",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367195779954143232",
            "tweet_type": "Others",
            "created_at": "2021-03-03T19:30:50.000Z"
        },
        {
            "id": 3157,
            "username": "raymondh",
            "tweet_id": "1367195783540264960",
            "tweet_text": "4/ Just like classes in compiled OOP languages, __slots__ makes code clearer by listing all instance variables at the top.\n  \nIn Lib/fractions.py, the structure of the Fraction class is immediately apparent:\n\nclass Fraction:\n    __slots__ = ('_numerator', '_denominator')",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367195779954143232",
            "tweet_type": "Others",
            "created_at": "2021-03-03T19:30:50.000Z"
        },
        {
            "id": 3158,
            "username": "raymondh",
            "tweet_id": "1367195782126960642",
            "tweet_text": "3/ Create immutable objects with read-only properties.\n\nclass Point:\n  __slots__ = ('_x', '_y')\n\n  def __init__(self, x, y):\n      self._x = x\n      self._y = y\n\n  @property\n  def x(self):\n      return self._x\n\n  @property\n  def y(self):\n      return self._y\n\n  def hypot(self):",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367195779954143232",
            "tweet_type": "Others",
            "created_at": "2021-03-03T19:30:50.000Z"
        },
        {
            "id": 3159,
            "username": "raymondh",
            "tweet_id": "1367195780855918593",
            "tweet_text": "2/  Immediately detects misspelled attribute assignments.\n\nclass Vehicle:\n    __slots__ = ('id_number', 'make', 'model')\n\n&gt;&gt;&gt; auto = Vehicle()\n&gt;&gt;&gt; https://t.co/RJ4FsYVVkK_nubmer = 'VYE483814LQEX'\n    ...\nAttributeError: 'Vehicle' object has no attribute 'id_nubmer'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367195779954143232",
            "tweet_type": "Others",
            "created_at": "2021-03-03T19:30:50.000Z"
        },
        {
            "id": 3160,
            "username": "raymondh",
            "tweet_id": "1367195779954143232",
            "tweet_text": "1/  Controversial #Python opinion:  I really like __slots__.\n\n\ud83d\ude0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1367195779954143232",
            "tweet_type": "Others",
            "created_at": "2021-03-03T19:30:49.000Z"
        },
        {
            "id": 3161,
            "username": "raymondh",
            "tweet_id": "1366805959155224577",
            "tweet_text": "#Python 3.10 tip:  There is a new way to explicitly declare type aliases:\n \n   from typing import TypeAlias \n   Timestamp: TypeAlias = float\n\nFormerly, we just wrote:\n\n   Timestamp = float\n\nBut that was challenging to reliably identify as a type alias.\n\nhttps://t.co/8t7bDYOlLQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1366805959155224577",
            "tweet_type": "Python tips",
            "created_at": "2021-03-02T17:41:49.000Z"
        },
        {
            "id": 3162,
            "username": "raymondh",
            "tweet_id": "1366513514601275392",
            "tweet_text": "#Python has a new alpha release.  This is you big chance to get ahead of the game and experiment with pattern matching.\n\nGo get it! https://t.co/kHnXnnlZvP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1366513514601275392",
            "tweet_type": "Others",
            "created_at": "2021-03-01T22:19:45.000Z"
        },
        {
            "id": 3163,
            "username": "raymondh",
            "tweet_id": "1366136857939992578",
            "tweet_text": "Mostly, I can't think of a strong reason to do this, but there are some minor benefits:\n\n* Hide private attributes from vars().\n* Speed-up private attribute reads and writes.\n* Make required private attributes undeleteable.\n* Preclude an instance from being weakly referenced.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1366136856962736134",
            "tweet_type": "Others",
            "created_at": "2021-02-28T21:23:03.000Z"
        },
        {
            "id": 3164,
            "username": "raymondh",
            "tweet_id": "1366136856962736134",
            "tweet_text": "Interestingly, #Python allows '__dict__' in __slots__ and it works.\n\nclass C:\n    __slots__ = ['_x', '__dict__']\n    def __init__(self, x, y):\n        self._x = x\n        self.y = y\n\n&gt;&gt;&gt; c = C(4, 6)\n&gt;&gt;&gt; vars(c)\n{'y': 6}",
            "tweet_media": "[]",
            "tweet_conversation_id": "1366136856962736134",
            "tweet_type": "Others",
            "created_at": "2021-02-28T21:23:02.000Z"
        },
        {
            "id": 3165,
            "username": "raymondh",
            "tweet_id": "1365465916436140032",
            "tweet_text": "Welp, after one year of lockdown, today was the day it finally happened.  I left my microphone unmuted during a 10 minute break in a #Python training course.\n\nSo now a whole class heard me sing Willie Nelson's, \u201dGood hearted woman\u201d to my wife. \ud83d\ude32\n\n#lockdownfail #hotmike",
            "tweet_media": "[]",
            "tweet_conversation_id": "1365465916436140032",
            "tweet_type": "Others",
            "created_at": "2021-02-27T00:56:58.000Z"
        },
        {
            "id": 3166,
            "username": "raymondh",
            "tweet_id": "1364794072263626752",
            "tweet_text": "BTW, just because I announce these event doesn't mean I had any hand in proposing or approving these changes.\n\nIOW, don't shoot the messenger \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1364794069222707201",
            "tweet_type": "Others",
            "created_at": "2021-02-25T04:27:18.000Z"
        },
        {
            "id": 3167,
            "username": "raymondh",
            "tweet_id": "1364794071240249346",
            "tweet_text": "\u201cThe teacher will now show some practical real world examples, explaining the semantics of the feature in the shown library. At the time of writing these examples do not exist, \u2026\u201d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1364794069222707201",
            "tweet_type": "Others",
            "created_at": "2021-02-25T04:27:17.000Z"
        },
        {
            "id": 3168,
            "username": "raymondh",
            "tweet_id": "1364794070246125570",
            "tweet_text": "Other examples in the PEP:\n\n&gt;&gt;&gt; grid_position[x=3, y=5, z=8]\n&gt;&gt;&gt; rain_amount[time=0:12, location=location]\n&gt;&gt;&gt; matrix[row=20, col=40]\n&gt;&gt;&gt; ds[\"empty\"][lon=1:5, lat=6:] = 10\n\ndef function(value: MyType[T=int]):\n    \u2026\n\ndef __getitem__(self, index, *, direction='north'):\n    \u2026",
            "tweet_media": "[]",
            "tweet_conversation_id": "1364794069222707201",
            "tweet_type": "Others",
            "created_at": "2021-02-25T04:27:17.000Z"
        },
        {
            "id": 3169,
            "username": "raymondh",
            "tweet_id": "1364794069222707201",
            "tweet_text": "In #Python's near future, indexing will support keyword arguments.\n\nThese will be valid:\n\n&gt;&gt;&gt; val = x[1, 2, a=3, b=4]  # getitem\n&gt;&gt;&gt; val = x[*(1, 2), **{a=3, b=4}] # getitem\n&gt;&gt;&gt; x[1, 2, a=3, b=4] = val  # setitem\n&gt;&gt;&gt; del x[1, 2, a=3, b=4]    # delitem\n\nhttps://t.co/3iIezp6MIJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1364794069222707201",
            "tweet_type": "Others",
            "created_at": "2021-02-25T04:27:17.000Z"
        },
        {
            "id": 3170,
            "username": "raymondh",
            "tweet_id": "1364083020571975685",
            "tweet_text": "A single ExceptionGroup can cause several except* clauses to execute, but each such clause executes at most once (for all matching exceptions from the group) and each exception is either handled by exactly one clause (the first one that matches its type) or is reraised at the end",
            "tweet_media": "[]",
            "tweet_conversation_id": "1364083019414298624",
            "tweet_type": "Others",
            "created_at": "2021-02-23T05:21:50.000Z"
        },
        {
            "id": 3171,
            "username": "raymondh",
            "tweet_id": "1364083019414298624",
            "tweet_text": "In #Python's near future, you can raise groups of exceptions at a time.  A new grammar feature, except*, will allow multiple except clauses to match and execute.\n\nhttps://t.co/n4m9z5wKbR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1364083019414298624",
            "tweet_type": "Others",
            "created_at": "2021-02-23T05:21:49.000Z"
        },
        {
            "id": 3172,
            "username": "raymondh",
            "tweet_id": "1363654613933547524",
            "tweet_text": "\u201cI like to think\n(it has to be!)\nof a cybernetic ecology\nwhere we are free of our labors\nand joined back to nature,\nreturned to our mammal\nbrothers and sisters,\nand all watched over\nby machines of loving grace.\u201d\n\nhttps://t.co/pq1WkzWkNI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1363654613933547524",
            "tweet_type": "Others",
            "created_at": "2021-02-22T00:59:30.000Z"
        },
        {
            "id": 3173,
            "username": "raymondh",
            "tweet_id": "1361780586570948609",
            "tweet_text": "x \u27fc assign x = subject\n'x' \u27fc test subject == 'x'\nx.y \u27fc test subject == x.y\nx() \u27fc test isinstance(subject, x)\n{'x': 'y'} \u27fc test isinstance(subject, Mapping) and subject.get('x') == 'y'\n['x'] \u27fc test isinstance(subject, Sequence) and len(subject) == 1 and subject[0] == 'x'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1361780585635536897",
            "tweet_type": "Others",
            "created_at": "2021-02-16T20:52:47.000Z"
        },
        {
            "id": 3174,
            "username": "raymondh",
            "tweet_id": "1361780585635536897",
            "tweet_text": "Reading #Python's new match-case requires two key insights:\n\n\u2022 Nothing in a case clause behaves as it does elsewhere. In particular, expressions don't evaluate.\n\n\u2022 Pattern matching is driven entirely by syntax.\n\n(1 of 2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1361780585635536897",
            "tweet_type": "Others",
            "created_at": "2021-02-16T20:52:46.000Z"
        },
        {
            "id": 3175,
            "username": "raymondh",
            "tweet_id": "1360675588382412800",
            "tweet_text": "My advice on learning new #Python features:   Don't approach it from the \"I like it\" or \"I don't like it\" point of view. Once approved, it is just a fact of life, neither good nor bad.\n\nLearn it deeply and see where it fits or doesn't fit in your life. Then use as needed. \ud83d\ude42",
            "tweet_media": "[]",
            "tweet_conversation_id": "1360675588382412800",
            "tweet_type": "Others",
            "created_at": "2021-02-13T19:41:55.000Z"
        },
        {
            "id": 3176,
            "username": "raymondh",
            "tweet_id": "1360661368777568261",
            "tweet_text": "Here's a worked out example of #Python's new structural pattern matching:\n\nhttps://t.co/DaFkJgPSjY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1360661368777568261",
            "tweet_type": "Others",
            "created_at": "2021-02-13T18:45:24.000Z"
        },
        {
            "id": 3177,
            "username": "raymondh",
            "tweet_id": "1360395091458682883",
            "tweet_text": "I expect that syntax highlighters will need to get a little smarter to handle this.\n\nThis choice was necessity because \"case\" and \"match\" are both likely to already be used as variable or function names.  Making them keywords would break code.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1360395090477285377",
            "tweet_type": "Others",
            "created_at": "2021-02-13T01:07:19.000Z"
        },
        {
            "id": 3178,
            "username": "raymondh",
            "tweet_id": "1360395090477285377",
            "tweet_text": "#Python PEP 634 introduces a new grammar concept called soft keywords.\n\n \u201cThe match and case keywords are soft keywords, i.e. they are not reserved words in other grammatical contexts (including at the start of a line if there is no colon where expected).\u201d\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1360395090477285377",
            "tweet_type": "Others",
            "created_at": "2021-02-13T01:07:19.000Z"
        },
        {
            "id": 3179,
            "username": "raymondh",
            "tweet_id": "1360098079135858689",
            "tweet_text": "Only a little progress today on Chapter 2 of The Haskell School of Music.\n\nLearning a new language is fun but vacation presents compelling distractions like boogie boarding with my son. https://t.co/3LdnboNlIz",
            "tweet_media": "[\"https://pbs.twimg.com/media/EuAJ-xbUUAI3XEF.jpg\"]",
            "tweet_conversation_id": "1360098079135858689",
            "tweet_type": "Others",
            "created_at": "2021-02-12T05:27:06.000Z"
        },
        {
            "id": 3180,
            "username": "raymondh",
            "tweet_id": "1359966467328888834",
            "tweet_text": "Structural Pattern Matching is coming to #Python.\n\nThe best way to learn about it is to reading the adventure game tutorial.\n\nhttps://t.co/dtKR64mHJY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1359966467328888834",
            "tweet_type": "Others",
            "created_at": "2021-02-11T20:44:07.000Z"
        },
        {
            "id": 3181,
            "username": "raymondh",
            "tweet_id": "1359624991868817409",
            "tweet_text": "Am reading The Haskell School of Music while on vacation.   As of Chapter 1, it looks beautiful. Already we have a short function to harmonize a melody.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1359624991868817409",
            "tweet_type": "Others",
            "created_at": "2021-02-10T22:07:13.000Z"
        },
        {
            "id": 3182,
            "username": "raymondh",
            "tweet_id": "1358469668990644225",
            "tweet_text": "Of course, \"continue\" and \"break\" only make sense inside a loop:\n\nSyntaxError: 'continue' not properly in loop\nSyntaxError: 'break' outside loop\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1358469667627560961",
            "tweet_type": "Others",
            "created_at": "2021-02-07T17:36:22.000Z"
        },
        {
            "id": 3183,
            "username": "raymondh",
            "tweet_id": "1358469668235661312",
            "tweet_text": "The related error messages are:\n\nSyntaxError: 'return' outside function\nSyntaxError: 'yield' outside function\nSyntaxError: no binding for nonlocal 'x' found\nSyntaxError: import * only allowed at module level\nSyntaxError: nonlocal declaration not allowed at module level\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1358469667627560961",
            "tweet_type": "Others",
            "created_at": "2021-02-07T17:36:22.000Z"
        },
        {
            "id": 3184,
            "username": "raymondh",
            "tweet_id": "1358469667627560961",
            "tweet_text": "#Python factlets:   The \"return\" and \"yield\" keywords can only be used inside functions.  The \"nonlocal\" keyword can only be used in a nested scope.  In contract, a star import can only be used at the module level.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1358469667627560961",
            "tweet_type": "Others",
            "created_at": "2021-02-07T17:36:22.000Z"
        },
        {
            "id": 3185,
            "username": "raymondh",
            "tweet_id": "1357535423417839617",
            "tweet_text": "Also, imports are now faster for modules that have type annotations.\n\nThe annotations are initially loaded as strings and only evaluated later if needed.\n\nThe only downside is that it easy to forget to make the relevant typing imports.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1357478486647005187",
            "tweet_type": "Others",
            "created_at": "2021-02-05T03:44:01.000Z"
        },
        {
            "id": 3186,
            "username": "raymondh",
            "tweet_id": "1357526513315270659",
            "tweet_text": "Here are the timings:\n\nPython 3.9.1\n  14.3 nsread_instancevar\n  12.4 nsread_instancevar_slots\n\nPython 3.10.0a5\n  10.0 nsread_instancevar\n   6.5 nsread_instancevar_slots",
            "tweet_media": "[]",
            "tweet_conversation_id": "1357478486647005187",
            "tweet_type": "Others",
            "created_at": "2021-02-05T03:08:37.000Z"
        },
        {
            "id": 3187,
            "username": "raymondh",
            "tweet_id": "1357504860309000192",
            "tweet_text": "Also, I'm running Python on the build targeted for Apple Silicon.  The M1 chip gives another 1.5x to 1.7x speed-up.\n\nThat work was mostly done by Ronald Oussoren and Ned Deily with package specific contributions by people like Stefan Krah.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1357478486647005187",
            "tweet_type": "Others",
            "created_at": "2021-02-05T01:42:34.000Z"
        },
        {
            "id": 3188,
            "username": "raymondh",
            "tweet_id": "1357478487364231169",
            "tweet_text": "This work was mostly done by Pablo, Yury, and Guido.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1357478486647005187",
            "tweet_type": "Others",
            "created_at": "2021-02-04T23:57:46.000Z"
        },
        {
            "id": 3189,
            "username": "raymondh",
            "tweet_id": "1357478486647005187",
            "tweet_text": "#Python optimization news:  Inline caching has been a huge success. In 3.9, access to builtins and globals had sped-up considerably.  In 3.10, regular attribute access and access to __slots__ are also faster.   Most everyday Python programs will benefit.  This is a huge win.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1357478486647005187",
            "tweet_type": "Others",
            "created_at": "2021-02-04T23:57:46.000Z"
        },
        {
            "id": 3190,
            "username": "raymondh",
            "tweet_id": "1354853388207329280",
            "tweet_text": "Be thankful that you don't have to trim character sets using regular expressions:\n\n&gt;&gt;&gt; s = 'massachusetts'\n&gt;&gt;&gt; s.strip('stam')\n'chuse'\n&gt;&gt;&gt; https://t.co/wyz8py7yAs('^[stam]*(.*?)[stam]*$', s).group(1)\n'chuse'\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1354853387490086913",
            "tweet_type": "Others",
            "created_at": "2021-01-28T18:06:34.000Z"
        },
        {
            "id": 3191,
            "username": "raymondh",
            "tweet_id": "1354853387490086913",
            "tweet_text": "#Python tip:  The argument to lstrip() is a set of leading characters to be removed as many times as they occur:\n\n&gt;&gt;&gt; s = 'mississippi'\n&gt;&gt;&gt; s.lstrip('mis')\n'ppi'\n\nA more common need is to remove an exact match:\n\n&gt;&gt;&gt; s.removeprefix('mis')\n'sissippi'\n\nThis method is new in 3.9\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1354853387490086913",
            "tweet_type": "Python tips",
            "created_at": "2021-01-28T18:06:34.000Z"
        },
        {
            "id": 3192,
            "username": "raymondh",
            "tweet_id": "1352868209003646976",
            "tweet_text": "Dave's five day course really helped.  @dabeaz\n\nMost of the other participants has also reported that their previous efforts had only gotten part way through the book before being overwhelmed by the enormity of it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352745819057786881",
            "tweet_type": "Others",
            "created_at": "2021-01-23T06:38:10.000Z"
        },
        {
            "id": 3193,
            "username": "raymondh",
            "tweet_id": "1352745819057786881",
            "tweet_text": "For the last month, I've been working through the book: Structure and Interpretation of Computer Programs.  \n\nMy goodness, it gets tedious. Even with help from @dabeaz, I still have half of Chapter 5 to go (and a few parts I skipped in Chapters 3 and 4).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352745819057786881",
            "tweet_type": "Others",
            "created_at": "2021-01-22T22:31:50.000Z"
        },
        {
            "id": 3194,
            "username": "raymondh",
            "tweet_id": "1352128594097553409",
            "tweet_text": "\"The new dawn balloons as we free it.\n\nFor there is always light, if only we\u2019re brave enough to see it.\n\nIf only we\u2019re brave enough to be it.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351964420742606849",
            "tweet_type": "Others",
            "created_at": "2021-01-21T05:39:12.000Z"
        },
        {
            "id": 3195,
            "username": "raymondh",
            "tweet_id": "1352128593355132928",
            "tweet_text": "\"And so we lift our gaze, not to what stands between us, but what stands before us.\n\nWe close the divide because we know to put our future first, we must first put our differences aside.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351964420742606849",
            "tweet_type": "Others",
            "created_at": "2021-01-21T05:39:12.000Z"
        },
        {
            "id": 3196,
            "username": "raymondh",
            "tweet_id": "1352128592717598726",
            "tweet_text": "\"And, yes, we are far from polished, far from pristine, but that doesn\u2019t mean we are striving to form a union that is perfect.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351964420742606849",
            "tweet_type": "Others",
            "created_at": "2021-01-21T05:39:12.000Z"
        },
        {
            "id": 3197,
            "username": "raymondh",
            "tweet_id": "1352021890957627392",
            "tweet_text": "10/ That one is also simpler when the constraints are relaxed:\n\n&gt;&gt;&gt; fib = lambda n: n if n &lt; 2 else (fib(n - 1) + fib(n - 2))\n&gt;&gt;&gt; fib(8)\n21\n\nThis should give you some appreciation for the ability to have free variables and the ability to make assignments :-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:35:12.000Z"
        },
        {
            "id": 3198,
            "username": "raymondh",
            "tweet_id": "1352021890148171777",
            "tweet_text": "9/ BONUS: Here is the same technique applied to the fibonacci function:\n\n&gt;&gt;&gt; (\n    lambda n: (lambda fib: fib(n, fib))(\n        lambda n, inner: n if n &lt; 2 else (inner(n - 1, inner) + inner(n - 2, inner))\n    )\n)(8)\n21",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:35:12.000Z"
        },
        {
            "id": 3199,
            "username": "raymondh",
            "tweet_id": "1352018463024242688",
            "tweet_text": "8/ Life is much simpler if we allow a free variable and the ability to make an assignment in the enclosing environment:\n\n    fact = lambda n: 1 if n==0 else n * fact(n - 1)\n    fact(5)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:35.000Z"
        },
        {
            "id": 3200,
            "username": "raymondh",
            "tweet_id": "1352018461656903682",
            "tweet_text": "7/ The three level combinator shows how powerfully expressive lambdas can be.  This is its principal theoretical significance.\n\nHowever, it's too awkward to use in practice.\n\nDropping some of the constraints leads us to a more practical, efficient, and understandable solution",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:35.000Z"
        },
        {
            "id": 3201,
            "username": "raymondh",
            "tweet_id": "1352018460755181568",
            "tweet_text": "6/ The middle level lambda has one free variable \"n\".\n\nWe close this off with an outer lambda that uses \"n\" as a formal parameter:\n\n    lambda n: middle\n\nNow, we run the three nested lambdas, passing in a value whose factorial we want to compute:\n\n    outer(5)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:34.000Z"
        },
        {
            "id": 3202,
            "username": "raymondh",
            "tweet_id": "1352018459899564033",
            "tweet_text": "5/ Steps for:\n\n    (lambda fact: fact(n, fact))(inner)\n\n1) The formal parameter \"fact\" is bound to the argument \"inner\".\n\n2) The body of this middle level lambda calls the inner function AND passes in a reference to inner function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:34.000Z"
        },
        {
            "id": 3203,
            "username": "raymondh",
            "tweet_id": "1352018459027095552",
            "tweet_text": "4/ Now we need to give the function a name to let us call it and pass it in as an argument at the same time.\n\nWith lambdas, we can name a function by passing it into another function which binds it to the formal parameters:\n\n    lambda fact: fact(n, fact))",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:34.000Z"
        },
        {
            "id": 3204,
            "username": "raymondh",
            "tweet_id": "1352018458188255232",
            "tweet_text": "3/ To get around this limitation, we create an inner function where we can pass in both the variable n and a reference to the function itself:\n\nlambda n, inner: 1 if n == 0 else (n * inner(n - 1, inner)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:34.000Z"
        },
        {
            "id": 3205,
            "username": "raymondh",
            "tweet_id": "1352018457315868672",
            "tweet_text": "2/ A combinator is a closed lambda expression.  This means that it has no free variables.\n\nThat creates a challenge for recursion because the function body has no direct way to refer to the definition of the function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:34.000Z"
        },
        {
            "id": 3206,
            "username": "raymondh",
            "tweet_id": "1352018456401440769",
            "tweet_text": "1/ Writing a recursive combinator version of factorial in #Python is a real brain-teaser:\n\n&gt;&gt;&gt; (\n    lambda n: (lambda fact: fact(n, fact))(\n        lambda n, inner: 1 if n == 0 else (n * inner(n - 1, inner))\n    )\n)(5)\n120",
            "tweet_media": "[]",
            "tweet_conversation_id": "1352018456401440769",
            "tweet_type": "Others",
            "created_at": "2021-01-20T22:21:33.000Z"
        },
        {
            "id": 3207,
            "username": "raymondh",
            "tweet_id": "1351964420742606849",
            "tweet_text": "The youth laureate Amanda Gorman was amazing.\n\nWith this auspicious inauguration, I am full of hope.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351964420742606849",
            "tweet_type": "Others",
            "created_at": "2021-01-20T18:46:50.000Z"
        },
        {
            "id": 3208,
            "username": "raymondh",
            "tweet_id": "1351629692961316866",
            "tweet_text": "After the decimal place, a common convention is to put digits in groups of five:\n\n3.14159_26535_89793_23846\n\nThe statistics module follows this convention:\n\nhttps://t.co/rLsvfbv9GM\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351629691631796224",
            "tweet_type": "Others",
            "created_at": "2021-01-19T20:36:45.000Z"
        },
        {
            "id": 3209,
            "username": "raymondh",
            "tweet_id": "1351629692332249090",
            "tweet_text": "European style takes more effort\n\n&gt;&gt;&gt; x = 1_234_567.89\n&gt;&gt;&gt; f'{x:_.2f}'.replace('.', ',').replace('_', '.')\n'1.234.567,89'\n\n/2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351629691631796224",
            "tweet_type": "Others",
            "created_at": "2021-01-19T20:36:45.000Z"
        },
        {
            "id": 3210,
            "username": "raymondh",
            "tweet_id": "1351629691631796224",
            "tweet_text": "#Python tip:  Hard-coded constants should use the optional underscore as a thousands separator:\n\n&gt;&gt;&gt; x = 1_234_567\n\nAlso, you can output numbers in that format:\n\n&gt;&gt;&gt; f'{x:_d}'\n'1_234_567'\n\nOr with commas:\n\n&gt;&gt;&gt; f'{x:,d}'\n'1,234,567'\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351629691631796224",
            "tweet_type": "Python tips",
            "created_at": "2021-01-19T20:36:45.000Z"
        },
        {
            "id": 3211,
            "username": "raymondh",
            "tweet_id": "1351256859680800770",
            "tweet_text": "Given an attribute name like \"load_id\", do you also expect to see \"load_ego\" and \"load_superego\"?\n\n\ud83d\ude0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1351256859680800770",
            "tweet_type": "Others",
            "created_at": "2021-01-18T19:55:15.000Z"
        },
        {
            "id": 3212,
            "username": "raymondh",
            "tweet_id": "1350191654485934081",
            "tweet_text": "I believe the primary use case for bit_count() is in computing Hamming Distance:\n\nhttps://t.co/sLZXo0J93j\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1350185890073640960",
            "tweet_type": "Others",
            "created_at": "2021-01-15T21:22:30.000Z"
        },
        {
            "id": 3213,
            "username": "raymondh",
            "tweet_id": "1350190833274765313",
            "tweet_text": "I suppose you could use it to make a Galton Board demo.\n\nfrom collections import Counter\nfrom random import getrandbits\n\ngalton = Counter(getrandbits(20).bit_count() for i in range(500))\nfor i in range(21):\n    print(f'{i:2} : ' + '*' * galton[i])\n\nhttps://t.co/fQ9ruHgXPv\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1350185890073640960",
            "tweet_type": "Others",
            "created_at": "2021-01-15T21:19:14.000Z"
        },
        {
            "id": 3214,
            "username": "raymondh",
            "tweet_id": "1350185890778234886",
            "tweet_text": "In case you're wondering about negative integers, x.bit_count() first applies abs(x):\n\n&gt;&gt;&gt; all(x.bit_count() == (-x).bit_count() for x in range(100_000))\nTrue\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1350185890073640960",
            "tweet_type": "Others",
            "created_at": "2021-01-15T20:59:36.000Z"
        },
        {
            "id": 3215,
            "username": "raymondh",
            "tweet_id": "1350185890073640960",
            "tweet_text": "Coming soon in #Python 3.10:  A faster way to count bits in an integer:\n\n&gt;&gt;&gt; x = 451\n&gt;&gt;&gt; bin(x)\n'0b111000011'\n&gt;&gt;&gt; bin(x).count('1')    # &lt;-- old\n5\n&gt;&gt;&gt; x.bit_count()      # &lt;-- new\n5\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1350185890073640960",
            "tweet_type": "Others",
            "created_at": "2021-01-15T20:59:36.000Z"
        },
        {
            "id": 3216,
            "username": "raymondh",
            "tweet_id": "1349161090354085888",
            "tweet_text": "#Python doesn't change eternal truths.\n\n\u201cGod made the integers; all else is the work of man.\u201d \u2014 Leopold Kronecker\n\n&gt;&gt;&gt; x = 10 ** 16\n&gt;&gt;&gt; x == x + 1\nFalse\n&gt;&gt;&gt; x == x + 1.0\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1349161090354085888",
            "tweet_type": "Others",
            "created_at": "2021-01-13T01:07:24.000Z"
        },
        {
            "id": 3217,
            "username": "raymondh",
            "tweet_id": "1348558030778953730",
            "tweet_text": "#Python fun:\n\n&gt;&gt;&gt; madlib = '{snake} is an {adjective} programming language for {plural_noun}'\n\n&gt;&gt;&gt; responses = dict(snake='Asp', adjective='uptight', plural_noun='guitars')\n\n&gt;&gt;&gt; madlib.format_map(responses)\n'Asp is an uptight programming language for guitars'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348558030778953730",
            "tweet_type": "Others",
            "created_at": "2021-01-11T09:11:04.000Z"
        },
        {
            "id": 3218,
            "username": "raymondh",
            "tweet_id": "1348553113368555520",
            "tweet_text": "I'm deleting this tweet because it was being interpreted negatively as a comment about a specific user rather than as a general observation about the limitations of documentation in resolving differences between mental models and actual implementations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348408393099141122",
            "tweet_type": "Others",
            "created_at": "2021-01-11T08:51:31.000Z"
        },
        {
            "id": 3219,
            "username": "raymondh",
            "tweet_id": "1348439294000594946",
            "tweet_text": "BTW, the point of the original tweet is that docs don't prevent bug reports like this.\n\nWhenever an implementation doesn't match a model formed in your head, one of the two will need to change \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348408393099141122",
            "tweet_type": "Others",
            "created_at": "2021-01-11T01:19:15.000Z"
        },
        {
            "id": 3220,
            "username": "raymondh",
            "tweet_id": "1348438177476792320",
            "tweet_text": "Later, there needs to be a decision about whether any of those ideas are worth it.\n\nIf the answer is yes, then implement it, document it, test it, and maintain it forever.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348408393099141122",
            "tweet_type": "Others",
            "created_at": "2021-01-11T01:14:48.000Z"
        },
        {
            "id": 3221,
            "username": "raymondh",
            "tweet_id": "1348438176684146689",
            "tweet_text": "For those reading the bug report, note that there are no judgments there.\n\nThe first step in triaging a bug report is to identify exactly what is happening in the reported example.\n\nThe next step is generating possible solutions, such a log10() method for Fractions.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348408393099141122",
            "tweet_type": "Others",
            "created_at": "2021-01-11T01:14:48.000Z"
        },
        {
            "id": 3222,
            "username": "raymondh",
            "tweet_id": "1348424307383259138",
            "tweet_text": "If this use case was important, we could introduce a __log10__ dunder method and move the responsibility to the Fraction module.\n\nThat would retain loose coupling and Python both understandable and maintainable.\n\nThis question is whether it is worth it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348408393099141122",
            "tweet_type": "Others",
            "created_at": "2021-01-11T00:19:42.000Z"
        },
        {
            "id": 3223,
            "username": "raymondh",
            "tweet_id": "1348423741387128838",
            "tweet_text": "The design issue here is that Python achieves loose coupling by its dunder methods, but the __float__() method loses some information during the coercion.\n\nIn this case, the information loss was important.  In most day to day work, it won't matter at all.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348408393099141122",
            "tweet_type": "Others",
            "created_at": "2021-01-11T00:17:27.000Z"
        },
        {
            "id": 3224,
            "username": "raymondh",
            "tweet_id": "1348418737242664960",
            "tweet_text": "Keep in mind that this user isn't wrong here.  The numeric tower suggests that Rationals be able to do whatever Reals can do.  And in fact most fractions do work with math.log10().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1348408393099141122",
            "tweet_type": "Others",
            "created_at": "2021-01-10T23:57:34.000Z"
        },
        {
            "id": 3225,
            "username": "raymondh",
            "tweet_id": "1347712562058518530",
            "tweet_text": "def __iadd__(my, your):\n     https://t.co/lf7HHmu1S4 += https://t.co/bTeE5OdYKM\n     return my",
            "tweet_media": "[]",
            "tweet_conversation_id": "1347668251015217152",
            "tweet_type": "Others",
            "created_at": "2021-01-09T01:11:28.000Z"
        },
        {
            "id": 3226,
            "username": "raymondh",
            "tweet_id": "1347668251015217152",
            "tweet_text": "OH:  #Python's instance variable \"self\" isn't self-centered enough.  Perhaps it should be shortened to \"me\" or \"my\". \ud83d\ude09\n\ndef __init__(my, house, car, money):\n    https://t.co/45V2unIqG3 = house\n    https://t.co/pM3IgYvXmt = car\n    https://t.co/YbMYB3BBwo = money",
            "tweet_media": "[]",
            "tweet_conversation_id": "1347668251015217152",
            "tweet_type": "Others",
            "created_at": "2021-01-08T22:15:24.000Z"
        },
        {
            "id": 3227,
            "username": "raymondh",
            "tweet_id": "1346630207931785216",
            "tweet_text": "#Python tip:  Not enough people know about itertools.tee(). \n\nThink of it any time you want consume an iterator value more than once.\n\nhttps://t.co/7boLZyjyZs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1346630207931785216",
            "tweet_type": "Python tips",
            "created_at": "2021-01-06T01:30:35.000Z"
        },
        {
            "id": 3228,
            "username": "raymondh",
            "tweet_id": "1345822932405108736",
            "tweet_text": "The upshot is that random's choice() function is size constrained because it calls len(seq):\n\n&gt;&gt;&gt; choice(range(10**100))\n ...\nOverflowError: Python int too large to convert to C ssize_t\n\nMeanwhile randrange() works fine because len() isn't called:\n\n&gt;&gt;&gt; x = randrange(10**100)\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1345822930127650816",
            "tweet_type": "Others",
            "created_at": "2021-01-03T20:02:45.000Z"
        },
        {
            "id": 3229,
            "username": "raymondh",
            "tweet_id": "1345822931645972481",
            "tweet_text": "Classes written in C typically implement __len__() with the mp_length or sq_length slot.  That constrains them to sys.maxsize limits:\n\n&gt;&gt;&gt; r = range(10**100)\n&gt;&gt;&gt; r.__len__()\nTraceback (most recent call last):\n   ...\nOverflowError: Python int too large to convert to C ssize_t\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1345822930127650816",
            "tweet_type": "Others",
            "created_at": "2021-01-03T20:02:45.000Z"
        },
        {
            "id": 3230,
            "username": "raymondh",
            "tweet_id": "1345822930899402753",
            "tweet_text": "You could call __len__() successfully, but the len() function fails:\n\nclass A:\n    def __len__(self):\n        return -1\n\n&gt;&gt;&gt; a = A()\n\n&gt;&gt;&gt; a.__len__()\n-1\n\n&gt;&gt;&gt; len(a)\n  ...\nValueError: __len__() should return &gt;= 0\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1345822930127650816",
            "tweet_type": "Others",
            "created_at": "2021-01-03T20:02:45.000Z"
        },
        {
            "id": 3231,
            "username": "raymondh",
            "tweet_id": "1345822930127650816",
            "tweet_text": "#Python factlet: The len() function insists that the corresponding __len__() method return a value x such that:\n\n     0 \u2264 x.__index__() \u2264 sys.maxsize\n\n* 3.0 and '3' don't have an __index__ method.\n* -1 is too small.\n* sys.maxsize+1  is too big.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1345822930127650816",
            "tweet_type": "Others",
            "created_at": "2021-01-03T20:02:45.000Z"
        },
        {
            "id": 3232,
            "username": "raymondh",
            "tweet_id": "1345121743959015424",
            "tweet_text": "#Python tip:  Of all the ways to handle encoding errors, \"namereplace\" stands out as a way to preserve information readably and beautifully:\n\n&gt;&gt;&gt; 'In the meadow, we can build a \u2603'.encode('latin-1', errors='namereplace')\nb'In the meadow, we can build a \\\\N{SNOWMAN}'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1345121743959015424",
            "tweet_type": "Python tips",
            "created_at": "2021-01-01T21:36:29.000Z"
        },
        {
            "id": 3233,
            "username": "raymondh",
            "tweet_id": "1344761561009668096",
            "tweet_text": "Guido has consistently commented that PEP 8 checkers and reformatters are by definition not PEP 8 compliant.  They all lack essential human judgment and aesthetics.\n\nSee for example:\n\nhttps://t.co/lBAcf9CZQk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344693511426199558",
            "tweet_type": "Others",
            "created_at": "2020-12-31T21:45:15.000Z"
        },
        {
            "id": 3234,
            "username": "raymondh",
            "tweet_id": "1344693511426199558",
            "tweet_text": "New year prediction:  Automated code formatting will be mandated for the #Python standard library despite clearcut examples of it making the code less readable:\n\nhttps://t.co/sfFvdVQjEF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344693511426199558",
            "tweet_type": "Others",
            "created_at": "2020-12-31T17:14:50.000Z"
        },
        {
            "id": 3235,
            "username": "raymondh",
            "tweet_id": "1344363474424500225",
            "tweet_text": "TL;DR  \n* Follow the example in:  help(property)\n* Use a private variable name for a managed attribute\n* Don't shoot yourself in the foot \ud83d\ude09\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344363471597490176",
            "tweet_type": "Others",
            "created_at": "2020-12-30T19:23:24.000Z"
        },
        {
            "id": 3236,
            "username": "raymondh",
            "tweet_id": "1344363473724006400",
            "tweet_text": "Also, it won't work out well if you later switch to a cached_property (because the cached value is stored in the attribute with same name).\n\nclass A:\n    @cached_property \n    def x(self):\n        return vars(self)['x'] * 12\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344363471597490176",
            "tweet_type": "Others",
            "created_at": "2020-12-30T19:23:23.000Z"
        },
        {
            "id": 3237,
            "username": "raymondh",
            "tweet_id": "1344363473027833857",
            "tweet_text": "Seeing a non-private 'x' in vars(inst), a user or utility may reasonably may reasonably access the data directly, inadvertently bypassing the getter and setter methods.\n\nError messages are likely to be confusing as well. \n\nHmm, is that the property x or the stored x?\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344363471597490176",
            "tweet_type": "Others",
            "created_at": "2020-12-30T19:23:23.000Z"
        },
        {
            "id": 3238,
            "username": "raymondh",
            "tweet_id": "1344363472302211072",
            "tweet_text": "It is possible to use the same variable name, but it is awkward, confusing, and risks creating hard to find bugs:\n\nclass A:\n    @property \n    def x(self):\n        return vars(self)['x'] * 12\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344363471597490176",
            "tweet_type": "Others",
            "created_at": "2020-12-30T19:23:23.000Z"
        },
        {
            "id": 3239,
            "username": "raymondh",
            "tweet_id": "1344363471597490176",
            "tweet_text": "#Python tip:  When using property() to manage access to a variable, give the variable a different name than the property.\n\nIndicate that the attribute is private by using an underscore:\n\nclass A:\n    @property \n    def x(self):\n        return self._x      #  private name\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344363471597490176",
            "tweet_type": "Python tips",
            "created_at": "2020-12-30T19:23:23.000Z"
        },
        {
            "id": 3240,
            "username": "raymondh",
            "tweet_id": "1344176537994625024",
            "tweet_text": "def manhattan_distance(p, q):\n    return sum(map(abs, map(operator.sub, p, q)))",
            "tweet_media": "[]",
            "tweet_conversation_id": "1344176537994625024",
            "tweet_type": "Others",
            "created_at": "2020-12-30T07:00:34.000Z"
        },
        {
            "id": 3241,
            "username": "raymondh",
            "tweet_id": "1343063498482282496",
            "tweet_text": "4/ Signature objects have their limitations.\n\nIn particular, it isn't able to express the actual calling patterns for range() which are a combination of two signatures:\n\nrange(stop)\nrange(start, stop, step=1)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1343063496330637313",
            "tweet_type": "Others",
            "created_at": "2020-12-27T05:17:45.000Z"
        },
        {
            "id": 3242,
            "username": "raymondh",
            "tweet_id": "1343063497739931648",
            "tweet_text": "3/ Tooltips and help() will now be more informative:\n\n&gt;&gt;&gt; help(randrange)\nrandrange(start, stop, step, /)\n    Choose a random value from range(start[, stop[, step]]).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1343063496330637313",
            "tweet_type": "Others",
            "created_at": "2020-12-27T05:17:45.000Z"
        },
        {
            "id": 3243,
            "username": "raymondh",
            "tweet_id": "1343063497119158274",
            "tweet_text": "2/ The attribute is accessed by the inspect module:\n\n&gt;&gt;&gt; inspect.signature(randrange)\n&lt;Signature (start, stop, step, /)&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1343063496330637313",
            "tweet_type": "Others",
            "created_at": "2020-12-27T05:17:45.000Z"
        },
        {
            "id": 3244,
            "username": "raymondh",
            "tweet_id": "1343063496330637313",
            "tweet_text": "1/ #Python tip:  Override the signature for *args with the __text_signature__ attribute:\n\ndef randrange(*args):\n    'Choose a random value from range(start[, stop[, step]]).'\n    return random.choice(range(*args))\n\nrandrange.__text_signature__ = '(start, stop, step, /)'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1343063496330637313",
            "tweet_type": "Python tips",
            "created_at": "2020-12-27T05:17:45.000Z"
        },
        {
            "id": 3245,
            "username": "raymondh",
            "tweet_id": "1340048350968569856",
            "tweet_text": "The ascii() function is especially helpful in terminal sessions where the terminal isn't configured to display unicode.\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1340042364363046914",
            "tweet_type": "Others",
            "created_at": "2020-12-18T21:36:38.000Z"
        },
        {
            "id": 3246,
            "username": "raymondh",
            "tweet_id": "1340042365071835136",
            "tweet_text": "The algorithm for ascii(obj) starts with repr(obj) and then escapes the non-ASCII characters with \\\\x, \\\\u or \\\\U escapes.\n\n&gt;&gt;&gt; print(ascii(['Calle del Le\u00f3n', 'Champs-Elys\u00e9es']))\n['Calle del Le\\xf3n', 'Champs-Elys\\xe9es']\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1340042364363046914",
            "tweet_type": "Others",
            "created_at": "2020-12-18T21:12:51.000Z"
        },
        {
            "id": 3247,
            "username": "raymondh",
            "tweet_id": "1340042364363046914",
            "tweet_text": "#Python tip:  The ascii() function is like repr() but its output only contains ASCII printable characters or escapes:\n\n&gt;&gt;&gt; s = 'Bismarckstra\u00dfe'\n\n&gt;&gt;&gt; print(repr(s))\n'Bismarckstra\u00dfe'\n\n&gt;&gt;&gt; print(ascii(s))\n'Bismarckstra\\xdfe'\n\n&gt;&gt;&gt; 'Bismarckstra\\xdfe' == 'Bismarckstra\u00dfe'\nTrue\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1340042364363046914",
            "tweet_type": "Python tips",
            "created_at": "2020-12-18T21:12:51.000Z"
        },
        {
            "id": 3248,
            "username": "raymondh",
            "tweet_id": "1337613112078319617",
            "tweet_text": "Tools/scripts/var_access_benchmark.py shows the improvements are uneven.\n\nread_local, read_nonlocal, write_local, and write_nonlocal are unchanged\n\nMost of the other core operations have speedups from 50% to 90%:  read_global, read_builtin, read_instancevar, read_list, etc.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1337613111218434049",
            "tweet_type": "Others",
            "created_at": "2020-12-12T04:19:52.000Z"
        },
        {
            "id": 3249,
            "username": "raymondh",
            "tweet_id": "1337613111218434049",
            "tweet_text": "#Python runs fast on an Apple M1.\n\n303,461 pystones/second on my new Macbook Air\n\n159,497 pystones/second on my old Macbook Pro\n(2.6/3.8 Ghz Haswell)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1337613111218434049",
            "tweet_type": "Others",
            "created_at": "2020-12-12T04:19:52.000Z"
        },
        {
            "id": 3250,
            "username": "raymondh",
            "tweet_id": "1337505618089758721",
            "tweet_text": "4/ Example\n\nclass D(dict):\n\n    def __missing__(self, name):\n        print('Fallback', name)\n        return 42\n\n    def __getitem__(self, name):\n        print('Main', name)\n        raise KeyError\n\n&gt;&gt;&gt; d = D()\n&gt;&gt;&gt; d['x']\nMain x\nTraceback (most recent call last):\n...\nKeyError",
            "tweet_media": "[]",
            "tweet_conversation_id": "1337505615204106240",
            "tweet_type": "Others",
            "created_at": "2020-12-11T21:12:43.000Z"
        },
        {
            "id": 3251,
            "username": "raymondh",
            "tweet_id": "1337505617376788481",
            "tweet_text": "3/ In contrast, the [ ] square brackets operator only calls __getitem__().\n\nThe fallback to __missing__() for dict subclasses is embedded in dict.__getitem__().\n\nConsequently, overriding dict.__getitem__() disables the __missing__() hook.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1337505615204106240",
            "tweet_type": "Others",
            "created_at": "2020-12-11T21:12:43.000Z"
        },
        {
            "id": 3252,
            "username": "raymondh",
            "tweet_id": "1337505615808135170",
            "tweet_text": "2/ Example\n\nclass A:\n\n    def __getattr__(self, name):\n        print('Fallback', name)\n        return 42\n\n    def __getattribute__(self, name):\n        print('Main', name)\n        raise AttributeError\n\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x\nMain x\nFallback x\n42",
            "tweet_media": "[]",
            "tweet_conversation_id": "1337505615204106240",
            "tweet_type": "Others",
            "created_at": "2020-12-11T21:12:43.000Z"
        },
        {
            "id": 3253,
            "username": "raymondh",
            "tweet_id": "1337505615204106240",
            "tweet_text": "1/ #Python fact:  The dot operator is hardwired to call __getattribute__() and to fallback to __getattr__() if an AttributeError is raised.\n\nOverriding __getattribute__ won't disable the __getattr__() hook.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1337505615204106240",
            "tweet_type": "Others",
            "created_at": "2020-12-11T21:12:42.000Z"
        },
        {
            "id": 3254,
            "username": "raymondh",
            "tweet_id": "1336851339138109440",
            "tweet_text": "#Python tip: One way to learn about the inspirations and aspirations for Python's design is to read the books that Guido reads.\n\nWhen Python 2.2 came out, he suggested reading \u201cPutting Metaclasses to Work\u201d by Ira R. Forman.\n\nThat book gives a pretty good idea of what is possible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1336851339138109440",
            "tweet_type": "Python tips",
            "created_at": "2020-12-10T01:52:51.000Z"
        },
        {
            "id": 3255,
            "username": "raymondh",
            "tweet_id": "1335284171669815297",
            "tweet_text": "2/ The same goes for sorting multiple unsorted sequences:\n\n    sorted(chain(a, b, c, d, e))   # O(n) + O(n log n)\n\nIf the subsequences are already sorted, combine them with heapq.merge():\n\n    list(merge(a, b, c, d, e))   # O(n)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1335284170965221376",
            "tweet_type": "Others",
            "created_at": "2020-12-05T18:05:29.000Z"
        },
        {
            "id": 3256,
            "username": "raymondh",
            "tweet_id": "1335284170965221376",
            "tweet_text": "1/ #Python tip:  Join sequences with itertools.chain() instead of with addition:\n\n    list(chain(a, b, c, d, e))   # O(n)\n\n    a + b + c + d + e   # O(n\u00b2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1335284170965221376",
            "tweet_type": "Python tips",
            "created_at": "2020-12-05T18:05:29.000Z"
        },
        {
            "id": 3257,
            "username": "raymondh",
            "tweet_id": "1334669385621860353",
            "tweet_text": "Of course, if you misspell it as __setname__, it won't do anything at all ;-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1334669384170627073",
            "tweet_type": "Others",
            "created_at": "2020-12-04T01:22:33.000Z"
        },
        {
            "id": 3258,
            "username": "raymondh",
            "tweet_id": "1334669384875327488",
            "tweet_text": "That prints:\n\n&lt;__main__.A object at 0x7fcf2ba1a3d0&gt; was named x by &lt;class '__main__.B'&gt;\n&lt;__main__.A object at 0x7fcf2ba1ad60&gt; was named y by &lt;class '__main__.B'&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1334669384170627073",
            "tweet_type": "Others",
            "created_at": "2020-12-04T01:22:32.000Z"
        },
        {
            "id": 3259,
            "username": "raymondh",
            "tweet_id": "1334669384170627073",
            "tweet_text": "#Python factlet:  The __set_name__() method isn't part of the descriptor protocol.  It will work with any class:\n\nclass A:\n    def __set_name__(self, owner, name):\n        print(f'{self} was named {name} by {owner}')\n\nclass B:\n    x = A()\n    y = A()",
            "tweet_media": "[]",
            "tweet_conversation_id": "1334669384170627073",
            "tweet_type": "Others",
            "created_at": "2020-12-04T01:22:32.000Z"
        },
        {
            "id": 3260,
            "username": "raymondh",
            "tweet_id": "1332777418004729856",
            "tweet_text": "Syntax highlighters do good job of finding these conflicts, but they can still be annoying:\n\nprev, next, value = linked_list_node\n\nformat = '%d %B %Y %H:%M:%S'\n\nsum += term(x, i)\n\nid = lookup_id(username)\n\nhash = sha256(buffer).hexdigest()",
            "tweet_media": "[]",
            "tweet_conversation_id": "1332777417170010112",
            "tweet_type": "Others",
            "created_at": "2020-11-28T20:04:32.000Z"
        },
        {
            "id": 3261,
            "username": "raymondh",
            "tweet_id": "1332777417170010112",
            "tweet_text": "#Python practice:  Occasionally, I need to alter a natural and preferred variable name just to avoid shadowing a builtin function.\n\nIn order of frequency, the most likely to get in my way are:\n\nnext()\nformat()\nsum()\ninput()\nid()\nmax()\nmin()\nhash()",
            "tweet_media": "[]",
            "tweet_conversation_id": "1332777417170010112",
            "tweet_type": "Others",
            "created_at": "2020-11-28T20:04:32.000Z"
        },
        {
            "id": 3262,
            "username": "raymondh",
            "tweet_id": "1331850115674345473",
            "tweet_text": "When did Ohm's law become V = I R instead of E = I R ?\n\nAll the older textbooks used E with the justification that it stood for Electromotive force.  Of course, V for Voltage makes more sense.   But what made the conventions change?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1331850115674345473",
            "tweet_type": "Others",
            "created_at": "2020-11-26T06:39:46.000Z"
        },
        {
            "id": 3263,
            "username": "raymondh",
            "tweet_id": "1331745705149353989",
            "tweet_text": "&gt;&gt;&gt; source = partial(next, iter(['-42']))\n&gt;&gt;&gt; for token in generate_tokens(source):\n        print(token)\n\nTokenInfo(type=54 (OP), string='-', start=(1, 0), end=(1, 1), line='-42')\nTokenInfo(type=2 (NUMBER), string='42', start=(1, 1), end=(1, 3), line='-42')",
            "tweet_media": "[]",
            "tweet_conversation_id": "1331745704436404224",
            "tweet_type": "Others",
            "created_at": "2020-11-25T23:44:53.000Z"
        },
        {
            "id": 3264,
            "username": "raymondh",
            "tweet_id": "1331745704436404224",
            "tweet_text": "Alliterative #python factlet:  The core language specification has no notion of negative numbers. \n\n\"-42\", gets parsed as two tokens:\n* the operator \"-\" \n* the integer \"42\". \n\nA unary minus operation is needed to build the negative number.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1331745704436404224",
            "tweet_type": "Others",
            "created_at": "2020-11-25T23:44:53.000Z"
        },
        {
            "id": 3265,
            "username": "raymondh",
            "tweet_id": "1331678888443871232",
            "tweet_text": "Is there a @thephysicsgirl or @3blue1brown for homotopy theory?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1331677995057115136",
            "tweet_type": "Others",
            "created_at": "2020-11-25T19:19:23.000Z"
        },
        {
            "id": 3266,
            "username": "raymondh",
            "tweet_id": "1331677995057115136",
            "tweet_text": "You want to learn something new, to grow your mind, to satisfy a little curiosity, and to step a little outside your comfort zone.\n\nSo, you google for, \"homotopy theory for beginners\" and find this.  \n\nOMG!  Time to retreat to my comfort zone.\n\nhttps://t.co/BNSlGwpg35",
            "tweet_media": "[]",
            "tweet_conversation_id": "1331677995057115136",
            "tweet_type": "Others",
            "created_at": "2020-11-25T19:15:50.000Z"
        },
        {
            "id": 3267,
            "username": "raymondh",
            "tweet_id": "1331393609204072450",
            "tweet_text": "#Python #Sphinx help:  Does anyone know the magic words to get Sphinx's doctest directive to be able to see and test logging output in addition to normal return values?\n\n&gt;&gt;&gt; dave.get_age()\nINFO:root:Accessing 'age' giving 40\n40",
            "tweet_media": "[]",
            "tweet_conversation_id": "1331393609204072450",
            "tweet_type": "Others",
            "created_at": "2020-11-25T00:25:47.000Z"
        },
        {
            "id": 3268,
            "username": "raymondh",
            "tweet_id": "1330593395333447680",
            "tweet_text": "\"Excuse me, where can I find the conference registration desk?\"\n\n\"Sorry, that question has been asked before.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1330593394465275905",
            "tweet_type": "Others",
            "created_at": "2020-11-22T19:26:01.000Z"
        },
        {
            "id": 3269,
            "username": "raymondh",
            "tweet_id": "1330593394465275905",
            "tweet_text": "Am thinking of organizing a #StackOverflow conference.\n\nAny time two people start talking about something interesting, I'll have moderators break-up their group because similar conversations have happened before. \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1330593394465275905",
            "tweet_type": "Others",
            "created_at": "2020-11-22T19:26:01.000Z"
        },
        {
            "id": 3270,
            "username": "raymondh",
            "tweet_id": "1330388128666935301",
            "tweet_text": "#Python tip:  Slice's are objects.\n\nYou can store them in variables or containers just as you would with a regular integer index.\n\n&gt;&gt;&gt; s = slice(6, 12)\n&gt;&gt;&gt; title = \"Monty python's flying circus\"\n&gt;&gt;&gt; title[s]\n'python'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1330388128666935301",
            "tweet_type": "Python tips",
            "created_at": "2020-11-22T05:50:21.000Z"
        },
        {
            "id": 3271,
            "username": "raymondh",
            "tweet_id": "1328219103648047106",
            "tweet_text": "There was also harrowing flat plank walkway between towers with no rails on either side. In fact, the descent presented me and my companion with a number of ways to die by falling from a great height.\n\nWe lived and had a tale to tell.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1328219101316018176",
            "tweet_type": "Others",
            "created_at": "2020-11-16T06:11:26.000Z"
        },
        {
            "id": 3272,
            "username": "raymondh",
            "tweet_id": "1328219102905659392",
            "tweet_text": "As a tourist, I was once trapped near the top of this Basilica. I missed the Spanish language announcement that they were closing.The attendants shut off the elevator and left. A medieval adventure ensued.\n\nUnlit spiral staircases with no handrails and long drops down the center.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1328219101316018176",
            "tweet_type": "Others",
            "created_at": "2020-11-16T06:11:25.000Z"
        },
        {
            "id": 3273,
            "username": "raymondh",
            "tweet_id": "1328219102196842497",
            "tweet_text": "Here's what the whole basilica looks like:\n\nhttps://t.co/k97keCJ5OA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1328219101316018176",
            "tweet_type": "Others",
            "created_at": "2020-11-16T06:11:25.000Z"
        },
        {
            "id": 3274,
            "username": "raymondh",
            "tweet_id": "1328219101316018176",
            "tweet_text": "The technology of yesteryear is amazing.  Here is an analog computer to calculate the distribution of forces in Antoni Gaudi's La Sagrada Familia:\n\nhttps://t.co/v0AIqo6zxp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1328219101316018176",
            "tweet_type": "Others",
            "created_at": "2020-11-16T06:11:25.000Z"
        },
        {
            "id": 3275,
            "username": "raymondh",
            "tweet_id": "1328074206387474432",
            "tweet_text": "Many years ago, I learned the programming language Forth.\n\nOn the plus side, it permanently changed the way I think about writing programs.\n\nOn the minus side, I always hesitate when trying to spell the word that comes between \"third\" and \"fifth\". The English word feels odd.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1328074206387474432",
            "tweet_type": "Others",
            "created_at": "2020-11-15T20:35:39.000Z"
        },
        {
            "id": 3276,
            "username": "raymondh",
            "tweet_id": "1327682831728873472",
            "tweet_text": "#Python news:  The video is up for my #PyConEstonia keynote:  \n\n\"Object Oriented Programming from scratch (four times)\"\n\nHope this expands your world view.\n\nEnjoy!\n\nhttps://t.co/VWRiuBPDGN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1327682831728873472",
            "tweet_type": "Others",
            "created_at": "2020-11-14T18:40:28.000Z"
        },
        {
            "id": 3277,
            "username": "raymondh",
            "tweet_id": "1327464240316252160",
            "tweet_text": "Music theory in a nutshell:\n\n    2 ** 7 \u2248 1.5 ** 12\n\nSeven octaves \u2248 Twelve perfect fifths\n\n\u2234 12 semitones close to small integer ratios",
            "tweet_media": "[]",
            "tweet_conversation_id": "1327464240316252160",
            "tweet_type": "Others",
            "created_at": "2020-11-14T04:11:52.000Z"
        },
        {
            "id": 3278,
            "username": "raymondh",
            "tweet_id": "1326989314467581952",
            "tweet_text": "In moderator elections, I vote against people who brag that they've closed thousands of questions.\n\nThey remind me of people on Wikipedia who \"clean up\" by deleting mountains of original and important content.\n\nI \"cleaned\" the city by burning the library.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1326987462128754688",
            "tweet_type": "Others",
            "created_at": "2020-11-12T20:44:41.000Z"
        },
        {
            "id": 3279,
            "username": "raymondh",
            "tweet_id": "1326987463999377409",
            "tweet_text": "The Python topic has over a million questions.  So in theory, a powerful moderator could close every new question and reasonably claim that at some point in history someone discussed something similar.\n\nUnhelpfully, they could end all new questions and just convert SO to a FAQ.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1326987462128754688",
            "tweet_type": "Others",
            "created_at": "2020-11-12T20:37:20.000Z"
        },
        {
            "id": 3280,
            "username": "raymondh",
            "tweet_id": "1326987463437369344",
            "tweet_text": "Guido himself could helping an end-user and someone would cut him off in favor of a less helpful variant of the same question.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1326987462128754688",
            "tweet_type": "Others",
            "created_at": "2020-11-12T20:37:20.000Z"
        },
        {
            "id": 3281,
            "username": "raymondh",
            "tweet_id": "1326987462766284800",
            "tweet_text": "I'm happy to volunteer time to help people asking questions on StackOverflow, but I can't stand people who close the question right in the middle of the conversation.\n\nIt is an insult to the question asker and the question answerer.  All it does it make the closer feel powerful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1326987462128754688",
            "tweet_type": "Others",
            "created_at": "2020-11-12T20:37:20.000Z"
        },
        {
            "id": 3282,
            "username": "raymondh",
            "tweet_id": "1326987462128754688",
            "tweet_text": "StackOverflow is plagued by people who aggressively mark questions as duplicates.\n\nThere are many distinct questions that happen to use the same library function in their answers.\n\nFor example, I can think of many distinct and nuanced questions whose answer is itertool.product().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1326987462128754688",
            "tweet_type": "Others",
            "created_at": "2020-11-12T20:37:19.000Z"
        },
        {
            "id": 3283,
            "username": "raymondh",
            "tweet_id": "1326976012068929536",
            "tweet_text": "#Python practices survey:  What variable name do you use for the first argument to a classmethod?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1326976012068929536",
            "tweet_type": "Others",
            "created_at": "2020-11-12T19:51:49.000Z"
        },
        {
            "id": 3284,
            "username": "raymondh",
            "tweet_id": "1326450694342144000",
            "tweet_text": "TIL:  #Python's __set_name__() method works in regular classes even if they aren't descriptors.\n\n class A:\n    def __set_name__(self, owner, name):\n        print(self, owner, name)\n\nclass B:\n    x = A()\n\n&lt;__main__.A object at 0x7fae3831a0d0&gt; &lt;class '__main__.B'&gt; x",
            "tweet_media": "[]",
            "tweet_conversation_id": "1326450694342144000",
            "tweet_type": "Others",
            "created_at": "2020-11-11T09:04:24.000Z"
        },
        {
            "id": 3285,
            "username": "raymondh",
            "tweet_id": "1325605759317540864",
            "tweet_text": "The letter \u03c4 has only one vertical stroke as compared to the two in \u03c0.  That falsely suggests that is it half of pi.\n\nTo indicate the correct relationship , seems like it would be better to call it \"twopi\" \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1325528169139462145",
            "tweet_type": "Others",
            "created_at": "2020-11-09T01:06:56.000Z"
        },
        {
            "id": 3286,
            "username": "raymondh",
            "tweet_id": "1325533259460091904",
            "tweet_text": "I haven't yet seen it appear in any math, engineering, science, or statistics books or journal articles.\n\nAFAICT, the \"establishment\" is rejecting or ignoring it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1325528169139462145",
            "tweet_type": "Others",
            "created_at": "2020-11-08T20:18:50.000Z"
        },
        {
            "id": 3287,
            "username": "raymondh",
            "tweet_id": "1325532300847714304",
            "tweet_text": "Another interesting question is where you first heard of tau being used for two pi?  Was it in Python or elsewhere?\n\nIs Python the lead promoter of the idea or is it popular in other circles?\n\npun intended ;-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1325528169139462145",
            "tweet_type": "Others",
            "created_at": "2020-11-08T20:15:02.000Z"
        },
        {
            "id": 3288,
            "username": "raymondh",
            "tweet_id": "1325528169760215040",
            "tweet_text": "Put another way:  Is \"The Tau Manifesto\" accepted, nascent but going to be accepted, going to fall by the wayside, just a joke or junk science, flat-out wrong, or just doomed to insignificance?\n\nhttps://t.co/B9OtjxAi71",
            "tweet_media": "[]",
            "tweet_conversation_id": "1325528169139462145",
            "tweet_type": "Others",
            "created_at": "2020-11-08T19:58:37.000Z"
        },
        {
            "id": 3289,
            "username": "raymondh",
            "tweet_id": "1325528169139462145",
            "tweet_text": "Question for scientists and engineers using #Python:  Do you use math.tau in professional work?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1325528169139462145",
            "tweet_type": "Others",
            "created_at": "2020-11-08T19:58:37.000Z"
        },
        {
            "id": 3290,
            "username": "raymondh",
            "tweet_id": "1325126589370150914",
            "tweet_text": "Thank heavens.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1325126589370150914",
            "tweet_type": "Others",
            "created_at": "2020-11-07T17:22:53.000Z"
        },
        {
            "id": 3291,
            "username": "raymondh",
            "tweet_id": "1324858366716358656",
            "tweet_text": "The crown jewel of #Python's descriptor howto guide is the pure python translation for object.__getattribute__().\n\nThat one code snippet shows the engine that drives descriptors.\n\nhttps://t.co/wQjhvTEcKy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1324858366716358656",
            "tweet_type": "Others",
            "created_at": "2020-11-06T23:37:03.000Z"
        },
        {
            "id": 3292,
            "username": "raymondh",
            "tweet_id": "1324587487067426817",
            "tweet_text": "I can understand how pollsters can mispredict an election by a few percentage points.  What I don't understand is how we can be ten months into a pandemic and still have no reasonable estimate of what percentage of the population is currently infected.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1324587487067426817",
            "tweet_type": "Others",
            "created_at": "2020-11-06T05:40:41.000Z"
        },
        {
            "id": 3293,
            "username": "raymondh",
            "tweet_id": "1324221587759882240",
            "tweet_text": "Interesting idea.  I think I like it.\nAm not sure.  Yes, I like it. \ud83d\ude42 \n\ndef __main__(func):\n    if __name__ == '__main__':\n        func() https://t.co/YDLQfno8L2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1324221587759882240",
            "tweet_type": "Others",
            "created_at": "2020-11-05T05:26:44.000Z"
        },
        {
            "id": 3294,
            "username": "raymondh",
            "tweet_id": "1324072867273715712",
            "tweet_text": "My entire Twitter feed in a single #Python f-string \ud83e\uddd0 https://t.co/ApzN909hw2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1324072867273715712",
            "tweet_type": "Others",
            "created_at": "2020-11-04T19:35:46.000Z"
        },
        {
            "id": 3295,
            "username": "raymondh",
            "tweet_id": "1323787220474454018",
            "tweet_text": "2/\n\nLogic:\n\u2022 Modus ponens:  A \u2192 B \u2227 A \u22a2 B\n\u2022 Modus tollens: A \u2192 B \u2227 \u00acB \u22a2  \u00acA\n\nFacts:\n\u2022 By default, __name__ is '__main__'\n\u2022 Import changes the __name__\n\nDeductions:\n\u2022 If imported, the name is not '__main__'\n\u2022 If __name__ == '__main__', the module was not imported\n\u25a1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1323787219799191552",
            "tweet_type": "Others",
            "created_at": "2020-11-04T00:40:42.000Z"
        },
        {
            "id": 3296,
            "username": "raymondh",
            "tweet_id": "1323787219799191552",
            "tweet_text": "1/ It is no fun to teach #Python's __name__ test beginners.\n\nI've seen many super smart people baffled at their first encounter with it.\n\nHere my latest iteration of how to explain it:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1323787219799191552",
            "tweet_type": "Others",
            "created_at": "2020-11-04T00:40:42.000Z"
        },
        {
            "id": 3297,
            "username": "raymondh",
            "tweet_id": "1323031093168148480",
            "tweet_text": "Since the original tweet, I've made a couple of edits to simulation code.  Here is the latest version:\n\nhttps://t.co/zEUEzfB2mp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1322992732441206784",
            "tweet_type": "Others",
            "created_at": "2020-11-01T22:36:07.000Z"
        },
        {
            "id": 3298,
            "username": "raymondh",
            "tweet_id": "1323001482950569984",
            "tweet_text": "Ideally book writers and blog posters can use this as a primary source rather than having to read the complex C code for themselves.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1322992732441206784",
            "tweet_type": "Others",
            "created_at": "2020-11-01T20:38:28.000Z"
        },
        {
            "id": 3299,
            "username": "raymondh",
            "tweet_id": "1323000809756389376",
            "tweet_text": "I've aspired to the old Scientific American style with gentle user relevant examples and commentary up front, then moving toward deeper technical content with direct references to the C source.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1322992732441206784",
            "tweet_type": "Others",
            "created_at": "2020-11-01T20:35:47.000Z"
        },
        {
            "id": 3300,
            "username": "raymondh",
            "tweet_id": "1322992732441206784",
            "tweet_text": "I've posted a #Python PR to add member objects to the Descriptor HowTo Guide. Let me know if you have any comments or suggestions \ud83d\ude42\n\nThe goal was to talk about __slots__ and translate its C implementation as well as possible into pure Python code.\n\nhttps://t.co/LAr7pHhWPt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1322992732441206784",
            "tweet_type": "Others",
            "created_at": "2020-11-01T20:03:42.000Z"
        },
        {
            "id": 3301,
            "username": "raymondh",
            "tweet_id": "1322607969754775552",
            "tweet_text": "#Python userland question:  Do you any of you use/need the feature of randrange() that allowed integral float arguments?\n\n&gt;&gt;&gt; randrange(100.0, 200.0, 10.0)\n140\n\nIf not, we can clean-up and speed-up the implementation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1322607969754775552",
            "tweet_type": "Others",
            "created_at": "2020-10-31T18:34:47.000Z"
        },
        {
            "id": 3302,
            "username": "raymondh",
            "tweet_id": "1322365907650269184",
            "tweet_text": "As of #Python 3.9, there is a deprecation warning for using NotImplemented as a test expression.  Identity tests are now preferred:   \"if x is NotImplemented: ...\"\n\n&gt;&gt;&gt; bool(NotImplemented)\n&lt;stdin&gt;:1: DeprecationWarning: NotImplemented should not be used in a boolean context\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1322365907650269184",
            "tweet_type": "Others",
            "created_at": "2020-10-31T02:32:55.000Z"
        },
        {
            "id": 3303,
            "username": "raymondh",
            "tweet_id": "1321935670558912518",
            "tweet_text": "If so, be sure to speak-up.  There is a proposal to remove Solaris support:\n\nhttps://t.co/olksPZSiqs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321917936668340227",
            "tweet_type": "Others",
            "created_at": "2020-10-29T22:03:18.000Z"
        },
        {
            "id": 3304,
            "username": "raymondh",
            "tweet_id": "1321917936668340227",
            "tweet_text": "Do any of you use #Python on Solaris?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321917936668340227",
            "tweet_type": "Others",
            "created_at": "2020-10-29T20:52:50.000Z"
        },
        {
            "id": 3305,
            "username": "raymondh",
            "tweet_id": "1321536670886289408",
            "tweet_text": "Your move:  @dabeaz @ramalhoorg @dontusethiscode \n\n3/\n\n* Reposted with spaces instead of tabs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321536669355372544",
            "tweet_type": "Others",
            "created_at": "2020-10-28T19:37:49.000Z"
        },
        {
            "id": 3306,
            "username": "raymondh",
            "tweet_id": "1321536670156513280",
            "tweet_text": "Let the games begin!\n\n&gt;&gt;&gt; d = Dict(\n        cm = classmethod(lambda cls: cls.__name__.upper()),\n        pr = property(lambda self: self['x'] ** 2),\n        x = 5,\n)\n\n&gt;&gt;&gt; d['cm']()\n'DICT'\n\n&gt;&gt;&gt; d['pr']\n25\n&gt;&gt;&gt; d['x'] = 6\n&gt;&gt;&gt; d['pr']\n36\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321536669355372544",
            "tweet_type": "Others",
            "created_at": "2020-10-28T19:37:49.000Z"
        },
        {
            "id": 3307,
            "username": "raymondh",
            "tweet_id": "1321536669355372544",
            "tweet_text": "Egregious #Python hack of the day:  Add descriptor logic to dictionaries.\n\nclass Dict(dict):\n\n    def __getitem__(self, key):\n        value = super().__getitem__(key)\n        if hasattr(value, '__get__'):\n            return value.__get__(self, type(self))\n        return value\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321536669355372544",
            "tweet_type": "Others",
            "created_at": "2020-10-28T19:37:49.000Z"
        },
        {
            "id": 3308,
            "username": "raymondh",
            "tweet_id": "1321201674954784770",
            "tweet_text": "The @cached_property() decorator only works if there is a writeable instance dictionary, so it won't work with __slots__ or metaclasses.\n\nAlso the writeback does not play well with PEP 412 key-sharing dicts, so you lose the space savings.\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321201671532285952",
            "tweet_type": "Others",
            "created_at": "2020-10-27T21:26:40.000Z"
        },
        {
            "id": 3309,
            "username": "raymondh",
            "tweet_id": "1321201674271113217",
            "tweet_text": "For cached_property(), being a non-data descriptor is the key to how it works.\n\nWhen it is first called, the result is written back to the instance dictionary.  Subsequent calls find the attribute instead of the cached property.\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321201671532285952",
            "tweet_type": "Others",
            "created_at": "2020-10-27T21:26:40.000Z"
        },
        {
            "id": 3310,
            "username": "raymondh",
            "tweet_id": "1321201673428107265",
            "tweet_text": "&gt;&gt;&gt; d = {'__get__', '__set__', '__delete__'}\n\n&gt;&gt;&gt; d &amp; set(dir(property))\n{'__set__', '__get__', '__delete__'}\n&gt;&gt;&gt; d &amp; set(dir(lambda : None))\n{'__get__'}\n&gt;&gt;&gt; d &amp; set(dir(classmethod))\n{'__get__'}\n&gt;&gt;&gt; d &amp; set(dir(cached_property))\n{'__get__'}\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321201671532285952",
            "tweet_type": "Others",
            "created_at": "2020-10-27T21:26:40.000Z"
        },
        {
            "id": 3311,
            "username": "raymondh",
            "tweet_id": "1321201672656281601",
            "tweet_text": "class A:\n\n@property\ndef p(self):\nreturn 'boop'\n\ndef m(self):\nreturn 'pop'\n\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.p\n'boop'\n&gt;&gt;&gt; a.m()\n'pop'\n\n&gt;&gt;&gt; vars(a)['p'] = 'hiss'\n&gt;&gt;&gt; vars(a)['m'] = 'bonk'\n\n&gt;&gt;&gt; a.p      # instance variable ignored\n'boop'\n&gt;&gt;&gt; a.m      # instance variable honored\n'bonk'\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321201671532285952",
            "tweet_type": "Others",
            "created_at": "2020-10-27T21:26:40.000Z"
        },
        {
            "id": 3312,
            "username": "raymondh",
            "tweet_id": "1321201671532285952",
            "tweet_text": "#Python tip:  A descriptor defining __set__() or __delete__() is considered a data descriptor and has precedence over an instance variable with the same name.\n\nproperty() is a data descriptor.\n\nFunction, classmethod, staticmethod, and cached_property are non-data descriptors.\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1321201671532285952",
            "tweet_type": "Python tips",
            "created_at": "2020-10-27T21:26:39.000Z"
        },
        {
            "id": 3313,
            "username": "raymondh",
            "tweet_id": "1320835737462263808",
            "tweet_text": "5/ People are always asking about how to kill another thread.\n\nWe don't provide an API for that.\n\nReason: you never know when that thread is holding a lock.\n\nBut if you're clever, you can use ctypes to kill it.\n\nAfterwards, feel free to contract me for help with the deadlocks. \ud83e\udd72",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320835734702469120",
            "tweet_type": "Others",
            "created_at": "2020-10-26T21:12:34.000Z"
        },
        {
            "id": 3314,
            "username": "raymondh",
            "tweet_id": "1320835736866676736",
            "tweet_text": "4/ Integers are immutable in #Python, but if you're clever, ctypes can be used to alter the value field.\n\nNothing good can come of this. \ud83e\udd78",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320835734702469120",
            "tweet_type": "Others",
            "created_at": "2020-10-26T21:12:34.000Z"
        },
        {
            "id": 3315,
            "username": "raymondh",
            "tweet_id": "1320835736166305792",
            "tweet_text": "3/ Once upon a time, True and False weren't keywords.\n\nYou could write:\n\n     True, False = False, True\n\nand watch the world fall apart.\n\nUltimately, it was decided that constants should be constant. \ud83d\ude07",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320835734702469120",
            "tweet_type": "Others",
            "created_at": "2020-10-26T21:12:34.000Z"
        },
        {
            "id": 3316,
            "username": "raymondh",
            "tweet_id": "1320835735398707200",
            "tweet_text": "2/ Today a Pythonista wanted to how to make \"C() is None\" always return True, by overriding #Python's is-operator.\n\n@ramalhoorg correctly advised that this would be \"catastrophic\".\n\nThis conversation is still continuing as people look for ways to lie about object identity. \ud83e\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320835734702469120",
            "tweet_type": "Others",
            "created_at": "2020-10-26T21:12:33.000Z"
        },
        {
            "id": 3317,
            "username": "raymondh",
            "tweet_id": "1320835734702469120",
            "tweet_text": "1/ Many years ago, I maintained General Ledger software.\n\nA customer wanted to know how to disable the debits==credits check. We strongly advised against it. Never the less, the customer demanded to know.\n\nA month later, they called back saying their books were out of balance \ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320835734702469120",
            "tweet_type": "Others",
            "created_at": "2020-10-26T21:12:33.000Z"
        },
        {
            "id": 3318,
            "username": "raymondh",
            "tweet_id": "1320415642525134848",
            "tweet_text": "5/ The @cache decorator is new in #Python version 3.9.\n\nPrior to that, you can get the same effect with an lru_cache where the maxsize is set to None:\n\n@lru_cache(maxsize=None)\ndef f(x):\n   ...\n\nSo, really @cache is just a pretty way to spell it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320411456597209089",
            "tweet_type": "Others",
            "created_at": "2020-10-25T17:23:15.000Z"
        },
        {
            "id": 3319,
            "username": "raymondh",
            "tweet_id": "1320411461194190848",
            "tweet_text": "4/ It's implemented with fast C code, equivalent to:\n\nkey = make_key(args, kwds, typed)\nresult = cache_get(key, sentinel)\nif result is not sentinel:\n    hits += 1\n    return result\nmisses += 1\nresult = user_function(*args, **kwds)\ncache[key] = result\nreturn result",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320411456597209089",
            "tweet_type": "Others",
            "created_at": "2020-10-25T17:06:39.000Z"
        },
        {
            "id": 3320,
            "username": "raymondh",
            "tweet_id": "1320411458425909248",
            "tweet_text": "3/ Behind the scenes, there is a single dictionary lookup and a counter increment.\n\nSome kinds arguments will take longer to hash, but you get the idea, @cache has very little overhead.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320411456597209089",
            "tweet_type": "Others",
            "created_at": "2020-10-25T17:06:38.000Z"
        },
        {
            "id": 3321,
            "username": "raymondh",
            "tweet_id": "1320411457607983105",
            "tweet_text": "2/ Here are the timings:\n\n$ python3.9 -m timeit -r11 -s 'def s(x):pass' 's(5)'\n5000000 loops, best of 11: 72.1 nsec per loop\n\n$ python3.9 -m timeit -r11 -s 'from functools import cache' -s 'def s(x):pass' -s 'c=cache(s)' 'c(5)'\n5000000 loops, best of 11: 60.6 nsec per loop",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320411456597209089",
            "tweet_type": "Others",
            "created_at": "2020-10-25T17:06:38.000Z"
        },
        {
            "id": 3322,
            "username": "raymondh",
            "tweet_id": "1320411456597209089",
            "tweet_text": "1/ #Python tip:  The functools.cache() decorator is astonishingly fast.\n\nEven an empty function that returns None can be sped-up by caching it. \ud83e\udd28\n\nhttps://t.co/quBgxkdDdD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320411456597209089",
            "tweet_type": "Python tips",
            "created_at": "2020-10-25T17:06:37.000Z"
        },
        {
            "id": 3323,
            "username": "raymondh",
            "tweet_id": "1320102411470426113",
            "tweet_text": "Here is the new rendered version with those edits:\n\nhttps://t.co/9wk2aZSdTy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320019801784213506",
            "tweet_type": "Others",
            "created_at": "2020-10-24T20:38:35.000Z"
        },
        {
            "id": 3324,
            "username": "raymondh",
            "tweet_id": "1320102410656727040",
            "tweet_text": "Here's a  live draft for the second round of edits.\n\nIn particular, please look at the new Descriptor Example:\n\nhttps://t.co/SGhnW4KUkg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320019801784213506",
            "tweet_type": "Others",
            "created_at": "2020-10-24T20:38:35.000Z"
        },
        {
            "id": 3325,
            "username": "raymondh",
            "tweet_id": "1320019801784213506",
            "tweet_text": "The #Python descriptor howto guide has been updated to include a gentle primer and a complete practical example.\n\nI'm working on a second round of edits now. Let me know if you have any suggestions.\n\nhttps://t.co/ZUUb8TDj1f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1320019801784213506",
            "tweet_type": "Others",
            "created_at": "2020-10-24T15:10:20.000Z"
        },
        {
            "id": 3326,
            "username": "raymondh",
            "tweet_id": "1319533718998904832",
            "tweet_text": "Here's a better link:\n\nhttps://t.co/4XWsYRp9zS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1319526252282171394",
            "tweet_type": "Others",
            "created_at": "2020-10-23T06:58:49.000Z"
        },
        {
            "id": 3327,
            "username": "raymondh",
            "tweet_id": "1319526252282171394",
            "tweet_text": "#Python user feedback wanted.  I'm adding a gentle primer and a complete example to the Descriptor HowTo guide.\n\nPlease read through it and let me know what you think about it and whether you have any suggestions.\n\nhttps://t.co/2wRDD5HrCe",
            "tweet_media": "[]",
            "tweet_conversation_id": "1319526252282171394",
            "tweet_type": "Others",
            "created_at": "2020-10-23T06:29:08.000Z"
        },
        {
            "id": 3328,
            "username": "raymondh",
            "tweet_id": "1319383948972101633",
            "tweet_text": "#Python tip:   Remember that https://t.co/0cJdoMoGGO is a function and https://t.co/BCvhwJd1mr is an integer.\n\nI've long known this and would never accidentally write:\n\n    logging.basicConfig(level=https://t.co/0cJdoMoGGO)\n\nThat would never happen.\nNo siree.\nNoch nie.\nNunca.\n\ud83e\udd25",
            "tweet_media": "[]",
            "tweet_conversation_id": "1319383948972101633",
            "tweet_type": "Python tips",
            "created_at": "2020-10-22T21:03:41.000Z"
        },
        {
            "id": 3329,
            "username": "raymondh",
            "tweet_id": "1318618553562525697",
            "tweet_text": "Would any of you be interested if I offered one-day online course to level-up your statistics and data analysis skills?\n\n7/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318616781871669249",
            "tweet_type": "Others",
            "created_at": "2020-10-20T18:22:16.000Z"
        },
        {
            "id": 3330,
            "username": "raymondh",
            "tweet_id": "1318616785592053760",
            "tweet_text": "For more on Solution 1, see:\n\nhttps://t.co/q1CGgCQE6k\n\nFor more on Solution 2, see:\n\nhttps://t.co/2pmSW1NrFV\n\nFor more on Solution 3, see:\n\nhttps://t.co/IP7EugMjnJ\n\n6/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318616781871669249",
            "tweet_type": "Others",
            "created_at": "2020-10-20T18:15:15.000Z"
        },
        {
            "id": 3331,
            "username": "raymondh",
            "tweet_id": "1318616784807686146",
            "tweet_text": "Solution 3:  Approximation using a simulation\n\n&gt;&gt;&gt; from random import choices\n&gt;&gt;&gt; from statistics import mean\n\n&gt;&gt;&gt; def trial():\n        return choices(('Python', 'Ruby'), (p, q), k=n).count('Python')\n\n&gt;&gt;&gt; mean(trial() &lt;= k for i in range(10_000))\n0.8398\n\n5/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318616781871669249",
            "tweet_type": "Others",
            "created_at": "2020-10-20T18:15:14.000Z"
        },
        {
            "id": 3332,
            "username": "raymondh",
            "tweet_id": "1318616784077942784",
            "tweet_text": "Solution 2:  Approximation with a normal distribution\n\n&gt;&gt;&gt; from statistics import NormalDist\n&gt;&gt;&gt; from math import sqrt\n\n&gt;&gt;&gt; round(NormalDist(mu=n*p, sigma=sqrt(n*p*q)).cdf(k + 0.5), 4)\n0.8402\n\n4/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318616781871669249",
            "tweet_type": "Others",
            "created_at": "2020-10-20T18:15:14.000Z"
        },
        {
            "id": 3333,
            "username": "raymondh",
            "tweet_id": "1318616783394201600",
            "tweet_text": "Solution 1:  Cumulative binomial distribution\n\n&gt;&gt;&gt; from math import comb, fsum\n\n&gt;&gt;&gt; round(fsum(comb(n, r) * p**r * q**(n-r) for r in range(k+1)), 4)\n0.8402\n\n3/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318616781871669249",
            "tweet_type": "Others",
            "created_at": "2020-10-20T18:15:14.000Z"
        },
        {
            "id": 3334,
            "username": "raymondh",
            "tweet_id": "1318616782635069440",
            "tweet_text": "Here are the parameters:\n\nn = 750             # Number of attendees\np = 0.65            # Preference for Python\nq = 1.0 - p         # Preference for Ruby\nk = 500             # Room capacity\n\nTry it yourself before looking at the three difference solutions that follow.\n\n2/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318616781871669249",
            "tweet_type": "Others",
            "created_at": "2020-10-20T18:15:14.000Z"
        },
        {
            "id": 3335,
            "username": "raymondh",
            "tweet_id": "1318616781871669249",
            "tweet_text": "A conference has 750 people and 2 rooms with a\n500 person capacity. One talk is about Python and the other about Ruby.\n\nHistorically, 65% of the attendees preferred to listen to #Python talks.  What is the probability that the Python room will stay within its capacity limits?\n\n1/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318616781871669249",
            "tweet_type": "Others",
            "created_at": "2020-10-20T18:15:14.000Z"
        },
        {
            "id": 3336,
            "username": "raymondh",
            "tweet_id": "1318260360789454848",
            "tweet_text": "#Python PSA:  Add this to your .gitattributes file:\n\n*.py    diff=python\n\nThis will help diff make a better choice about which context line to display in the hunk header.\n\nhttps://t.co/t7KchohL3m",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318260360789454848",
            "tweet_type": "Others",
            "created_at": "2020-10-19T18:38:56.000Z"
        },
        {
            "id": 3337,
            "username": "raymondh",
            "tweet_id": "1318242020461367296",
            "tweet_text": "#Python grammar pop quiz:  Will this assertion succeed or fail?  Why?\n\nt = 10 + 1, 20 + 2\nassert t == 11, 22",
            "tweet_media": "[]",
            "tweet_conversation_id": "1318242020461367296",
            "tweet_type": "Others",
            "created_at": "2020-10-19T17:26:04.000Z"
        },
        {
            "id": 3338,
            "username": "raymondh",
            "tweet_id": "1317899013589331968",
            "tweet_text": "# Conversion to float and back doesn't round-trip:\n\n&gt;&gt;&gt; Decimal(float(Decimal('1.1')))\nDecimal('1.100000000000000088817841970012523233890533447265625')\n\n&gt;&gt;&gt; Fraction(float(Fraction(8, 9)))\nFraction(2001599834386887, 2251799813685248)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317897021219426304",
            "tweet_type": "Others",
            "created_at": "2020-10-18T18:43:04.000Z"
        },
        {
            "id": 3339,
            "username": "raymondh",
            "tweet_id": "1317897022104457216",
            "tweet_text": "# Lossless conversions:\n\n&gt;&gt;&gt; Fraction(True)\nFraction(1, 1)\n&gt;&gt;&gt; Fraction(100)\nFraction(100, 1)\n&gt;&gt;&gt; Fraction(5.75)\nFraction(23, 4)\n&gt;&gt;&gt; Fraction(Decimal('3.1'))\nFraction(31, 10)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317897021219426304",
            "tweet_type": "Others",
            "created_at": "2020-10-18T18:35:10.000Z"
        },
        {
            "id": 3340,
            "username": "raymondh",
            "tweet_id": "1317897021219426304",
            "tweet_text": "#Python's numeric tower has Integral inheriting from Rational which inherits from Real.  That suggests treating float() as a common type.\n\nBut if you want lossless conversion, use Fraction() because it can exactly express the values in bool(), int(), float(), and Decimal().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317897021219426304",
            "tweet_type": "Others",
            "created_at": "2020-10-18T18:35:09.000Z"
        },
        {
            "id": 3341,
            "username": "raymondh",
            "tweet_id": "1317655079076331520",
            "tweet_text": "The origin of the float_info constants is the C language spec's model for floats:\n\nx = sign * base ** exp * sum(fraction[k] * base ** -k for k in range(1, prec+1))\n\nThe  sum \u00bdb\u2081 + \u00bcb\u2082 + \u215bb\u2083 + \u2026 starts with one-half which is why the exponent is one less than expected.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317558839588212736",
            "tweet_type": "Others",
            "created_at": "2020-10-18T02:33:46.000Z"
        },
        {
            "id": 3342,
            "username": "raymondh",
            "tweet_id": "1317652878404669440",
            "tweet_text": "The min/max exponents are for mantissas in the range 0.5 \u2264 x &lt; 1.0.\n \n&gt;&gt;&gt; ldexp(0.5, -1021) == float_info.min\nTrue\n&gt;&gt;&gt; ldexp(1.0 - float_info.epsilon/2, 1024) == float_info.max\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317558839588212736",
            "tweet_type": "Others",
            "created_at": "2020-10-18T02:25:01.000Z"
        },
        {
            "id": 3343,
            "username": "raymondh",
            "tweet_id": "1317651629596835840",
            "tweet_text": "The resolution of the paradoxes lies in knowing that none of float_info constants has the expected meaning \ud83e\uddd0\n\nmin_10_exp: lowest integer exponent where 10**exp is a  normalized floating-point number.\n\n2.23-308 is normalized.\n1E-308 isn't.\n\nSee \u00a7371 in https://t.co/fJbH2IVzXr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317558839588212736",
            "tweet_type": "Others",
            "created_at": "2020-10-18T02:20:03.000Z"
        },
        {
            "id": 3344,
            "username": "raymondh",
            "tweet_id": "1317558840292896768",
            "tweet_text": "#3) Can it really be the maximum if it overflows?\n\n&gt;&gt;&gt; float_info.max_exp\n1024\n\n&gt;&gt;&gt; 2.0 ** float_info.max_exp\n...\nOverflowError: (34, 'Result too large')\n\n&gt;&gt;&gt; math.ldexp(1.0,  float_info.max_exp)\n...\nOverflowError: math range error",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317558839588212736",
            "tweet_type": "Others",
            "created_at": "2020-10-17T20:11:21.000Z"
        },
        {
            "id": 3345,
            "username": "raymondh",
            "tweet_id": "1317558839588212736",
            "tweet_text": "Can you resolve these three #Python floating point paradoxes?\n\n&gt;&gt;&gt; float_info.min_10_exp\n-307\n\n#1) Lower than the minimum?\n&gt;&gt;&gt; float_info.min\n2.2250738585072014e-308\n\n&gt;&gt;&gt; float_info.min_exp\n-1021\n\n#2) Lower than the minimum?\n&gt;&gt;&gt; float_info.min == 2 ** -1022\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1317558839588212736",
            "tweet_type": "Others",
            "created_at": "2020-10-17T20:11:21.000Z"
        },
        {
            "id": 3346,
            "username": "raymondh",
            "tweet_id": "1316882360260988928",
            "tweet_text": "6/ Python floats have the concept of NaNs and Infinities.  Neither of these is a feature of the real numbers you learned in school.\n\nPython floats also have signed zeros but real numbers don't:\n\n&gt;&gt;&gt; 0.0\n0.0\n&gt;&gt;&gt; -0.0\n-0.0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316882355043266561",
            "tweet_type": "Others",
            "created_at": "2020-10-15T23:23:15.000Z"
        },
        {
            "id": 3347,
            "username": "raymondh",
            "tweet_id": "1316882357995986945",
            "tweet_text": "5/ Since floats have finite precision, basic mathematical relationships reach a breaking point:\n\n&gt;&gt;&gt; x = 12345678901234567.0\n&gt;&gt;&gt; x == x + 1\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316882355043266561",
            "tweet_type": "Others",
            "created_at": "2020-10-15T23:23:15.000Z"
        },
        {
            "id": 3348,
            "username": "raymondh",
            "tweet_id": "1316882357308149761",
            "tweet_text": "4/ Ints have some methods that floats don't have.  Likewise, floats have some methods that ints don't have.\n\n&gt;&gt;&gt; set(dir(int)) - set(dir(float))\n{'from_bytes', 'to_bytes', 'bit_length', ...}\n\n&gt;&gt;&gt; set(dir(float)) - set(dir(int))\n{'hex', 'is_integer', 'fromhex', ...}",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316882355043266561",
            "tweet_type": "Others",
            "created_at": "2020-10-15T23:23:15.000Z"
        },
        {
            "id": 3349,
            "username": "raymondh",
            "tweet_id": "1316882356469342210",
            "tweet_text": "3/ In Python, all floats and Decimals are rational.  So, irrational numbers aren't really irrational \ud83d\ude44\n\n&gt;&gt;&gt; https://t.co/gIk9ajfjcm_integer_ratio()\n(884279719003555, 281474976710656)\n\nOf course, special values like NaN and Inf are special in this regard.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316882355043266561",
            "tweet_type": "Others",
            "created_at": "2020-10-15T23:23:14.000Z"
        },
        {
            "id": 3350,
            "username": "raymondh",
            "tweet_id": "1316882355764645888",
            "tweet_text": "2/ In Python, there are more ints and Fractions than there are floats.\n\nSince Python ints and Fractions are unbounded, there are countably infinitely many of them.\n\nBut floats have to fit in a 64-bit C double, so there are only a finite number of them. \ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316882355043266561",
            "tweet_type": "Others",
            "created_at": "2020-10-15T23:23:14.000Z"
        },
        {
            "id": 3351,
            "username": "raymondh",
            "tweet_id": "1316882355043266561",
            "tweet_text": "1/ #Python inconvenient truth:   The number systems we learned in pure math are somewhat different from their concrete counterparts in Python.\n\nIn pure math, \u2124 \u2282 \u211a \u2282 \u211d.  Integers are a proper subset of rationals which are themselves a proper subset of the real numbers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316882355043266561",
            "tweet_type": "Others",
            "created_at": "2020-10-15T23:23:14.000Z"
        },
        {
            "id": 3352,
            "username": "raymondh",
            "tweet_id": "1316494025554186240",
            "tweet_text": "* rub off on",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316467183837278208",
            "tweet_type": "Others",
            "created_at": "2020-10-14T21:40:09.000Z"
        },
        {
            "id": 3353,
            "username": "raymondh",
            "tweet_id": "1316471393517625344",
            "tweet_text": "Collaborating with Allen Downey and Tim Peters is a wonderful experience.\n\nI have a secret hope that some of their superpowers will rub on me.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316467183837278208",
            "tweet_type": "Others",
            "created_at": "2020-10-14T20:10:13.000Z"
        },
        {
            "id": 3354,
            "username": "raymondh",
            "tweet_id": "1316467183837278208",
            "tweet_text": "Today, a new #Python recipe was added to the random module docs. https://t.co/uEl731sx8s",
            "tweet_media": "[]",
            "tweet_conversation_id": "1316467183837278208",
            "tweet_type": "Others",
            "created_at": "2020-10-14T19:53:30.000Z"
        },
        {
            "id": 3355,
            "username": "raymondh",
            "tweet_id": "1315855141183004672",
            "tweet_text": "#Python happenings:  It seems like the proposal for indexing with keyword arguments has come back to life.\n\n@dabeaz @ramalhoorg  What say you?  Net decrease or increase in language complexity?\n\nhttps://t.co/3iIezp6MIJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1315855141183004672",
            "tweet_type": "Others",
            "created_at": "2020-10-13T03:21:27.000Z"
        },
        {
            "id": 3356,
            "username": "raymondh",
            "tweet_id": "1314729569279074304",
            "tweet_text": "#Python floating point lingo:  A \"binade\" is the set of numbers in a binary IEEE 754 floating-point format that all have the same exponent. In other words, a binade is the interval [2n, 2n+1) for some integer n.\n\nAll mantissas returned by math.frexp() lie in the same binade.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1314729569279074304",
            "tweet_type": "Others",
            "created_at": "2020-10-10T00:48:50.000Z"
        },
        {
            "id": 3357,
            "username": "raymondh",
            "tweet_id": "1312851500679356416",
            "tweet_text": "3/ #Python code:\n\n&gt;&gt;&gt; (0.05954861408025609).as_integer_ratio()\n(4290929858916333, 72057594037927936)\n\n&gt;&gt;&gt; 2 ** 56\n72057594037927936\n\ndef my_random():\n    return randrange(2**53) * 2.0**-53",
            "tweet_media": "[]",
            "tweet_conversation_id": "1312851498934575104",
            "tweet_type": "Others",
            "created_at": "2020-10-04T20:26:04.000Z"
        },
        {
            "id": 3358,
            "username": "raymondh",
            "tweet_id": "1312851499823759361",
            "tweet_text": "2/ The random() function starts with an integer in the range 0 \u2264 X &lt; 2\u2075\u00b3 and divides it by 2\u2075\u00b3 to give a random float.\n\n0.05954861408025609 isn't possible because its binary fraction, 4290929858916333 \u00f7 2\u2075\u2076, has a denominator that is greater than 2\u2075\u00b3.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1312851498934575104",
            "tweet_type": "Others",
            "created_at": "2020-10-04T20:26:03.000Z"
        },
        {
            "id": 3359,
            "username": "raymondh",
            "tweet_id": "1312851498934575104",
            "tweet_text": "1/ #Python factlet:  random() gives you floats in the range 0.0 \u2264 X &lt; 1.0, but not all floats in that range are possible selections.\n\nFor example, 0.05954861408025609 isn't a possible selection.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1312851498934575104",
            "tweet_type": "Others",
            "created_at": "2020-10-04T20:26:03.000Z"
        },
        {
            "id": 3360,
            "username": "raymondh",
            "tweet_id": "1312239865103220736",
            "tweet_text": "#Python tip from Benjamin Franklin:\n\nThose who would give up high cohesion and loose coupling, to purchase a little convenience or speed, deserve the lifetime of maintenance problems that will ensue.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1312239865103220736",
            "tweet_type": "Others",
            "created_at": "2020-10-03T03:55:38.000Z"
        },
        {
            "id": 3361,
            "username": "raymondh",
            "tweet_id": "1311835589612720128",
            "tweet_text": "4/ The cost-benefit analysis isn't always easy:\n\n* Tools don't seem complex to the person who built them.\n\n* New tools create new problems you didn't have before.\n\n* Tools that work well in isolation don't necessary work well together.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311835587255689221",
            "tweet_type": "Others",
            "created_at": "2020-10-02T01:09:11.000Z"
        },
        {
            "id": 3362,
            "username": "raymondh",
            "tweet_id": "1311835588924854272",
            "tweet_text": "3/ This isn't to pick on the enum tool \u2013 lots of people like it.\n\nThe goal is to habitually ask whether a solution is more complex than the problem it solves.\n\nThe answer isn't fixed. It depends on your tolerance for complexity and on how much you care about the problem.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311835587255689221",
            "tweet_type": "Others",
            "created_at": "2020-10-02T01:09:11.000Z"
        },
        {
            "id": 3363,
            "username": "raymondh",
            "tweet_id": "1311835588106940416",
            "tweet_text": "2/ The enum module has proven to be popular.\n\nOTOH few people know the module very well. It has 1,000 lines of complex code backed by 5,000 words of docs.\n\nThe problem solved is changing the repr of https://t.co/HYkGRDCwfx_INET from:\n\n  2\n\nto:\n\n  &lt;https://t.co/90KY4Eeq3T_INET: 2&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311835587255689221",
            "tweet_type": "Others",
            "created_at": "2020-10-02T01:09:11.000Z"
        },
        {
            "id": 3364,
            "username": "raymondh",
            "tweet_id": "1311835587255689221",
            "tweet_text": "1/ Programming in the large is almost entirely about management of complexity.\n\nWhen evaluating additions to the #Python standard library, it is reasonable to ask whether a solution is more complex than the problem it solves.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311835587255689221",
            "tweet_type": "Others",
            "created_at": "2020-10-02T01:09:11.000Z"
        },
        {
            "id": 3365,
            "username": "raymondh",
            "tweet_id": "1311191591663489027",
            "tweet_text": "Best reply so far :-)\nThis one definitely needs underscores! https://t.co/wlDmiNIufk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311191591663489027",
            "tweet_type": "Others",
            "created_at": "2020-09-30T06:30:10.000Z"
        },
        {
            "id": 3366,
            "username": "raymondh",
            "tweet_id": "1311009985283854336",
            "tweet_text": "More excellent examples, courtesy of Aaron Meurer: https://t.co/q1Lx5Dhrty",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311009985283854336",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:28:32.000Z"
        },
        {
            "id": 3367,
            "username": "raymondh",
            "tweet_id": "1311008418480570370",
            "tweet_text": "It is little known that Sauron had his own orc/hobbit crossbreed from an anti-shire in Mordor.  Frodo's doppelganger was named \"Fromordinal\".",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:22:18.000Z"
        },
        {
            "id": 3368,
            "username": "raymondh",
            "tweet_id": "1311006487750164480",
            "tweet_text": "Is _abcoll.py short for:\n\n   abc_oll.py\n\nor:\n\n   ab_coll.py\n\nAnswer:  None of the above. \ud83d\ude07",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:14:38.000Z"
        },
        {
            "id": 3369,
            "username": "raymondh",
            "tweet_id": "1311004449251360771",
            "tweet_text": "Another tidbit of hard won programming wisdom: https://t.co/TeFdW9lAnI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311004449251360771",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:06:32.000Z"
        },
        {
            "id": 3370,
            "username": "raymondh",
            "tweet_id": "1311003488877338624",
            "tweet_text": "9/ Seriously, we have tab completion nowadays, so saving one keystroke isn't much of an advantage.\n\nAlso, we spend *much* more time reading code than writing it.\n\nAs Uncle Timmy taught us in the Zen of Python:\n\n    Readability counts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:43.000Z"
        },
        {
            "id": 3371,
            "username": "raymondh",
            "tweet_id": "1311003488164278273",
            "tweet_text": "8/ Omitting the underscore isn't always bad.\n\nPeople seem to have no problem with:\n\n    d = dict.fromkeys(data)\n\nBut it still would have been a little more readable as:\n\n    d = dict.from_keys(data)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:43.000Z"
        },
        {
            "id": 3372,
            "username": "raymondh",
            "tweet_id": "1311003487476412419",
            "tweet_text": "7/ In the datetime module, many of the names could read better:\n\nfromisocalendar \u27f6 from_iso_calendar\nfromisoformat \u27f6 from_iso_format\nfromordinal \u27f6 from_ordinal\nisoweekday \u27f6 iso_weekday",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:43.000Z"
        },
        {
            "id": 3373,
            "username": "raymondh",
            "tweet_id": "1311003486776033282",
            "tweet_text": "6/ The statistics module also has a minor irritant:\n\n    stdev()\n\nThe \"dev\" part clearly relates to \"deviation\".\n\nSo that leaves \"st\" for \"standard\" rather than the expected \"std\".\n\nThat said, other established APIs are evenly split between stdev() and stddev().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:43.000Z"
        },
        {
            "id": 3374,
            "username": "raymondh",
            "tweet_id": "1311003485324759041",
            "tweet_text": "5/ From https://t.co/oLLyuly7Qc:\n\nThe submodule used to be named:  _abcoll.py\n\nThat was short for ABCs (abstract base classes) for Collections.   \n\nNote that there is only one C in the module name\ud83e\udd14.\n\nOne day I couldn't stand it, so now it is named:\n\n_collections_abc.py",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:42.000Z"
        },
        {
            "id": 3375,
            "username": "raymondh",
            "tweet_id": "1311003484624310272",
            "tweet_text": "4/ From itertools:\n\nThe islice() tool should have been called \"iter_slice()\" so it wouldn't be misread as \"is_lice\".\n\nBTW, the answer is no.  There are no lice in the itertools module \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:42.000Z"
        },
        {
            "id": 3376,
            "username": "raymondh",
            "tweet_id": "1311003483936489472",
            "tweet_text": "3/ From urllib:\n\nThe name \"addinfourl\" is terrible.  \n\nFor me, it shimmers like an optical illusion between \"add_in_four_l\" and \"add_info_url\".",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:42.000Z"
        },
        {
            "id": 3377,
            "username": "raymondh",
            "tweet_id": "1311003483231854593",
            "tweet_text": "2/ From the math module:\n\nif not isfinite(x):\n    ...\n\nIt is so easy to ready this as \"not infinite(x)\" rather than \"not is_finite\".\n\nArguably, the \"is\" could have been dropped altogether:\n\nif not finite(x):\n    ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Others",
            "created_at": "2020-09-29T18:02:42.000Z"
        },
        {
            "id": 3378,
            "username": "raymondh",
            "tweet_id": "1311003482531401729",
            "tweet_text": "1/ #Python tip:  Resist the urge to elide the underscore in multiword function or method names.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1311003482531401729",
            "tweet_type": "Python tips",
            "created_at": "2020-09-29T18:02:42.000Z"
        },
        {
            "id": 3379,
            "username": "raymondh",
            "tweet_id": "1309938312459595776",
            "tweet_text": "People also seem to have enjoyed my 45 minute talk on #python's super().\n\nhttps://t.co/uMGsbUAev0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1309935931818831874",
            "tweet_type": "Others",
            "created_at": "2020-09-26T19:30:05.000Z"
        },
        {
            "id": 3380,
            "username": "raymondh",
            "tweet_id": "1309935931818831874",
            "tweet_text": "The instructions for how to successfully use #Python's super() has been my most successful bit of technical writing.\n\nIt has had over a half-million readers.  If if it were a book, it might have been a New York Times bestseller \ud83e\udd74\n\nhttps://t.co/vV0CaKdXyt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1309935931818831874",
            "tweet_type": "Others",
            "created_at": "2020-09-26T19:20:38.000Z"
        },
        {
            "id": 3381,
            "username": "raymondh",
            "tweet_id": "1309578865434484736",
            "tweet_text": "#Python tip:  A \"bag\" of objects can be modeled with collections.Counter().  To get the individual values out of the bag, use the elements() method:\n\n&gt;&gt;&gt; bag_of_colors = Counter(red=3, blue=1, yellow=1)\n&gt;&gt;&gt; list(bag_of_colors.elements())\n['red', 'red', 'red', 'blue', 'yellow']",
            "tweet_media": "[]",
            "tweet_conversation_id": "1309578865434484736",
            "tweet_type": "Python tips",
            "created_at": "2020-09-25T19:41:46.000Z"
        },
        {
            "id": 3382,
            "username": "raymondh",
            "tweet_id": "1309014838304268288",
            "tweet_text": "Amusing excerpt from the Google C++ style guide:\n\nfor (int i = 0; i &lt; kSomeNumber; ++i)\n  printf(\"I love you\\n\");\n\nfor (int i = 0; i &lt; kSomeNumber; ++i) {\n  printf(\"I take it back\\n\");\n}\n\nhttps://t.co/Xr2fmwotos",
            "tweet_media": "[]",
            "tweet_conversation_id": "1309014838304268288",
            "tweet_type": "Others",
            "created_at": "2020-09-24T06:20:32.000Z"
        },
        {
            "id": 3383,
            "username": "raymondh",
            "tweet_id": "1307371458696368128",
            "tweet_text": "3/ In contrast, dict() accepts another dict or an iterable of key/value pairs.\n\n&gt;&gt;&gt; pairs = [('red', 3), ('blue', 2), ('green', 1)]\n&gt;&gt;&gt; dict(pairs)\n{'red': 3, 'blue': 2, 'green': 1}",
            "tweet_media": "[]",
            "tweet_conversation_id": "1307371456909643776",
            "tweet_type": "Others",
            "created_at": "2020-09-19T17:30:20.000Z"
        },
        {
            "id": 3384,
            "username": "raymondh",
            "tweet_id": "1307371457849122817",
            "tweet_text": "2/ Counter() accepts a dict or an iterable of elements to be counted.\n\n&gt;&gt;&gt; colors = ['red', 'red', 'blue', 'red', 'green', 'blue']\n&gt;&gt;&gt; Counter(colors)\nCounter({'red': 3, 'blue': 2, 'green': 1})",
            "tweet_media": "[]",
            "tweet_conversation_id": "1307371456909643776",
            "tweet_type": "Others",
            "created_at": "2020-09-19T17:30:19.000Z"
        },
        {
            "id": 3385,
            "username": "raymondh",
            "tweet_id": "1307371456909643776",
            "tweet_text": "1/ #Python tip:  To load a Counter when the counts are known in advance, first build a dict:\n\n&gt;&gt;&gt; colors = ['red', 'green', 'blue', 'orange']\n&gt;&gt;&gt; counts = [150, 125, 800, 575]\n&gt;&gt;&gt; Counter(dict(zip(colors, counts)))\nCounter({'blue': 800, 'orange': 575, 'red': 150, 'green': 125})",
            "tweet_media": "[]",
            "tweet_conversation_id": "1307371456909643776",
            "tweet_type": "Python tips",
            "created_at": "2020-09-19T17:30:19.000Z"
        },
        {
            "id": 3386,
            "username": "raymondh",
            "tweet_id": "1307098790009110529",
            "tweet_text": "Me: What is my name?\nSiri: Your name is Laura but I will call you \"sexy\"\nMe: What is my full name?\nSiri: Sorry\nMe: What is my email address?\nSiri: Sorry\nMe: Notify owner their iphone is lost.\nSiri: Sorry\n\nSo, I turned the phone into lost and found.  Hope it finds its way home. \ud83d\ude1f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1307096871232516096",
            "tweet_type": "Others",
            "created_at": "2020-09-18T23:26:50.000Z"
        },
        {
            "id": 3387,
            "username": "raymondh",
            "tweet_id": "1307096871232516096",
            "tweet_text": "Locked iphones have an Emergency Call button.  They should also have a Notify Owner That Their Phone is Lost button.  That could send an email via their iTunes account with a message about where to find their phone.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1307096871232516096",
            "tweet_type": "Others",
            "created_at": "2020-09-18T23:19:13.000Z"
        },
        {
            "id": 3388,
            "username": "raymondh",
            "tweet_id": "1306387490048098304",
            "tweet_text": "#Python typing question:  Is there ever a time when you would need to write \"Union[float, int]\" rather than just \"float\" for a function input?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1306387490048098304",
            "tweet_type": "Others",
            "created_at": "2020-09-17T00:20:23.000Z"
        },
        {
            "id": 3389,
            "username": "raymondh",
            "tweet_id": "1305073120886226944",
            "tweet_text": "There are some people who routinely post issues that roughly equate to, \"you built a me car, so I drove it off a cliff and now want to complain about its aerodynamics on the way down\".",
            "tweet_media": "[]",
            "tweet_conversation_id": "1305073120886226944",
            "tweet_type": "Others",
            "created_at": "2020-09-13T09:17:33.000Z"
        },
        {
            "id": 3390,
            "username": "raymondh",
            "tweet_id": "1304521506463064066",
            "tweet_text": "#Python tip:  Counters can easily be converted to and from regular dictionaries:\n\n&gt;&gt;&gt; c = Counter(a=10, b=5)\n&gt;&gt;&gt; d = dict(c)\n&gt;&gt;&gt; d\n{'a': 10, 'b': 5}\n&gt;&gt;&gt; Counter(d)\nCounter({'a': 10, 'b': 5})\n\nBoth directions use fast C code that copies the hash tables and updates ref counts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1304521506463064066",
            "tweet_type": "Python tips",
            "created_at": "2020-09-11T20:45:38.000Z"
        },
        {
            "id": 3391,
            "username": "raymondh",
            "tweet_id": "1303394314647531520",
            "tweet_text": "It was in triplicate because there were binders organized by subject, by title, and by creator.\n\nThanks to carbon paper, the function description forms only had to be typed once.\n\nhttps://t.co/o15YqrMazz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1303394312181276673",
            "tweet_type": "Others",
            "created_at": "2020-09-08T18:06:35.000Z"
        },
        {
            "id": 3392,
            "username": "raymondh",
            "tweet_id": "1303394313812860928",
            "tweet_text": "I'm old enough to remember long desks covered with updatable binder books having one page per function for thousands of functions.\n\nEvery time a function was updated, its documentation was typed in triplicate and the old pages in each book were replaced.\n\nhttps://t.co/nFQ9Xjb2gN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1303394312181276673",
            "tweet_type": "Others",
            "created_at": "2020-09-08T18:06:34.000Z"
        },
        {
            "id": 3393,
            "username": "raymondh",
            "tweet_id": "1303394313104097280",
            "tweet_text": "Incorrect answer:  Single large namespace with lots of similarly named functions:  printf, wprintf, sprintf, fprintf, atoi, atol, atof, matinv, matinv_hessian, matinv_pos_def, matinv_pos_semi_def, matinv_upper_tri, matinv_lower_tri, ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1303394312181276673",
            "tweet_type": "Others",
            "created_at": "2020-09-08T18:06:34.000Z"
        },
        {
            "id": 3394,
            "username": "raymondh",
            "tweet_id": "1303394312181276673",
            "tweet_text": "#Python Programming in the large is mostly about management of complexity.   Object oriented programming and functional programming can be viewed as organizing principles for managing complexity.\n\nIt's okay to not do OOP or FP, but do you have an alternative natural organization?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1303394312181276673",
            "tweet_type": "Others",
            "created_at": "2020-09-08T18:06:34.000Z"
        },
        {
            "id": 3395,
            "username": "raymondh",
            "tweet_id": "1302773943154012165",
            "tweet_text": "5/ \"In practical terms, if the combined error is in fact of interest, then a combined estimator should be used, even if the underlying parameters are independent.\" -- Wikipedia article.\n\nhttps://t.co/h1YlGviw2e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302741585730310144",
            "tweet_type": "Others",
            "created_at": "2020-09-07T01:01:27.000Z"
        },
        {
            "id": 3396,
            "username": "raymondh",
            "tweet_id": "1302741588074881025",
            "tweet_text": "4/ The previously linked article is an easy read and explains the phenomenon in plain English and with understandable examples.\n\nFor a more terse and mathy explanation, see\n\nhttps://t.co/4RBYNR7Wbp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302741585730310144",
            "tweet_type": "Others",
            "created_at": "2020-09-06T22:52:53.000Z"
        },
        {
            "id": 3397,
            "username": "raymondh",
            "tweet_id": "1302741587206651904",
            "tweet_text": "3/ If this seems unintuitive, then you're not alone.  That is why it is called Stein's paradox \ud83d\ude09\n\nThe reason it works is that errors in one estimate tend to cancel the errors in the other estimates.\n\nhttps://t.co/Vz5novkOQk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302741585730310144",
            "tweet_type": "Others",
            "created_at": "2020-09-06T22:52:52.000Z"
        },
        {
            "id": 3398,
            "username": "raymondh",
            "tweet_id": "1302741586510397440",
            "tweet_text": "2/ One example comes from baseball.\n\nIndividual batting averages near the beginning of the season aren't as good of a performance predictor as individual batting averages that have been \u201cshrunk\u201d toward the collective mean.\n\nShockingly, this also works for unrelated variables.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302741585730310144",
            "tweet_type": "Others",
            "created_at": "2020-09-06T22:52:52.000Z"
        },
        {
            "id": 3399,
            "username": "raymondh",
            "tweet_id": "1302741585730310144",
            "tweet_text": "1/ #Python data science tip: To obtain a better estimate (on average) for a vector of multiple parameters, it is better to analyze sample vectors in aggregate than to use the mean of each component.\n\nSurprisingly, this works even if the components are unrelated to one another.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302741585730310144",
            "tweet_type": "Python tips",
            "created_at": "2020-09-06T22:52:52.000Z"
        },
        {
            "id": 3400,
            "username": "raymondh",
            "tweet_id": "1302414573094330369",
            "tweet_text": "I've always been mildly amused by the name of the assertLessEqual() method #python's unittest module.\n\nIt strikes as, \"we're all equal here; it's just that some of you are less equal than others\" \ud83d\ude09\n\nPython's version of \"four legs good, two legs better.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302414573094330369",
            "tweet_type": "Others",
            "created_at": "2020-09-06T01:13:26.000Z"
        },
        {
            "id": 3401,
            "username": "raymondh",
            "tweet_id": "1302314110172803077",
            "tweet_text": "Why it works:\n\n* At each step, the intermediate result gets rounded.\n\n* When two addends are of similar magnitude, less information gets lost to the rounding.\n\n* The more information that survives between steps, the more that information is able to influence the final sum.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302301255700627456",
            "tweet_type": "Others",
            "created_at": "2020-09-05T18:34:14.000Z"
        },
        {
            "id": 3402,
            "username": "raymondh",
            "tweet_id": "1302312560880803846",
            "tweet_text": "Example:\n\n&gt;&gt;&gt; getcontext().prec = 6\n&gt;&gt;&gt; a = Decimal( '3.00004')\n&gt;&gt;&gt; b = Decimal('24.6813')\n&gt;&gt;&gt; a + a + a + b\nDecimal('33.6814')\n&gt;&gt;&gt; b + a + a + a\nDecimal('33.6813')\n\n# Build-up small values\n&gt;&gt;&gt; a + a + a\nDecimal('9.00012')\n\n# Or immediately lose the 4\n&gt;&gt;&gt; b + a\nDecimal('27.6813')",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302301255700627456",
            "tweet_type": "Others",
            "created_at": "2020-09-05T18:28:04.000Z"
        },
        {
            "id": 3403,
            "username": "raymondh",
            "tweet_id": "1302301255700627456",
            "tweet_text": "#Python floating point ninja tip:  Summation accuracy is improved when terms are arranged in order of increasing magnitude.\n\nInstead of:\n   giant + large + medium + small + tiny\n\nWrite:\n   tiny + small + medium + large + giant",
            "tweet_media": "[]",
            "tweet_conversation_id": "1302301255700627456",
            "tweet_type": "Python tips",
            "created_at": "2020-09-05T17:43:09.000Z"
        },
        {
            "id": 3404,
            "username": "raymondh",
            "tweet_id": "1301800637911322626",
            "tweet_text": "#numpy uses pairwise summation in numpy.sum() when no axis is given.\n\nhttps://t.co/VzPEIvFicX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1301800636866940928",
            "tweet_type": "Others",
            "created_at": "2020-09-04T08:33:53.000Z"
        },
        {
            "id": 3405,
            "username": "raymondh",
            "tweet_id": "1301800636866940928",
            "tweet_text": "#Python floating point ninja tip:  Use parentheses to regroup sums to minimize accumulated round-off error.\n\nInstead of:\n    a + b + c + d + e + f + g + h\n\nWrite:\n    ((a + b) + (c + d)) + ((e + f) + (g + h))\n\nNote, the total work is unchanged.\n\nhttps://t.co/jnJuYzay7j",
            "tweet_media": "[]",
            "tweet_conversation_id": "1301800636866940928",
            "tweet_type": "Python tips",
            "created_at": "2020-09-04T08:33:52.000Z"
        },
        {
            "id": 3406,
            "username": "raymondh",
            "tweet_id": "1300470276354760704",
            "tweet_text": "The part that is pure magic:  How do you split a 53 bit number into two 26 bit numbers?  Where did the extra bit go?\n\nAnswer: The extra bit is stored in the sign bit of the \"lo\" component.\n\n53 bits + 1 sign = 26 bits + 1 sign + 26 bits + 1 sign\n\nAll bits accounted for.\ud83e\uddd0\n\nCool!\ud83d\ude0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1300470272470908935",
            "tweet_type": "Others",
            "created_at": "2020-08-31T16:27:30.000Z"
        },
        {
            "id": 3407,
            "username": "raymondh",
            "tweet_id": "1300470275604054016",
            "tweet_text": "The payoff for Veltkamp-Dekker splitting and piecewise multiplication is that you can build quad precision arithmetic out of everyday double precision arithmetic.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1300470272470908935",
            "tweet_type": "Others",
            "created_at": "2020-08-31T16:27:29.000Z"
        },
        {
            "id": 3408,
            "username": "raymondh",
            "tweet_id": "1300470274823913473",
            "tweet_text": "Use case:  The 26-bit precision components can be multiplied losslessly (without rounding):\n\n# Four exact components of e * pi:\n&gt;&gt;&gt; pi_hi*e_hi\n8.539734226211163\n&gt;&gt;&gt; pi_hi*e_lo\n7.207993525551209e-08\n&gt;&gt;&gt; pi_lo*e_hi\n-7.561753118743836e-08\n&gt;&gt;&gt; pi_lo*e_lo\n-6.382525038592985e-16",
            "tweet_media": "[]",
            "tweet_conversation_id": "1300470272470908935",
            "tweet_type": "Others",
            "created_at": "2020-08-31T16:27:29.000Z"
        },
        {
            "id": 3409,
            "username": "raymondh",
            "tweet_id": "1300470274039582720",
            "tweet_text": "Example:\n\n&gt;&gt;&gt; hi, lo = veltkamp_split(pi)\n&gt;&gt;&gt; hi + lo == pi\nTrue\n&gt;&gt;&gt; hi.hex()\n'0x1.921fb58000000p+1'\n&gt;&gt;&gt; lo.hex()\n'-0x1.dde9740000000p-26'\n\nNote all the trailing zeros and the difference between the two exponents. Also both the lo and hi values are signed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1300470272470908935",
            "tweet_type": "Others",
            "created_at": "2020-08-31T16:27:29.000Z"
        },
        {
            "id": 3410,
            "username": "raymondh",
            "tweet_id": "1300470273326546948",
            "tweet_text": "Input:  one signed 53-bit precision float\n\nOutput:  two signed 26-bit precision floats\n\nInvariant:  x == hi + lo\n\nConstant:  134217729.0 == 2.0 ** 27 + 1.0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1300470272470908935",
            "tweet_type": "Others",
            "created_at": "2020-08-31T16:27:29.000Z"
        },
        {
            "id": 3411,
            "username": "raymondh",
            "tweet_id": "1300470272470908935",
            "tweet_text": "Another building block for a #Python floating point ninja toolset: \n\ndef veltkamp_split(x):\n    'Exact split into two 26-bit precision components'\n    t = x * 134217729.0\n    hi = t - (t - x)\n    lo = x - hi\n    return hi, lo\n\nhttps://t.co/KIkfGUvugW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1300470272470908935",
            "tweet_type": "Others",
            "created_at": "2020-08-31T16:27:29.000Z"
        },
        {
            "id": 3412,
            "username": "raymondh",
            "tweet_id": "1299396821698056192",
            "tweet_text": "Example:\n\n&gt;&gt;&gt; total, fraction = lossless_add(pi, e)\n&gt;&gt;&gt; total\n5.859874482048838\n&gt;&gt;&gt; fraction\n4.440892098500626e-16\n\n&gt;&gt;&gt; total.hex()\n'0x1.77082efac4240p+2'\n&gt;&gt;&gt; fraction.hex()\n'0x1.0000000000000p-51'\n\n&gt;&gt;&gt; total + fraction == pi + e\nTrue\n&gt;&gt;&gt; fabs(fraction) &lt; ulp(total)\nTrue",
            "tweet_media": "[]",
            "tweet_conversation_id": "1299396820154474498",
            "tweet_type": "Others",
            "created_at": "2020-08-28T17:21:58.000Z"
        },
        {
            "id": 3413,
            "username": "raymondh",
            "tweet_id": "1299396820922056705",
            "tweet_text": "Precondition:\n     fabs(a) &gt;= fabs(b)\n\nPostconditions:\n    y - b + x == a   # lossless recovery of addend \"a\"\n    x - a + y == b   # lossless recovery of addend \"b\"\n    x + y == a + b   # sum preserving\n    fabs(y) &lt; ulp(x) # |y| smaller than all bits of x",
            "tweet_media": "[]",
            "tweet_conversation_id": "1299396820154474498",
            "tweet_type": "Others",
            "created_at": "2020-08-28T17:21:58.000Z"
        },
        {
            "id": 3414,
            "username": "raymondh",
            "tweet_id": "1299396820154474498",
            "tweet_text": "Building block for a #Python floating point ninja toolset:  \n\ndef lossless_add(a, b):\n    x = a + b\n    y = (a - x) + b\n    return x, y\n\nhttps://t.co/ZlQrVAeG8T",
            "tweet_media": "[]",
            "tweet_conversation_id": "1299396820154474498",
            "tweet_type": "Others",
            "created_at": "2020-08-28T17:21:58.000Z"
        },
        {
            "id": 3415,
            "username": "raymondh",
            "tweet_id": "1298832283130933248",
            "tweet_text": "True words! https://t.co/JsVA9qBG4N",
            "tweet_media": "[]",
            "tweet_conversation_id": "1298832283130933248",
            "tweet_type": "Others",
            "created_at": "2020-08-27T03:58:42.000Z"
        },
        {
            "id": 3416,
            "username": "raymondh",
            "tweet_id": "1298411674957799424",
            "tweet_text": "\\neq or \\ne  LaTeX\nDoublePlusUnequal   Newspeak",
            "tweet_media": "[]",
            "tweet_conversation_id": "1298399733719785472",
            "tweet_type": "Others",
            "created_at": "2020-08-26T00:07:21.000Z"
        },
        {
            "id": 3417,
            "username": "raymondh",
            "tweet_id": "1298399733719785472",
            "tweet_text": "#Python people, which inequality do you like best?\n\n\u2260        Regular math\n.NE.     Fortran\n&lt;&gt;       Python 2\n!=       Python 3\n#        TLA\u207a\n= INVERT Forth\nNE or #  COBOL\n&gt;&lt; or &lt;&gt; COBOL\nCMP JNE  Assembly\nassertNotEqual Unittest\nabs(x - y) &lt; 0.0001 Floating point ;-)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1298399733719785472",
            "tweet_type": "Others",
            "created_at": "2020-08-25T23:19:54.000Z"
        },
        {
            "id": 3418,
            "username": "raymondh",
            "tweet_id": "1298108213305290752",
            "tweet_text": "The lowest I've found so far is:\n\n&gt;&gt;&gt; s = 4503599761588224\n&gt;&gt;&gt; floor(sqrt(s))\n67108865\n&gt;&gt;&gt; isqrt(s)\n67108864\n\n&gt;&gt;&gt; s.bit_length()\n53\n&gt;&gt;&gt; bin(s)\n'0b10000000000000000000000001000000000000000000000000000'",
            "tweet_media": "[]",
            "tweet_conversation_id": "1297998442594091008",
            "tweet_type": "Others",
            "created_at": "2020-08-25T04:01:30.000Z"
        },
        {
            "id": 3419,
            "username": "raymondh",
            "tweet_id": "1298106417065287682",
            "tweet_text": "A nice compliment on #StackOverflow goes a long way towards rewarding a contributor.\n\n\u201cRachel to the Rescue\u201d has a nice ring to it, doesn't it?\n\nhttps://t.co/UISbesGVIH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1298106417065287682",
            "tweet_type": "Others",
            "created_at": "2020-08-25T03:54:22.000Z"
        },
        {
            "id": 3420,
            "username": "raymondh",
            "tweet_id": "1297998442594091008",
            "tweet_text": "#Python math module challenge:  What is the smallest positive integer where isqrt(x) \u2260 floor(sqrt(x)) ?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1297998442594091008",
            "tweet_type": "Others",
            "created_at": "2020-08-24T20:45:19.000Z"
        },
        {
            "id": 3421,
            "username": "raymondh",
            "tweet_id": "1297586506626785280",
            "tweet_text": "#python tip:  Here are several ways to interactively display intermediate results during a calculation.\n\n# Two liner\n&gt;&gt;&gt; q = 3.5 * 1.5\n&gt;&gt;&gt; q\n5.25\n\n# Second expression\n&gt;&gt;&gt; q = 3.5 * 1.5; q\n5.25\n\n# Walrus\n&gt;&gt;&gt; (q := 3.5 * 1.5)\n5.25\n\n# Invisible\n&gt;&gt;&gt; q = 3.5 * 1.5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1297586506626785280",
            "tweet_type": "Python tips",
            "created_at": "2020-08-23T17:28:25.000Z"
        },
        {
            "id": 3422,
            "username": "raymondh",
            "tweet_id": "1297244673958789122",
            "tweet_text": "\"pep_boys\" and \"names\" are two references to the same list object (not unlike having two connections to one database).\n\n\"names[:]\" updates the list in-place\n\n\"pep_boys\" refers to the now updated list.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1297244672759230464",
            "tweet_type": "Others",
            "created_at": "2020-08-22T18:50:06.000Z"
        },
        {
            "id": 3423,
            "username": "raymondh",
            "tweet_id": "1297244673346375681",
            "tweet_text": "&gt;&gt;&gt; pep_boys = ['manny', 'mo', 'jack']\n&gt;&gt;&gt; names = pep_boys\n&gt;&gt;&gt; names[:] = [name.title() for name in names if name.startswith('m')]\n&gt;&gt;&gt; pep_boys\n['Manny', 'Mo']",
            "tweet_media": "[]",
            "tweet_conversation_id": "1297244672759230464",
            "tweet_type": "Others",
            "created_at": "2020-08-22T18:50:06.000Z"
        },
        {
            "id": 3424,
            "username": "raymondh",
            "tweet_id": "1297244672759230464",
            "tweet_text": "#python tip:  To update a list in-place, use a slice-assignment\n\nt = s\n...\ns[:] = [f(x) for x in s if c(x)]\n\nNow, both \"s\" and \"t\" reflect the new data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1297244672759230464",
            "tweet_type": "Python tips",
            "created_at": "2020-08-22T18:50:06.000Z"
        },
        {
            "id": 3425,
            "username": "raymondh",
            "tweet_id": "1296908553307877376",
            "tweet_text": "Anecdote:  I once lost two days of development time due to a persistent and fatal OutOfMemory error reported by DBase IV.\n\nThe actual underlying cause was the DBaseIV runtime erroneously reporting a printer-out-of-paper signal as an out-of-memory error. \ud83d\ude1e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1296865073747513344",
            "tweet_type": "Others",
            "created_at": "2020-08-21T20:34:29.000Z"
        },
        {
            "id": 3426,
            "username": "raymondh",
            "tweet_id": "1296865073747513344",
            "tweet_text": "#Python wish: With effort, we could make error reporting much smarter and more helpful.\n\n&gt;&gt;&gt; predict(unknown_flower, iris_measurements. iris_labels)\nAttributeError: 'list' object has no attribute 'iris_labels'\nHint: A period followed by a space is unusual, did you intend a comma?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1296865073747513344",
            "tweet_type": "Others",
            "created_at": "2020-08-21T17:41:42.000Z"
        },
        {
            "id": 3427,
            "username": "bbelderbos",
            "tweet_id": "1598561378058457088",
            "tweet_text": "It is indeed liberating to just open issues, document your thoughts and fixes. Documentation built-in! But you can also leave things for later and come back.\n\nBtw TIL: if you put certain keywords in your PR (e.g. fixes issue &lt;int&gt;) it will autoclose the issue.\n\n#developer #github https://t.co/WhfeMwVnLf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598561378058457088",
            "tweet_type": "Others",
            "created_at": "2022-12-02T06:15:07.000Z"
        },
        {
            "id": 3428,
            "username": "bbelderbos",
            "tweet_id": "1598491388399669248",
            "tweet_text": "You can use list.index() to find the first match of a string, for multiple matches you can use enumerate().\n\n#python #tips https://t.co/msP8ZSG1oL",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi6bpnIWYAAQtbM.jpg\"]",
            "tweet_conversation_id": "1598491388399669248",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T01:37:00.000Z"
        },
        {
            "id": 3429,
            "username": "bbelderbos",
            "tweet_id": "1598417018772160513",
            "tweet_text": "I've completed \"Calorie Counting\" - Day 1 - Advent of Code 2022 https://t.co/D2CGlU5kYG #AdventOfCode &lt;&lt; you should join, it's pretty cool!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598417018772160513",
            "tweet_type": "Others",
            "created_at": "2022-12-01T20:41:29.000Z"
        },
        {
            "id": 3430,
            "username": "bbelderbos",
            "tweet_id": "1598386451267420164",
            "tweet_text": "Forgot the ALT, snippet: https://t.co/6UtiUQ4xMh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598385748247543820",
            "tweet_type": "Others",
            "created_at": "2022-12-01T18:40:01.000Z"
        },
        {
            "id": 3431,
            "username": "bbelderbos",
            "tweet_id": "1598385748247543820",
            "tweet_text": "You can use request.getfixturevalue() to lookup a fixture by string. This is handy when parametrizing them.\n\n#python #pytest https://t.co/1XS4dvBxfB",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi6bLXEXgAsw1BH.jpg\"]",
            "tweet_conversation_id": "1598385748247543820",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T18:37:13.000Z"
        },
        {
            "id": 3432,
            "username": "bbelderbos",
            "tweet_id": "1598285570496557057",
            "tweet_text": "Do you want to speed up your use of emojis in your writing? Maybe EmojiSearcher can help:\n\nhttps://t.co/oxy6PjY5iU\n\n$ emo tada rocket snake smile bicep\nCopied \ud83c\udf89 \ud83d\ude80 \ud83d\udc0d \ud83d\ude04 \ud83d\udcaa to clipboard\n\n(emo is a shell alias btw)\n\n#python #opensource",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598285570496557057",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T11:59:09.000Z"
        },
        {
            "id": 3433,
            "username": "bbelderbos",
            "tweet_id": "1598242914647576576",
            "tweet_text": "Getting into this flow today of \"issue first development\" - already feels like a great way of doing things \ud83c\udf89\ud83d\udca1 https://t.co/qJSCVoqjb2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598242914647576576",
            "tweet_type": "Others",
            "created_at": "2022-12-01T09:09:39.000Z"
        },
        {
            "id": 3434,
            "username": "bbelderbos",
            "tweet_id": "1598238309884788736",
            "tweet_text": "Keeping the #python #tips up here, what cool themes / topics would you appreciate seeing more of from me in your feed?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598238309884788736",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T08:51:21.000Z"
        },
        {
            "id": 3435,
            "username": "bbelderbos",
            "tweet_id": "1598121954564706307",
            "tweet_text": "You can open a file with 'x' (exclusive creation) to prevent overwriting it if it already exists.\n\n#python #tips https://t.co/FGvghXBdRt",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi1IhbVWAB0mv2B.jpg\"]",
            "tweet_conversation_id": "1598121954564706307",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T01:09:00.000Z"
        },
        {
            "id": 3436,
            "username": "bbelderbos",
            "tweet_id": "1598072881086230529",
            "tweet_text": "Two ways to flatten a list (iterable) or lists (iterables). \n\nThe sum() way is quite obscure, I prefer itertools.chain.from_iterable() as it more clearly shows intent. \n\nFor deeper nesting you will need recursion.\n\n#python #tips https://t.co/9txSTG5Wo0",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi1IT2rWAAs9ueQ.jpg\"]",
            "tweet_conversation_id": "1598072881086230529",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T21:54:00.000Z"
        },
        {
            "id": 3437,
            "username": "bbelderbos",
            "tweet_id": "1598012468445741057",
            "tweet_text": "#Python classmethods are handy to provide multiple constructors to your classes: https://t.co/Vdp5808PWo",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi1H1EPWABUp7tn.jpg\"]",
            "tweet_conversation_id": "1598012468445741057",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T17:53:56.000Z"
        },
        {
            "id": 3438,
            "username": "bbelderbos",
            "tweet_id": "1597993217659928577",
            "tweet_text": "I saw it on Mastodon first, but also thanks @pythonbytes for sharing this, definitely something to adopt!\n\nThanks so much @simonw for sharing as always.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597936794729074690",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:37:27.000Z"
        },
        {
            "id": 3439,
            "username": "bbelderbos",
            "tweet_id": "1597936794729074690",
            "tweet_text": "Awesome talk: Increase your productivity on personal projects with comprehensive docs ... \nhttps://t.co/ayqeVVYrSv \n\n#python #developer",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597936794729074690",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T12:53:14.000Z"
        },
        {
            "id": 3440,
            "username": "bbelderbos",
            "tweet_id": "1597878930626969600",
            "tweet_text": "Who is doing the #AdventOfCode this year?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597878930626969600",
            "tweet_type": "Others",
            "created_at": "2022-11-30T09:03:18.000Z"
        },
        {
            "id": 3441,
            "username": "bbelderbos",
            "tweet_id": "1597590590631415808",
            "tweet_text": "Really cool idea!\n\n#GitHub #Python #opensource https://t.co/usI3bob8vu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597590590631415808",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T13:57:33.000Z"
        },
        {
            "id": 3442,
            "username": "bbelderbos",
            "tweet_id": "1597516506912665601",
            "tweet_text": "Create a new dictionary with keys from iterable and values set to value.\n\n#python #tips https://t.co/wKqbRggkaP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiuEr__WIAAi70Q.jpg\"]",
            "tweet_conversation_id": "1597516506912665601",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T09:03:10.000Z"
        },
        {
            "id": 3443,
            "username": "bbelderbos",
            "tweet_id": "1597456178468245505",
            "tweet_text": "0.6.0 is up on PyPI now \ud83d\ude0e\n\nI copied this emoji from my .preferences file:\n\n$ emo cool\nCopied \ud83d\ude0e to clipboard https://t.co/srDllGeX33",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597456178468245505",
            "tweet_type": "Others",
            "created_at": "2022-11-29T05:03:26.000Z"
        },
        {
            "id": 3444,
            "username": "bbelderbos",
            "tweet_id": "1597455855620075520",
            "tweet_text": "The nice thing about blogging / content creation, apart from helping others, is that you build up your own reference.\n\nI used this video (I produced &gt; 1 year ago) to automatically update a package on PyPI by pushing a git tag:\n\nhttps://t.co/lnFU2UGXtc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597455855620075520",
            "tweet_type": "Others",
            "created_at": "2022-11-29T05:02:09.000Z"
        },
        {
            "id": 3445,
            "username": "bbelderbos",
            "tweet_id": "1597189182958768128",
            "tweet_text": "Or ... TIL: plain Unix: date +%U",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597173433728905216",
            "tweet_type": "Others",
            "created_at": "2022-11-28T11:22:30.000Z"
        },
        {
            "id": 3446,
            "username": "bbelderbos",
            "tweet_id": "1597174275680923648",
            "tweet_text": "Did I forget the screenshot? lol https://t.co/ByJjQipj93",
            "tweet_media": "[\"https://pbs.twimg.com/media/FipNgTaWIAEg6Ea.jpg\"]",
            "tweet_conversation_id": "1597152673056575488",
            "tweet_type": "Others",
            "created_at": "2022-11-28T10:23:16.000Z"
        },
        {
            "id": 3447,
            "username": "bbelderbos",
            "tweet_id": "1597174125097013249",
            "tweet_text": "If I had to summarize Dale Carnegie's 'How to Stop Worrying and Start Living' in just two words it would be:\n\nGet Busy.\n\nI think Mihaly Csikszentmihalyi calls it the \"Flow\" state.\n\nGoing deep with coding is soooo nice for that \ud83e\uddd8\ud83e\uddd8\ud83e\uddd8\n\n#MondayMindset",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597174125097013249",
            "tweet_type": "Others",
            "created_at": "2022-11-28T10:22:40.000Z"
        },
        {
            "id": 3448,
            "username": "bbelderbos",
            "tweet_id": "1597173433728905216",
            "tweet_text": "I often wonder what week it is, hence I made this #Python alias:\n\n$ alias whatweek\nwhatweek='python3.9 -c \"from datetime import date; print(https://t.co/2cx0UCJtjP().isocalendar().week)\"'\n$ whatweek\n48",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597173433728905216",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T10:19:55.000Z"
        },
        {
            "id": 3449,
            "username": "bbelderbos",
            "tweet_id": "1597161927884488704",
            "tweet_text": "Result ...\n\n#python #project #emoji https://t.co/TlJYk33PVO",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1597161665010798592/pu/vid/1280x720/IdrTNV6f4VqjVUrY.mp4?tag=12\"]",
            "tweet_conversation_id": "1597152673056575488",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T09:34:12.000Z"
        },
        {
            "id": 3450,
            "username": "bbelderbos",
            "tweet_id": "1597157789650268162",
            "tweet_text": "Love that progress graph \ud83d\ude0d https://t.co/MFyuaywYsL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597157789650268162",
            "tweet_type": "Others",
            "created_at": "2022-11-28T09:17:45.000Z"
        },
        {
            "id": 3451,
            "username": "bbelderbos",
            "tweet_id": "1597157642769612801",
            "tweet_text": "#Django https://t.co/EvWRCvuWZD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597157642769612801",
            "tweet_type": "Others",
            "created_at": "2022-11-28T09:17:10.000Z"
        },
        {
            "id": 3452,
            "username": "bbelderbos",
            "tweet_id": "1597156490368159744",
            "tweet_text": "New week, new opportunities, what are you working on? \ud83d\udd25\n\nI just wrote a test suite for one of our FastAPI / SQLModel apps: https://t.co/f4ey34xXnF\n\nHighly needed and overall a pleasant experience \ud83e\uddd8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597156490368159744",
            "tweet_type": "Others",
            "created_at": "2022-11-28T09:12:35.000Z"
        },
        {
            "id": 3453,
            "username": "bbelderbos",
            "tweet_id": "1597152673056575488",
            "tweet_text": "I designed a new feature for one of my projects \"document first\", that is, I started by outlining it in the Readme and worked backwards writing the code \ud83c\udf89\n\nIt was an amazing experience \ud83d\ude0e\n\nInspiration: https://t.co/3HwwoLvGDa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597152673056575488",
            "tweet_type": "Others",
            "created_at": "2022-11-28T08:57:25.000Z"
        },
        {
            "id": 3454,
            "username": "bbelderbos",
            "tweet_id": "1597148883402264581",
            "tweet_text": "The str.replace() method takes an optional count argument so you for example can only replace the first match: https://t.co/2TThwUnGlo",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fio2cApWYAAiE2u.png\"]",
            "tweet_conversation_id": "1597148883402264581",
            "tweet_type": "Others",
            "created_at": "2022-11-28T08:42:22.000Z"
        },
        {
            "id": 3455,
            "username": "bbelderbos",
            "tweet_id": "1596745493593620482",
            "tweet_text": "You can get the type hints for an object using get_type_hints() from the typing module. https://t.co/G47fpr1exP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FijHiZ_XEAAIQLx.jpg\"]",
            "tweet_conversation_id": "1596745493593620482",
            "tweet_type": "Others",
            "created_at": "2022-11-27T05:59:26.000Z"
        },
        {
            "id": 3456,
            "username": "bbelderbos",
            "tweet_id": "1596168811715399680",
            "tweet_text": "If you want to convert a dictionary to a query string in #Python you can use urllib.parse.urlencode() https://t.co/HfODI8KQwe",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fia7AfPWAAQ5Wsk.jpg\"]",
            "tweet_conversation_id": "1596168811715399680",
            "tweet_type": "Python tips",
            "created_at": "2022-11-25T15:47:54.000Z"
        },
        {
            "id": 3457,
            "username": "bbelderbos",
            "tweet_id": "1596078351793655809",
            "tweet_text": "Might wanna tune in to @Bleachin's amazing mixes one day ... \n\nListening (coding) to:\nhttps://t.co/gwX5kJ85bc \n\n#music #coding #drumandbass",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596078351793655809",
            "tweet_type": "Others",
            "created_at": "2022-11-25T09:48:27.000Z"
        },
        {
            "id": 3458,
            "username": "bbelderbos",
            "tweet_id": "1595714394922549249",
            "tweet_text": "I am not leaving Twitter (yet haha), but I do post Python + developer related stuff on Fosstodon now:\n\nhttps://t.co/ydiUBJNwbT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595714394922549249",
            "tweet_type": "Others",
            "created_at": "2022-11-24T09:42:13.000Z"
        },
        {
            "id": 3459,
            "username": "bbelderbos",
            "tweet_id": "1595682463166218240",
            "tweet_text": "Updated it to also load in the latest toots from Fosstodon",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595129713818673152",
            "tweet_type": "Others",
            "created_at": "2022-11-24T07:35:20.000Z"
        },
        {
            "id": 3460,
            "username": "bbelderbos",
            "tweet_id": "1595682112585211905",
            "tweet_text": "Overall I prefer dictionary comprehensions but for some scenarios dict() can be useful, it accepts both a mapping as well as an iterable.\n\n#Python #tips https://t.co/3QrHaJvm7d",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiUAZuqWAAAOXSP.jpg\"]",
            "tweet_conversation_id": "1595682112585211905",
            "tweet_type": "Python tips",
            "created_at": "2022-11-24T07:33:56.000Z"
        },
        {
            "id": 3461,
            "username": "bbelderbos",
            "tweet_id": "1595129713818673152",
            "tweet_text": "How to create a self updating #GitHub Readme https://t.co/xWso5FXDce",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595129713818673152",
            "tweet_type": "Others",
            "created_at": "2022-11-22T18:58:54.000Z"
        },
        {
            "id": 3462,
            "username": "bbelderbos",
            "tweet_id": "1594646393074995201",
            "tweet_text": "You can use an else on a while loop which will hit if the loop runs normally. \n\nIf the loop is terminated prematurely though (using break or return), the code in the else won't execute. \n\nThis construct can also be used with a for loop.\n\n#Python #tips https://t.co/bBJ4FnOGGT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiFSVZ1WYAA6hAl.jpg\"]",
            "tweet_conversation_id": "1594646393074995201",
            "tweet_type": "Python tips",
            "created_at": "2022-11-21T10:58:21.000Z"
        },
        {
            "id": 3463,
            "username": "bbelderbos",
            "tweet_id": "1592778468827492354",
            "tweet_text": "Had a fun conversation with Yujian on our #podcast, he shared some great insights. \n\nMain takeaways: the difference between being a #developer and an #entrepreneur + the #mindset you have to have to continue growing.\n\nEnjoy! https://t.co/QcjHhpSjgt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592778468827492354",
            "tweet_type": "Others",
            "created_at": "2022-11-16T07:15:54.000Z"
        },
        {
            "id": 3464,
            "username": "bbelderbos",
            "tweet_id": "1592451639012913153",
            "tweet_text": "I just cracked Bite 363. Movie Theater (Refactoring) - and now I challenge you!  https://t.co/qxPVVVpDfR \n#Python #CodeChallenges",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592451639012913153",
            "tweet_type": "Python tips",
            "created_at": "2022-11-15T09:37:11.000Z"
        },
        {
            "id": 3465,
            "username": "bbelderbos",
            "tweet_id": "1591003919001751552",
            "tweet_text": "The cool thing about imposter syndrome is that you do come out stronger. \n\nDon't avoid it, embrace it!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591003919001751552",
            "tweet_type": "Others",
            "created_at": "2022-11-11T09:44:28.000Z"
        },
        {
            "id": 3466,
            "username": "bbelderbos",
            "tweet_id": "1590323074725216257",
            "tweet_text": "Wrote another article, thanks @aj_kerrigan for telling us about sys.stdlib_module_names - neat! https://t.co/JURec7MZyp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590323074725216257",
            "tweet_type": "Others",
            "created_at": "2022-11-09T12:39:02.000Z"
        },
        {
            "id": 3467,
            "username": "bbelderbos",
            "tweet_id": "1590267549060837376",
            "tweet_text": "Just got Copilot working in NeoVim - wicked tool!\n\nhttps://t.co/Jtggl04VpP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590267549060837376",
            "tweet_type": "Others",
            "created_at": "2022-11-09T08:58:24.000Z"
        },
        {
            "id": 3468,
            "username": "bbelderbos",
            "tweet_id": "1589968886530998273",
            "tweet_text": "I enjoy writing for our blog, here is an article about clean code in #Python: https://t.co/cSSCaM3D5n",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589968886530998273",
            "tweet_type": "Python tips",
            "created_at": "2022-11-08T13:11:37.000Z"
        },
        {
            "id": 3469,
            "username": "bbelderbos",
            "tweet_id": "1589512237227839490",
            "tweet_text": "Happy Monday Pythonistas, what will you be working on this week? \ud83d\udca1\u2615\ufe0f\n\n@R_E_Beer's amazing job on our new Typer learning path on our platform inspired me to get the SQLModel up there too \ud83c\udf89\ud83c\udfa7\n\nThanks Robin \ud83d\ude4f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589512237227839490",
            "tweet_type": "Others",
            "created_at": "2022-11-07T06:57:03.000Z"
        },
        {
            "id": 3470,
            "username": "bbelderbos",
            "tweet_id": "1588436035037724675",
            "tweet_text": "So happy to hear Sherry, thank you!\n\ud83d\ude0d\ud83d\udd25\ud83d\udca1\ud83d\ude4f\ud83d\ude80 https://t.co/pVPPBFhTwZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588436035037724675",
            "tweet_type": "Others",
            "created_at": "2022-11-04T07:40:37.000Z"
        },
        {
            "id": 3471,
            "username": "bbelderbos",
            "tweet_id": "1585603678806892544",
            "tweet_text": "The role of luck https://t.co/oPi0nHp7ph #podcast #developer #career",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585603678806892544",
            "tweet_type": "Others",
            "created_at": "2022-10-27T12:05:50.000Z"
        },
        {
            "id": 3472,
            "username": "bbelderbos",
            "tweet_id": "1585220541673517057",
            "tweet_text": "A timer decorator measuring the start and end timings of a function's execution, printing the duration. \n\nAs per best practice I use @wraps to preserve the function's metadata (e.g. docstring). \n\n#Python #tips https://t.co/nzEwBjnmdT",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff_U_OrWIAAO2l5.jpg\"]",
            "tweet_conversation_id": "1585220541673517057",
            "tweet_type": "Python tips",
            "created_at": "2022-10-26T10:43:23.000Z"
        },
        {
            "id": 3473,
            "username": "bbelderbos",
            "tweet_id": "1584869471155388417",
            "tweet_text": "If #Python exception chaining gets confusing you can use \"raise from None\" to suppress the initial exception, keeping the second one. Sometimes you might want this extra detail though. Example: https://t.co/LdIOCVZzE5",
            "tweet_media": "[\"https://pbs.twimg.com/media/Ff6WDj-XwAIk5LC.jpg\"]",
            "tweet_conversation_id": "1584869471155388417",
            "tweet_type": "Python tips",
            "created_at": "2022-10-25T11:28:22.000Z"
        },
        {
            "id": 3474,
            "username": "bbelderbos",
            "tweet_id": "1584840418218627072",
            "tweet_text": "\ud83c\udf89\ud83d\ude4f\ud83d\ude0d\ud83d\udc0d https://t.co/nlWTSbCTgR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584840418218627072",
            "tweet_type": "Others",
            "created_at": "2022-10-25T09:32:55.000Z"
        },
        {
            "id": 3475,
            "username": "bbelderbos",
            "tweet_id": "1582971779806425090",
            "tweet_text": "Technology and Mindset with new PDM Coach @HughTipping - great conversation and insights!\n\nhttps://t.co/7YJipaqIIA \n\n#Python #mindset #coaching #developer #stoicism",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582971779806425090",
            "tweet_type": "Python tips",
            "created_at": "2022-10-20T05:47:37.000Z"
        },
        {
            "id": 3476,
            "username": "bbelderbos",
            "tweet_id": "1578358172829769729",
            "tweet_text": "Explained dunder (magic) methods (\ud83d\ude0d) and exception handling.\n\nFavorite moment: 1 + 'a' raises an exception in Python, not so in JavaScript \ud83d\ude2e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578335755025326080",
            "tweet_type": "Others",
            "created_at": "2022-10-07T12:14:47.000Z"
        },
        {
            "id": 3477,
            "username": "bbelderbos",
            "tweet_id": "1578335755025326080",
            "tweet_text": "I love teaching #Python, so gratifying!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578335755025326080",
            "tweet_type": "Python tips",
            "created_at": "2022-10-07T10:45:42.000Z"
        },
        {
            "id": 3478,
            "username": "bbelderbos",
            "tweet_id": "1577731319756460072",
            "tweet_text": "It's #Hacktoberfest again, what are you working on / contributing to?\n\n#python #opensource",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577731319756460072",
            "tweet_type": "Python tips",
            "created_at": "2022-10-05T18:43:54.000Z"
        },
        {
            "id": 3479,
            "username": "bbelderbos",
            "tweet_id": "1575458454734606338",
            "tweet_text": "Had a blast interviewing @zenxone, author of my favorite #Django book \ud83d\ude0d https://t.co/oDAaTAuJ9I",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575458454734606338",
            "tweet_type": "Others",
            "created_at": "2022-09-29T12:12:20.000Z"
        },
        {
            "id": 3480,
            "username": "bbelderbos",
            "tweet_id": "1573555988631805952",
            "tweet_text": "Amazing interview, some really useful / applicable insights, super valuable for people seeking a job / career change. \n\nAll this while keeping it entertaining \ud83c\udf89\n\nThanks @Bleachin and @juliansequeira - no, \"I did not notice how little you prepared\" hahaha https://t.co/R0Tqr6556k",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573555988631805952",
            "tweet_type": "Others",
            "created_at": "2022-09-24T06:12:37.000Z"
        },
        {
            "id": 3481,
            "username": "bbelderbos",
            "tweet_id": "1572872415440678912",
            "tweet_text": "What #Python libraries are you using this week? Anything new / cool you're learning?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572872415440678912",
            "tweet_type": "Python tips",
            "created_at": "2022-09-22T08:56:21.000Z"
        },
        {
            "id": 3482,
            "username": "bbelderbos",
            "tweet_id": "1572838165596995585",
            "tweet_text": "** unpacking is pretty elegant in #Python. Did you know you can use it to make a dataclass instance from a dictionary for example? https://t.co/4akvLeKpAk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdPX-UeXEAAz6jh.jpg\"]",
            "tweet_conversation_id": "1572838165596995585",
            "tweet_type": "Python tips",
            "created_at": "2022-09-22T06:40:15.000Z"
        },
        {
            "id": 3483,
            "username": "bbelderbos",
            "tweet_id": "1572837247203901441",
            "tweet_text": "importlib.metadata is a nice (Standard Lib) module that lets you easily get package metadata\n\n#Python #tips https://t.co/JtsVA31m67",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdPXEpBXEAApcVw.jpg\"]",
            "tweet_conversation_id": "1572837247203901441",
            "tweet_type": "Python tips",
            "created_at": "2022-09-22T06:36:36.000Z"
        },
        {
            "id": 3484,
            "username": "bbelderbos",
            "tweet_id": "1572616824713265158",
            "tweet_text": "You can chain methods in #Python by having them return \"self\".\n\nAs elegant as it reads (libraries like pandas and sqlalchemy use method chaining), do keep in mind that it can be more difficult to debug methods that are chained. https://t.co/XrnFbof6ZJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMOqR3XgAMJ5tf.jpg\"]",
            "tweet_conversation_id": "1572616824713265158",
            "tweet_type": "Python tips",
            "created_at": "2022-09-21T16:00:43.000Z"
        },
        {
            "id": 3485,
            "username": "bbelderbos",
            "tweet_id": "1572616056987852800",
            "tweet_text": "Amazed you can actually do this with #Python's Standard Library \ud83d\udc0d\ud83d\ude0d\n\n$ python https://t.co/Hz6HXKmDx7 run-server\nUnknown command: 'run-server'. Did you mean runserver? https://t.co/ukExBrToSg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdMN8zIXwAEe7dp.jpg\"]",
            "tweet_conversation_id": "1572616056987852800",
            "tweet_type": "Python tips",
            "created_at": "2022-09-21T15:57:40.000Z"
        },
        {
            "id": 3486,
            "username": "bbelderbos",
            "tweet_id": "1571761491153494020",
            "tweet_text": "And forgot to mention: fzf in Vim to navigate my project files super fast!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571034443737092096",
            "tweet_type": "Others",
            "created_at": "2022-09-19T07:21:56.000Z"
        },
        {
            "id": 3487,
            "username": "bbelderbos",
            "tweet_id": "1571761399445200896",
            "tweet_text": "Totally need to recommend Hypermodern #Python in this context:\n\nhttps://t.co/LtruE1rgfn\n\nWas reading it again, so much in there!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571034443737092096",
            "tweet_type": "Python tips",
            "created_at": "2022-09-19T07:21:34.000Z"
        },
        {
            "id": 3488,
            "username": "bbelderbos",
            "tweet_id": "1571042800648728576",
            "tweet_text": "I will list a few (not necessarily only as per \"lately\")\n\n- Shell aliases: https://t.co/pnB7vyFaMw\n\n- Run pyflakes before saving a file in #Vim: https://t.co/a9MeAjNVF8\n\n- Use pre-commit to automate code quality: https://t.co/6XGvbBaBfD\n\n- Using a debugger to write #Python code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571034443737092096",
            "tweet_type": "Python tips",
            "created_at": "2022-09-17T07:46:06.000Z"
        },
        {
            "id": 3489,
            "username": "bbelderbos",
            "tweet_id": "1571034443737092096",
            "tweet_text": "What is your favorite #Python #developer tool you discovered lately and why? \ud83d\udd25\ud83d\udca1\ud83c\udfa7\n\nPlease let me know, hoping to find productivity hacks and potential for software / code quality improvements in this thread ... \ud83d\udcaa\ud83d\ude4f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571034443737092096",
            "tweet_type": "Python tips",
            "created_at": "2022-09-17T07:12:54.000Z"
        },
        {
            "id": 3490,
            "username": "bbelderbos",
            "tweet_id": "1571028947701493761",
            "tweet_text": "collections.Counter() is one of my favorite #Python data structures, it's so concise :) https://t.co/CekqteJ4Gr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc1qbnFXwAApHmc.jpg\"]",
            "tweet_conversation_id": "1571028947701493761",
            "tweet_type": "Python tips",
            "created_at": "2022-09-17T06:51:04.000Z"
        },
        {
            "id": 3491,
            "username": "bbelderbos",
            "tweet_id": "1571028350512267264",
            "tweet_text": "For got the ALT code, you can copy it here though: https://t.co/7JSdPOKyB3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1571024995673055234",
            "tweet_type": "Others",
            "created_at": "2022-09-17T06:48:41.000Z"
        },
        {
            "id": 3492,
            "username": "bbelderbos",
            "tweet_id": "1571027988506103810",
            "tweet_text": "#Python's sorted() returns a new sorted copy, the original list does not change. \n\nCalling sort() on a list on the other hand changes the list values \"in place\" (returning None). \n\nA simple example that shows the difference: https://t.co/zwO8NuMtUU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc1pkQmWAAEHwLE.jpg\"]",
            "tweet_conversation_id": "1571027988506103810",
            "tweet_type": "Python tips",
            "created_at": "2022-09-17T06:47:15.000Z"
        },
        {
            "id": 3493,
            "username": "bbelderbos",
            "tweet_id": "1571024995673055234",
            "tweet_text": "I love tuple unpacking (although here we apply it to a list). Did you know you can discard one or more values with _ / *_ -&gt; looks really elegant \ud83d\ude0d\ud83d\udc0d\n\nAlso note I wrote this code in the debugger, I cannot live without it these days, it makes me a lot faster.\n\n#Python #tips https://t.co/hWuMVTOY6a",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fc1mc3CXgAA90ls.jpg\"]",
            "tweet_conversation_id": "1571024995673055234",
            "tweet_type": "Python tips",
            "created_at": "2022-09-17T06:35:21.000Z"
        },
        {
            "id": 3494,
            "username": "bbelderbos",
            "tweet_id": "1570695849767997442",
            "tweet_text": "Love this library, often my go to now if I need a simple yet beautiful graph!\n\n#dataviz #javascript https://t.co/mcYtzqWhUj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570695849767997442",
            "tweet_type": "Others",
            "created_at": "2022-09-16T08:47:27.000Z"
        },
        {
            "id": 3495,
            "username": "bbelderbos",
            "tweet_id": "1570447032753745920",
            "tweet_text": "I had a blast, thanks @TonyaSims for sharing your story on our podcast, very inspiring \ud83d\ude0d https://t.co/SJQjXCLvA7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570447032753745920",
            "tweet_type": "Others",
            "created_at": "2022-09-15T16:18:44.000Z"
        },
        {
            "id": 3496,
            "username": "bbelderbos",
            "tweet_id": "1570336403703345152",
            "tweet_text": "&gt; This is why #Python is often called \"executable pseudocode.\" \ud83d\ude0d\n\n- quote from Bruce Eckel's \"Strong Typing vs. Strong Testing\" which is a great read.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1570336403703345152",
            "tweet_type": "Python tips",
            "created_at": "2022-09-15T08:59:08.000Z"
        },
        {
            "id": 3497,
            "username": "bbelderbos",
            "tweet_id": "1570031543103688706",
            "tweet_text": "#Python's zfill() string method is useful to fill a string with zeros.\n\nAlternatively you could also use an f-string: https://t.co/eh618pR75h",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcnfSNAWYAY0tAg.jpg\"]",
            "tweet_conversation_id": "1570031543103688706",
            "tweet_type": "Python tips",
            "created_at": "2022-09-14T12:47:44.000Z"
        },
        {
            "id": 3498,
            "username": "bbelderbos",
            "tweet_id": "1570019536350453761",
            "tweet_text": "Newspaper3k is a really cool #Python library to scrape articles.\n\nBelow a quick example how the main features work.\n\nMore info: https://t.co/JmaoWGMEVr https://t.co/yEti6kkxa0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcnUcaGXgAAmB6r.jpg\"]",
            "tweet_conversation_id": "1570019536350453761",
            "tweet_type": "Python tips",
            "created_at": "2022-09-14T12:00:01.000Z"
        },
        {
            "id": 3499,
            "username": "bbelderbos",
            "tweet_id": "1569986629208604674",
            "tweet_text": "Two ways to go from a date string to a datetime object in #Python: https://t.co/mgBHJUA8Pu",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fcm2f-IXEAEOO57.jpg\"]",
            "tweet_conversation_id": "1569986629208604674",
            "tweet_type": "Python tips",
            "created_at": "2022-09-14T09:49:16.000Z"
        },
        {
            "id": 3500,
            "username": "bbelderbos",
            "tweet_id": "1569978933155708929",
            "tweet_text": "You can use zlib's crc32() to compute a (CRC or Cyclic Redundancy Check) checksum of data. The result is an unsigned 32-bit integer: https://t.co/A0EHBgzk9x",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcmvfIxWIAA72SJ.jpg\"]",
            "tweet_conversation_id": "1569978933155708929",
            "tweet_type": "Others",
            "created_at": "2022-09-14T09:18:41.000Z"
        },
        {
            "id": 3501,
            "username": "bbelderbos",
            "tweet_id": "1569758098033725440",
            "tweet_text": "Mac users: if git starts freaking out, upgrade to OS 12.6\n\nIf git still freaks out (or goes into recursive install) after the upgrade, run this:\n\nsudo xcode-select -switch /Library/Developer/CommandLineTools\n\nThat did it for me. Solution found here:\nhttps://t.co/f02fiS0jdS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569758098033725440",
            "tweet_type": "Others",
            "created_at": "2022-09-13T18:41:09.000Z"
        },
        {
            "id": 3502,
            "username": "bbelderbos",
            "tweet_id": "1569555209893855232",
            "tweet_text": "You can give sorted() a callable for the optional key argument that determines how to sort. Same for min() / max(). \n\nHere we change it to sort and take the min / max based on the length of the string.\n\n#Python #tips https://t.co/c0DpHZ1BDr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fcgt9-uXEAANnIA.jpg\"]",
            "tweet_conversation_id": "1569555209893855232",
            "tweet_type": "Python tips",
            "created_at": "2022-09-13T05:14:57.000Z"
        },
        {
            "id": 3503,
            "username": "bbelderbos",
            "tweet_id": "1569245684188205058",
            "tweet_text": "Another example I found the other day: https://t.co/avNruAvmkO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FccUnAcWAAAFLbd.jpg\"]",
            "tweet_conversation_id": "1569229128548913152",
            "tweet_type": "Others",
            "created_at": "2022-09-12T08:45:00.000Z"
        },
        {
            "id": 3504,
            "username": "bbelderbos",
            "tweet_id": "1569229302482489344",
            "tweet_text": "Forgot the ALT of the image, code is here: https://t.co/tfv7RNLZfh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569224756611661824",
            "tweet_type": "Others",
            "created_at": "2022-09-12T07:39:55.000Z"
        },
        {
            "id": 3505,
            "username": "bbelderbos",
            "tweet_id": "1569229128548913152",
            "tweet_text": "Since #Python 3.8 there is new syntax := that assigns values to variables as part of a larger expression. It's called \"the walrus operator\". \n\nIn this example we use it in a listcomp avoiding a duplicated call to the double() function: https://t.co/plckcGxTJw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FccFkhGWQAIrqda.jpg\"]",
            "tweet_conversation_id": "1569229128548913152",
            "tweet_type": "Python tips",
            "created_at": "2022-09-12T07:39:13.000Z"
        },
        {
            "id": 3506,
            "username": "bbelderbos",
            "tweet_id": "1569224756611661824",
            "tweet_text": "You can use decode() / encode() in #Python to go from bytes to strings and vice versa: https://t.co/GkVtuuhUzD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FccBjIMX0AApKqr.jpg\"]",
            "tweet_conversation_id": "1569224756611661824",
            "tweet_type": "Python tips",
            "created_at": "2022-09-12T07:21:51.000Z"
        },
        {
            "id": 3507,
            "username": "bbelderbos",
            "tweet_id": "1569224278976905217",
            "tweet_text": "Do you prefer single-quoted or double-quoted strings in #Python?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569224278976905217",
            "tweet_type": "Python tips",
            "created_at": "2022-09-12T07:19:57.000Z"
        },
        {
            "id": 3508,
            "username": "bbelderbos",
            "tweet_id": "1569222899986227200",
            "tweet_text": "I also really like this quote:\n\n\"The true test of good code is how easy it is to change it\"\n\n- Martin Fowler\n\nIndeed! Good code can be changed without too much hassle or side effects.\n\nAnd yep you guessed right, reading Refactoring 2nd ed :)\n\n#programming #quote",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569222899986227200",
            "tweet_type": "Others",
            "created_at": "2022-09-12T07:14:28.000Z"
        },
        {
            "id": 3509,
            "username": "bbelderbos",
            "tweet_id": "1569190061760970754",
            "tweet_text": "\u201cI'm not a great programmer; I'm just a good programmer with great habits.\u201d\n\u2015 Kent Beck\n\nVery true, habits are everything!\n\n#programming #quote",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569190061760970754",
            "tweet_type": "Others",
            "created_at": "2022-09-12T05:03:59.000Z"
        },
        {
            "id": 3510,
            "username": "bbelderbos",
            "tweet_id": "1568513026206179330",
            "tweet_text": "Another datetime example: https://t.co/gb1dmO6ufD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568513023576350722",
            "tweet_type": "Others",
            "created_at": "2022-09-10T08:13:41.000Z"
        },
        {
            "id": 3511,
            "username": "bbelderbos",
            "tweet_id": "1568513023576350722",
            "tweet_text": "In #Python default argument values are evaluated once upon module load.\n\nThis means that if all_numbers is not provided in the example below, it keeps appending to the same default list that was initiated when the program started! https://t.co/WCGgVNlmJD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcR6OpGXEAE_0Gc.jpg\"]",
            "tweet_conversation_id": "1568513023576350722",
            "tweet_type": "Python tips",
            "created_at": "2022-09-10T08:13:41.000Z"
        },
        {
            "id": 3512,
            "username": "bbelderbos",
            "tweet_id": "1568507701491032064",
            "tweet_text": "How to log #Python errors with debug information?\n\nlogging.exception() will output a stack trace alongside the error message you specify: https://t.co/5hlfd1ZlCu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcR1aPaXwAInJ2j.jpg\"]",
            "tweet_conversation_id": "1568507701491032064",
            "tweet_type": "Python tips",
            "created_at": "2022-09-10T07:52:32.000Z"
        },
        {
            "id": 3513,
            "username": "bbelderbos",
            "tweet_id": "1568256560845012993",
            "tweet_text": "Forgot the ALT code, here it is:\nhttps://t.co/5rFT5qgnpN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568245284999667713",
            "tweet_type": "Others",
            "created_at": "2022-09-09T15:14:35.000Z"
        },
        {
            "id": 3514,
            "username": "bbelderbos",
            "tweet_id": "1568256401415323648",
            "tweet_text": "Forgot the ALT code, here it is: https://t.co/kAg4Y5NOX6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568254550003560448",
            "tweet_type": "Others",
            "created_at": "2022-09-09T15:13:57.000Z"
        },
        {
            "id": 3515,
            "username": "bbelderbos",
            "tweet_id": "1568256114663342080",
            "tweet_text": "I love #Python's list comprehensions (\"listcomps\"). \n\nSet and dict comprehensions are beautiful too \ud83d\ude0d\ud83d\udc0d\n\nHere is a dictionary comprehension (\"dictcomp\") to swap keys + values of a dictionary: https://t.co/pnTQE6skID",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcOQdgSWQAMF5kJ.jpg\"]",
            "tweet_conversation_id": "1568256114663342080",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T15:12:49.000Z"
        },
        {
            "id": 3516,
            "username": "bbelderbos",
            "tweet_id": "1568254550003560448",
            "tweet_text": "functools.partial() lets you put a basic wrapper around (\"freeze\") an existing function so that you can set a default value where there normally wouldn't be one.\n\nHere we make our own print() defaulting the \"end\" keyword to a comma (instead of the default newline)\n\n#Python #tips https://t.co/UAtQlV4fQL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcOPMXCX0AEbLi8.jpg\"]",
            "tweet_conversation_id": "1568254550003560448",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T15:06:36.000Z"
        },
        {
            "id": 3517,
            "username": "bbelderbos",
            "tweet_id": "1568245284999667713",
            "tweet_text": "Similar to the operator module's itemgetter() I posted about the other day, you can also use attrgetter() \n\nIt returns a callable object that fetches attr from its operand - https://t.co/AAC0Yo5hOo\n\nThis is pretty useful when sorting objects (example below).\n\n#Python #tips https://t.co/0nZPkRiK2T",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcOGfQnWIAAfP-Z.jpg\"]",
            "tweet_conversation_id": "1568245284999667713",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T14:29:47.000Z"
        },
        {
            "id": 3518,
            "username": "bbelderbos",
            "tweet_id": "1568196950314319872",
            "tweet_text": "Finally picked up Fluent #Python again, what an amazing book!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568196950314319872",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T11:17:43.000Z"
        },
        {
            "id": 3519,
            "username": "bbelderbos",
            "tweet_id": "1568146931779502080",
            "tweet_text": "@juliansequeira \ud83c\udf89\ud83c\udfa7\ud83c\udf77\ud83c\udf77\ud83c\udf77 - who would have thought when we wrote those initial articles. Let's keep going!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567886958667472897",
            "tweet_type": "Others",
            "created_at": "2022-09-09T07:58:57.000Z"
        },
        {
            "id": 3520,
            "username": "bbelderbos",
            "tweet_id": "1568133899653357569",
            "tweet_text": "You can use sys.version_info to check the #Python version that is running. \n\nSometimes I see it compared to a (major, minor) tuple to use certain features based on version: https://t.co/3nIypj3tnE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcMhdzwXEAE7MCI.jpg\"]",
            "tweet_conversation_id": "1568133899653357569",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T07:07:10.000Z"
        },
        {
            "id": 3521,
            "username": "bbelderbos",
            "tweet_id": "1568133501790175232",
            "tweet_text": "On a related note I wrote an article a while back when to write classes and why it matters:\nhttps://t.co/fxPH0hMMJV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1568133499395121152",
            "tweet_type": "Others",
            "created_at": "2022-09-09T07:05:35.000Z"
        },
        {
            "id": 3522,
            "username": "bbelderbos",
            "tweet_id": "1568133499395121152",
            "tweet_text": "You can make a class callable in #Python by adding the __call__() dunder method. \n\nThis way a class can work as a function while taking advantage of typical class features like keeping state. https://t.co/zPDg4wF8sp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcMgWxrXkAA0pwW.jpg\"]",
            "tweet_conversation_id": "1568133499395121152",
            "tweet_type": "Python tips",
            "created_at": "2022-09-09T07:05:35.000Z"
        },
        {
            "id": 3523,
            "username": "bbelderbos",
            "tweet_id": "1567895633599647744",
            "tweet_text": "A nice example of the Zen of #Python's:\n\nErrors should never pass silently.\nUnless explicitly silenced.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567895630881718273",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T15:20:23.000Z"
        },
        {
            "id": 3524,
            "username": "bbelderbos",
            "tweet_id": "1567895630881718273",
            "tweet_text": "Nice to see zip() got a \"strict\" keyword argument since 3.10:\nhttps://t.co/7dY9kP8kud\n\n&gt; Without the strict=True argument, any bug that results in iterables of different lengths will be silenced, possibly manifesting as a hard-to-find bug in another part of the program. https://t.co/4OHaDhnWH8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcJIq78XEAIcuj3.jpg\"]",
            "tweet_conversation_id": "1567895630881718273",
            "tweet_type": "Others",
            "created_at": "2022-09-08T15:20:23.000Z"
        },
        {
            "id": 3525,
            "username": "bbelderbos",
            "tweet_id": "1567886958667472897",
            "tweet_text": "Wow &gt; 5 years of @Pybites already, #Python's datetime makes it easy to calculate: https://t.co/rFOH4Fwmto",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcJA3BVWIAAXx_o.jpg\"]",
            "tweet_conversation_id": "1567886958667472897",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T14:45:55.000Z"
        },
        {
            "id": 3526,
            "username": "bbelderbos",
            "tweet_id": "1567884756058083331",
            "tweet_text": "Hey Pythonista friends, what are you working on this week? Any cool #Python modules or tricks you picked up?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567884756058083331",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T14:37:10.000Z"
        },
        {
            "id": 3527,
            "username": "bbelderbos",
            "tweet_id": "1567819994842497024",
            "tweet_text": "@jpluimers @learn_byexample ALT works great on these, thanks again!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567819686229712897",
            "tweet_type": "Others",
            "created_at": "2022-09-08T10:19:50.000Z"
        },
        {
            "id": 3528,
            "username": "bbelderbos",
            "tweet_id": "1567819686229712897",
            "tweet_text": "Sometimes you need a bit of tolerance in your tests, for example when dealing with floats.\n\npytest's approx() asserts that two numbers (or two sets of numbers) are equal to each other within some tolerance which is perfect for this: https://t.co/muNnrksHh1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcIC9FdWYAEBn4Y.jpg\"]",
            "tweet_conversation_id": "1567819686229712897",
            "tweet_type": "Others",
            "created_at": "2022-09-08T10:18:36.000Z"
        },
        {
            "id": 3529,
            "username": "bbelderbos",
            "tweet_id": "1567798559449255937",
            "tweet_text": "In case you wonder about my code images:\n\n1. I use: https://t.co/N8LaPHIVKe\n\n2. via CLI: https://t.co/RL6A0BJEhB\n\n3. with shell alias:\nfunction carb {\n    (carbon -c -b \\#A0D6B4 -w bw -d dest_dir)\n}\n\n(-c = from clipboard, -b = custom color, -w = style image control buttons)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567797599767347200",
            "tweet_type": "Others",
            "created_at": "2022-09-08T08:54:39.000Z"
        },
        {
            "id": 3530,
            "username": "bbelderbos",
            "tweet_id": "1567797599767347200",
            "tweet_text": "Often you don't need a regex, #Python's string methods cover a lot! https://t.co/KfFejbQoZy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcHvk2mX0AEA3ja.jpg\"]",
            "tweet_conversation_id": "1567797599767347200",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T08:50:50.000Z"
        },
        {
            "id": 3531,
            "username": "bbelderbos",
            "tweet_id": "1567789055525404674",
            "tweet_text": "Ever wondered how pathlib.Path() overloads the \"/\" in an operation like:\n\nPath(dirname) / filename\n\nAccording to this SO answer https://t.co/lx9OT4gHV4, the Path class implements the __truediv__ dunder method.\n\nThe power of #Python's data model!\n\n(Code snippet from SO thread) https://t.co/fOtckkQcwx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcHnHUlX0AAxrhl.jpg\"]",
            "tweet_conversation_id": "1567789055525404674",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T08:16:53.000Z"
        },
        {
            "id": 3532,
            "username": "bbelderbos",
            "tweet_id": "1567787138535538690",
            "tweet_text": "Here is how you can create a gif image using the imageio library: https://t.co/ETlVZxTwct",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcHmFlWX0AAp-ef.jpg\"]",
            "tweet_conversation_id": "1567787138535538690",
            "tweet_type": "Others",
            "created_at": "2022-09-08T08:09:16.000Z"
        },
        {
            "id": 3533,
            "username": "bbelderbos",
            "tweet_id": "1567780132969906177",
            "tweet_text": "Who has used #Python's 3.10 \"Pattern Matching\" (match / case statement) and how? Seeking some examples here ... thanks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567780132969906177",
            "tweet_type": "Python tips",
            "created_at": "2022-09-08T07:41:26.000Z"
        },
        {
            "id": 3534,
            "username": "bbelderbos",
            "tweet_id": "1567514607660552195",
            "tweet_text": "Does below picture seem familiar to you?\n\nDon't worry, imposter syndrome is real, but it's ok. It's also a driving force to keep improving every day and stay humble.\n\nBesides, \"actual impostors don't get impostor syndrome\" - https://t.co/KLLb86BQRb\n\n#developer #impostersyndrome https://t.co/5iprLR8LuG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcDoJxGXgAMfr-Y.png\"]",
            "tweet_conversation_id": "1567514607660552195",
            "tweet_type": "Others",
            "created_at": "2022-09-07T14:06:20.000Z"
        },
        {
            "id": 3535,
            "username": "bbelderbos",
            "tweet_id": "1567502042758782976",
            "tweet_text": "#Python sets are great to deduplicate values but do note that they don't preserve order as lists do: https://t.co/KD9aXmWrQw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcDisRzWYAUBbGa.jpg\"]",
            "tweet_conversation_id": "1567502042758782976",
            "tweet_type": "Python tips",
            "created_at": "2022-09-07T13:16:24.000Z"
        },
        {
            "id": 3536,
            "username": "bbelderbos",
            "tweet_id": "1567473890464604163",
            "tweet_text": "I have mostly used the \"Declarative Mapping way\" of defining models in SQLAlchemy:\nhttps://t.co/Rbh5vYpNu5\n\nHowever if you want to define a model from say a dataclass, the \"Classical Mapping\" is a powerful alternative. \n\nExample below and here:\nhttps://t.co/26MJHvpprJ https://t.co/CthgW1pJPU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcDJBZqXEAAn9S_.jpg\"]",
            "tweet_conversation_id": "1567473890464604163",
            "tweet_type": "Others",
            "created_at": "2022-09-07T11:24:32.000Z"
        },
        {
            "id": 3537,
            "username": "bbelderbos",
            "tweet_id": "1567470003632410625",
            "tweet_text": "Using split(\"\\n\") to split a text into lines can return odd results if you are on Windows or an (older) Apple computer which use \\r\\n and \\r for newlines respectively. \n\nIn those instances, splitlines() has you covered.\n\n#Python #tips https://t.co/ULVa6aRiLU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcDFneWX0AUJig-.jpg\"]",
            "tweet_conversation_id": "1567470003632410625",
            "tweet_type": "Python tips",
            "created_at": "2022-09-07T11:09:05.000Z"
        },
        {
            "id": 3538,
            "username": "bbelderbos",
            "tweet_id": "1567421787486420992",
            "tweet_text": "Added a pre-commit hook to update the index automatically when I add new tips :)\n\nhttps://t.co/FFyQnDUdtn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566761709070589953",
            "tweet_type": "Others",
            "created_at": "2022-09-07T07:57:30.000Z"
        },
        {
            "id": 3539,
            "username": "bbelderbos",
            "tweet_id": "1567420208150618113",
            "tweet_text": "You can use the time module to get a Unix timestamp in #Python. \n\nAnd you use use datetime.fromtimestamp() to convert it into a datetime object: https://t.co/amwOBbX8rh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcCYXfmWIAA_vNz.jpg\"]",
            "tweet_conversation_id": "1567420208150618113",
            "tweet_type": "Python tips",
            "created_at": "2022-09-07T07:51:13.000Z"
        },
        {
            "id": 3540,
            "username": "bbelderbos",
            "tweet_id": "1567418855189790720",
            "tweet_text": "A datetime.timedelta object has a convenient total_seconds() method to get the time difference. You can use \"seconds\" for a rounded int: https://t.co/VRi6kTtkrx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcCXFn9XkAAFbFe.jpg\"]",
            "tweet_conversation_id": "1567418855189790720",
            "tweet_type": "Others",
            "created_at": "2022-09-07T07:45:50.000Z"
        },
        {
            "id": 3541,
            "username": "bbelderbos",
            "tweet_id": "1567188218122043393",
            "tweet_text": "In #Python you can name a slice using the slice() built-in function: https://t.co/EIxnrzd4B9",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb_FVvWXwAEWhZ4.png\"]",
            "tweet_conversation_id": "1567188218122043393",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T16:29:22.000Z"
        },
        {
            "id": 3542,
            "username": "bbelderbos",
            "tweet_id": "1567186760521629698",
            "tweet_text": "Use the #Python built-ins functions!\n\n- any(iterable) - Return True if any element of the iterable is true.\n- all(iterable) - Return True if all elements of the iterable are true\n\nReads like English \ud83d\ude0d https://t.co/4sN34ZXMqX",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb_D_O0XwAE_d_T.jpg\"]",
            "tweet_conversation_id": "1567186760521629698",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T16:23:35.000Z"
        },
        {
            "id": 3543,
            "username": "bbelderbos",
            "tweet_id": "1567148211306991616",
            "tweet_text": "Using the right data structure can impact performance.\n\nA deque (collections module) is a list-like container with fast appends and pops on either end.\n\nHere we compare a deque to a list and see that with former inserts + deletes at the beginning are much faster.\n\n#Python #tips https://t.co/lj6nCczWt7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb-fsO8XkAILA98.jpg\"]",
            "tweet_conversation_id": "1567148211306991616",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T13:50:24.000Z"
        },
        {
            "id": 3544,
            "username": "bbelderbos",
            "tweet_id": "1567106789182693381",
            "tweet_text": "How readable are your variable names? In our new podcast episode I provide some tips: https://t.co/d3WCWlu2nG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567106789182693381",
            "tweet_type": "Others",
            "created_at": "2022-09-06T11:05:48.000Z"
        },
        {
            "id": 3545,
            "username": "bbelderbos",
            "tweet_id": "1567106651009830914",
            "tweet_text": "Join myself and @juliansequeira next week for live #developer #mindset training ... https://t.co/2CWvBoiT8n",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567106651009830914",
            "tweet_type": "Others",
            "created_at": "2022-09-06T11:05:15.000Z"
        },
        {
            "id": 3546,
            "username": "bbelderbos",
            "tweet_id": "1567060609627312134",
            "tweet_text": "Set operations are a powerful feature, they will make your code more concise (see example below - no loops!)\n\nAnd as sets are implemented using hash tables, you can generally expect O(1) performance \ud83d\ude2e\n\n#Python #tips https://t.co/ck1YrvnAw8",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb9RT6iXwAAUA8f.jpg\"]",
            "tweet_conversation_id": "1567060609627312134",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T08:02:18.000Z"
        },
        {
            "id": 3547,
            "username": "bbelderbos",
            "tweet_id": "1567057198806667265",
            "tweet_text": "itertools.count() makes an iterator that returns evenly spaced values starting from a number. You can also give it a \"step\" argument.\n\n#Python #tips https://t.co/7AWBKERApQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb9ONd6WIAAHOgr.jpg\"]",
            "tweet_conversation_id": "1567057198806667265",
            "tweet_type": "Python tips",
            "created_at": "2022-09-06T07:48:45.000Z"
        },
        {
            "id": 3548,
            "username": "bbelderbos",
            "tweet_id": "1566828880249364485",
            "tweet_text": "You can use a lambda (anonymous) function to sort a dictionary by value, but using operator's itemgetter() is nice too.\n\n#Python #tips https://t.co/0M5RRfqYdl",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb5-hn6WYAAxr3V.jpg\"]",
            "tweet_conversation_id": "1566828880249364485",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T16:41:29.000Z"
        },
        {
            "id": 3549,
            "username": "bbelderbos",
            "tweet_id": "1566827156050743297",
            "tweet_text": "If you need the index inside a loop in #Python, use the enumerate() built-in function. \n\nYou can even give it a start keyword arg: https://t.co/hcfxBF21h8",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb58zMZWQAAcUa7.jpg\"]",
            "tweet_conversation_id": "1566827156050743297",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T16:34:38.000Z"
        },
        {
            "id": 3550,
            "username": "bbelderbos",
            "tweet_id": "1566761709070589953",
            "tweet_text": "I started a new repo for all the code snippets I am posting here: https://t.co/qG4lo0Ktev\n\n#Python #tips #code",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566761709070589953",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T12:14:35.000Z"
        },
        {
            "id": 3551,
            "username": "bbelderbos",
            "tweet_id": "1566760827704774658",
            "tweet_text": "I also built a little tool to quickly find emojis from the command line and copy them to the OS clipboard:\nhttps://t.co/B2tMjWjqHv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566746524909977602",
            "tweet_type": "Others",
            "created_at": "2022-09-05T12:11:04.000Z"
        },
        {
            "id": 3552,
            "username": "bbelderbos",
            "tweet_id": "1566746524909977602",
            "tweet_text": "You want emojis in Python? Check out the emoji library (PyPI): https://t.co/H5fRymL0tn",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb4zRsoXkAAl0k1.jpg\"]",
            "tweet_conversation_id": "1566746524909977602",
            "tweet_type": "Others",
            "created_at": "2022-09-05T11:14:14.000Z"
        },
        {
            "id": 3553,
            "username": "bbelderbos",
            "tweet_id": "1566727948698361857",
            "tweet_text": "Here is a video I did on how to use it: https://t.co/tAoKp5wOsJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566727863042285571",
            "tweet_type": "Others",
            "created_at": "2022-09-05T10:00:26.000Z"
        },
        {
            "id": 3554,
            "username": "bbelderbos",
            "tweet_id": "1566727863042285571",
            "tweet_text": "I love poetry but use it less these days. For packaging flit is awesome too!\n\n$ flit build\n$ flit publish\n\n#python #packaging",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566727863042285571",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T10:00:05.000Z"
        },
        {
            "id": 3555,
            "username": "bbelderbos",
            "tweet_id": "1566701626181689349",
            "tweet_text": "You can enforce \"keyword-only\" arguments in #Python by adding a * in the function arguments, arguments after this can only be supplied as keyword arguments: https://t.co/1pIOvdMIiZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb4Kv7FX0AAhvNc.jpg\"]",
            "tweet_conversation_id": "1566701626181689349",
            "tweet_type": "Python tips",
            "created_at": "2022-09-05T08:15:50.000Z"
        },
        {
            "id": 3556,
            "username": "bbelderbos",
            "tweet_id": "1566440518313181184",
            "tweet_text": "Since #Python 3.8 an = specifier was added to f-strings so that it will show both the variable name as well as the value it holds, for example: https://t.co/8Y7MTmsN2D",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb0dSXRX0AI6dH8.png\"]",
            "tweet_conversation_id": "1566440518313181184",
            "tweet_type": "Python tips",
            "created_at": "2022-09-04T14:58:17.000Z"
        },
        {
            "id": 3557,
            "username": "bbelderbos",
            "tweet_id": "1566358917059338240",
            "tweet_text": "@aj_kerrigan also mentioned in The Programmer's Brain, have you read it?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566357679664152578",
            "tweet_type": "Others",
            "created_at": "2022-09-04T09:34:02.000Z"
        },
        {
            "id": 3558,
            "username": "bbelderbos",
            "tweet_id": "1566357679664152578",
            "tweet_text": "I am finishing \"A Philosophy of Software Design\" by John K. Ousterhout - great book on software design and managing complexity in your code. I'll post some notes later this week ...\n\n#software #books #developer",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566357679664152578",
            "tweet_type": "Others",
            "created_at": "2022-09-04T09:29:07.000Z"
        },
        {
            "id": 3559,
            "username": "bbelderbos",
            "tweet_id": "1566356882415095808",
            "tweet_text": "str.title() usually works just fine, but in this example it does not work well for \"let's\" and \"isn't\".\n\nIn those instances you can use string.capwords() which will get you the desired result.\n\n#Python #tips https://t.co/Zo9F1KT2Hs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbzRDTqXoAELL3i.jpg\"]",
            "tweet_conversation_id": "1566356882415095808",
            "tweet_type": "Python tips",
            "created_at": "2022-09-04T09:25:56.000Z"
        },
        {
            "id": 3560,
            "username": "bbelderbos",
            "tweet_id": "1566350710639235072",
            "tweet_text": "= much shorter + generator = more performant. https://t.co/DUcsleOvkl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbzLghwWIAEUAMl.jpg\"]",
            "tweet_conversation_id": "1566350481802280962",
            "tweet_type": "Others",
            "created_at": "2022-09-04T09:01:25.000Z"
        },
        {
            "id": 3561,
            "username": "bbelderbos",
            "tweet_id": "1566350481802280962",
            "tweet_text": "Retrieving note files, first go:\n\ndef get_notes(notes_dir):\n    return [\n        notes_dir / file\n        for file in os.listdir(notes_dir)\n        if file.endswith(\".md\")\n    ]\n\n\ud83e\udd14let's use #Python pathlib:\n\ndef get_notes(notes_dir):\n    yield from notes_dir.glob(\"*.md\")\n\n\ud83d\ude2e\ud83d\ude0d\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566350481802280962",
            "tweet_type": "Python tips",
            "created_at": "2022-09-04T09:00:30.000Z"
        },
        {
            "id": 3562,
            "username": "bbelderbos",
            "tweet_id": "1565983362765955072",
            "tweet_text": "What if you are not sure your csv file has a header?\n\nIt turns out that the csv module has a Sniffer class that can figure it out for you!\n\nhttps://t.co/CgQWD4y00G\n\n#Python #tips https://t.co/gnCbExa0hO",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbt9iG4WQAAs1BZ.jpg\"]",
            "tweet_conversation_id": "1565983362765955072",
            "tweet_type": "Python tips",
            "created_at": "2022-09-03T08:41:42.000Z"
        },
        {
            "id": 3563,
            "username": "bbelderbos",
            "tweet_id": "1565971862294827010",
            "tweet_text": "Here is how to replace all vowels from a text while keeping a count of the number of replacements made:\n\nYou can use re.subn() to do regex replacing. It returns a tuple of the new (replaced) string and the number of replacements made.\n\n#Python #regex https://t.co/0VJdp4dlSW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbtzGpEXkAA-X31.jpg\"]",
            "tweet_conversation_id": "1565971862294827010",
            "tweet_type": "Python tips",
            "created_at": "2022-09-03T07:56:00.000Z"
        },
        {
            "id": 3564,
            "username": "bbelderbos",
            "tweet_id": "1565938272571990016",
            "tweet_text": "#Python's pathlib is awesome ... many things you can do but today I used these two nice methods to get home + current working directories: https://t.co/9B2AuqUeSe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbtUY8CXEAE570o.jpg\"]",
            "tweet_conversation_id": "1565938272571990016",
            "tweet_type": "Python tips",
            "created_at": "2022-09-03T05:42:32.000Z"
        },
        {
            "id": 3565,
            "username": "bbelderbos",
            "tweet_id": "1565623948594876416",
            "tweet_text": "If you like the code images I post, I generate those with https://t.co/kLhxe9iEN9 - an awesome website!\n\nA while ago I made a command line script to make this even easier:\nhttps://t.co/RL6A0BJEhB\n\n~/.zshrc\nalias carb=\"carbon -c -d $HOME/Downloads\"\n\n#teaching #Python #opensource",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565623948594876416",
            "tweet_type": "Python tips",
            "created_at": "2022-09-02T08:53:31.000Z"
        },
        {
            "id": 3566,
            "username": "bbelderbos",
            "tweet_id": "1565623364550541313",
            "tweet_text": "New in #Python 3.3: inspect.signature\n\n&gt; The Signature object represents the call signature of a callable object and its return annotation. To retrieve a Signature object, use the signature() function.\n\nhttps://t.co/9qRmV3e0MD\n\nI often use the dir() built-in to inspect objects. https://t.co/5HfZszzX7d",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbo1_jGXoAEvLh4.jpg\"]",
            "tweet_conversation_id": "1565623364550541313",
            "tweet_type": "Python tips",
            "created_at": "2022-09-02T08:51:12.000Z"
        },
        {
            "id": 3567,
            "username": "bbelderbos",
            "tweet_id": "1565622103495286785",
            "tweet_text": "\ud83d\udc4b new followers! I am Bob and I tweet about #Python, #developer and #mindset related topics (and occasionally about the #books I read). Thanks for the follow and hit me up if you have specific questions ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565622103495286785",
            "tweet_type": "Python tips",
            "created_at": "2022-09-02T08:46:11.000Z"
        },
        {
            "id": 3568,
            "username": "bbelderbos",
            "tweet_id": "1565621297543057409",
            "tweet_text": "Here is how you can run a function every 5 minutes in #Python (Standard Library vs PyPI package): https://t.co/GZHyrlUh4L",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbo0GK4XkAA_1Nb.jpg\"]",
            "tweet_conversation_id": "1565621297543057409",
            "tweet_type": "Python tips",
            "created_at": "2022-09-02T08:42:59.000Z"
        },
        {
            "id": 3569,
            "username": "bbelderbos",
            "tweet_id": "1565311883640463360",
            "tweet_text": "New PyBites podcast:\nHow to get more things done consistently? https://t.co/gpBqZW0mwq \n#productivity #WorkLifeBalance",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565311883640463360",
            "tweet_type": "Others",
            "created_at": "2022-09-01T12:13:29.000Z"
        },
        {
            "id": 3570,
            "username": "bbelderbos",
            "tweet_id": "1565248172796043264",
            "tweet_text": "You use:\n\nif __name__ == \"__main__\":\n\n... to write code that only executes if the module (script) is called directly, not when it gets imported into another module. You typically use it at the end of your script.\n\n#python #tips https://t.co/onAUSiYqyf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbjgbTZXgAM1HH9.jpg\"]",
            "tweet_conversation_id": "1565248172796043264",
            "tweet_type": "Python tips",
            "created_at": "2022-09-01T08:00:19.000Z"
        },
        {
            "id": 3571,
            "username": "bbelderbos",
            "tweet_id": "1565246871345438721",
            "tweet_text": "You can use the abstractmethod decorator to force derived classes to implement certain methods.\n\n#python #tips https://t.co/MwdAHWh59c",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fbjfqf4XgAIWmm8.jpg\"]",
            "tweet_conversation_id": "1565246871345438721",
            "tweet_type": "Python tips",
            "created_at": "2022-09-01T07:55:09.000Z"
        },
        {
            "id": 3572,
            "username": "bbelderbos",
            "tweet_id": "1564908952336343040",
            "tweet_text": "Here are two ways to pluralize words in #Python: https://t.co/RuvhOvdjZm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbesYZ3XEAAISDv.jpg\"]",
            "tweet_conversation_id": "1564908952336343040",
            "tweet_type": "Python tips",
            "created_at": "2022-08-31T09:32:23.000Z"
        },
        {
            "id": 3573,
            "username": "bbelderbos",
            "tweet_id": "1564669445800431616",
            "tweet_text": "Going live on Facebook the 12th to talk about #developer #mindset and what makes @pybites approach unique and effective ... https://t.co/2CWvBoiT8n",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564669445800431616",
            "tweet_type": "Others",
            "created_at": "2022-08-30T17:40:40.000Z"
        },
        {
            "id": 3574,
            "username": "bbelderbos",
            "tweet_id": "1564653256000823297",
            "tweet_text": "I had the pleasure to talk with @aj_kerrigan on our show about the fascinating Programmer's Brain book. \n\nWe discuss some lessons from the book that any #Python #developer will greatly benefit from!\n\nEnjoy: https://t.co/3MMSaxabAY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564653256000823297",
            "tweet_type": "Python tips",
            "created_at": "2022-08-30T16:36:20.000Z"
        },
        {
            "id": 3575,
            "username": "bbelderbos",
            "tweet_id": "1564522017436712960",
            "tweet_text": "Really inspiring what @Ry_Austin did with us in PDM! https://t.co/oRJIiq5I6V",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564522017436712960",
            "tweet_type": "Others",
            "created_at": "2022-08-30T07:54:51.000Z"
        },
        {
            "id": 3576,
            "username": "bbelderbos",
            "tweet_id": "1564517895907966976",
            "tweet_text": "Did you know about this nice \"dunder method shortcut\"?\n\nFunctools' total_ordering decorator: write 2 comparison magic methods, get 5 in return :) https://t.co/rdfD1gGQjV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbZIjKBXEAAA3Cf.jpg\"]",
            "tweet_conversation_id": "1564517895907966976",
            "tweet_type": "Others",
            "created_at": "2022-08-30T07:38:28.000Z"
        },
        {
            "id": 3577,
            "username": "bbelderbos",
            "tweet_id": "1564517460321116161",
            "tweet_text": "#Python has so many cool string methods, and new ones get added regularly: https://t.co/6WUBnfbW7q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbZITVeXoAUTfrN.jpg\"]",
            "tweet_conversation_id": "1564517460321116161",
            "tweet_type": "Python tips",
            "created_at": "2022-08-30T07:36:44.000Z"
        },
        {
            "id": 3578,
            "username": "bbelderbos",
            "tweet_id": "1564294585035231233",
            "tweet_text": "Awesome book, congrats + great work! Also honored to have written the forward for it :)\n\n#Django #developer #books https://t.co/kNzgJHvYxH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564294585035231233",
            "tweet_type": "Others",
            "created_at": "2022-08-29T16:51:06.000Z"
        },
        {
            "id": 3579,
            "username": "bbelderbos",
            "tweet_id": "1561633961322942464",
            "tweet_text": "What are you coding in #Python today?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561633961322942464",
            "tweet_type": "Python tips",
            "created_at": "2022-08-22T08:38:44.000Z"
        },
        {
            "id": 3580,
            "username": "bbelderbos",
            "tweet_id": "1561294918923993088",
            "tweet_text": "Love looking at source, #Django's slugify: https://t.co/ztePL46a3T https://t.co/LiHYCOYU3m",
            "tweet_media": "[\"https://pbs.twimg.com/media/FarVPZGXkAIL4lQ.jpg\"]",
            "tweet_conversation_id": "1561294918923993088",
            "tweet_type": "Others",
            "created_at": "2022-08-21T10:11:30.000Z"
        },
        {
            "id": 3581,
            "username": "bbelderbos",
            "tweet_id": "1561292212452859904",
            "tweet_text": "Fascinating thing about highly successful #entrepreneurs is that they calculate the worst case scenario. They don't like losing so they protect the downside.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561292212452859904",
            "tweet_type": "Others",
            "created_at": "2022-08-21T10:00:45.000Z"
        },
        {
            "id": 3582,
            "username": "bbelderbos",
            "tweet_id": "1561291546481262593",
            "tweet_text": "What do you often forget when coding?\n\nOne thing I often overlook is adding enctype=\"multipart/form-data\" to my HTML form when I want file upload support :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561291546481262593",
            "tweet_type": "Others",
            "created_at": "2022-08-21T09:58:06.000Z"
        },
        {
            "id": 3583,
            "username": "bbelderbos",
            "tweet_id": "1561268549565517824",
            "tweet_text": "Use colors in your terminal without #Python libraries (of course usually you would go with colorama or rich) https://t.co/FCKEjEfG3u",
            "tweet_media": "[\"https://pbs.twimg.com/media/Faq9b5zX0AESJ1f.jpg\"]",
            "tweet_conversation_id": "1561268549565517824",
            "tweet_type": "Python tips",
            "created_at": "2022-08-21T08:26:43.000Z"
        },
        {
            "id": 3584,
            "username": "bbelderbos",
            "tweet_id": "1560976200910209024",
            "tweet_text": "There is a module for everything in #Python!\n\nConvert Markdown syntax into HTML\n\nhttps://t.co/k9xRA3rw9l https://t.co/raUaDDBog0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FamzfddXEAA-BGN.jpg\"]",
            "tweet_conversation_id": "1560976200910209024",
            "tweet_type": "Python tips",
            "created_at": "2022-08-20T13:05:02.000Z"
        },
        {
            "id": 3585,
            "username": "bbelderbos",
            "tweet_id": "1560971483400257536",
            "tweet_text": "Another one I picked up again recently and gives me so much inspiration is: https://t.co/rHFWwkhAaM\n\n#business #entrepreneur",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560970898911420418",
            "tweet_type": "Others",
            "created_at": "2022-08-20T12:46:17.000Z"
        },
        {
            "id": 3586,
            "username": "bbelderbos",
            "tweet_id": "1560970898911420418",
            "tweet_text": "Need to get some more steps in this weekend? \n\nTune in to our podcast: https://t.co/oONjlZJAsj\n\n#Python #developer #mindset",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560970898911420418",
            "tweet_type": "Python tips",
            "created_at": "2022-08-20T12:43:58.000Z"
        },
        {
            "id": 3587,
            "username": "bbelderbos",
            "tweet_id": "1560662072782094336",
            "tweet_text": "Better / correction: drop the lambda! \n\nhttps://t.co/ZEWgSn31i4\n\n=&gt; key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower).\n\nThanks for the reminder @BKorren https://t.co/rjkWrj79j4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaiVpl9aUAA4Uod.jpg\"]",
            "tweet_conversation_id": "1560527214889914368",
            "tweet_type": "Others",
            "created_at": "2022-08-19T16:16:48.000Z"
        },
        {
            "id": 3588,
            "username": "bbelderbos",
            "tweet_id": "1560546342111531008",
            "tweet_text": "Introducing a project template for modern #Python packages https://t.co/sB5ZX8OZZd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560546342111531008",
            "tweet_type": "Python tips",
            "created_at": "2022-08-19T08:36:56.000Z"
        },
        {
            "id": 3589,
            "username": "bbelderbos",
            "tweet_id": "1560527214889914368",
            "tweet_text": "Sort files by creation date in #Python: https://t.co/cUQn6lOPnR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FagbKm1XwAAPpA0.jpg\"]",
            "tweet_conversation_id": "1560527214889914368",
            "tweet_type": "Python tips",
            "created_at": "2022-08-19T07:20:55.000Z"
        },
        {
            "id": 3590,
            "username": "bbelderbos",
            "tweet_id": "1560238563362496518",
            "tweet_text": "0 podcasts last week, 2 this week! https://t.co/e7qEpRCQaD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560238563362496518",
            "tweet_type": "Others",
            "created_at": "2022-08-18T12:13:55.000Z"
        },
        {
            "id": 3591,
            "username": "bbelderbos",
            "tweet_id": "1560212562704203777",
            "tweet_text": "#Python, am I on Windows? https://t.co/fzS97NuBqG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fab9BdXXEAAKa8Z.png\"]",
            "tweet_conversation_id": "1560212562704203777",
            "tweet_type": "Python tips",
            "created_at": "2022-08-18T10:30:36.000Z"
        },
        {
            "id": 3592,
            "username": "bbelderbos",
            "tweet_id": "1560190065657221120",
            "tweet_text": "Btw 3.10 introduced the \"strict\" keyword for the zip() built-in function, so it now warns you if the passed in iterables are not of the same length: https://t.co/pfSb7GMNgD",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fabob60XkAMFCM4.jpg\"]",
            "tweet_conversation_id": "1560189370204028929",
            "tweet_type": "Others",
            "created_at": "2022-08-18T09:01:13.000Z"
        },
        {
            "id": 3593,
            "username": "bbelderbos",
            "tweet_id": "1560189370204028929",
            "tweet_text": "#Python #tips: make a dict of two iterables (assuming same length, if not look into itertools' zip_longest) https://t.co/ZOj5ysoucC",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fabnv5FXwAEs3Zv.jpg\"]",
            "tweet_conversation_id": "1560189370204028929",
            "tweet_type": "Python tips",
            "created_at": "2022-08-18T08:58:27.000Z"
        },
        {
            "id": 3594,
            "username": "bbelderbos",
            "tweet_id": "1560171403176861696",
            "tweet_text": "Very cool #vim trick \ud83d\udcaa\n\n\" opens the file under cursor in new vertical split window\nnmap gf :vertical wincmd f&lt;CR&gt;\n\nIt even ignores the extension so typing gf while on a string called 20220817104446, it manages to open a file called https://t.co/Jk1k2DmkKy \ud83d\ude2e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560171403176861696",
            "tweet_type": "Others",
            "created_at": "2022-08-18T07:47:03.000Z"
        },
        {
            "id": 3595,
            "username": "bbelderbos",
            "tweet_id": "1559860984835178496",
            "tweet_text": "#Python template strings are a nice way to build up your strings beforehand: https://t.co/XX8fJaEIRX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaW9RuxXkAI-QDE.jpg\"]",
            "tweet_conversation_id": "1559860984835178496",
            "tweet_type": "Python tips",
            "created_at": "2022-08-17T11:13:34.000Z"
        },
        {
            "id": 3596,
            "username": "bbelderbos",
            "tweet_id": "1559821246333943810",
            "tweet_text": "As a #developer spend a good hour a week optimizing your tooling, the effect this has on your #productivity will compound over time.\n\nToday I am setting up a simple (command line) Zettelkasten flow to take better notes. \n\nWhat about you?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559821246333943810",
            "tweet_type": "Others",
            "created_at": "2022-08-17T08:35:39.000Z"
        },
        {
            "id": 3597,
            "username": "bbelderbos",
            "tweet_id": "1559586442636132357",
            "tweet_text": "Check out this episode if you want to learn more about #Python type hints ... https://t.co/pFYjBRqOwB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559586442636132357",
            "tweet_type": "Python tips",
            "created_at": "2022-08-16T17:02:38.000Z"
        },
        {
            "id": 3598,
            "username": "bbelderbos",
            "tweet_id": "1559218151623122944",
            "tweet_text": "For non-tech #reading @Scribd is really good, so many #books on that service, happy there is a Netflix for books in the end :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559218151623122944",
            "tweet_type": "Others",
            "created_at": "2022-08-15T16:39:10.000Z"
        },
        {
            "id": 3599,
            "username": "bbelderbos",
            "tweet_id": "1559217924107370496",
            "tweet_text": "And what are you reading this week?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559122580925202432",
            "tweet_type": "Others",
            "created_at": "2022-08-15T16:38:16.000Z"
        },
        {
            "id": 3600,
            "username": "bbelderbos",
            "tweet_id": "1559217844813971456",
            "tweet_text": "What is your favorite #Python library or open source project and why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559217844813971456",
            "tweet_type": "Python tips",
            "created_at": "2022-08-15T16:37:57.000Z"
        },
        {
            "id": 3601,
            "username": "bbelderbos",
            "tweet_id": "1559131762386780162",
            "tweet_text": "Book tip: Outdoor kids in an inside world (Rinella) - @juliansequeira",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559122381242859521",
            "tweet_type": "Others",
            "created_at": "2022-08-15T10:55:54.000Z"
        },
        {
            "id": 3602,
            "username": "bbelderbos",
            "tweet_id": "1559124475953700864",
            "tweet_text": "#Python #tips: did you know that functools.partial() lets you put a basic wrapper around an existing function? Here is an example of how we could use it for print(): https://t.co/JTDwZKax0G",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaMfWK_XEAANpvd.jpg\"]",
            "tweet_conversation_id": "1559124475953700864",
            "tweet_type": "Python tips",
            "created_at": "2022-08-15T10:26:56.000Z"
        },
        {
            "id": 3603,
            "username": "bbelderbos",
            "tweet_id": "1559122580925202432",
            "tweet_text": "Started reading The Programmer's Brain: What Every Programmer Needs to Know about Cognition - fascinating and already seems a staple / programmer must read.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559122580925202432",
            "tweet_type": "Others",
            "created_at": "2022-08-15T10:19:25.000Z"
        },
        {
            "id": 3604,
            "username": "bbelderbos",
            "tweet_id": "1559122381242859521",
            "tweet_text": "Weekend win: being in nature makes you genuinely happy. Do more of that.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559122381242859521",
            "tweet_type": "Others",
            "created_at": "2022-08-15T10:18:37.000Z"
        },
        {
            "id": 3605,
            "username": "bbelderbos",
            "tweet_id": "1558015771518926848",
            "tweet_text": "Be careful ... 10 packages have been removed from the #Python Package Index (PyPI) because they were found harvesting data - https://t.co/tfj7Nd2OL0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558015771518926848",
            "tweet_type": "Python tips",
            "created_at": "2022-08-12T09:01:21.000Z"
        },
        {
            "id": 3606,
            "username": "bbelderbos",
            "tweet_id": "1557977909943484416",
            "tweet_text": "From the #Python uppercase convention of constants you wouldn't override them, but nothing stops you either!\n\nSince 3.8 we can have mypy yell at you though :)\nhttps://t.co/9c4iBPmX6I https://t.co/PImAITUSh3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ8MZK1XoAA5Uxh.jpg\"]",
            "tweet_conversation_id": "1557977909943484416",
            "tweet_type": "Python tips",
            "created_at": "2022-08-12T06:30:54.000Z"
        },
        {
            "id": 3607,
            "username": "bbelderbos",
            "tweet_id": "1557716585212743681",
            "tweet_text": "Another nice quote from the Robust #Python book: \n\n\"This is the mark of robust code; you are making it increasingly harder for #developers to make mistakes, which reduces their error rates, which reduces the number of bugs users will experience.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557716585212743681",
            "tweet_type": "Python tips",
            "created_at": "2022-08-11T13:12:29.000Z"
        },
        {
            "id": 3608,
            "username": "bbelderbos",
            "tweet_id": "1557671922879660032",
            "tweet_text": "\"Errors should never pass silently\", but sometimes you really want to mute an exception.\n\nYou can do so with contextlib's suppress context manager, see below.\n\n#Python #tips https://t.co/lD4QEO3llk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ32U4CXEAUDhga.jpg\"]",
            "tweet_conversation_id": "1557671922879660032",
            "tweet_type": "Python tips",
            "created_at": "2022-08-11T10:15:01.000Z"
        },
        {
            "id": 3609,
            "username": "bbelderbos",
            "tweet_id": "1557269429729329157",
            "tweet_text": "How to remove items from a list while iterating? You can use a list comprehension. In this example we remove uneven numbers using one: https://t.co/u7HLyUl7RY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZyIPi8XwAAADa9.jpg\"]",
            "tweet_conversation_id": "1557269429729329157",
            "tweet_type": "Others",
            "created_at": "2022-08-10T07:35:39.000Z"
        },
        {
            "id": 3610,
            "username": "bbelderbos",
            "tweet_id": "1556925656784674817",
            "tweet_text": "#python #tip: if you need to use a slice more than once you can define and reuse it as a slice object = more DRY (don't repeat yourself): https://t.co/Z7H8ez6ZU7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZtPjFLXgAALrl1.jpg\"]",
            "tweet_conversation_id": "1556925656784674817",
            "tweet_type": "Python tips",
            "created_at": "2022-08-09T08:49:37.000Z"
        },
        {
            "id": 3611,
            "username": "bbelderbos",
            "tweet_id": "1556561749763149829",
            "tweet_text": "The atexit module defines functions to register and unregister cleanup functions. \n\nFunctions thus registered are automatically executed upon normal interpreter termination.\n\n#python #tip https://t.co/BLSVr1CpmU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZoEnatXoAEDyJI.jpg\"]",
            "tweet_conversation_id": "1556561749763149829",
            "tweet_type": "Python tips",
            "created_at": "2022-08-08T08:43:35.000Z"
        },
        {
            "id": 3612,
            "username": "bbelderbos",
            "tweet_id": "1555484382114217984",
            "tweet_text": "You can use the #Python textwrap module to wrap text to columns: https://t.co/jM3TQozjsx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZYwq4nXgAAXfLQ.jpg\"]",
            "tweet_conversation_id": "1555484382114217984",
            "tweet_type": "Python tips",
            "created_at": "2022-08-05T09:22:30.000Z"
        },
        {
            "id": 3613,
            "username": "bbelderbos",
            "tweet_id": "1555477328981024770",
            "tweet_text": "ACCURE is doing some really cool things, you might want to check them out: https://t.co/hyoWiseWhc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555477328981024770",
            "tweet_type": "Others",
            "created_at": "2022-08-05T08:54:29.000Z"
        },
        {
            "id": 3614,
            "username": "bbelderbos",
            "tweet_id": "1554839497048727552",
            "tweet_text": "Did you know @FastAPI got some ideas, like dependency injection, from front-end frameworks? \ud83d\ude2e\ud83e\udd2f\n\nYou can listen to Sebasti\u00e1n Ramirez talk about this on our podcast here:\n\nhttps://t.co/3HwwoLv8NC https://t.co/Lis6HsFgSt",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1554839400823013377/pu/vid/1280x720/Qir1MctoiOBtnQcM.mp4?tag=12\"]",
            "tweet_conversation_id": "1554839497048727552",
            "tweet_type": "Others",
            "created_at": "2022-08-03T14:39:58.000Z"
        },
        {
            "id": 3615,
            "username": "bbelderbos",
            "tweet_id": "1554766146825584640",
            "tweet_text": "What happens if an API returns unix timestamps?\n\nWell, you can use #Python's datetime.fromtimestamp to convert them into datetime objects :) https://t.co/CeaRN1B8Yk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZOjikQXgAIjp60.jpg\"]",
            "tweet_conversation_id": "1554766146825584640",
            "tweet_type": "Python tips",
            "created_at": "2022-08-03T09:48:30.000Z"
        },
        {
            "id": 3616,
            "username": "bbelderbos",
            "tweet_id": "1554738460354805761",
            "tweet_text": "Stay tuned for another @Pybites #tips book \ud83c\udf89\n\nNot Python, not dev, no! #Career and #minset, the often overlooked critical skills you'll need to succeed as a #developer \ud83d\udcaa\n\nAs we're building the product as we speak, what should we absolutely add to make it awesome for you? \ud83d\udca1 https://t.co/RJSVrj24La",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZOKEmzXkAIh0na.png\"]",
            "tweet_conversation_id": "1554738460354805761",
            "tweet_type": "Others",
            "created_at": "2022-08-03T07:58:29.000Z"
        },
        {
            "id": 3617,
            "username": "bbelderbos",
            "tweet_id": "1554731674579222529",
            "tweet_text": "Reading this book to learn more about #Python type hints btw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554452517471363072",
            "tweet_type": "Python tips",
            "created_at": "2022-08-03T07:31:31.000Z"
        },
        {
            "id": 3618,
            "username": "bbelderbos",
            "tweet_id": "1554452517471363072",
            "tweet_text": "\"Once you start to accept the ephemeral nature of your code, you start to realize that it\u2019s not enough to write bug-free code for the present; you need to enable the codebase\u2019s future owners to be able to change your code with confidence.\"\n\n- Robust Python book (Patrick Viafore)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554452517471363072",
            "tweet_type": "Others",
            "created_at": "2022-08-02T13:02:15.000Z"
        },
        {
            "id": 3619,
            "username": "bbelderbos",
            "tweet_id": "1554088766075244546",
            "tweet_text": "math.ceil rounds a number upward to its nearest integer\n\n#python #tips https://t.co/jqYsSyKS72",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZE7enDWYAQlV3L.png\"]",
            "tweet_conversation_id": "1554088766075244546",
            "tweet_type": "Python tips",
            "created_at": "2022-08-01T12:56:50.000Z"
        },
        {
            "id": 3620,
            "username": "bbelderbos",
            "tweet_id": "1552892294650597376",
            "tweet_text": "Did you know you can run some startup code before entering the #Python REPL? Here is how to do it: https://t.co/RUYboqc6Ub",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYz7QMlWYAAnFp6.jpg\"]",
            "tweet_conversation_id": "1552892294650597376",
            "tweet_type": "Python tips",
            "created_at": "2022-07-29T05:42:29.000Z"
        },
        {
            "id": 3621,
            "username": "bbelderbos",
            "tweet_id": "1552601127656595456",
            "tweet_text": "You can open a web browser in #Python simply by doing this: https://t.co/lzcl1MQt8S",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYvyeQiWQAUDEDS.jpg\"]",
            "tweet_conversation_id": "1552601127656595456",
            "tweet_type": "Python tips",
            "created_at": "2022-07-28T10:25:29.000Z"
        },
        {
            "id": 3622,
            "username": "bbelderbos",
            "tweet_id": "1552337438177169409",
            "tweet_text": "Nice article:\nhttps://t.co/21ezruF0er\n\n&gt; isinstance is usually the preferred way to compare types. It\u2019s not only faster but also considers inheritance, which is often the desired behavior.\n\n#python #tips https://t.co/kUyJcxNDWX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYsCV0nX0AERC7S.jpg\"]",
            "tweet_conversation_id": "1552337438177169409",
            "tweet_type": "Python tips",
            "created_at": "2022-07-27T16:57:40.000Z"
        },
        {
            "id": 3623,
            "username": "bbelderbos",
            "tweet_id": "1552244286044999680",
            "tweet_text": "Another Bite \ud83c\udf89\nCode more #Python \ud83d\udc0d\ud83d\udcaa https://t.co/7DwiMcKJ8m",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552244286044999680",
            "tweet_type": "Python tips",
            "created_at": "2022-07-27T10:47:31.000Z"
        },
        {
            "id": 3624,
            "username": "bbelderbos",
            "tweet_id": "1552244188158246914",
            "tweet_text": "Great resource! https://t.co/Ase3MwmLJf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552244188158246914",
            "tweet_type": "Others",
            "created_at": "2022-07-27T10:47:08.000Z"
        },
        {
            "id": 3625,
            "username": "bbelderbos",
            "tweet_id": "1552206223432351744",
            "tweet_text": "If you need a simple HTTP Server, for example to serve files from a directory, easy to do with #Python: \n\npython3 -m http.server\n\n=&gt; browse to http://localhost:8000/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552206223432351744",
            "tweet_type": "Python tips",
            "created_at": "2022-07-27T08:16:16.000Z"
        },
        {
            "id": 3626,
            "username": "bbelderbos",
            "tweet_id": "1552205911300636672",
            "tweet_text": "My future (now present) self profusely thanking myself for documenting the AWS Lambda creation process well, now that new Bite exercises require new ones \ud83d\ude05\n\nRemember: spending an hour on docs early can save you tens (if not hundreds) of hours later on!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552205911300636672",
            "tweet_type": "Others",
            "created_at": "2022-07-27T08:15:02.000Z"
        },
        {
            "id": 3627,
            "username": "bbelderbos",
            "tweet_id": "1551836960683171840",
            "tweet_text": "importlib.metadata is a nice (Standard Lib) module that lets you easily get package metadata.\n\nHow do I know? I saw @JnyJny use it the other day to dynamically get the version in __init__.py :)\n\nSo also a reminder: read source code, you'll a lot of cool stuff!\n\n#python #tips https://t.co/cwGEWFL9jy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYk6sn3X0AAIdQD.jpg\"]",
            "tweet_conversation_id": "1551836960683171840",
            "tweet_type": "Python tips",
            "created_at": "2022-07-26T07:48:57.000Z"
        },
        {
            "id": 3628,
            "username": "bbelderbos",
            "tweet_id": "1550463973979570177",
            "tweet_text": "Did you know you can make a dataclass instance from a dictionary? Just use ** unpacking: https://t.co/kqyqlnKZpd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYRavQHWQAgOeSa.jpg\"]",
            "tweet_conversation_id": "1550463973979570177",
            "tweet_type": "Others",
            "created_at": "2022-07-22T12:53:12.000Z"
        },
        {
            "id": 3629,
            "username": "bbelderbos",
            "tweet_id": "1550175879380320259",
            "tweet_text": "Nice quote I just read in Programmer's Weekly:\n\n\"Good software, like wine, takes time.\" - Joel Spolsky",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550175879380320259",
            "tweet_type": "Others",
            "created_at": "2022-07-21T17:48:25.000Z"
        },
        {
            "id": 3630,
            "username": "bbelderbos",
            "tweet_id": "1550137183452921857",
            "tweet_text": "Currently reading The Missing README https://t.co/NEuQ2ZbR2b - thanks @Se7enSquared.\n\n#developer #books",
            "tweet_media": "[]",
            "tweet_conversation_id": "1550137183452921857",
            "tweet_type": "Others",
            "created_at": "2022-07-21T15:14:39.000Z"
        },
        {
            "id": 3631,
            "username": "bbelderbos",
            "tweet_id": "1550100859228459008",
            "tweet_text": "With dataclasses you can use the __post_init__() hook to do some post constructor processing.\n\n#Python #tips https://t.co/0LbSVYLAkw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYMQgiaWYAEqSY4.jpg\"]",
            "tweet_conversation_id": "1550100859228459008",
            "tweet_type": "Python tips",
            "created_at": "2022-07-21T12:50:18.000Z"
        },
        {
            "id": 3632,
            "username": "bbelderbos",
            "tweet_id": "1549785343209226242",
            "tweet_text": "wow those metrics! https://t.co/Axn9Wmk3T0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYHxhrLWQAInWt6.jpg\"]",
            "tweet_conversation_id": "1549785020436545537",
            "tweet_type": "Others",
            "created_at": "2022-07-20T15:56:34.000Z"
        },
        {
            "id": 3633,
            "username": "bbelderbos",
            "tweet_id": "1549785020436545537",
            "tweet_text": "New Pybites article by @RHelmstedter (thanks!):\n \nA Case Study in Refactoring #Python: Clean Code Is Often Faster - enjoy! \n\nhttps://t.co/3HxE6Dn1zW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549785020436545537",
            "tweet_type": "Python tips",
            "created_at": "2022-07-20T15:55:17.000Z"
        },
        {
            "id": 3634,
            "username": "bbelderbos",
            "tweet_id": "1549441015370731527",
            "tweet_text": "Always cracks me up :)\n\n&gt;&gt;&gt; from __future__ import braces\n  File \"&lt;stdin&gt;\", line 1\nSyntaxError: not a chance\n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549441015370731527",
            "tweet_type": "Python tips",
            "created_at": "2022-07-19T17:08:19.000Z"
        },
        {
            "id": 3635,
            "username": "bbelderbos",
            "tweet_id": "1549298997340172288",
            "tweet_text": "Use #Python itertools.accumulate and enumerate to calculate a running average: https://t.co/b3VYKgmxis",
            "tweet_media": "[\"https://pbs.twimg.com/media/FX8YDH-XgAEQDB9.jpg\"]",
            "tweet_conversation_id": "1549298997340172288",
            "tweet_type": "Python tips",
            "created_at": "2022-07-19T07:44:00.000Z"
        },
        {
            "id": 3636,
            "username": "bbelderbos",
            "tweet_id": "1549073167506984960",
            "tweet_text": "What flake8 rules do you mute at times?\n \nTwo I can think of are W391, E501 - any other? \n\n#Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1549073167506984960",
            "tweet_type": "Python tips",
            "created_at": "2022-07-18T16:46:38.000Z"
        },
        {
            "id": 3637,
            "username": "bbelderbos",
            "tweet_id": "1548914734619049984",
            "tweet_text": "TIL: #Python re.sub() needs \"flags\" to be a keyword (not positional) argument: https://t.co/OtFyDegPgF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FX7Zr7gXEAEF0kI.jpg\"]",
            "tweet_conversation_id": "1548914734619049984",
            "tweet_type": "Python tips",
            "created_at": "2022-07-18T06:17:04.000Z"
        },
        {
            "id": 3638,
            "username": "bbelderbos",
            "tweet_id": "1547962150693380097",
            "tweet_text": "I just cracked Bite 16. PyBites date generator - and now I challenge you!  \nhttps://t.co/vKlvbUticf\n#Python #CodeChallenges",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547962150693380097",
            "tweet_type": "Python tips",
            "created_at": "2022-07-15T15:11:51.000Z"
        },
        {
            "id": 3639,
            "username": "bbelderbos",
            "tweet_id": "1547850149434535937",
            "tweet_text": "TIL list.extend() receives an iterable which means you can give it a generator as well. Beautiful #Python \ud83d\ude0d https://t.co/JxJtQTDPdu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXsRdMnUIAAjz8g.jpg\"]",
            "tweet_conversation_id": "1547850149434535937",
            "tweet_type": "Python tips",
            "created_at": "2022-07-15T07:46:47.000Z"
        },
        {
            "id": 3640,
            "username": "bbelderbos",
            "tweet_id": "1547562713567485952",
            "tweet_text": "Get a list of countries in #Python using the pycountry package: https://t.co/pay2Z6gSiH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXoLQUBUIAEGFrV.jpg\"]",
            "tweet_conversation_id": "1547562713567485952",
            "tweet_type": "Python tips",
            "created_at": "2022-07-14T12:44:37.000Z"
        },
        {
            "id": 3641,
            "username": "bbelderbos",
            "tweet_id": "1547170723877138432",
            "tweet_text": "You can use \"while True\" to make an infinite loop, for example to keep asking a user for input.\n\n#python #tips https://t.co/yaAkKmerQT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXh-fj1XwAI5AC_.jpg\"]",
            "tweet_conversation_id": "1547170723877138432",
            "tweet_type": "Python tips",
            "created_at": "2022-07-13T10:47:00.000Z"
        },
        {
            "id": 3642,
            "username": "bbelderbos",
            "tweet_id": "1547130430801018882",
            "tweet_text": "Does writer's block exist?\n\nHad a bit of trouble finding motivation this week.\n\nBut motivation is not a magical button.\n\nUsually you just have to sit down and start doing the work, motivation will follow ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547130430801018882",
            "tweet_type": "Others",
            "created_at": "2022-07-13T08:06:53.000Z"
        },
        {
            "id": 3643,
            "username": "bbelderbos",
            "tweet_id": "1547130120871223298",
            "tweet_text": "Reminder to self: keep doing varied reading over morning coffee, always finding cool new things :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547122692792504320",
            "tweet_type": "Others",
            "created_at": "2022-07-13T08:05:39.000Z"
        },
        {
            "id": 3644,
            "username": "bbelderbos",
            "tweet_id": "1547129963865833475",
            "tweet_text": "+ code reviewing, two impactful learning experiences as a #developer! https://t.co/v5xXgaSrVU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1547129963865833475",
            "tweet_type": "Others",
            "created_at": "2022-07-13T08:05:02.000Z"
        },
        {
            "id": 3645,
            "username": "bbelderbos",
            "tweet_id": "1547122692792504320",
            "tweet_text": "You can use textblob for spelling correction as well \ud83d\udca1 https://t.co/KrYzGIKG2h",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXh7TQBXgAYa5sr.jpg\"]",
            "tweet_conversation_id": "1547122692792504320",
            "tweet_type": "Others",
            "created_at": "2022-07-13T07:36:08.000Z"
        },
        {
            "id": 3646,
            "username": "bbelderbos",
            "tweet_id": "1546744684365627393",
            "tweet_text": "In #Python you can chain comparison operators. \n\nInstead of writing \"1 &lt; a and a &lt; 10\" you can write \"1 &lt; a &lt; 10\" which is a bit more concise. https://t.co/10KkxZsfbL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FXckDg4XoAA9BGV.png\"]",
            "tweet_conversation_id": "1546744684365627393",
            "tweet_type": "Python tips",
            "created_at": "2022-07-12T06:34:04.000Z"
        },
        {
            "id": 3647,
            "username": "bbelderbos",
            "tweet_id": "1546743628034441217",
            "tweet_text": "Copy a file to the clipboard, paste it to a webpage -&gt; auto-uploads to AWS S3 bucket ... \n\nThe topic of my next blog post ... \n\n#python #aws #javascript",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546743628034441217",
            "tweet_type": "Python tips",
            "created_at": "2022-07-12T06:29:52.000Z"
        },
        {
            "id": 3648,
            "username": "bbelderbos",
            "tweet_id": "1546405311413616641",
            "tweet_text": "Chart.js \ud83d\ude0d\n\nHere is how to do it:\nhttps://t.co/TF0PavVIrV https://t.co/qBk7FY1g5G",
            "tweet_media": "[]",
            "tweet_conversation_id": "1546405311413616641",
            "tweet_type": "Others",
            "created_at": "2022-07-11T08:05:31.000Z"
        },
        {
            "id": 3649,
            "username": "bbelderbos",
            "tweet_id": "1544751197793521665",
            "tweet_text": "An example of scratching your own itch and starting simple when creating a #Python app ... https://t.co/ZQLlsD31vo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544751197793521665",
            "tweet_type": "Python tips",
            "created_at": "2022-07-06T18:32:40.000Z"
        },
        {
            "id": 3650,
            "username": "bbelderbos",
            "tweet_id": "1544750977278005255",
            "tweet_text": "We had a blast, fun episode, some really valuable #career tips: https://t.co/dLoN4SP91o",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544750977278005255",
            "tweet_type": "Others",
            "created_at": "2022-07-06T18:31:47.000Z"
        },
        {
            "id": 3651,
            "username": "bbelderbos",
            "tweet_id": "1544598041486835713",
            "tweet_text": "Very true, don't get stuck in tutorial hell, build, (deliberately) practice, every single day. \n\nThat's the path to becoming a programmer / developer. https://t.co/Jgk4DRrSHG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544598041486835713",
            "tweet_type": "Others",
            "created_at": "2022-07-06T08:24:04.000Z"
        },
        {
            "id": 3652,
            "username": "bbelderbos",
            "tweet_id": "1544589543348862979",
            "tweet_text": "\u2753\n\nWhat are some other emojis you often use in code reviews?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544584975265284099",
            "tweet_type": "Others",
            "created_at": "2022-07-06T07:50:18.000Z"
        },
        {
            "id": 3653,
            "username": "bbelderbos",
            "tweet_id": "1544584975265284099",
            "tweet_text": "Thanks @Se7enSquared for sharing this resource: https://t.co/jF9G9dd3sN \n\n... as a way to sound more friendly and not come across as being harsh in code reviews \ud83d\ude03\ud83d\udca1\n\n#developer #codereview #communication",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544584975265284099",
            "tweet_type": "Others",
            "created_at": "2022-07-06T07:32:09.000Z"
        },
        {
            "id": 3654,
            "username": "bbelderbos",
            "tweet_id": "1544574198013739010",
            "tweet_text": "Important #Python fact: assigning a mutable object makes a copy by reference (alias), it does not create a new object. We can see that by using the id() built-in: https://t.co/jLtz51KZQx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW9uA2hWYAAfrGb.jpg\"]",
            "tweet_conversation_id": "1544574198013739010",
            "tweet_type": "Python tips",
            "created_at": "2022-07-06T06:49:20.000Z"
        },
        {
            "id": 3655,
            "username": "bbelderbos",
            "tweet_id": "1544197186468159491",
            "tweet_text": "#Python #tip: convert a date string to datetime and vice versa: https://t.co/SvWM8O7Npi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FW4XGh5WAAI4mxU.jpg\"]",
            "tweet_conversation_id": "1544197186468159491",
            "tweet_type": "Python tips",
            "created_at": "2022-07-05T05:51:13.000Z"
        },
        {
            "id": 3656,
            "username": "bbelderbos",
            "tweet_id": "1544196863338872832",
            "tweet_text": "Wanna do some more #shorts, #Python / #developer prefs for these? Thanks https://t.co/mjo8qNbh18",
            "tweet_media": "[]",
            "tweet_conversation_id": "1544196863338872832",
            "tweet_type": "Python tips",
            "created_at": "2022-07-05T05:49:56.000Z"
        },
        {
            "id": 3657,
            "username": "bbelderbos",
            "tweet_id": "1543853506351742976",
            "tweet_text": "The #Python datetime and calendar modules are pretty amazing \ud83d\udc0d\n\nHere is how you get the current weekday (number and name).\n\nHappy Monday \ud83d\ude04 https://t.co/6hJW2waoA8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWzekUjWAAEc9Ze.jpg\"]",
            "tweet_conversation_id": "1543853506351742976",
            "tweet_type": "Python tips",
            "created_at": "2022-07-04T07:05:33.000Z"
        },
        {
            "id": 3658,
            "username": "bbelderbos",
            "tweet_id": "1542800879903981568",
            "tweet_text": "Super nice recipe to make a download csv option (action) in your #Django admin (this whole cookbook is awesome!)\nhttps://t.co/i7xXgSZwv5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542800879903981568",
            "tweet_type": "Others",
            "created_at": "2022-07-01T09:22:48.000Z"
        },
        {
            "id": 3659,
            "username": "bbelderbos",
            "tweet_id": "1542753608785174528",
            "tweet_text": "More #python #tips: you can use csv.DictReader() to process rows in a csv file as dictionaries, much nicer \ud83d\ude0d https://t.co/lvGdBYiBwd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWj2K_IXoAEPOaU.jpg\"]",
            "tweet_conversation_id": "1542753608785174528",
            "tweet_type": "Python tips",
            "created_at": "2022-07-01T06:14:57.000Z"
        },
        {
            "id": 3660,
            "username": "bbelderbos",
            "tweet_id": "1542751552292765697",
            "tweet_text": "Love it when people contribute to our blog and code repos :) https://t.co/h4yGXZDdFA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542751552292765697",
            "tweet_type": "Others",
            "created_at": "2022-07-01T06:06:47.000Z"
        },
        {
            "id": 3661,
            "username": "bbelderbos",
            "tweet_id": "1542414332771926022",
            "tweet_text": "Another Bite, have fun!\nKeep calm and code in Python \ud83d\udc0d\ud83d\udcaa https://t.co/L6JAVuB7ql",
            "tweet_media": "[]",
            "tweet_conversation_id": "1542414332771926022",
            "tweet_type": "Others",
            "created_at": "2022-06-30T07:46:48.000Z"
        },
        {
            "id": 3662,
            "username": "bbelderbos",
            "tweet_id": "1542411745599299588",
            "tweet_text": "You can make a dictionary from a keys iterator. You can give it a different value as well, but don't give it a mutable object \ud83d\ude05\n\n#python #tips https://t.co/N0xwznuvUa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWe_NDbWIAAxgnu.jpg\"]",
            "tweet_conversation_id": "1542411745599299588",
            "tweet_type": "Python tips",
            "created_at": "2022-06-30T07:36:31.000Z"
        },
        {
            "id": 3663,
            "username": "bbelderbos",
            "tweet_id": "1542087961369534465",
            "tweet_text": "Create a list of current year months, you can use zfill to prepend the month numbers with a 0\n\n#python #tips https://t.co/uniGXW4fle",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWaYlojWQAA6RG3.jpg\"]",
            "tweet_conversation_id": "1542087961369534465",
            "tweet_type": "Python tips",
            "created_at": "2022-06-29T10:09:55.000Z"
        },
        {
            "id": 3664,
            "username": "bbelderbos",
            "tweet_id": "1541822432947888130",
            "tweet_text": "Automating the Boring Stuff and Plotting Student Data - https://t.co/aW1vNaXyQV - thank you @RHelmstedter, amazing article + project! https://t.co/fOmoQymuta",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWWnNopXgAAxCGo.jpg\"]",
            "tweet_conversation_id": "1541822432947888130",
            "tweet_type": "Others",
            "created_at": "2022-06-28T16:34:48.000Z"
        },
        {
            "id": 3665,
            "username": "bbelderbos",
            "tweet_id": "1541820774323048459",
            "tweet_text": "difflib is a really handy #Python Standard Library module to find similar words.\n\nHere I use its SequenceMatcher() for example to show alternatives for misspelled words.\n\n#Django's https://t.co/Hz6HXKmDx7 was actually enriched using this :) https://t.co/KvlXiNU2Bl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWWlan4XgAAYkAY.jpg\"]",
            "tweet_conversation_id": "1541820774323048459",
            "tweet_type": "Python tips",
            "created_at": "2022-06-28T16:28:12.000Z"
        },
        {
            "id": 3666,
            "username": "bbelderbos",
            "tweet_id": "1541669215815475202",
            "tweet_text": "I \ud83d\udc93 #Django for its nice abstractions. \n\nTake forms for example ...\n\nIf you want to add custom validation - which in part is already covered by the type of fields you define in your model - you can override your ModelForm's clean() method throwing a ValidationError exception: https://t.co/7FdL1WMPDW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWUatKJWYAABxjn.jpg\"]",
            "tweet_conversation_id": "1541669215815475202",
            "tweet_type": "Others",
            "created_at": "2022-06-28T06:25:58.000Z"
        },
        {
            "id": 3667,
            "username": "bbelderbos",
            "tweet_id": "1541370925618176001",
            "tweet_text": "30 min cardio + Python Kindle reading done first thing in the morning.\n\nJocko Willink's discipline == freedom is so true!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1541370925618176001",
            "tweet_type": "Others",
            "created_at": "2022-06-27T10:40:40.000Z"
        },
        {
            "id": 3668,
            "username": "bbelderbos",
            "tweet_id": "1540314114353922048",
            "tweet_text": "TIL a new way of looking up multiple keys in a dict, reading  @fluentpython always teaches you new beautiful ways of doing things in #Python!\n\n(I knew about set operations but it did not occur to me to use them with dicts per se) https://t.co/QUrxmT6RZi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FWBLcpmXkAIxeA3.jpg\"]",
            "tweet_conversation_id": "1540314114353922048",
            "tweet_type": "Python tips",
            "created_at": "2022-06-24T12:41:17.000Z"
        },
        {
            "id": 3669,
            "username": "bbelderbos",
            "tweet_id": "1540242505295433728",
            "tweet_text": "https://t.co/HayfyZmK7t",
            "tweet_media": "[]",
            "tweet_conversation_id": "1540242365683744770",
            "tweet_type": "Others",
            "created_at": "2022-06-24T07:56:44.000Z"
        },
        {
            "id": 3670,
            "username": "bbelderbos",
            "tweet_id": "1540242365683744770",
            "tweet_text": "#Python tooling :)\n\n$ alarm -b -M \"meeting\" -m 33\nPlaying alarm in 33 minutes\n$ \n\n(Will read the word meeting to me 3 times in 33 minutes)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1540242365683744770",
            "tweet_type": "Python tips",
            "created_at": "2022-06-24T07:56:10.000Z"
        },
        {
            "id": 3671,
            "username": "bbelderbos",
            "tweet_id": "1539866931603423233",
            "tweet_text": "Check out @Pybites merch here: https://t.co/mUjAjHJslh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539866929158127616",
            "tweet_type": "Others",
            "created_at": "2022-06-23T07:04:20.000Z"
        },
        {
            "id": 3672,
            "username": "bbelderbos",
            "tweet_id": "1539866929158127616",
            "tweet_text": "It's still early, let's get some more #Python coding done, lift some careers up.\n\nThings we love to do every day.\n\nAnd even better with a mug that constantly reminds you of that :) https://t.co/77fp4bguIp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FV60eFCWAAA3p1b.jpg\"]",
            "tweet_conversation_id": "1539866929158127616",
            "tweet_type": "Python tips",
            "created_at": "2022-06-23T07:04:19.000Z"
        },
        {
            "id": 3673,
            "username": "bbelderbos",
            "tweet_id": "1539531070114242563",
            "tweet_text": "We challenge you! :) https://t.co/a2faNDlGuz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539531070114242563",
            "tweet_type": "Others",
            "created_at": "2022-06-22T08:49:44.000Z"
        },
        {
            "id": 3674,
            "username": "bbelderbos",
            "tweet_id": "1539528194306490368",
            "tweet_text": "Great for Python devs that wanna reduce JS coding ;)\n\nOn that note you also might wanna check out @mikeabrahamsen's Flask Meld project: \nhttps://t.co/jOyjHIeYQK https://t.co/N10EK40Vaw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539528194306490368",
            "tweet_type": "Others",
            "created_at": "2022-06-22T08:38:19.000Z"
        },
        {
            "id": 3675,
            "username": "bbelderbos",
            "tweet_id": "1539317958039642121",
            "tweet_text": "I used it today for a project, blown away by the elegant interface, thanks @tiangolo \ud83d\ude0d https://t.co/4KRAMEmcLz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1539317958039642121",
            "tweet_type": "Others",
            "created_at": "2022-06-21T18:42:54.000Z"
        },
        {
            "id": 3676,
            "username": "bbelderbos",
            "tweet_id": "1538796090245398531",
            "tweet_text": "Curious to hear what about #Python imports makes them so confusing for some people? Relative vs absolute import, running Python in the wrong location (not using -m), packaging, other? Let me know, maybe it's time to produce some training ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1538796090245398531",
            "tweet_type": "Python tips",
            "created_at": "2022-06-20T08:09:12.000Z"
        },
        {
            "id": 3677,
            "username": "bbelderbos",
            "tweet_id": "1537880257688051714",
            "tweet_text": "No better experience for our fellow programmers than #teaching by live coding! \n \nThe code is only half of it, the amount of subtle tips and tricks is super valuable.\n \nAnd getting stuck is the best part, it shows REAL dev life you won't get from tutorials.\n \n#developer #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1537880257688051714",
            "tweet_type": "Python tips",
            "created_at": "2022-06-17T19:30:00.000Z"
        },
        {
            "id": 3678,
            "username": "bbelderbos",
            "tweet_id": "1537794537745178627",
            "tweet_text": "What is the ONE thing that is holding you back right now from completely kicking ass in your #career using #Python / #coding skills? \n\nI would love to hear and see how I can help you overcome it ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1537794537745178627",
            "tweet_type": "Python tips",
            "created_at": "2022-06-17T13:49:23.000Z"
        },
        {
            "id": 3679,
            "username": "bbelderbos",
            "tweet_id": "1537794457021587456",
            "tweet_text": "As always great fun recording @juliansequeira https://t.co/LGrJlsjsUL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1537794457021587456",
            "tweet_type": "Others",
            "created_at": "2022-06-17T13:49:04.000Z"
        },
        {
            "id": 3680,
            "username": "bbelderbos",
            "tweet_id": "1537738953259892739",
            "tweet_text": "\u2764\ufe0four \ud83e\udd77\ud83e\udd77\ud83e\udd77 https://t.co/rqOXyDQLFM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1537738953259892739",
            "tweet_type": "Others",
            "created_at": "2022-06-17T10:08:30.000Z"
        },
        {
            "id": 3681,
            "username": "bbelderbos",
            "tweet_id": "1537313714306748417",
            "tweet_text": "#Python is getting better and better! \n\nDid you see the better error messages? https://t.co/nZ8tPTnTkn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1536921720711430147",
            "tweet_type": "Python tips",
            "created_at": "2022-06-16T05:58:46.000Z"
        },
        {
            "id": 3682,
            "username": "bbelderbos",
            "tweet_id": "1536921720711430147",
            "tweet_text": "Since #Python 3.9 there are two new useful string methods: https://t.co/cDgyCZDm1e",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVQ-Hr9XwAM5930.jpg\"]",
            "tweet_conversation_id": "1536921720711430147",
            "tweet_type": "Python tips",
            "created_at": "2022-06-15T04:01:07.000Z"
        },
        {
            "id": 3683,
            "username": "bbelderbos",
            "tweet_id": "1536739567092523010",
            "tweet_text": "Check out our new a blog article where we create a beautiful #graph in #Django using real platform data - enjoy!\n\nhttps://t.co/TF0PavVIrV\n\n#Python #Datavisualization #chartjs https://t.co/A8vI2ygGKV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVOYNC2WUAAZ5fg.jpg\"]",
            "tweet_conversation_id": "1536739567092523010",
            "tweet_type": "Python tips",
            "created_at": "2022-06-14T15:57:18.000Z"
        },
        {
            "id": 3684,
            "username": "bbelderbos",
            "tweet_id": "1536343213920833537",
            "tweet_text": "Cool #Python module: requests-cache\n\nIt caches requests responses boosting its performance. Easy to use - see example below.\n\nDocs: https://t.co/aWVa1WzhBw \nArticle: https://t.co/S21hP0AYPX https://t.co/LRhvQHiOiT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FVIu_ooVUAAFF2A.jpg\"]",
            "tweet_conversation_id": "1536343213920833537",
            "tweet_type": "Python tips",
            "created_at": "2022-06-13T13:42:20.000Z"
        },
        {
            "id": 3685,
            "username": "bbelderbos",
            "tweet_id": "1534817637301198848",
            "tweet_text": "Specially when you learn it while live coding ;)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534784930005278720",
            "tweet_type": "Others",
            "created_at": "2022-06-09T08:40:14.000Z"
        },
        {
            "id": 3686,
            "username": "bbelderbos",
            "tweet_id": "1534785278027608065",
            "tweet_text": "Thanks @JnyJny :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534784930005278720",
            "tweet_type": "Others",
            "created_at": "2022-06-09T06:31:39.000Z"
        },
        {
            "id": 3687,
            "username": "bbelderbos",
            "tweet_id": "1534784930005278720",
            "tweet_text": "Once you have a pathlib.Path object you don't have to use a context manager to write to a file, it already comes with write_bytes() / write_text() methods that can do this.\n\n#Python #tips https://t.co/JtxLtpFhWS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUymkQMXoAIad6X.jpg\"]",
            "tweet_conversation_id": "1534784930005278720",
            "tweet_type": "Python tips",
            "created_at": "2022-06-09T06:30:16.000Z"
        },
        {
            "id": 3688,
            "username": "bbelderbos",
            "tweet_id": "1534479035140644864",
            "tweet_text": "You can call requests' HTTP methods with the \"headers\" keyword argument which in this case we needed to be able to programmatically download one of our blog articles.\n \n#Python #tips https://t.co/WJeH2NTx7F",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUuQgLTWQAAlzzT.jpg\"]",
            "tweet_conversation_id": "1534479035140644864",
            "tweet_type": "Python tips",
            "created_at": "2022-06-08T10:14:45.000Z"
        },
        {
            "id": 3689,
            "username": "bbelderbos",
            "tweet_id": "1534115899157905409",
            "tweet_text": "`pip install pybites-pysource` might make this easier",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534082542277640192",
            "tweet_type": "Others",
            "created_at": "2022-06-07T10:11:47.000Z"
        },
        {
            "id": 3690,
            "username": "bbelderbos",
            "tweet_id": "1534115825975705600",
            "tweet_text": "Worth reading the datetime module source code for more examples of nice classmethod / alternate constructor examples btw.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1534082542277640192",
            "tweet_type": "Others",
            "created_at": "2022-06-07T10:11:30.000Z"
        },
        {
            "id": 3691,
            "username": "bbelderbos",
            "tweet_id": "1534082542277640192",
            "tweet_text": "You can use #Python datetime's combine classmethod (alternate constructor) to create a datetime object from date and time objects: https://t.co/39yaCE5Dk6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUon32TXsAAQOP4.jpg\"]",
            "tweet_conversation_id": "1534082542277640192",
            "tweet_type": "Python tips",
            "created_at": "2022-06-07T07:59:14.000Z"
        },
        {
            "id": 3692,
            "username": "bbelderbos",
            "tweet_id": "1533846177828986880",
            "tweet_text": "If you need both past (... time ago) + future (in ... time segment) you can use \"naturaltime\" (django.contrib.humanize)\n\nhttps://t.co/7HgY1lrURl\n\n\ud83d\udc93 #Django https://t.co/ZbbW0Y7Rrj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUlQ1tuWUAAYT3-.png\"]",
            "tweet_conversation_id": "1533846177828986880",
            "tweet_type": "Others",
            "created_at": "2022-06-06T16:20:00.000Z"
        },
        {
            "id": 3693,
            "username": "bbelderbos",
            "tweet_id": "1533711983916236800",
            "tweet_text": "The re.fullmatch() function matches the whole string end-to-end, in comparison re.match() matches only at the beginning.\n\n#Python #tips https://t.co/3xGvIQLHIk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUjW2RpXoAIPG7I.jpg\"]",
            "tweet_conversation_id": "1533711983916236800",
            "tweet_type": "Python tips",
            "created_at": "2022-06-06T07:26:46.000Z"
        },
        {
            "id": 3694,
            "username": "bbelderbos",
            "tweet_id": "1533448635278667777",
            "tweet_text": "Nice Bootstrap! \ud83e\udd29\n\nThis would have costed me quite some manual #css before \ud83d\ude05\n\nhttps://t.co/KZmOqlfE2I https://t.co/87KJsO5jxa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUfnXxfXEAA8G8j.png\"]",
            "tweet_conversation_id": "1533448635278667777",
            "tweet_type": "Others",
            "created_at": "2022-06-05T14:00:19.000Z"
        },
        {
            "id": 3695,
            "username": "bbelderbos",
            "tweet_id": "1533336200890687489",
            "tweet_text": "#Python's html module (Standard Library) let's you escape and unescape characters: https://t.co/gj0PKt2d5I",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUd__y5WIAUtlbt.jpg\"]",
            "tweet_conversation_id": "1533336200890687489",
            "tweet_type": "Python tips",
            "created_at": "2022-06-05T06:33:32.000Z"
        },
        {
            "id": 3696,
            "username": "bbelderbos",
            "tweet_id": "1533331220754579456",
            "tweet_text": "And \"emo\" alias in .zshrc:\n\nfunction emo {\n    (cd $HOME/code/emojisearcher &amp;&amp; source venv/bin/activate &amp;&amp; python -m emojisearcher.script \"$@\")\n}\n\n- The () runs this isolated in a sub-shell so I stay in my current working directory :)\n\n- $@ passes through command line args\n\n#Unix",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533330683892051968",
            "tweet_type": "Others",
            "created_at": "2022-06-05T06:13:45.000Z"
        },
        {
            "id": 3697,
            "username": "bbelderbos",
            "tweet_id": "1533331057147256834",
            "tweet_text": "Repo: https://t.co/B2tMjWjqHv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1533330683892051968",
            "tweet_type": "Others",
            "created_at": "2022-06-05T06:13:06.000Z"
        },
        {
            "id": 3698,
            "username": "bbelderbos",
            "tweet_id": "1533330683892051968",
            "tweet_text": "Emojisearcher for the win \ud83c\udf89\n\nThis little tool actually helps me a lot writing posts \ud83d\ude04\n\nAnd that's what I love about #Python  \ud83d\udc0d/ #programming: over time you build up your arsenal of tools that will make you faster / improve your workflow \ud83d\udcaa https://t.co/exzwVe2W5d",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUd71n3X0AAX6UC.jpg\"]",
            "tweet_conversation_id": "1533330683892051968",
            "tweet_type": "Python tips",
            "created_at": "2022-06-05T06:11:37.000Z"
        },
        {
            "id": 3699,
            "username": "bbelderbos",
            "tweet_id": "1532687958272356353",
            "tweet_text": "TIL that threaded code is hard to debug :(",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532687958272356353",
            "tweet_type": "Others",
            "created_at": "2022-06-03T11:37:39.000Z"
        },
        {
            "id": 3700,
            "username": "bbelderbos",
            "tweet_id": "1532676681315532801",
            "tweet_text": "Love this the new way of defining namedtuples with type hints! https://t.co/GAJbBOiaaa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532676681315532801",
            "tweet_type": "Others",
            "created_at": "2022-06-03T10:52:51.000Z"
        },
        {
            "id": 3701,
            "username": "bbelderbos",
            "tweet_id": "1532646351359643648",
            "tweet_text": "Also good design: the download(), parse(), and nlp() methods are all decoupled and can be called individually. \n\nSimilar to requests.raise_for_status() -&gt; \"by default I am not gonna blow up, but if you want to just call me and I will do ...\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531591461141106688",
            "tweet_type": "Others",
            "created_at": "2022-06-03T08:52:20.000Z"
        },
        {
            "id": 3702,
            "username": "bbelderbos",
            "tweet_id": "1532639234527531008",
            "tweet_text": "Love automation ... flight scraper cron turned on, showing me price trends daily.\n\nWith #Python the world becomes your oyster :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532639234527531008",
            "tweet_type": "Python tips",
            "created_at": "2022-06-03T08:24:03.000Z"
        },
        {
            "id": 3703,
            "username": "bbelderbos",
            "tweet_id": "1532638834764173313",
            "tweet_text": "Ship it! 0 to 1\n\nNothing like having people use your #software, it changes everything (you often don't know what you don't know)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532638834764173313",
            "tweet_type": "Others",
            "created_at": "2022-06-03T08:22:27.000Z"
        },
        {
            "id": 3704,
            "username": "bbelderbos",
            "tweet_id": "1532361518536396800",
            "tweet_text": "Done &gt; perfect",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532361518536396800",
            "tweet_type": "Others",
            "created_at": "2022-06-02T14:00:30.000Z"
        },
        {
            "id": 3705,
            "username": "bbelderbos",
            "tweet_id": "1532347393009668098",
            "tweet_text": "#Python #tips: a retry decorator that tries to call a function N times before giving up: https://t.co/PJJ3faLdCC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUP9qHzX0AI7fIZ.jpg\"]",
            "tweet_conversation_id": "1532347393009668098",
            "tweet_type": "Python tips",
            "created_at": "2022-06-02T13:04:22.000Z"
        },
        {
            "id": 3706,
            "username": "bbelderbos",
            "tweet_id": "1532337764661862404",
            "tweet_text": "Nice, glad to hear. \n\nCome join us too ...\n\n- Our exercises are challenging and fun. \n\n- They teach you real world and idiomatic #Python.\n\n- They help you overcome tutorial paralysis.\n\nAnd last but not least we have an exciting and supportive community.\n \nhttps://t.co/FxpfiepQ3Y https://t.co/gngaxPuTtq",
            "tweet_media": "[]",
            "tweet_conversation_id": "1532337764661862404",
            "tweet_type": "Python tips",
            "created_at": "2022-06-02T12:26:07.000Z"
        },
        {
            "id": 3707,
            "username": "bbelderbos",
            "tweet_id": "1531920074344386560",
            "tweet_text": "pipx install googletrans==3.1.0a0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:46:22.000Z"
        },
        {
            "id": 3708,
            "username": "bbelderbos",
            "tweet_id": "1531920017851355137",
            "tweet_text": "One guy to follow who embraces this approach sublimely is @irishpolyglot of https://t.co/8Qvv25i410",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:46:08.000Z"
        },
        {
            "id": 3709,
            "username": "bbelderbos",
            "tweet_id": "1531918744808828928",
            "tweet_text": "It's the same way I learned Spanish almost 20 years ago when interrailing: complete immersion! \n\nSpeak speak speak, note down words you keep forgetting, read in the language, heck even configure your apps in the target language.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:41:05.000Z"
        },
        {
            "id": 3710,
            "username": "bbelderbos",
            "tweet_id": "1531918350858723328",
            "tweet_text": "Point is to don't get stuck in tutorial paralysis (e.g. overly study grammar), just speak it, make a lot of mistakes (your friendly teacher will correct you) - it will boost your learning.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:39:31.000Z"
        },
        {
            "id": 3711,
            "username": "bbelderbos",
            "tweet_id": "1531918133589581825",
            "tweet_text": "30 min of conversation where I force myself to listen and speak the language. \n\nSkye window on the right, terminal on the left where I look up words like crazy. \n\nHelpful alias:\nfunction it { translate -d it \"$@\" }",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:38:39.000Z"
        },
        {
            "id": 3712,
            "username": "bbelderbos",
            "tweet_id": "1531917598358749185",
            "tweet_text": "With just 30 min a week I manage to keep up a language this way (I am doing Italian now)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:36:31.000Z"
        },
        {
            "id": 3713,
            "username": "bbelderbos",
            "tweet_id": "1531917475855597569",
            "tweet_text": "@italki is a great help with this. It's an online #LanguageLearning platform which connects language learners and teachers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:36:02.000Z"
        },
        {
            "id": 3714,
            "username": "bbelderbos",
            "tweet_id": "1531917434663448576",
            "tweet_text": "Wanna learn a language? Deliberate practice is key which means speak it as soon and often as possible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531917434663448576",
            "tweet_type": "Others",
            "created_at": "2022-06-01T08:35:52.000Z"
        },
        {
            "id": 3715,
            "username": "bbelderbos",
            "tweet_id": "1531908222067609601",
            "tweet_text": "Speeding up article downloads using #Python threading ... 7 to 1 seconds for 10 articles - nice :) \n\nYou probably want to limit the number of threads for rate limiting (and to be respectful).\n\nYou can also use concurrent.futures.ThreadPoolExecutor: https://t.co/C6SjJKSAQ4 https://t.co/vsQNiR4BPa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUJsxKFWQAI90j2.jpg\"]",
            "tweet_conversation_id": "1531908222067609601",
            "tweet_type": "Python tips",
            "created_at": "2022-06-01T07:59:16.000Z"
        },
        {
            "id": 3716,
            "username": "bbelderbos",
            "tweet_id": "1531905890109906945",
            "tweet_text": "Revamped reading lists (https://t.co/WzFx8ZIFdb) to show books by category: https://t.co/DSkgA5GuO8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUE-NkEWQAAItmO.jpg\"]",
            "tweet_conversation_id": "1531905890109906945",
            "tweet_type": "Others",
            "created_at": "2022-06-01T07:50:00.000Z"
        },
        {
            "id": 3717,
            "username": "bbelderbos",
            "tweet_id": "1531591461141106688",
            "tweet_text": "Heard about Newspaper3k? An awesome #Python library to extract and curate articles ... gonna use this soon on all @Pybites articles :) https://t.co/iOvVEPzc1z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FUFOSzJXoAQCXg2.jpg\"]",
            "tweet_conversation_id": "1531591461141106688",
            "tweet_type": "Python tips",
            "created_at": "2022-05-31T11:00:34.000Z"
        },
        {
            "id": 3718,
            "username": "bbelderbos",
            "tweet_id": "1531572411065372672",
            "tweet_text": "A reader lives a thousand lives before he dies, said Jojen. The man who never reads lives only one. \n- George R.R. Martin, A Dance with Dragons\n\n#books #reading",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531572411065372672",
            "tweet_type": "Others",
            "created_at": "2022-05-31T09:44:52.000Z"
        },
        {
            "id": 3719,
            "username": "bbelderbos",
            "tweet_id": "1531279017487343616",
            "tweet_text": "Great explanation of #Python's staticmethod: \"improve the findability of a function\" - https://t.co/6kxtcYFUDU\n\nConvinced me to use them a bit more when I want to group additional (non instance / self related) behavior in my class.\n\nWatch the whole talk btw, it's brilliant!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531279017487343616",
            "tweet_type": "Python tips",
            "created_at": "2022-05-30T14:19:02.000Z"
        },
        {
            "id": 3720,
            "username": "bbelderbos",
            "tweet_id": "1531278014113251331",
            "tweet_text": "Fast Test, Slow Test https://t.co/6zYJaIBSzz - great talk!\n\n#softwaredeveloper #testing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1531278014113251331",
            "tweet_type": "Others",
            "created_at": "2022-05-30T14:15:02.000Z"
        },
        {
            "id": 3721,
            "username": "bbelderbos",
            "tweet_id": "1529799020604006407",
            "tweet_text": "What #books are you reading? We started a reading list of @pybites #podcast mentioned books: https://t.co/WAg7tl9OEH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529799020604006407",
            "tweet_type": "Others",
            "created_at": "2022-05-26T12:18:03.000Z"
        },
        {
            "id": 3722,
            "username": "bbelderbos",
            "tweet_id": "1529707671217225728",
            "tweet_text": "#Python's Standard Library keeps blowing my mind. \n\nI needed a month calendar, well here you go: calendar.monthcalendar() \n\nIt gives you a matrix with sensible defaults (e.g. days outside of the month are represented by zeros). \n\nSo elegant and useful! https://t.co/4s88pMQcIr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTqc3LXXwAAapgC.jpg\"]",
            "tweet_conversation_id": "1529707671217225728",
            "tweet_type": "Python tips",
            "created_at": "2022-05-26T06:15:04.000Z"
        },
        {
            "id": 3723,
            "username": "bbelderbos",
            "tweet_id": "1529387336672370688",
            "tweet_text": "Did you know that &gt;= #Python 3.10 you can use itertools.pairwise() to iterate over a numbers in pairs. No more zip (built-in) with slicing - this is more readable / intuitive: https://t.co/oolNeHQCta",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTl5mPzXsAEFGRF.jpg\"]",
            "tweet_conversation_id": "1529387336672370688",
            "tweet_type": "Python tips",
            "created_at": "2022-05-25T09:02:10.000Z"
        },
        {
            "id": 3724,
            "username": "bbelderbos",
            "tweet_id": "1529348028439465984",
            "tweet_text": "Embrace (i)pdb / a #Python debugger and you'll become a more effective #developer https://t.co/BP3jj4d5eG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FTlVgODWYAAC5vL.jpg\"]",
            "tweet_conversation_id": "1529348028439465984",
            "tweet_type": "Python tips",
            "created_at": "2022-05-25T06:25:58.000Z"
        },
        {
            "id": 3725,
            "username": "bbelderbos",
            "tweet_id": "1529054395119415296",
            "tweet_text": "Is imposter syndrome holding you back? We talk about it in this training: https://t.co/yU2t2NaTvM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1529054395119415296",
            "tweet_type": "Others",
            "created_at": "2022-05-24T10:59:10.000Z"
        },
        {
            "id": 3726,
            "username": "bbelderbos",
            "tweet_id": "1527530338632744960",
            "tweet_text": "Configure a #Linux #Development Environment on #Windows with #WSL and #VSCode https://t.co/5K0haDRzA3 - thanks @Se7enSquared for this great write up!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527530338632744960",
            "tweet_type": "Others",
            "created_at": "2022-05-20T06:03:07.000Z"
        },
        {
            "id": 3727,
            "username": "bbelderbos",
            "tweet_id": "1527273672687370242",
            "tweet_text": "New @pybites podcast is out:\nLearn by building, how we built our own collaboration tool in #Django \nhttps://t.co/murF8GfRgD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1527273672687370242",
            "tweet_type": "Others",
            "created_at": "2022-05-19T13:03:13.000Z"
        },
        {
            "id": 3728,
            "username": "bbelderbos",
            "tweet_id": "1526822024961744896",
            "tweet_text": "Do you use pytest or unittest with #Django and why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526822024961744896",
            "tweet_type": "Others",
            "created_at": "2022-05-18T07:08:32.000Z"
        },
        {
            "id": 3729,
            "username": "bbelderbos",
            "tweet_id": "1526518074375028737",
            "tweet_text": "Today's @PyBites #Python Tip: Extract a zipfile in memory https://t.co/eGvaCAeA6u  &lt;  subscribe here to get weekly practical tips.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1526518074375028737",
            "tweet_type": "Python tips",
            "created_at": "2022-05-17T11:00:44.000Z"
        },
        {
            "id": 3730,
            "username": "bbelderbos",
            "tweet_id": "1525368964611723265",
            "tweet_text": "Such a great book, recommended! https://t.co/Uqbpizymlq\n#Python #Django #testing #TDD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1525368964611723265",
            "tweet_type": "Python tips",
            "created_at": "2022-05-14T06:54:35.000Z"
        },
        {
            "id": 3731,
            "username": "bbelderbos",
            "tweet_id": "1525205904433496064",
            "tweet_text": "My weekend package to dive into: https://t.co/IkA7WT5djG - state machines in #Python! (I found a cool use case)\n\nWhat will you be working on?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1525205904433496064",
            "tweet_type": "Python tips",
            "created_at": "2022-05-13T20:06:39.000Z"
        },
        {
            "id": 3732,
            "username": "bbelderbos",
            "tweet_id": "1525204657014022144",
            "tweet_text": "As mentioned on our podcast: https://t.co/DYYe3IhXbQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524452045083877376",
            "tweet_type": "Others",
            "created_at": "2022-05-13T20:01:41.000Z"
        },
        {
            "id": 3733,
            "username": "bbelderbos",
            "tweet_id": "1525204593868779523",
            "tweet_text": "Already noticing the #productivity benefits of deliberately creating space (reading, workouts, weekends, etc.)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524452045083877376",
            "tweet_type": "Others",
            "created_at": "2022-05-13T20:01:26.000Z"
        },
        {
            "id": 3734,
            "username": "bbelderbos",
            "tweet_id": "1525091236696276992",
            "tweet_text": "A common question I get is when to use a class in #Python. I wrote up some thoughts a while ago so when in doubt hope this is helpful: https://t.co/fxPH0hMMJV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1525091236696276992",
            "tweet_type": "Python tips",
            "created_at": "2022-05-13T12:31:00.000Z"
        },
        {
            "id": 3735,
            "username": "bbelderbos",
            "tweet_id": "1525000178649944064",
            "tweet_text": "I \ud83d\udc93 the #Python itertools module \ud83d\udc0d\n \nToday I needed to accumulate a list of ints. Pretty easy to roll your own, but why would you when an optimised one (generator) already exists in the Standard Library?\n \nAccumulate has a func keyword arg as well that accepts other operations. https://t.co/BalBw5dMdi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSnjD8LWIAAvoOO.jpg\"]",
            "tweet_conversation_id": "1525000178649944064",
            "tweet_type": "Python tips",
            "created_at": "2022-05-13T06:29:10.000Z"
        },
        {
            "id": 3736,
            "username": "bbelderbos",
            "tweet_id": "1524654799819522048",
            "tweet_text": "You can unpack dict keys + values into two tuples using zip(*dict)\n\nThis is handy to prepare a plot.\n\n#Python #tips https://t.co/7KlGFBLybX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSipClOXIAA9KAf.jpg\"]",
            "tweet_conversation_id": "1524654799819522048",
            "tweet_type": "Python tips",
            "created_at": "2022-05-12T07:36:45.000Z"
        },
        {
            "id": 3737,
            "username": "bbelderbos",
            "tweet_id": "1524452045083877376",
            "tweet_text": "Started reading Create Space, thanks @juliansequeira \n\n#career #books",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524452045083877376",
            "tweet_type": "Others",
            "created_at": "2022-05-11T18:11:05.000Z"
        },
        {
            "id": 3738,
            "username": "bbelderbos",
            "tweet_id": "1524362052743147527",
            "tweet_text": "We struggle with productivity at times so we did a bit of reflection on our podcast and came to some tips, hope it's useful for you: https://t.co/D69ytD1Z2S",
            "tweet_media": "[]",
            "tweet_conversation_id": "1524362052743147527",
            "tweet_type": "Others",
            "created_at": "2022-05-11T12:13:29.000Z"
        },
        {
            "id": 3739,
            "username": "bbelderbos",
            "tweet_id": "1522908567606632448",
            "tweet_text": "Nicely integrated with #Django here: https://t.co/0HWA7YCiyq (repo: https://t.co/M7rSnuo3ul)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522897079416369153",
            "tweet_type": "Others",
            "created_at": "2022-05-07T11:57:51.000Z"
        },
        {
            "id": 3740,
            "username": "bbelderbos",
            "tweet_id": "1522897079416369153",
            "tweet_text": "Do yo want an html calendar in #Python? The calendar (Standard Library) module has you covered!\n\n$ python -c \"import calendar; print(calendar.HTMLCalendar(firstweekday=0).formatmonth(2022, 5))\" &gt; cal.html https://t.co/FXphjUIpWL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSJqKZ3XwAAt9ZW.png\"]",
            "tweet_conversation_id": "1522897079416369153",
            "tweet_type": "Python tips",
            "created_at": "2022-05-07T11:12:12.000Z"
        },
        {
            "id": 3741,
            "username": "bbelderbos",
            "tweet_id": "1522876029513175043",
            "tweet_text": "Cool TIL how to run a #Django command on #Heroku that reads from standard input:\n\n$ cat some_file | heroku run --no-tty -- python https://t.co/Hz6HXKmDx7 my_django_command\n\nShoutout / thanks to @treyhunner :) https://t.co/sG5yvyUC4l",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522876029513175043",
            "tweet_type": "Others",
            "created_at": "2022-05-07T09:48:33.000Z"
        },
        {
            "id": 3742,
            "username": "bbelderbos",
            "tweet_id": "1522603958342230016",
            "tweet_text": "Beware of trailing commas in #Python, it gives you a tuple, which might not be what you want: https://t.co/DEivy9UaWw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FSFf90AXEAIuqf-.png\"]",
            "tweet_conversation_id": "1522603958342230016",
            "tweet_type": "Python tips",
            "created_at": "2022-05-06T15:47:26.000Z"
        },
        {
            "id": 3743,
            "username": "bbelderbos",
            "tweet_id": "1522560265816088577",
            "tweet_text": "Did you know we have a set of flashcards that will disambiguate what really matters in order to become a well rounded #Python #developer? https://t.co/qvefn5JVWU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1522560265816088577",
            "tweet_type": "Python tips",
            "created_at": "2022-05-06T12:53:49.000Z"
        },
        {
            "id": 3744,
            "username": "bbelderbos",
            "tweet_id": "1521911018993164290",
            "tweet_text": "Or when used like this: https://t.co/3jiVaA6TVt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FR7p_VBWQAIgsgI.jpg\"]",
            "tweet_conversation_id": "1521910528775438339",
            "tweet_type": "Others",
            "created_at": "2022-05-04T17:53:57.000Z"
        },
        {
            "id": 3745,
            "username": "bbelderbos",
            "tweet_id": "1521910528775438339",
            "tweet_text": "#Python tuple unpacking is beautiful :) https://t.co/xL3mBkXB3Q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FR7ph6aXsAA0gzE.jpg\"]",
            "tweet_conversation_id": "1521910528775438339",
            "tweet_type": "Python tips",
            "created_at": "2022-05-04T17:52:00.000Z"
        },
        {
            "id": 3746,
            "username": "bbelderbos",
            "tweet_id": "1521754287306641408",
            "tweet_text": "#Python requests is full of nice abstractions, for starters the http verbs, but also things like requests_for_status(). It's a joy to work with! https://t.co/IpEBUW9GC9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FR5bc4ZXwAEiUox.jpg\"]",
            "tweet_conversation_id": "1521754287306641408",
            "tweet_type": "Python tips",
            "created_at": "2022-05-04T07:31:09.000Z"
        },
        {
            "id": 3747,
            "username": "bbelderbos",
            "tweet_id": "1521739199044624384",
            "tweet_text": "Really cool plugin - using it to autocomplete usernames in various apps - jquery.mentionsInput https://t.co/qC3rG36qLg via @auchenberg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521739199044624384",
            "tweet_type": "Others",
            "created_at": "2022-05-04T06:31:12.000Z"
        },
        {
            "id": 3748,
            "username": "bbelderbos",
            "tweet_id": "1521722997232578560",
            "tweet_text": "You can use #Django signals when you need to add some extra logic upon saving a model instance: https://t.co/s7x1RjQk8p",
            "tweet_media": "[\"https://pbs.twimg.com/media/FR4-jn0XIAAP-yh.jpg\"]",
            "tweet_conversation_id": "1521722997232578560",
            "tweet_type": "Others",
            "created_at": "2022-05-04T05:26:49.000Z"
        },
        {
            "id": 3749,
            "username": "bbelderbos",
            "tweet_id": "1521418812184223744",
            "tweet_text": "Check out our latest podcast episode, DATA is doing some amazing things in the #teaching space: https://t.co/CvYn0H11TC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521418812184223744",
            "tweet_type": "Others",
            "created_at": "2022-05-03T09:18:06.000Z"
        },
        {
            "id": 3750,
            "username": "bbelderbos",
            "tweet_id": "1521389027085398016",
            "tweet_text": "What is your favorite #Python library and why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521389027085398016",
            "tweet_type": "Python tips",
            "created_at": "2022-05-03T07:19:44.000Z"
        },
        {
            "id": 3751,
            "username": "bbelderbos",
            "tweet_id": "1521388952229662722",
            "tweet_text": "The power of the #unix command line: swap a css class site wide :)\n\n$ for file in $(ag -l btn-primary); do sed -i '' 's/btn-primary/btn-dark/g' $file; done\n\nFull video: https://t.co/otbsouIw0n",
            "tweet_media": "[]",
            "tweet_conversation_id": "1521388952229662722",
            "tweet_type": "Others",
            "created_at": "2022-05-03T07:19:26.000Z"
        },
        {
            "id": 3752,
            "username": "bbelderbos",
            "tweet_id": "1520693671112421376",
            "tweet_text": "What have you used rich for?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520380129444306945",
            "tweet_type": "Others",
            "created_at": "2022-05-01T09:16:38.000Z"
        },
        {
            "id": 3753,
            "username": "bbelderbos",
            "tweet_id": "1520380318154477569",
            "tweet_text": "Thank you @willmcgugan",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520380129444306945",
            "tweet_type": "Others",
            "created_at": "2022-04-30T12:31:29.000Z"
        },
        {
            "id": 3754,
            "username": "bbelderbos",
            "tweet_id": "1520380242631745539",
            "tweet_text": "Source: https://t.co/Grd4mriuZN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520380129444306945",
            "tweet_type": "Others",
            "created_at": "2022-04-30T12:31:11.000Z"
        },
        {
            "id": 3755,
            "username": "bbelderbos",
            "tweet_id": "1520380129444306945",
            "tweet_text": "Rich is such a nice library, just made a little color searcher, look at that table and those colors \ud83c\udf89\ud83d\ude0d https://t.co/TrFWRazXgC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRl5U--XMAM--F4.jpg\"]",
            "tweet_conversation_id": "1520380129444306945",
            "tweet_type": "Others",
            "created_at": "2022-04-30T12:30:44.000Z"
        },
        {
            "id": 3756,
            "username": "bbelderbos",
            "tweet_id": "1520361717934563329",
            "tweet_text": "#Python's Standard Library keeps amazing, heard of shlex?\n\nUse case: you have to split by words, but need to keep words together that are in double quotes: https://t.co/55CKfqvMJb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRlo2W-WQAAqwe5.jpg\"]",
            "tweet_conversation_id": "1520361717934563329",
            "tweet_type": "Python tips",
            "created_at": "2022-04-30T11:17:35.000Z"
        },
        {
            "id": 3757,
            "username": "bbelderbos",
            "tweet_id": "1520343361416278018",
            "tweet_text": "Get the domain name from a url using #Python: https://t.co/ow6zgjViIA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRlYH2fXsAE0jJK.jpg\"]",
            "tweet_conversation_id": "1520343361416278018",
            "tweet_type": "Python tips",
            "created_at": "2022-04-30T10:04:38.000Z"
        },
        {
            "id": 3758,
            "username": "bbelderbos",
            "tweet_id": "1520341575523569664",
            "tweet_text": "Quickly get emojis to your clipboard from the command line: https://t.co/B2tMjWjqHv\n\n#python #projects",
            "tweet_media": "[]",
            "tweet_conversation_id": "1520341575523569664",
            "tweet_type": "Python tips",
            "created_at": "2022-04-30T09:57:32.000Z"
        },
        {
            "id": 3759,
            "username": "bbelderbos",
            "tweet_id": "1519994130369323008",
            "tweet_text": "htmx inline editing is super nice - https://t.co/AaB4E15s2j",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519994130369323008",
            "tweet_type": "Others",
            "created_at": "2022-04-29T10:56:55.000Z"
        },
        {
            "id": 3760,
            "username": "bbelderbos",
            "tweet_id": "1519601049140703232",
            "tweet_text": "The other day I was looping through lines of a file matching a regex pattern for each of them.\n\nBut then I realized I could just do a re.findall() on the complete string in one go!\n\nSimplified example below (also note https://t.co/2EQpvidweu() only matches once) \n\n#python #regex https://t.co/usxJlTSbAJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRa0Z8CXEAELdiO.jpg\"]",
            "tweet_conversation_id": "1519601049140703232",
            "tweet_type": "Python tips",
            "created_at": "2022-04-28T08:54:57.000Z"
        },
        {
            "id": 3761,
            "username": "bbelderbos",
            "tweet_id": "1519556794338746369",
            "tweet_text": "Awesome resources shared in the comments, thanks all!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518884695819407361",
            "tweet_type": "Others",
            "created_at": "2022-04-28T05:59:06.000Z"
        },
        {
            "id": 3762,
            "username": "bbelderbos",
            "tweet_id": "1519241520859201536",
            "tweet_text": "Thanks @RHelmstedter for sharing the cool stuff you've been doing with Eatlocal! https://t.co/Y853d7Ym6V",
            "tweet_media": "[]",
            "tweet_conversation_id": "1519241520859201536",
            "tweet_type": "Others",
            "created_at": "2022-04-27T09:06:19.000Z"
        },
        {
            "id": 3763,
            "username": "bbelderbos",
            "tweet_id": "1518902928916062209",
            "tweet_text": "Eagerly waiting for Martin Fowler's Refactoring 2nd ed ... https://t.co/2vEM2hIOFL",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FRQ6JIEWYAMNTJY.mp4\"]",
            "tweet_conversation_id": "1518902928916062209",
            "tweet_type": "Others",
            "created_at": "2022-04-26T10:40:52.000Z"
        },
        {
            "id": 3764,
            "username": "bbelderbos",
            "tweet_id": "1518884695819407361",
            "tweet_text": "Who finds regular expressions confusing? \n\nIs it also confusing in #Python? (Which I think has a great re module.)\n\nWhat is confusing? \n\nMaybe I can help out with some content ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518884695819407361",
            "tweet_type": "Python tips",
            "created_at": "2022-04-26T09:28:25.000Z"
        },
        {
            "id": 3765,
            "username": "bbelderbos",
            "tweet_id": "1518880037625384962",
            "tweet_text": "What do you use Faker for?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518553030286843905",
            "tweet_type": "Others",
            "created_at": "2022-04-26T09:09:55.000Z"
        },
        {
            "id": 3766,
            "username": "bbelderbos",
            "tweet_id": "1518571793463844870",
            "tweet_text": "Are you worried about performance too early?\n\nThis can really stop you in your tracks.\n\nAs a #developer you have to be pragmatic ...\n\nhttps://t.co/JZjD5kjz4S",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518571793463844870",
            "tweet_type": "Others",
            "created_at": "2022-04-25T12:45:03.000Z"
        },
        {
            "id": 3767,
            "username": "bbelderbos",
            "tweet_id": "1518553030286843905",
            "tweet_text": "Cool, with faker you can use a locale, in this case to get random Spanish and Dutch names.\n\n#python #tips https://t.co/S2HWpwP5LE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FRL7znGWQAEDRO0.jpg\"]",
            "tweet_conversation_id": "1518553030286843905",
            "tweet_type": "Python tips",
            "created_at": "2022-04-25T11:30:30.000Z"
        },
        {
            "id": 3768,
            "username": "bbelderbos",
            "tweet_id": "1518481268949856261",
            "tweet_text": "Never published a #Python package? Check out this training ... https://t.co/ZUI5eCfcch",
            "tweet_media": "[]",
            "tweet_conversation_id": "1518481268949856261",
            "tweet_type": "Python tips",
            "created_at": "2022-04-25T06:45:21.000Z"
        },
        {
            "id": 3769,
            "username": "bbelderbos",
            "tweet_id": "1517210019938328577",
            "tweet_text": "jedi #vim is awesome, specially this feature:\n\n&gt; Goto assignment &lt;leader&gt;g (typical goto function)\n\nMy leader key is , so when I have my cursor on any object and type ,g it takes me straight to its definition (and ctrl+o takes me back).\n\nThis is going to be a huge time saver!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517210019938328577",
            "tweet_type": "Others",
            "created_at": "2022-04-21T18:33:51.000Z"
        },
        {
            "id": 3770,
            "username": "bbelderbos",
            "tweet_id": "1517072385987514369",
            "tweet_text": "If you want to get more experience writing decorators, check out our dedicated learning path on our platform (which also includes the powerful context manager feature):\nhttps://t.co/GKDaqWZyuD\n\nHope this helps.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517072375287894017",
            "tweet_type": "Others",
            "created_at": "2022-04-21T09:26:57.000Z"
        },
        {
            "id": 3771,
            "username": "bbelderbos",
            "tweet_id": "1517072384032919552",
            "tweet_text": "Then the last variant would be to have a decorator with optional args.\n\nThis took me a while to grasp, so I thought to blog about it when I got it working:\nhttps://t.co/eZ99CQ9bEL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517072375287894017",
            "tweet_type": "Others",
            "created_at": "2022-04-21T09:26:56.000Z"
        },
        {
            "id": 3772,
            "username": "bbelderbos",
            "tweet_id": "1517072382023942145",
            "tweet_text": "So what are the other variants of decorators then?\n\nGlad you asked!\n\nSometimes you want to handle arguments. No problem, just add a level of nesting, for example:\nhttps://t.co/mo2UjXNiXf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517072375287894017",
            "tweet_type": "Others",
            "created_at": "2022-04-21T09:26:56.000Z"
        },
        {
            "id": 3773,
            "username": "bbelderbos",
            "tweet_id": "1517072379905810436",
            "tweet_text": "What is wraps btw?\n\nIt's best practice to preserve the metadata of the function you are decorating, and functools.wraps lets you do that:\nhttps://t.co/aQROtCGFPp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517072375287894017",
            "tweet_type": "Others",
            "created_at": "2022-04-21T09:26:55.000Z"
        },
        {
            "id": 3774,
            "username": "bbelderbos",
            "tweet_id": "1517072377636659200",
            "tweet_text": "This is the simplest decorator variant, no args.\n\nAnother example we often use for teaching and starting to write our own #Python decorators is \"timeit\":\nhttps://t.co/1jZxguIAUe",
            "tweet_media": "[]",
            "tweet_conversation_id": "1517072375287894017",
            "tweet_type": "Python tips",
            "created_at": "2022-04-21T09:26:55.000Z"
        },
        {
            "id": 3775,
            "username": "bbelderbos",
            "tweet_id": "1517072375287894017",
            "tweet_text": "Decorators in the wild ...\n\nA common use case is to check if a user is logged in, see #Flask's login_required decorator:\n\nhttps://t.co/MNxezrnIrp\n\nLet's look at decorators a bit more \ud83e\uddf5 https://t.co/bVQir6Abz2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQ22cn8XwAIAjNq.jpg\"]",
            "tweet_conversation_id": "1517072375287894017",
            "tweet_type": "Others",
            "created_at": "2022-04-21T09:26:54.000Z"
        },
        {
            "id": 3776,
            "username": "bbelderbos",
            "tweet_id": "1516713006360633348",
            "tweet_text": "Also the reason I used 3.1.0a0 is that googletrans would trow a:\n\nAttributeError: 'NoneType' object has no attribute 'group'\n\nSee https://t.co/oRIb1F7ezx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516711317498908680",
            "tweet_type": "Others",
            "created_at": "2022-04-20T09:38:54.000Z"
        },
        {
            "id": 3777,
            "username": "bbelderbos",
            "tweet_id": "1516713005039468545",
            "tweet_text": "pipx is a tool to help you install and run end-user applications written in #Python:\nhttps://t.co/UstGGk7v85",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516711317498908680",
            "tweet_type": "Python tips",
            "created_at": "2022-04-20T09:38:54.000Z"
        },
        {
            "id": 3778,
            "username": "bbelderbos",
            "tweet_id": "1516711317498908680",
            "tweet_text": "Run Google Translate from the command line:\n\n$ pipx install googletrans==3.1.0a0  #\u00a0&lt;- works\n...\n$ translate -d es \"hello world\"\n[en] hello world\n    -&gt;\n[es] Hola Mundo\n[pron.] hello world\n\n# .zshrc shortcut\nfunction es {\n    translate -d es \"$1\"\n}\n\n#LanguageLearning #tools #unix",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516711317498908680",
            "tweet_type": "Others",
            "created_at": "2022-04-20T09:32:11.000Z"
        },
        {
            "id": 3779,
            "username": "bbelderbos",
            "tweet_id": "1516390418220470284",
            "tweet_text": "I find this super useful! \n#microservices https://t.co/onguZkhQh6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1516390418220470284",
            "tweet_type": "Others",
            "created_at": "2022-04-19T12:17:03.000Z"
        },
        {
            "id": 3780,
            "username": "bbelderbos",
            "tweet_id": "1514529201940013056",
            "tweet_text": "Python docs:\nhttps://t.co/tvrkacx34q\n\n@PyBites YouTube training: https://t.co/c5JwmUl9HO",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:14.000Z"
        },
        {
            "id": 3781,
            "username": "bbelderbos",
            "tweet_id": "1514529199788367872",
            "tweet_text": "20. See the representation / string of an object: https://t.co/xbM40GIYy9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSt0xnXwAEFlt6.png\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:14.000Z"
        },
        {
            "id": 3782,
            "username": "bbelderbos",
            "tweet_id": "1514529195510185984",
            "tweet_text": "19. Round numbers: https://t.co/9J9afAn6IB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSt7opX0AIm8sT.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:13.000Z"
        },
        {
            "id": 3783,
            "username": "bbelderbos",
            "tweet_id": "1514529191299006465",
            "tweet_text": "18. Sort values, by key, reversed, and in-place: https://t.co/uhGVOTleD6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSuM9qWQAE68xg.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:12.000Z"
        },
        {
            "id": 3784,
            "username": "bbelderbos",
            "tweet_id": "1514529186806910979",
            "tweet_text": "17. Make values absolute: https://t.co/TvpgZYDeyj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSuWuFXwAURkKH.png\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:11.000Z"
        },
        {
            "id": 3785,
            "username": "bbelderbos",
            "tweet_id": "1514529182495264769",
            "tweet_text": "16. Use next() to retrieve the next value from a generator: https://t.co/R0h3voS5JO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQStihXXIAUAXiu.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:10.000Z"
        },
        {
            "id": 3786,
            "username": "bbelderbos",
            "tweet_id": "1514529178363875328",
            "tweet_text": "15. Call a method on the parent class: https://t.co/4wRGSrSyOb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSwDZUX0AQchor.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:09.000Z"
        },
        {
            "id": 3787,
            "username": "bbelderbos",
            "tweet_id": "1514529173565489159",
            "tweet_text": "14. Check for, get and set attributes: https://t.co/YFWGqp3Uni",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQStGS_XMAYl6iK.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:08.000Z"
        },
        {
            "id": 3788,
            "username": "bbelderbos",
            "tweet_id": "1514529169337720833",
            "tweet_text": "13. Get user input: https://t.co/j2dK8zRyYs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSvqKkXsAU9JNH.png\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:07.000Z"
        },
        {
            "id": 3789,
            "username": "bbelderbos",
            "tweet_id": "1514529164950446082",
            "tweet_text": "12. Get the min and max of a sequence: https://t.co/g2AXt4ao1E",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSshnEXoAEVxD0.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:06.000Z"
        },
        {
            "id": 3790,
            "username": "bbelderbos",
            "tweet_id": "1514529160710000642",
            "tweet_text": "11. Use dir() together with a list comprehension to only list \"public\" methods (and attributes) of an object: https://t.co/umewA2RcnN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSsSitXsAAoyhr.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:05.000Z"
        },
        {
            "id": 3791,
            "username": "bbelderbos",
            "tweet_id": "1514529156490575877",
            "tweet_text": "10. Name and apply a slice: https://t.co/3DjV1ctZ1Z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSsAtGXIAAHd3v.png\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:04.000Z"
        },
        {
            "id": 3792,
            "username": "bbelderbos",
            "tweet_id": "1514529152388509699",
            "tweet_text": "9. Get a quotient and remainder, for example to divide seconds into minutes + seconds: https://t.co/iVW0nFAnml",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSr1u0XoAMN60L.png\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:03.000Z"
        },
        {
            "id": 3793,
            "username": "bbelderbos",
            "tweet_id": "1514529147795685381",
            "tweet_text": "8. Make a range of integers with a step: https://t.co/7z7rHMFDtj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSrqg4XwAkZecT.png\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:02.000Z"
        },
        {
            "id": 3794,
            "username": "bbelderbos",
            "tweet_id": "1514529143186149377",
            "tweet_text": "7. Reverse a list: https://t.co/VAbbzK5nGH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSri50WQAIYU-R.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:00.000Z"
        },
        {
            "id": 3795,
            "username": "bbelderbos",
            "tweet_id": "1514529139063144449",
            "tweet_text": "6. Uniquify a list: https://t.co/0SPzb8SoRB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSrbhXWQAA5NqR.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:01:00.000Z"
        },
        {
            "id": 3796,
            "username": "bbelderbos",
            "tweet_id": "1514529134898262017",
            "tweet_text": "5. Summing values: https://t.co/f47IkPIi1K",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSrUDEWYAAXzSj.png\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:00:59.000Z"
        },
        {
            "id": 3797,
            "username": "bbelderbos",
            "tweet_id": "1514529130947227649",
            "tweet_text": "4. Print things: https://t.co/6c8VKN6ZDs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSrNyQXMAAAwli.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:00:58.000Z"
        },
        {
            "id": 3798,
            "username": "bbelderbos",
            "tweet_id": "1514529126476095488",
            "tweet_text": "3. Check if a condition holds true for any or all items in a sequence: https://t.co/4jWoaxRwPL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSqjAxXEAEwKDP.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:00:56.000Z"
        },
        {
            "id": 3799,
            "username": "bbelderbos",
            "tweet_id": "1514529122294374400",
            "tweet_text": "2. Get a counter when looping through a sequence: https://t.co/aXIY9I4Gsx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSp5dpWUAMXG54.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:00:56.000Z"
        },
        {
            "id": 3800,
            "username": "bbelderbos",
            "tweet_id": "1514529118016180227",
            "tweet_text": "1. Make a dictionary from two lists: https://t.co/EhT1rCS2nG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQSptomXwAY_T90.jpg\"]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Others",
            "created_at": "2022-04-14T09:00:54.000Z"
        },
        {
            "id": 3801,
            "username": "bbelderbos",
            "tweet_id": "1514529113960235009",
            "tweet_text": "20 cool things you can do with #Python's built-in functions \ud83d\udc0d\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514529113960235009",
            "tweet_type": "Python tips",
            "created_at": "2022-04-14T09:00:54.000Z"
        },
        {
            "id": 3802,
            "username": "bbelderbos",
            "tweet_id": "1514300276055891971",
            "tweet_text": "Or generator expression even :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514171273437454336",
            "tweet_type": "Others",
            "created_at": "2022-04-13T17:51:34.000Z"
        },
        {
            "id": 3803,
            "username": "bbelderbos",
            "tweet_id": "1514185792624762881",
            "tweet_text": "Also this probably only becomes a problem for bigger data. I post it here for awareness, but writing readable / maintainable code should be your first focus.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514171273437454336",
            "tweet_type": "Others",
            "created_at": "2022-04-13T10:16:39.000Z"
        },
        {
            "id": 3804,
            "username": "bbelderbos",
            "tweet_id": "1514171276516077574",
            "tweet_text": "Btw instead of loop + append, I could also have used a list comprehension inside the .join()",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514171273437454336",
            "tweet_type": "Others",
            "created_at": "2022-04-13T09:18:58.000Z"
        },
        {
            "id": 3805,
            "username": "bbelderbos",
            "tweet_id": "1514171273437454336",
            "tweet_text": "When you build up a #Python string use a list over string concatenation (+=).\n\nSee https://t.co/kuErQ7jhlx:\n&gt; Strings are immutable and can't be changed in place. To alter one, a new representation needs to be created.\n\nSo that happens repeatedly here = slower. https://t.co/PRZgmPhl8u",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQNpmbXXoAcH_J1.jpg\"]",
            "tweet_conversation_id": "1514171273437454336",
            "tweet_type": "Python tips",
            "created_at": "2022-04-13T09:18:58.000Z"
        },
        {
            "id": 3806,
            "username": "bbelderbos",
            "tweet_id": "1514163641184100354",
            "tweet_text": "Swapping variables without a temp one, Python's tuple unpacking is awesome :) https://t.co/NUlRzEn4dM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQNhJUzXoAQkafu.png\"]",
            "tweet_conversation_id": "1514163641184100354",
            "tweet_type": "Others",
            "created_at": "2022-04-13T08:48:38.000Z"
        },
        {
            "id": 3807,
            "username": "bbelderbos",
            "tweet_id": "1514145557954142210",
            "tweet_text": "Good to know, but in practice I mostly use a list in that case.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514144028366880771",
            "tweet_type": "Others",
            "created_at": "2022-04-13T07:36:47.000Z"
        },
        {
            "id": 3808,
            "username": "bbelderbos",
            "tweet_id": "1514144028366880771",
            "tweet_text": "How to slice a generator? You can use itertools.islice: https://t.co/P1R3ONpcCD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQNR82bXEAYupso.jpg\"]",
            "tweet_conversation_id": "1514144028366880771",
            "tweet_type": "Others",
            "created_at": "2022-04-13T07:30:42.000Z"
        },
        {
            "id": 3809,
            "username": "bbelderbos",
            "tweet_id": "1514125116971569158",
            "tweet_text": "Tune in to the Pybites podcast, where we talk about #Python, #career and #mindset (+/- one weekly episode). Check out the latest one about your Authentic Self: https://t.co/wnHADSeYdE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1514125116971569158",
            "tweet_type": "Python tips",
            "created_at": "2022-04-13T06:15:33.000Z"
        },
        {
            "id": 3810,
            "username": "bbelderbos",
            "tweet_id": "1513460294080729091",
            "tweet_text": "Curious what to build next in #Python to get those reps / that deliberate practice in? Maybe this helps: https://t.co/PVY7z2kxhY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513460294080729091",
            "tweet_type": "Python tips",
            "created_at": "2022-04-11T10:13:47.000Z"
        },
        {
            "id": 3811,
            "username": "bbelderbos",
            "tweet_id": "1513459772221267972",
            "tweet_text": "Need caching / memoization in #Python? As usual, the Standard Library has you covered ... meet the lru_cache decorator: https://t.co/Hsz4ZapCuV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FQDjoyhXsAwVKCB.jpg\"]",
            "tweet_conversation_id": "1513459772221267972",
            "tweet_type": "Python tips",
            "created_at": "2022-04-11T10:11:43.000Z"
        },
        {
            "id": 3812,
            "username": "bbelderbos",
            "tweet_id": "1513070179168751617",
            "tweet_text": "What #Python projects are you working on today / this week?\n\nI improved the search functionality of one of our Slack bots today :)\n\nHappy Sunday / coding \ud83d\udc0d\ud83c\udfa7\u2615\ufe0f\ud83d\udca1\ud83c\udf89",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513070179168751617",
            "tweet_type": "Python tips",
            "created_at": "2022-04-10T08:23:36.000Z"
        },
        {
            "id": 3813,
            "username": "bbelderbos",
            "tweet_id": "1513066637095751681",
            "tweet_text": "Reminder we have a free FastAPI learning path on our platform: https://t.co/WCvEIKR592\n\nCome learn this awesome framework with us writing a simple API (then build one yourself)\n\nThings are a bit busy but we'll follow up with SQLModel in the near future ...\n\nHave fun!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1513066637095751681",
            "tweet_type": "Others",
            "created_at": "2022-04-10T08:09:32.000Z"
        },
        {
            "id": 3814,
            "username": "bbelderbos",
            "tweet_id": "1512692654160678912",
            "tweet_text": "Picking the right data structure matters, e.g. if you need appends and pops on either end of a list, a collections.deque is significantly faster: https://t.co/rVPMuZgp8D",
            "tweet_media": "[\"https://pbs.twimg.com/media/FP4p357X0AA_YKW.jpg\"]",
            "tweet_conversation_id": "1512692654160678912",
            "tweet_type": "Others",
            "created_at": "2022-04-09T07:23:27.000Z"
        },
        {
            "id": 3815,
            "username": "bbelderbos",
            "tweet_id": "1512408827970400260",
            "tweet_text": "#Python's print() built-in is more powerful than you might think: https://t.co/9WJo4ugEh8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FP0nzFnWUAcEL4r.jpg\"]",
            "tweet_conversation_id": "1512408827970400260",
            "tweet_type": "Python tips",
            "created_at": "2022-04-08T12:35:38.000Z"
        },
        {
            "id": 3816,
            "username": "bbelderbos",
            "tweet_id": "1512352518453538818",
            "tweet_text": "Let's dive deeper into #Python type hints with our new article:\n\nCode Better with Type Hints \u2013 Part 3 https://t.co/5WxSAZFmos \n\nEnjoy! https://t.co/VpuYAGjAQW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPz0clvWUAQvaO3.jpg\"]",
            "tweet_conversation_id": "1512352518453538818",
            "tweet_type": "Python tips",
            "created_at": "2022-04-08T08:51:53.000Z"
        },
        {
            "id": 3817,
            "username": "bbelderbos",
            "tweet_id": "1512347510982987776",
            "tweet_text": "I really like @htmx_org. In this video I show you how to make an infinite scroll of YouTube videos using FastAPI, SQLModel and htmx: https://t.co/wwYwcMhXck https://t.co/upq3e1BV2u",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1512346975466921986/pu/vid/1280x720/4fN-3Ga040EQjad2.mp4?tag=12\"]",
            "tweet_conversation_id": "1512347510982987776",
            "tweet_type": "Others",
            "created_at": "2022-04-08T08:31:59.000Z"
        },
        {
            "id": 3818,
            "username": "bbelderbos",
            "tweet_id": "1512337509354725376",
            "tweet_text": "Today a video about #Python dataclasses: https://t.co/uQyp78Zacq https://t.co/0Vzwm9Rbx4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPzm3uYXoAA3qet.jpg\"]",
            "tweet_conversation_id": "1512337509354725376",
            "tweet_type": "Python tips",
            "created_at": "2022-04-08T07:52:14.000Z"
        },
        {
            "id": 3819,
            "username": "bbelderbos",
            "tweet_id": "1512320089495900162",
            "tweet_text": "Keeping your memory footprint down with #Python generators, a huge benefit when working with \"big\" data: https://t.co/B9zTYYoDVM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPzXFzWXwAIE1KR.jpg\"]",
            "tweet_conversation_id": "1512320089495900162",
            "tweet_type": "Python tips",
            "created_at": "2022-04-08T06:43:01.000Z"
        },
        {
            "id": 3820,
            "username": "bbelderbos",
            "tweet_id": "1512111736891088896",
            "tweet_text": "Today a video explaining #Python's property decorator: https://t.co/l0tXyymDrk https://t.co/XgF2EhNbZk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPwZjEuXwAEi1er.jpg\"]",
            "tweet_conversation_id": "1512111736891088896",
            "tweet_type": "Python tips",
            "created_at": "2022-04-07T16:55:06.000Z"
        },
        {
            "id": 3821,
            "username": "bbelderbos",
            "tweet_id": "1511626178846765057",
            "tweet_text": "What does \"!r\" do in an f-string?\n\nFor example:\nf'name={https://t.co/TlEQWgPIuj!r},'\n\nQuoting the #Python docs:\nhttps://t.co/b9M2JqoEbE\n\n&gt; Three conversion flags are currently supported: '!s' which calls str() on the value, '!r' which calls repr() and '!a' which calls ascii().",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511626178846765057",
            "tweet_type": "Python tips",
            "created_at": "2022-04-06T08:45:40.000Z"
        },
        {
            "id": 3822,
            "username": "bbelderbos",
            "tweet_id": "1511613521200623617",
            "tweet_text": "By the way, using order=True on a dataclass you also get this for free :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511311152386617346",
            "tweet_type": "Others",
            "created_at": "2022-04-06T07:55:22.000Z"
        },
        {
            "id": 3823,
            "username": "bbelderbos",
            "tweet_id": "1511311152386617346",
            "tweet_text": "Write only two comparison #Python magic methods and get 5 in return?\n\nYou can use the total_ordering decorator from the functools module like so: https://t.co/jkZyLIVapk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPlBdG9XwAAJM0k.jpg\"]",
            "tweet_conversation_id": "1511311152386617346",
            "tweet_type": "Python tips",
            "created_at": "2022-04-05T11:53:52.000Z"
        },
        {
            "id": 3824,
            "username": "bbelderbos",
            "tweet_id": "1511248015708901378",
            "tweet_text": "Too tired at night? Sometimes you're capable of more ...\n \nGive it just five minutes:\nhttps://t.co/dR96DVahrR\n\nShoutout to @HughTipping, thanks for writing this article!\n\n#Mindset #Productivity",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511248015708901378",
            "tweet_type": "Others",
            "created_at": "2022-04-05T07:42:59.000Z"
        },
        {
            "id": 3825,
            "username": "bbelderbos",
            "tweet_id": "1511231659210948609",
            "tweet_text": "\ud83c\udf89\ud83e\udd77\ud83d\ude03 https://t.co/J3cF3NowFl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511231659210948609",
            "tweet_type": "Others",
            "created_at": "2022-04-05T06:37:59.000Z"
        },
        {
            "id": 3826,
            "username": "bbelderbos",
            "tweet_id": "1511230044089237506",
            "tweet_text": "In today's video I show you how to make a custom #Django command that uses feedparser to import @Pybites articles into a simple model / DB table:\nhttps://t.co/rAfPkOv0OQ https://t.co/0zyYBBQAna",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPj3PjnWQAYxc8z.jpg\"]",
            "tweet_conversation_id": "1511230044089237506",
            "tweet_type": "Others",
            "created_at": "2022-04-05T06:31:34.000Z"
        },
        {
            "id": 3827,
            "username": "bbelderbos",
            "tweet_id": "1511019055028883459",
            "tweet_text": "New to dunder / special / magic methods? \n\nI wrote a guest article a few years ago explaining them:\n\nhttps://t.co/N2ibge6K28",
            "tweet_media": "[]",
            "tweet_conversation_id": "1511019013870174212",
            "tweet_type": "Others",
            "created_at": "2022-04-04T16:33:10.000Z"
        },
        {
            "id": 3828,
            "username": "bbelderbos",
            "tweet_id": "1511019013870174212",
            "tweet_text": "I stumbled upon this #Python dunder method override in feedparser (PyPI) which adds support for accessing dict keys as attributes \ud83e\udd2f\n\nI don't see a use case beyond this, but it highlights something interesting you can do with Python classes:\n\nhttps://t.co/HmQF74iP4r https://t.co/25qtJNIrvt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPg3uMHX0AMjtn_.jpg\"]",
            "tweet_conversation_id": "1511019013870174212",
            "tweet_type": "Python tips",
            "created_at": "2022-04-04T16:33:00.000Z"
        },
        {
            "id": 3829,
            "username": "bbelderbos",
            "tweet_id": "1510296877962571784",
            "tweet_text": "Does a string contain one or more digits in #Python? \n\nWhich way do you prefer?\n\n1) any(map(str.isdigit, s)\n\n2) any(c.isdigit() for c in s)\n\n3) https://t.co/2EQpvidweu(r\"\\d+\", s)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1510296877962571784",
            "tweet_type": "Python tips",
            "created_at": "2022-04-02T16:43:30.000Z"
        },
        {
            "id": 3830,
            "username": "bbelderbos",
            "tweet_id": "1510228895303446528",
            "tweet_text": "Got pytesseract (image to text) working on AWS Lambda using a Docker container, expect a blog post soon ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1510228895303446528",
            "tweet_type": "Others",
            "created_at": "2022-04-02T12:13:21.000Z"
        },
        {
            "id": 3831,
            "username": "bbelderbos",
            "tweet_id": "1510174528546254848",
            "tweet_text": "This one is fun!\nBite 176. Create a variable length chessboard https://t.co/SjlMmJtmnS\n\nWas reminded of integer division and itertools.cycle by going through the Bite forum :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1510174528546254848",
            "tweet_type": "Others",
            "created_at": "2022-04-02T08:37:19.000Z"
        },
        {
            "id": 3832,
            "username": "bbelderbos",
            "tweet_id": "1510170908828254210",
            "tweet_text": "#unix #tip: you can use -p with the mkdir command and no error will be reported if a directory given as an operand already exists.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1510170908828254210",
            "tweet_type": "Others",
            "created_at": "2022-04-02T08:22:56.000Z"
        },
        {
            "id": 3833,
            "username": "bbelderbos",
            "tweet_id": "1509938788193161224",
            "tweet_text": "itertools.cycle is neat to loop through a sequence ad infinitum (btw \"_\" is #Python's convention for a throwaway variable) https://t.co/854qKiAoYu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPRhFsbXEAcqqpj.jpg\"]",
            "tweet_conversation_id": "1509938788193161224",
            "tweet_type": "Python tips",
            "created_at": "2022-04-01T17:00:35.000Z"
        },
        {
            "id": 3834,
            "username": "bbelderbos",
            "tweet_id": "1509866106227408898",
            "tweet_text": "Division = float in Python3, if you want int, just do // https://t.co/bVEyPNtmji",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPQfNl0WUAACdYZ.png\"]",
            "tweet_conversation_id": "1509866106227408898",
            "tweet_type": "Others",
            "created_at": "2022-04-01T12:11:46.000Z"
        },
        {
            "id": 3835,
            "username": "bbelderbos",
            "tweet_id": "1509505195801202691",
            "tweet_text": "In today's video we'll look at some tools to make it easier to retrieve info from #Python objects:\n\n- dir() and help()\n- pydoc\n- ? and ?? in IPython\n- pybites-pysource / inspect\n\nhttps://t.co/ZtGjQG42Nf \n\nHope this is useful and let me know what else we could cover ... thanks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1509505195801202691",
            "tweet_type": "Python tips",
            "created_at": "2022-03-31T12:17:38.000Z"
        },
        {
            "id": 3836,
            "username": "bbelderbos",
            "tweet_id": "1509421499844812803",
            "tweet_text": "You can use the callable() built-in to see if an object is callable in #Python.\n\nBonus: you can use the __call__() \"dunder\" (or special method) to make an object callable: https://t.co/oKs0ac13RI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPKK1UtXIAElbRJ.jpg\"]",
            "tweet_conversation_id": "1509421499844812803",
            "tweet_type": "Python tips",
            "created_at": "2022-03-31T06:45:03.000Z"
        },
        {
            "id": 3837,
            "username": "bbelderbos",
            "tweet_id": "1509102733277732869",
            "tweet_text": "I am thinking about starting a #Python refactoring series on YouTube. Useful? Questions? Source code even I could use? Thanks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1509102733277732869",
            "tweet_type": "Python tips",
            "created_at": "2022-03-30T09:38:24.000Z"
        },
        {
            "id": 3838,
            "username": "bbelderbos",
            "tweet_id": "1509071291541770246",
            "tweet_text": "Nice #Python Bite exercise refactoring: collections.namedtuple now accepts \"defaults\" (since 3.7). Before we used Transaction.__new__.__defaults__: https://t.co/rxL4OHeV9O",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPFMMfhX0AAJ8jz.jpg\"]",
            "tweet_conversation_id": "1509071291541770246",
            "tweet_type": "Python tips",
            "created_at": "2022-03-30T07:33:27.000Z"
        },
        {
            "id": 3839,
            "username": "bbelderbos",
            "tweet_id": "1509068822543806467",
            "tweet_text": "#Python's pathlib.Path supports glob() which lets you easily list files by string filter: https://t.co/ptsEPBfKxe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPFKEoSXMAEURS3.jpg\"]",
            "tweet_conversation_id": "1509068822543806467",
            "tweet_type": "Python tips",
            "created_at": "2022-03-30T07:23:39.000Z"
        },
        {
            "id": 3840,
            "username": "bbelderbos",
            "tweet_id": "1509058678153953284",
            "tweet_text": "I just cracked Bite 133. Convert an Amazon URL into an affiliation link:\nhttps://t.co/oTreu0Bnin\n\n#Python #CodeChallenges \n\n\u2764\ufe0fit when:\n- one test keeps failing and you have to come up with a more robust solution \ud83d\udcaa\n- look at all the creative solutions in the forum afterwards \ud83d\udc0d\ud83e\udd77 https://t.co/8vyYKdPZDq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPFAgE2XEAQTAxQ.jpg\"]",
            "tweet_conversation_id": "1509058678153953284",
            "tweet_type": "Python tips",
            "created_at": "2022-03-30T06:43:20.000Z"
        },
        {
            "id": 3841,
            "username": "bbelderbos",
            "tweet_id": "1508793028626026503",
            "tweet_text": "#Python's str.strip() can remove multiple leading and trailing characters at once: https://t.co/MkUsmlHChT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPBPMxZWQAsnZo8.jpg\"]",
            "tweet_conversation_id": "1508793028626026503",
            "tweet_type": "Python tips",
            "created_at": "2022-03-29T13:07:44.000Z"
        },
        {
            "id": 3842,
            "username": "bbelderbos",
            "tweet_id": "1508734176488480771",
            "tweet_text": "In our new YouTube video we set up a #Django project and manage environment variables with python-decouple. \n\nWe show both the interface as well as some internals (using the debugger). Hope it helps you hit the ground running with this library.\n\nhttps://t.co/cHZCaIfPOR https://t.co/ybbvjqjPfx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FPAI3gCWYAMMh0i.jpg\"]",
            "tweet_conversation_id": "1508734176488480771",
            "tweet_type": "Others",
            "created_at": "2022-03-29T09:13:53.000Z"
        },
        {
            "id": 3843,
            "username": "bbelderbos",
            "tweet_id": "1508497500650549254",
            "tweet_text": "@juliansequeira",
            "tweet_media": "[]",
            "tweet_conversation_id": "1508495850649100289",
            "tweet_type": "Others",
            "created_at": "2022-03-28T17:33:25.000Z"
        },
        {
            "id": 3844,
            "username": "bbelderbos",
            "tweet_id": "1508495850649100289",
            "tweet_text": "I had a blast interviewing Jesse, he shared some really valuable insights for (aspiring) #Python #developers!\n\nTime to tune into the Pybites podcast: https://t.co/AQ6eF9TyvZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1508495850649100289",
            "tweet_type": "Python tips",
            "created_at": "2022-03-28T17:26:51.000Z"
        },
        {
            "id": 3845,
            "username": "bbelderbos",
            "tweet_id": "1508420650607824903",
            "tweet_text": "Final #Python Newbie Bite screencasts coming this week - big thanks and shoutout to @RHelmstedter! https://t.co/BlnuKsPyqc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1508420650607824903",
            "tweet_type": "Python tips",
            "created_at": "2022-03-28T12:28:02.000Z"
        },
        {
            "id": 3846,
            "username": "bbelderbos",
            "tweet_id": "1508376168868855810",
            "tweet_text": "What are the most common first names on our platform?\n\nYou can use #Django's aggregate queries, specifically \"annotate\" in this case. It's the equivalent of a GROUP BY in SQL.\n\n\u2764\ufe0fLoving Django's ORM \ud83d\udc0d https://t.co/hMdt9itqZZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FO7TkvIXwAUdba2.jpg\"]",
            "tweet_conversation_id": "1508376168868855810",
            "tweet_type": "Others",
            "created_at": "2022-03-28T09:31:17.000Z"
        },
        {
            "id": 3847,
            "username": "bbelderbos",
            "tweet_id": "1508333798261506049",
            "tweet_text": "Adding a __main__.py file to your #Python package serves as an \"entry point\" making the package callable with -m, e.g. python -m my_package https://t.co/Zcq5ruhhIQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FO6tkgmXMAIduvk.jpg\"]",
            "tweet_conversation_id": "1508333798261506049",
            "tweet_type": "Python tips",
            "created_at": "2022-03-28T06:42:55.000Z"
        },
        {
            "id": 3848,
            "username": "bbelderbos",
            "tweet_id": "1507284261052850178",
            "tweet_text": "Prevent a file from being overwritten in #Python: https://t.co/A8aG5j1zQQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FOrzCrhXwAwuwED.jpg\"]",
            "tweet_conversation_id": "1507284261052850178",
            "tweet_type": "Python tips",
            "created_at": "2022-03-25T09:12:26.000Z"
        },
        {
            "id": 3849,
            "username": "bbelderbos",
            "tweet_id": "1507258149287383050",
            "tweet_text": "So now that we have our Pybites FastAPI learning path, opening up Vim to write the next one: SQLModel + workout tracking. Stay tuned ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1507258149287383050",
            "tweet_type": "Others",
            "created_at": "2022-03-25T07:28:40.000Z"
        },
        {
            "id": 3850,
            "username": "bbelderbos",
            "tweet_id": "1507257386582560776",
            "tweet_text": "The built-in datetime library covers a lot of common scenarios in a pretty elegant way. \n\nIf you need more advanced features, check out python-dateutil. \n\nE.g. you can use rrule to setup recurring events in time. This snippet also shows fuzzy date parsing.\n\n#Python #tips https://t.co/b6GqnjeaGT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FOramIwWUBMkMAD.jpg\"]",
            "tweet_conversation_id": "1507257386582560776",
            "tweet_type": "Python tips",
            "created_at": "2022-03-25T07:25:39.000Z"
        },
        {
            "id": 3851,
            "username": "bbelderbos",
            "tweet_id": "1506537929333694465",
            "tweet_text": "Nice article shared by @pycoders:\n\n#Python List Vs. Tuple: An In-Depth Comparison by @chetanambi \n\nhttps://t.co/h81841y1HT \n\nNote you can use timeit to measure speed of code: https://t.co/DOvGFwuJEi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FOhMNBdXoAI3WNt.jpg\"]",
            "tweet_conversation_id": "1506537929333694465",
            "tweet_type": "Python tips",
            "created_at": "2022-03-23T07:46:47.000Z"
        },
        {
            "id": 3852,
            "username": "bbelderbos",
            "tweet_id": "1506187386555932673",
            "tweet_text": "Celebrating another milestone on our platform \ud83c\udf89\n\nWanna learn some #MachineLearning? Let's get started \ud83c\udfa7 https://t.co/g44FRJpYKT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1506187386555932673",
            "tweet_type": "Others",
            "created_at": "2022-03-22T08:33:51.000Z"
        },
        {
            "id": 3853,
            "username": "bbelderbos",
            "tweet_id": "1505859181211000833",
            "tweet_text": "We're live with a brand new learning path! \n\nNow is better than never, time to learn the awesome FastAPI framework :) https://t.co/9PKzdCgIHF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1505859181211000833",
            "tweet_type": "Others",
            "created_at": "2022-03-21T10:49:40.000Z"
        },
        {
            "id": 3854,
            "username": "bbelderbos",
            "tweet_id": "1505844102906195974",
            "tweet_text": "Love any/all built-in #Python functions, they lead to concise code: https://t.co/AkBIzzjtgG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FOXVOfpXIAMWBdc.jpg\"]",
            "tweet_conversation_id": "1505844102906195974",
            "tweet_type": "Python tips",
            "created_at": "2022-03-21T09:49:46.000Z"
        },
        {
            "id": 3855,
            "username": "bbelderbos",
            "tweet_id": "1505812222861361153",
            "tweet_text": "... starting with scikit-learn :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1505174943599927299",
            "tweet_type": "Others",
            "created_at": "2022-03-21T07:43:05.000Z"
        },
        {
            "id": 3856,
            "username": "bbelderbos",
            "tweet_id": "1505812140850040832",
            "tweet_text": "We just cracked Bite 91. Matching multiple strings - and now We Challenge You!  https://t.co/j9rJn8tHsQ #Python #CodeChallenges - nice one to practice any / all built-in functions :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1505812140850040832",
            "tweet_type": "Python tips",
            "created_at": "2022-03-21T07:42:45.000Z"
        },
        {
            "id": 3857,
            "username": "bbelderbos",
            "tweet_id": "1505174943599927299",
            "tweet_text": "Managed to create an AWS Lambda function from a Docker image which means we can do some more #Python #datascience exercises on our platform soon!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1505174943599927299",
            "tweet_type": "Python tips",
            "created_at": "2022-03-19T13:30:46.000Z"
        },
        {
            "id": 3858,
            "username": "bbelderbos",
            "tweet_id": "1505082738365370372",
            "tweet_text": "Btw you can also use pathlib's Path.glob: https://t.co/1w8U12mMvQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FOMgvaRXMAYaUlQ.jpg\"]",
            "tweet_conversation_id": "1504841049969246210",
            "tweet_type": "Others",
            "created_at": "2022-03-19T07:24:22.000Z"
        },
        {
            "id": 3859,
            "username": "bbelderbos",
            "tweet_id": "1504841049969246210",
            "tweet_text": "#Python #tips: you can use os.walk to get all the files in a directory recursively. \n\nHere we use it to see which file extensions are most common: https://t.co/2IQ4Q3lj2B",
            "tweet_media": "[\"https://pbs.twimg.com/media/FOJE7fEXoAEvp0M.jpg\"]",
            "tweet_conversation_id": "1504841049969246210",
            "tweet_type": "Python tips",
            "created_at": "2022-03-18T15:23:59.000Z"
        },
        {
            "id": 3860,
            "username": "bbelderbos",
            "tweet_id": "1504831497999634443",
            "tweet_text": "Love set operations ... what #Python 2 builtins did not make it to Python 3? https://t.co/k9xSmTfsYA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FOI8OEvWQAgIBtS.jpg\"]",
            "tweet_conversation_id": "1504831497999634443",
            "tweet_type": "Python tips",
            "created_at": "2022-03-18T14:46:02.000Z"
        },
        {
            "id": 3861,
            "username": "bbelderbos",
            "tweet_id": "1504027037593440260",
            "tweet_text": "Do you want to test something that gets logged in #Python? You can use pytest's caplog fixture: https://t.co/L2PAILNih0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FN9gnJJXIAEHT_w.jpg\"]",
            "tweet_conversation_id": "1504027037593440260",
            "tweet_type": "Python tips",
            "created_at": "2022-03-16T09:29:23.000Z"
        },
        {
            "id": 3862,
            "username": "bbelderbos",
            "tweet_id": "1503997050354028547",
            "tweet_text": "Do you think the Gang of Four design patterns book is a bit dense and not all might apply to #Python?\n\n@brandon_rhodes does a great job discussing which patterns are relevant to Python and how, a very insightful read:\n\nhttps://t.co/PIL6z19jjC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503997050354028547",
            "tweet_type": "Python tips",
            "created_at": "2022-03-16T07:30:14.000Z"
        },
        {
            "id": 3863,
            "username": "bbelderbos",
            "tweet_id": "1503723802630496267",
            "tweet_text": "I like pytest-cov :) https://t.co/utxh9vyptT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FN5MyZIWYAMvKBr.jpg\"]",
            "tweet_conversation_id": "1503723802630496267",
            "tweet_type": "Others",
            "created_at": "2022-03-15T13:24:27.000Z"
        },
        {
            "id": 3864,
            "username": "bbelderbos",
            "tweet_id": "1503723653921492999",
            "tweet_text": "Adding pytest.fixture(scope=\"session\") can speed up your tests quite a bit (of course you need to do proper setup / teardown / isolation)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503723653921492999",
            "tweet_type": "Others",
            "created_at": "2022-03-15T13:23:51.000Z"
        },
        {
            "id": 3865,
            "username": "bbelderbos",
            "tweet_id": "1503683018548027394",
            "tweet_text": "Actually: \n\n&gt; Changed in version 3.10: Unions can now be written as X | Y\n\nNice :)\n\nPlatform is still on 3.8 though hence the old notation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503681375202852872",
            "tweet_type": "Others",
            "created_at": "2022-03-15T10:42:23.000Z"
        },
        {
            "id": 3866,
            "username": "bbelderbos",
            "tweet_id": "1503681375202852872",
            "tweet_text": "I just cracked Bite 46. You are a programmer! Code Fizz Buzz - and now I challenge you ... \nhttps://t.co/KznRbjSaCb \n\nI also updated this exercise with type hints. You can use typing.Union to return various types, here str and int. \n\n#Python #CodeChallenges https://t.co/1TNQVtwc40",
            "tweet_media": "[\"https://pbs.twimg.com/media/FN4mHygWYAUC4oK.jpg\"]",
            "tweet_conversation_id": "1503681375202852872",
            "tweet_type": "Python tips",
            "created_at": "2022-03-15T10:35:51.000Z"
        },
        {
            "id": 3867,
            "username": "bbelderbos",
            "tweet_id": "1503679159394082818",
            "tweet_text": "Using #Python's zip built-in function to create and unpack dictionaries: https://t.co/wQEJYLf2jL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FN4kCj9XwAEdqjV.jpg\"]",
            "tweet_conversation_id": "1503679159394082818",
            "tweet_type": "Python tips",
            "created_at": "2022-03-15T10:27:03.000Z"
        },
        {
            "id": 3868,
            "username": "bbelderbos",
            "tweet_id": "1503650622213697536",
            "tweet_text": "Two ways to rotate a string (left and right) by n characters in #Python: https://t.co/cBnvp69iE3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FN4KQgaX0AInMf4.jpg\"]",
            "tweet_conversation_id": "1503650622213697536",
            "tweet_type": "Python tips",
            "created_at": "2022-03-15T08:33:39.000Z"
        },
        {
            "id": 3869,
            "username": "bbelderbos",
            "tweet_id": "1503383022774759427",
            "tweet_text": "\ud83d\udce2 More Newbie Bites screencasts \ud83d\udca1\n\nToday @RHelmstedter teaches us about truthiness in #Python \ud83d\udc0d\n\nhttps://t.co/VGQMZQw8kK https://t.co/XJE5C6Zthr",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1503382715537711110/pu/vid/640x360/b-XWk_ccN3lJpCAy.mp4?tag=12\"]",
            "tweet_conversation_id": "1503383022774759427",
            "tweet_type": "Python tips",
            "created_at": "2022-03-14T14:50:18.000Z"
        },
        {
            "id": 3870,
            "username": "bbelderbos",
            "tweet_id": "1503373668625395714",
            "tweet_text": "#Python makes it easy to pick a random sample from a sequence: https://t.co/RfFrLSH358",
            "tweet_media": "[\"https://pbs.twimg.com/media/FN0OW8uX0AcoUya.jpg\"]",
            "tweet_conversation_id": "1503373668625395714",
            "tweet_type": "Python tips",
            "created_at": "2022-03-14T14:13:08.000Z"
        },
        {
            "id": 3871,
            "username": "bbelderbos",
            "tweet_id": "1503350384236113923",
            "tweet_text": "Type hints are so useful!\n\nDid you know about this dunder? https://t.co/45nocsGD3b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNz5Lo7XEAAhnhK.jpg\"]",
            "tweet_conversation_id": "1503347338110189573",
            "tweet_type": "Others",
            "created_at": "2022-03-14T12:40:37.000Z"
        },
        {
            "id": 3872,
            "username": "bbelderbos",
            "tweet_id": "1503347338110189573",
            "tweet_text": "I just cracked Bite 44. License key generator - and now I challenge you!  https://t.co/wQrGi8cBU1 #Python #CodeChallenges \n\nFun exercise where you can use some nice Standard Library modules. Let me add some type hinting as well :)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1503347338110189573",
            "tweet_type": "Python tips",
            "created_at": "2022-03-14T12:28:30.000Z"
        },
        {
            "id": 3873,
            "username": "bbelderbos",
            "tweet_id": "1502265324351234049",
            "tweet_text": "If you \"yield\" instead of \"return\" from a #pytest fixture you can write some teardown code after it: https://t.co/zmVfArBuDR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNkeDV4XoAQa7QE.jpg\"]",
            "tweet_conversation_id": "1502265324351234049",
            "tweet_type": "Others",
            "created_at": "2022-03-11T12:48:58.000Z"
        },
        {
            "id": 3874,
            "username": "bbelderbos",
            "tweet_id": "1502243979718451205",
            "tweet_text": "Almost forgot, we did a video about this too: https://t.co/KCga7X5rwe",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502236000168390669",
            "tweet_type": "Others",
            "created_at": "2022-03-11T11:24:09.000Z"
        },
        {
            "id": 3875,
            "username": "bbelderbos",
            "tweet_id": "1502243030736285701",
            "tweet_text": "Starting Bite 8 out of 10 of the FastAPI PyBites Learning Path ... getting closer! \ud83c\udf89\ud83d\udc0d\u2615\ufe0f\ud83c\udfa7\ud83d\ude03\n\n#Python #APIs #learning #codechallenges",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502243030736285701",
            "tweet_type": "Python tips",
            "created_at": "2022-03-11T11:20:23.000Z"
        },
        {
            "id": 3876,
            "username": "bbelderbos",
            "tweet_id": "1502239099326980099",
            "tweet_text": "I just cracked Bite 26. Dictionary comprehensions are awesome - and now I challenge you! \n\nhttps://t.co/A23P4kad1A \n\n#Python #CodeChallenges\n\n(Interestingly found an enhancement: add/change to constants. Tip for content creators: consume your old content after a while ...)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502239099326980099",
            "tweet_type": "Python tips",
            "created_at": "2022-03-11T11:04:46.000Z"
        },
        {
            "id": 3877,
            "username": "bbelderbos",
            "tweet_id": "1502236000168390669",
            "tweet_text": "Here is how to export a #Django model to a JSON file and load it in: https://t.co/tBMQ868Esw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNkDnVJXMAogWL8.jpg\"]",
            "tweet_conversation_id": "1502236000168390669",
            "tweet_type": "Others",
            "created_at": "2022-03-11T10:52:27.000Z"
        },
        {
            "id": 3878,
            "username": "bbelderbos",
            "tweet_id": "1502182806105075713",
            "tweet_text": "I learned cool new things talking with @pypyrpipes about #debugging and #designpatterns this week (thanks Thomas!) \n\nI hope you get a lot out of our new #podcast episode too:\n\n#062 - The Art of Debugging (and Design Patterns)  https://t.co/XaFPwxPxq6 \n\n#Python #developer #mindset",
            "tweet_media": "[]",
            "tweet_conversation_id": "1502182806105075713",
            "tweet_type": "Python tips",
            "created_at": "2022-03-11T07:21:04.000Z"
        },
        {
            "id": 3879,
            "username": "bbelderbos",
            "tweet_id": "1501898832199794688",
            "tweet_text": "You can use itertools.chain to flatten a list of iterables (for more levels use recursion)\n\n#Python #tips https://t.co/ApqrxOg1IS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNfRAbrXwAM9RTa.jpg\"]",
            "tweet_conversation_id": "1501898832199794688",
            "tweet_type": "Python tips",
            "created_at": "2022-03-10T12:32:40.000Z"
        },
        {
            "id": 3880,
            "username": "bbelderbos",
            "tweet_id": "1501536999211159556",
            "tweet_text": "Cool new #developer #tool in my arsenal: https://t.co/dljR8Rs82n \ud83c\udf89\ud83e\udd77\ud83d\udcaa\n\nType in any code and filter by language and even repo.\n\nFor example: yesterday I was curious how #Django uses #Python's staticmethod \ud83d\udc0d\n\nI could instantly find it. Much faster than git clone + grep \ud83d\ude2e\ud83c\udf89",
            "tweet_media": "[]",
            "tweet_conversation_id": "1501536999211159556",
            "tweet_type": "Python tips",
            "created_at": "2022-03-09T12:34:52.000Z"
        },
        {
            "id": 3881,
            "username": "bbelderbos",
            "tweet_id": "1501533896155881476",
            "tweet_text": "Difficult not to fall in love with #pytest :) https://t.co/OR96MMgBi2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNaFEPlXIAMisWD.jpg\"]",
            "tweet_conversation_id": "1501533896155881476",
            "tweet_type": "Others",
            "created_at": "2022-03-09T12:22:32.000Z"
        },
        {
            "id": 3882,
            "username": "bbelderbos",
            "tweet_id": "1501500053147561985",
            "tweet_text": "You can set defaults for #Python's collections.namedtuple since v3.7\n\ntyping.NamedTuple gives us a robust alternative for constructing namedtuples \ud83d\udca1\n\nIt gives the resulting class an extra __annotations__ attribute (a dict that maps field names to types \ud83e\udd2f)\n\nReally nice \u2764\ufe0f\ud83d\udc0d https://t.co/1xGOTvMHNz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNZl2QjXwAMFYdf.jpg\"]",
            "tweet_conversation_id": "1501500053147561985",
            "tweet_type": "Python tips",
            "created_at": "2022-03-09T10:08:03.000Z"
        },
        {
            "id": 3883,
            "username": "bbelderbos",
            "tweet_id": "1501462670339362816",
            "tweet_text": "Funny, doing this exercise myself I am finding that adding type hinting is of great help here!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1501459098453295108",
            "tweet_type": "Others",
            "created_at": "2022-03-09T07:39:31.000Z"
        },
        {
            "id": 3884,
            "username": "bbelderbos",
            "tweet_id": "1501459098453295108",
            "tweet_text": "I just cracked Bite 21. Query a nested data structure - and now I challenge you!  https://t.co/TnLWLhdjKY \n#Python #CodeChallenges",
            "tweet_media": "[]",
            "tweet_conversation_id": "1501459098453295108",
            "tweet_type": "Python tips",
            "created_at": "2022-03-09T07:25:19.000Z"
        },
        {
            "id": 3885,
            "username": "bbelderbos",
            "tweet_id": "1501446042914594817",
            "tweet_text": "You can use #Python's abstractmethod decorator to force derived classes to implement certain methods: https://t.co/iPIEFLK5jA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNY1MZ4WYAA2BMy.jpg\"]",
            "tweet_conversation_id": "1501446042914594817",
            "tweet_type": "Python tips",
            "created_at": "2022-03-09T06:33:26.000Z"
        },
        {
            "id": 3886,
            "username": "bbelderbos",
            "tweet_id": "1501187089571979272",
            "tweet_text": "The docs explain the difference between shallow and deep copies well:\nhttps://t.co/7Nbevk7dFC https://t.co/eegd2nvFVl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNVJm1zXMAYC-im.png\"]",
            "tweet_conversation_id": "1501187086862458887",
            "tweet_type": "Others",
            "created_at": "2022-03-08T13:24:27.000Z"
        },
        {
            "id": 3887,
            "username": "bbelderbos",
            "tweet_id": "1501187086862458887",
            "tweet_text": "One thing to be wary of in #Python is copying nested data structures.\n\nBy default copies (e.g. dict.copy()) are \"shallow\", meaning they use references to existing objects (not all new copies).\n\nThis can lead to updating multiple values at once!\n\ncopy.deepcopy() prevents this: https://t.co/fhFUsbNtnJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNVInclXMAAdFeh.jpg\"]",
            "tweet_conversation_id": "1501187086862458887",
            "tweet_type": "Python tips",
            "created_at": "2022-03-08T13:24:26.000Z"
        },
        {
            "id": 3888,
            "username": "bbelderbos",
            "tweet_id": "1501130145859571712",
            "tweet_text": "Did you know you can use #Python's difflib.SequenceMatcher to get the similarity between strings?\n\nHere I use it on a transcript snippet I edited on @ironscribeio (which uses @AssemblyAI) finding an impressing accuracy of ~98%!\n\nAnd... difflib is part of the Standard Lib \ud83c\udf89\ud83e\udd2f\ud83d\udc0d\u2764\ufe0f https://t.co/BjgSLpdm0d",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNUV5jsXMAIxbtx.jpg\"]",
            "tweet_conversation_id": "1501130145859571712",
            "tweet_type": "Python tips",
            "created_at": "2022-03-08T09:38:11.000Z"
        },
        {
            "id": 3889,
            "username": "bbelderbos",
            "tweet_id": "1501102383371374592",
            "tweet_text": "#Python collections.ChainMap groups multiple dicts together.\n\nIn this example (from the docs) ChainMap allows us to set up a precedence chain.\n\nUser specified command-line arguments take precedence over environment variables, which in turn take precedence over default values. https://t.co/vI3jHzoR1G",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNT8jJeXwAA5q3r.jpg\"]",
            "tweet_conversation_id": "1501102383371374592",
            "tweet_type": "Python tips",
            "created_at": "2022-03-08T07:47:51.000Z"
        },
        {
            "id": 3890,
            "username": "bbelderbos",
            "tweet_id": "1501101663695814657",
            "tweet_text": "Read 3 chapters of \"How #Software Works: The Magic Behind Encryption, CGI, Search Engines, and Other Everyday Technologies\" - very interesting, I'm hooked!\n\n#books",
            "tweet_media": "[]",
            "tweet_conversation_id": "1501101663695814657",
            "tweet_type": "Others",
            "created_at": "2022-03-08T07:45:00.000Z"
        },
        {
            "id": 3891,
            "username": "bbelderbos",
            "tweet_id": "1500863852661166087",
            "tweet_text": "Super excited about the new PyBites podcast coming out later this week ... the art of debugging (and some design patterns stuff), stay tuned ...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500863852661166087",
            "tweet_type": "Others",
            "created_at": "2022-03-07T16:00:01.000Z"
        },
        {
            "id": 3892,
            "username": "bbelderbos",
            "tweet_id": "1500754496431046658",
            "tweet_text": "With f-strings (and .format) you can use &lt;, &gt; and ^ to left / right / center justify strings.\n\n#Python #tips https://t.co/TdtYaN3lZu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNPALtHXEAAs4TO.jpg\"]",
            "tweet_conversation_id": "1500754496431046658",
            "tweet_type": "Python tips",
            "created_at": "2022-03-07T08:45:29.000Z"
        },
        {
            "id": 3893,
            "username": "bbelderbos",
            "tweet_id": "1500738510034198532",
            "tweet_text": "TIL: \"git grep -n\" does the same as \"ag\" (aka the Silver Searcher) without installing anything :)\n\n#unix #tools",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500738510034198532",
            "tweet_type": "Others",
            "created_at": "2022-03-07T07:41:57.000Z"
        },
        {
            "id": 3894,
            "username": "bbelderbos",
            "tweet_id": "1500467111336067077",
            "tweet_text": "New AWS Lambda function added that can validate / score FastAPI Bites \ud83d\udc0d\ud83c\udf89\n\nIt's now just a matter of time and coffee \ud83d\ude03\u2615\ufe0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500467111336067077",
            "tweet_type": "Others",
            "created_at": "2022-03-06T13:43:31.000Z"
        },
        {
            "id": 3895,
            "username": "bbelderbos",
            "tweet_id": "1500450068566102019",
            "tweet_text": "I had to debug something yesterday and I wrote up the steps I took, I hope it helps other #developers:\n\nhttps://t.co/tiJumOoRb1 \n\n#Python #tools #debugging #programming https://t.co/MDAfDJ9LZm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNKrVqJXEAULZjv.png\"]",
            "tweet_conversation_id": "1500450068566102019",
            "tweet_type": "Python tips",
            "created_at": "2022-03-06T12:35:48.000Z"
        },
        {
            "id": 3896,
            "username": "bbelderbos",
            "tweet_id": "1500441840964849671",
            "tweet_text": "PyBites #Git Tricks Training https://t.co/zNjGUndow8 via @YouTube",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500441840964849671",
            "tweet_type": "Others",
            "created_at": "2022-03-06T12:03:06.000Z"
        },
        {
            "id": 3897,
            "username": "bbelderbos",
            "tweet_id": "1500433748428533760",
            "tweet_text": "Using a #Python contextmanager (contextlib) and sqlite3 DB in a single tip (no external packages required!) https://t.co/kkq0NmADEc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNKcfmnXoAA_6a9.jpg\"]",
            "tweet_conversation_id": "1500433748428533760",
            "tweet_type": "Python tips",
            "created_at": "2022-03-06T11:30:56.000Z"
        },
        {
            "id": 3898,
            "username": "bbelderbos",
            "tweet_id": "1500430999448178688",
            "tweet_text": "As always pytest is elegant and a joy to work with. Fixtures are beautiful as well! https://t.co/dxpfVoGlyE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500084684063232001",
            "tweet_type": "Others",
            "created_at": "2022-03-06T11:20:01.000Z"
        },
        {
            "id": 3899,
            "username": "bbelderbos",
            "tweet_id": "1500181048017272833",
            "tweet_text": "Almost forgot but I had this in my .zshrc to give the \"cd\" command more history \ud83e\udd2f\n\nhttps://t.co/XhV4LFmuAT https://t.co/GspqXnQWMN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNG2pLJXwAAnHAD.jpg\"]",
            "tweet_conversation_id": "1500181048017272833",
            "tweet_type": "Others",
            "created_at": "2022-03-05T18:46:48.000Z"
        },
        {
            "id": 3900,
            "username": "bbelderbos",
            "tweet_id": "1500124445444345859",
            "tweet_text": "cc\u00a0@HughTipping @juliansequeira",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500124406085033992",
            "tweet_type": "Others",
            "created_at": "2022-03-05T15:01:53.000Z"
        },
        {
            "id": 3901,
            "username": "bbelderbos",
            "tweet_id": "1500124406085033992",
            "tweet_text": "Blogging / content creation does not have to be complicated. \n\nThere is much to say to work with plain text files locally first and make it pretty later!\n\nGreat reminder this week, thanks @sivers: \nhttps://t.co/ZbS5bbX4Y5 \n\n#contentcreators #writing #bloggingtips #productivity",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500124406085033992",
            "tweet_type": "Others",
            "created_at": "2022-03-05T15:01:44.000Z"
        },
        {
            "id": 3902,
            "username": "bbelderbos",
            "tweet_id": "1500084684063232001",
            "tweet_text": "\"pytest.raises\" is an elegant way to test #Python exceptions.\n\nHere the \"Food\" pydantic model is instantiated with missing attributes triggering a ValidationError.\n\npytest.raises lets us assert this elegantly: https://t.co/qYEsbAOceY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNFfD8AWQAATOgh.jpg\"]",
            "tweet_conversation_id": "1500084684063232001",
            "tweet_type": "Python tips",
            "created_at": "2022-03-05T12:23:53.000Z"
        },
        {
            "id": 3903,
            "username": "bbelderbos",
            "tweet_id": "1500066421644144640",
            "tweet_text": "Mocking out requests.get (from Bite https://t.co/qdZciGfevk)\n\nThis uses unittest.mock (Standard Library), there's probably a more elegant way using a library though?\n\n#Python #testing https://t.co/XbQzEKrdvh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FNFOTB4XoAAG7kI.jpg\"]",
            "tweet_conversation_id": "1500066421644144640",
            "tweet_type": "Python tips",
            "created_at": "2022-03-05T11:11:19.000Z"
        },
        {
            "id": 3904,
            "username": "bbelderbos",
            "tweet_id": "1500064332574601220",
            "tweet_text": "I just cracked Bite 5. Parse a list of names - and now I challenge you!\n\nhttps://t.co/GkkEIc4sBs \n\nThis is a nice exercise to practice some useful built-in functions ...\n\n#Python #CodeChallenges",
            "tweet_media": "[]",
            "tweet_conversation_id": "1500064332574601220",
            "tweet_type": "Python tips",
            "created_at": "2022-03-05T11:03:01.000Z"
        },
        {
            "id": 3905,
            "username": "bbelderbos",
            "tweet_id": "1499697885650239490",
            "tweet_text": "Use open with \"a\" (append mode) if you want to append to an existing file (not truncating its existing content).\n\n#Python #tips https://t.co/w33KObnrJH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FM__PlpXEAIuPch.jpg\"]",
            "tweet_conversation_id": "1499697885650239490",
            "tweet_type": "Python tips",
            "created_at": "2022-03-04T10:46:53.000Z"
        },
        {
            "id": 3906,
            "username": "bbelderbos",
            "tweet_id": "1499641850646474756",
            "tweet_text": "You can use #Python's subprocess module to run shell commands.\n\nThis is useful to parse outputs from existing shell commands.\n\nBe wary of the security risk of using `shell=True` though, you're responsible for proper quoting to avoid shell injection vulnerabilities. https://t.co/8Ly7hgCaR4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FM_MT03WUAIVYVi.jpg\"]",
            "tweet_conversation_id": "1499641850646474756",
            "tweet_type": "Python tips",
            "created_at": "2022-03-04T07:04:13.000Z"
        },
        {
            "id": 3907,
            "username": "bbelderbos",
            "tweet_id": "1499309584263098373",
            "tweet_text": "#Python's contextlib module has a useful context manager for redirecting standard output.\n\nIn this example (from the docs) we capture the output of help(pow) in a file.\n\nTo send output to standard error you can use:\n\nwith redirect_stdout(sys.stderr): ...\n\nhttps://t.co/XF3zT7vL3O https://t.co/dwmi2MDa7T",
            "tweet_media": "[\"https://pbs.twimg.com/media/FM6d79cXoAkrWfa.jpg\"]",
            "tweet_conversation_id": "1499309584263098373",
            "tweet_type": "Python tips",
            "created_at": "2022-03-03T09:03:55.000Z"
        },
        {
            "id": 3908,
            "username": "bbelderbos",
            "tweet_id": "1499282629614575618",
            "tweet_text": "Wanting to do some (beginner) #Django on YouTube, any burning questions?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1499282629614575618",
            "tweet_type": "Others",
            "created_at": "2022-03-03T07:16:48.000Z"
        },
        {
            "id": 3909,
            "username": "bbelderbos",
            "tweet_id": "1498969692987400193",
            "tweet_text": "Starting #Python 3.6 you can make larger numbers more readable using underscores: https://t.co/dxJmMEqSMb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FM1o3zmXwAMGfOg.jpg\"]",
            "tweet_conversation_id": "1498969692987400193",
            "tweet_type": "Python tips",
            "created_at": "2022-03-02T10:33:18.000Z"
        },
        {
            "id": 3910,
            "username": "bbelderbos",
            "tweet_id": "1498945464615546881",
            "tweet_text": "You can use the decode method to turn a #Python byte-string into a regular string: https://t.co/MTiYkK3KUk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FM1S77HWQAAEEjm.jpg\"]",
            "tweet_conversation_id": "1498945464615546881",
            "tweet_type": "Python tips",
            "created_at": "2022-03-02T08:57:02.000Z"
        },
        {
            "id": 3911,
            "username": "bbelderbos",
            "tweet_id": "1498555574673362944",
            "tweet_text": "The tqdm #Python library (standing for Te Quiero DeMasiado in Spanish or \"I love you so much\") lets you add a smart progress meter by wrapping an iterable.\n\nExample from the README where there's also a nice gif showing more switches / features:\nhttps://t.co/nxyeK5N3wx https://t.co/zOx6coIEXC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMvwWAMXsAcGlk6.jpg\"]",
            "tweet_conversation_id": "1498555574673362944",
            "tweet_type": "Python tips",
            "created_at": "2022-03-01T07:07:45.000Z"
        },
        {
            "id": 3912,
            "username": "bbelderbos",
            "tweet_id": "1498309129798144002",
            "tweet_text": "What day of the week is it #Python? https://t.co/1qdYQxusex",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMsQMi7XEAM1w8U.png\"]",
            "tweet_conversation_id": "1498309129798144002",
            "tweet_type": "Python tips",
            "created_at": "2022-02-28T14:48:28.000Z"
        },
        {
            "id": 3913,
            "username": "bbelderbos",
            "tweet_id": "1497284827875356672",
            "tweet_text": "You can use pytest.param() to apply marks or set test IDs to individual parametrized tests. \n\nThis prints extra detail in the test output and makes the tests easier to filter.\n\n#Python #testing #tips https://t.co/CbkE7C10l1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMdrdLpXwAYCxVY.jpg\"]",
            "tweet_conversation_id": "1497284827875356672",
            "tweet_type": "Python tips",
            "created_at": "2022-02-25T18:58:15.000Z"
        },
        {
            "id": 3914,
            "username": "bbelderbos",
            "tweet_id": "1497113330133123073",
            "tweet_text": "If you want a #Python \"timedelta\" of months and years you can use python-dateutil's relativedelta: https://t.co/Yu9yP5Gibe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMbQd4DWQAM73Bt.jpg\"]",
            "tweet_conversation_id": "1497113330133123073",
            "tweet_type": "Python tips",
            "created_at": "2022-02-25T07:36:47.000Z"
        },
        {
            "id": 3915,
            "username": "bbelderbos",
            "tweet_id": "1497112252712902669",
            "tweet_text": "#git #tip: I want to discard the last 4 local commits but one:\n\n1. make a new branch (backup)\n$ git branch backup_branch \n\n2. delete the commits\n$ git reset --hard HEAD^^^^\n\n3. restore the one I still want\n$ git cherry-pick commit_hash\n\nIf there's a better way please let me know.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1497112252712902669",
            "tweet_type": "Others",
            "created_at": "2022-02-25T07:32:30.000Z"
        },
        {
            "id": 3916,
            "username": "bbelderbos",
            "tweet_id": "1496812552831082500",
            "tweet_text": "Writing async tests in pytest is easier than I thought, thanks to pytest-asyncio \ud83d\udc0d\u2764\ufe0f https://t.co/DgWmlH1zAj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMW_AQyXMAcOQeY.png\"]",
            "tweet_conversation_id": "1496812552831082500",
            "tweet_type": "Others",
            "created_at": "2022-02-24T11:41:36.000Z"
        },
        {
            "id": 3917,
            "username": "bbelderbos",
            "tweet_id": "1496751012622839810",
            "tweet_text": "Blown away that my whole pybites-pysource package is obsolete by #Python's Standard Library \ud83d\ude05 \n\nThis works just fine:\n$ python -m inspect django.contrib.auth.decorators\n(shows source code)\n\n\u2764\ufe0f\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1496751012622839810",
            "tweet_type": "Python tips",
            "created_at": "2022-02-24T07:37:04.000Z"
        },
        {
            "id": 3918,
            "username": "bbelderbos",
            "tweet_id": "1496743070657912917",
            "tweet_text": "__repr__ vs. __str__ in #Python?\n\n@nedbat said it best:\n \n&gt; My rule of thumb: __repr__ is for developers, __str__ is for customers.\n\nThe datetime module offers a nice example of this: https://t.co/yQ64tUe3LW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMV_x0yXwAItGMS.png\"]",
            "tweet_conversation_id": "1496743070657912917",
            "tweet_type": "Python tips",
            "created_at": "2022-02-24T07:05:30.000Z"
        },
        {
            "id": 3919,
            "username": "bbelderbos",
            "tweet_id": "1496489605612322819",
            "tweet_text": "So happy to see people growing their #Python and #developer skills with us \ud83c\udf89\ud83d\udc0d\ud83e\udd77 https://t.co/lklALJqXyW",
            "tweet_media": "[]",
            "tweet_conversation_id": "1496489605612322819",
            "tweet_type": "Python tips",
            "created_at": "2022-02-23T14:18:20.000Z"
        },
        {
            "id": 3920,
            "username": "bbelderbos",
            "tweet_id": "1496201877427396608",
            "tweet_text": "#Python str.split() covers a lot of bases, but if you want to go more powerful, you can use re.split() to split by a regex pattern: https://t.co/w6u4S7AVo2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMM2PAYXwAQuU57.jpg\"]",
            "tweet_conversation_id": "1496201877427396608",
            "tweet_type": "Python tips",
            "created_at": "2022-02-22T19:15:00.000Z"
        },
        {
            "id": 3921,
            "username": "bbelderbos",
            "tweet_id": "1496196897844957186",
            "tweet_text": "TIL #vim search for word boundaries: https://t.co/MGwvAhZ6Yx\n\nExample: \n\n1. pipe git log into Vim:\n\n$ git log | vi - \n\n2. Use Vim's search (/) with word boundaries \\&lt; and \\&gt; to look for the exact word \"bug\":\n\n/\\&lt;bug\\&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1496196897844957186",
            "tweet_type": "Others",
            "created_at": "2022-02-22T18:55:13.000Z"
        },
        {
            "id": 3922,
            "username": "bbelderbos",
            "tweet_id": "1496047424539963400",
            "tweet_text": "I love #Python list comprehensions. Set and dict comprehensions are beautiful too. \n\nHere is a dictcomp to swap dictionary keys and values + I use pprint to pretty print: https://t.co/lVNHYqSOkm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMMHI5bWQAQM8_7.jpg\"]",
            "tweet_conversation_id": "1496047424539963400",
            "tweet_type": "Python tips",
            "created_at": "2022-02-22T09:01:15.000Z"
        },
        {
            "id": 3923,
            "username": "bbelderbos",
            "tweet_id": "1495813217444151298",
            "tweet_text": "#Python #tip: urlparse can be handy to break a URL into its parts: https://t.co/KjDrQMyVMq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMIyIoPXsAUd10z.jpg\"]",
            "tweet_conversation_id": "1495813217444151298",
            "tweet_type": "Python tips",
            "created_at": "2022-02-21T17:30:36.000Z"
        },
        {
            "id": 3924,
            "username": "bbelderbos",
            "tweet_id": "1495811165125062662",
            "tweet_text": "I think adding a @FastAPI learning path on our PyBites Platform would be wicked, no?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495811165125062662",
            "tweet_type": "Others",
            "created_at": "2022-02-21T17:22:27.000Z"
        },
        {
            "id": 3925,
            "username": "bbelderbos",
            "tweet_id": "1495733324039573509",
            "tweet_text": "Finished reading @AdamChainz's \"Boost Your #Django DX\" book, lot of helpful advice and tips, recommended!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495733324039573509",
            "tweet_type": "Others",
            "created_at": "2022-02-21T12:13:08.000Z"
        },
        {
            "id": 3926,
            "username": "bbelderbos",
            "tweet_id": "1495715563347267584",
            "tweet_text": "Today a more code heavy PyBites #Podcast episode, enjoy and I hope it helps you write better code, let me know your favorite tip (or additional ones you may have) below ...\n\n#059 - 10 #Python #cleancode tips drawn from code reviews:\nhttps://t.co/S2Yx7XPfpL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495715563347267584",
            "tweet_type": "Python tips",
            "created_at": "2022-02-21T11:02:34.000Z"
        },
        {
            "id": 3927,
            "username": "bbelderbos",
            "tweet_id": "1495684491704164352",
            "tweet_text": "New to #Python? Check out our Newbie Bite screencast series that @RHelmstedter is producing for us. \n\nThey explain the fundamental concepts very well ...\n\n#pythonprogramming #pythonlearning #pythoncode #100daysofcode https://t.co/Jzrmc16M9D",
            "tweet_media": "[]",
            "tweet_conversation_id": "1495684491704164352",
            "tweet_type": "Python tips",
            "created_at": "2022-02-21T08:59:05.000Z"
        },
        {
            "id": 3928,
            "username": "bbelderbos",
            "tweet_id": "1495663836271202309",
            "tweet_text": "Follow up #Python defaultdict tip: how to nest them?\n\nIts default_factory can be a function which will be used for building new elements. \n\nThat means that we can introduce nesting by using a lambda (anonymous function). Don't like lambda? Use partial: https://t.co/ivdGH5dDy0 https://t.co/rBLofzIg5C",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMGqSRBX0AIBzGW.jpg\"]",
            "tweet_conversation_id": "1495663836271202309",
            "tweet_type": "Python tips",
            "created_at": "2022-02-21T07:37:01.000Z"
        },
        {
            "id": 3929,
            "username": "bbelderbos",
            "tweet_id": "1495311613796270087",
            "tweet_text": "Good news: if you're always checking if a key is present when building up a dict you can stop doing that!\n\nEnter collections.defaultdict \ud83d\udc0d\ud83d\udca1\n\nIn this example an entry is automatically created in the countries dict (using default_factory) returning an empty list.\n\n#Python #tips https://t.co/NPOwyo0ALr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FMBpxhRXMAIgCdC.jpg\"]",
            "tweet_conversation_id": "1495311613796270087",
            "tweet_type": "Python tips",
            "created_at": "2022-02-20T08:17:24.000Z"
        },
        {
            "id": 3930,
            "username": "bbelderbos",
            "tweet_id": "1495017984233988101",
            "tweet_text": "Gotta \u2764\ufe0f #Python \ud83d\udc0d + its awesome packages: here is some web scraping in a just a few lines of code, thanks to requests + BeautifulSoup, offering powerful abstractions! https://t.co/pz345UNfkN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FL9e3_vXIAEUzZF.jpg\"]",
            "tweet_conversation_id": "1495017984233988101",
            "tweet_type": "Python tips",
            "created_at": "2022-02-19T12:50:38.000Z"
        },
        {
            "id": 3931,
            "username": "bbelderbos",
            "tweet_id": "1495013418637606920",
            "tweet_text": "Other alternatives: use Jupyter notebooks or pdb - this will probably also reduce the amount of calls you need to make.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494591989739892772",
            "tweet_type": "Others",
            "created_at": "2022-02-19T12:32:29.000Z"
        },
        {
            "id": 3932,
            "username": "bbelderbos",
            "tweet_id": "1494936944689692674",
            "tweet_text": "As per docs: https://t.co/VEGFwC1kSe\n\n&gt; The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494936942315716609",
            "tweet_type": "Others",
            "created_at": "2022-02-19T07:28:36.000Z"
        },
        {
            "id": 3933,
            "username": "bbelderbos",
            "tweet_id": "1494936942315716609",
            "tweet_text": "#Python curiosity: did you know that integers in the range -5...256 are cached?\n\nWe can show that using \"is\" which checks for object equality: https://t.co/4V89eh0YEb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FL8UvBjXwAARXxf.jpg\"]",
            "tweet_conversation_id": "1494936942315716609",
            "tweet_type": "Python tips",
            "created_at": "2022-02-19T07:28:36.000Z"
        },
        {
            "id": 3934,
            "username": "bbelderbos",
            "tweet_id": "1494724469478375428",
            "tweet_text": "In #Python it's considered bad practice to use \"from module import *\" to import everything into the current namespace, don't do this \ud83d\ude4f\n\nHowever as a library developer there is a way to guard against this \ud83d\udca1 \n\nHow? Using the __all__ dunder: https://t.co/B95mqwj0XU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FL5T5lJXsAAGRiI.jpg\"]",
            "tweet_conversation_id": "1494724469478375428",
            "tweet_type": "Python tips",
            "created_at": "2022-02-18T17:24:18.000Z"
        },
        {
            "id": 3935,
            "username": "bbelderbos",
            "tweet_id": "1494684948783144966",
            "tweet_text": "Thanks for sharing Blaise and awesome work there Jeff! https://t.co/ykN3zKcwze",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494684948783144966",
            "tweet_type": "Others",
            "created_at": "2022-02-18T14:47:16.000Z"
        },
        {
            "id": 3936,
            "username": "bbelderbos",
            "tweet_id": "1494591989739892772",
            "tweet_text": "When I am scraping a website or toying around with an API I might make excessive calls to get my code right. \n\nHere's where requests_cache is a great dev tool: it caches repeated request calls! \n\npip install ... beautiful abstraction :)\n\n#Python #tips \n \nhttps://t.co/S21hP0SAex https://t.co/tOxpOcDmyx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FL3bIMVXMCs6une.jpg\"]",
            "tweet_conversation_id": "1494591989739892772",
            "tweet_type": "Python tips",
            "created_at": "2022-02-18T08:37:53.000Z"
        },
        {
            "id": 3937,
            "username": "bbelderbos",
            "tweet_id": "1494383134951026697",
            "tweet_text": "[Newbie Bites] #10. Returning items by list index https://t.co/7A1XCBlgfR - thanks @RHelmstedter for keeping up these cool screencasts and your tip about #Python Tutor: https://t.co/vdEPdHOxUF",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1494382623413747712/pu/vid/640x360/073Y1WZjuZQZDHck.mp4?tag=12\"]",
            "tweet_conversation_id": "1494383134951026697",
            "tweet_type": "Python tips",
            "created_at": "2022-02-17T18:47:58.000Z"
        },
        {
            "id": 3938,
            "username": "bbelderbos",
            "tweet_id": "1494375106822426625",
            "tweet_text": "#Python's print() built-in function is more powerful than you might think :) https://t.co/sa6ACM9SB2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FL0WMfAX0AML3dd.jpg\"]",
            "tweet_conversation_id": "1494375106822426625",
            "tweet_type": "Python tips",
            "created_at": "2022-02-17T18:16:04.000Z"
        },
        {
            "id": 3939,
            "username": "bbelderbos",
            "tweet_id": "1494233737114144774",
            "tweet_text": "Curious: do you use assert statements in your #Python (non test) code?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1494233737114144774",
            "tweet_type": "Python tips",
            "created_at": "2022-02-17T08:54:19.000Z"
        },
        {
            "id": 3940,
            "username": "bbelderbos",
            "tweet_id": "1493894148243529730",
            "tweet_text": "thanks @brettsky",
            "tweet_media": "[]",
            "tweet_conversation_id": "1493882471678717952",
            "tweet_type": "Others",
            "created_at": "2022-02-16T10:24:54.000Z"
        },
        {
            "id": 3941,
            "username": "bbelderbos",
            "tweet_id": "1493882471678717952",
            "tweet_text": "I reference this article quite a bit lately:\n\nIdiomatic Python: EAFP versus LBYL\nhttps://t.co/OAUldgMFgi\n\nI like and embrace the \"It\u2019s easier to ask for forgiveness than permission\" approach in #Python code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1493882471678717952",
            "tweet_type": "Python tips",
            "created_at": "2022-02-16T09:38:30.000Z"
        },
        {
            "id": 3942,
            "username": "bbelderbos",
            "tweet_id": "1493850304957272068",
            "tweet_text": "When I can avoid typing out boring constant ranges I will. \n\nSo the #Python string module is really useful at times: https://t.co/QcsBT1CPiR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FLs44lrXEAEY753.jpg\"]",
            "tweet_conversation_id": "1493850304957272068",
            "tweet_type": "Python tips",
            "created_at": "2022-02-16T07:30:41.000Z"
        },
        {
            "id": 3943,
            "username": "bbelderbos",
            "tweet_id": "1493526761195417602",
            "tweet_text": "Remember #Python sets and dicts use a hash table internally which makes them very fast - algorithmic complexity of O(1) - for lookups (e.g. using the \"in\" operator).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1493526761195417602",
            "tweet_type": "Python tips",
            "created_at": "2022-02-15T10:05:02.000Z"
        },
        {
            "id": 3944,
            "username": "bbelderbos",
            "tweet_id": "1493507867478937600",
            "tweet_text": "Do you want a #pytest fixture to run automatically (so without calling it) for multiple tests? \n\n@pytest.fixture has an autouse=True switch for this:\n\nhttps://t.co/V8plyW59QJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1493507867478937600",
            "tweet_type": "Others",
            "created_at": "2022-02-15T08:49:58.000Z"
        },
        {
            "id": 3945,
            "username": "bbelderbos",
            "tweet_id": "1493187910711062528",
            "tweet_text": "So much good stuff in #Python's itertools module. \nNeed a sequence? You can use count(): https://t.co/OHijhFXKOn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FLjedZJXIAAXNaS.jpg\"]",
            "tweet_conversation_id": "1493187910711062528",
            "tweet_type": "Python tips",
            "created_at": "2022-02-14T11:38:34.000Z"
        },
        {
            "id": 3946,
            "username": "bbelderbos",
            "tweet_id": "1492096874328768514",
            "tweet_text": "You can use the ipaddress or socket module to validate IP addresses in #Python: https://t.co/bCMzRq9bTi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FLT-KnlWUAIOMyu.jpg\"]",
            "tweet_conversation_id": "1492096874328768514",
            "tweet_type": "Python tips",
            "created_at": "2022-02-11T11:23:11.000Z"
        },
        {
            "id": 3947,
            "username": "bbelderbos",
            "tweet_id": "1491475566318477313",
            "tweet_text": "Super cool package: https://t.co/XxbQ3isCGl\n\n#python #nba #data",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491475566318477313",
            "tweet_type": "Python tips",
            "created_at": "2022-02-09T18:14:19.000Z"
        },
        {
            "id": 3948,
            "username": "bbelderbos",
            "tweet_id": "1491434673024937984",
            "tweet_text": "What is your favorite #programming #book? Here are some of mine: https://t.co/NMs3K7VfHQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491434673024937984",
            "tweet_type": "Others",
            "created_at": "2022-02-09T15:31:50.000Z"
        },
        {
            "id": 3949,
            "username": "bbelderbos",
            "tweet_id": "1491356945965813764",
            "tweet_text": "Handy shortcut when you want to inspect JSON output:\n\n$ cat output_file.json | jq . | vi -",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491356945965813764",
            "tweet_type": "Others",
            "created_at": "2022-02-09T10:22:58.000Z"
        },
        {
            "id": 3950,
            "username": "bbelderbos",
            "tweet_id": "1491336052287881216",
            "tweet_text": "Do you want to see what SQL #Django ORM runs? \n\n- pip install django-extensions\n- add it to INSTALLED_APPS\n- run: python https://t.co/Hz6HXKnbmF shell_plus --print-sql\n\nReally cool! \n\nOf course you can also use Django Debug Toolbar but I used the shell for teaching yesterday.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1491336052287881216",
            "tweet_type": "Others",
            "created_at": "2022-02-09T08:59:57.000Z"
        },
        {
            "id": 3951,
            "username": "bbelderbos",
            "tweet_id": "1490969574581227521",
            "tweet_text": "Quick test debugging tip: \"pytest --pdb\" will invoke the #Python debugger on every test failure (or KeyboardInterrupt).\nhttps://t.co/TvEpeEZ2JJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490969574581227521",
            "tweet_type": "Python tips",
            "created_at": "2022-02-08T08:43:42.000Z"
        },
        {
            "id": 3952,
            "username": "bbelderbos",
            "tweet_id": "1490953133320994816",
            "tweet_text": "Do you agree?\n\n&gt; Local variables used in conventional ways can have very short names \u2026 Programmers are often encouraged to use long variable names regardless of context. That is a mistake: clarity is often achieve through brevity.\n\nThe Practice of #Programming (Kernighan / Pike)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490953133320994816",
            "tweet_type": "Others",
            "created_at": "2022-02-08T07:38:22.000Z"
        },
        {
            "id": 3953,
            "username": "bbelderbos",
            "tweet_id": "1490780431075221513",
            "tweet_text": "Similarly to the if __name__ == \"__main__\": entry point for a script, you can create an entry point to your package by adding a __main__.py module to it.\n\nThis makes the package callable using: python -m my_package\n\n#python #tips https://t.co/WMuMtJEirE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FLBQrDgXsAMRMo-.jpg\"]",
            "tweet_conversation_id": "1490780431075221513",
            "tweet_type": "Python tips",
            "created_at": "2022-02-07T20:12:06.000Z"
        },
        {
            "id": 3954,
            "username": "bbelderbos",
            "tweet_id": "1490729649780973571",
            "tweet_text": "Nice coverage today of concatenating different types of objects: https://t.co/iCw4S4tLzc",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1490729493861998602/pu/vid/640x360/3gNAyZO5R7BYnevz.mp4?tag=12\"]",
            "tweet_conversation_id": "1490704344592916480",
            "tweet_type": "Others",
            "created_at": "2022-02-07T16:50:19.000Z"
        },
        {
            "id": 3955,
            "username": "bbelderbos",
            "tweet_id": "1490729099341578242",
            "tweet_text": "#Python dir() is so useful! https://t.co/kNgNatcNR2",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1490729051165708297/pu/vid/640x360/NgU1s1kl6OXuL-38.mp4?tag=12\"]",
            "tweet_conversation_id": "1490704344592916480",
            "tweet_type": "Python tips",
            "created_at": "2022-02-07T16:48:08.000Z"
        },
        {
            "id": 3956,
            "username": "bbelderbos",
            "tweet_id": "1490704344592916480",
            "tweet_text": "More Bite screencasts! https://t.co/O4TlHKZnIH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490704344592916480",
            "tweet_type": "Others",
            "created_at": "2022-02-07T15:09:46.000Z"
        },
        {
            "id": 3957,
            "username": "bbelderbos",
            "tweet_id": "1490649470840807426",
            "tweet_text": "Always nice to start the week with some #Mindset, today's PyBites tip:\n \nWatch the language you use! \n\nWhat you tell yourself matters. It's up to you to believe in yourself more than anyone else. \n\nWhen we believe in ourselves, anything is possible.\n\nhttps://t.co/3IHSqPwqIB https://t.co/i703y6JpB3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FK_ZkekX0AQjYbT.jpg\"]",
            "tweet_conversation_id": "1490649470840807426",
            "tweet_type": "Others",
            "created_at": "2022-02-07T11:31:43.000Z"
        },
        {
            "id": 3958,
            "username": "bbelderbos",
            "tweet_id": "1490607299752247296",
            "tweet_text": "Btw how shall we call \"*\" here? \n\nThe \"splat\" operator? \n\nOr a more explicit (better than implicit!) \"unpacking argument list\"? \n\nhttps://t.co/KvBS7SynIs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1490607297554485250",
            "tweet_type": "Others",
            "created_at": "2022-02-07T08:44:09.000Z"
        },
        {
            "id": 3959,
            "username": "bbelderbos",
            "tweet_id": "1490607297554485250",
            "tweet_text": "I love #Python's tuple unpacking!\n\n(btw \"_\" is a convention to indicate a throw away variable) https://t.co/CizIRFpB5G",
            "tweet_media": "[\"https://pbs.twimg.com/media/FK-ySvsXIAEZHtM.jpg\"]",
            "tweet_conversation_id": "1490607297554485250",
            "tweet_type": "Python tips",
            "created_at": "2022-02-07T08:44:08.000Z"
        },
        {
            "id": 3960,
            "username": "bbelderbos",
            "tweet_id": "1489545529197568001",
            "tweet_text": "Some cool exercises to make decorators stick:\nhttps://t.co/GKDaqWZyuD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489545518099357696",
            "tweet_type": "Others",
            "created_at": "2022-02-04T10:25:03.000Z"
        },
        {
            "id": 3961,
            "username": "bbelderbos",
            "tweet_id": "1489545527213625344",
            "tweet_text": "A more complex use case: a decorator with optional args:\nhttps://t.co/eZ99CQ9bEL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489545518099357696",
            "tweet_type": "Others",
            "created_at": "2022-02-04T10:25:02.000Z"
        },
        {
            "id": 3962,
            "username": "bbelderbos",
            "tweet_id": "1489545525208756225",
            "tweet_text": "Some practical use cases of decorators:\nhttps://t.co/JFyhIVnP83",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489545518099357696",
            "tweet_type": "Others",
            "created_at": "2022-02-04T10:25:02.000Z"
        },
        {
            "id": 3963,
            "username": "bbelderbos",
            "tweet_id": "1489545522868367362",
            "tweet_text": "The importance of using functools.wraps:\nhttps://t.co/aQROtCGFPp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489545518099357696",
            "tweet_type": "Others",
            "created_at": "2022-02-04T10:25:01.000Z"
        },
        {
            "id": 3964,
            "username": "bbelderbos",
            "tweet_id": "1489545520565690370",
            "tweet_text": "Another definition:\n\n&gt; Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.\n\nhttps://t.co/TEPxET9VdT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489545518099357696",
            "tweet_type": "Others",
            "created_at": "2022-02-04T10:25:01.000Z"
        },
        {
            "id": 3965,
            "username": "bbelderbos",
            "tweet_id": "1489545518099357696",
            "tweet_text": "\ud83d\udc0d#Python decorator example \ud83d\udc47\n\n\ud83d\udca1 Decorators allow you to add new behavior to an existing object (function, class) without changing it.\n\n\ud83d\ude80 This usually leads to more DRY (don't repeat yourself) code.\n \n\u2753What was your last decorator you wrote or used? https://t.co/CvGgYSSJk4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FKvqG6GXMAIyNqE.jpg\"]",
            "tweet_conversation_id": "1489545518099357696",
            "tweet_type": "Python tips",
            "created_at": "2022-02-04T10:25:00.000Z"
        },
        {
            "id": 3966,
            "username": "bbelderbos",
            "tweet_id": "1489521604308705283",
            "tweet_text": "\ud83d\udc4b and \ud83d\ude4f for the follow recently! \n\nI am a \ud83d\udc0d #Python nut and love mentoring people to crush it as software #developers \ud83e\udd77\n\nI also \u2764\ufe0f fitness, books and business \ud83d\ude80\n\nWhat about you, what do you do for a living / what drives you? \ud83d\udca1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489521604308705283",
            "tweet_type": "Python tips",
            "created_at": "2022-02-04T08:49:59.000Z"
        },
        {
            "id": 3967,
            "username": "bbelderbos",
            "tweet_id": "1489171961796300806",
            "tweet_text": "\u2764\ufe0f \ud83d\udc0d dictionaries!\n\n#Python #tips https://t.co/JDOWlG43xx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FKqZ6SsXEAMNVLb.jpg\"]",
            "tweet_conversation_id": "1489171961796300806",
            "tweet_type": "Python tips",
            "created_at": "2022-02-03T09:40:37.000Z"
        },
        {
            "id": 3968,
            "username": "bbelderbos",
            "tweet_id": "1489167991740813312",
            "tweet_text": "https://t.co/I8jkSUoZFR or pyproject.toml? Pretty obvious question for me, but I wonder if people still use the former for any reason? #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489167991740813312",
            "tweet_type": "Python tips",
            "created_at": "2022-02-03T09:24:51.000Z"
        },
        {
            "id": 3969,
            "username": "bbelderbos",
            "tweet_id": "1489167743085649928",
            "tweet_text": "I love Cal Newport's work so I was delighted to see the latest @tferriss podcast pop up in my podcast feed this morning:\n\nhttps://t.co/FeEsQio5NB \n\n#productivity #studyhacks #books",
            "tweet_media": "[]",
            "tweet_conversation_id": "1489167743085649928",
            "tweet_type": "Others",
            "created_at": "2022-02-03T09:23:52.000Z"
        },
        {
            "id": 3970,
            "username": "bbelderbos",
            "tweet_id": "1488920250871689222",
            "tweet_text": "Oops I forgot to link a training I did a while ago:\n\nHow to build a simple #Slack bot using the Bolt framework for #Python - https://t.co/Cfd2pGku4J",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488806429251313666",
            "tweet_type": "Python tips",
            "created_at": "2022-02-02T17:00:25.000Z"
        },
        {
            "id": 3971,
            "username": "bbelderbos",
            "tweet_id": "1488813727411486722",
            "tweet_text": "The Blue \ud83e\udd77 knows how to solve problems fast and elegantly! https://t.co/s6SixIEzsw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FKlT_pnXoAQO8pm.jpg\"]",
            "tweet_conversation_id": "1488806630972084239",
            "tweet_type": "Others",
            "created_at": "2022-02-02T09:57:08.000Z"
        },
        {
            "id": 3972,
            "username": "bbelderbos",
            "tweet_id": "1488810564554039298",
            "tweet_text": "I do realize this example is a bit contrived because black makes this one line which is better! \n\nIt also more clearly shows the issue after running it:\n\nnames = (\"Ana\", \"Joyce\" \"Tim\", \"Beau\")\n\nRunning flake8 / black overall is super valuable.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488810556857454592",
            "tweet_type": "Others",
            "created_at": "2022-02-02T09:44:34.000Z"
        },
        {
            "id": 3973,
            "username": "bbelderbos",
            "tweet_id": "1488810562498793473",
            "tweet_text": "Flake8 does not give a warning because it's syntactically correct. \n\nIf these were integers you'd get a SyntaxError with a nice error message:\n\nSyntaxError: invalid syntax. Perhaps you forgot a comma?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488810556857454592",
            "tweet_type": "Others",
            "created_at": "2022-02-02T09:44:33.000Z"
        },
        {
            "id": 3974,
            "username": "bbelderbos",
            "tweet_id": "1488810559575367680",
            "tweet_text": "Ah right, \"Joyce\" and \"Tim\" are silently concatenated.\n\nSo just be mindful of that, check for missing trailing commas when using multiline data structures.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488810556857454592",
            "tweet_type": "Others",
            "created_at": "2022-02-02T09:44:32.000Z"
        },
        {
            "id": 3975,
            "username": "bbelderbos",
            "tweet_id": "1488810556857454592",
            "tweet_text": "What's wrong with this picture? \n\n(Answer in your head, then look at the mini thread) https://t.co/Y5WMgc5n9g",
            "tweet_media": "[\"https://pbs.twimg.com/media/FKlQLsoXMAIK4GU.png\"]",
            "tweet_conversation_id": "1488810556857454592",
            "tweet_type": "Others",
            "created_at": "2022-02-02T09:44:32.000Z"
        },
        {
            "id": 3976,
            "username": "bbelderbos",
            "tweet_id": "1488806630972084239",
            "tweet_text": "Another @PyBites Ninja, proud about your awesome achievement @datwatikmaak https://t.co/L0FrOqrmdD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488806630972084239",
            "tweet_type": "Others",
            "created_at": "2022-02-02T09:28:56.000Z"
        },
        {
            "id": 3977,
            "username": "bbelderbos",
            "tweet_id": "1488806429251313666",
            "tweet_text": "If you were to build a Slack bot, what would it do?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488806429251313666",
            "tweet_type": "Others",
            "created_at": "2022-02-02T09:28:08.000Z"
        },
        {
            "id": 3978,
            "username": "bbelderbos",
            "tweet_id": "1488453321186811906",
            "tweet_text": "#Python #tips",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488453202924253187",
            "tweet_type": "Python tips",
            "created_at": "2022-02-01T10:05:00.000Z"
        },
        {
            "id": 3979,
            "username": "bbelderbos",
            "tweet_id": "1488453202924253187",
            "tweet_text": "You can suppress exceptions with the contextlib.suppress context manager:\n\nhttps://t.co/SXeGGAjOmu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488453202924253187",
            "tweet_type": "Others",
            "created_at": "2022-02-01T10:04:32.000Z"
        },
        {
            "id": 3980,
            "username": "bbelderbos",
            "tweet_id": "1488410394729275396",
            "tweet_text": "#Python help() + dir(), I use them often!\nhttps://t.co/HJKjq0lHxv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488410394729275396",
            "tweet_type": "Python tips",
            "created_at": "2022-02-01T07:14:26.000Z"
        },
        {
            "id": 3981,
            "username": "bbelderbos",
            "tweet_id": "1488129725004398592",
            "tweet_text": "A new week, new chances! \ud83d\udcaa\n\nWhat are you using #Python for this week? \ud83d\udc0d\ud83e\udd77",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488129725004398592",
            "tweet_type": "Python tips",
            "created_at": "2022-01-31T12:39:09.000Z"
        },
        {
            "id": 3982,
            "username": "bbelderbos",
            "tweet_id": "1488069318772461569",
            "tweet_text": "A Thousand Brains and The Code Breaker are on my to-read #books list too https://t.co/zpRElQJbb7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1488069318772461569",
            "tweet_type": "Others",
            "created_at": "2022-01-31T08:39:07.000Z"
        },
        {
            "id": 3983,
            "username": "bbelderbos",
            "tweet_id": "1487128944985976836",
            "tweet_text": "Clipping made with @ironscribeio",
            "tweet_media": "[]",
            "tweet_conversation_id": "1487128897158369280",
            "tweet_type": "Others",
            "created_at": "2022-01-28T18:22:24.000Z"
        },
        {
            "id": 3984,
            "username": "bbelderbos",
            "tweet_id": "1487128897158369280",
            "tweet_text": "Love how you're teaching us the very basics of #Python @RHelmstedter!\n\nFull video:\nhttps://t.co/yFkfxO30S9 https://t.co/bg1z4Qs3E1",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1487128778543407108/pu/vid/640x360/fX7ZyXqKcmILQUr7.mp4?tag=12\"]",
            "tweet_conversation_id": "1487128897158369280",
            "tweet_type": "Python tips",
            "created_at": "2022-01-28T18:22:13.000Z"
        },
        {
            "id": 3985,
            "username": "bbelderbos",
            "tweet_id": "1487057116196134921",
            "tweet_text": "A case of \"Beautiful is better than ugly\"?\n\n#Python #zen https://t.co/uPJ9LUvqoL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FKMWXpnXoAQ5jxT.jpg\"]",
            "tweet_conversation_id": "1487057116196134921",
            "tweet_type": "Python tips",
            "created_at": "2022-01-28T13:36:59.000Z"
        },
        {
            "id": 3986,
            "username": "bbelderbos",
            "tweet_id": "1486704564481015812",
            "tweet_text": "#Python has a basic data type called set with a very useful feature: it does not hold duplicate elements. https://t.co/8Awq6TlUa4",
            "tweet_media": "[\"https://pbs.twimg.com/media/FKHVsrFXEAg5dTw.jpg\"]",
            "tweet_conversation_id": "1486704564481015812",
            "tweet_type": "Python tips",
            "created_at": "2022-01-27T14:16:04.000Z"
        },
        {
            "id": 3987,
            "username": "bbelderbos",
            "tweet_id": "1486640283647459328",
            "tweet_text": "\"--prompt .\" would use your current directory as name",
            "tweet_media": "[]",
            "tweet_conversation_id": "1486640038779703296",
            "tweet_type": "Others",
            "created_at": "2022-01-27T10:00:38.000Z"
        },
        {
            "id": 3988,
            "username": "bbelderbos",
            "tweet_id": "1486640038779703296",
            "tweet_text": "Tired of #Python venv's standard (venv) prompt? You can use --prompt to name it something different: https://t.co/2zClARYee2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FKGY3TfXMAEFMLl.jpg\"]",
            "tweet_conversation_id": "1486640038779703296",
            "tweet_type": "Python tips",
            "created_at": "2022-01-27T09:59:40.000Z"
        },
        {
            "id": 3989,
            "username": "bascodes",
            "tweet_id": "1562440475415842816",
            "tweet_text": "Here is yesterday's tweet about \ud835\ude72\ud835\ude91\ud835\ude8a\ud835\ude92\ud835\ude97\ud835\ude7c\ud835\ude8a\ud835\ude99s:\n\nhttps://t.co/TmDTWEoI37",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562440472886640643",
            "tweet_type": "Others",
            "created_at": "2022-08-24T14:03:32.000Z"
        },
        {
            "id": 3990,
            "username": "bascodes",
            "tweet_id": "1562440472886640643",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d I didn't expect my last tweet about Python \ud835\ude72\ud835\ude91\ud835\ude8a\ud835\ude92\ud835\ude97\ud835\ude7c\ud835\ude8a\ud835\ude99s to be so popular.\n\nSo, maybe you also like another mapping utility for \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9ds in Python's standard library:\n\nA \ud835\ude7c\ud835\ude8a\ud835\ude99\ud835\ude99\ud835\ude92\ud835\ude97\ud835\ude90\ud835\ude7f\ud835\ude9b\ud835\ude98\ud835\udea1\ud835\udea2\ud835\ude83\ud835\udea2\ud835\ude99\ud835\ude8e can make \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9ds read-only \ud83d\udc47\n\n#tweet100 #pythontip https://t.co/ldlaAzA6Rp",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa7my5UX0AArbvy.jpg\"]",
            "tweet_conversation_id": "1562440472886640643",
            "tweet_type": "Python tips",
            "created_at": "2022-08-24T14:03:32.000Z"
        },
        {
            "id": 3991,
            "username": "bascodes",
            "tweet_id": "1562027655255449600",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Python is a popular language for connecting different data sources. \n\nUse a \ud835\ude72\ud835\ude91\ud835\ude8a\ud835\ude92\ud835\ude97\ud835\ude7c\ud835\ude8a\ud835\ude99 to get a singular value from a collection of different \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9ds:\n\n#tweet100 #pythontip https://t.co/nK3Tmm1g1f",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa1vx1SXwAIzzZT.jpg\"]",
            "tweet_conversation_id": "1562027655255449600",
            "tweet_type": "Python tips",
            "created_at": "2022-08-23T10:43:08.000Z"
        },
        {
            "id": 3992,
            "username": "bascodes",
            "tweet_id": "1561725066282508299",
            "tweet_text": "The __\ud835\ude9b\ud835\ude8e\ud835\ude99\ud835\ude9b__ method's goal is to be unambiguous. It is intended for developers and should make it crystal clear which is the object in question.  Therefore, the REPL, for example, displays the __\ud835\ude9b\ud835\ude8e\ud835\ude99\ud835\ude9b__ method's return value. https://t.co/F6sL5zOxEy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaxbjgAWYAE1Lnk.png\"]",
            "tweet_conversation_id": "1561725062704730114",
            "tweet_type": "Others",
            "created_at": "2022-08-22T14:40:45.000Z"
        },
        {
            "id": 3993,
            "username": "bascodes",
            "tweet_id": "1561725064554455045",
            "tweet_text": "The __\ud835\ude9c\ud835\ude9d\ud835\ude9b__ representation is intended for \"end users\": It should be readable. Inside a string format, for example, it should say what this object is about. https://t.co/Cy8piC6xSo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaxboW-XEAI4P7S.png\"]",
            "tweet_conversation_id": "1561725062704730114",
            "tweet_type": "Others",
            "created_at": "2022-08-22T14:40:45.000Z"
        },
        {
            "id": 3994,
            "username": "bascodes",
            "tweet_id": "1561725062704730114",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Most objects in Python can be printed. They must be representable as a string to do so.\n\nWe can customize this representation using __\ud835\ude9c\ud835\ude9d\ud835\ude9b__ and __\ud835\ude9b\ud835\ude8e\ud835\ude99\ud835\ude9b__ methods in our classes.\n\nWhat's the difference? \ud83d\udc47\n#tweet100 https://t.co/miKjsbUxo4",
            "tweet_media": "[\"https://pbs.twimg.com/media/Faxa77jX0AMCAZd.jpg\"]",
            "tweet_conversation_id": "1561725062704730114",
            "tweet_type": "Python tips",
            "created_at": "2022-08-22T14:40:45.000Z"
        },
        {
            "id": 3995,
            "username": "bascodes",
            "tweet_id": "1561302681351868418",
            "tweet_text": "Do you attend regular meetings, or are you a member of a club outside the tech space?\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561302681351868418",
            "tweet_type": "Others",
            "created_at": "2022-08-21T10:42:21.000Z"
        },
        {
            "id": 3996,
            "username": "bascodes",
            "tweet_id": "1560903636712099842",
            "tweet_text": "What are your plans for weekend?\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560903636712099842",
            "tweet_type": "Others",
            "created_at": "2022-08-20T08:16:41.000Z"
        },
        {
            "id": 3997,
            "username": "bascodes",
            "tweet_id": "1560565955742367744",
            "tweet_text": "@nickjanetakis Follow me @bascodes for more awesome Python content!\n\n#tweet100\n\nhttps://t.co/DI0LBasDop",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:54:52.000Z"
        },
        {
            "id": 3998,
            "username": "bascodes",
            "tweet_id": "1560565597674651648",
            "tweet_text": "docker-django-example \u2013 A production ready example Django app that's using Docker and Docker Compose \u2013 by @nickjanetakis\nhttps://t.co/JB3cAH9aFM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:27.000Z"
        },
        {
            "id": 3999,
            "username": "bascodes",
            "tweet_id": "1560565594105298944",
            "tweet_text": "erg \u2013 A Python-compatible statically typed language\nhttps://t.co/ubwsVs8qQU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:26.000Z"
        },
        {
            "id": 4000,
            "username": "bascodes",
            "tweet_id": "1560565590552727552",
            "tweet_text": "libtmux \u2013 Python API / wrapper for tmux \nhttps://t.co/UMQGXQI6sD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:25.000Z"
        },
        {
            "id": 4001,
            "username": "bascodes",
            "tweet_id": "1560565587121782786",
            "tweet_text": "dg \u2013 A programming language for the CPython VM\nhttps://t.co/iUqMPWbZQ2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:24.000Z"
        },
        {
            "id": 4002,
            "username": "bascodes",
            "tweet_id": "1560565583757934592",
            "tweet_text": "pyxel \u2013 A retro game engine for Python \u2013 by @kitao\nhttps://t.co/88Fsgw16Vo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:23.000Z"
        },
        {
            "id": 4003,
            "username": "bascodes",
            "tweet_id": "1560565580553457664",
            "tweet_text": "Slack Consolidate: a slackbot built with Python and Supabase \u2013 by @rmansueli\nhttps://t.co/VxGQ2QM2YB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:22.000Z"
        },
        {
            "id": 4004,
            "username": "bascodes",
            "tweet_id": "1560565577428729857",
            "tweet_text": "How To Add A Text Editor To A Django Blog With Summernote \u2013 by @aliceridgway404\nhttps://t.co/IwYFiGtyjt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:22.000Z"
        },
        {
            "id": 4005,
            "username": "bascodes",
            "tweet_id": "1560565574257754114",
            "tweet_text": "Data Visualization in Python \u2013 by @jsulopzs\nhttps://t.co/jNwlvgFlt3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:21.000Z"
        },
        {
            "id": 4006,
            "username": "bascodes",
            "tweet_id": "1560565571225280512",
            "tweet_text": "Traps for the Unwary in Python\u2019s Import System \u2013 by @ncoghlan_dev\nhttps://t.co/msBiQjFjd2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:20.000Z"
        },
        {
            "id": 4007,
            "username": "bascodes",
            "tweet_id": "1560565568410996742",
            "tweet_text": "Please do not use Python for tooling \u2013 by @borud\nhttps://t.co/YQ7DIuMjED",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:20.000Z"
        },
        {
            "id": 4008,
            "username": "bascodes",
            "tweet_id": "1560565565634363392",
            "tweet_text": "+++\nYou can follow my blog for this weekly #Python collection!\n+++\nhttps://t.co/L1SyFuvujU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:19.000Z"
        },
        {
            "id": 4009,
            "username": "bascodes",
            "tweet_id": "1560565562798968833",
            "tweet_text": "\ud83d\udc4b\ud83d\udc0d Here is my Friday's list of articles and projects I found #ThisWeekInPython \ud83d\udc47\n\nEnjoy your weekend! Oh, and remember to not deploy on Fridays!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560565562798968833",
            "tweet_type": "Others",
            "created_at": "2022-08-19T09:53:18.000Z"
        },
        {
            "id": 4010,
            "username": "bascodes",
            "tweet_id": "1560296658692456452",
            "tweet_text": "Why is your team the best one?\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560296658692456452",
            "tweet_type": "Others",
            "created_at": "2022-08-18T16:04:46.000Z"
        },
        {
            "id": 4011,
            "username": "bascodes",
            "tweet_id": "1559866744235143173",
            "tweet_text": "Now, let's create a new list, \ud835\ude8c, equal to \ud835\ude8a (and \ud835\ude8b).\n\nNow, \ud835\ude8a and \ud835\ude8b are both equal and identical.\n\nBut \ud835\ude8a and \ud835\ude8c are equal, but not identical.\n\nChanges in \ud835\ude8a do not change \ud835\ude8c https://t.co/6sIoZNjWa0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaXCV1HUsAImwz2.jpg\"]",
            "tweet_conversation_id": "1559866735578083328",
            "tweet_type": "Others",
            "created_at": "2022-08-17T11:36:27.000Z"
        },
        {
            "id": 4012,
            "username": "bascodes",
            "tweet_id": "1559866742100226048",
            "tweet_text": "However, since they are pointing to the same list, they are not only equal but identical.\n\nChanges in \ud835\ude8a are reflected in \ud835\ude8b: https://t.co/oNC4zJbBhw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaXCOLNUYAA5THK.jpg\"]",
            "tweet_conversation_id": "1559866735578083328",
            "tweet_type": "Others",
            "created_at": "2022-08-17T11:36:26.000Z"
        },
        {
            "id": 4013,
            "username": "bascodes",
            "tweet_id": "1559866738786705408",
            "tweet_text": "Let's look at our lists, \ud835\ude8a and \ud835\ude8b \u2013\n\nThey contain the same elements. We could say they are equal. https://t.co/tBpRLoY9ev",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaXCHNlVEAAPqv2.png\"]",
            "tweet_conversation_id": "1559866735578083328",
            "tweet_type": "Others",
            "created_at": "2022-08-17T11:36:26.000Z"
        },
        {
            "id": 4014,
            "username": "bascodes",
            "tweet_id": "1559866735578083328",
            "tweet_text": "\ud83d\udca1\ud83d\udc0dThe difference between equality in #Python:\n\nLet's have a look at the \ud835\ude92\ud835\ude9c and == operators\n\n\ud83d\udc47\n#tweet100 https://t.co/GX8ofUYRZu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaXCEfeUcAATyeU.png\"]",
            "tweet_conversation_id": "1559866735578083328",
            "tweet_type": "Python tips",
            "created_at": "2022-08-17T11:36:25.000Z"
        },
        {
            "id": 4015,
            "username": "bascodes",
            "tweet_id": "1559475206669885442",
            "tweet_text": "A deque is a double-ended queue. It means that you can append and pop items to/from both ends of this data structure:\nappendleft() / append()\npopleft() / pop()\n\nIt can be significantly faster than a list if you append items from the left side: https://t.co/u0yHsaVmuD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaReJesX0AEkYSY.jpg\"]",
            "tweet_conversation_id": "1559475205029904385",
            "tweet_type": "Others",
            "created_at": "2022-08-16T09:40:37.000Z"
        },
        {
            "id": 4016,
            "username": "bascodes",
            "tweet_id": "1559475205029904385",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d A list is a basic data type in Python.\n\nBut what is a deque?\n\nLet's find out! \ud83d\udc47\n\n#pythontip #tweet100 https://t.co/js7ka7Eyfu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaRcRWAWAAEcc4i.jpg\"]",
            "tweet_conversation_id": "1559475205029904385",
            "tweet_type": "Python tips",
            "created_at": "2022-08-16T09:40:37.000Z"
        },
        {
            "id": 4017,
            "username": "bascodes",
            "tweet_id": "1559189166407135232",
            "tweet_text": "What are you working on this week?\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559189166407135232",
            "tweet_type": "Others",
            "created_at": "2022-08-15T14:44:00.000Z"
        },
        {
            "id": 4018,
            "username": "bascodes",
            "tweet_id": "1559158552442331136",
            "tweet_text": "At least, not all of it!\nSure, some of these things will help accelerate your career.\n\nIt's about picking the things that work for YOU.\n\nIt's not about being perfect. It's about finding the balance!\n\nYou will get hired as a human team player after all!\n\n#twet100 #fitdevs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559158550143934466",
            "tweet_type": "Others",
            "created_at": "2022-08-15T12:42:21.000Z"
        },
        {
            "id": 4019,
            "username": "bascodes",
            "tweet_id": "1559158550143934466",
            "tweet_text": "\ud83d\udca1\u26a0\ufe0f To succeed in tech, you DON'T need\n\n\ud83d\udeab a CS degree\n\ud83d\udeab to contribute to Open Source\n\ud83d\udeab to learn a tech stack each week\n\ud83d\udeab to have a side project\n\ud83d\udeab 10k followers on LinkedIn\n\ud83d\udeab to work overtime\n\ud83d\udeab a triple monitor MacBook setup\n\ud83d\udeab to be in \"The Zone\" the entire day\n\n#100Devs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559158550143934466",
            "tweet_type": "Others",
            "created_at": "2022-08-15T12:42:20.000Z"
        },
        {
            "id": 4020,
            "username": "bascodes",
            "tweet_id": "1558745829090934786",
            "tweet_text": "MIT 6.S191 \u2013 Introduction to Deep Learning\n\nhttps://t.co/Cf84UjnSNm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558745822417735680",
            "tweet_type": "Others",
            "created_at": "2022-08-14T09:22:20.000Z"
        },
        {
            "id": 4021,
            "username": "bascodes",
            "tweet_id": "1558745827539042304",
            "tweet_text": "Machine Learning Crash Course\n\nhttps://t.co/xk5tdD5oPZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558745822417735680",
            "tweet_type": "Others",
            "created_at": "2022-08-14T09:22:20.000Z"
        },
        {
            "id": 4022,
            "username": "bascodes",
            "tweet_id": "1558745825890664450",
            "tweet_text": "Elements of AI \u2013 A free course made by the University of Helsinki to demystify the basics of Artificial Intelligence for Beginners\n\nhttps://t.co/eTI6xpVB3M",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558745822417735680",
            "tweet_type": "Others",
            "created_at": "2022-08-14T09:22:19.000Z"
        },
        {
            "id": 4023,
            "username": "bascodes",
            "tweet_id": "1558745824343064576",
            "tweet_text": "For the full list, refer to my blog post:\n\n#tweet100\n\nhttps://t.co/x0Hshmt7dN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558745822417735680",
            "tweet_type": "Others",
            "created_at": "2022-08-14T09:22:19.000Z"
        },
        {
            "id": 4024,
            "username": "bascodes",
            "tweet_id": "1558745822417735680",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Inspired by a \u2615\ufe0f coffee chat, I compiled a list of resources to get started in #DataScience with #Python.\n\nHere are some highlights: \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558745822417735680",
            "tweet_type": "Python tips",
            "created_at": "2022-08-14T09:22:18.000Z"
        },
        {
            "id": 4025,
            "username": "bascodes",
            "tweet_id": "1558389262940311552",
            "tweet_text": "https://t.co/uzO1lBhE17",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558389260906020869",
            "tweet_type": "Others",
            "created_at": "2022-08-13T09:45:28.000Z"
        },
        {
            "id": 4026,
            "username": "bascodes",
            "tweet_id": "1558389260906020869",
            "tweet_text": "According to TIOBE, #Python has a smarter share of over 15% \n\nI know the index is controversial, but it\u2019s still good news!\n\n\ud83d\udd17\ud83d\udc47\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558389260906020869",
            "tweet_type": "Others",
            "created_at": "2022-08-13T09:45:27.000Z"
        },
        {
            "id": 4027,
            "username": "bascodes",
            "tweet_id": "1558063814339436544",
            "tweet_text": "What other Python projects or articles have you found this week? Feel free to share!\n\n#tweet100\n\nhttps://t.co/wkFJc0WyH4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:12:15.000Z"
        },
        {
            "id": 4028,
            "username": "bascodes",
            "tweet_id": "1558063523258933251",
            "tweet_text": "flet \u2013 Flet enables developers to easily build real-time web, mobile and desktop apps in Python \u2013 by @fletdev\nhttps://t.co/fpJwcBVvQl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:06.000Z"
        },
        {
            "id": 4029,
            "username": "bascodes",
            "tweet_id": "1558063521174282241",
            "tweet_text": "makepackage \u2013 Package for easy packaging of Python code\nhttps://t.co/DjNrQ96wsh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:05.000Z"
        },
        {
            "id": 4030,
            "username": "bascodes",
            "tweet_id": "1558063519286923267",
            "tweet_text": "schemathesis \u2013 Run generated test scenarios based on your OpenAPI specification \u2013 by @Schemathesis\nhttps://t.co/2CZ31mnyIS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:05.000Z"
        },
        {
            "id": 4031,
            "username": "bascodes",
            "tweet_id": "1558063517382705158",
            "tweet_text": "log-booster \u2013 A VS code extension to quickly add frequently used log statements \u2013 by @roronoazoro_189\nhttps://t.co/s8l5cJVGqL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:04.000Z"
        },
        {
            "id": 4032,
            "username": "bascodes",
            "tweet_id": "1558063514933112832",
            "tweet_text": "jnumpy \u2013 Writing Python C extensions in Julia within 5 minutes\nhttps://t.co/AqgzvC4zgX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:04.000Z"
        },
        {
            "id": 4033,
            "username": "bascodes",
            "tweet_id": "1558063512894717952",
            "tweet_text": "Uncommon Uses of Python in Commonly Used Libraries \u2013 by @eugeneyan\nhttps://t.co/kikAFjubz6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:03.000Z"
        },
        {
            "id": 4034,
            "username": "bascodes",
            "tweet_id": "1558063510868959234",
            "tweet_text": "How I added C-style for-loops to Python \u2013 by @sadhlife\nhttps://t.co/OWoL9o8UJl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:03.000Z"
        },
        {
            "id": 4035,
            "username": "bascodes",
            "tweet_id": "1558063509061177345",
            "tweet_text": "Python in Visual Studio Code \u2013 August 2022 Release \u2013\u00a0by @code\nhttps://t.co/LZHhEGoWq9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:02.000Z"
        },
        {
            "id": 4036,
            "username": "bascodes",
            "tweet_id": "1558063507094081536",
            "tweet_text": "How to Choose the Right Python Concurrency API \u2013\u00a0by @SuperFastPython\nhttps://t.co/ngExiD1wgV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:02.000Z"
        },
        {
            "id": 4037,
            "username": "bascodes",
            "tweet_id": "1558063505055563777",
            "tweet_text": "Adding auditing to pip\nhttps://t.co/9G6xR810Wx",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:01.000Z"
        },
        {
            "id": 4038,
            "username": "bascodes",
            "tweet_id": "1558063503029768193",
            "tweet_text": "+++\nAs always, you can find this list on my blog, too!\n+++\nhttps://t.co/zHBOdX9J6u",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:01.000Z"
        },
        {
            "id": 4039,
            "username": "bascodes",
            "tweet_id": "1558063501234655235",
            "tweet_text": "Happy Friday!\n\nThe week is almost over, and I have some fresh articles and projects I've found #ThisWeekInPython for you! \ud83d\udc0d\n\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558063501234655235",
            "tweet_type": "Others",
            "created_at": "2022-08-12T12:11:00.000Z"
        },
        {
            "id": 4040,
            "username": "bascodes",
            "tweet_id": "1557722770653335558",
            "tweet_text": "Want more #Python threads like this? \n\nFollow me @bascodes!\n\n#tweet100 \nhttps://t.co/k7iBDnhX2C",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:37:04.000Z"
        },
        {
            "id": 4041,
            "username": "bascodes",
            "tweet_id": "1557722531599003649",
            "tweet_text": "Finally (line 5), the value of num is recalled and returned\n\nNot too hard to follow Pythons bytecode, right?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:07.000Z"
        },
        {
            "id": 4042,
            "username": "bascodes",
            "tweet_id": "1557722529669623808",
            "tweet_text": "Inside the loop (line 4), the interpreter loads the num variable, the i variable, multiplies these, stores the result to num, and then jumps to the beginning of the loop",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:06.000Z"
        },
        {
            "id": 4043,
            "username": "bascodes",
            "tweet_id": "1557722527727624194",
            "tweet_text": "The second block (line 3) loads the global range function, loads the value of the n variable and calls the range function. Then it creates a loop (GET_ITER and FOR_ITER)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:06.000Z"
        },
        {
            "id": 4044,
            "username": "bascodes",
            "tweet_id": "1557722525819236352",
            "tweet_text": "Put it all together:\nThe first block (line 2) loads a constant (3) and stores it to a variable (n)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:05.000Z"
        },
        {
            "id": 4045,
            "username": "bascodes",
            "tweet_id": "1557722523961217024",
            "tweet_text": "Finally, column (7) holds a human-readable interpretation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:05.000Z"
        },
        {
            "id": 4046,
            "username": "bascodes",
            "tweet_id": "1557722522128289793",
            "tweet_text": "Column (6) holds the operation's argument",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:05.000Z"
        },
        {
            "id": 4047,
            "username": "bascodes",
            "tweet_id": "1557722520299528192",
            "tweet_text": "Column (5) holds the name of the operation, often referred to as \"opname\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:04.000Z"
        },
        {
            "id": 4048,
            "username": "bascodes",
            "tweet_id": "1557722518487568385",
            "tweet_text": "Column (4) denotes the address in the bytecode \u2013 think of it as a line number for the interpreter",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:04.000Z"
        },
        {
            "id": 4049,
            "username": "bascodes",
            "tweet_id": "1557722516386304002",
            "tweet_text": "Column (3) contains a double arrow (&gt;&gt;) if it's a JUMP target \u2013 for example, one of a loop",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:03.000Z"
        },
        {
            "id": 4050,
            "username": "bascodes",
            "tweet_id": "1557722514435887104",
            "tweet_text": "Column (2) indicates the current instruction (unused in this example)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:03.000Z"
        },
        {
            "id": 4051,
            "username": "bascodes",
            "tweet_id": "1557722512397545473",
            "tweet_text": "Column (1) indicates the line number in the source file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:02.000Z"
        },
        {
            "id": 4052,
            "username": "bascodes",
            "tweet_id": "1557722510270926849",
            "tweet_text": "With the disassembler (\ud835\ude8d\ud835\ude92\ud835\ude9c) module, you can see what happens behind the scenes of the Python interpreter when you run the function. It looks like this \n\nBut what does it mean? https://t.co/1TImrDZnh1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ4iK2haIAAF7fn.jpg\"]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Others",
            "created_at": "2022-08-11T13:36:02.000Z"
        },
        {
            "id": 4053,
            "username": "bascodes",
            "tweet_id": "1557722508001890304",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Understanding the output of #Python's \ud835\ude8d\ud835\ude92\ud835\ude9c.\ud835\ude8d\ud835\ude92\ud835\ude9c\nfunction\n\nLet's start with a simple function like the one displayed below. \n\n\ud83d\udc47 https://t.co/YZ3UDLJfqF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZ4kMkGUYAE0N1V.png\"]",
            "tweet_conversation_id": "1557722508001890304",
            "tweet_type": "Python tips",
            "created_at": "2022-08-11T13:36:01.000Z"
        },
        {
            "id": 4054,
            "username": "bascodes",
            "tweet_id": "1557288297885585409",
            "tweet_text": "Wednesday! What are your plans for the rest of the week?\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557288297885585409",
            "tweet_type": "Others",
            "created_at": "2022-08-10T08:50:37.000Z"
        },
        {
            "id": 4055,
            "username": "bascodes",
            "tweet_id": "1557080764088549378",
            "tweet_text": "As a #Python developer, do you prefer Django, Flask, or FastAPI?\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557080764088549378",
            "tweet_type": "Others",
            "created_at": "2022-08-09T19:05:57.000Z"
        },
        {
            "id": 4056,
            "username": "bascodes",
            "tweet_id": "1556668607383445506",
            "tweet_text": "What is a feature of the #Python standard library that you just discovered recently?\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556668607383445506",
            "tweet_type": "Others",
            "created_at": "2022-08-08T15:48:12.000Z"
        },
        {
            "id": 4057,
            "username": "bascodes",
            "tweet_id": "1556223698574753792",
            "tweet_text": "Hey #fitdevs! \ud83d\udc4b\n\nWhat are your routines for staying fit and healthy? \ud83e\uddbe\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556223698574753792",
            "tweet_type": "Others",
            "created_at": "2022-08-07T10:20:17.000Z"
        },
        {
            "id": 4058,
            "username": "bascodes",
            "tweet_id": "1555863719447613442",
            "tweet_text": "Have a great weekend \ud83d\udc4b\nRemember to take some quality time for yourself and your loved ones!\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555863719447613442",
            "tweet_type": "Others",
            "created_at": "2022-08-06T10:29:51.000Z"
        },
        {
            "id": 4059,
            "username": "bascodes",
            "tweet_id": "1555537703835275265",
            "tweet_text": "If you've enjoyed this week's reading list, please leave an RT or like on the first tweet\n\n#tweet100\n\nhttps://t.co/6f0Hkil47E",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:54:23.000Z"
        },
        {
            "id": 4060,
            "username": "bascodes",
            "tweet_id": "1555537346237370368",
            "tweet_text": "pync \u2013 arbitrary TCP and UDP connections and listens (Netcat for Python) \u2013 by \nhttps://t.co/o1EViWAC7B",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:58.000Z"
        },
        {
            "id": 4061,
            "username": "bascodes",
            "tweet_id": "1555537342340861953",
            "tweet_text": "github-action-utils \u2013 Collection of python functions that can be used to run GitHub Action Workflow Commands \u2013 by @saad_mk11\nhttps://t.co/peQJvbWMus",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:57.000Z"
        },
        {
            "id": 4062,
            "username": "bascodes",
            "tweet_id": "1555537338826076161",
            "tweet_text": "FigmaPy \u2013 An unofficial Python3+ wrapper for Figma API\nhttps://t.co/w0Fj6Ka9aJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:56.000Z"
        },
        {
            "id": 4063,
            "username": "bascodes",
            "tweet_id": "1555537335680241664",
            "tweet_text": "storysniffer \u2013\u00a0Inspect a URL and estimate if it contains a news story \u2013 by @palewire\nhttps://t.co/nJUF94FNvQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:55.000Z"
        },
        {
            "id": 4064,
            "username": "bascodes",
            "tweet_id": "1555537332526129152",
            "tweet_text": "sshscript \u2013 Shell script-like Python Script\nhttps://t.co/juMxYT3lzK",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:55.000Z"
        },
        {
            "id": 4065,
            "username": "bascodes",
            "tweet_id": "1555537329535627265",
            "tweet_text": "Python is Like Assembly \u2013 by @specbranch\nhttps://t.co/52GC0Yi5y9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:54.000Z"
        },
        {
            "id": 4066,
            "username": "bascodes",
            "tweet_id": "1555537326943531013",
            "tweet_text": "Python is Actually Portable\nhttps://t.co/yBGIRqYXhL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:53.000Z"
        },
        {
            "id": 4067,
            "username": "bascodes",
            "tweet_id": "1555537324460584960",
            "tweet_text": "Programming languages endorsed for server-side use at Meta \u2013 by @meta\nhttps://t.co/F2gsvFqLzm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:53.000Z"
        },
        {
            "id": 4068,
            "username": "bascodes",
            "tweet_id": "1555537321490935808",
            "tweet_text": "7 things I've learned building a modern TUI framework \u2013 by @willmcgugan\nhttps://t.co/lP2gAEeruZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:52.000Z"
        },
        {
            "id": 4069,
            "username": "bascodes",
            "tweet_id": "1555537317929951232",
            "tweet_text": "Crimes with Python Pattern Matching \u2013 by @hillelogram\nhttps://t.co/ecY36uvRTU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:51.000Z"
        },
        {
            "id": 4070,
            "username": "bascodes",
            "tweet_id": "1555537314272530433",
            "tweet_text": "+++\nAs always, you can follow this list on my blog, too!\n+++\nhttps://t.co/hpp30DtZI4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:50.000Z"
        },
        {
            "id": 4071,
            "username": "bascodes",
            "tweet_id": "1555537310761881600",
            "tweet_text": "Happy Friday \u2013 remember to not deploy today! \n\nInstead, here is a list of interesting articles and projects I found #ThisWeekInPython \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555537310761881600",
            "tweet_type": "Others",
            "created_at": "2022-08-05T12:52:50.000Z"
        },
        {
            "id": 4072,
            "username": "bascodes",
            "tweet_id": "1555251977705103360",
            "tweet_text": "Send me a DM \ud83d\udcec for my calendly link! \ud83d\udcc6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555251765720895489",
            "tweet_type": "Others",
            "created_at": "2022-08-04T17:59:01.000Z"
        },
        {
            "id": 4073,
            "username": "bascodes",
            "tweet_id": "1555251765720895489",
            "tweet_text": "I still have some spots left for coffee chats \u2014 I\u2019ve done about 100 of them and it was a lot of fun! \u2615\ufe0f\n\nLet\u2019s connect!\n#100Devs #100DaysOfCode",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555251765720895489",
            "tweet_type": "Others",
            "created_at": "2022-08-04T17:58:10.000Z"
        },
        {
            "id": 4074,
            "username": "bascodes",
            "tweet_id": "1555168114077310977",
            "tweet_text": "Naming is hard\u2026\n\nThis week, I\u2019m stuck in meetings to name things and assign responsibilities. This is tough in a corporate environment \ud83d\ude09\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555168114077310977",
            "tweet_type": "Others",
            "created_at": "2022-08-04T12:25:46.000Z"
        },
        {
            "id": 4075,
            "username": "bascodes",
            "tweet_id": "1554795441513979907",
            "tweet_text": "Yes! \ud83d\udcaf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554795439521767424",
            "tweet_type": "Others",
            "created_at": "2022-08-03T11:44:54.000Z"
        },
        {
            "id": 4076,
            "username": "bascodes",
            "tweet_id": "1554795439521767424",
            "tweet_text": "Do you belong in tech?\n\nA thread \ud83e\uddf5\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554795439521767424",
            "tweet_type": "Others",
            "created_at": "2022-08-03T11:44:54.000Z"
        },
        {
            "id": 4077,
            "username": "bascodes",
            "tweet_id": "1554414971047518211",
            "tweet_text": "Good luck with your journey in tech!\n\nIf you found this thread useful, leave an RT or Like to the first tweet!\n\n#tweet100\n\nhttps://t.co/Xsx674wNg7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554414448269574144",
            "tweet_type": "Others",
            "created_at": "2022-08-02T10:33:03.000Z"
        },
        {
            "id": 4078,
            "username": "bascodes",
            "tweet_id": "1554414460625981441",
            "tweet_text": "Time Management\n\nDeadlines are missed regularly in tech. Be sure to communicate clearly when you see a problem, but do your best to meet your deadlines. When multitasking, use serial time boxes rather than trying to do everything at once.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554414448269574144",
            "tweet_type": "Others",
            "created_at": "2022-08-02T10:31:01.000Z"
        },
        {
            "id": 4079,
            "username": "bascodes",
            "tweet_id": "1554414458104975360",
            "tweet_text": "Positive Attitude and Emotional Intelligence\n\nEveryone knows it: We sometimes have a bad day \u2013 and then there is this one co-worker supporting you, make you feel better and motivating you to finish that task. \n\nBe that co-worker!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554414448269574144",
            "tweet_type": "Others",
            "created_at": "2022-08-02T10:31:01.000Z"
        },
        {
            "id": 4080,
            "username": "bascodes",
            "tweet_id": "1554414455232118784",
            "tweet_text": "Consulting Mindset and Good Communication Skills\n\nEmployers are looking for people who understand their business problems and then translate this into the right technology. You're not a coding monkey; you should become a consultant to your employer",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554414448269574144",
            "tweet_type": "Others",
            "created_at": "2022-08-02T10:31:00.000Z"
        },
        {
            "id": 4081,
            "username": "bascodes",
            "tweet_id": "1554414452333748226",
            "tweet_text": "Team Work\n\nToday's jobs are no longer about the lone careerist who outperforms everyone. Complex tasks are always a team sport, so make sure you are a good team player!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554414448269574144",
            "tweet_type": "Others",
            "created_at": "2022-08-02T10:30:59.000Z"
        },
        {
            "id": 4082,
            "username": "bascodes",
            "tweet_id": "1554414450236686336",
            "tweet_text": "Curiosity and Adaptability\n\nEspecially as a self-taught developer, you have already demonstrated that you can pick new stuff up very quickly. That's why #learninpublic is so important. \nCircumstances will change, so make sure you can adapt, too!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554414448269574144",
            "tweet_type": "Others",
            "created_at": "2022-08-02T10:30:59.000Z"
        },
        {
            "id": 4083,
            "username": "bascodes",
            "tweet_id": "1554414448269574144",
            "tweet_text": "\ud83d\udca1 A lot of people I had coffee chats \u2615\ufe0f with asked what they can bring to the table when hunting for a job, especially without prior coding experience.\n\nHere are some soft skills that could become your selling points\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554414448269574144",
            "tweet_type": "Others",
            "created_at": "2022-08-02T10:30:58.000Z"
        },
        {
            "id": 4084,
            "username": "bascodes",
            "tweet_id": "1554183880231485441",
            "tweet_text": "Self-contained books! That\u2019s a good way to put it! https://t.co/rIfQzqmIFf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554183880231485441",
            "tweet_type": "Others",
            "created_at": "2022-08-01T19:14:47.000Z"
        },
        {
            "id": 4085,
            "username": "bascodes",
            "tweet_id": "1554006305748156416",
            "tweet_text": "Working from a nice spot can clear your mind, increase productivity and fosters creativity. #\nGive it a try!\n#tweet100 https://t.co/A1N8EZUA3O",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZDweAtXgAIRMNf.jpg\"]",
            "tweet_conversation_id": "1554006305748156416",
            "tweet_type": "Others",
            "created_at": "2022-08-01T07:29:09.000Z"
        },
        {
            "id": 4086,
            "username": "bascodes",
            "tweet_id": "1553707255228518400",
            "tweet_text": "It\u2019s Sunday! Quality time!\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553707255228518400",
            "tweet_type": "Others",
            "created_at": "2022-07-31T11:40:50.000Z"
        },
        {
            "id": 4087,
            "username": "bascodes",
            "tweet_id": "1553285398322941952",
            "tweet_text": "What are your plans for the weekend?\n\nMine: I need to buy a lemon tree. No, seriously! \n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553285398322941952",
            "tweet_type": "Others",
            "created_at": "2022-07-30T07:44:32.000Z"
        },
        {
            "id": 4088,
            "username": "bascodes",
            "tweet_id": "1553089058775212035",
            "tweet_text": "Wow! I love it! https://t.co/7vXPKL9jDM",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553089058775212035",
            "tweet_type": "Others",
            "created_at": "2022-07-29T18:44:21.000Z"
        },
        {
            "id": 4089,
            "username": "bascodes",
            "tweet_id": "1552987309007687681",
            "tweet_text": "Enjoy the list of Python stuff, but remember it's Friday, so you might want to get some drinks tonight!\nhttps://t.co/UHUOUUatmP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T12:00:02.000Z"
        },
        {
            "id": 4090,
            "username": "bascodes",
            "tweet_id": "1552987306696613890",
            "tweet_text": "Python-Selenium-Action \u2013 Run Selenium with Python via Github Actions using Headless or Non-Headless browsers\nhttps://t.co/pTbCtPcnkB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T12:00:01.000Z"
        },
        {
            "id": 4091,
            "username": "bascodes",
            "tweet_id": "1552987304519663616",
            "tweet_text": "pydriller \u2013 Python Framework to analyse Git repositories \u2013 by @DavideSpadini\nhttps://t.co/VHL0U5blvL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T12:00:01.000Z"
        },
        {
            "id": 4092,
            "username": "bascodes",
            "tweet_id": "1552987301889859584",
            "tweet_text": "pwhen \u2013 A wrapper library for date/time conversion \u2013 by @cltrudeau\nhttps://t.co/mcspqHoDkF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T12:00:00.000Z"
        },
        {
            "id": 4093,
            "username": "bascodes",
            "tweet_id": "1552987299327217664",
            "tweet_text": "unzip-http \u2013 Extract individual files from .zip files over http without downloading the entire archive \u2013 by @saulfp\nhttps://t.co/rzpT7vuIic",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:59.000Z"
        },
        {
            "id": 4094,
            "username": "bascodes",
            "tweet_id": "1552987297104252928",
            "tweet_text": "pycom \u2013 A Python compiler, down to native code, using C++\nhttps://t.co/1WMNFHXtjs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:59.000Z"
        },
        {
            "id": 4095,
            "username": "bascodes",
            "tweet_id": "1552987294591815680",
            "tweet_text": "Time to Say Goodbye to These Obsolete Python Libraries \u2013 by @Martin_Heinz_\nhttps://t.co/Js8wX3GLVL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:58.000Z"
        },
        {
            "id": 4096,
            "username": "bascodes",
            "tweet_id": "1552987292284977153",
            "tweet_text": "Help us test system trust stores in Python \u2013 by @sethmlarson\nhttps://t.co/wYto2pz1Gl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:58.000Z"
        },
        {
            "id": 4097,
            "username": "bascodes",
            "tweet_id": "1552987290141708290",
            "tweet_text": "Typing your way into safety\nhttps://t.co/61J2sus65U",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:57.000Z"
        },
        {
            "id": 4098,
            "username": "bascodes",
            "tweet_id": "1552987288141025283",
            "tweet_text": "Finding performance bottlenecks in Celery tasks \u2013 by @itamarst\nhttps://t.co/cGOllZ15VC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:57.000Z"
        },
        {
            "id": 4099,
            "username": "bascodes",
            "tweet_id": "1552987286148612097",
            "tweet_text": "How to create a Python package in 2022 \u2013 by @mathsppblog\nhttps://t.co/mJLyVOeGIz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:56.000Z"
        },
        {
            "id": 4100,
            "username": "bascodes",
            "tweet_id": "1552987284152123392",
            "tweet_text": "+++\nCheck out my blog, too!\n+++\nhttps://t.co/lXN07soG9l",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:56.000Z"
        },
        {
            "id": 4101,
            "username": "bascodes",
            "tweet_id": "1552987282201788416",
            "tweet_text": "Hi, fellow devs! \ud83d\udc4b\n\nIt's Friday again. And for the 22nd week, I will share interesting articles and projects I have found #ThisWeekInPython",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552987282201788416",
            "tweet_type": "Others",
            "created_at": "2022-07-29T11:59:55.000Z"
        },
        {
            "id": 4102,
            "username": "bascodes",
            "tweet_id": "1552931442354966528",
            "tweet_text": "Is \u201cworking in tech\u201d the new \u201cworking in investment banking\u201d?\n\n#tweet100",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552931442354966528",
            "tweet_type": "Others",
            "created_at": "2022-07-29T08:18:02.000Z"
        },
        {
            "id": 4103,
            "username": "bascodes",
            "tweet_id": "1552618488363098112",
            "tweet_text": "You could, for example, order a list of dicts with respect to a certain key https://t.co/8Swg3x2dqF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYsjajFXoAAiisj.jpg\"]",
            "tweet_conversation_id": "1552618485334904832",
            "tweet_type": "Others",
            "created_at": "2022-07-28T11:34:28.000Z"
        },
        {
            "id": 4104,
            "username": "bascodes",
            "tweet_id": "1552618485334904832",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Do you know about the \ud835\ude92\ud835\ude9d\ud835\ude8e\ud835\ude96\ud835\ude90\ud835\ude8e\ud835\ude9d\ud835\ude9d\ud835\ude8e\ud835\ude9b function in the \ud835\ude98\ud835\ude99\ud835\ude8e\ud835\ude9b\ud835\ude8a\ud835\ude9d\ud835\ude98\ud835\ude9b package?\n\nIt provides a really unorthodox way to access elements in a dict\n\nHow is that useful? \ud83d\udc47 https://t.co/AbYlW0lIEN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYsjM0qX0AATsSe.png\"]",
            "tweet_conversation_id": "1552618485334904832",
            "tweet_type": "Python tips",
            "created_at": "2022-07-28T11:34:27.000Z"
        },
        {
            "id": 4105,
            "username": "bascodes",
            "tweet_id": "1552532605924528128",
            "tweet_text": "Today, I reached a new vanity metric!\n#fitdevs #tweet100 https://t.co/C9rGiWxZlh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYu0LQqXkAM0muc.jpg\"]",
            "tweet_conversation_id": "1552532605924528128",
            "tweet_type": "Others",
            "created_at": "2022-07-28T05:53:12.000Z"
        },
        {
            "id": 4106,
            "username": "Rapid_API",
            "tweet_id": "1605046593186578432",
            "tweet_text": "That\u2019s all for now! Follow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605046569237192705",
            "tweet_type": "Others",
            "created_at": "2022-12-20T03:45:02.000Z"
        },
        {
            "id": 4107,
            "username": "Rapid_API",
            "tweet_id": "1605046589185302531",
            "tweet_text": "\ud83d\udccc Downsides of tRPC\n\n- It requires both your front and back end to use TypeScript.\n\n- It works best when your frontend and backend are close together like a monorepo.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605046569237192705",
            "tweet_type": "Others",
            "created_at": "2022-12-20T03:45:01.000Z"
        },
        {
            "id": 4108,
            "username": "Rapid_API",
            "tweet_id": "1605046585154588672",
            "tweet_text": "\ud83d\udccc Benefits of type safety\n\n- Static typing that can help catch errors on build time rather than run time.\n\n- Autocompletion and checks for bad types.\n\n- Data validation that improves API security.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605046569237192705",
            "tweet_type": "Others",
            "created_at": "2022-12-20T03:45:00.000Z"
        },
        {
            "id": 4109,
            "username": "Rapid_API",
            "tweet_id": "1605046581195071489",
            "tweet_text": "\ud83d\udccc What is type safety for APIs? \n\nIt means, the server and client already agree on the form of data.\n\nSo, when the data gets to the server or client, it is already validated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605046569237192705",
            "tweet_type": "Others",
            "created_at": "2022-12-20T03:44:59.000Z"
        },
        {
            "id": 4110,
            "username": "Rapid_API",
            "tweet_id": "1605046577122496514",
            "tweet_text": "\ud83d\udccc How does it work?\n\ntRPC uses functions (procedures) instead of schemas to remotely call the backend.  \n\nYou can share types between client and server, ensuring full type safety for inputs, outputs, and errors.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605046569237192705",
            "tweet_type": "Others",
            "created_at": "2022-12-20T03:44:58.000Z"
        },
        {
            "id": 4111,
            "username": "Rapid_API",
            "tweet_id": "1605046573162962945",
            "tweet_text": "As TypeScript grows in popularity, tRPC offers a TypeScript-based addition to traditional REST and GraphQL APIs.\n\ntRPC allows you to build and consume APIs in a typesafe manner.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605046569237192705",
            "tweet_type": "Others",
            "created_at": "2022-12-20T03:44:58.000Z"
        },
        {
            "id": 4112,
            "username": "Rapid_API",
            "tweet_id": "1605046569237192705",
            "tweet_text": "What is tRPC?\n\nA thread \ud83d\udc47\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605046569237192705",
            "tweet_type": "API tips",
            "created_at": "2022-12-20T03:44:57.000Z"
        },
        {
            "id": 4113,
            "username": "Rapid_API",
            "tweet_id": "1605009831156383745",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605009806678523905",
            "tweet_type": "Others",
            "created_at": "2022-12-20T01:18:58.000Z"
        },
        {
            "id": 4114,
            "username": "Rapid_API",
            "tweet_id": "1605009827020869634",
            "tweet_text": "5\ufe0f\u20e3 Tripadvisor API\n\nTripadvisor API helps to query real-time hotels search, flight prices, restaurants, attracting locations, etc., to create a traveling site.\n\n\ud83d\udd17 https://t.co/SZL1qWVzS8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605009806678523905",
            "tweet_type": "Others",
            "created_at": "2022-12-20T01:18:57.000Z"
        },
        {
            "id": 4115,
            "username": "Rapid_API",
            "tweet_id": "1605009822885216257",
            "tweet_text": "4\ufe0f\u20e3 Airbnb API\n\nAirbnb API allows users to search accommodations by location, place name, and GEO coordinates to find a place to rent. \n\n\ud83d\udd17 https://t.co/8Q0u4KWNc2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605009806678523905",
            "tweet_type": "Others",
            "created_at": "2022-12-20T01:18:56.000Z"
        },
        {
            "id": 4116,
            "username": "Rapid_API",
            "tweet_id": "1605009818829348865",
            "tweet_text": "3\ufe0f\u20e3 Priceline Provider API\n\nYou can use this API to search for hotels, cars for rent, flights, etc.\n\n\ud83d\udd17 https://t.co/8kAgrkJpa4",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605009806678523905",
            "tweet_type": "Others",
            "created_at": "2022-12-20T01:18:55.000Z"
        },
        {
            "id": 4117,
            "username": "Rapid_API",
            "tweet_id": "1605009814668677120",
            "tweet_text": "2\ufe0f\u20e3 Trail API\n\nThis API provides information and photos for tens of thousands of outdoor recreation locations including hiking and mountain biking trails, campgrounds, ski resorts, ATV trails, and more.\n\n\ud83d\udd17 https://t.co/fw1CHmOUVQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605009806678523905",
            "tweet_type": "Others",
            "created_at": "2022-12-20T01:18:54.000Z"
        },
        {
            "id": 4118,
            "username": "Rapid_API",
            "tweet_id": "1605009810587533314",
            "tweet_text": "1\ufe0f\u20e3 Hotels API\n\nThis API helps to query rooms, prices, facilities, etc information from many hotels around the world to create a traveling site/application.\n\n\ud83d\udd17 https://t.co/AHdc2Zt5xG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605009806678523905",
            "tweet_type": "Others",
            "created_at": "2022-12-20T01:18:53.000Z"
        },
        {
            "id": 4119,
            "username": "Rapid_API",
            "tweet_id": "1605009806678523905",
            "tweet_text": "Here are the top five travel APIs that you can use in your next project\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605009806678523905",
            "tweet_type": "API tips",
            "created_at": "2022-12-20T01:18:52.000Z"
        },
        {
            "id": 4120,
            "username": "Rapid_API",
            "tweet_id": "1604835202852954112",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604835177557008384",
            "tweet_type": "Others",
            "created_at": "2022-12-19T13:45:03.000Z"
        },
        {
            "id": 4121,
            "username": "Rapid_API",
            "tweet_id": "1604835198738259969",
            "tweet_text": "We have written a detailed guide on API errors that you can find here: https://t.co/53Qm0tk0HR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604835177557008384",
            "tweet_type": "Others",
            "created_at": "2022-12-19T13:45:02.000Z"
        },
        {
            "id": 4122,
            "username": "Rapid_API",
            "tweet_id": "1604835194648907777",
            "tweet_text": "3\ufe0f\u20e3 Documentation reference\n\nYou can also include a link to a help page in your API documentation referring to the error.\n\nIt will allow developers to fix the error quickly, massively improving the Developer Experience of your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604835177557008384",
            "tweet_type": "Others",
            "created_at": "2022-12-19T13:45:01.000Z"
        },
        {
            "id": 4123,
            "username": "Rapid_API",
            "tweet_id": "1604835189523357702",
            "tweet_text": "2\ufe0f\u20e3 Human readable messages\n\nOnly the status codes are not enough to clarify the error. A clear, human-readable message goes a long way to pinpoint the actual cause of the error.\n\nHere is an example error message https://t.co/OkECkmmBiu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkWFFeGWQAAZRM4.jpg\"]",
            "tweet_conversation_id": "1604835177557008384",
            "tweet_type": "Others",
            "created_at": "2022-12-19T13:45:00.000Z"
        },
        {
            "id": 4124,
            "username": "Rapid_API",
            "tweet_id": "1604835185521983488",
            "tweet_text": "\ud83d\udccc Best practices\n\n1\ufe0f\u20e3 HTTP Status Code\n\nThe 4xx and 5xx HTTP Status Codes are used to show the category of the error that occurred. \n\nIncluding these standard error codes helps the developers understand what the error is and where it occurred.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604835177557008384",
            "tweet_type": "Others",
            "created_at": "2022-12-19T13:44:59.000Z"
        },
        {
            "id": 4125,
            "username": "Rapid_API",
            "tweet_id": "1604835181533302786",
            "tweet_text": "\ud83d\udccc Why does good error response matter?\n\nIn the case of failed requests, only the status codes are not enough since they simply define the categories of the errors. \n\nWhile they are beneficial, they are not enough to explain the reason why the request failed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604835177557008384",
            "tweet_type": "Others",
            "created_at": "2022-12-19T13:44:58.000Z"
        },
        {
            "id": 4126,
            "username": "Rapid_API",
            "tweet_id": "1604835177557008384",
            "tweet_text": "Best practices for creating API errors\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604835177557008384",
            "tweet_type": "API tips",
            "created_at": "2022-12-19T13:44:57.000Z"
        },
        {
            "id": 4127,
            "username": "Rapid_API",
            "tweet_id": "1604459558788911106",
            "tweet_text": "Hope you like this tip. \ud83d\udc19\n\nDo check out RapidAPI for Mac\n\u21b3 https://t.co/bnAk5XetrR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604459553369776128",
            "tweet_type": "Others",
            "created_at": "2022-12-18T12:52:22.000Z"
        },
        {
            "id": 4128,
            "username": "Rapid_API",
            "tweet_id": "1604459553369776128",
            "tweet_text": "Rapid Week Tip \ud83d\udc19\n\n\ud83d\udd39 Import cURL requests to RapidAPI for Mac by @alpha_beta_rtm\n\nIf you have copied a cURL command on your clipboard, you can quickly import and test it inside RapidAPI for Mac. https://t.co/F0AJJt2Csy",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FkQvcB8XgAMl8Cp.mp4\"]",
            "tweet_conversation_id": "1604459553369776128",
            "tweet_type": "Others",
            "created_at": "2022-12-18T12:52:21.000Z"
        },
        {
            "id": 4129,
            "username": "Rapid_API",
            "tweet_id": "1604238023545262082",
            "tweet_text": "Hope you like this tip. \ud83d\udc19\n\nDo check out RapidAPI Studio\n\u21b3 https://t.co/DkvKLVEDz6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604238018491056128",
            "tweet_type": "Others",
            "created_at": "2022-12-17T22:12:04.000Z"
        },
        {
            "id": 4130,
            "username": "Rapid_API",
            "tweet_id": "1604238018491056128",
            "tweet_text": "Rapid Week Tip \ud83d\udc19\n\n\ud83d\udd39 API Testing with RapidAPI Studio by @rotem_yohanan\n\nRapidAPI Studio houses an extremely powerful API testing tool that can:\n\n\u2013 Create complex API tests\n\u2013 Schedule tests in 9 locations\n\u2013 Set up email alerts in case the test fails\n\u2013 Generate execution reports https://t.co/Dmk56O3jqY",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FkNl8YBXwAQscLO.mp4\"]",
            "tweet_conversation_id": "1604238018491056128",
            "tweet_type": "Others",
            "created_at": "2022-12-17T22:12:03.000Z"
        },
        {
            "id": 4131,
            "username": "Rapid_API",
            "tweet_id": "1603921901138714624",
            "tweet_text": "Hope you like this tip. \ud83d\udc19\n\nDo check out RapidAPI Client for VS Code\n\u21b3 https://t.co/En66s2boMr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603921896193548290",
            "tweet_type": "Others",
            "created_at": "2022-12-17T01:15:55.000Z"
        },
        {
            "id": 4132,
            "username": "Rapid_API",
            "tweet_id": "1603921896193548290",
            "tweet_text": "Rapid Week Tip \ud83d\udc19\n\n\ud83d\udd39 Debug while testing your APIs by @eliostruyf\n\nRapidAPI Client for VS Code is also integrated with VS Code debugger.\n\nJust set the breakpoint and hit the send button to start testing and debugging APIs you are developing. https://t.co/KfLClC2Q72",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkJGdl9XoAEBn-K.jpg\"]",
            "tweet_conversation_id": "1603921896193548290",
            "tweet_type": "Others",
            "created_at": "2022-12-17T01:15:54.000Z"
        },
        {
            "id": 4133,
            "username": "Rapid_API",
            "tweet_id": "1603751591772839937",
            "tweet_text": "Thanks for reading this RapidAPI Comic!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\n\nTo discover over 40,000 APIs, checkout RapidAPI Hub: https://t.co/2tM1EEQGY2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603751561573941248",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:59:10.000Z"
        },
        {
            "id": 4134,
            "username": "Rapid_API",
            "tweet_id": "1603751586567692292",
            "tweet_text": "{ 6 / 6 } https://t.co/hvmVU1nCRp",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGri3EXwAEOUh6.jpg\"]",
            "tweet_conversation_id": "1603751561573941248",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:59:09.000Z"
        },
        {
            "id": 4135,
            "username": "Rapid_API",
            "tweet_id": "1603751581475901441",
            "tweet_text": "{ 5 / 6 } https://t.co/XJrVjwlhWx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGrimBXkAIzZyd.jpg\"]",
            "tweet_conversation_id": "1603751561573941248",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:59:07.000Z"
        },
        {
            "id": 4136,
            "username": "Rapid_API",
            "tweet_id": "1603751576446935041",
            "tweet_text": "{ 4 / 6 } https://t.co/EeeHxj17Bc",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGriWJXgAEUZi5.jpg\"]",
            "tweet_conversation_id": "1603751561573941248",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:59:06.000Z"
        },
        {
            "id": 4137,
            "username": "Rapid_API",
            "tweet_id": "1603751571527028736",
            "tweet_text": "{ 3 / 6 } https://t.co/6L4TbReMkF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGriEfWYAIIpOm.jpg\"]",
            "tweet_conversation_id": "1603751561573941248",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:59:05.000Z"
        },
        {
            "id": 4138,
            "username": "Rapid_API",
            "tweet_id": "1603751566535704577",
            "tweet_text": "{ 2 / 6 } https://t.co/g0Z95g0X2Q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGrhwmXgAQCQsP.jpg\"]",
            "tweet_conversation_id": "1603751561573941248",
            "tweet_type": "Others",
            "created_at": "2022-12-16T13:59:04.000Z"
        },
        {
            "id": 4139,
            "username": "Rapid_API",
            "tweet_id": "1603751561573941248",
            "tweet_text": "What exactly is the CRUD model?\n\nA thread \ud83d\udc47\n\n{ 1 / 6 } https://t.co/z1xH4hZGgW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkGrhe1XgAAx6wD.jpg\"]",
            "tweet_conversation_id": "1603751561573941248",
            "tweet_type": "API tips",
            "created_at": "2022-12-16T13:59:03.000Z"
        },
        {
            "id": 4140,
            "username": "Rapid_API",
            "tweet_id": "1603420544073957377",
            "tweet_text": "Thanks for reading!\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:42.000Z"
        },
        {
            "id": 4141,
            "username": "Rapid_API",
            "tweet_id": "1603420539988709376",
            "tweet_text": "8\ufe0f\u20e3 Improved security: \n\nGraphQL allows developers to define exactly what data is being requested, making it easier to secure an application.\n\nThis ensures that sensitive data is not exposed to potential attackers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:41.000Z"
        },
        {
            "id": 4142,
            "username": "Rapid_API",
            "tweet_id": "1603420535597273096",
            "tweet_text": "7\ufe0f\u20e3 Easy to learn \n\nGraphQL has a simple syntax and is easy to learn, making it accessible to many developers. \n\nThis can speed up the development process and reduce the learning curve.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:40.000Z"
        },
        {
            "id": 4143,
            "username": "Rapid_API",
            "tweet_id": "1603420531545587718",
            "tweet_text": "6\ufe0f\u20e3 Better performance\n\nThe efficiency of GraphQL is because the server only has to make a single request for the required data rather than multiple requests. \n\nThis can result in much better performance and less strain on the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:39.000Z"
        },
        {
            "id": 4144,
            "username": "Rapid_API",
            "tweet_id": "1603420527602835456",
            "tweet_text": "5\ufe0f\u20e3 Better developer experience\n\nGraphQL enables developers to interact with APIs more efficiently by providing a consistent and predictable way to query data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:38.000Z"
        },
        {
            "id": 4145,
            "username": "Rapid_API",
            "tweet_id": "1603420523647717378",
            "tweet_text": "4\ufe0f\u20e3 Reduced overhead\n\nGraphQL reduces network overhead because it only sends the data that is requested. \n\nThis makes it more efficient and cost-effective compared to traditional RESTful APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:37.000Z"
        },
        {
            "id": 4146,
            "username": "Rapid_API",
            "tweet_id": "1603420519587631108",
            "tweet_text": "3\ufe0f\u20e3 More flexible\n\nGraphQL allows clients to make more flexible queries that can return complex data structures. \n\nThis makes it easier to add new features and update existing ones without having to rewrite code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:36.000Z"
        },
        {
            "id": 4147,
            "username": "Rapid_API",
            "tweet_id": "1603420515682631681",
            "tweet_text": "2\ufe0f\u20e3 Strong typing\n\nGraphQL is strongly typed, making it easier to catch errors at compile time rather than at runtime.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:35.000Z"
        },
        {
            "id": 4148,
            "username": "Rapid_API",
            "tweet_id": "1603420511614164994",
            "tweet_text": "1\ufe0f\u20e3 Easy to extend\n\nIt makes it easier to evolve the API over time because the schema acts as a contract between the client and the server, allowing both parties to evolve their implementations independently.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "Others",
            "created_at": "2022-12-15T16:03:34.000Z"
        },
        {
            "id": 4149,
            "username": "Rapid_API",
            "tweet_id": "1603420507658981377",
            "tweet_text": "Advantages of GraphQL\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603420507658981377",
            "tweet_type": "API tips",
            "created_at": "2022-12-15T16:03:33.000Z"
        },
        {
            "id": 4150,
            "username": "Rapid_API",
            "tweet_id": "1603389152246087680",
            "tweet_text": "Hope you like this tip. \ud83d\udc19\n\nDo check out RapidAPI Studio\n\u21b3 https://t.co/DkvKLVEDz6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603389146919309315",
            "tweet_type": "Others",
            "created_at": "2022-12-15T13:58:58.000Z"
        },
        {
            "id": 4151,
            "username": "Rapid_API",
            "tweet_id": "1603389146919309315",
            "tweet_text": "Rapid Week Tip \ud83d\udc19\n\n\ud83d\udd39 Bi-directional sync b/w RapidAPI for Mac &amp; Studio by @bcinarli\n\nIf you are using RapidAPI for Mac, all of your local API requests will also be present on RapidAPI Studio. \n\nThis allows you to continue your work even if you switch from the Mac app to Studio. https://t.co/3WlRkSNcal",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkBh7HDXEAQJzZU.jpg\", \"https://pbs.twimg.com/media/FkBh7ftWAAgU0_w.jpg\"]",
            "tweet_conversation_id": "1603389146919309315",
            "tweet_type": "Others",
            "created_at": "2022-12-15T13:58:56.000Z"
        },
        {
            "id": 4152,
            "username": "Rapid_API",
            "tweet_id": "1603197184492675075",
            "tweet_text": "Thanks for reading!\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:09.000Z"
        },
        {
            "id": 4153,
            "username": "Rapid_API",
            "tweet_id": "1603197180461957121",
            "tweet_text": "REST APIs can be less secure than other types of APIs, as they do not provide built-in support for authentication and authorization.\n\nSo, developers must implement these features themselves, which can introduce additional complexity and potential security vulnerabilities.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:08.000Z"
        },
        {
            "id": 4154,
            "username": "Rapid_API",
            "tweet_id": "1603197176506638336",
            "tweet_text": "Because REST APIs are based on the HTTP protocol, they can be slower and less efficient than other types of APIs, such as those based on the more efficient TCP protocol.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:07.000Z"
        },
        {
            "id": 4155,
            "username": "Rapid_API",
            "tweet_id": "1603197172274561027",
            "tweet_text": "\ud83d\udccc Cons\n\nThey can be more complex to implement than other types of APIs, particularly for developers who are not familiar with REST architectural principles.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:06.000Z"
        },
        {
            "id": 4156,
            "username": "Rapid_API",
            "tweet_id": "1603197168323534848",
            "tweet_text": "The key benefits of REST APIs are their flexibility, scalability, and ability to support a wide range of applications.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:05.000Z"
        },
        {
            "id": 4157,
            "username": "Rapid_API",
            "tweet_id": "1603197164301287426",
            "tweet_text": "REST APIs are well-suited for use with microservices architectures, as they allow for the development of independent services that can be easily combined and integrated with one another.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:04.000Z"
        },
        {
            "id": 4158,
            "username": "Rapid_API",
            "tweet_id": "1603197160153137153",
            "tweet_text": "REST APIs also provide a flexible and scalable approach to developing APIs, allowing developers to easily build and deploy new APIs without being constrained by a specific platform or development approach.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:03.000Z"
        },
        {
            "id": 4159,
            "username": "Rapid_API",
            "tweet_id": "1603197156185317376",
            "tweet_text": "\ud83d\udccc Pros\n\nREST API has the ability to support a wide range of applications, including web, mobile, and IoT.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "Others",
            "created_at": "2022-12-15T01:16:02.000Z"
        },
        {
            "id": 4160,
            "username": "Rapid_API",
            "tweet_id": "1603197152221696000",
            "tweet_text": "The pros and cons of REST APIs\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603197152221696000",
            "tweet_type": "API tips",
            "created_at": "2022-12-15T01:16:01.000Z"
        },
        {
            "id": 4161,
            "username": "Rapid_API",
            "tweet_id": "1603026806939983874",
            "tweet_text": "Hope you like this tip. \ud83d\udc19\n\nDo check out RapidAPI Studio\n\u21b3 https://t.co/DkvKLVEDz6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603026802049417216",
            "tweet_type": "Others",
            "created_at": "2022-12-14T13:59:08.000Z"
        },
        {
            "id": 4162,
            "username": "Rapid_API",
            "tweet_id": "1603026802049417216",
            "tweet_text": "Rapid Week Tip \ud83d\udc19\n\n\ud83d\udd39 Test Fragments in RapidAPI Studio by @stanisgiovanni\n\nThere's a chance you'll have to repeat the same steps from one API test to another in RapidAPI Studio.\n\nHere, we can use Test Fragments by creating a child test and using its response in our test. https://t.co/XriEAWM6AP",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Fj8YV4WXwAAovq0.mp4\"]",
            "tweet_conversation_id": "1603026802049417216",
            "tweet_type": "Others",
            "created_at": "2022-12-14T13:59:07.000Z"
        },
        {
            "id": 4163,
            "username": "Rapid_API",
            "tweet_id": "1602842856825257986",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:11.000Z"
        },
        {
            "id": 4164,
            "username": "Rapid_API",
            "tweet_id": "1602842851443884034",
            "tweet_text": "Here is an example GET fetch request that includes the API key. https://t.co/oDE9mNhsBO",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj5xC8gX0AI5Mtf.jpg\"]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:09.000Z"
        },
        {
            "id": 4165,
            "username": "Rapid_API",
            "tweet_id": "1602842846637219840",
            "tweet_text": "Now you can access the API key located in the .env file. https://t.co/QTHA5nMlgq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj5xCouXgAEiOCE.jpg\"]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:08.000Z"
        },
        {
            "id": 4166,
            "username": "Rapid_API",
            "tweet_id": "1602842841901924357",
            "tweet_text": "In the next step, we will import the package in our code. https://t.co/37LitkG8HP",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj5xCUzXwAIpsMV.jpg\"]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:07.000Z"
        },
        {
            "id": 4167,
            "username": "Rapid_API",
            "tweet_id": "1602842836680179712",
            "tweet_text": "To use env file in Node.js, we need to first install the \"dotenv\" package. https://t.co/ROnpuWXKRr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj5xB8pXgAAdTZa.jpg\"]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:06.000Z"
        },
        {
            "id": 4168,
            "username": "Rapid_API",
            "tweet_id": "1602842831470608385",
            "tweet_text": "\ud83d\udccc env file\n\nA file containing environment variables is known as an env file.\n\nVariables that are set in the environment in which a program operates are known as environment variables.\n\nThey are applied to alter the behavior of the program. https://t.co/2KdIMN0FFH",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj5xBppWQAEGedU.jpg\"]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:05.000Z"
        },
        {
            "id": 4169,
            "username": "Rapid_API",
            "tweet_id": "1602842827502895104",
            "tweet_text": "The are two solutions for this.\n\n1\ufe0f\u20e3 The first is to implement a proxy for the API.\n\n2\ufe0f\u20e3 The second simpler-to-implement solution is to use the .env (environment) file.\n\nLet's demonstrate.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:04.000Z"
        },
        {
            "id": 4170,
            "username": "Rapid_API",
            "tweet_id": "1602842823535067136",
            "tweet_text": "Although making your API key public is a bad idea, it still happens.\n\n- Sometimes, we include it in the GET request parameters.\n\n- Other times, we commit the key to GitHub in our code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "Others",
            "created_at": "2022-12-14T01:48:03.000Z"
        },
        {
            "id": 4171,
            "username": "Rapid_API",
            "tweet_id": "1602842819625947142",
            "tweet_text": "How to secure your Node.js API key?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602842819625947142",
            "tweet_type": "API tips",
            "created_at": "2022-12-14T01:48:02.000Z"
        },
        {
            "id": 4172,
            "username": "Rapid_API",
            "tweet_id": "1602728592420511744",
            "tweet_text": "That\u2019s all for now!\n\nYou can get started with GraphQL using the following course:\n\u21b3 https://t.co/YyiY13riRh\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:08.000Z"
        },
        {
            "id": 4173,
            "username": "Rapid_API",
            "tweet_id": "1602728588347932674",
            "tweet_text": "\u2192 When we want to reduce the miscommunication between the client and the server, we can use GraphQL because of its strongly defined data types.\n\u2192 We can use GraphQL for applications we know will be used by people with limited bandwidth.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:07.000Z"
        },
        {
            "id": 4174,
            "username": "Rapid_API",
            "tweet_id": "1602728584346587136",
            "tweet_text": "\ud83d\udccc When to use GraphQL?\n\n\u2192 We can use GraphQL when under-fetching and over-fetching impact the application performance.\n\u2192 When we want to get precise data from the API using a single API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:06.000Z"
        },
        {
            "id": 4175,
            "username": "Rapid_API",
            "tweet_id": "1602728580282212353",
            "tweet_text": "\ud83d\udccc Mutation\n\nThere is also a type that lets you manipulate the data using GraphQL. \n\nIt's called Mutation. Inside this type, you can make calls to different functions that change your data later.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:05.000Z"
        },
        {
            "id": 4176,
            "username": "Rapid_API",
            "tweet_id": "1602728576268337153",
            "tweet_text": "\ud83d\udccc Query\n\nThe Query type is a special object type that defines all of the top-level entry points for queries that clients execute against your server.\n\nEach field of the Query type defines the name and return type of a different entry point.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:04.000Z"
        },
        {
            "id": 4177,
            "username": "Rapid_API",
            "tweet_id": "1602728572216639492",
            "tweet_text": "The schema is defined using the type keyword. \n\nThe type can have multiple fields, and you can make a field required by putting an exclamation mark (!) in front of it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:03.000Z"
        },
        {
            "id": 4178,
            "username": "Rapid_API",
            "tweet_id": "1602728568227876866",
            "tweet_text": "\ud83d\udccc How to use GraphQL?\n\nWe have a single entry point. On the server, we define a schema that describes all the possible data we may need to query in our application. \n\nThe data is then later fetched using a syntax that replicates the data's return shape in JSON.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:02.000Z"
        },
        {
            "id": 4179,
            "username": "Rapid_API",
            "tweet_id": "1602728564192940045",
            "tweet_text": "GraphQL is a query language that lets client request the precise data they require from the server. Thus, eliminating the under-fetching and over-fetching.\n\nUnlike REST API, GraphQL provides a single entry point, i.e., /graphql, that we can use to request the data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "Others",
            "created_at": "2022-12-13T18:14:01.000Z"
        },
        {
            "id": 4180,
            "username": "Rapid_API",
            "tweet_id": "1602728560187375618",
            "tweet_text": "What is GraphQL?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602728560187375618",
            "tweet_type": "API tips",
            "created_at": "2022-12-13T18:14:00.000Z"
        },
        {
            "id": 4181,
            "username": "Rapid_API",
            "tweet_id": "1602674458355023873",
            "tweet_text": "Hope you like this tip. \ud83d\udc19\n\nDo check out RapidAPI Studio\n\u21b3 https://t.co/DkvKLVEDz6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602674453346918401",
            "tweet_type": "Others",
            "created_at": "2022-12-13T14:39:01.000Z"
        },
        {
            "id": 4182,
            "username": "Rapid_API",
            "tweet_id": "1602674453346918401",
            "tweet_text": "Rapid Week Tip \ud83d\udc19\n\n\ud83d\udd39 Quickly generate API tests using Request Generator by @jevgeniazi\n\nIn RapidAPI Studio, you can use the Request Generator to easily create and run extensive tests for your APIs. https://t.co/K0b41DNfWW",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Fj3X5JXWQAQdtNE.mp4\"]",
            "tweet_conversation_id": "1602674453346918401",
            "tweet_type": "Others",
            "created_at": "2022-12-13T14:39:00.000Z"
        },
        {
            "id": 4183,
            "username": "Rapid_API",
            "tweet_id": "1602444957490495488",
            "tweet_text": "That\u2019s all for now! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "Others",
            "created_at": "2022-12-12T23:27:04.000Z"
        },
        {
            "id": 4184,
            "username": "Rapid_API",
            "tweet_id": "1602444953522675712",
            "tweet_text": "These test types are in the order of their popularity, as reported by API developers in the StateofAPI survey.\n\nhttps://t.co/aVvOC7GK4j",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "Others",
            "created_at": "2022-12-12T23:27:03.000Z"
        },
        {
            "id": 4185,
            "username": "Rapid_API",
            "tweet_id": "1602444949269762048",
            "tweet_text": "\ud83d\udccc Security testing\n\nPenetration and fuzz tests are done to test the API's security.\n\nIn penetration tests, the API is attacked to see its response.\n\nIn fuzz tests, the API is tested by injecting unexpected inputs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "Others",
            "created_at": "2022-12-12T23:27:02.000Z"
        },
        {
            "id": 4186,
            "username": "Rapid_API",
            "tweet_id": "1602444945255813123",
            "tweet_text": "\ud83d\udccc Performance testing\n\nPerformance tests evaluate the API's performance under different conditions.\n\nThe most popular example is load testing, which tests the API's behavior under normal, maximum, and overloaded traffic.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "Others",
            "created_at": "2022-12-12T23:27:01.000Z"
        },
        {
            "id": 4187,
            "username": "Rapid_API",
            "tweet_id": "1602444941267017728",
            "tweet_text": "\ud83d\udccc Validation testing\n\nValidation or acceptance tests are conducted at the end of API development.\n\nThese tests use simple criteria to validate the API's specs, behavior, and efficiency.\n\nThey determine whether the API was developed correctly or not.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "Others",
            "created_at": "2022-12-12T23:27:00.000Z"
        },
        {
            "id": 4188,
            "username": "Rapid_API",
            "tweet_id": "1602444936997216257",
            "tweet_text": "\ud83d\udccc Integration testing\n\nIf the API connects with other components, applications, or APIs, we should conduct integration testing.\n\nIt tests the data flow and communication of the API to ensure its seamless integration with other parts of the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "Others",
            "created_at": "2022-12-12T23:26:59.000Z"
        },
        {
            "id": 4189,
            "username": "Rapid_API",
            "tweet_id": "1602444933058760705",
            "tweet_text": "\ud83d\udccc Functional testing\n\nIt tests each function of the API to ensure it is working as expected.\n\nDifferent test cases and scenarios are created, and the API is tested by giving inputs according to them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "Others",
            "created_at": "2022-12-12T23:26:58.000Z"
        },
        {
            "id": 4190,
            "username": "Rapid_API",
            "tweet_id": "1602444928939958272",
            "tweet_text": "Types of API tests to perform on your APIs.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602444928939958272",
            "tweet_type": "API tips",
            "created_at": "2022-12-12T23:26:57.000Z"
        },
        {
            "id": 4191,
            "username": "Rapid_API",
            "tweet_id": "1602364156501528602",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "Others",
            "created_at": "2022-12-12T18:06:00.000Z"
        },
        {
            "id": 4192,
            "username": "Rapid_API",
            "tweet_id": "1602364152571465748",
            "tweet_text": "5\ufe0f\u20e3 Review Your Code\n\nBefore submitting the code, check your code manually for any keys or sensitive authentication information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "Others",
            "created_at": "2022-12-12T18:05:59.000Z"
        },
        {
            "id": 4193,
            "username": "Rapid_API",
            "tweet_id": "1602364148490407940",
            "tweet_text": "4\ufe0f\u20e3 Restrict access\n\nOne of the ways to avoid the dangers of key exposure is to restrict what the key can do. \n\nAPIs should allow the end-users to limit the API key access to specific actions. They can create separate keys for separate actions like GitHub does with their tokens.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "Others",
            "created_at": "2022-12-12T18:05:58.000Z"
        },
        {
            "id": 4194,
            "username": "Rapid_API",
            "tweet_id": "1602364144442904578",
            "tweet_text": "3\ufe0f\u20e3 Regenerate Keys\n\nRegenerate your API keys regularly and update the keys in your applications. \n\nDoing so will render the exposed key useless.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "Others",
            "created_at": "2022-12-12T18:05:57.000Z"
        },
        {
            "id": 4195,
            "username": "Rapid_API",
            "tweet_id": "1602364140382822401",
            "tweet_text": "2\ufe0f\u20e3 Use .env file\n\nInstead of embedding them in code, use environment variable (.env) files or secrets to store API keys. \n\nDon't forget to add the .env files to gitignore before pushing your code to a GitHub repository so that the file never gets exposed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "Others",
            "created_at": "2022-12-12T18:05:56.000Z"
        },
        {
            "id": 4196,
            "username": "Rapid_API",
            "tweet_id": "1602364136368869378",
            "tweet_text": "\ud83d\udccc Best Practices\n\n1\ufe0f\u20e3 Don\u2019t embed in code\n\nOne of the most common mistakes developers make is hardcoding the API keys in their applications. \n\nLater, they may push the code to a public GitHub repository where the key is exposed to everyone.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "Others",
            "created_at": "2022-12-12T18:05:55.000Z"
        },
        {
            "id": 4197,
            "username": "Rapid_API",
            "tweet_id": "1602364132321366065",
            "tweet_text": "\ud83d\udccc API keys\n\nOne way APIs control access is by using encrypted strings called API keys. \n\nWith API keys, you can verify each app's or user's identity and mitigate the risks of unauthorized access.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "Others",
            "created_at": "2022-12-12T18:05:54.000Z"
        },
        {
            "id": 4198,
            "username": "Rapid_API",
            "tweet_id": "1602364128382914582",
            "tweet_text": "Best Practices for Securing API Keys\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602364128382914582",
            "tweet_type": "API tips",
            "created_at": "2022-12-12T18:05:53.000Z"
        },
        {
            "id": 4199,
            "username": "Rapid_API",
            "tweet_id": "1602302008492724224",
            "tweet_text": "Hope you like this tip. \ud83d\udc19\n\nDo check out RapidAPI for Mac\n\u21b3 https://t.co/bnAk5Xf1hp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602302003539058691",
            "tweet_type": "Others",
            "created_at": "2022-12-12T13:59:02.000Z"
        },
        {
            "id": 4200,
            "username": "Rapid_API",
            "tweet_id": "1602302003539058691",
            "tweet_text": "Rapid Week Tip \ud83d\udc19\n\n\ud83d\udd39 Publicly share an API  request response with RapidAPI for Mac by @seaotta\n\nIn RapidAPI for Mac, you can share an API request and response by generating a link and sharing it with others.\n\nThis way, anyone can view the API response within their browser. https://t.co/SkufKyhFj6",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjyFJxcWYAkoj4D.mp4\"]",
            "tweet_conversation_id": "1602302003539058691",
            "tweet_type": "Others",
            "created_at": "2022-12-12T13:59:01.000Z"
        },
        {
            "id": 4201,
            "username": "Rapid_API",
            "tweet_id": "1601335380871184385",
            "tweet_text": "That\u2019s all for now! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "Others",
            "created_at": "2022-12-09T21:58:00.000Z"
        },
        {
            "id": 4202,
            "username": "Rapid_API",
            "tweet_id": "1601335376785842176",
            "tweet_text": "\ud83d\udccc Use batching\n\nUse batch endpoints when accessing a large number of resources.\n\nFor example, if you need 100 posts, use/create a batch endpoint like `GET Many Posts` that will let you get all the posts in a single request.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "Others",
            "created_at": "2022-12-09T21:57:59.000Z"
        },
        {
            "id": 4203,
            "username": "Rapid_API",
            "tweet_id": "1601335372784574468",
            "tweet_text": "\ud83d\udccc Use caching\n\nCache frequently accessed data to reduce the number of API calls in your application.\n\nCaching will reduce your API usage and improve performance.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "Others",
            "created_at": "2022-12-09T21:57:58.000Z"
        },
        {
            "id": 4204,
            "username": "Rapid_API",
            "tweet_id": "1601335368716091394",
            "tweet_text": "\ud83d\udccc Avoid unnecessary calls\n\nImprove your code and eliminate excess API calls.\n\nSome API requests might be fetching data that is not being used. Remove them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "Others",
            "created_at": "2022-12-09T21:57:57.000Z"
        },
        {
            "id": 4205,
            "username": "Rapid_API",
            "tweet_id": "1601335364609794048",
            "tweet_text": "\ud83d\udccc Track response headers\n\nUse the `X-Rate-Limit`\nresponse headers to keep track of remaining calls. \n\nFor example, `X-Rate-Limit-Remaining: 500` means 500 calls left.\n\nIf you receive a response of \"429 - Too Many Requests\", you've hit the rate limit.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "Others",
            "created_at": "2022-12-09T21:57:56.000Z"
        },
        {
            "id": 4206,
            "username": "Rapid_API",
            "tweet_id": "1601335360272883712",
            "tweet_text": "\ud83d\udccc Monitor the API\n\nThe easiest solution is to regularly monitor your API usage to see your remaining rate and usage limits.\n\nAPI monitoring tools are very effective for this purpose. See how RapidAPI Studio monitors API usage. \u21b4\n\n\ud83d\udd17 https://t.co/fJq1xjZDkk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "Others",
            "created_at": "2022-12-09T21:57:55.000Z"
        },
        {
            "id": 4207,
            "username": "Rapid_API",
            "tweet_id": "1601335356233842689",
            "tweet_text": "Usage and rate limits are enforced by API providers to restrict the number of API calls in a specific period.\n\nIf you make too many calls, the API's rate limit will exceed and it will be unusable. \n\nSo, keep the following practices in mind to avoid being rate limited.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "Others",
            "created_at": "2022-12-09T21:57:54.000Z"
        },
        {
            "id": 4208,
            "username": "Rapid_API",
            "tweet_id": "1601335352186257412",
            "tweet_text": "Best practices to avoid API limits.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335352186257412",
            "tweet_type": "API tips",
            "created_at": "2022-12-09T21:57:53.000Z"
        },
        {
            "id": 4209,
            "username": "Rapid_API",
            "tweet_id": "1601286850324434945",
            "tweet_text": "That's all for this thread!\n\nIf you liked this, follow @Rapid_API for more exclusive content \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "Others",
            "created_at": "2022-12-09T18:45:10.000Z"
        },
        {
            "id": 4210,
            "username": "Rapid_API",
            "tweet_id": "1601286846243373059",
            "tweet_text": "It is also ideal to restrict GraphiQL and Introspection as they reveal information about your APIs schema, mutations, and even private fields. \n\nIf the API is internal, the best approach is to disable introspection entirely.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "Others",
            "created_at": "2022-12-09T18:45:09.000Z"
        },
        {
            "id": 4211,
            "username": "Rapid_API",
            "tweet_id": "1601286842132926464",
            "tweet_text": "5\ufe0f\u20e3 Mask errors\n\nDefault GraphQL configurations provide excessive error information which could be used maliciously. This is especially an issue for internal APIs.\n\nTo avoid exposing error details, disable debug mode and stack traces.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "Others",
            "created_at": "2022-12-09T18:45:08.000Z"
        },
        {
            "id": 4212,
            "username": "Rapid_API",
            "tweet_id": "1601286838169341953",
            "tweet_text": "4\ufe0f\u20e3 Use timeouts\n\nSome queries may take an unusually long time to process. The reason for this could be large or expensive queries, but in some cases, you might not know why.\n\nIn any case, it's recommended to configure timeouts for performance and security reasons.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "Others",
            "created_at": "2022-12-09T18:45:07.000Z"
        },
        {
            "id": 4213,
            "username": "Rapid_API",
            "tweet_id": "1601286834100781056",
            "tweet_text": "3\ufe0f\u20e3 Rate limit\n\nRate limiting GraphQL APIs is more complex than REST APIs.\n\nSeveral effective methods include IP-based limiting, limiting recursion depth, or applying a complexity score system, which calculates a limit based on the query type.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "Others",
            "created_at": "2022-12-09T18:45:06.000Z"
        },
        {
            "id": 4214,
            "username": "Rapid_API",
            "tweet_id": "1601286830095220737",
            "tweet_text": "2\ufe0f\u20e3 Validate input\n\nData input from clients can be a security risk, most commonly injection attacks.\n\nUse the GraphQL schema to support validation and reject any invalid input. Also, be cautious of using JSON scalars as they are typically more prone to being improperly validated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "Others",
            "created_at": "2022-12-09T18:45:05.000Z"
        },
        {
            "id": 4215,
            "username": "Rapid_API",
            "tweet_id": "1601286826098130944",
            "tweet_text": "1\ufe0f\u20e3 Limit query depth\n\nThe nature of GraphQL means it's possible to write large nested queries. These could overwhelm an API or consume too many resources.\n\nDepth limiting can be easily implemented and allows you to set a maximum depth, usually the depth of your deepest query.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "Others",
            "created_at": "2022-12-09T18:45:04.000Z"
        },
        {
            "id": 4216,
            "username": "Rapid_API",
            "tweet_id": "1601286822105079809",
            "tweet_text": "GraphQL security tips.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601286822105079809",
            "tweet_type": "API tips",
            "created_at": "2022-12-09T18:45:03.000Z"
        },
        {
            "id": 4217,
            "username": "Rapid_API",
            "tweet_id": "1601215337646751744",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601215313210654722",
            "tweet_type": "Others",
            "created_at": "2022-12-09T14:01:00.000Z"
        },
        {
            "id": 4218,
            "username": "Rapid_API",
            "tweet_id": "1601215333653700609",
            "tweet_text": "API documentation plays a crucial role here.\n\nEach endpoint must be thoroughly documented, including every argument and data type it expects.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601215313210654722",
            "tweet_type": "Others",
            "created_at": "2022-12-09T14:00:59.000Z"
        },
        {
            "id": 4219,
            "username": "Rapid_API",
            "tweet_id": "1601215329568538624",
            "tweet_text": "Endpoint = `posts/:id`\n\nHere \"posts\" refers to the resource collection, and \":id\" is the parameter we can send to the endpoint to obtain a particular resource.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601215313210654722",
            "tweet_type": "Others",
            "created_at": "2022-12-09T14:00:58.000Z"
        },
        {
            "id": 4220,
            "username": "Rapid_API",
            "tweet_id": "1601215325470597120",
            "tweet_text": "\ud83d\udccc  Example\n\nHere\u2019s what an API endpoint URL looks like:\n\n`https://t.co/VjYKzqRiIt`\n\nIt is created by joining the Base URL and endpoint.\n\nThe Base URL is the same for all endpoints. In our case:\n\nBase URL = `https://t.co/w7lsIVdWWH`",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601215313210654722",
            "tweet_type": "Others",
            "created_at": "2022-12-09T14:00:57.000Z"
        },
        {
            "id": 4221,
            "username": "Rapid_API",
            "tweet_id": "1601215321406218240",
            "tweet_text": "An API uses endpoints to enable data flow in a prescribed manner.\n\nIt can involve getting data out of the application, putting in new data, or updating it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601215313210654722",
            "tweet_type": "Others",
            "created_at": "2022-12-09T14:00:56.000Z"
        },
        {
            "id": 4222,
            "username": "Rapid_API",
            "tweet_id": "1601215317157576704",
            "tweet_text": "\ud83d\udccc  What is an API endpoint?\n\nA digital location known as an API endpoint is where an API receives inquiries about a particular resource on its server.\n\nAn API endpoint is typically a uniform resource locator (URL) that specifies where a resource is located on a server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601215313210654722",
            "tweet_type": "Others",
            "created_at": "2022-12-09T14:00:55.000Z"
        },
        {
            "id": 4223,
            "username": "Rapid_API",
            "tweet_id": "1601215313210654722",
            "tweet_text": "Understanding API endpoints.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601215313210654722",
            "tweet_type": "API tips",
            "created_at": "2022-12-09T14:00:54.000Z"
        },
        {
            "id": 4224,
            "username": "Rapid_API",
            "tweet_id": "1600972484433645568",
            "tweet_text": "Thanks for reading! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600972460136058886",
            "tweet_type": "Others",
            "created_at": "2022-12-08T21:55:59.000Z"
        },
        {
            "id": 4225,
            "username": "Rapid_API",
            "tweet_id": "1600972480436371456",
            "tweet_text": "\ud83d\udccc Use mocking\n\nMock the missing parts or data for the API to complete its testing without delays.\n\nIf your API connects to another API, you can mock that API and test its integration before production.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600972460136058886",
            "tweet_type": "Others",
            "created_at": "2022-12-08T21:55:58.000Z"
        },
        {
            "id": 4226,
            "username": "Rapid_API",
            "tweet_id": "1600972476426625024",
            "tweet_text": "\ud83d\udccc Perform negative testing\n\nYou have tested the API to see how it responds to valid data input.\n\nBut we should also test the API with invalid inputs to check how it deals with errors.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600972460136058886",
            "tweet_type": "Others",
            "created_at": "2022-12-08T21:55:57.000Z"
        },
        {
            "id": 4227,
            "username": "Rapid_API",
            "tweet_id": "1600972472345677827",
            "tweet_text": "\ud83d\udccc Use the right testing tool\n\nMost API developers use tools to test their APIs.\n\nA proper API testing tool can help you with functional testing, monitoring, and scheduling API tests.\n\nRead more about API testing tools here \n\u21b3 https://t.co/MrlefOLMu6",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600972460136058886",
            "tweet_type": "Others",
            "created_at": "2022-12-08T21:55:56.000Z"
        },
        {
            "id": 4228,
            "username": "Rapid_API",
            "tweet_id": "1600972468310663176",
            "tweet_text": "\ud83d\udccc Simulate production conditions\n\nTest the API in the exact conditions it will face in a production environment. \n\nThis is crucial for ensuring performance and security.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600972460136058886",
            "tweet_type": "Others",
            "created_at": "2022-12-08T21:55:55.000Z"
        },
        {
            "id": 4229,
            "username": "Rapid_API",
            "tweet_id": "1600972464301158406",
            "tweet_text": "\ud83d\udccc Start with a smoke test\n\nIt is a quick and simple test that verifies the API's basic functionalities. \n\nCall the API with test data and check its response. Confirm whether the response matches the expected behavior.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600972460136058886",
            "tweet_type": "Others",
            "created_at": "2022-12-08T21:55:54.000Z"
        },
        {
            "id": 4230,
            "username": "Rapid_API",
            "tweet_id": "1600972460136058886",
            "tweet_text": "API testing best practices\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600972460136058886",
            "tweet_type": "API tips",
            "created_at": "2022-12-08T21:55:53.000Z"
        },
        {
            "id": 4231,
            "username": "Rapid_API",
            "tweet_id": "1600915389613051927",
            "tweet_text": "We hope you liked this thread! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.\n\nVisit Rapid\u2019s API Hub to play around with 40,000 more APIs (https://t.co/2tM1EEQGY2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:07.000Z"
        },
        {
            "id": 4232,
            "username": "Rapid_API",
            "tweet_id": "1600915385452302465",
            "tweet_text": "\ud83d\udd1f OPENALPR API\n\nThe OPENALPR Cloud API is a web-based API that analyses images for license plates as well as vehicle information such as make, model, and color.\n\nhttps://t.co/Njvc6x6Zez",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:06.000Z"
        },
        {
            "id": 4233,
            "username": "Rapid_API",
            "tweet_id": "1600915381388021760",
            "tweet_text": "9\ufe0f\u20e3 https://t.co/hxFEurzZYW Watermark Detection API\n\nDetects artificially added watermarks, texts, and logos in images with an A.I. powered computer vision solution.\n\nhttps://t.co/lPVKpASyfN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:05.000Z"
        },
        {
            "id": 4234,
            "username": "Rapid_API",
            "tweet_id": "1600915377285992473",
            "tweet_text": "8\ufe0f\u20e3 Logo detection API\n\nTakes an image as an input and outputs the coordinates of the identified logo.\n\nhttps://t.co/0XBQiuOm12",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:04.000Z"
        },
        {
            "id": 4235,
            "username": "Rapid_API",
            "tweet_id": "1600915373183963150",
            "tweet_text": "7\ufe0f\u20e3 Pen to Print - Handwriting OCR API\n\nConverts scanned handwritten notes into editable text.\n\nhttps://t.co/oK6bmierEu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:03.000Z"
        },
        {
            "id": 4236,
            "username": "Rapid_API",
            "tweet_id": "1600915369023213593",
            "tweet_text": "6\ufe0f\u20e3 Background Removal API\n\nProvides image foreground segmentation with consequent background removal.\n\nhttps://t.co/G3WGqyNvB2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:02.000Z"
        },
        {
            "id": 4237,
            "username": "Rapid_API",
            "tweet_id": "1600915364992487433",
            "tweet_text": "5\ufe0f\u20e3 OCR - Extract Text API\n\nExtracts texts from images and supports all languages.\n\nhttps://t.co/kDBcpLELfc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:01.000Z"
        },
        {
            "id": 4238,
            "username": "Rapid_API",
            "tweet_id": "1600915360944984094",
            "tweet_text": "4\ufe0f\u20e3 Microsoft Computer Vision API\n\nA Microsoft Azure AI service that analyses content in images.\n\nhttps://t.co/lRA6QUFxgX",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:09:00.000Z"
        },
        {
            "id": 4239,
            "username": "Rapid_API",
            "tweet_id": "1600915356792623116",
            "tweet_text": "3\ufe0f\u20e3 VIN Recognition API\n\nDetects VIN numbers (Vehicle Identity Numbers) from images of IDs, documents, labels, invoices, etc.\n\nhttps://t.co/44ChDc3GG5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:08:59.000Z"
        },
        {
            "id": 4240,
            "username": "Rapid_API",
            "tweet_id": "1600915352724148238",
            "tweet_text": "2\ufe0f\u20e3 NSFW Image Classification API\n\nA content moderation API you can use to flag possible inappropriate content in your images.\n\nhttps://t.co/hbp88ZGJQh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:08:58.000Z"
        },
        {
            "id": 4241,
            "username": "Rapid_API",
            "tweet_id": "1600915348689227788",
            "tweet_text": "1\ufe0f\u20e3 Face Detection API\n\nUse Face Detection API to detect human faces in your images with additional options like age and gender.\n\nhttps://t.co/i82hMvGk4L",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:08:57.000Z"
        },
        {
            "id": 4242,
            "username": "Rapid_API",
            "tweet_id": "1600915344746582028",
            "tweet_text": "Top 10 visual recognition APIs.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600915344746582028",
            "tweet_type": "API tips",
            "created_at": "2022-12-08T18:08:56.000Z"
        },
        {
            "id": 4243,
            "username": "Rapid_API",
            "tweet_id": "1600852481873002496",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:08.000Z"
        },
        {
            "id": 4244,
            "username": "Rapid_API",
            "tweet_id": "1600852477829603329",
            "tweet_text": "As you may have noticed, XML supports attributes like they are supported in HTML.\n\nCategory = \"Customer\" is the attribute.\n\nProlog is: &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;.\n\nProlog is not required.\n\nIt details the encoding that was applied to the XML file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:07.000Z"
        },
        {
            "id": 4245,
            "username": "Rapid_API",
            "tweet_id": "1600852472083496960",
            "tweet_text": "As you can see, XML merely saves data as opposed to HTML.\n\nNo instructions are provided for formatting or displaying the data.\n\nXML supports the three structures.\n\nIt means you can easily define a list of objects. https://t.co/DXZskekqXs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjdezueXoAQbAak.jpg\"]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:06.000Z"
        },
        {
            "id": 4246,
            "username": "Rapid_API",
            "tweet_id": "1600852466668642308",
            "tweet_text": "\ud83d\udccc Example\n\nLet\u2019s look at an example where we use XML.\n\nThe following characteristics are used to describe the user:\n\n- first name\n- last name\n- age https://t.co/CJJZq94SyQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjdezYnXoAAJuq0.jpg\"]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:05.000Z"
        },
        {
            "id": 4247,
            "username": "Rapid_API",
            "tweet_id": "1600852462621040648",
            "tweet_text": "A wide range of software applications handle XML well, and it is also fairly simple to learn and use.\n\nUsers can specify their tags in XML.\n\nLike HTML tags, XML tags are not predefined.\n\nBecause users can build their own tags, XML is incredibly flexible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:04.000Z"
        },
        {
            "id": 4248,
            "username": "Rapid_API",
            "tweet_id": "1600852458581925890",
            "tweet_text": "The fact that XML is a very flexible format is just one of its many advantages.\n\nWeb pages, configuration files, databases, and APIs are just a few applications that can use XML.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:03.000Z"
        },
        {
            "id": 4249,
            "username": "Rapid_API",
            "tweet_id": "1600852454526128130",
            "tweet_text": "XML files can contain text, data, tables, and other elements, allowing documents to be transmitted and stored in their original format.\n\nXML documents are also easily parsed by various software applications, making them a good candidate for API output.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:02.000Z"
        },
        {
            "id": 4250,
            "username": "Rapid_API",
            "tweet_id": "1600852450541453312",
            "tweet_text": "XML (Extensible Markup Language) is a markup language used to encode documents in a human-readable and machine-readable format.\n\nIt is designed to transport and store data, as well as to define the structure of documents.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "Others",
            "created_at": "2022-12-08T13:59:01.000Z"
        },
        {
            "id": 4251,
            "username": "Rapid_API",
            "tweet_id": "1600852446498226176",
            "tweet_text": "What is XML format?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600852446498226176",
            "tweet_type": "API tips",
            "created_at": "2022-12-08T13:59:00.000Z"
        },
        {
            "id": 4252,
            "username": "Rapid_API",
            "tweet_id": "1600630783504433152",
            "tweet_text": "Hope you enjoyed this short tutorial.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:11.000Z"
        },
        {
            "id": 4253,
            "username": "Rapid_API",
            "tweet_id": "1600630778538475520",
            "tweet_text": "The PUT request created in Fastify is displayed in the example below.\n\nWe're getting the User ID from the request parameters. https://t.co/yvsPYPKibP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjaVLVTWQAE7-MR.jpg\"]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:10.000Z"
        },
        {
            "id": 4254,
            "username": "Rapid_API",
            "tweet_id": "1600630773412945920",
            "tweet_text": "The simple POST request created in Fastify is displayed in the example below.\n\nAs you can see, this situation calls for the POST technique.\n\nBy using the \"request.body\" method, we are also receiving the request payload. https://t.co/4DOQYsBqbt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjaVK-cXoAcG0q2.jpg\"]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:09.000Z"
        },
        {
            "id": 4255,
            "username": "Rapid_API",
            "tweet_id": "1600630768283402240",
            "tweet_text": "You can access your newly created server at http://localhost:3000\n\nYou should receive the following: https://t.co/uC6oE76AxJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjaVKrtXoAA8rQ5.jpg\"]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:08.000Z"
        },
        {
            "id": 4256,
            "username": "Rapid_API",
            "tweet_id": "1600630764156092419",
            "tweet_text": "The server is then actually launched on port 3000 using the \"app.listen\" function.\n\nWe also implemented a GET method that provides a simple JSON response.\n\nReturning to the command line, type \"node index.js\" to start the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:07.000Z"
        },
        {
            "id": 4257,
            "username": "Rapid_API",
            "tweet_id": "1600630758384828418",
            "tweet_text": "2\ufe0f\u20e3 Server code\n\nMake a file called index.js in the project folder.\n\nSimple Fastify server code running on port 3000 can be found below.\n\nBefore creating the app, we first need to import Fastify (saved in the app variable) https://t.co/N30vLoyG3g",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjaVKMtX0AEPq69.jpg\"]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:05.000Z"
        },
        {
            "id": 4258,
            "username": "Rapid_API",
            "tweet_id": "1600630752944816129",
            "tweet_text": "1\ufe0f\u20e3 Initiate a new project and install Fastify\n\nRun the following commands after opening your terminal: https://t.co/uB6hjAoknR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjaVJ4FXkAArIPY.jpg\"]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:04.000Z"
        },
        {
            "id": 4259,
            "username": "Rapid_API",
            "tweet_id": "1600630748951765001",
            "tweet_text": "Fastify is a Node.js based web framework that provides low-latency, high-performance, and extensible.\n\nLet's learn how to build a basic API server with Fastify.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "Others",
            "created_at": "2022-12-07T23:18:03.000Z"
        },
        {
            "id": 4260,
            "username": "Rapid_API",
            "tweet_id": "1600630745021747200",
            "tweet_text": "How to create a simple API with Fastify\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600630745021747200",
            "tweet_type": "API tips",
            "created_at": "2022-12-07T23:18:02.000Z"
        },
        {
            "id": 4261,
            "username": "Rapid_API",
            "tweet_id": "1600567882999635973",
            "tweet_text": "Follow @Rapid_API for more exclusive content.  \ud83d\udc19 \ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "Others",
            "created_at": "2022-12-07T19:08:15.000Z"
        },
        {
            "id": 4262,
            "username": "Rapid_API",
            "tweet_id": "1600567878985596934",
            "tweet_text": "Creating a mock API can be challenging, so here is a guide on how to do it using Rapid API Hub.\n\u21b3 https://t.co/ZjOeRK8t0N",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "Others",
            "created_at": "2022-12-07T19:08:14.000Z"
        },
        {
            "id": 4263,
            "username": "Rapid_API",
            "tweet_id": "1600567875017785353",
            "tweet_text": "\ud83d\udccc  Challenges\n\n- Mock API requires maintenance. It may become obsolete if the old request and response data is not updated.\n\n- Mock API's effectiveness depends on the accuracy of the example responses and server interactions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "Others",
            "created_at": "2022-12-07T19:08:13.000Z"
        },
        {
            "id": 4264,
            "username": "Rapid_API",
            "tweet_id": "1600567871020613654",
            "tweet_text": "\ud83d\udccc  Static vs. Dynamic mocking\n\nFor static mocking, we specify example responses for each endpoint, and they are not affected by the input. \n\nDynamic mock responses are able to change according to the input parameters of the API call.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "Others",
            "created_at": "2022-12-07T19:08:12.000Z"
        },
        {
            "id": 4265,
            "username": "Rapid_API",
            "tweet_id": "1600567867061190670",
            "tweet_text": "It can be expensive and time-consuming to call actual APIs to test them during integration. \n\nInstead, we mock their responses through mock APIs and complete integration.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "Others",
            "created_at": "2022-12-07T19:08:11.000Z"
        },
        {
            "id": 4266,
            "username": "Rapid_API",
            "tweet_id": "1600567862933995531",
            "tweet_text": "\ud83d\udccc  Why are mock APIs used?\n\nIt can take time to complete building the real API. \n\nWithout a mock API, development may pause until the API is ready.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "Others",
            "created_at": "2022-12-07T19:08:10.000Z"
        },
        {
            "id": 4267,
            "username": "Rapid_API",
            "tweet_id": "1600567858454568963",
            "tweet_text": "\ud83d\udccc API mocking\n\nAPI Mocking lets you imitate and test a real API by emulating its responses, response behaviors, and endpoints.\n\nMock APIs give an idea of the actual API by imitating it on a smaller scale.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "Others",
            "created_at": "2022-12-07T19:08:09.000Z"
        },
        {
            "id": 4268,
            "username": "Rapid_API",
            "tweet_id": "1600567854516113408",
            "tweet_text": "What is API mocking?\n\nA thread \ud83d\udc47\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600567854516113408",
            "tweet_type": "API tips",
            "created_at": "2022-12-07T19:08:08.000Z"
        },
        {
            "id": 4269,
            "username": "Rapid_API",
            "tweet_id": "1600490047811248130",
            "tweet_text": "\u201cWe selected people based on criteria like the impact of their work and the size of their personal networks.\u201d \u2013 Business Insider.\n\n\u2728 Read all about it here\n\u21b3 https://t.co/EdgKvOr8yJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600490042731929607",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:58:57.000Z"
        },
        {
            "id": 4270,
            "username": "Rapid_API",
            "tweet_id": "1600490042731929607",
            "tweet_text": "Business Insider names our founder and CEO, @iddogino, as one of the top 100 people building the next-generation internet. \ud83d\udea8 https://t.co/5i1BvjxnYW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYVNV4X0AY9nZN.jpg\"]",
            "tweet_conversation_id": "1600490042731929607",
            "tweet_type": "Others",
            "created_at": "2022-12-07T13:58:56.000Z"
        },
        {
            "id": 4271,
            "username": "Rapid_API",
            "tweet_id": "1600235139136720902",
            "tweet_text": "Thanks for reading! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:06:02.000Z"
        },
        {
            "id": 4272,
            "username": "Rapid_API",
            "tweet_id": "1600235134866923520",
            "tweet_text": "3\ufe0f\u20e3 Request Queues\n\nThis means limiting the number of requests per a given period, for example, allowing only ten requests per second.\n\nThere are many libraries available that implement request queuing for you, for example, Amazon Simple Queue Service (ASQS).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:06:01.000Z"
        },
        {
            "id": 4273,
            "username": "Rapid_API",
            "tweet_id": "1600235130928390149",
            "tweet_text": "2\ufe0f\u20e3 Rate Limiting algorithms\n\nThere are several algorithms used to control API calls. The most popular are leaky bucket, fixed window, and sliding log.\n\nEach implements slightly different methods, but all apply scalable and trusted rate limiting.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:06:00.000Z"
        },
        {
            "id": 4274,
            "username": "Rapid_API",
            "tweet_id": "1600235126759251984",
            "tweet_text": "1\ufe0f\u20e3 Throttling\n\nThere are various algorithms for throttling. However, most algorithms first assess if the request exceeds the enforced limit.\n\nIf the limit is exceeded, the throttle is triggered, and the client will have their bandwidth reduced or be disconnected entirely.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:05:59.000Z"
        },
        {
            "id": 4275,
            "username": "Rapid_API",
            "tweet_id": "1600235122824994819",
            "tweet_text": "It is considered essential to rate limit both on the server and client sides to maximize efficiency and minimize latency.\n\nLet\u2019s look at the most common methods of rate limiting \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "API tips",
            "created_at": "2022-12-06T21:05:58.000Z"
        },
        {
            "id": 4276,
            "username": "Rapid_API",
            "tweet_id": "1600235118689484803",
            "tweet_text": "API owners can apply rate limiting on the server by limiting TPS (transactions per second) or limiting the number of requests clients make, which is called application rate limiting.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:05:57.000Z"
        },
        {
            "id": 4277,
            "username": "Rapid_API",
            "tweet_id": "1600235114713210889",
            "tweet_text": "Rate limiting is also excellent for API scalability. \n\nIf your API experiences a spike in usage or evolves to become more popular over time, rate limiting will keep control of the request flow and resource usage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:05:56.000Z"
        },
        {
            "id": 4278,
            "username": "Rapid_API",
            "tweet_id": "1600235110774759431",
            "tweet_text": "Without rate limiting, your API is at risk of malicious attacks because clients can send unlimited requests to the API server. \n\nThis means APIs are targets of DDoS attacks and bots sending an influx of requests, resulting in a massive traffic spike and an overloaded server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:05:55.000Z"
        },
        {
            "id": 4279,
            "username": "Rapid_API",
            "tweet_id": "1600235106819612672",
            "tweet_text": "Rate limiting restricts the number of API calls a user can make in a given period.\n\nImplementing rate limiting on your API is a best practice and not only improves performance but is an essential security method.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "Others",
            "created_at": "2022-12-06T21:05:55.000Z"
        },
        {
            "id": 4280,
            "username": "Rapid_API",
            "tweet_id": "1600235102897856516",
            "tweet_text": "What exactly is API rate limiting, and how does it work?\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600235102897856516",
            "tweet_type": "API tips",
            "created_at": "2022-12-06T21:05:54.000Z"
        },
        {
            "id": 4281,
            "username": "Rapid_API",
            "tweet_id": "1600183756551233538",
            "tweet_text": "Rapid Week Announcement \ud83d\udc19\ud83d\udea8\n\nWe\u2019re bringing you a whole week of helpful and interesting tips straight from Rapid Engineers.\n\nBe sure to keep an eye out for it next week.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600183756551233538",
            "tweet_type": "Others",
            "created_at": "2022-12-06T17:41:52.000Z"
        },
        {
            "id": 4282,
            "username": "Rapid_API",
            "tweet_id": "1600129176790478849",
            "tweet_text": "That\u2019s all for now!\n\nGo ahead and install RapidAPI Client and start testing your APIs inside VS Code. \n\u21b3 https://t.co/En66s2sZDZ\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600129171295858692",
            "tweet_type": "Others",
            "created_at": "2022-12-06T14:04:59.000Z"
        },
        {
            "id": 4283,
            "username": "Rapid_API",
            "tweet_id": "1600129174412222464",
            "tweet_text": "We can use environment variables for parameters, headers, and authentication in API requests.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600129171295858692",
            "tweet_type": "Others",
            "created_at": "2022-12-06T14:04:58.000Z"
        },
        {
            "id": 4284,
            "username": "Rapid_API",
            "tweet_id": "1600129171295858692",
            "tweet_text": "RapidAPI Client for VS Code Tip! \ud83d\udc19\n\nUse environment variables as API request parameters.\n\nRapidAPI Client lets you define and use environment variables for API calls in VS Code. https://t.co/pjMYYlFkDl",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjTMmiWXgAQpS-1.mp4\"]",
            "tweet_conversation_id": "1600129171295858692",
            "tweet_type": "VS Code tips",
            "created_at": "2022-12-06T14:04:58.000Z"
        },
        {
            "id": 4285,
            "username": "Rapid_API",
            "tweet_id": "1599904711209017349",
            "tweet_text": "I hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:13:02.000Z"
        },
        {
            "id": 4286,
            "username": "Rapid_API",
            "tweet_id": "1599904707178291202",
            "tweet_text": "6\ufe0f\u20e3 PTR DNS record\n\nA PTR record is a Domain Name System (DNS) record that maps an IP address to a hostname.\n\nPTR records are used for reverse DNS lookups.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:13:01.000Z"
        },
        {
            "id": 4287,
            "username": "Rapid_API",
            "tweet_id": "1599904703046877185",
            "tweet_text": "If there are numerous mail servers accessible, the MX record also includes a preference value that is utilized to prioritize message delivery.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:13:00.000Z"
        },
        {
            "id": 4288,
            "username": "Rapid_API",
            "tweet_id": "1599904699045527553",
            "tweet_text": "5\ufe0f\u20e3 MX DNS record\n\nMX (Mail Exchange) is a DNS record that specifies a mail server responsible for accepting email messages on behalf of a recipient's domain.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:12:59.000Z"
        },
        {
            "id": 4289,
            "username": "Rapid_API",
            "tweet_id": "1599904695044251649",
            "tweet_text": "4\ufe0f\u20e3 NS DNS record\n\nNS (Name Server) DNS record specifies which DNS server is responsible for a particular zone.\n\nIn other words, the NS record defines the authoritative name servers for a domain.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:12:58.000Z"
        },
        {
            "id": 4290,
            "username": "Rapid_API",
            "tweet_id": "1599904690874957825",
            "tweet_text": "3\ufe0f\u20e3 TXT DNS record\n\nA TXT DNS record stores text-based data associated with a domain name.\n\nThis data can be used for various purposes, such as verifying ownership of the domain or providing additional information about the domain.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:12:57.000Z"
        },
        {
            "id": 4291,
            "username": "Rapid_API",
            "tweet_id": "1599904686592720898",
            "tweet_text": "2\ufe0f\u20e3 CNAME DNS record\n\nCNAME records are used to alias one domain name to another.\n\nFor example, you could use a CNAME record to redirect `https://t.co/evFFf2I2zS` to `https://t.co/MulqsNU8XP`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:12:56.000Z"
        },
        {
            "id": 4292,
            "username": "Rapid_API",
            "tweet_id": "1599904682578743296",
            "tweet_text": "1\ufe0f\u20e3 A DNS record\n\nA DNS record maps a domain name to the IP address (Version 4) of the computer hosting the domain.\n\nFor instance, the domain `https://t.co/g9a0BIcMRD` maps to IP 172.66.41.2.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:12:55.000Z"
        },
        {
            "id": 4293,
            "username": "Rapid_API",
            "tweet_id": "1599904678573129728",
            "tweet_text": "DNS is used by everyone who accesses the internet, making it one of the most critical components of the internet infrastructure.\n\nHere are a few most common ones.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:12:54.000Z"
        },
        {
            "id": 4294,
            "username": "Rapid_API",
            "tweet_id": "1599904673900666881",
            "tweet_text": "The Domain Name System (DNS) is a fundamental part of the internet, providing a way to match domain names (such as `https://t.co/evFFf2I2zS`) with the numerical IP addresses that computers use to connect to each other.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:12:53.000Z"
        },
        {
            "id": 4295,
            "username": "Rapid_API",
            "tweet_id": "1599904669958119430",
            "tweet_text": "Domain name system (DNS) most common records\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599904669958119430",
            "tweet_type": "API tips",
            "created_at": "2022-12-05T23:12:52.000Z"
        },
        {
            "id": 4296,
            "username": "Rapid_API",
            "tweet_id": "1599822440171028502",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599822409607135252",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:46:07.000Z"
        },
        {
            "id": 4297,
            "username": "Rapid_API",
            "tweet_id": "1599822433728565248",
            "tweet_text": "\ud83d\udccc Call an API\n\nWe can use HTTP GET method to call an API using Axios. \n\nLet\u2019s use the Famous Quotes API from RapidAPI Hub. \u200b\u200b\u2192 https://t.co/rSjFv0pvGe https://t.co/lZ56L5j5Fe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjO1_pjXwAEvDas.jpg\"]",
            "tweet_conversation_id": "1599822409607135252",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:46:06.000Z"
        },
        {
            "id": 4298,
            "username": "Rapid_API",
            "tweet_id": "1599822427126743041",
            "tweet_text": "\ud83d\udccc Syntax\n\nAn API call is a promise that either rejects or resolves. To call APIs in JavaScript, we either use promise-chaining or async/await.\n\nLet\u2019s look at both syntaxes with Axios. https://t.co/noisyvc51p",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjO1_AhXwAIqpsU.jpg\"]",
            "tweet_conversation_id": "1599822409607135252",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:46:04.000Z"
        },
        {
            "id": 4299,
            "username": "Rapid_API",
            "tweet_id": "1599822421762232321",
            "tweet_text": "\ud83d\udccc  Import\n\nOnce installed, you can import it via Commonjs/ES6 syntax:\n\nimport axios from 'axios'\n\nor \n\nconst axios = require('axios') https://t.co/IWgf59pUuL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjO1-mzXgAABdUi.jpg\"]",
            "tweet_conversation_id": "1599822409607135252",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:46:03.000Z"
        },
        {
            "id": 4300,
            "username": "Rapid_API",
            "tweet_id": "1599822417576312832",
            "tweet_text": "\ud83d\udccc Installation and Import\n\nYou can install Axios using npm:\n\nnpm install axios",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599822409607135252",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:46:02.000Z"
        },
        {
            "id": 4301,
            "username": "Rapid_API",
            "tweet_id": "1599822413587529747",
            "tweet_text": "\ud83d\udccc What is Axios?\n\nIt is an open-source, promise-based HTTP client. \n\nIt uses JavaScript\u2019s promises to send HTTP requests and manage their responses.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599822409607135252",
            "tweet_type": "Others",
            "created_at": "2022-12-05T17:46:01.000Z"
        },
        {
            "id": 4302,
            "username": "Rapid_API",
            "tweet_id": "1599822409607135252",
            "tweet_text": "Call APIs using Axios.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599822409607135252",
            "tweet_type": "API tips",
            "created_at": "2022-12-05T17:46:00.000Z"
        },
        {
            "id": 4303,
            "username": "Rapid_API",
            "tweet_id": "1599776733200539648",
            "tweet_text": "That\u2019s all for now!\n\nGo ahead and install RapidAPI Client and start testing your APIs inside VS Code. \n\u21b3https://t.co/En66s2bWBZ\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599776723582611456",
            "tweet_type": "Others",
            "created_at": "2022-12-05T14:44:30.000Z"
        },
        {
            "id": 4304,
            "username": "Rapid_API",
            "tweet_id": "1599776729693765634",
            "tweet_text": "\ud83d\udccc Generate API request snippets\n\nOne of the features that RapidAPI Client offers is that you can generate code snippets for implementing API requests in your applications. \n\nThe RapidAPI extension automatically generates code snippets in 40+ languages. https://t.co/bmIWh2KjIL",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjOMXbeXwAA6iWy.mp4\"]",
            "tweet_conversation_id": "1599776723582611456",
            "tweet_type": "Others",
            "created_at": "2022-12-05T14:44:29.000Z"
        },
        {
            "id": 4305,
            "username": "Rapid_API",
            "tweet_id": "1599776726779068417",
            "tweet_text": "\ud83d\udccc RapidAPI Client for VS Code\n\nIt is a full-featured HTTP client that lets you test and describes the APIs you build or consume inside VS Code. \n\nLink \u2192 https://t.co/En66s2bWBZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599776723582611456",
            "tweet_type": "Others",
            "created_at": "2022-12-05T14:44:28.000Z"
        },
        {
            "id": 4306,
            "username": "Rapid_API",
            "tweet_id": "1599776723582611456",
            "tweet_text": "Generate API Request Snippets inside VS Code\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599776723582611456",
            "tweet_type": "API tips",
            "created_at": "2022-12-05T14:44:27.000Z"
        },
        {
            "id": 4307,
            "username": "Rapid_API",
            "tweet_id": "1599400641155268610",
            "tweet_text": "That\u2019s all for now!\n\nGo ahead and install RapidAPI Client and start testing your APIs inside VS Code. \n\u21b3 https://t.co/En66s2boMr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599400632284323843",
            "tweet_type": "Others",
            "created_at": "2022-12-04T13:50:02.000Z"
        },
        {
            "id": 4308,
            "username": "Rapid_API",
            "tweet_id": "1599400637237788673",
            "tweet_text": "If you use a cURL command, the method, headers, and body will automatically be populated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599400632284323843",
            "tweet_type": "Others",
            "created_at": "2022-12-04T13:50:02.000Z"
        },
        {
            "id": 4309,
            "username": "Rapid_API",
            "tweet_id": "1599400632284323843",
            "tweet_text": "RapidAPI Client for VS Code Tip! \ud83d\udc19\n\nGot a URL in your clipboard or a cURL command? \n\nThen you can use the RapidAPI: Create new request from clipboard command to create the request automatically. https://t.co/UIWsfpI5rF",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjI2XwmXgAIfFqT.mp4\"]",
            "tweet_conversation_id": "1599400632284323843",
            "tweet_type": "VS Code tips",
            "created_at": "2022-12-04T13:50:00.000Z"
        },
        {
            "id": 4310,
            "username": "Rapid_API",
            "tweet_id": "1599095655003136001",
            "tweet_text": "That\u2019s all for now!\n\nGo ahead and install RapidAPI Client and start testing your APIs inside VS Code. \n\u21b3https://t.co/En66s2sZDZ\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:38:08.000Z"
        },
        {
            "id": 4311,
            "username": "Rapid_API",
            "tweet_id": "1599095650716876800",
            "tweet_text": "5\ufe0f\u20e3 Generate types &amp; interfaces from API response\n\nRapidAPI Client for VS Code can automatically generate response types for you.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:38:07.000Z"
        },
        {
            "id": 4312,
            "username": "Rapid_API",
            "tweet_id": "1599095647818330112",
            "tweet_text": "4\ufe0f\u20e3 Code snippet generation\n\nThe RapidAPI Client for VS Code automatically generates code snippets in 40+ languages. \n\nAll you need is to select the language and the package you want to call API, and RapidAPI Client will generate the snippet for you.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:38:06.000Z"
        },
        {
            "id": 4313,
            "username": "Rapid_API",
            "tweet_id": "1599095644874248192",
            "tweet_text": "3\ufe0f\u20e3 VS Code theme support\n\nYou can use your favorite VS Code theme with the RapidAPI extension.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:38:06.000Z"
        },
        {
            "id": 4314,
            "username": "Rapid_API",
            "tweet_id": "1599095641585553408",
            "tweet_text": "2\ufe0f\u20e3 Environment variables\n\nCreate and use different environments and environment variables during API testing. https://t.co/F98sqKL5wd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjEg1VvWAAACU96.jpg\"]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:38:05.000Z"
        },
        {
            "id": 4315,
            "username": "Rapid_API",
            "tweet_id": "1599095638171402240",
            "tweet_text": "\ud83d\udccc RapidAPI Client features\n\n1\ufe0f\u20e3 Call APIs from VS Code\n\nYou can test your APIs with an easy-to-use and intuitive UI. https://t.co/7aeOMvbQYR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjEgx3vXgAAffB8.jpg\"]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:38:04.000Z"
        },
        {
            "id": 4316,
            "username": "Rapid_API",
            "tweet_id": "1599095635055022082",
            "tweet_text": "\ud83d\udccc RapidAPI Client for VS Code\n\nIt is a full-featured HTTP client that lets you test and describes the APIs you build or consume inside VS Code. \n\nLink \u2192 https://t.co/En66s2sZDZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "Others",
            "created_at": "2022-12-03T17:38:03.000Z"
        },
        {
            "id": 4317,
            "username": "Rapid_API",
            "tweet_id": "1599095632068608000",
            "tweet_text": "Test your APIs inside VS Code\n\n\u200b\u200bThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599095632068608000",
            "tweet_type": "API tips",
            "created_at": "2022-12-03T17:38:03.000Z"
        },
        {
            "id": 4318,
            "username": "Rapid_API",
            "tweet_id": "1598792159683125272",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598792135314219036",
            "tweet_type": "Others",
            "created_at": "2022-12-02T21:32:09.000Z"
        },
        {
            "id": 4319,
            "username": "Rapid_API",
            "tweet_id": "1598792154419236864",
            "tweet_text": "\ud83d\udccc Delete data from session storage\n\nWe can delete a single data entry using sessionStorage.removeItem() method.\n\nIf we want to clear everything, we can use the clear() method. https://t.co/UXbz3xqbvS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjAM978XoAwhehY.jpg\"]",
            "tweet_conversation_id": "1598792135314219036",
            "tweet_type": "Others",
            "created_at": "2022-12-02T21:32:08.000Z"
        },
        {
            "id": 4320,
            "username": "Rapid_API",
            "tweet_id": "1598792149138653185",
            "tweet_text": "\ud83d\udccc Read data from session storage\n\nWe can get the data using the getItem() method.\n\nIf you are retrieving an object/array, make sure you parse it afterward. https://t.co/9a2KjScMdC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjAM9dAXoAYvVJx.jpg\"]",
            "tweet_conversation_id": "1598792135314219036",
            "tweet_type": "Others",
            "created_at": "2022-12-02T21:32:07.000Z"
        },
        {
            "id": 4321,
            "username": "Rapid_API",
            "tweet_id": "1598792143778324508",
            "tweet_text": "\ud83d\udccc Save data in session storage\n\nWe can use the setItem() method to save data inside session storage. \n\nSession storage can only save strings. If you have to store objects/arrays, convert them to strings. https://t.co/N9ksgoYmt7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjAM85VXoBUn5Cu.jpg\"]",
            "tweet_conversation_id": "1598792135314219036",
            "tweet_type": "Others",
            "created_at": "2022-12-02T21:32:05.000Z"
        },
        {
            "id": 4322,
            "username": "Rapid_API",
            "tweet_id": "1598792139533688837",
            "tweet_text": "It is a form of Web storage API that temporarily saves data in the web browser.\n\nThe application data you save here gets cleared out after closing the browser or the tab.\n\nLike local storage, the data is not transferred to the server and is readily available on the client side.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598792135314219036",
            "tweet_type": "Others",
            "created_at": "2022-12-02T21:32:04.000Z"
        },
        {
            "id": 4323,
            "username": "Rapid_API",
            "tweet_id": "1598792135314219036",
            "tweet_text": "Session Storage. What is it?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598792135314219036",
            "tweet_type": "API tips",
            "created_at": "2022-12-02T21:32:03.000Z"
        },
        {
            "id": 4324,
            "username": "Rapid_API",
            "tweet_id": "1598736262587977734",
            "tweet_text": "Thanks for reading! \ud83d\udc19\n\nFollow @Rapid_API for more of our exclusive content!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:50:02.000Z"
        },
        {
            "id": 4325,
            "username": "Rapid_API",
            "tweet_id": "1598736258414645255",
            "tweet_text": "The dataset might not be big enough to require pagination, but it will be needed in the future if the data grows.\n\nIt's good practice to keep this in mind when designing an API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:50:01.000Z"
        },
        {
            "id": 4326,
            "username": "Rapid_API",
            "tweet_id": "1598736254195073024",
            "tweet_text": "Pagination is essential if you're dealing with large datasets and many endpoints.\n\nHowever, it is also good to implement it in smaller datasets depending on the API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:50:00.000Z"
        },
        {
            "id": 4327,
            "username": "Rapid_API",
            "tweet_id": "1598736249610723328",
            "tweet_text": "3\ufe0f\u20e3 Cursor pagination\n\nThe server returns a cursor with each request, which points toward the next set page.\n\nThere are reverse and forward cursors, allowing you to go forwards or back a page. Cursors are typically encrypted strings, so they can be hard to manipulate by clients.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:49:59.000Z"
        },
        {
            "id": 4328,
            "username": "Rapid_API",
            "tweet_id": "1598736245357776901",
            "tweet_text": "2\ufe0f\u20e3 Keyset pagination\n\nKeyset pagination uses a key as a reference to manage the data returned data. \n\nThis key is passed as a query parameter and is used with a timestamp to page the data as needed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:49:58.000Z"
        },
        {
            "id": 4329,
            "username": "Rapid_API",
            "tweet_id": "1598736241167667232",
            "tweet_text": "1\ufe0f\u20e3 Offset pagination\n\nThis is seen in SQL-based apps using the commands \u2018limit\u2019 and \u2018offset\u2019 already present in the SQL library.\n\n\u2018limit\u2019 defines the number of items returned, and \u2018offset\u2019 indicates the number of items that should be skipped.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:49:57.000Z"
        },
        {
            "id": 4330,
            "username": "Rapid_API",
            "tweet_id": "1598736236981751810",
            "tweet_text": "This is where pagination can help. There are a few different types of pagination depending on your needs. These are:\n\n1. Offset pagination\n2. Keyset pagination\n3. Seek pagination",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:49:56.000Z"
        },
        {
            "id": 4331,
            "username": "Rapid_API",
            "tweet_id": "1598736232808419355",
            "tweet_text": "APIs that serve large databases can return thousands, if not millions, of entities in a response.\n\nSuch large responses can take significantly longer to compile and load.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:49:55.000Z"
        },
        {
            "id": 4332,
            "username": "Rapid_API",
            "tweet_id": "1598736228605726724",
            "tweet_text": "API pagination is when a response is divided and returned in several pages instead of all at once.\n\nYou can think of pagination like Google search results, where you have several pages of results instead of one long page returned.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:49:54.000Z"
        },
        {
            "id": 4333,
            "username": "Rapid_API",
            "tweet_id": "1598736224562434048",
            "tweet_text": "What exactly is API pagination?\n\nA thread \ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598736224562434048",
            "tweet_type": "API tips",
            "created_at": "2022-12-02T17:49:53.000Z"
        },
        {
            "id": 4334,
            "username": "Rapid_API",
            "tweet_id": "1598678163621568512",
            "tweet_text": "Thanks for reading this week\u2019s Rapid Comic! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.\n\nAlso, visit RapidAPI Hub to discover over 40,000 APIs (https://t.co/2tM1EEQGY2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598678132470562819",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:59:10.000Z"
        },
        {
            "id": 4335,
            "username": "Rapid_API",
            "tweet_id": "1598678158559121410",
            "tweet_text": "{ 6 / 6 } https://t.co/eUCdABNaM5",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-lSQ0XEAAufzL.jpg\"]",
            "tweet_conversation_id": "1598678132470562819",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:59:09.000Z"
        },
        {
            "id": 4336,
            "username": "Rapid_API",
            "tweet_id": "1598678153412710401",
            "tweet_text": "{ 5 / 6 } https://t.co/jJMcGld3Wf",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-lR4mXoAMkfqA.jpg\"]",
            "tweet_conversation_id": "1598678132470562819",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:59:08.000Z"
        },
        {
            "id": 4337,
            "username": "Rapid_API",
            "tweet_id": "1598678148408922112",
            "tweet_text": "{ 4 / 6 } https://t.co/OJRdwZbWec",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-lRZoXEAEn71V.jpg\"]",
            "tweet_conversation_id": "1598678132470562819",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:59:07.000Z"
        },
        {
            "id": 4338,
            "username": "Rapid_API",
            "tweet_id": "1598678142549360640",
            "tweet_text": "{ 3 / 6 } https://t.co/Xer4OneKDW",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-lQ9FXwAEwfGu.jpg\"]",
            "tweet_conversation_id": "1598678132470562819",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:59:05.000Z"
        },
        {
            "id": 4339,
            "username": "Rapid_API",
            "tweet_id": "1598678137398779906",
            "tweet_text": "{ 2 / 6 } https://t.co/2dwcPBUIAn",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-lQsKWYAoSsDa.jpg\"]",
            "tweet_conversation_id": "1598678132470562819",
            "tweet_type": "Others",
            "created_at": "2022-12-02T13:59:04.000Z"
        },
        {
            "id": 4340,
            "username": "Rapid_API",
            "tweet_id": "1598678132470562819",
            "tweet_text": "What exactly is API rate limiting?\n\nA thread \ud83d\udc47\n\n{ 1 / 6 } https://t.co/hjMxbtq2V5",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-lQYFXoAA4xaF.jpg\"]",
            "tweet_conversation_id": "1598678132470562819",
            "tweet_type": "API tips",
            "created_at": "2022-12-02T13:59:03.000Z"
        },
        {
            "id": 4341,
            "username": "Rapid_API",
            "tweet_id": "1598481057061474304",
            "tweet_text": "If you found this thread useful, follow @Rapid_API for more. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598481037130186752",
            "tweet_type": "Others",
            "created_at": "2022-12-02T00:55:57.000Z"
        },
        {
            "id": 4342,
            "username": "Rapid_API",
            "tweet_id": "1598481053018120195",
            "tweet_text": "\ud83d\udccc Applications\n\nThey are mostly used for event-based real-time applications like:\n\n- Analytics.\n- Chat applications.\n- Collaborative editing/coding.\n- Social feeds.\n\nFor more detail, check out our guide on GraphQL Subscriptions.\n\nhttps://t.co/tVUlKHqqn9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598481037130186752",
            "tweet_type": "Others",
            "created_at": "2022-12-02T00:55:56.000Z"
        },
        {
            "id": 4343,
            "username": "Rapid_API",
            "tweet_id": "1598481048974905352",
            "tweet_text": "\ud83d\udccc Advantages\n\nThey are fast and great for real-time data updates.\n\nYou don't have to request large objects repeatedly when only a few of the object's fields change. Subscriptions can fetch updates to individual fields.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598481037130186752",
            "tweet_type": "Others",
            "created_at": "2022-12-02T00:55:55.000Z"
        },
        {
            "id": 4344,
            "username": "Rapid_API",
            "tweet_id": "1598481044944084992",
            "tweet_text": "\ud83d\udccc How do they work?\n\nA subscription is a continuously living request that pushes data to the client whenever a specific event happens.\n\nBecause of their long-lived nature, they use the WebSocket protocol instead of HTTP.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598481037130186752",
            "tweet_type": "Others",
            "created_at": "2022-12-02T00:55:54.000Z"
        },
        {
            "id": 4345,
            "username": "Rapid_API",
            "tweet_id": "1598481041022402560",
            "tweet_text": "\ud83d\udccc GraphQL Subscriptions\n\nIn addition to queries and mutations, GraphQL offers a third operation type called subscriptions. \n\nWhile queries/mutations fetch data immediately, GraphQL Subscriptions provide a way to fetch data in real-time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598481037130186752",
            "tweet_type": "Others",
            "created_at": "2022-12-02T00:55:53.000Z"
        },
        {
            "id": 4346,
            "username": "Rapid_API",
            "tweet_id": "1598481037130186752",
            "tweet_text": "What are GraphQL Subscriptions?\n\nA thread \ud83d\udc47\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598481037130186752",
            "tweet_type": "API tips",
            "created_at": "2022-12-02T00:55:52.000Z"
        },
        {
            "id": 4347,
            "username": "Rapid_API",
            "tweet_id": "1598393013537050625",
            "tweet_text": "We hope you found this helpful! \n\nFollow @Rapid_API for more of our exclusive content. \ud83d\udc19\ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "Others",
            "created_at": "2022-12-01T19:06:05.000Z"
        },
        {
            "id": 4348,
            "username": "Rapid_API",
            "tweet_id": "1598393009476964352",
            "tweet_text": "\ud83d\udccc Features\n\nAxios offers additional features that are not natively available in Fetch, such as:\n\n- Request timeouts\n- Request interceptors\n- Simultaneous requests\n\nFor more detail, read our in-depth guide:\nhttps://t.co/B7JCmdXLzP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "Others",
            "created_at": "2022-12-01T19:06:04.000Z"
        },
        {
            "id": 4349,
            "username": "Rapid_API",
            "tweet_id": "1598393005438013440",
            "tweet_text": "\ud83d\udccc Compatibility\n\nAxios is backward compatible with older browsers since it uses XMLHttpRequest under the hood.\n\nFetch supports relatively newer browsers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "Others",
            "created_at": "2022-12-01T19:06:03.000Z"
        },
        {
            "id": 4350,
            "username": "Rapid_API",
            "tweet_id": "1598393001201598474",
            "tweet_text": "\ud83d\udccc Data transformation\n\nAxios automatically converts the response data into JSON. With Fetch, you need to convert it using `response.json`.\n\nThe same goes for sending body data. Axios automatically stringifies the data but Fetch does not.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "Others",
            "created_at": "2022-12-01T19:06:02.000Z"
        },
        {
            "id": 4351,
            "username": "Rapid_API",
            "tweet_id": "1598392995157524482",
            "tweet_text": "To use Axios, you need to install it using npm or yarn. Unlike Fetch, you can use a different function for each HTTP method like `axios.get`, `https://t.co/T5tM7yCUeb`, etc.\n\nHere is what an Axios API call looks like. https://t.co/xIVT3FLa6V",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi6h72EWAAEj2Ns.jpg\"]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "Others",
            "created_at": "2022-12-01T19:06:01.000Z"
        },
        {
            "id": 4352,
            "username": "Rapid_API",
            "tweet_id": "1598392989298163713",
            "tweet_text": "\ud83d\udccc Basic Usage\n\nFetch offers the `fetch()` method to send API requests. It takes multiple arguments, like the API endpoint's URL, HTTP method, and parameters. \n\nHere is what an example API call looks like. https://t.co/KbwSUTGeQy",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi6h7JeWQAAhgMU.jpg\"]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "Others",
            "created_at": "2022-12-01T19:06:00.000Z"
        },
        {
            "id": 4353,
            "username": "Rapid_API",
            "tweet_id": "1598392985355517970",
            "tweet_text": "Axios is the most popular HTTP client library available on npm.\n\nOn the other hand, Fetch is a web API included in all modern browsers. We don\u2019t have to install it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "Others",
            "created_at": "2022-12-01T19:05:59.000Z"
        },
        {
            "id": 4354,
            "username": "Rapid_API",
            "tweet_id": "1598392981429649422",
            "tweet_text": "Differences between Axios and Fetch for making API calls.\n\nThread \ud83d\udc47\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598392981429649422",
            "tweet_type": "API tips",
            "created_at": "2022-12-01T19:05:58.000Z"
        },
        {
            "id": 4355,
            "username": "Rapid_API",
            "tweet_id": "1598315976243691523",
            "tweet_text": "\u26a1\ufe0fFill out the survey below for a chance to win Rapid Swag kits and T-shirts.\n\nTake the survey here\n\u21b3https://t.co/RyKpTqxtPV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598315969868431361",
            "tweet_type": "Others",
            "created_at": "2022-12-01T13:59:58.000Z"
        },
        {
            "id": 4356,
            "username": "Rapid_API",
            "tweet_id": "1598315969868431361",
            "tweet_text": "Last chance to participate in the world's largest API survey. \ud83d\udea8\ud83d\udea8\ud83d\udea8 https://t.co/Iyn3uvO0T6",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi5b51IX0AMXfEi.png\"]",
            "tweet_conversation_id": "1598315969868431361",
            "tweet_type": "Others",
            "created_at": "2022-12-01T13:59:57.000Z"
        },
        {
            "id": 4357,
            "username": "Rapid_API",
            "tweet_id": "1598103067982962689",
            "tweet_text": "That's the end of this thread! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598103044092305408",
            "tweet_type": "Others",
            "created_at": "2022-11-30T23:53:57.000Z"
        },
        {
            "id": 4358,
            "username": "Rapid_API",
            "tweet_id": "1598103064011051008",
            "tweet_text": "5\ufe0f\u20e3 Input validation\n\nInput validation means ensuring incoming data and requests are received in the correct format. \n\nWithout Input validation, APIs can be vulnerable to code injection attacks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598103044092305408",
            "tweet_type": "Others",
            "created_at": "2022-11-30T23:53:56.000Z"
        },
        {
            "id": 4359,
            "username": "Rapid_API",
            "tweet_id": "1598103060030652419",
            "tweet_text": "4\ufe0f\u20e3 Rate limiting\n\nRate limiting restricts the number of API calls made to the server. \n\nRate limiting prevents bots from potentially sending hundreds or thousands of API requests in a short amount of time and overloading the server to breaking point.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598103044092305408",
            "tweet_type": "Others",
            "created_at": "2022-11-30T23:53:55.000Z"
        },
        {
            "id": 4360,
            "username": "Rapid_API",
            "tweet_id": "1598103056058556416",
            "tweet_text": "3\ufe0f\u20e3 One-way password hashing\n\nPasswords should never be stored in plain cleartext. \n\nOne-way hashing (encryption) applies an algorithm that scrambles the data in an irreversible way, keeping it hidden from attackers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598103044092305408",
            "tweet_type": "Others",
            "created_at": "2022-11-30T23:53:54.000Z"
        },
        {
            "id": 4361,
            "username": "Rapid_API",
            "tweet_id": "1598103052073959424",
            "tweet_text": "2\ufe0f\u20e3 API keys\n\nAPI keys enable user authorization and control API access.\n\nThey can be used to limit the rate of API calls, prevent information from being public, or only allow access to data based on a subscription if the service is paid.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598103044092305408",
            "tweet_type": "Others",
            "created_at": "2022-11-30T23:53:53.000Z"
        },
        {
            "id": 4362,
            "username": "Rapid_API",
            "tweet_id": "1598103048072601602",
            "tweet_text": "1\ufe0f\u20e3 Always use HTTPS\n\nAny HTTP-only connection is more prone to being hacked. \n\nAn HTTPS connection uses SSL/TLS certificates to encrypt network connections and considerably removes the risk of attacks like MITM (Man- in-the-middle-attack).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598103044092305408",
            "tweet_type": "Others",
            "created_at": "2022-11-30T23:53:52.000Z"
        },
        {
            "id": 4363,
            "username": "Rapid_API",
            "tweet_id": "1598103044092305408",
            "tweet_text": "Five ways to secure API endpoints.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598103044092305408",
            "tweet_type": "API tips",
            "created_at": "2022-11-30T23:53:51.000Z"
        },
        {
            "id": 4364,
            "username": "Rapid_API",
            "tweet_id": "1598034618745327616",
            "tweet_text": "That's it for this thread! \n\nFor more exclusive content, follow @Rapid_API \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598034594628083712",
            "tweet_type": "Others",
            "created_at": "2022-11-30T19:21:57.000Z"
        },
        {
            "id": 4365,
            "username": "Rapid_API",
            "tweet_id": "1598034614743928853",
            "tweet_text": "5\ufe0f\u20e3 Parameter tampering\n\nParameter tampering aims to manipulate parameters sent in API requests, creating access to potentially sensitive information. \n\nParameter tampering is done mainly through input forms submitted by clients on the web.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598034594628083712",
            "tweet_type": "Others",
            "created_at": "2022-11-30T19:21:56.000Z"
        },
        {
            "id": 4366,
            "username": "Rapid_API",
            "tweet_id": "1598034610755145752",
            "tweet_text": "4\ufe0f\u20e3 MITM (Man-in-the-middle attack)\n\nMITM attacks are when a hacker intercepts communication between two programs to obtain the information being transferred between them.\n\nThis risk is much greater if the data in transit is not encrypted, which is why using HTTPS is standard.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598034594628083712",
            "tweet_type": "Others",
            "created_at": "2022-11-30T19:21:55.000Z"
        },
        {
            "id": 4367,
            "username": "Rapid_API",
            "tweet_id": "1598034606703403008",
            "tweet_text": "3\ufe0f\u20e3 Excessive data exposure\n\nThis is where an API returns unneeded or sensitive data in its responses that could be valuable to hackers.\n\nThis is commonly seen where APIs return complete datasets as they are on backend servers, and the client is relied on to filter the results.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598034594628083712",
            "tweet_type": "Others",
            "created_at": "2022-11-30T19:21:54.000Z"
        },
        {
            "id": 4368,
            "username": "Rapid_API",
            "tweet_id": "1598034602668527639",
            "tweet_text": "2\ufe0f\u20e3 DDoS (Distributed Denial of Service) attack\n\nThis aims to disrupt a server with a large amount of traffic. It essentially creates a traffic jam, with no traffic able to be transferred to and from the server. \n\nThis can break the API by making its data inaccessible to users.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598034594628083712",
            "tweet_type": "Others",
            "created_at": "2022-11-30T19:21:53.000Z"
        },
        {
            "id": 4369,
            "username": "Rapid_API",
            "tweet_id": "1598034598600052761",
            "tweet_text": "1\ufe0f\u20e3 API Injection Attack\n\nInjection attacks are carried out by inserting malicious code into the API via a query or request to obtain unauthorized access to data.\n\nThese are most commonly SQL injection attacks, which insert malicious SQL code as a parameter field.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598034594628083712",
            "tweet_type": "Others",
            "created_at": "2022-11-30T19:21:53.000Z"
        },
        {
            "id": 4370,
            "username": "Rapid_API",
            "tweet_id": "1598034594628083712",
            "tweet_text": "An overview of the most common attacks carried out on APIs.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598034594628083712",
            "tweet_type": "API tips",
            "created_at": "2022-11-30T19:21:52.000Z"
        },
        {
            "id": 4371,
            "username": "Rapid_API",
            "tweet_id": "1597997396277006338",
            "tweet_text": "That's all for this thread! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:54:03.000Z"
        },
        {
            "id": 4372,
            "username": "Rapid_API",
            "tweet_id": "1597997392258895874",
            "tweet_text": "As you can see, there are many options for curl. Initially, it might seem confusing. \n\nHowever, curl is a powerful tool widely used thanks to its convenience and efficiency. curl can effectively streamline testing and interaction with your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:54:02.000Z"
        },
        {
            "id": 4373,
            "username": "Rapid_API",
            "tweet_id": "1597997388182036481",
            "tweet_text": "\ud83d\udccc -o \n-o is followed by a specified file and redirects the returned data there instead of the standard output.\n\n\ud83d\udccc -H\nAdds additional HTTP Headers to a request. It is followed by the header name and value in enclosed quotes, e.g.\n\nCurl -H \u2018[Header name: value]\u2019 [URL]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:54:01.000Z"
        },
        {
            "id": 4374,
            "username": "Rapid_API",
            "tweet_id": "1597997383845027841",
            "tweet_text": "Other commonly used options are:\n\n\ud83d\udccc -I \nThis command returns HTTP header fields such as Content-Type, Date, etc.\n\n\ud83d\udccc -v \nThe \u2018verbose\u2019 command, which returns data to tell you everything that happened when you ran the curl request, including connection info and headers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:54:00.000Z"
        },
        {
            "id": 4375,
            "username": "Rapid_API",
            "tweet_id": "1597997379822682112",
            "tweet_text": "curl can be used for authentication and sending all the usual HTTP method requests (GET, POST, DELETE, etc.)\n\nThis is done using the -X option. For example, a POST request syntax is as follows:\n\ncurl -X POST [URL]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:53:59.000Z"
        },
        {
            "id": 4376,
            "username": "Rapid_API",
            "tweet_id": "1597997375800414208",
            "tweet_text": "There are over 200 curl commands that can be used. Most follow this basic format:\n\ncurl [option] [URL]\n\nYou can run \u2018curl \u2013help\u2019 or simply \u2018-h\u2019 in your command line to get a list of all the available curl commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:53:58.000Z"
        },
        {
            "id": 4377,
            "username": "Rapid_API",
            "tweet_id": "1597997371803291649",
            "tweet_text": "A curl request, in its most basic form, looks like this:\n\ncurl [URL]\n\nBy default, curl requests that only specify a URL are sent as GET requests. So the example above would return the HTML source for the specified URL.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:53:57.000Z"
        },
        {
            "id": 4378,
            "username": "Rapid_API",
            "tweet_id": "1597997367709638658",
            "tweet_text": "Curl is widely used across the web and is highly portable. It is compatible with almost every operating system and supports many protocols, including HTTPS, FTP, SMPT, POP3, and more.\n\nIn terms of APIs, curl is great for testing endpoints.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:53:56.000Z"
        },
        {
            "id": 4379,
            "username": "Rapid_API",
            "tweet_id": "1597997363720818688",
            "tweet_text": "Client URL (curl) is a command line tool used to transfer data. Curl uses URLs to specify where a request is sent, followed by the data to be transferred.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "Others",
            "created_at": "2022-11-30T16:53:55.000Z"
        },
        {
            "id": 4380,
            "username": "Rapid_API",
            "tweet_id": "1597997359769722885",
            "tweet_text": "What is curl, and how does it work?\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597997359769722885",
            "tweet_type": "API tips",
            "created_at": "2022-11-30T16:53:54.000Z"
        },
        {
            "id": 4381,
            "username": "Rapid_API",
            "tweet_id": "1597645349807689729",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found it useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:08.000Z"
        },
        {
            "id": 4382,
            "username": "Rapid_API",
            "tweet_id": "1597645345621696519",
            "tweet_text": "The HMAC method is used by the client to check the message's validity once it has been received.\n\nIt is possible to tell whether a request is legitimate after comparing the derived signature with the one given by the webhook provider.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:07.000Z"
        },
        {
            "id": 4383,
            "username": "Rapid_API",
            "tweet_id": "1597645341645496321",
            "tweet_text": "You can employ a signature verification strategy in this situation.\n\nThis is how it works:\n\nThe client receives a message from the webhook provider that has been secured using the HMAC cryptography technique.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:06.000Z"
        },
        {
            "id": 4384,
            "username": "Rapid_API",
            "tweet_id": "1597645337572904962",
            "tweet_text": "\ud83d\udccc Signature verification strategy\n\nUnfortunately, you can't use this technique in all cases.\n\nYou must employ a different security strategy if the webhook URL needs to be accessed by hundreds of unidentified IP addresses.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:05.000Z"
        },
        {
            "id": 4385,
            "username": "Rapid_API",
            "tweet_id": "1597645333584089088",
            "tweet_text": "\ud83d\udccc Authorized IPs list\n\nUtilizing the authorized IPs list is one of the simplest ways to stop others from visiting the URL.\n\nYou create firewall rules that, by default, block all access to the webhook URL.\n\nThen you add IP addresses with permitted access to a whitelist.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:04.000Z"
        },
        {
            "id": 4386,
            "username": "Rapid_API",
            "tweet_id": "1597645329632985089",
            "tweet_text": "This endpoint is openly accessible. Thus, any application may call it.\n\nTherefore, you should check that the requests your API endpoint receive come from the appropriate source.\n\nYou can accomplish this using a quick verification procedure.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:04.000Z"
        },
        {
            "id": 4387,
            "username": "Rapid_API",
            "tweet_id": "1597645325648502785",
            "tweet_text": "\ud83d\udccc Secure webhooks\n\nYou can easily avoid the request being readable by using an HTTPS connection in place of HTTP.\n\nInstalling the SSL certificate on the web server that hosts the webhook URL is all that is necessary to accomplish this.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:03.000Z"
        },
        {
            "id": 4388,
            "username": "Rapid_API",
            "tweet_id": "1597645321630269453",
            "tweet_text": "\ud83d\udccc What is a webhook?\n\nA webhook is a way for an app to provide other apps with real-time information.\n\nA webhook delivers data to other applications as it happens, meaning you get data immediately.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "Others",
            "created_at": "2022-11-29T17:35:02.000Z"
        },
        {
            "id": 4389,
            "username": "Rapid_API",
            "tweet_id": "1597645317675143170",
            "tweet_text": "How to secure Webhooks?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597645317675143170",
            "tweet_type": "API tips",
            "created_at": "2022-11-29T17:35:01.000Z"
        },
        {
            "id": 4390,
            "username": "Rapid_API",
            "tweet_id": "1597592714744324099",
            "tweet_text": "I hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "Others",
            "created_at": "2022-11-29T14:05:59.000Z"
        },
        {
            "id": 4391,
            "username": "Rapid_API",
            "tweet_id": "1597592710365560832",
            "tweet_text": "4\ufe0f\u20e3 Remote API\n\nA remote API is an API that enables access to information and assets kept on a distant server.\n\nMobile applications that need to retrieve data from a server that is not on the same device as the application often use this kind of API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "Others",
            "created_at": "2022-11-29T14:05:58.000Z"
        },
        {
            "id": 4392,
            "username": "Rapid_API",
            "tweet_id": "1597592706301235206",
            "tweet_text": "Every OS, for instance, has its own API.\n\nDoesn't matter if it is Windows, Linux, or macOS. All provide APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "Others",
            "created_at": "2022-11-29T14:05:57.000Z"
        },
        {
            "id": 4393,
            "username": "Rapid_API",
            "tweet_id": "1597592702266347520",
            "tweet_text": "3\ufe0f\u20e3 Operating systems APIs\n\nA set of coding directives known as an operating system API enables software to communicate with the operating system.\n\nThis can involve operations like showing information on the screen, opening and shutting files, and memory management.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "Others",
            "created_at": "2022-11-29T14:05:56.000Z"
        },
        {
            "id": 4394,
            "username": "Rapid_API",
            "tweet_id": "1597592698260754434",
            "tweet_text": "The database may be:\n\n\ud83d\udc49 proprietary: e.g., MSSQL, DB2, or Oracle\n\n\ud83d\udc49 open source: e.g., MongoDB, MySQL, or Postgress.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "Others",
            "created_at": "2022-11-29T14:05:55.000Z"
        },
        {
            "id": 4395,
            "username": "Rapid_API",
            "tweet_id": "1597592694167162885",
            "tweet_text": "2\ufe0f\u20e3 Database API\n\nA database API is a collection of coding guidelines that enables software to communicate with databases.\n\nData from the database may be retrieved, new data may be added to the database, or current data may be updated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "Others",
            "created_at": "2022-11-29T14:05:54.000Z"
        },
        {
            "id": 4396,
            "username": "Rapid_API",
            "tweet_id": "1597592690014781440",
            "tweet_text": "1\ufe0f\u20e3 Web API\n\nA web API is an application programming interface for a web server or a web browser.\n\nIt is a web development concept typically only used on the client side of web applications.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "Others",
            "created_at": "2022-11-29T14:05:53.000Z"
        },
        {
            "id": 4397,
            "username": "Rapid_API",
            "tweet_id": "1597592685984026624",
            "tweet_text": "Let\u2019s look at different API use cases\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597592685984026624",
            "tweet_type": "API tips",
            "created_at": "2022-11-29T14:05:52.000Z"
        },
        {
            "id": 4398,
            "username": "Rapid_API",
            "tweet_id": "1597364486792527872",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597364461681131520",
            "tweet_type": "Others",
            "created_at": "2022-11-28T22:59:05.000Z"
        },
        {
            "id": 4399,
            "username": "Rapid_API",
            "tweet_id": "1597364481352499200",
            "tweet_text": "\ud83d\udccc Delete data from local storage\n\nYou can delete a single data entry using localstorage.removeItem() method.\n\nIf you want to clear everything, you can use the clear() method. https://t.co/eSWsV0c2ci",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fir6gWnXgAUK5DE.jpg\"]",
            "tweet_conversation_id": "1597364461681131520",
            "tweet_type": "Others",
            "created_at": "2022-11-28T22:59:04.000Z"
        },
        {
            "id": 4400,
            "username": "Rapid_API",
            "tweet_id": "1597364475912413184",
            "tweet_text": "\ud83d\udccc Read data from local storage\n\nYou can get the data using the getItem() method. If you are retrieving an object/array, make sure you parse it afterward. https://t.co/QzKjRcZQgF",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fir6f49XwAIBC6R.jpg\"]",
            "tweet_conversation_id": "1597364461681131520",
            "tweet_type": "Others",
            "created_at": "2022-11-28T22:59:03.000Z"
        },
        {
            "id": 4401,
            "username": "Rapid_API",
            "tweet_id": "1597364470053064705",
            "tweet_text": "\ud83d\udccc Save data in local storage\n\nLocal storage provides a setItem() method that we can use to store data. https://t.co/EQ9uqiyJ0S",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fir6fViXkAc4wbr.jpg\"]",
            "tweet_conversation_id": "1597364461681131520",
            "tweet_type": "Others",
            "created_at": "2022-11-28T22:59:01.000Z"
        },
        {
            "id": 4402,
            "username": "Rapid_API",
            "tweet_id": "1597364465841889285",
            "tweet_text": "\ud83d\udccc  What is local storage?\n\nIt is an API that lets you store data in the browser for extended periods of time. \n\nLocal storage can only save strings. If you need to save an array/object, convert it to string using JSON.stringify() and then save it in the local storage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597364461681131520",
            "tweet_type": "Others",
            "created_at": "2022-11-28T22:59:00.000Z"
        },
        {
            "id": 4403,
            "username": "Rapid_API",
            "tweet_id": "1597364461681131520",
            "tweet_text": "Local Storage. What is it?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597364461681131520",
            "tweet_type": "API tips",
            "created_at": "2022-11-28T22:58:59.000Z"
        },
        {
            "id": 4404,
            "username": "Rapid_API",
            "tweet_id": "1597279161030430720",
            "tweet_text": "Hope you enjoyed this short tutorial.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:20:02.000Z"
        },
        {
            "id": 4405,
            "username": "Rapid_API",
            "tweet_id": "1597279156622004224",
            "tweet_text": "Tokens are incredibly adaptable and work with multiple platforms.\n\nAdditionally, there is nothing like domain restriction. \n\nTokens can be transferred between various domains.\n\nBecause they are self-contained, they are larger in size than cookies.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:20:01.000Z"
        },
        {
            "id": 4406,
            "username": "Rapid_API",
            "tweet_id": "1597279152519913472",
            "tweet_text": "The tokens stand alone.\n\nThis signifies that the token has all the data needed for server-side verification.\n\nSince no database searches are necessary, they are appropriate for API authentication.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:20:00.000Z"
        },
        {
            "id": 4407,
            "username": "Rapid_API",
            "tweet_id": "1597279148405272577",
            "tweet_text": "2\ufe0f\u20e3 Tokens\n\nIn essence, tokens are a collection of letters and numbers.\n\nTokens have no state.\n\nIt implies that no information about the token needs to be stored on the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:19:59.000Z"
        },
        {
            "id": 4408,
            "username": "Rapid_API",
            "tweet_id": "1597279144039022592",
            "tweet_text": "You can use the \"HttpOnly\" setting to prevent JavaScript tampering on client sites.\n\nRemember that only HTTPS connections are secure for cookies.\n\nThe \"Secure\" flag can be used for this reason. \n\nIt ensures that cookies will be sent only if the connection type is HTTPS.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:19:58.000Z"
        },
        {
            "id": 4409,
            "username": "Rapid_API",
            "tweet_id": "1597279139886731264",
            "tweet_text": "Cookies allow a domain and its subdomains to exchange information.\n\nSharing cookie information with another domain is not possible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:19:57.000Z"
        },
        {
            "id": 4410,
            "username": "Rapid_API",
            "tweet_id": "1597279135688265729",
            "tweet_text": "Session cookies are stateful.\n\nEach session has a unique ID that the server uses to identify the current user and all the information related to that user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:19:56.000Z"
        },
        {
            "id": 4411,
            "username": "Rapid_API",
            "tweet_id": "1597279131229917184",
            "tweet_text": "1\ufe0f\u20e3 Session Cookies\n\nSession Cookies are small data stored both on the server and the client.\n\nThe server often keeps track of sessions in a database or memory.\n\nA browser controls cookies on the client side. They're included with every request.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:19:55.000Z"
        },
        {
            "id": 4412,
            "username": "Rapid_API",
            "tweet_id": "1597279126594867201",
            "tweet_text": "The two most common types of authentication are session cookies and tokens.\n\nLet's compare the two and highlight their differences, benefits, and drawbacks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "Others",
            "created_at": "2022-11-28T17:19:54.000Z"
        },
        {
            "id": 4413,
            "username": "Rapid_API",
            "tweet_id": "1597279122233126912",
            "tweet_text": "Difference between Session Cookies and Tokens\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597279122233126912",
            "tweet_type": "API tips",
            "created_at": "2022-11-28T17:19:53.000Z"
        },
        {
            "id": 4414,
            "username": "Rapid_API",
            "tweet_id": "1597228550435704838",
            "tweet_text": "\ud83d\udccc What is RapidAPI Client?\n\nIt is an extension that enables API development and testing inside VS Code.\n\nThis course gives a perspective on developing, testing, and monetizing your APIs using RapidAPI Client.\n\nStart here \u21b4\n\ud83d\udd17 https://t.co/EPU0ASnXKb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597228545868169218",
            "tweet_type": "Others",
            "created_at": "2022-11-28T13:58:56.000Z"
        },
        {
            "id": 4415,
            "username": "Rapid_API",
            "tweet_id": "1597228545868169218",
            "tweet_text": "RapidAPI Client for VS Code \u26a1\n\nBringing you a practical course on how to build, consume, and test APIs without leaving VS Code.\n\n\ud83d\udd25 Get the complete course for free!\n\ud83d\udd17 https://t.co/EPU0ASFz8L https://t.co/1mBlESvVJx",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fip-5KGWAAEOqfZ.jpg\"]",
            "tweet_conversation_id": "1597228545868169218",
            "tweet_type": "Others",
            "created_at": "2022-11-28T13:58:55.000Z"
        },
        {
            "id": 4416,
            "username": "Rapid_API",
            "tweet_id": "1596506812617875462",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596506791629684739",
            "tweet_type": "Others",
            "created_at": "2022-11-26T14:11:00.000Z"
        },
        {
            "id": 4417,
            "username": "Rapid_API",
            "tweet_id": "1596506808205512704",
            "tweet_text": "\ud83d\udccc How to secure endpoints?\n\n1\ufe0f\u20e3 Use HTTPs protocol as it is more secure than HTTP.\n\n2\ufe0f\u20e3 Use asymmetric (or \u201cone-way\u201d) encryption algorithms for storing passwords.\n\n3\ufe0f\u20e3 Enforce rate limiting to prevent DoS attacks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596506791629684739",
            "tweet_type": "Others",
            "created_at": "2022-11-26T14:10:59.000Z"
        },
        {
            "id": 4418,
            "username": "Rapid_API",
            "tweet_id": "1596506803935670273",
            "tweet_text": "\ud83d\udccc Components of an API endpoint\n\n1\ufe0f\u20e3 Description: short detail on the data accepted/returned by the endpoint.\n\n2\ufe0f\u20e3 HTTP Method: the HTTP verb used to request the endpoint.\n\n3\ufe0f\u20e3 Headers and Parameters: details about the required headers and parameters to access the information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596506791629684739",
            "tweet_type": "Others",
            "created_at": "2022-11-26T14:10:58.000Z"
        },
        {
            "id": 4419,
            "username": "Rapid_API",
            "tweet_id": "1596506799812771840",
            "tweet_text": "\ud83d\udccc Role of an API endpoint\n\nThe API endpoint dictates the location of the resource and where the request is sent. \n\nEach endpoint locates a unique piece of data. The API cannot access the data if the endpoint is faulty or incorrect.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596506791629684739",
            "tweet_type": "Others",
            "created_at": "2022-11-26T14:10:57.000Z"
        },
        {
            "id": 4420,
            "username": "Rapid_API",
            "tweet_id": "1596506795715235840",
            "tweet_text": "\ud83d\udccc What is an API endpoint?\n\nThey are the communication touchpoints between the API and the server. In REST APIs, API endpoints are URLs that act as access points to an API and its resources.\n\nHere is an example:\n\nhttps:// api .com/cars",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596506791629684739",
            "tweet_type": "Others",
            "created_at": "2022-11-26T14:10:56.000Z"
        },
        {
            "id": 4421,
            "username": "Rapid_API",
            "tweet_id": "1596506791629684739",
            "tweet_text": "API endpoint. What is it?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596506791629684739",
            "tweet_type": "API tips",
            "created_at": "2022-11-26T14:10:55.000Z"
        },
        {
            "id": 4422,
            "username": "Rapid_API",
            "tweet_id": "1596228330319400960",
            "tweet_text": "It\u2019s not too late to take Rapid Developer Survey. \ud83d\udc19\n\nAt the end of it, we will randomly select five people and send them Rapid Swag kits and T-shirts. \u26a1\ufe0f \n\nTake the survey today! \ud83d\udc47 \u21b4\nhttps://t.co/RyKpTqy1Ft https://t.co/E6ar7G6v4D",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596228330319400960",
            "tweet_type": "API tips",
            "created_at": "2022-11-25T19:44:25.000Z"
        },
        {
            "id": 4423,
            "username": "Rapid_API",
            "tweet_id": "1596142669222363136",
            "tweet_text": "Thanks for reading! \ud83d\udc19\n\nTo discover 40,000 more APIs, visit Rapid\u2019s Hub (https://t.co/2tM1EEQGY2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596142653195829249",
            "tweet_type": "Others",
            "created_at": "2022-11-25T14:04:01.000Z"
        },
        {
            "id": 4424,
            "username": "Rapid_API",
            "tweet_id": "1596142663786532869",
            "tweet_text": "FIFA Ultimate Team API \u2192 (https://t.co/SQz7ma8TVX)\n\nWorld Cup API \u2192 (https://t.co/UH5sJF8Wt5)\n\n{ 3 / 3 } https://t.co/N6fGg2Toqo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiajR_nXwAAEcJZ.jpg\"]",
            "tweet_conversation_id": "1596142653195829249",
            "tweet_type": "Others",
            "created_at": "2022-11-25T14:04:00.000Z"
        },
        {
            "id": 4425,
            "username": "Rapid_API",
            "tweet_id": "1596142658371584000",
            "tweet_text": "FIFA 2022 Schedule and Stats API \u2192 (https://t.co/23wDJ4X82R)\n\nFIFA Data API \u2192 (https://t.co/E5Y4pNR9tg)\n\n{ 2 / 3 } https://t.co/HubZjDRVIj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiajRouWIAYmLwm.jpg\"]",
            "tweet_conversation_id": "1596142653195829249",
            "tweet_type": "Others",
            "created_at": "2022-11-25T14:03:59.000Z"
        },
        {
            "id": 4426,
            "username": "Rapid_API",
            "tweet_id": "1596142653195829249",
            "tweet_text": "The FIFA World Cup has kicked off!\n\nA thread \ud83d\udc47 https://t.co/uw8fsnITVO",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiajRQFWAAUXFlR.jpg\"]",
            "tweet_conversation_id": "1596142653195829249",
            "tweet_type": "API tips",
            "created_at": "2022-11-25T14:03:58.000Z"
        },
        {
            "id": 4427,
            "username": "Rapid_API",
            "tweet_id": "1595942107998478337",
            "tweet_text": "Thanks for reading! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:47:04.000Z"
        },
        {
            "id": 4428,
            "username": "Rapid_API",
            "tweet_id": "1595942103921881088",
            "tweet_text": "\ud83d\udccc Documentation requires maintenance and will evolve as your API evolves. Keep it up-to-date with the API's latest changes.\n\n\ud83d\udccc Ensure your documentation is well-structured.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:47:03.000Z"
        },
        {
            "id": 4429,
            "username": "Rapid_API",
            "tweet_id": "1595942099647574018",
            "tweet_text": "Extra tips:\n\n\ud83d\udccc Writing documentation from scratch may not be the best option. There are open-source frameworks that provide a foundation for writing documentation.\n\n\ud83d\udccc Keep your docs accessible to developers of all skill levels by avoiding overly technical explanations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:47:02.000Z"
        },
        {
            "id": 4430,
            "username": "Rapid_API",
            "tweet_id": "1595942095386443776",
            "tweet_text": "7\ufe0f\u20e3 FAQs/comments\n\nAPI documentation is becoming increasingly more interactive. Allowing a comments section enables feedback from users, making you aware of any problems or where to improve.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:47:01.000Z"
        },
        {
            "id": 4431,
            "username": "Rapid_API",
            "tweet_id": "1595942091263287296",
            "tweet_text": "6\ufe0f\u20e3 Error and debugging\n\nYour documentation should provide a section on errors. You should know which status codes can be returned by which endpoints and give solutions to common errors.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:47:00.000Z"
        },
        {
            "id": 4432,
            "username": "Rapid_API",
            "tweet_id": "1595942087303860225",
            "tweet_text": "5\ufe0f\u20e3 Link external resources\n\nIf your API uses external tools such as OAuth for authentication, provide links to appropriate resources that developers can use to understand your API fully.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:46:59.000Z"
        },
        {
            "id": 4433,
            "username": "Rapid_API",
            "tweet_id": "1595942083394781184",
            "tweet_text": "4\ufe0f\u20e3 Provide reference documentation\n\nThis means providing a list of endpoints, available requests and response fields, and authentication information.\n\nThis information should be kept up-to-date. It can also be automated to stay in sync with your latest API updates.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:46:58.000Z"
        },
        {
            "id": 4434,
            "username": "Rapid_API",
            "tweet_id": "1595942079330336768",
            "tweet_text": "3\ufe0f\u20e3 Code snippet examples\n\nCode snippet examples should support text explanations in various programming languages or at least the most widely used.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:46:57.000Z"
        },
        {
            "id": 4435,
            "username": "Rapid_API",
            "tweet_id": "1595942075182219264",
            "tweet_text": "2\ufe0f\u20e3 Start with your API specification\n\nAPI specs can be used to generate documentation. This both is a human and machine-readable description of your API. The benefit of this is automation.\n\nA popular example is the OpenAPI spec, with which you can describe your API's features.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:46:56.000Z"
        },
        {
            "id": 4436,
            "username": "Rapid_API",
            "tweet_id": "1595942071122399232",
            "tweet_text": "Here are several essential points to include in your API documentation.\n\n1\ufe0f\u20e3 Getting started info\n\nStart by providing a straightforward and practical explanation of how to use your API, which is why most developers initially come to documentation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:46:55.000Z"
        },
        {
            "id": 4437,
            "username": "Rapid_API",
            "tweet_id": "1595942066944606208",
            "tweet_text": "Quality API documentation is vital to create a good developer experience around your API.\n\nDocumentation is what explains the functionality of your API as well as how to use it. It is also a resource that developers can return to if they have issues or questions about your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:46:54.000Z"
        },
        {
            "id": 4438,
            "username": "Rapid_API",
            "tweet_id": "1595942063006179330",
            "tweet_text": "A short guide to writing quality API documentation.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595942063006179330",
            "tweet_type": "API tips",
            "created_at": "2022-11-25T00:46:53.000Z"
        },
        {
            "id": 4439,
            "username": "Rapid_API",
            "tweet_id": "1595938062403502080",
            "tweet_text": "I hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:30:59.000Z"
        },
        {
            "id": 4440,
            "username": "Rapid_API",
            "tweet_id": "1595938058347552768",
            "tweet_text": "You may exchange complicated items back and forth between two programs using SOAP.\n\nAdditionally, it makes sure that your communication will reach its target unaltered.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:30:58.000Z"
        },
        {
            "id": 4441,
            "username": "Rapid_API",
            "tweet_id": "1595938054073716737",
            "tweet_text": "3\ufe0f\u20e3 SOAP API (Simple Object Access Protocol API) is a type of API that allows two systems to communicate using the SOAP protocol.\n\nIt is a protocol that uses XML data format to communicate messages across the network.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:30:57.000Z"
        },
        {
            "id": 4442,
            "username": "Rapid_API",
            "tweet_id": "1595938050005032960",
            "tweet_text": "RPCs are frequently used to access program functionality that is not available locally.\n\nRPCs can even be used to interact with other programs running on the same computer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:30:56.000Z"
        },
        {
            "id": 4443,
            "username": "Rapid_API",
            "tweet_id": "1595938045882236930",
            "tweet_text": "2\ufe0f\u20e3 RPC (A remote procedure call) is a way of communication between two applications running on different machines.\n\nRPCs enable software to call a function on a different program and system.\n\nIn other words, it enables one program to launch a method or subroutine in another.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:30:55.000Z"
        },
        {
            "id": 4444,
            "username": "Rapid_API",
            "tweet_id": "1595938041721389059",
            "tweet_text": "1\ufe0f\u20e3 REST (Representational State Transfer) API.\n\nREST) API is an interface that provides a set of HTTP methods to access resources on a server.\n\nIt is often used to execute web application tasks or get data from a database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:30:54.000Z"
        },
        {
            "id": 4445,
            "username": "Rapid_API",
            "tweet_id": "1595938037699325954",
            "tweet_text": "The architectural style is the predefined set of characteristics and features of the API.\n\nFor APIs, there are numerous architectural design options.\n\nREST, SOAP, and XML-RPC are the most widely used types.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "Others",
            "created_at": "2022-11-25T00:30:53.000Z"
        },
        {
            "id": 4446,
            "username": "Rapid_API",
            "tweet_id": "1595938033559375874",
            "tweet_text": "Different Architectural Styles of APIs\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595938033559375874",
            "tweet_type": "API tips",
            "created_at": "2022-11-25T00:30:52.000Z"
        },
        {
            "id": 4447,
            "username": "Rapid_API",
            "tweet_id": "1595869133236834307",
            "tweet_text": "Thanks for reading!\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595869105860784128",
            "tweet_type": "Others",
            "created_at": "2022-11-24T19:57:05.000Z"
        },
        {
            "id": 4448,
            "username": "Rapid_API",
            "tweet_id": "1595869129265025024",
            "tweet_text": "PATCH consumes less bandwidth than PUT because we only send information that needs to be updated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595869105860784128",
            "tweet_type": "Others",
            "created_at": "2022-11-24T19:57:04.000Z"
        },
        {
            "id": 4449,
            "username": "Rapid_API",
            "tweet_id": "1595869124202319874",
            "tweet_text": "\ud83d\udccc PATCH\n\nIt's an alternate technique for upgrading resources.\n\nIn this instance, the client provides a portion of the modified data rather than changing the complete resource.\n\nFields that are not part of the payload won't be updated.\n\nWe're sending an email and an avatar. https://t.co/m6f4i77Dl7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiWqfXlWIAIcUHj.jpg\"]",
            "tweet_conversation_id": "1595869105860784128",
            "tweet_type": "Others",
            "created_at": "2022-11-24T19:57:03.000Z"
        },
        {
            "id": 4450,
            "username": "Rapid_API",
            "tweet_id": "1595869118502240257",
            "tweet_text": "Imagine you wish to update the user using an API.\n\nWe transmit all of the resource's attributes along with the PUT request.\n\nPUT API request consumes more bandwidth than PATCH because we send all of the resource's contents using it. https://t.co/nCWDQQe08v",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiWqe8zWQAA3dD5.jpg\"]",
            "tweet_conversation_id": "1595869105860784128",
            "tweet_type": "Others",
            "created_at": "2022-11-24T19:57:02.000Z"
        },
        {
            "id": 4451,
            "username": "Rapid_API",
            "tweet_id": "1595869114207154177",
            "tweet_text": "\ud83d\udccc PUT\n\nThe PUT method offers a technique to edit resources by delivering data that updates the entire resource.\n\nPUT will completely swap out a resource if it already exists and creates the resource if it doesn't exist.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595869105860784128",
            "tweet_type": "Others",
            "created_at": "2022-11-24T19:57:01.000Z"
        },
        {
            "id": 4452,
            "username": "Rapid_API",
            "tweet_id": "1595869110017359872",
            "tweet_text": "APIs employ various HTTP methods but PUT, and PATCH are likely the two that cause the most confusion.\n\nThe resources can be updated or modified using either one of them.\n\nLet's discuss how these approaches differ from one another.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595869105860784128",
            "tweet_type": "Others",
            "created_at": "2022-11-24T19:57:00.000Z"
        },
        {
            "id": 4453,
            "username": "Rapid_API",
            "tweet_id": "1595869105860784128",
            "tweet_text": "What's the difference between PUT and PATCH\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595869105860784128",
            "tweet_type": "API tips",
            "created_at": "2022-11-24T19:56:59.000Z"
        },
        {
            "id": 4454,
            "username": "Rapid_API",
            "tweet_id": "1595779014395846657",
            "tweet_text": "\u201cI wanted something that felt fast, and when I downloaded RapidAPI for Mac, that was the impression I got. I was like, \"woohoo! Okay, this feels native\", and that's why I fell in love with it.\u201d \n\n\u2013 Zeno Rocha (VP of DX, WorkOS)\n\n\u2728 Continue reading \u21b4\nhttps://t.co/IvfG28lYz9",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595779009249435649",
            "tweet_type": "Others",
            "created_at": "2022-11-24T13:58:59.000Z"
        },
        {
            "id": 4455,
            "username": "Rapid_API",
            "tweet_id": "1595779009249435649",
            "tweet_text": "Rapid Developer Story! \ud83d\udc19\n\nWe had the pleasure of interviewing @zenorocha, VP of DX at WorkOS, about his experience with RapidAPI for Mac (formerly Paw). \u26a1\ufe0f\n\n\ud83d\udd25 Read all about it\n\ud83d\udd17 https://t.co/IvfG28lYz9 https://t.co/KrSMU1EzAd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiVYi3FXwAIkEJI.jpg\"]",
            "tweet_conversation_id": "1595779009249435649",
            "tweet_type": "Others",
            "created_at": "2022-11-24T13:58:58.000Z"
        },
        {
            "id": 4456,
            "username": "Rapid_API",
            "tweet_id": "1595525126727950336",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "Others",
            "created_at": "2022-11-23T21:10:08.000Z"
        },
        {
            "id": 4457,
            "username": "Rapid_API",
            "tweet_id": "1595525120847917056",
            "tweet_text": "Use the second parameter of the json_decode method and set it to true if you wish to transform JSON into an associative array rather than an object. https://t.co/HPhYze2Xy5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiRxnG8WQAAIM-W.jpg\"]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "Others",
            "created_at": "2022-11-23T21:10:06.000Z"
        },
        {
            "id": 4458,
            "username": "Rapid_API",
            "tweet_id": "1595525115411849227",
            "tweet_text": "Use the \"json_decode\" method to convert JSON data back into a PHP object. https://t.co/Tws9z92STk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiRxmtiWYAMVnYR.jpg\"]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "Others",
            "created_at": "2022-11-23T21:10:05.000Z"
        },
        {
            "id": 4459,
            "username": "Rapid_API",
            "tweet_id": "1595525110269624322",
            "tweet_text": "The same function makes it simple to convert PHP arrays into JSON. https://t.co/Ztp0v611KX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiRxmY3WYBQ4-JF.jpg\"]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "Others",
            "created_at": "2022-11-23T21:10:04.000Z"
        },
        {
            "id": 4460,
            "username": "Rapid_API",
            "tweet_id": "1595525105135804436",
            "tweet_text": "Use the built-in PHP function \"json_encode\" to transform this PHP object into JSON. https://t.co/S7zH8gWfJK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiRxl5WWIAEEmDS.jpg\"]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "Others",
            "created_at": "2022-11-23T21:10:03.000Z"
        },
        {
            "id": 4461,
            "username": "Rapid_API",
            "tweet_id": "1595525100090130432",
            "tweet_text": "The most common way to use JSON in PHP is to transform ordinary PHP objects or arrays into JSON data.\n\nLet's make a PHP object. https://t.co/kGxpWNzl4B",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiRxlfHWYCs6uQR.jpg\"]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "Others",
            "created_at": "2022-11-23T21:10:01.000Z"
        },
        {
            "id": 4462,
            "username": "Rapid_API",
            "tweet_id": "1595525096004804626",
            "tweet_text": "JSON (JavaScript Object Notation) is a lightweight data-interchange format. \n\nHumans can read and write it with ease.\n\nMachines can quickly parse and generate it.\n\nJSON is a text format that is completely language-independent.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "Others",
            "created_at": "2022-11-23T21:10:00.000Z"
        },
        {
            "id": 4463,
            "username": "Rapid_API",
            "tweet_id": "1595525092028604427",
            "tweet_text": "How to work with JSON in PHP\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595525092028604427",
            "tweet_type": "API tips",
            "created_at": "2022-11-23T21:10:00.000Z"
        },
        {
            "id": 4464,
            "username": "Rapid_API",
            "tweet_id": "1595485114049253377",
            "tweet_text": "Thanks for reading! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.\n\nIf you\u2019d like to discover 40,000 more APIs, visit RapidAPI Hub (https://t.co/2tM1EEz5zs)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:08.000Z"
        },
        {
            "id": 4465,
            "username": "Rapid_API",
            "tweet_id": "1595485109758705703",
            "tweet_text": "8\ufe0f\u20e3 Recipe Search and Diet API\n\nSearch this recipe database and filter by diet, allergy restrictions, calories, and more.\n\nhttps://t.co/YmXdh6cEMV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:07.000Z"
        },
        {
            "id": 4466,
            "username": "Rapid_API",
            "tweet_id": "1595485105719492608",
            "tweet_text": "7\ufe0f\u20e3 Fitness Calculator API\n\nFind BMI, ideal weight, and calorie requirements with this API.\n\nhttps://t.co/rFZ4co4BCg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:06.000Z"
        },
        {
            "id": 4467,
            "username": "Rapid_API",
            "tweet_id": "1595485101655298049",
            "tweet_text": "6\ufe0f\u20e3 Diagnoses API\n\nProvides data for medical symptoms, categories, and more that can help implement a symptom checker.\n\nhttps://t.co/wlil38NSmC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:05.000Z"
        },
        {
            "id": 4468,
            "username": "Rapid_API",
            "tweet_id": "1595485097364537348",
            "tweet_text": "5\ufe0f\u20e3 Mega Fitness Calculator API\n\nSeven fitness calculators in one API. Find BMI, TDEE, BMR, body fat percentage, and more.\n\nhttps://t.co/N8ouHgvMqr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:04.000Z"
        },
        {
            "id": 4469,
            "username": "Rapid_API",
            "tweet_id": "1595485093115543552",
            "tweet_text": "4\ufe0f\u20e3 mental-health-info-api\n\nProvides key URLs from top newspapers and articles around the world on topics about mental health.\n\nhttps://t.co/a4rl0lKQao",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:03.000Z"
        },
        {
            "id": 4470,
            "username": "Rapid_API",
            "tweet_id": "1595485088841711632",
            "tweet_text": "3\ufe0f\u20e3 ExerciseAPI\n\nSearch a database of over 200 exercises. Search by name, primary muscle, secondary muscle, etc. \n\nhttps://t.co/UiC9MovTLH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:02.000Z"
        },
        {
            "id": 4471,
            "username": "Rapid_API",
            "tweet_id": "1595485084735488025",
            "tweet_text": "2\ufe0f\u20e3 Body Mass Index (BMI) Calculator API\n\nCalculates the BMI of an individual based on their height and weight.\n\nhttps://t.co/mIKxbtkauz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:01.000Z"
        },
        {
            "id": 4472,
            "username": "Rapid_API",
            "tweet_id": "1595485080255963137",
            "tweet_text": "1\ufe0f\u20e3 Exercises by API-Ninjas\n\nProvides workout exercises for every muscle group.\n\nhttps://t.co/BNLy7D5S0Q",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "Others",
            "created_at": "2022-11-23T18:31:00.000Z"
        },
        {
            "id": 4473,
            "username": "Rapid_API",
            "tweet_id": "1595485076325908491",
            "tweet_text": "Health and Fitness APIs for your next project.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595485076325908491",
            "tweet_type": "API tips",
            "created_at": "2022-11-23T18:30:59.000Z"
        },
        {
            "id": 4474,
            "username": "Rapid_API",
            "tweet_id": "1595416897524154373",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595416870588407809",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:00:04.000Z"
        },
        {
            "id": 4475,
            "username": "Rapid_API",
            "tweet_id": "1595416893225058304",
            "tweet_text": "3\ufe0f\u20e3 Categorizing Data\n\nTo ensure that you are not sending sensitive data, you can also categorize your data as admin, personal, or sensitive information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595416870588407809",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:00:03.000Z"
        },
        {
            "id": 4476,
            "username": "Rapid_API",
            "tweet_id": "1595416888787419138",
            "tweet_text": "2\ufe0f\u20e3 Send only the Necessary Information\n\nYou can also ensure that only the data the client has requested is sent to them. You are not sending any unnecessary information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595416870588407809",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:00:02.000Z"
        },
        {
            "id": 4477,
            "username": "Rapid_API",
            "tweet_id": "1595416884174020608",
            "tweet_text": "\ud83d\udccc Prevention techniques\n\n1\ufe0f\u20e3 Data Filtering\n\nInstead of relying on the client side to filter the data, this operation should be performed on the server before sending the data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595416870588407809",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:00:01.000Z"
        },
        {
            "id": 4478,
            "username": "Rapid_API",
            "tweet_id": "1595416879509942273",
            "tweet_text": "The man-in-the-middle is the most common attack that can exploit this information, as unwanted personnel can intercept the data in transit.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595416870588407809",
            "tweet_type": "Others",
            "created_at": "2022-11-23T14:00:00.000Z"
        },
        {
            "id": 4479,
            "username": "Rapid_API",
            "tweet_id": "1595416874820542465",
            "tweet_text": "\ud83d\udccc Excessive Data Exposure\n\nThe API developer sends more data than required to the client. The client side has to filter the information to show it to the user, thus leaving a lot of unused data. \n\nThis remaining data can fall prey to potential data leaks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595416870588407809",
            "tweet_type": "Others",
            "created_at": "2022-11-23T13:59:59.000Z"
        },
        {
            "id": 4480,
            "username": "Rapid_API",
            "tweet_id": "1595416870588407809",
            "tweet_text": "Excessive Data Exposure. What is it?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595416870588407809",
            "tweet_type": "API tips",
            "created_at": "2022-11-23T13:59:58.000Z"
        },
        {
            "id": 4481,
            "username": "Rapid_API",
            "tweet_id": "1595207550039134208",
            "tweet_text": "Of course, you can then monetize these APIs by publishing them on  @Rapid_API Hub (https://t.co/2tM1EEReNA).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595207525309087744",
            "tweet_type": "Others",
            "created_at": "2022-11-23T00:08:12.000Z"
        },
        {
            "id": 4482,
            "username": "Rapid_API",
            "tweet_id": "1595207545815470080",
            "tweet_text": "5\ufe0f\u20e3 Password Generator\n\nThis API would generate strong passwords based on the input\n\n- lowercase/uppercase\n- numbers/alpha/special characters\n- min. length\n- calculate password strength score\n- check against the DB for weak passwords",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595207525309087744",
            "tweet_type": "Others",
            "created_at": "2022-11-23T00:08:11.000Z"
        },
        {
            "id": 4483,
            "username": "Rapid_API",
            "tweet_id": "1595207541591449602",
            "tweet_text": "4\ufe0f\u20e3 Meme API powered by AI\n\nThis API would use GPT-3 to create unique memes.\n\nYou provide a template, and the API will do the rest and generate a meme.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595207525309087744",
            "tweet_type": "Others",
            "created_at": "2022-11-23T00:08:10.000Z"
        },
        {
            "id": 4484,
            "username": "Rapid_API",
            "tweet_id": "1595207537455931393",
            "tweet_text": "3\ufe0f\u20e3 Summary social media metrics API\n\nImagine an API that will return special data about users e.g., on Twitter.\n\n- most popular tweets of the user for the last week/month\n- most engaged followers\n- most active time",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595207525309087744",
            "tweet_type": "Others",
            "created_at": "2022-11-23T00:08:09.000Z"
        },
        {
            "id": 4485,
            "username": "Rapid_API",
            "tweet_id": "1595207533416787968",
            "tweet_text": "2\ufe0f\u20e3 Domain name generator API\n\nThis API would generate domains based on keywords.\n\nYou can use a combination of prefixes and suffixes with different common keywords.\n\nYou can also implement the functionality to check whether the domain is available.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595207525309087744",
            "tweet_type": "Others",
            "created_at": "2022-11-23T00:08:08.000Z"
        },
        {
            "id": 4486,
            "username": "Rapid_API",
            "tweet_id": "1595207529306406912",
            "tweet_text": "1\ufe0f\u20e3 Tweet ideas API.\n\nA lot of people need help with ideas about what to tweet.\n\nThis API would offer them random tweet ideas.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595207525309087744",
            "tweet_type": "Others",
            "created_at": "2022-11-23T00:08:07.000Z"
        },
        {
            "id": 4487,
            "username": "Rapid_API",
            "tweet_id": "1595207525309087744",
            "tweet_text": "5 API ideas you can build and monetize\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595207525309087744",
            "tweet_type": "API tips",
            "created_at": "2022-11-23T00:08:06.000Z"
        },
        {
            "id": 4488,
            "username": "Rapid_API",
            "tweet_id": "1595167744932352000",
            "tweet_text": "Thanks for reading! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:30:01.000Z"
        },
        {
            "id": 4489,
            "username": "Rapid_API",
            "tweet_id": "1595167740599275520",
            "tweet_text": "Today SOA applications are uncommon as it's an older architecture that may not be suitable for modern cloud-based applications. \n\nHowever, microservices were developed for the cloud-native movement, and most developers prefer the versatility of service independence they offer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:30:00.000Z"
        },
        {
            "id": 4490,
            "username": "Rapid_API",
            "tweet_id": "1595167736455462913",
            "tweet_text": "On the other hand, services within a microservice are entirely independent. If one fails, the rest of the services remain functional. \n\nOverall, Microservices are more error tolerant.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:29:59.000Z"
        },
        {
            "id": 4491,
            "username": "Rapid_API",
            "tweet_id": "1595167732416544768",
            "tweet_text": "Another significant difference is how both architectures communicate.\n\nEvery service in SOA communicates through an ESB. If this ESB fails, it compromises functionality across all services.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:29:58.000Z"
        },
        {
            "id": 4492,
            "username": "Rapid_API",
            "tweet_id": "1595167728280735779",
            "tweet_text": "Each service within a microservices generally has one specific purpose, whereas components in SOA have more complex business purposes and functionality and are often implemented as subsystems.\n\nSOA is therefore suited to larger enterprise application environments.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:29:57.000Z"
        },
        {
            "id": 4493,
            "username": "Rapid_API",
            "tweet_id": "1595167724019519488",
            "tweet_text": "\ud83d\udccc Comparison\n\nAlthough SOA and Microservices seem similar, they are still two different architecture types. Microservices are like a more fine-grained evolution of SOA.\n\nOne of their main differences is scope. Microservices are suited to smaller modern web services.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:29:56.000Z"
        },
        {
            "id": 4494,
            "username": "Rapid_API",
            "tweet_id": "1595167719699222529",
            "tweet_text": "\ud83d\udccc What is a microservice?\n\nOn the other hand, a microservice is an architectural style that focuses on maintaining several independent services that work collectively to create an application.\n\nEach individual service within a microservice uses internal APIs to communicate.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:29:55.000Z"
        },
        {
            "id": 4495,
            "username": "Rapid_API",
            "tweet_id": "1595167715727183875",
            "tweet_text": "In SOA applications, each service is independent and provides its own business purposes but can communicate with others across various platforms and languages.\n\nSOA components are loosely coupled and use a central Enterprise Service Bus (ESB) to communicate.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:29:54.000Z"
        },
        {
            "id": 4496,
            "username": "Rapid_API",
            "tweet_id": "1595167711713234989",
            "tweet_text": "\ud83d\udccc What is Service-Oriented Architecture?\n\nService-Oriented Architecture (SOA) is a software architectural style that structures an application by breaking it down into multiple components called services.\n\nEach service represents a functional business domain.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "Others",
            "created_at": "2022-11-22T21:29:53.000Z"
        },
        {
            "id": 4497,
            "username": "Rapid_API",
            "tweet_id": "1595167707703672832",
            "tweet_text": "An overview of Microservices and Service-Oriented Architecture (SOA).\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595167707703672832",
            "tweet_type": "API tips",
            "created_at": "2022-11-22T21:29:52.000Z"
        },
        {
            "id": 4498,
            "username": "Rapid_API",
            "tweet_id": "1595039242908205056",
            "tweet_text": "What is the State of API?\n\n\ud83d\udd39 Most exhaustive API survey\n\ud83d\udd39 Insight into API trends and industry\n\ud83d\udd39 2200 participated last year\n\nPlease take a moment to fill out the survey below\n\u21b3 https://t.co/RyKpTqy1Ft",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595039236637413376",
            "tweet_type": "Others",
            "created_at": "2022-11-22T12:59:24.000Z"
        },
        {
            "id": 4499,
            "username": "Rapid_API",
            "tweet_id": "1595039236637413376",
            "tweet_text": "State of APIs Developer Survey! \ud83d\udc19\n\n\ud83d\udce3 Calling all API developers to participate in the world's largest API survey. \n\n\ud83d\udd25 Remember the fun interactive website from last year? We are bringing it back this year with all the new API trends.\n\n\ud83d\udd17 https://t.co/RyKpTqfSrl https://t.co/hDTIESu58c",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FiK3rK-WQAAcVCN.mp4\"]",
            "tweet_conversation_id": "1595039236637413376",
            "tweet_type": "Others",
            "created_at": "2022-11-22T12:59:23.000Z"
        },
        {
            "id": 4500,
            "username": "Rapid_API",
            "tweet_id": "1594794568397905920",
            "tweet_text": "You can find these APIs and 40,000 more at RapidAPI Hub(https://t.co/qR0f3BrLmA).\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:09.000Z"
        },
        {
            "id": 4501,
            "username": "Rapid_API",
            "tweet_id": "1594794564124311553",
            "tweet_text": "7\ufe0f\u20e3 TennisAPI\n\nGet access to data on events, players, live scores, and tournaments around the world.\n\nhttps://t.co/7tSrs2UR3z",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:08.000Z"
        },
        {
            "id": 4502,
            "username": "Rapid_API",
            "tweet_id": "1594794559938109445",
            "tweet_text": "6\ufe0f\u20e3 API-FORMULA-1\n\nProvides all data on Formula 1 circuits, drivers, teams, and rankings.\n\nhttps://t.co/doMy6xLlY0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:07.000Z"
        },
        {
            "id": 4503,
            "username": "Rapid_API",
            "tweet_id": "1594794555722768384",
            "tweet_text": "5\ufe0f\u20e3 API-BASKETBALL\n\nMore than 380 basketball leagues and cups with data on live scores, odds, seasons, historical data, and more.\n\nhttps://t.co/hA11joEmVv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:06.000Z"
        },
        {
            "id": 4504,
            "username": "Rapid_API",
            "tweet_id": "1594794551331651584",
            "tweet_text": "4\ufe0f\u20e3 TheRundown\n\nThe fastest and most accurate stats and real-time odds from major sportsbooks.\n\nhttps://t.co/q1X6Ck59lh",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:05.000Z"
        },
        {
            "id": 4505,
            "username": "Rapid_API",
            "tweet_id": "1594794547149676554",
            "tweet_text": "3\ufe0f\u20e3 API-NBA\n\nLive data on all NBA statistics, games, standings, players, etc.\n\nhttps://t.co/Xqvixt38No",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:04.000Z"
        },
        {
            "id": 4506,
            "username": "Rapid_API",
            "tweet_id": "1594794542901100544",
            "tweet_text": "2\ufe0f\u20e3 API-FOOTBALL\n\nLive statistics on over 940 football leagues and cups, such as live and pre-match predictions, players, top scorers, transfers, and more.\n\nhttps://t.co/CLHrh6zWjm",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:03.000Z"
        },
        {
            "id": 4507,
            "username": "Rapid_API",
            "tweet_id": "1594794538588962816",
            "tweet_text": "1\ufe0f\u20e3 LiveScore API\n\nProvides live match data for football, cricket, basketball, and more.\n\nhttps://t.co/uB2kIZU4QZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "Others",
            "created_at": "2022-11-21T20:47:02.000Z"
        },
        {
            "id": 4508,
            "username": "Rapid_API",
            "tweet_id": "1594794534356934657",
            "tweet_text": "Who\u2019s ready for the World Cup? \n\nHere are the top Sports APIs you can use to create experiences around it. \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594794534356934657",
            "tweet_type": "API tips",
            "created_at": "2022-11-21T20:47:01.000Z"
        },
        {
            "id": 4509,
            "username": "Rapid_API",
            "tweet_id": "1594677004632297472",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594676979013484546",
            "tweet_type": "Others",
            "created_at": "2022-11-21T13:00:00.000Z"
        },
        {
            "id": 4510,
            "username": "Rapid_API",
            "tweet_id": "1594677000136163328",
            "tweet_text": "The backend service (some API) where the request will be processed is necessary to consume the webhook.\n\nAn XML or JSON format is used to send the webhook POST payload.\n\nAlternatively, it might be delivered as form data, using an encoding like `multipart/form-data`.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594676979013484546",
            "tweet_type": "Others",
            "created_at": "2022-11-21T12:59:59.000Z"
        },
        {
            "id": 4511,
            "username": "Rapid_API",
            "tweet_id": "1594676995790602243",
            "tweet_text": "Webhooks are typically used to send real-time data, while APIs retrieve data on demand.\n\nThe key distinction between APIs and Webhooks is that APIs enable two-way communication, while Webhooks allow one-way data sharing triggered by events.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594676979013484546",
            "tweet_type": "Others",
            "created_at": "2022-11-21T12:59:58.000Z"
        },
        {
            "id": 4512,
            "username": "Rapid_API",
            "tweet_id": "1594676991588012034",
            "tweet_text": "That request typically contains event data, allowing the destination site to take appropriate action.\n\nWe can see differences here \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594676979013484546",
            "tweet_type": "API tips",
            "created_at": "2022-11-21T12:59:57.000Z"
        },
        {
            "id": 4513,
            "username": "Rapid_API",
            "tweet_id": "1594676987355856898",
            "tweet_text": "On the other hand, a webhook is a user-defined callback over HTTP, usually triggered by an event. \n\nWhen that event occurs, the source site makes an HTTP request to the URL configured for the webhook.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594676979013484546",
            "tweet_type": "Others",
            "created_at": "2022-11-21T12:59:56.000Z"
        },
        {
            "id": 4514,
            "username": "Rapid_API",
            "tweet_id": "1594676983174254593",
            "tweet_text": "An API is a set of programming instructions and standards for accessing a web-based software application or web tool. \n\nIn other words, an API serves as a communication channel between two software pieces.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594676979013484546",
            "tweet_type": "Others",
            "created_at": "2022-11-21T12:59:55.000Z"
        },
        {
            "id": 4515,
            "username": "Rapid_API",
            "tweet_id": "1594676979013484546",
            "tweet_text": "Difference between API and Webhook\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594676979013484546",
            "tweet_type": "API tips",
            "created_at": "2022-11-21T12:59:54.000Z"
        },
        {
            "id": 4516,
            "username": "Rapid_API",
            "tweet_id": "1593793668275929088",
            "tweet_text": "We hope you found this helpful! \n\nFollow @Rapid_API for more of our exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593793647308218369",
            "tweet_type": "Others",
            "created_at": "2022-11-19T02:29:56.000Z"
        },
        {
            "id": 4517,
            "username": "Rapid_API",
            "tweet_id": "1593793663942926337",
            "tweet_text": "4\ufe0f\u20e3 Finance \n\nFinance and stock market applications handle tremendous amounts of data.\n\nManaging this amount of data without APIs is impossible, and this is where APIs come in.\n\n \ud83d\udd17 Find finance APIs (https://t.co/t2rP6NGfSU)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593793647308218369",
            "tweet_type": "Others",
            "created_at": "2022-11-19T02:29:55.000Z"
        },
        {
            "id": 4518,
            "username": "Rapid_API",
            "tweet_id": "1593793659836801024",
            "tweet_text": "3\ufe0f\u20e3 SMS Verification\n\nMany applications use SMS-based verification to implement two-factor authentication. \n\nHandling this verification is not simple. So, most applications use APIs to implement it.\n\n \ud83d\udd17 Find verification APIs (https://t.co/pSJIHrPUh8)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593793647308218369",
            "tweet_type": "Others",
            "created_at": "2022-11-19T02:29:54.000Z"
        },
        {
            "id": 4519,
            "username": "Rapid_API",
            "tweet_id": "1593793655701229568",
            "tweet_text": "2\ufe0f\u20e3 Maps\n\nOnline maps and navigation like Google Maps provide millions of devices with detailed and custom location data.\n\nThey rely on APIs to offer this data to different platforms and devices.\n\n\ud83d\udd17 Find maps APIs (https://t.co/21dvEA3T1Q)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593793647308218369",
            "tweet_type": "Others",
            "created_at": "2022-11-19T02:29:53.000Z"
        },
        {
            "id": 4520,
            "username": "Rapid_API",
            "tweet_id": "1593793651506700288",
            "tweet_text": "1\ufe0f\u20e3 Weather\n\nHave you ever wondered how you get the latest weather information on your devices? You guessed it, APIs.\n\nYour devices use dedicated weather APIs to get the latest weather information.\n\n\ud83d\udd17 Find weather APIs (https://t.co/2q1ooH0OYs)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593793647308218369",
            "tweet_type": "Others",
            "created_at": "2022-11-19T02:29:52.000Z"
        },
        {
            "id": 4521,
            "username": "Rapid_API",
            "tweet_id": "1593793647308218369",
            "tweet_text": "Did you know we interact with many APIs every day?\n\nHere are some APIs we utilize daily \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593793647308218369",
            "tweet_type": "API tips",
            "created_at": "2022-11-19T02:29:51.000Z"
        },
        {
            "id": 4522,
            "username": "Rapid_API",
            "tweet_id": "1593759204363456513",
            "tweet_text": "Thanks for reading! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "Others",
            "created_at": "2022-11-19T00:12:59.000Z"
        },
        {
            "id": 4523,
            "username": "Rapid_API",
            "tweet_id": "1593759200337096704",
            "tweet_text": "5\ufe0f\u20e3 JSON is also the best tool for data sharing because it uses arrays to store data. \n\nSharing video files, audio files, and files of any size can be done effectively with JSON. \n\nFor this reason and those above, it is considered a universal data format.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "Others",
            "created_at": "2022-11-19T00:12:58.000Z"
        },
        {
            "id": 4524,
            "username": "Rapid_API",
            "tweet_id": "1593759196142501891",
            "tweet_text": "4\ufe0f\u20e3 JSON is language and platform-independent. It, therefore, has extensive browser support, and almost all programming languages have functions or libraries to parse JSON.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "Others",
            "created_at": "2022-11-19T00:12:57.000Z"
        },
        {
            "id": 4525,
            "username": "Rapid_API",
            "tweet_id": "1593759192149622786",
            "tweet_text": "3\ufe0f\u20e3 JSON is known as self-describing language. This means that, unlike XML, it does not require any extra documentation to be used or understood.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "Others",
            "created_at": "2022-11-19T00:12:56.000Z"
        },
        {
            "id": 4526,
            "username": "Rapid_API",
            "tweet_id": "1593759188001652736",
            "tweet_text": "2\ufe0f\u20e3 Because of its lightweight syntax, JSON is easily parsed. \n\nThis makes it fast, meaning more data traffic can be handled per second. This is why it's a suitable choice for APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "Others",
            "created_at": "2022-11-19T00:12:55.000Z"
        },
        {
            "id": 4527,
            "username": "Rapid_API",
            "tweet_id": "1593759183806996482",
            "tweet_text": "1\ufe0f\u20e3 JSON is based on the object notation of JavaScript. It is in text format, so it is language-independent and does not require JavaScript to be read.\n\nIt has a familiar syntax and is human-readable, making it incredibly versatile.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "Others",
            "created_at": "2022-11-19T00:12:54.000Z"
        },
        {
            "id": 4528,
            "username": "Rapid_API",
            "tweet_id": "1593759179616944129",
            "tweet_text": "JSON (JavaScript Object Notation) is the most well-known and used data exchange format.\n\nThere are many benefits to using JSON instead of other data formats such as XML. Let's look at the advantages. \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "API tips",
            "created_at": "2022-11-19T00:12:53.000Z"
        },
        {
            "id": 4529,
            "username": "Rapid_API",
            "tweet_id": "1593759175573524480",
            "tweet_text": "The advantages of using JSON for your API.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593759175573524480",
            "tweet_type": "API tips",
            "created_at": "2022-11-19T00:12:52.000Z"
        },
        {
            "id": 4530,
            "username": "Rapid_API",
            "tweet_id": "1593598651661688834",
            "tweet_text": "We hope you'll continue to learn and grow with us! \ud83d\udc19\n\nFollow @Rapid_API for more fantastic content (we got big plans).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593598635148808193",
            "tweet_type": "Others",
            "created_at": "2022-11-18T13:35:00.000Z"
        },
        {
            "id": 4531,
            "username": "Rapid_API",
            "tweet_id": "1593598646033211393",
            "tweet_text": "What do you like most about Rapid?\n\n\ud83d\udd39 RapidAPI Client extension for VSCode \u2728\n\ud83d\udd39 RapidAPI Hub\n\ud83d\udd39 RapidAPI for Mac\n\ud83d\udd39 RapidAPI Testing\n\nWe'd love to know. https://t.co/Y5JQhdLF8t",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh2Zgr5XoAAM0_y.jpg\"]",
            "tweet_conversation_id": "1593598635148808193",
            "tweet_type": "Others",
            "created_at": "2022-11-18T13:34:59.000Z"
        },
        {
            "id": 4532,
            "username": "Rapid_API",
            "tweet_id": "1593598640307986432",
            "tweet_text": "As on of the biggest and most engaged API Developers community we'd like to say \"Thank You\" to everyone for trusting us on building excellent developer tools. \ud83d\udc4a https://t.co/tE0HMag2xm",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh2ZgWpXgAEcesN.jpg\"]",
            "tweet_conversation_id": "1593598635148808193",
            "tweet_type": "Others",
            "created_at": "2022-11-18T13:34:58.000Z"
        },
        {
            "id": 4533,
            "username": "Rapid_API",
            "tweet_id": "1593598635148808193",
            "tweet_text": "Holy Octopus! Our Dev Community is 100K strong! \ud83e\udd73 https://t.co/dExM1JaID3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh2ZgCaXEAEX8an.jpg\"]",
            "tweet_conversation_id": "1593598635148808193",
            "tweet_type": "Others",
            "created_at": "2022-11-18T13:34:56.000Z"
        },
        {
            "id": 4534,
            "username": "Rapid_API",
            "tweet_id": "1593391444592848897",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:38.000Z"
        },
        {
            "id": 4535,
            "username": "Rapid_API",
            "tweet_id": "1593391440390160384",
            "tweet_text": "5\ufe0f\u20e3 Inspire Developers\n\nGo one step further by inspiring developers to use your API.\n\nMake guides and tutorials about building real-world applications with your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:37.000Z"
        },
        {
            "id": 4536,
            "username": "Rapid_API",
            "tweet_id": "1593391436145123328",
            "tweet_text": "4\ufe0f\u20e3 Pricing and Limitations\n\nComplicated pricing and limitations can deter developers.\n\nOffer multiple plans instead of one or two. \n\nCommunicate the usage quotas and rate limits clearly for each plan.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:36.000Z"
        },
        {
            "id": 4537,
            "username": "Rapid_API",
            "tweet_id": "1593391431661473792",
            "tweet_text": "3\ufe0f\u20e3 Interactive console\n\nAdd a playground where developers can test your API.\n\nIt will allow them to test its endpoints and see if it fits their requirements.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:35.000Z"
        },
        {
            "id": 4538,
            "username": "Rapid_API",
            "tweet_id": "1593391427341324288",
            "tweet_text": "2\ufe0f\u20e3 Documentation\n\nDevelopers need to understand what an API offers before adopting it.\n\nPresent them with proper, explanatory documentation.\n\nYou can use this guide to improve your documentation.\n\nhttps://t.co/VZzaaBRuOI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:34.000Z"
        },
        {
            "id": 4539,
            "username": "Rapid_API",
            "tweet_id": "1593391423193317380",
            "tweet_text": "Improve this onboarding step by providing quick start guides.\n\nThese guides should have code samples and steps to integrate the API.\n\nIf the API requires a key, communicate it clearly in the guide.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:33.000Z"
        },
        {
            "id": 4540,
            "username": "Rapid_API",
            "tweet_id": "1593391419196162049",
            "tweet_text": "1\ufe0f\u20e3 Time to first call\n\nWhen developers discover your API, their first step is to set up and call your API.\n\nTheir first interaction with your API should be as fast and smooth as possible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:32.000Z"
        },
        {
            "id": 4541,
            "username": "Rapid_API",
            "tweet_id": "1593391415119208449",
            "tweet_text": "Developers are the end-users of your API. So a good developer experience is a deciding factor in its growth and adoption.\n\nHere are a few pointers that can improve your API's developer experience.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:51:31.000Z"
        },
        {
            "id": 4542,
            "username": "Rapid_API",
            "tweet_id": "1593391411038023680",
            "tweet_text": "How to improve the developer experience of your API?\n\nA thread \ud83d\udc47\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593391411038023680",
            "tweet_type": "API tips",
            "created_at": "2022-11-17T23:51:30.000Z"
        },
        {
            "id": 4543,
            "username": "Rapid_API",
            "tweet_id": "1593289108595802113",
            "tweet_text": "Thanks for reading! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T17:05:00.000Z"
        },
        {
            "id": 4544,
            "username": "Rapid_API",
            "tweet_id": "1593289104472641537",
            "tweet_text": "3. Code and documentation generation\n\nMany popular specifications provide tools to generate tests and documentation, which are necessary when building an API of industry standards.\n\nThis also speeds up the development process meaning your API gets to market quicker.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T17:04:59.000Z"
        },
        {
            "id": 4545,
            "username": "Rapid_API",
            "tweet_id": "1593289100496445444",
            "tweet_text": "2. Consistent development and alignment\n\nFollowing a specification, you design, build and manage your API according to a universal standard. \n\nThe idea is that your API maximizes accessibility and discoverability and allows for an excellent developer and consumer experience.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T17:04:58.000Z"
        },
        {
            "id": 4546,
            "username": "Rapid_API",
            "tweet_id": "1593289096478220288",
            "tweet_text": "\ud83d\udccc Benefits of API specifications\n\n1. Human and machine-readable\n\nMost specifications are in JSON or YAML format, both of which are easily read by humans and machines used to produce and consume APIs.\n\nThis creates accessibility for other teams like product management.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T17:04:57.000Z"
        },
        {
            "id": 4547,
            "username": "Rapid_API",
            "tweet_id": "1593289092472733697",
            "tweet_text": "The most well-known API spec is the OpenAPI (OAS), which is used to define standards for HTTP-based APIs, which are the most widely used across the web.\n\nGraphQL Schema, WSDL (Web Services Description Language), and RAML (RESTful API Modelling Language) are other examples.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T17:04:56.000Z"
        },
        {
            "id": 4548,
            "username": "Rapid_API",
            "tweet_id": "1593289088458686473",
            "tweet_text": "When building an API, following a specification is a highly recommended best practice to know and plan how your API should be structured and to avoid design flaws. \n\nThere are different specifications for different types of APIs, for example, REST, GraphQL, and SOAP.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T17:04:55.000Z"
        },
        {
            "id": 4549,
            "username": "Rapid_API",
            "tweet_id": "1593289084411138048",
            "tweet_text": "API specifications are documents that outline how an API should work to standardize them for use across various platforms and different programming languages. \n\nYou can think of API specifications as blueprints for constructing an API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "Others",
            "created_at": "2022-11-17T17:04:54.000Z"
        },
        {
            "id": 4550,
            "username": "Rapid_API",
            "tweet_id": "1593289079814180865",
            "tweet_text": "What exactly are API specifications, and what are the benefits of using them?\n\nA Thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593289079814180865",
            "tweet_type": "API tips",
            "created_at": "2022-11-17T17:04:53.000Z"
        },
        {
            "id": 4551,
            "username": "Rapid_API",
            "tweet_id": "1593227707625652224",
            "tweet_text": "We hope you found this helpful! \n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:01:00.000Z"
        },
        {
            "id": 4552,
            "username": "Rapid_API",
            "tweet_id": "1593227703481679873",
            "tweet_text": "7\ufe0f\u20e3 Include versioning\n\nMake sure you create a new version of your API if you're making major changes that could break it.\n\nThis is usually indicated in endpoints by adding the version at the start of the endpoint. For example:\n\nhttps://example .com/api/v2/articles",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:00:59.000Z"
        },
        {
            "id": 4553,
            "username": "Rapid_API",
            "tweet_id": "1593227699488784390",
            "tweet_text": "6\ufe0f\u20e3 Never use file extensions\n\nThere is no purpose in using file extensions in URIs. They are unnecessary and only make it harder to read clearly.\n\n\u274c https:// example .com/api/profiles.xml",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:00:58.000Z"
        },
        {
            "id": 4554,
            "username": "Rapid_API",
            "tweet_id": "1593227695491633152",
            "tweet_text": "5\ufe0f\u20e3 Use hyphens to separate words\n\nWhen chaining words together, hyphens are the most user-friendly way and are a better choice than underscores. For example:\n\nhttps:// example .com/api/profiles/227/first-name",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:00:58.000Z"
        },
        {
            "id": 4555,
            "username": "Rapid_API",
            "tweet_id": "1593227691565662208",
            "tweet_text": "4\ufe0f\u20e3 Lower case letters\n\nAs a standard, URLs are typed in lowercase. The same applies to API URIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:00:57.000Z"
        },
        {
            "id": 4556,
            "username": "Rapid_API",
            "tweet_id": "1593227687459704832",
            "tweet_text": "3\ufe0f\u20e3 Use plural nouns\n\nThis makes it clear that there is more than one resource within a collection. Using singular nouns can be confusing. For example:\n\n\u274c https:// example .com/api/profile/21\n\u2705 http:// example .com/api/profiles/21",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:00:56.000Z"
        },
        {
            "id": 4557,
            "username": "Rapid_API",
            "tweet_id": "1593227683198308352",
            "tweet_text": "2\ufe0f\u20e3 Use nouns, not verbs\n\nWhen naming the URIs, you should use nouns to describe what the resource is and not what it does. For example:\n\n\u274c https:// example .com/api/getProfiles\n\u2705 http:// example .com/api/profiles",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:00:55.000Z"
        },
        {
            "id": 4558,
            "username": "Rapid_API",
            "tweet_id": "1593227679045763074",
            "tweet_text": "1\ufe0f\u20e3 Use forward slash\n\nUse forward slashes for resource hierarchy and to separate URI resources.\n\nExample: https:// example .com/articles/authors",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "Others",
            "created_at": "2022-11-17T13:00:54.000Z"
        },
        {
            "id": 4559,
            "username": "Rapid_API",
            "tweet_id": "1593227674981658625",
            "tweet_text": "API endpoint naming best practices.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593227674981658625",
            "tweet_type": "API tips",
            "created_at": "2022-11-17T13:00:53.000Z"
        },
        {
            "id": 4560,
            "username": "Rapid_API",
            "tweet_id": "1593041334368993280",
            "tweet_text": "I hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593041305629777921",
            "tweet_type": "Others",
            "created_at": "2022-11-17T00:40:26.000Z"
        },
        {
            "id": 4561,
            "username": "Rapid_API",
            "tweet_id": "1593041329927254016",
            "tweet_text": "6\ufe0f\u20e3 Efficiency\n\nAPIs provide more effective data distribution when content is automatically published and made accessible on different channels at once.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593041305629777921",
            "tweet_type": "Others",
            "created_at": "2022-11-17T00:40:24.000Z"
        },
        {
            "id": 4562,
            "username": "Rapid_API",
            "tweet_id": "1593041325829529600",
            "tweet_text": "5\ufe0f\u20e3 Analysis\n\nYou can get insightful data and important information via APIs.\n\nYou can use this data to promote or improve products.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593041305629777921",
            "tweet_type": "Others",
            "created_at": "2022-11-17T00:40:24.000Z"
        },
        {
            "id": 4563,
            "username": "Rapid_API",
            "tweet_id": "1593041317805936640",
            "tweet_text": "3\ufe0f\u20e3 Greater Value\n\nBy developing APIs, companies make their systems accessible to outsiders.\n\nBy incorporating these 3rd party APIs into their goods, others can increase the value of their products.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593041305629777921",
            "tweet_type": "Others",
            "created_at": "2022-11-17T00:40:22.000Z"
        },
        {
            "id": 4564,
            "username": "Rapid_API",
            "tweet_id": "1593041313825447942",
            "tweet_text": "2\ufe0f\u20e3 Increased productivity\n\nIt requires a lot of time and work to create an app from scratch. It is also expensive.\n\nIntegrating functionality into your product is significantly more straightforward and affordable if an API with that capability is already on the market.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593041305629777921",
            "tweet_type": "Others",
            "created_at": "2022-11-17T00:40:21.000Z"
        },
        {
            "id": 4565,
            "username": "Rapid_API",
            "tweet_id": "1593041309761093633",
            "tweet_text": "1\ufe0f\u20e3 Automation\n\nThanks to APIs, you can build fully automated systems that communicate with one another without involving any human beings.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593041305629777921",
            "tweet_type": "Others",
            "created_at": "2022-11-17T00:40:20.000Z"
        },
        {
            "id": 4566,
            "username": "Rapid_API",
            "tweet_id": "1593041305629777921",
            "tweet_text": "Advantages of using API\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1593041305629777921",
            "tweet_type": "API tips",
            "created_at": "2022-11-17T00:40:19.000Z"
        },
        {
            "id": 4567,
            "username": "Rapid_API",
            "tweet_id": "1592955768520728576",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592955742805442562",
            "tweet_type": "Others",
            "created_at": "2022-11-16T19:00:25.000Z"
        },
        {
            "id": 4568,
            "username": "Rapid_API",
            "tweet_id": "1592955764439670784",
            "tweet_text": "5\ufe0f\u20e3 Quotes App\n\nUse a quotes API to build a random quote generator application.\n\nAPI \u2192 https://t.co/gOb4vbeBP3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592955742805442562",
            "tweet_type": "Others",
            "created_at": "2022-11-16T19:00:24.000Z"
        },
        {
            "id": 4569,
            "username": "Rapid_API",
            "tweet_id": "1592955760241147908",
            "tweet_text": "4\ufe0f\u20e3 Weather App\n\nUse a weather API to build a simple weather app that takes a location from the user and provides the weather details.\n\nAPI \u2192 https://t.co/DhU4Rz7Ijc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592955742805442562",
            "tweet_type": "Others",
            "created_at": "2022-11-16T19:00:23.000Z"
        },
        {
            "id": 4570,
            "username": "Rapid_API",
            "tweet_id": "1592955755820306433",
            "tweet_text": "3\ufe0f\u20e3 Text Case App\n\nUse a title case API to build a text case app that takes a heading and change it according to the set title case style.\n\nAPI \u2192 https://t.co/iLx0oFLuB1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592955742805442562",
            "tweet_type": "Others",
            "created_at": "2022-11-16T19:00:22.000Z"
        },
        {
            "id": 4571,
            "username": "Rapid_API",
            "tweet_id": "1592955751513067522",
            "tweet_text": "2\ufe0f\u20e3 Language Detection App\n\nUse a text API to develop a language detection app that lets the user know the language of the provided text.\n\nAPI \u2192 https://t.co/U210Fe1H23",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592955742805442562",
            "tweet_type": "Others",
            "created_at": "2022-11-16T19:00:21.000Z"
        },
        {
            "id": 4572,
            "username": "Rapid_API",
            "tweet_id": "1592955747184234496",
            "tweet_text": "1\ufe0f\u20e3 Email Validation App\n\nUse an email validation API to build an app that takes an email and lets you know if it is valid or not. \n\nAPI \u2192 https://t.co/y7dTvESzwy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592955742805442562",
            "tweet_type": "Others",
            "created_at": "2022-11-16T19:00:20.000Z"
        },
        {
            "id": 4573,
            "username": "Rapid_API",
            "tweet_id": "1592955742805442562",
            "tweet_text": "Five Web App Ideas that use APIs.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592955742805442562",
            "tweet_type": "API tips",
            "created_at": "2022-11-16T19:00:19.000Z"
        },
        {
            "id": 4574,
            "username": "Rapid_API",
            "tweet_id": "1592865315150761986",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:00:59.000Z"
        },
        {
            "id": 4575,
            "username": "Rapid_API",
            "tweet_id": "1592865310796906496",
            "tweet_text": "You can read more about it in this piece. (https://t.co/LUgdKi8v9O)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:00:58.000Z"
        },
        {
            "id": 4576,
            "username": "Rapid_API",
            "tweet_id": "1592865306342739968",
            "tweet_text": "4\ufe0f\u20e3 You should also explicitly define the request body and query parameters you expect from an API request.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:00:57.000Z"
        },
        {
            "id": 4577,
            "username": "Rapid_API",
            "tweet_id": "1592865301703446530",
            "tweet_text": "2\ufe0f\u20e3 Write a schema to define all the types and patterns you will accept in the request and then implement it on runtime.\n\n3\ufe0f\u20e3 You should set the read-only property to true for all the fields that can be retrieved from the API request body but should not be modified by the user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:00:56.000Z"
        },
        {
            "id": 4578,
            "username": "Rapid_API",
            "tweet_id": "1592865297421275139",
            "tweet_text": "\ud83d\udccc How to prevent it?\n\nYou can prevent it in multiple ways:\n\n1\ufe0f\u20e3 You should not explicitly bind incoming data and internet objects because the user can send more data than required.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:00:55.000Z"
        },
        {
            "id": 4579,
            "username": "Rapid_API",
            "tweet_id": "1592865292925161472",
            "tweet_text": "An appropriate way to save data would be to create a new object on the server by extracting only the fields you need from the request body and saving that object.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:00:54.000Z"
        },
        {
            "id": 4580,
            "username": "Rapid_API",
            "tweet_id": "1592865288282083329",
            "tweet_text": "API Mass Assignment Vulnerability is a severe API threat that arises when you save the request body as it is on the server instead of extracting values from it one by one.\n\nIt allows the user to initialize or overwrite server-side variables that the application does not intend.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "Others",
            "created_at": "2022-11-16T13:00:53.000Z"
        },
        {
            "id": 4581,
            "username": "Rapid_API",
            "tweet_id": "1592865283697704961",
            "tweet_text": "API Mass Assignment Vulnerability\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592865283697704961",
            "tweet_type": "API tips",
            "created_at": "2022-11-16T13:00:52.000Z"
        },
        {
            "id": 4582,
            "username": "Rapid_API",
            "tweet_id": "1592631765771767810",
            "tweet_text": "\u2728 Take a look at our blog post where we have shared all the details \n\nhttps://t.co/aNlKk4wCMn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592631749124710401",
            "tweet_type": "Others",
            "created_at": "2022-11-15T21:32:57.000Z"
        },
        {
            "id": 4583,
            "username": "Rapid_API",
            "tweet_id": "1592631761603002369",
            "tweet_text": "If you have previously purchased a license, we are extending you credits that you can use across RapidAPI. More value for you. \n\nYou can use these credits to subscribe to APIs, try out RapidAPI testing, and more!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592631749124710401",
            "tweet_type": "Others",
            "created_at": "2022-11-15T21:32:56.000Z"
        },
        {
            "id": 4584,
            "username": "Rapid_API",
            "tweet_id": "1592631757307670528",
            "tweet_text": "We are also excited to share that we are making RapidAPI for Mac free for individual users and teams of up to 5! \ud83e\udd73\n\nYou can now use it for API testing, even for your side hustles, without needing to buy a license. We hope to win developer hearts. \ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592631749124710401",
            "tweet_type": "Others",
            "created_at": "2022-11-15T21:32:55.000Z"
        },
        {
            "id": 4585,
            "username": "Rapid_API",
            "tweet_id": "1592631753121964032",
            "tweet_text": "We are thrilled to announce that today, Paw is fully becoming a part of Rapid.\n\nWe are doubling down on the performance with a new name, color scheme, and additional features to smoothen the API testing process. \ud83d\udd25",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592631749124710401",
            "tweet_type": "Others",
            "created_at": "2022-11-15T21:32:54.000Z"
        },
        {
            "id": 4586,
            "username": "Rapid_API",
            "tweet_id": "1592631749124710401",
            "tweet_text": "Exciting news: Paw is now RapidAPI for Mac, and we are making it free! \ud83e\udd73",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592631749124710401",
            "tweet_type": "Others",
            "created_at": "2022-11-15T21:32:53.000Z"
        },
        {
            "id": 4587,
            "username": "Rapid_API",
            "tweet_id": "1592558334342680576",
            "tweet_text": "We hope you enjoyed this short tutorial.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:41:09.000Z"
        },
        {
            "id": 4588,
            "username": "Rapid_API",
            "tweet_id": "1592558330014302218",
            "tweet_text": "4\ufe0f\u20e3 Nested groups\n\nYou can even create nested groups.\n\nJust drag and drop the group under the required group. https://t.co/s5XJjsBIfF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnnVjEWIAQHHp8.jpg\"]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:41:08.000Z"
        },
        {
            "id": 4589,
            "username": "Rapid_API",
            "tweet_id": "1592558325358817281",
            "tweet_text": "3\ufe0f\u20e3 Reorganize groups\n \nYou can reorganize requests and move them into different groups by drag and drop. https://t.co/w35yV6TzQo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnnVX8XgAAVw-I.jpg\"]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:41:07.000Z"
        },
        {
            "id": 4590,
            "username": "Rapid_API",
            "tweet_id": "1592558320853843970",
            "tweet_text": "2\ufe0f\u20e3 Rename groups\n\nYou can rename the group whenever you want.\n\n1. Click three dots icon next to the group name\n\n2. Click \"Rename\" in the popup menu. https://t.co/40XX85RfoK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnnVK2WQAMRwzH.jpg\"]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:41:06.000Z"
        },
        {
            "id": 4591,
            "username": "Rapid_API",
            "tweet_id": "1592558316181655552",
            "tweet_text": "The new group will be created for you including the sample request. https://t.co/quKdbGeTbo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnnU-KXoAUcRhL.jpg\"]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:41:05.000Z"
        },
        {
            "id": 4592,
            "username": "Rapid_API",
            "tweet_id": "1592558311764856833",
            "tweet_text": "1. To create group click the three dots icon next to the \"Requests\" label.\n\n2. In the popup menu click \"New Group\" https://t.co/L06AVmjGEQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhnnUxaXwAAOuW_.jpg\"]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:41:04.000Z"
        },
        {
            "id": 4593,
            "username": "Rapid_API",
            "tweet_id": "1592558307692236801",
            "tweet_text": "1\ufe0f\u20e3 Create group\n\nRapidAPI client for VS Code supports groups. It's the best way to organize your requests.\n\nLet's say we have an API for eShop that manipulates clients, products, and orders.\n\nWe can place all API requests into the appropriate group.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "Others",
            "created_at": "2022-11-15T16:41:03.000Z"
        },
        {
            "id": 4594,
            "username": "Rapid_API",
            "tweet_id": "1592558303649071104",
            "tweet_text": "How to organize requests in RapidAPI Client for VSCode?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592558303649071104",
            "tweet_type": "API tips",
            "created_at": "2022-11-15T16:41:02.000Z"
        },
        {
            "id": 4595,
            "username": "Rapid_API",
            "tweet_id": "1592502752780857345",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:18.000Z"
        },
        {
            "id": 4596,
            "username": "Rapid_API",
            "tweet_id": "1592502748670468096",
            "tweet_text": "We have talked about these trends extensively in one of our guides that you can find here. \u2192 https://t.co/PYjALOxcCp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:17.000Z"
        },
        {
            "id": 4597,
            "username": "Rapid_API",
            "tweet_id": "1592502744602091521",
            "tweet_text": "Technologies like computer vision, facial recognition, data extraction, and natural language processing provide market-dominating features and vastly improve the user experience.\n\nAI and ML APIs allow companies to abstract advanced AI/ML features through APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:16.000Z"
        },
        {
            "id": 4598,
            "username": "Rapid_API",
            "tweet_id": "1592502740629995520",
            "tweet_text": "5\ufe0f\u20e3  AI/ML Comes To APIs\n\nArtificial Intelligence (AI) and Machine Learning (ML) continue to slide into the API industry, and outcomes are nothing short of amazing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:15.000Z"
        },
        {
            "id": 4599,
            "username": "Rapid_API",
            "tweet_id": "1592502736670674944",
            "tweet_text": "4\ufe0f\u20e3 Newer API Architectures Grow\n\nRest APIs remain the most popular, but their usage has somewhat declined as newer architectures like GraphQL, AsyncAPI, and gRPC are growing in terms of familiarity and use.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:14.000Z"
        },
        {
            "id": 4600,
            "username": "Rapid_API",
            "tweet_id": "1592502732715442187",
            "tweet_text": "3\ufe0f\u20e3 Developer Experience As The Prime Focus\n\nThe focus on developer experience (DX) continues to rise in importance.\n\nIt involves a developer-friendly API design, easy onboarding, reusability, and tackling other developer problems.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:13.000Z"
        },
        {
            "id": 4601,
            "username": "Rapid_API",
            "tweet_id": "1592502728697298945",
            "tweet_text": "2\ufe0f\u20e3 Rise In Partner And Third-Party APIs\n\nThis trend directly relates to the increase in API products, as more companies are using external APIs to abstract everything from authentication and geolocation to payments.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:12.000Z"
        },
        {
            "id": 4602,
            "username": "Rapid_API",
            "tweet_id": "1592502724700012544",
            "tweet_text": "1\ufe0f\u20e3 More API as a product\n\nAPI-as-a-Product is like the Software-as-a-Service model, but APIs take center stage here. \n\nMore and more businesses are offering APIs as products to monetize the services they expose through the APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "Others",
            "created_at": "2022-11-15T13:00:11.000Z"
        },
        {
            "id": 4603,
            "username": "Rapid_API",
            "tweet_id": "1592502720656592896",
            "tweet_text": "Five key API trends to watch out\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592502720656592896",
            "tweet_type": "API tips",
            "created_at": "2022-11-15T13:00:10.000Z"
        },
        {
            "id": 4604,
            "username": "Rapid_API",
            "tweet_id": "1592270906939801600",
            "tweet_text": "We hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:39:01.000Z"
        },
        {
            "id": 4605,
            "username": "Rapid_API",
            "tweet_id": "1592270902896766976",
            "tweet_text": "The typical response formats for REST are XML, JSON, and YAML.\n\nJSON is the response format for GraphQL.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:39:00.000Z"
        },
        {
            "id": 4606,
            "username": "Rapid_API",
            "tweet_id": "1592270898584764424",
            "tweet_text": "Versioning is not necessary for GraphQL.\n\nVersioning is necessary for REST. Usually, it is done as follows:\n\n- `https://t.co/4TAtmaaAxs`\n- `https://t.co/ho0slGLydL`",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:59.000Z"
        },
        {
            "id": 4607,
            "username": "Rapid_API",
            "tweet_id": "1592270894533312512",
            "tweet_text": "More knowledge is needed to construct GraphQL than to build a REST API.\n\nREST scales easier and is also easier to migrate to different servers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:58.000Z"
        },
        {
            "id": 4608,
            "username": "Rapid_API",
            "tweet_id": "1592270890431139840",
            "tweet_text": "Client-driven architecture is used with GraphQL.\n\nWhat data are needed can be specified by the client.\n\nREST employs a server-driven architecture in which all data filtering is done on the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:57.000Z"
        },
        {
            "id": 4609,
            "username": "Rapid_API",
            "tweet_id": "1592270886421372928",
            "tweet_text": "REST API uses multiple HTTP endpoints instead.\n\nEach endpoint's purpose and specifications must be clearly defined, like its HTTP method and required input parameters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:56.000Z"
        },
        {
            "id": 4610,
            "username": "Rapid_API",
            "tweet_id": "1592270882432507909",
            "tweet_text": "GraphQL uses a hierarchical schema to describe the organization of the API.\n\nBecause of this, the GraphQL documentation is automatically generated and updated as needed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:55.000Z"
        },
        {
            "id": 4611,
            "username": "Rapid_API",
            "tweet_id": "1592270878498226176",
            "tweet_text": "REST utilizes multiple HTTP endpoints for various purposes (CRUD operations)\n\nGraphQL uses a single HTTP endpoint only.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:55.000Z"
        },
        {
            "id": 4612,
            "username": "Rapid_API",
            "tweet_id": "1592270874471989249",
            "tweet_text": "REST is an architectural concept for network-based software, whereas GraphQL is a query language based on specifications.\n\nAnother difference is that REST is weakly typed, but GraphQL is strongly typed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:54.000Z"
        },
        {
            "id": 4613,
            "username": "Rapid_API",
            "tweet_id": "1592270870252122113",
            "tweet_text": "REST API refers to an application programming interface (API) that uses HTTP requests to GET, PUT, POST, and DELETE data.\n\nGraphQL is a query language for your API and a server-side runtime for executing queries using a type system you define for your data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "Others",
            "created_at": "2022-11-14T21:38:53.000Z"
        },
        {
            "id": 4614,
            "username": "Rapid_API",
            "tweet_id": "1592270865999110145",
            "tweet_text": "Differences between REST and GraphQL\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592270865999110145",
            "tweet_type": "API tips",
            "created_at": "2022-11-14T21:38:52.000Z"
        },
        {
            "id": 4615,
            "username": "Rapid_API",
            "tweet_id": "1592235918106439682",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:59.000Z"
        },
        {
            "id": 4616,
            "username": "Rapid_API",
            "tweet_id": "1592235913744158720",
            "tweet_text": "We have discussed it in detail in one of our pieces that you can find here. \u2192 https://t.co/QE2TmrZH5R",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:58.000Z"
        },
        {
            "id": 4617,
            "username": "Rapid_API",
            "tweet_id": "1592235909545697280",
            "tweet_text": "\ud83d\udccc node-fetch\n\nIt is a lightweight npm package that lets you use fetch API in Node.js. You can use promise-chaining and async functions to work with it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:57.000Z"
        },
        {
            "id": 4618,
            "username": "Rapid_API",
            "tweet_id": "1592235905301229568",
            "tweet_text": "\ud83d\udccc Got\n\nGot is a lighter, human-friendly powerful HTTP request library explicitly designed to work with Node.js. It supports pagination, RFC-compliant caching, makes an API request again if it fails, supports cookies out of the box, and more.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:56.000Z"
        },
        {
            "id": 4619,
            "username": "Rapid_API",
            "tweet_id": "1592235901219995648",
            "tweet_text": "\ud83d\udccc Axios\n\nAxios is an open-source, promise-based HTTP client. It uses JavaScript\u2019s promises to send HTTP requests and manage their responses.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:55.000Z"
        },
        {
            "id": 4620,
            "username": "Rapid_API",
            "tweet_id": "1592235896975380481",
            "tweet_text": "\ud83d\udccc XMLHttpRequest\n\nIt\u2019s another Web API that lets you communicate with the server via a REST API endpoint to fetch data and then show it to the user without refreshing the page.\n\nDespite its name, the XMLHttpRequest API is not limited to XML and works with JSON data too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:54.000Z"
        },
        {
            "id": 4621,
            "username": "Rapid_API",
            "tweet_id": "1592235892772687873",
            "tweet_text": "\ud83d\udccc fetch API\n\nIt is an asynchronous web API that comes with native JavaScript and returns the data in the form of promises.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:53.000Z"
        },
        {
            "id": 4622,
            "username": "Rapid_API",
            "tweet_id": "1592235888758722562",
            "tweet_text": "There are multiple ways to call APIs in JavaScript.\n\n\ud83d\udc49 fetch API\n\ud83d\udc49 XMLHttpRequest \n\ud83d\udc49 Axios\n\ud83d\udc49 Got\n\ud83d\udc49 node-fetch",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "Others",
            "created_at": "2022-11-14T19:19:52.000Z"
        },
        {
            "id": 4623,
            "username": "Rapid_API",
            "tweet_id": "1592235884820271104",
            "tweet_text": "Different ways to call API in JavaScript\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592235884820271104",
            "tweet_type": "API tips",
            "created_at": "2022-11-14T19:19:51.000Z"
        },
        {
            "id": 4624,
            "username": "Rapid_API",
            "tweet_id": "1592140298502578176",
            "tweet_text": "That\u2019s all for now! Check out RapidAPI Studio (https://t.co/DkvKLVn2aw)\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T13:00:02.000Z"
        },
        {
            "id": 4625,
            "username": "Rapid_API",
            "tweet_id": "1592140294270902272",
            "tweet_text": "Take a look at this piece to learn more about how RapidAPI helps users to test APIs. (https://t.co/0MuYYrfv92)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T13:00:01.000Z"
        },
        {
            "id": 4626,
            "username": "Rapid_API",
            "tweet_id": "1592140290147639298",
            "tweet_text": "7\ufe0f\u20e3 One-click request from the clipboard\n\nRapidAPI Client for VS Code lets you create an API request from the clipboard. \n\nCopy an API, select \u201cCreate new requests from clipboard\u201d from the VS Code command palette, and a request will be generated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T13:00:00.000Z"
        },
        {
            "id": 4627,
            "username": "Rapid_API",
            "tweet_id": "1592140285940834304",
            "tweet_text": "6\ufe0f\u20e3 API testing inside VS Code\n\nSometimes, we need to test and debug our APIs quickly while building them. \n\nWith RapidAPI Client for VS Code, you can test your APIs in the same place you code them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:59:59.000Z"
        },
        {
            "id": 4628,
            "username": "Rapid_API",
            "tweet_id": "1592140281809629185",
            "tweet_text": "5\ufe0f\u20e3 Set up Real-time Alerts\n\nYou can also set up real-time alerts inside the Tests feature of RapidAPI Studio. \n\nThis way, if any of your scheduled tests have failed, you are notified immediately.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:59:58.000Z"
        },
        {
            "id": 4629,
            "username": "Rapid_API",
            "tweet_id": "1592140277468233729",
            "tweet_text": "4\ufe0f\u20e3 Schedule API Tests\n\nRapidAPI Studio lets you schedule tests for your API. \n\nBy scheduling tests, you can look at the RapidAPI Studio dashboard later to check if any scheduled test has failed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:59:57.000Z"
        },
        {
            "id": 4630,
            "username": "Rapid_API",
            "tweet_id": "1592140273403908096",
            "tweet_text": "3\ufe0f\u20e3 Automatic API Test Generation\n\nYou can utilize the automatic test generation feature of RapidAPI Studio if you are not sure how to write an API test. \n\nAll you will need to do is call the API with the help of the user interface and click on the Add to test button.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:59:56.000Z"
        },
        {
            "id": 4631,
            "username": "Rapid_API",
            "tweet_id": "1592140269188567040",
            "tweet_text": "2\ufe0f\u20e3 Write API tests by drag and drop\n\nRapidAPI Studio provides a visual editor that lets you drag and drop testing steps into your API test. \n\nWhen the test runs, each step is executed one after another.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:59:55.000Z"
        },
        {
            "id": 4632,
            "username": "Rapid_API",
            "tweet_id": "1592140265002778624",
            "tweet_text": "1\ufe0f\u20e3 Execute API tests globally\n\nWith RapidAPI Studio, you can quickly run API tests on nine different data centers. \n\nThis way, you can see the API test execution in different geographical locations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:59:54.000Z"
        },
        {
            "id": 4633,
            "username": "Rapid_API",
            "tweet_id": "1592140260846325762",
            "tweet_text": "RapidAPI offers two products to help you test your APIs.\n\n\ud83d\udc49 RapidAPI Studio (https://t.co/DkvKLVEDz6)\n\ud83d\udc49 RapidAPI Client for VS Code (https://t.co/En66s2boMr)\n\nLet\u2019s look at how we can test our APIs using them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "Others",
            "created_at": "2022-11-14T12:59:53.000Z"
        },
        {
            "id": 4634,
            "username": "Rapid_API",
            "tweet_id": "1592140256781815808",
            "tweet_text": "Test Your APIs using RapidAPI\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592140256781815808",
            "tweet_type": "API tips",
            "created_at": "2022-11-14T12:59:52.000Z"
        },
        {
            "id": 4635,
            "username": "Rapid_API",
            "tweet_id": "1591229853742907393",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "Others",
            "created_at": "2022-11-12T00:42:15.000Z"
        },
        {
            "id": 4636,
            "username": "Rapid_API",
            "tweet_id": "1591229849716285442",
            "tweet_text": "- It provides the authorization workflow for mobile, desktop, and web apps.\n\n- It gives users more control over their data.\n\n- OAuth2 relies on SSL (Secure Sockets Layer) to ensure data between the web server and browsers remain private.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "Others",
            "created_at": "2022-11-12T00:42:14.000Z"
        },
        {
            "id": 4637,
            "username": "Rapid_API",
            "tweet_id": "1591229845731778561",
            "tweet_text": "2\ufe0f\u20e3 Features and advantages of OAuth2\n\n- You can use it to read user data from another application.\n\n- It is a server-side web application that does not interact with user credentials.\n\n- It is easier to implement and provides stronger authentication",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "Others",
            "created_at": "2022-11-12T00:42:13.000Z"
        },
        {
            "id": 4638,
            "username": "Rapid_API",
            "tweet_id": "1591229841608613888",
            "tweet_text": "When the OAuth2 provider verifies your identity, it issues an access token.\n\nThis token is then used to access the 3rd party application.\n\nThe token usually has an expiration time.\n\nIt means the application must request a new token when the old one expires.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "Others",
            "created_at": "2022-11-12T00:42:12.000Z"
        },
        {
            "id": 4639,
            "username": "Rapid_API",
            "tweet_id": "1591229837376569344",
            "tweet_text": "1\ufe0f\u20e3 How does it work?\n\nOAuth2 works by delegating user authentication to the service that hosts the user account and authorizing third-party applications to access the user account.\n\nYou log in to the OAuth2 provider with your login and password.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "Others",
            "created_at": "2022-11-12T00:42:11.000Z"
        },
        {
            "id": 4640,
            "username": "Rapid_API",
            "tweet_id": "1591229833253625858",
            "tweet_text": "OAuth2 provides a standard, secure method for these interactions.\n\nFor instance, you can tell Twitter that you agree that the site on the domain example. com is allowed to access your profile information (like name and email) without sharing your password with example. com.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "Others",
            "created_at": "2022-11-12T00:42:10.000Z"
        },
        {
            "id": 4641,
            "username": "Rapid_API",
            "tweet_id": "1591229829332058113",
            "tweet_text": "OAuth2 is an authentication protocol that allows you to authorize applications to access your data.\n\nIt is the successor to the OAuth 1.0 protocol and is designed to provide a more secure and efficient way to authorize applications.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "Others",
            "created_at": "2022-11-12T00:42:09.000Z"
        },
        {
            "id": 4642,
            "username": "Rapid_API",
            "tweet_id": "1591229825393491968",
            "tweet_text": "OAuth2, features, and advantages.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591229825393491968",
            "tweet_type": "API tips",
            "created_at": "2022-11-12T00:42:08.000Z"
        },
        {
            "id": 4643,
            "username": "Rapid_API",
            "tweet_id": "1591167696086990862",
            "tweet_text": "We hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:15.000Z"
        },
        {
            "id": 4644,
            "username": "Rapid_API",
            "tweet_id": "1591167692060655616",
            "tweet_text": "5\ufe0f\u20e3 Use Asynchronous logging\n\nAsynchronous logging refers to the practice of not timing the logging process to the event that is being recorded.\n\nIf the event and the log entry are in a different order, this can help with performance, but it can also cause issues.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:14.000Z"
        },
        {
            "id": 4645,
            "username": "Rapid_API",
            "tweet_id": "1591167687882932226",
            "tweet_text": "Applications that often contact the database may experience improved performance due to connection pooling, which can dramatically lower the overhead of initiating and closing database connections.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:13.000Z"
        },
        {
            "id": 4646,
            "username": "Rapid_API",
            "tweet_id": "1591167683860594688",
            "tweet_text": "4\ufe0f\u20e3 Use connection pooling\n\n Connection pooling is a technique used to increase the performance of database applications by reusing active database connections rather than creating new ones.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:12.000Z"
        },
        {
            "id": 4647,
            "username": "Rapid_API",
            "tweet_id": "1591167679821680640",
            "tweet_text": "3\ufe0f\u20e3 Include caching\n\nYour API's performance can be considerably increased with a cache.\n\nImplement a cache frequently if the data stay the same.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:11.000Z"
        },
        {
            "id": 4648,
            "username": "Rapid_API",
            "tweet_id": "1591167675698642944",
            "tweet_text": "2\ufe0f\u20e3 Utilize pagination\n\nImplement pagination instead of returning massive datasets.\n\nBoth bandwidth and response time can be improved by it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:11.000Z"
        },
        {
            "id": 4649,
            "username": "Rapid_API",
            "tweet_id": "1591167671483400193",
            "tweet_text": "1\ufe0f\u20e3 Respond with the necessary data\n\nOnly the necessary information should be included in the response.\n\nThis affects the bandwidth as well as the speed of the response.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:10.000Z"
        },
        {
            "id": 4650,
            "username": "Rapid_API",
            "tweet_id": "1591167667276505089",
            "tweet_text": "For any business that depends on APIs, API performance is crucial.\n\nA slow or unreliable API may harm the financial health of the business.\n\nHere's how you can improve the performance of your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "Others",
            "created_at": "2022-11-11T20:35:09.000Z"
        },
        {
            "id": 4651,
            "username": "Rapid_API",
            "tweet_id": "1591167663165898754",
            "tweet_text": "How to increase API performance?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591167663165898754",
            "tweet_type": "API tips",
            "created_at": "2022-11-11T20:35:08.000Z"
        },
        {
            "id": 4652,
            "username": "Rapid_API",
            "tweet_id": "1591075769219837952",
            "tweet_text": "You can find all these fantastic APIs and 40,000 more at RapidAPI Hub.\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591075743727222785",
            "tweet_type": "Others",
            "created_at": "2022-11-11T14:29:58.000Z"
        },
        {
            "id": 4653,
            "username": "Rapid_API",
            "tweet_id": "1591075764962836481",
            "tweet_text": "5\ufe0f\u20e3 Breach Directory API\n\nIt is another interesting API that can tell whether an email, username, password, or phone number was compromised in a data breach. \n\n\ud83d\udd17 https://t.co/Qt7Oi8Xtxi",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591075743727222785",
            "tweet_type": "Others",
            "created_at": "2022-11-11T14:29:57.000Z"
        },
        {
            "id": 4654,
            "username": "Rapid_API",
            "tweet_id": "1591075760793845761",
            "tweet_text": "4\ufe0f\u20e3 OOPSpam Filter API\n\nThis API uses machine learning to check text contents for potential spam. It can help filter spam in your contact forms, comments, chat, and whatnot.\n\n\ud83d\udd17 https://t.co/Z2LUhtXJkr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591075743727222785",
            "tweet_type": "Others",
            "created_at": "2022-11-11T14:29:56.000Z"
        },
        {
            "id": 4655,
            "username": "Rapid_API",
            "tweet_id": "1591075756343406594",
            "tweet_text": "3\ufe0f\u20e3 IP Geolocation API\n\nIt looks up the IP addresses of visitors and provides their geolocation information. The information includes country, city, latitude, longitude, timezone, and other security data.\n\n\ud83d\udd17 https://t.co/SEePTQjVqo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591075743727222785",
            "tweet_type": "Others",
            "created_at": "2022-11-11T14:29:55.000Z"
        },
        {
            "id": 4656,
            "username": "Rapid_API",
            "tweet_id": "1591075752019116033",
            "tweet_text": "2\ufe0f\u20e3 ZeroBounce API\n\nIt is a comprehensive email validation API that allows you to check the validity of Emails by verifying their domains.\n\n\ud83d\udd17 https://t.co/cHh0yc3neG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591075743727222785",
            "tweet_type": "Others",
            "created_at": "2022-11-11T14:29:54.000Z"
        },
        {
            "id": 4657,
            "username": "Rapid_API",
            "tweet_id": "1591075747900588036",
            "tweet_text": "1\ufe0f\u20e3 D7SMS API\n\nIt allows you to add phone-based verification and two-factor authentication to your application by sending codes via text.\n\n\ud83d\udd17 https://t.co/OEi4gzwEP0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591075743727222785",
            "tweet_type": "Others",
            "created_at": "2022-11-11T14:29:53.000Z"
        },
        {
            "id": 4658,
            "username": "Rapid_API",
            "tweet_id": "1591075743727222785",
            "tweet_text": "Five APIs that can enhance your application's security. \n\nA thread \ud83d\udc47\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591075743727222785",
            "tweet_type": "API tips",
            "created_at": "2022-11-11T14:29:52.000Z"
        },
        {
            "id": 4659,
            "username": "Rapid_API",
            "tweet_id": "1590867916504719361",
            "tweet_text": "We hope you found this helpful! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:44:02.000Z"
        },
        {
            "id": 4660,
            "username": "Rapid_API",
            "tweet_id": "1590867912302407680",
            "tweet_text": "In short, it acts as a routing service that sends requests to the appropriate service. ESBs can also transform requests into an appropriate format for the underlying platform of a service.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:44:01.000Z"
        },
        {
            "id": 4661,
            "username": "Rapid_API",
            "tweet_id": "1590867908066181120",
            "tweet_text": "SOA also uses a centralized service called an Enterprise Service Bus (ESB), which establishes communication between services and consumers regardless of the technology used.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:44:00.000Z"
        },
        {
            "id": 4662,
            "username": "Rapid_API",
            "tweet_id": "1590867903934521347",
            "tweet_text": "\ud83d\udccc How does SOA work?\n\nServices communicate using standardized protocols to transmit data over a network in a request and response format. Commonly one or more of the following is used:\n\n1. SOAP\n2. RESTful HTTP\n3. Apache Thrift",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:43:59.000Z"
        },
        {
            "id": 4663,
            "username": "Rapid_API",
            "tweet_id": "1590867899883061248",
            "tweet_text": "4. Abstraction - Clients do not need to know a service\u2019s underlying technology or code. Each service hides its logic, and clients get any information they need from service documents or contacts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:43:58.000Z"
        },
        {
            "id": 4664,
            "username": "Rapid_API",
            "tweet_id": "1590867895747231745",
            "tweet_text": "2. Interoperability - Any client should be able to run a service regardless of the underlying platform and programming language being used.\n\n3. Reusability - Needs of the application are divided into services with the aim of maximizing reusability.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:43:57.000Z"
        },
        {
            "id": 4665,
            "username": "Rapid_API",
            "tweet_id": "1590867891758530561",
            "tweet_text": "\ud83d\udccc Principles of SOA\n\n1. Loose coupling - Each service should have a low dependency on external resources. They should also be stateless and not retain any data from past sessions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:43:56.000Z"
        },
        {
            "id": 4666,
            "username": "Rapid_API",
            "tweet_id": "1590867887702835200",
            "tweet_text": "\ud83d\udccc Benefits of SOA\n\nWith SOA, developers can reuse services in different systems. This means less time spent developing and faster time to market. \n\nIt is also easier to scale and improve individual services. Modifying one service will not affect the whole application.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:43:55.000Z"
        },
        {
            "id": 4667,
            "username": "Rapid_API",
            "tweet_id": "1590867883550294016",
            "tweet_text": "In SOA applications, each service is independent and provides its own business purposes but can communicate with others across various platforms and languages.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:43:54.000Z"
        },
        {
            "id": 4668,
            "username": "Rapid_API",
            "tweet_id": "1590867879519727616",
            "tweet_text": "Service-oriented architecture (SOA) is a software architectural style that structures an application by breaking it down into multiple components called services.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "Others",
            "created_at": "2022-11-11T00:43:54.000Z"
        },
        {
            "id": 4669,
            "username": "Rapid_API",
            "tweet_id": "1590867875413336065",
            "tweet_text": "What exactly is service-oriented architecture?\n\nA Thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590867875413336065",
            "tweet_type": "API tips",
            "created_at": "2022-11-11T00:43:53.000Z"
        },
        {
            "id": 4670,
            "username": "Rapid_API",
            "tweet_id": "1590777567614681088",
            "tweet_text": "Thanks for reading! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:45:01.000Z"
        },
        {
            "id": 4671,
            "username": "Rapid_API",
            "tweet_id": "1590777563399573504",
            "tweet_text": "\ud83d\udccc Apply rate-limiting\n\nRate-limiting controls the requests your API receives in a given period.\n\nLimiting traffic to your API can prevent potential attackers from launching a DDoS attack and other unexpected request influxes. It also improves scalability.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:45:00.000Z"
        },
        {
            "id": 4672,
            "username": "Rapid_API",
            "tweet_id": "1590777559335440384",
            "tweet_text": "\ud83d\udccc Use the UTF-8 Standard\n\nUnicode is the world standard for consistently encoding and handling texts in global writing systems. Using the UTF-8 Standard for character sets ensures texts will remain stable when stored and exchanged.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:45:00.000Z"
        },
        {
            "id": 4673,
            "username": "Rapid_API",
            "tweet_id": "1590777555149328398",
            "tweet_text": "\ud83d\udccc Documentation\n\nGenerating documentation alongside the design and building process is a good idea.\n\nAlways include a getting started section, a description of what your API does, task-based guidance, code snippet examples, and a common errors section.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:44:59.000Z"
        },
        {
            "id": 4674,
            "username": "Rapid_API",
            "tweet_id": "1590777551018160128",
            "tweet_text": "Application-level authorization means controlling which applications can access your API without limiting who can access them. This may be less suitable for APIs using sensitive data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:44:58.000Z"
        },
        {
            "id": 4675,
            "username": "Rapid_API",
            "tweet_id": "1590777546718662658",
            "tweet_text": "\ud83d\udccc Consider authorization control\n\nConsider both user-level authorization and application-level authorization.\n\nUser-level authorization is for access control and auditing. It controls who can access your API, which is vital if your API deals with sensitive data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:44:57.000Z"
        },
        {
            "id": 4676,
            "username": "Rapid_API",
            "tweet_id": "1590777542348111872",
            "tweet_text": "For guidance, read the official JSON specification: JSON data exchange standard (https://t.co/2zVmojbetq), and use a response format specified by your organization or one made specifically for API responses (e.g., https://t.co/e5xfEZ8Acj)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:44:55.000Z"
        },
        {
            "id": 4677,
            "username": "Rapid_API",
            "tweet_id": "1590777538099302403",
            "tweet_text": "\ud83d\udccc Use JSON response formats\n\nJSON is the most widely used data exchange format. There are various JSON response formats used today.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:44:54.000Z"
        },
        {
            "id": 4678,
            "username": "Rapid_API",
            "tweet_id": "1590777534010036239",
            "tweet_text": "\ud83d\udccc Name resources consistently\n\nInconsistent naming makes your API more challenging to use. Users should be able to assume names for your resources. \n\nFor example, \u2018id_user\u2019 and \u2018user_name\u2019 is inconsistent. Using a consistent format would be \u2018user_id\u2019 and \u2018user_name.\u2019",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "Others",
            "created_at": "2022-11-10T18:44:53.000Z"
        },
        {
            "id": 4679,
            "username": "Rapid_API",
            "tweet_id": "1590777530021281793",
            "tweet_text": "Tips when building a REST API.\n\nA Thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590777530021281793",
            "tweet_type": "API tips",
            "created_at": "2022-11-10T18:44:53.000Z"
        },
        {
            "id": 4680,
            "username": "Rapid_API",
            "tweet_id": "1590690757697888257",
            "tweet_text": "We hope you found this helpful! Follow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T13:00:04.000Z"
        },
        {
            "id": 4681,
            "username": "Rapid_API",
            "tweet_id": "1590690753348501510",
            "tweet_text": "\ud83d\udd1f Host\n\nA request header that specifies the host (domain name) and port number of the server being requested.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T13:00:03.000Z"
        },
        {
            "id": 4682,
            "username": "Rapid_API",
            "tweet_id": "1590690749158498305",
            "tweet_text": "9\ufe0f\u20e3 Cache-Control\n\nThis server and client-side header communicates how the cache should be controlled using directives and values.\n\nSome examples of the various directives:\n\n- Cache-Control: no-store\n- Cache-Control: max-age\n- Cache-control: public",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T13:00:02.000Z"
        },
        {
            "id": 4683,
            "username": "Rapid_API",
            "tweet_id": "1590690745010339845",
            "tweet_text": "8\ufe0f\u20e3 Content-Length\n\nIndicates the size of the message body in bytes and can be used in either requests or responses.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T13:00:01.000Z"
        },
        {
            "id": 4684,
            "username": "Rapid_API",
            "tweet_id": "1590690740480286721",
            "tweet_text": "7\ufe0f\u20e3 Accept-Language\n\nUsed to state which human language or languages are understood by the client so that the user can choose their preferred.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T13:00:00.000Z"
        },
        {
            "id": 4685,
            "username": "Rapid_API",
            "tweet_id": "1590690735887888384",
            "tweet_text": "6\ufe0f\u20e3 Access-Control-Allow-Methods\n\nA cross-origin resource sharing (CORS) header that indicates which HTTP methods are allowed to access the resource.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T12:59:59.000Z"
        },
        {
            "id": 4686,
            "username": "Rapid_API",
            "tweet_id": "1590690731236110336",
            "tweet_text": "5\ufe0f\u20e3 Access-Control-Allow-Origin\n\nA server-side header that lists the server\u2019s accepted web addresses, with which it only expects to interact.\n\nAny client-side errors referencing \u2018cross-origin-request\u2019 (CORS) may be linked to this header.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T12:59:58.000Z"
        },
        {
            "id": 4687,
            "username": "Rapid_API",
            "tweet_id": "1590690726958039041",
            "tweet_text": "4\ufe0f\u20e3 Accept-Encoding\n\nTells the server which encoding method the client can understand. This refers to how the data is compressed in transfer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T12:59:57.000Z"
        },
        {
            "id": 4688,
            "username": "Rapid_API",
            "tweet_id": "1590690722763636736",
            "tweet_text": "3\ufe0f\u20e3 Content-Type\n\nSpecifies the type of content the server returns, e.g., JSON, text, form-data, etc.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T12:59:56.000Z"
        },
        {
            "id": 4689,
            "username": "Rapid_API",
            "tweet_id": "1590690718258909184",
            "tweet_text": "2\ufe0f\u20e3 Authorization\n\nA client-side header that passes the credentials to the server.\n\nThis is not the same as authentication. The server can only authenticate the user after it checks the authorization credentials.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T12:59:55.000Z"
        },
        {
            "id": 4690,
            "username": "Rapid_API",
            "tweet_id": "1590690713670660096",
            "tweet_text": "1\ufe0f\u20e3 Accept\n\nA client-side header that defines the type of data the client expects from the server.\n\nThis means the server won\u2019t waste time returning a data type the client cannot use.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "Others",
            "created_at": "2022-11-10T12:59:54.000Z"
        },
        {
            "id": 4691,
            "username": "Rapid_API",
            "tweet_id": "1590690709299929090",
            "tweet_text": "HTTP headers that developers should be aware of.\n\nThread\ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590690709299929090",
            "tweet_type": "API tips",
            "created_at": "2022-11-10T12:59:53.000Z"
        },
        {
            "id": 4692,
            "username": "Rapid_API",
            "tweet_id": "1590501768554766337",
            "tweet_text": "Follow @Rapid_API for more tips about RapidAPI Studio.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590501740041805824",
            "tweet_type": "Others",
            "created_at": "2022-11-10T00:29:06.000Z"
        },
        {
            "id": 4693,
            "username": "Rapid_API",
            "tweet_id": "1590501763794468864",
            "tweet_text": "3\ufe0f\u20e3 You can switch between sessions\n\nYou can switch between sessions by selecting one from the combo box.\n\nThis feature can be helpful if you want to simulate different users or different client conditions. https://t.co/ISTUpDYrkM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhKY5uxXoAAYbSO.jpg\"]",
            "tweet_conversation_id": "1590501740041805824",
            "tweet_type": "Others",
            "created_at": "2022-11-10T00:29:05.000Z"
        },
        {
            "id": 4694,
            "username": "Rapid_API",
            "tweet_id": "1590501758962634752",
            "tweet_text": "To remove the session altogether, use the \"Remove\" button in the bottom left corner. https://t.co/2sk334oCjQ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhKY5e_WQAA2O5V.png\"]",
            "tweet_conversation_id": "1590501740041805824",
            "tweet_type": "Others",
            "created_at": "2022-11-10T00:29:04.000Z"
        },
        {
            "id": 4695,
            "username": "Rapid_API",
            "tweet_id": "1590501753383899136",
            "tweet_text": "2\ufe0f\u20e3 The following modal will appear when you can:\n\n1. Add a new session\n\n2. Define/Delete cookies\n\n3. Rename the session https://t.co/YzMtZtd8Iw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhKY5LJWQAYrlxD.jpg\"]",
            "tweet_conversation_id": "1590501740041805824",
            "tweet_type": "Others",
            "created_at": "2022-11-10T00:29:02.000Z"
        },
        {
            "id": 4696,
            "username": "Rapid_API",
            "tweet_id": "1590501748342652928",
            "tweet_text": "1\ufe0f\u20e3 To create a new session, click the settings icon in the Sessions group. https://t.co/5Llimc8q0g",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhKY485XgAAhhXj.jpg\"]",
            "tweet_conversation_id": "1590501740041805824",
            "tweet_type": "Others",
            "created_at": "2022-11-10T00:29:01.000Z"
        },
        {
            "id": 4697,
            "username": "Rapid_API",
            "tweet_id": "1590501744219406339",
            "tweet_text": "RapidAPI Studio allows you to define different sessions with different cookies you want to send to your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590501740041805824",
            "tweet_type": "Others",
            "created_at": "2022-11-10T00:29:00.000Z"
        },
        {
            "id": 4698,
            "username": "Rapid_API",
            "tweet_id": "1590501740041805824",
            "tweet_text": "RapidAPI Studio sessions\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590501740041805824",
            "tweet_type": "API tips",
            "created_at": "2022-11-10T00:28:59.000Z"
        },
        {
            "id": 4699,
            "username": "Rapid_API",
            "tweet_id": "1590418448655474688",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:58:01.000Z"
        },
        {
            "id": 4700,
            "username": "Rapid_API",
            "tweet_id": "1590418444628942849",
            "tweet_text": "If you want to learn more about API Management, we have also written a piece about it. (https://t.co/haDfpV0L5M)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:58:00.000Z"
        },
        {
            "id": 4701,
            "username": "Rapid_API",
            "tweet_id": "1590418440573042689",
            "tweet_text": "4\ufe0f\u20e3 API Security\n\nYou also need to ensure that the APIs are secure; otherwise, your data will be vulnerable to outside threats. \n\nYou can use techniques like rate-limiting, authentication, input validation, and a fail-safe to add an additional security layer within your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:57:59.000Z"
        },
        {
            "id": 4702,
            "username": "Rapid_API",
            "tweet_id": "1590418436475310084",
            "tweet_text": "3\ufe0f\u20e3 Provide Reliability\n\nYour APIs must be reliable; otherwise, no one will use them. \n\nYou can do this by ensuring you are pulling the data from reliable sources or providing an endpoint that does not crash as the traffic increases.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:57:58.000Z"
        },
        {
            "id": 4703,
            "username": "Rapid_API",
            "tweet_id": "1590418432326979585",
            "tweet_text": "2\ufe0f\u20e3 Provide API Support\n\nOne of the essential API management practices is providing quality support for your APIs to developers. \n\nYou should also provide as many options as possible so developers can fully utilize the power of your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:57:57.000Z"
        },
        {
            "id": 4704,
            "username": "Rapid_API",
            "tweet_id": "1590418428011040769",
            "tweet_text": "\ud83d\udccc Best Practices\n\n1\ufe0f\u20e3 API availability\n\nYou need to ensure that your API is available at all times and see as little downtime as reasonably possible. It is because if your API goes down, your whole business can go down with it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:57:56.000Z"
        },
        {
            "id": 4705,
            "username": "Rapid_API",
            "tweet_id": "1590418423762542592",
            "tweet_text": "It includes but is not limited to:\n\n\ud83d\udc49 making them accessible to all users\n\ud83d\udc49 monitoring and analyzing their usage\n\ud83d\udc49 reporting performance metrics\n\ud83d\udc49 securing access so only authenticated users can use them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:57:55.000Z"
        },
        {
            "id": 4706,
            "username": "Rapid_API",
            "tweet_id": "1590418419492753408",
            "tweet_text": "\ud83d\udccc What is API management?\n\nAPI management is the process of distributing, controlling, and analyzing the APIs.\n\nIt is a practice of overseeing all aspects of your enterprise's APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:57:54.000Z"
        },
        {
            "id": 4707,
            "username": "Rapid_API",
            "tweet_id": "1590418415310835712",
            "tweet_text": "API Management Best Practices.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590418415310835712",
            "tweet_type": "API tips",
            "created_at": "2022-11-09T18:57:53.000Z"
        },
        {
            "id": 4708,
            "username": "Rapid_API",
            "tweet_id": "1590406259333042176",
            "tweet_text": "RapidAPI at #GitHubUniverse https://t.co/1G2YyesoQ8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhJCDuAUoAE9bt1.jpg\", \"https://pbs.twimg.com/media/FhJCDuFVIAEx_GW.jpg\", \"https://pbs.twimg.com/media/FhJCDuDUUAALPA9.jpg\", \"https://pbs.twimg.com/media/FhJCDuFVIAALaUE.jpg\"]",
            "tweet_conversation_id": "1590374048919617537",
            "tweet_type": "Others",
            "created_at": "2022-11-09T18:09:35.000Z"
        },
        {
            "id": 4709,
            "username": "Rapid_API",
            "tweet_id": "1590374048919617537",
            "tweet_text": "RapidAPI is at #GitHubUniverse; find our VP of DevRel @MrAhmadAwais and come say Hi. \ud83d\udc4b\ud83d\udc4b\ud83d\udc4b https://t.co/UfwShirqgr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhIjXnRUoAEWICM.jpg\", \"https://pbs.twimg.com/media/FhIjg3wUoAM__7V.jpg\", \"https://pbs.twimg.com/media/FhIjohUVEAILpje.jpg\", \"https://pbs.twimg.com/media/FhIjzJpVEAEXraV.jpg\"]",
            "tweet_conversation_id": "1590374048919617537",
            "tweet_type": "Others",
            "created_at": "2022-11-09T16:01:35.000Z"
        },
        {
            "id": 4710,
            "username": "Rapid_API",
            "tweet_id": "1590328354317938689",
            "tweet_text": "And don't forget. You can then monetize these APIs on RapidAPI Hub (https://t.co/olbzlG0Ci6).\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99\n\nHappy building \ud83d\ude09",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590328327922802689",
            "tweet_type": "Others",
            "created_at": "2022-11-09T13:00:01.000Z"
        },
        {
            "id": 4711,
            "username": "Rapid_API",
            "tweet_id": "1590328349993345026",
            "tweet_text": "5\ufe0f\u20e3 Tweet generator API\n\nThis idea can help content creators.\n\nImagine an API based on OpenAI that generates tweets on different topics.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590328327922802689",
            "tweet_type": "Others",
            "created_at": "2022-11-09T13:00:00.000Z"
        },
        {
            "id": 4712,
            "username": "Rapid_API",
            "tweet_id": "1590328345396477952",
            "tweet_text": "4\ufe0f\u20e3 Color schemes API\n\nThere are numerous palette generators on the web.\n\nYou can create an API that will send a color palette based on the primary color sent in the payload.\n\n- primary color\n- customizable number of colors in the palette\n- optional color shades",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590328327922802689",
            "tweet_type": "Others",
            "created_at": "2022-11-09T12:59:59.000Z"
        },
        {
            "id": 4713,
            "username": "Rapid_API",
            "tweet_id": "1590328341193695237",
            "tweet_text": "3\ufe0f\u20e3 Web screenshot API\n\nAPI that generates screenshots of web pages.\n\nHere you can implement several additional features:\n\n- background (solid, gradient)\n- watermark\n- rounded corners\n- different sizes generated",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590328327922802689",
            "tweet_type": "Others",
            "created_at": "2022-11-09T12:59:58.000Z"
        },
        {
            "id": 4714,
            "username": "Rapid_API",
            "tweet_id": "1590328336999399425",
            "tweet_text": "2\ufe0f\u20e3 Invoice API\n\nThis API will create invoices with multiple items.\n\nYou need to implement at least the following:\n\n- invoice number\n- client contact information\n- invoice contact information\n- invoice items (name, description, quantity, price)\n- total price\n- notes",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590328327922802689",
            "tweet_type": "Others",
            "created_at": "2022-11-09T12:59:57.000Z"
        },
        {
            "id": 4715,
            "username": "Rapid_API",
            "tweet_id": "1590328332503040000",
            "tweet_text": "1\ufe0f\u20e3 Notes API\n\nThis API will implement a whole CRUD system for managing notes.\n\n- list notes\n- create notes\n- edit notes\n- delete notes\n- create note categories\n- move notes between categories",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590328327922802689",
            "tweet_type": "Others",
            "created_at": "2022-11-09T12:59:55.000Z"
        },
        {
            "id": 4716,
            "username": "Rapid_API",
            "tweet_id": "1590328327922802689",
            "tweet_text": "5 API ideas you can build and monetize.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590328327922802689",
            "tweet_type": "API tips",
            "created_at": "2022-11-09T12:59:54.000Z"
        },
        {
            "id": 4717,
            "username": "Rapid_API",
            "tweet_id": "1590036178660913154",
            "tweet_text": "And while this new brand is an important milestone for the company, one thing remains an unshakeable foundation of our company \u2013 we are developers building software for developers first and foremost.\n\n\u2728 Introducing Our New Brand: Rapid by @IddoGino \n\u21b3 https://t.co/T7PHZfz1He https://t.co/hyTsgO0Se1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDw4bOaEAQEuYa.png\"]",
            "tweet_conversation_id": "1590036158867968000",
            "tweet_type": "Others",
            "created_at": "2022-11-08T17:39:01.000Z"
        },
        {
            "id": 4718,
            "username": "Rapid_API",
            "tweet_id": "1590036173749354497",
            "tweet_text": "Today, we take another major step forward with the evolution of our brand \u2013 updating our visual language and renaming RapidAPI to Rapid. https://t.co/0ZljVZzCCx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDwKbdaUAAEd4Q.jpg\"]",
            "tweet_conversation_id": "1590036158867968000",
            "tweet_type": "Others",
            "created_at": "2022-11-08T17:38:59.000Z"
        },
        {
            "id": 4719,
            "username": "Rapid_API",
            "tweet_id": "1590036169693487104",
            "tweet_text": "As many of you have likely noticed over the past year, we have radically expanded the types of software, services, and support we provide to you \u2013 our developer community. Did you check out RapidAPI Client extension for VSCode. \ud83d\udc99 https://t.co/rLHQ8suUTr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDwBLKaMAEd3bg.jpg\"]",
            "tweet_conversation_id": "1590036158867968000",
            "tweet_type": "Others",
            "created_at": "2022-11-08T17:38:58.000Z"
        },
        {
            "id": 4720,
            "username": "Rapid_API",
            "tweet_id": "1590036164874240001",
            "tweet_text": "We are excited to introduce our refreshed Rapid brand, which includes a new name, logo, and colors that reflect our exciting growth as we focus on delivering the next-generation platform to power the API economy.\n\nWoohoo! \ud83e\udd73\ud83e\udd73\ud83e\udd73 https://t.co/Hia7rMcD4P",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDxMTCaAAAfcIU.png\"]",
            "tweet_conversation_id": "1590036158867968000",
            "tweet_type": "Others",
            "created_at": "2022-11-08T17:38:57.000Z"
        },
        {
            "id": 4721,
            "username": "Rapid_API",
            "tweet_id": "1590036158867968000",
            "tweet_text": "RapidAPI is now Rapid. \ud83e\udd73\n\nWe are stoked to launch the refreshed Rapid brand! https://t.co/Jb7qzmAYoe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhDvq9FacAAjpjm.jpg\"]",
            "tweet_conversation_id": "1590036158867968000",
            "tweet_type": "Others",
            "created_at": "2022-11-08T17:38:56.000Z"
        },
        {
            "id": 4722,
            "username": "Rapid_API",
            "tweet_id": "1590013804762599424",
            "tweet_text": "Thanks for reading! Follow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:10:06.000Z"
        },
        {
            "id": 4723,
            "username": "Rapid_API",
            "tweet_id": "1590013800631087104",
            "tweet_text": "\ud83d\udccc 500 Internal Server Error\n\nThe request is valid, but there is an unexpected and unknown server-side problem, and the request cannot be completed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:10:05.000Z"
        },
        {
            "id": 4724,
            "username": "Rapid_API",
            "tweet_id": "1590013796306731008",
            "tweet_text": "\ud83d\udccc 404 Not Found\n\nThe request is valid, but the resource is not found on the server.\n\nIn an API, this means the endpoint is valid, but the resource does not exist. In the browser, it means the URL is not recognized.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:10:04.000Z"
        },
        {
            "id": 4725,
            "username": "Rapid_API",
            "tweet_id": "1590013792192184323",
            "tweet_text": "\ud83d\udccc 403 Forbidden\n\nThe client's identity is known to the server, but they do not have permission to access the resource.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:10:03.000Z"
        },
        {
            "id": 4726,
            "username": "Rapid_API",
            "tweet_id": "1590013788178288641",
            "tweet_text": "\ud83d\udccc 401 Unauthorized\n\nThe client cannot access the resource because they are not authenticated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:10:02.000Z"
        },
        {
            "id": 4727,
            "username": "Rapid_API",
            "tweet_id": "1590013784080674816",
            "tweet_text": "\ud83d\udccc 400 Bad Request\n\nThe request can not be fulfilled due to a client error. Examples that cause this status code are invalid formatting, a request syntax error, or missing data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:10:01.000Z"
        },
        {
            "id": 4728,
            "username": "Rapid_API",
            "tweet_id": "1590013779856826370",
            "tweet_text": "\ud83d\udccc 304 Not Modified\n\nThis code is for caching purposes. If the resource has not been modified, this code is returned to let the client know they can continue using the same cached version.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:10:00.000Z"
        },
        {
            "id": 4729,
            "username": "Rapid_API",
            "tweet_id": "1590013775821692928",
            "tweet_text": "\ud83d\udccc 301 Permanent Redirect\n\nThe requested resource has been permanently moved to a new URL indicated in the \u2018Location\u2019 response header.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:09:59.000Z"
        },
        {
            "id": 4730,
            "username": "Rapid_API",
            "tweet_id": "1590013771682045959",
            "tweet_text": "\ud83d\udccc 204 No Content\n\nThe request was successful, but no new information needed to be returned. This is typical of DELETE requests.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:09:58.000Z"
        },
        {
            "id": 4731,
            "username": "Rapid_API",
            "tweet_id": "1590013767689318400",
            "tweet_text": "\ud83d\udccc 201 Created\n\nThe request was successful, and a new resource was created. This is typical of successful PUT and POST requests.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:09:57.000Z"
        },
        {
            "id": 4732,
            "username": "Rapid_API",
            "tweet_id": "1590013763616481283",
            "tweet_text": "\ud83d\udccc 200 OK\n\nThe standard \u2018OK\u2019 status code means an HTTP request was successful, and the resource was delivered.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "Others",
            "created_at": "2022-11-08T16:09:56.000Z"
        },
        {
            "id": 4733,
            "username": "Rapid_API",
            "tweet_id": "1590013759610822656",
            "tweet_text": "10 HTTP status codes all developers should recognize.\n\nThread\ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590013759610822656",
            "tweet_type": "API tips",
            "created_at": "2022-11-08T16:09:55.000Z"
        },
        {
            "id": 4734,
            "username": "Rapid_API",
            "tweet_id": "1589981579786551296",
            "tweet_text": "Thanks for reading! Follow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:02:03.000Z"
        },
        {
            "id": 4735,
            "username": "Rapid_API",
            "tweet_id": "1589981575642767360",
            "tweet_text": "4. Resource Server\n\nThis is where protected resources are located. \n\nResource servers receive client access requests, validate their access token, and deliver the resource needed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:02:02.000Z"
        },
        {
            "id": 4736,
            "username": "Rapid_API",
            "tweet_id": "1589981571330736129",
            "tweet_text": "3. Authorization Server\n\nThis server issues access tokens to clients who request access to a resource.\n\nAccess tokens are issued after successful authentication and consent by the resource owner.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:02:01.000Z"
        },
        {
            "id": 4737,
            "username": "Rapid_API",
            "tweet_id": "1589981567358746626",
            "tweet_text": "2. Client\n\nThe system that is requesting access to the protected resource. The client must provide the appropriate token to gain access.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:02:00.000Z"
        },
        {
            "id": 4738,
            "username": "Rapid_API",
            "tweet_id": "1589981563248254978",
            "tweet_text": "1. Resource Owner\n\nThis is the user or system that owns the protected resource and can grant access to it using the OAuth 2.0 authorization standards.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:01:59.000Z"
        },
        {
            "id": 4739,
            "username": "Rapid_API",
            "tweet_id": "1589981558957805569",
            "tweet_text": "OAuth 2.0 defines roles which are core components of its specification. There are four roles, each being an essential part of the framework.\n\nLet\u2019s look at each role \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "API tips",
            "created_at": "2022-11-08T14:01:58.000Z"
        },
        {
            "id": 4740,
            "username": "Rapid_API",
            "tweet_id": "1589981554578595840",
            "tweet_text": "OAuth 2.0 does not define a particular access token format, but JSON Web Tokens (JWTs) are commonly used.\n\nThese tokens contain authorization information representing a user's access to a specific resource.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:01:57.000Z"
        },
        {
            "id": 4741,
            "username": "Rapid_API",
            "tweet_id": "1589981550397083649",
            "tweet_text": "An example is logging in to an app via your Google or Facebook account.\n\nYour credentials are used without being disclosed to another app. This is achieved using access tokens.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:01:56.000Z"
        },
        {
            "id": 4742,
            "username": "Rapid_API",
            "tweet_id": "1589981546370535424",
            "tweet_text": "OAuth (Open Authorization) is an authorization standard that allows applications to access resources hosted by other web applications on behalf of the user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "Others",
            "created_at": "2022-11-08T14:01:55.000Z"
        },
        {
            "id": 4743,
            "username": "Rapid_API",
            "tweet_id": "1589981542293512192",
            "tweet_text": "An introduction to OAuth 2.0.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589981542293512192",
            "tweet_type": "API tips",
            "created_at": "2022-11-08T14:01:54.000Z"
        },
        {
            "id": 4744,
            "username": "Rapid_API",
            "tweet_id": "1589777777435238400",
            "tweet_text": "Hope you enjoyed this thread.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "Others",
            "created_at": "2022-11-08T00:32:13.000Z"
        },
        {
            "id": 4745,
            "username": "Rapid_API",
            "tweet_id": "1589777773077356545",
            "tweet_text": "If you want to use the different cache times for specific routes, you can do so with the code you can see below. https://t.co/87CRf1gzoT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhAGb1TWQAAY2lr.jpg\"]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "Others",
            "created_at": "2022-11-08T00:32:12.000Z"
        },
        {
            "id": 4746,
            "username": "Rapid_API",
            "tweet_id": "1589777769029844993",
            "tweet_text": "We pass the actual number of minutes we want to cache the results.\n\nIn our case, it's 2 minutes.\n\nDuration is in the following format \"[length][unit],\", e.g. \"12 minutes,\" or \"1 day\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "Others",
            "created_at": "2022-11-08T00:32:11.000Z"
        },
        {
            "id": 4747,
            "username": "Rapid_API",
            "tweet_id": "1589777764269244417",
            "tweet_text": "How to utilize the package is demonstrated in the code below.\n\n1\ufe0f\u20e3 First, require the package.\n\n2\ufe0f\u20e3  We create a variable called cache, which holds the configured apicache middleware.\n\n3\ufe0f\u20e3 To use the middleware, use the express function \"app.use\".\n\nIt'll be applied to every route. https://t.co/rvKgTs9K1E",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhAGbftWYAM-mrs.jpg\"]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "Others",
            "created_at": "2022-11-08T00:32:10.000Z"
        },
        {
            "id": 4748,
            "username": "Rapid_API",
            "tweet_id": "1589777760091885569",
            "tweet_text": "For this, we'll make use of the \"apicache\" package.\n\nInstall the package first by running the following command in your terminal.\n\nnpm i apicache",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "Others",
            "created_at": "2022-11-08T00:32:09.000Z"
        },
        {
            "id": 4749,
            "username": "Rapid_API",
            "tweet_id": "1589777756077826055",
            "tweet_text": "Let's demonstrate how caching may be added to the NodeJs Express API application.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "Others",
            "created_at": "2022-11-08T00:32:08.000Z"
        },
        {
            "id": 4750,
            "username": "Rapid_API",
            "tweet_id": "1589777751858327552",
            "tweet_text": "Caching is a technique that is used to speed up the API by storing frequently accessed data in a temporary storage area.\n\nWhen the data is needed again, it can be retrieved from the cache instead of being fetched from its original location.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "Others",
            "created_at": "2022-11-08T00:32:07.000Z"
        },
        {
            "id": 4751,
            "username": "Rapid_API",
            "tweet_id": "1589777747622051841",
            "tweet_text": "How to cache API requests in Express.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589777747622051841",
            "tweet_type": "API tips",
            "created_at": "2022-11-08T00:32:06.000Z"
        },
        {
            "id": 4752,
            "username": "Rapid_API",
            "tweet_id": "1589707040070533120",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "Others",
            "created_at": "2022-11-07T19:51:08.000Z"
        },
        {
            "id": 4753,
            "username": "Rapid_API",
            "tweet_id": "1589707036014612480",
            "tweet_text": "We have discussed API injections in detail on RapidAPI Guides. (https://t.co/DXEFzGVE0V)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "Others",
            "created_at": "2022-11-07T19:51:07.000Z"
        },
        {
            "id": 4754,
            "username": "Rapid_API",
            "tweet_id": "1589707031836954624",
            "tweet_text": "\ud83d\udccc Prevention techniques\n\n- The user input should be sanitized properly both on the client and server sides. \n- We can encode special characters and change their meaning. This way interpreter will treat them as data rather than special characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "Others",
            "created_at": "2022-11-07T19:51:06.000Z"
        },
        {
            "id": 4755,
            "username": "Rapid_API",
            "tweet_id": "1589707027617554432",
            "tweet_text": "\ud83d\udccc API Injection impact\n\nAPI injection can affect your API in the following ways:\n\n- Database leak\n- Authentication issues\n- Full take-over of the system\n- Denial of service (DoS)\n- Attackers may carry out remote code execution\n- Attackers may also create new functionality",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "Others",
            "created_at": "2022-11-07T19:51:05.000Z"
        },
        {
            "id": 4756,
            "username": "Rapid_API",
            "tweet_id": "1589707023507066881",
            "tweet_text": "\ud83d\udccc Example\n\nA simple example is when you want to view the uploaded file. The API will take the file id to the server to retrieve it. If the user sends a malicious code along with the file id, it will be executed on the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "Others",
            "created_at": "2022-11-07T19:51:04.000Z"
        },
        {
            "id": 4757,
            "username": "Rapid_API",
            "tweet_id": "1589707019300347906",
            "tweet_text": "\ud83d\udccc Command Injections\n\nWhen an API injection brings a system command to the server, it turns into a Command injection.\n\nThe command, if executed, can delete site directories or the entire site from the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "Others",
            "created_at": "2022-11-07T19:51:03.000Z"
        },
        {
            "id": 4758,
            "username": "Rapid_API",
            "tweet_id": "1589707015282167811",
            "tweet_text": "API injection occurs when the user sends malicious code with the API request as part of the request body or query parameter. \n\nMost of the time, the code is a database query that executes and corrupts the database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "Others",
            "created_at": "2022-11-07T19:51:02.000Z"
        },
        {
            "id": 4759,
            "username": "Rapid_API",
            "tweet_id": "1589707011264069633",
            "tweet_text": "API Injections. What is it?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589707011264069633",
            "tweet_type": "API tips",
            "created_at": "2022-11-07T19:51:01.000Z"
        },
        {
            "id": 4760,
            "username": "Rapid_API",
            "tweet_id": "1589618687291670528",
            "tweet_text": "That's all, thanks for reading! \n\nFollow @Rapid_API for more exclusive content.\n\nVisit RapidAPI Hub (https://t.co/2tM1EEQGY2) and play around with 40,000 more APIs. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T14:00:03.000Z"
        },
        {
            "id": 4761,
            "username": "Rapid_API",
            "tweet_id": "1589618683088879617",
            "tweet_text": "\ud83d\udd1f MOON API\n\nAccess all lunar data, including lunar phases, illumination, and distance.\n\nhttps://t.co/gJB0Ttdb8S",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T14:00:02.000Z"
        },
        {
            "id": 4762,
            "username": "Rapid_API",
            "tweet_id": "1589618678915600384",
            "tweet_text": "9\ufe0f\u20e3 Diagnosis API\n\nProvides data on medical symptoms and lab test analysis allowing you to create an intelligent symptom checker.\n\nhttps://t.co/wlil38NSmC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T14:00:01.000Z"
        },
        {
            "id": 4763,
            "username": "Rapid_API",
            "tweet_id": "1589618674847154177",
            "tweet_text": "8\ufe0f\u20e3 Brightest Stars API\n\nProvides a list of the brightest stars and their details.\n\nhttps://t.co/BuSZpClJFH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T14:00:00.000Z"
        },
        {
            "id": 4764,
            "username": "Rapid_API",
            "tweet_id": "1589618670707347457",
            "tweet_text": "7\ufe0f\u20e3 Melted polar ice cap API\n\nProvides the average monthly Arctic sea ice extent each September since 1979 from satellite observations.\n\nhttps://t.co/4DAqhB0PGY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T13:59:59.000Z"
        },
        {
            "id": 4765,
            "username": "Rapid_API",
            "tweet_id": "1589618666634711042",
            "tweet_text": "6\ufe0f\u20e3 Planets by API-Ninjas\n\nGet statistics on thousands of planets in the known universe.\n\nhttps://t.co/bVjN6HMcGb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T13:59:58.000Z"
        },
        {
            "id": 4766,
            "username": "Rapid_API",
            "tweet_id": "1589618662545178627",
            "tweet_text": "5\ufe0f\u20e3 periodicTable API\n\nProvides details on elements of the periodic table.\n\nhttps://t.co/sQOIDUeOMo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T13:59:57.000Z"
        },
        {
            "id": 4767,
            "username": "Rapid_API",
            "tweet_id": "1589618658443251713",
            "tweet_text": "4\ufe0f\u20e3 CarbonFootprint API\n\nCalculates carbon footprint in various situations, including flights, public transit, and hydro usage.\n\nhttps://t.co/3Bz8qfMuph",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T13:59:56.000Z"
        },
        {
            "id": 4768,
            "username": "Rapid_API",
            "tweet_id": "1589618654227976193",
            "tweet_text": "3\ufe0f\u20e3 EveryEarthquake API\n\nGet every earthquake and every other event that registers on the Richter scale cataloged by the USGS, with detailed location details.\n\nhttps://t.co/J1obTpk9Uw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T13:59:55.000Z"
        },
        {
            "id": 4769,
            "username": "Rapid_API",
            "tweet_id": "1589618650096476166",
            "tweet_text": "2\ufe0f\u20e3 Molecular Data API\n\nProvides quantum chemical calculations, molecular mechanics, molecular orbital diagrams, and more for a large number of molecules.\n\nhttps://t.co/lm1YR0ZLUD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T13:59:54.000Z"
        },
        {
            "id": 4770,
            "username": "Rapid_API",
            "tweet_id": "1589618646132867072",
            "tweet_text": "1\ufe0f\u20e3 UPHERESPACE API\n\nReal-time satellite tracking API. Track orbits, launch sites, and more.\n\nhttps://t.co/H3XtbLgkhR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "Others",
            "created_at": "2022-11-07T13:59:53.000Z"
        },
        {
            "id": 4771,
            "username": "Rapid_API",
            "tweet_id": "1589618642110611458",
            "tweet_text": "Top 10 Science APIs.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589618642110611458",
            "tweet_type": "API tips",
            "created_at": "2022-11-07T13:59:52.000Z"
        },
        {
            "id": 4772,
            "username": "Rapid_API",
            "tweet_id": "1588645768528699392",
            "tweet_text": "We hope you found this helpful. Follow @Rapid_API for more of our exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588645740552880131",
            "tweet_type": "Others",
            "created_at": "2022-11-04T21:34:01.000Z"
        },
        {
            "id": 4773,
            "username": "Rapid_API",
            "tweet_id": "1588645764296806401",
            "tweet_text": "So if you are consuming a GraphQL API, look at its schema to see how you can write mutations.\n\nFor a deeper dive, check out our interactive guide on GraphQL mutations.\n\nhttps://t.co/9U3uN7Duhe",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588645740552880131",
            "tweet_type": "Others",
            "created_at": "2022-11-04T21:34:00.000Z"
        },
        {
            "id": 4774,
            "username": "Rapid_API",
            "tweet_id": "1588645758127017992",
            "tweet_text": "Every mutation must be defined in the GraphQL API\u2019s schema. \n\nThe `createUser` mutation above can be defined in the schema like this. https://t.co/7kUM4Na5hC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgwA4VsWYAEIYke.png\"]",
            "tweet_conversation_id": "1588645740552880131",
            "tweet_type": "Others",
            "created_at": "2022-11-04T21:33:59.000Z"
        },
        {
            "id": 4775,
            "username": "Rapid_API",
            "tweet_id": "1588645752624091139",
            "tweet_text": "\ud83d\udccc Example\n\nThe following mutation will create a new user from the given input user data.\n\nThen, it will return the id and name of the created user. https://t.co/AiVZeJZ2Rt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgwA4DnWYAQwhOY.png\"]",
            "tweet_conversation_id": "1588645740552880131",
            "tweet_type": "Others",
            "created_at": "2022-11-04T21:33:57.000Z"
        },
        {
            "id": 4776,
            "username": "Rapid_API",
            "tweet_id": "1588645748551438343",
            "tweet_text": "We use the `mutation` keyword instead of `query` when sending the request.\n\nOnce a mutation is successful, it returns the new data specified in the fields.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588645740552880131",
            "tweet_type": "Others",
            "created_at": "2022-11-04T21:33:56.000Z"
        },
        {
            "id": 4777,
            "username": "Rapid_API",
            "tweet_id": "1588645744524894217",
            "tweet_text": "\ud83d\udccc GraphQL mutations\n\nWhile GraphQL queries are used for requesting data, GraphQL mutations are used for sending or modifying server-side data. \n\nWe use mutation instead of query whenever we add, update, or delete data using a GraphQL API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588645740552880131",
            "tweet_type": "Others",
            "created_at": "2022-11-04T21:33:55.000Z"
        },
        {
            "id": 4778,
            "username": "Rapid_API",
            "tweet_id": "1588645740552880131",
            "tweet_text": "What are GraphQL mutations?\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588645740552880131",
            "tweet_type": "API tips",
            "created_at": "2022-11-04T21:33:54.000Z"
        },
        {
            "id": 4779,
            "username": "Rapid_API",
            "tweet_id": "1588614132986777602",
            "tweet_text": "Thanks for reading!\n\nFollow @Rapid_API for more of our exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:18.000Z"
        },
        {
            "id": 4780,
            "username": "Rapid_API",
            "tweet_id": "1588614128951762949",
            "tweet_text": "5\ufe0f\u20e3 Hosting\n\nConsider how you will securely host an API and manage it over its lifecycle. You will also need to host your API docs.\n\nIf your API is public, the domain name should be clear and precise to allow your audience to discover it easily. As always, only use HTTPS.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:18.000Z"
        },
        {
            "id": 4781,
            "username": "Rapid_API",
            "tweet_id": "1588614124925341697",
            "tweet_text": "External APIs are available to wider audiences and developers to develop a community or gain customers.\n\nPartner APIs are only exposed to strategic business partners. They are not publicly available and require specific authorization to be accessed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:17.000Z"
        },
        {
            "id": 4782,
            "username": "Rapid_API",
            "tweet_id": "1588614120751898624",
            "tweet_text": "4\ufe0f\u20e3 Level of accessibility\n\nConsider whether your API should be internal, external, or a partner API.\n\nInternal APIs remain within a company and provide access to backend data. They are not available publicly and often manage private data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:16.000Z"
        },
        {
            "id": 4783,
            "username": "Rapid_API",
            "tweet_id": "1588614116712792064",
            "tweet_text": "Researching the top API security risks and preventative measures via the OWASP Foundation and implementing them is considered a best practice when securing APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:15.000Z"
        },
        {
            "id": 4784,
            "username": "Rapid_API",
            "tweet_id": "1588614112661147650",
            "tweet_text": "3\ufe0f\u20e3 Security\n\nAPI security is critical and should be considered on these 3 levels:\n\n1. Data level security - users only have access to data they are authorized to see.\n\n2. Application level security - only authorized users have API access.\n\n3. Auditing - monitoring API usage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:14.000Z"
        },
        {
            "id": 4785,
            "username": "Rapid_API",
            "tweet_id": "1588614108638765061",
            "tweet_text": "API-first is considered a good practice. It improves modularity and code reuse because you do not need to customize your API to fit existing software, which speeds up development and integration.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:13.000Z"
        },
        {
            "id": 4786,
            "username": "Rapid_API",
            "tweet_id": "1588614104612225024",
            "tweet_text": "2\ufe0f\u20e3 API-first design\n\nAPI-first means prioritizing the API as the first interface to your data and building the rest of your platform around it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:12.000Z"
        },
        {
            "id": 4787,
            "username": "Rapid_API",
            "tweet_id": "1588614100577386510",
            "tweet_text": "1\ufe0f\u20e3 Standards\n\nStandards describe a common format that should be followed to produce consistently built and accessible APIs.\n\nA popular standard is the OpenAPI specification (OAS) which defines a standardized structure and syntax for REST APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "Others",
            "created_at": "2022-11-04T19:28:11.000Z"
        },
        {
            "id": 4788,
            "username": "Rapid_API",
            "tweet_id": "1588614096630550537",
            "tweet_text": "Five things to consider when designing an API.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588614096630550537",
            "tweet_type": "API tips",
            "created_at": "2022-11-04T19:28:10.000Z"
        },
        {
            "id": 4789,
            "username": "Rapid_API",
            "tweet_id": "1588516184823136257",
            "tweet_text": "We hope you enjoyed this RapidAPI Comic! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\n\nCheck out RapidAPI Hub to discover over 40,000 APIs! (https://t.co/2tM1EEQGY2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588516159279828994",
            "tweet_type": "Others",
            "created_at": "2022-11-04T12:59:06.000Z"
        },
        {
            "id": 4790,
            "username": "Rapid_API",
            "tweet_id": "1588516179739557888",
            "tweet_text": "{ 5 / 5 } https://t.co/M4lkkaUm8V",
            "tweet_media": "[\"https://pbs.twimg.com/media/FguLBrHWIAEcvDB.jpg\"]",
            "tweet_conversation_id": "1588516159279828994",
            "tweet_type": "Others",
            "created_at": "2022-11-04T12:59:05.000Z"
        },
        {
            "id": 4791,
            "username": "Rapid_API",
            "tweet_id": "1588516174597332992",
            "tweet_text": "{ 4 / 5 } https://t.co/wYfddUVDqR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FguLBY_X0AEqV1s.jpg\"]",
            "tweet_conversation_id": "1588516159279828994",
            "tweet_type": "Others",
            "created_at": "2022-11-04T12:59:03.000Z"
        },
        {
            "id": 4792,
            "username": "Rapid_API",
            "tweet_id": "1588516169459310592",
            "tweet_text": "{ 3 / 5 } https://t.co/aq2n642SFK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FguLBHnXoAEngF0.jpg\"]",
            "tweet_conversation_id": "1588516159279828994",
            "tweet_type": "Others",
            "created_at": "2022-11-04T12:59:02.000Z"
        },
        {
            "id": 4793,
            "username": "Rapid_API",
            "tweet_id": "1588516164375814146",
            "tweet_text": "{ 2 / 5 } https://t.co/FjuKm0ljqg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FguLAz0XkAM4O4N.jpg\"]",
            "tweet_conversation_id": "1588516159279828994",
            "tweet_type": "Others",
            "created_at": "2022-11-04T12:59:01.000Z"
        },
        {
            "id": 4794,
            "username": "Rapid_API",
            "tweet_id": "1588516159279828994",
            "tweet_text": "Learn about CORS in this week's RapidAPI Comic \ud83d\udc47\n\n{ 1 / 5 } https://t.co/jPxxuSQSo6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FguLAZXWAAInjJU.jpg\"]",
            "tweet_conversation_id": "1588516159279828994",
            "tweet_type": "API tips",
            "created_at": "2022-11-04T12:59:00.000Z"
        },
        {
            "id": 4795,
            "username": "Rapid_API",
            "tweet_id": "1588319364226359296",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588319339698085889",
            "tweet_type": "Others",
            "created_at": "2022-11-03T23:57:00.000Z"
        },
        {
            "id": 4796,
            "username": "Rapid_API",
            "tweet_id": "1588319360082481152",
            "tweet_text": "5\ufe0f\u20e3 Booking API\n\nThe API allows you to find all hotels, view prices, get at hotel pictures, rent a car, etc.\n\nAPI link \u2192 https://t.co/MDBufTUPDC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588319339698085889",
            "tweet_type": "Others",
            "created_at": "2022-11-03T23:56:59.000Z"
        },
        {
            "id": 4797,
            "username": "Rapid_API",
            "tweet_id": "1588319355959484418",
            "tweet_text": "4\ufe0f\u20e3 Tripadvisor API\n\nTripadvisor API helps to query real-time hotels search, flight prices, restaurants, attracting locations, etc., to create a traveling site.\n\nAPI link \u2192 https://t.co/iIfArbmO7G",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588319339698085889",
            "tweet_type": "Others",
            "created_at": "2022-11-03T23:56:58.000Z"
        },
        {
            "id": 4798,
            "username": "Rapid_API",
            "tweet_id": "1588319351869939712",
            "tweet_text": "3\ufe0f\u20e3 Priceline Provider API\n\nThis API lets you search hotels, cars for rent, and flights.\n\nAPI link \u2192 https://t.co/UMFb8y9fhU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588319339698085889",
            "tweet_type": "Others",
            "created_at": "2022-11-03T23:56:57.000Z"
        },
        {
            "id": 4799,
            "username": "Rapid_API",
            "tweet_id": "1588319347759632386",
            "tweet_text": "2\ufe0f\u20e3 Airbnb API\n\nAirbnb API allows users to search accommodations by location, place name, and GEO coordinates to find a place to rent.\n\nAPI link \u2192 https://t.co/Ztr52k80Yy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588319339698085889",
            "tweet_type": "Others",
            "created_at": "2022-11-03T23:56:56.000Z"
        },
        {
            "id": 4800,
            "username": "Rapid_API",
            "tweet_id": "1588319343674376200",
            "tweet_text": "1\ufe0f\u20e3 Hotels API\n\nThis API helps to query rooms, prices, facilities, etc., information from many hotels around the world to create a traveling site/application.\n\nAPI link \u2192 https://t.co/OmtVDYgmwT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588319339698085889",
            "tweet_type": "Others",
            "created_at": "2022-11-03T23:56:55.000Z"
        },
        {
            "id": 4801,
            "username": "Rapid_API",
            "tweet_id": "1588319339698085889",
            "tweet_text": "Let\u2019s discuss the top five travel APIs you can use in your apps.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588319339698085889",
            "tweet_type": "API tips",
            "created_at": "2022-11-03T23:56:54.000Z"
        },
        {
            "id": 4802,
            "username": "Rapid_API",
            "tweet_id": "1588245716203233280",
            "tweet_text": "Hope you enjoyed this short tutorial.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:21.000Z"
        },
        {
            "id": 4803,
            "username": "Rapid_API",
            "tweet_id": "1588245711975772160",
            "tweet_text": "When it comes to the response codes, we should use either:\n\n1. CREATE/PUT requests\n\n200, 204 should imply \"resource updated/created successfully.\" \n\n201 if the request created a new resource.\n\n2. DELETE requests\n\n200 or 204 should imply \"resource deleted successfully.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:20.000Z"
        },
        {
            "id": 4804,
            "username": "Rapid_API",
            "tweet_id": "1588245707705970688",
            "tweet_text": "4\ufe0f\u20e3 Delete\n\nWe use this operation is used to delete a specific user.\n\nFor this operation DELETE HTTP method is used.\n\nDELETE https://example .com/api/users/1",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:19.000Z"
        },
        {
            "id": 4805,
            "username": "Rapid_API",
            "tweet_id": "1588245702488252417",
            "tweet_text": "3\ufe0f\u20e3 Update\n\nWe use this operation to update data for a specific user.\n\nFor this operation PUT HTTP method is used.\n\nPUT https://example .com/api/users/1\n\nWe use the same payload as we used for CREATE action.\n\nIn the example payload, we changed the age and country of the user. https://t.co/D0P1YyYUhj",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgqVBQCWAAAsjrz.jpg\"]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:18.000Z"
        },
        {
            "id": 4806,
            "username": "Rapid_API",
            "tweet_id": "1588245693202038784",
            "tweet_text": "Index (addition)\n\nWhen we wish to retrieve data for multiple users at once, we use the following path.\n\nGET https://example .com/api/users/\n\nYou can see a sample of the retrieved data below. https://t.co/firfmk65Wg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgqVAo1WYAEI8QP.png\"]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:16.000Z"
        },
        {
            "id": 4807,
            "username": "Rapid_API",
            "tweet_id": "1588245688965820416",
            "tweet_text": "2\ufe0f\u20e3 Read\n\nThis operation is used to read data for a specific user.\n\nThe user ID is usually part of the URL if the GET HTTP method is used.\n\nThe sample path may look like this:\n\nGET https://example .com/api/users/1  where 1 is the ID of the user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:15.000Z"
        },
        {
            "id": 4808,
            "username": "Rapid_API",
            "tweet_id": "1588245683957796864",
            "tweet_text": "1\ufe0f\u20e3 Create\n\nWe'll call this function when we want to create/add a new user to the database.\n\nWe'll use the HTTP POST method.\n\nPOST https://example .com/api/users/\n\nBelow you can see a sample JSON payload. https://t.co/pPM2H9AJgL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgqVAYzXgAAQRTV.jpg\"]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:13.000Z"
        },
        {
            "id": 4809,
            "username": "Rapid_API",
            "tweet_id": "1588245679746428929",
            "tweet_text": "In the following example, we will explain CRUD operations on an API that manipulates user data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:12.000Z"
        },
        {
            "id": 4810,
            "username": "Rapid_API",
            "tweet_id": "1588245675523047424",
            "tweet_text": "CRUD is an acronym for \"Application Programming Interface - Create, Read, Update, Delete.\" \n\nCRUD refers to the four basic operations performed on data using an API. \n\nThese four operations are commonly referred to as CRUD operations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "Others",
            "created_at": "2022-11-03T19:04:11.000Z"
        },
        {
            "id": 4811,
            "username": "Rapid_API",
            "tweet_id": "1588245671336824832",
            "tweet_text": "Let\u2019s talk about CRUD operations.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588245671336824832",
            "tweet_type": "API tips",
            "created_at": "2022-11-03T19:04:10.000Z"
        },
        {
            "id": 4812,
            "username": "Rapid_API",
            "tweet_id": "1588154028252356616",
            "tweet_text": "You can find all these fantastic APIs and 40,000 more at RapidAPI Hub (https://t.co/2tM1EEQGY2).\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588154002113429505",
            "tweet_type": "Others",
            "created_at": "2022-11-03T13:00:01.000Z"
        },
        {
            "id": 4813,
            "username": "Rapid_API",
            "tweet_id": "1588154024032964608",
            "tweet_text": "\ud83c\udfb5 Music discovery app\n\nCreate an app that identifies music by matching an input.\n\nAPI \u2192 Shazam (https://t.co/pKrqM5poTq)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588154002113429505",
            "tweet_type": "Others",
            "created_at": "2022-11-03T13:00:00.000Z"
        },
        {
            "id": 4814,
            "username": "Rapid_API",
            "tweet_id": "1588154019817611265",
            "tweet_text": "\u2709\ufe0f Messaging app\n\nBuild a communication app where you can send SMS and more.\n\nAPI \u2192 sms77io (https://t.co/AN9lvaBWtp)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588154002113429505",
            "tweet_type": "Others",
            "created_at": "2022-11-03T12:59:59.000Z"
        },
        {
            "id": 4815,
            "username": "Rapid_API",
            "tweet_id": "1588154015212257280",
            "tweet_text": "\ud83d\udd17 URL shortener app\n\nCreate an app that turns long, complicated links into shorter, more memorable ones.\n\nAPI \u2192 URL Shortener Service (https://t.co/cKyQwSRYHZ)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588154002113429505",
            "tweet_type": "Others",
            "created_at": "2022-11-03T12:59:58.000Z"
        },
        {
            "id": 4816,
            "username": "Rapid_API",
            "tweet_id": "1588154010598576129",
            "tweet_text": "\ud83c\udf24\ufe0f Weather app\n\nBuild an app that shows the current weather and forecast for any location.\n\nAPI \u2192 Dark Sky Weather API (https://t.co/qxoMiIgYoC)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588154002113429505",
            "tweet_type": "Others",
            "created_at": "2022-11-03T12:59:57.000Z"
        },
        {
            "id": 4817,
            "username": "Rapid_API",
            "tweet_id": "1588154006089732096",
            "tweet_text": "\ud83d\udd24 Translation app\n\nCreate an app that dynamically translates texts into over 100 languages.\n\nAPI \u2192 Google Translate API (https://t.co/1wELwijL5D)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588154002113429505",
            "tweet_type": "Others",
            "created_at": "2022-11-03T12:59:56.000Z"
        },
        {
            "id": 4818,
            "username": "Rapid_API",
            "tweet_id": "1588154002113429505",
            "tweet_text": "Here are 5 API-based projects and the APIs you can use to build them.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588154002113429505",
            "tweet_type": "API tips",
            "created_at": "2022-11-03T12:59:55.000Z"
        },
        {
            "id": 4819,
            "username": "Rapid_API",
            "tweet_id": "1587942131125059584",
            "tweet_text": "We hope you found this helpful! \n\nFollow @Rapid_API for more of our exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "Others",
            "created_at": "2022-11-02T22:58:01.000Z"
        },
        {
            "id": 4820,
            "username": "Rapid_API",
            "tweet_id": "1587942127119523841",
            "tweet_text": "\ud83d\udccc Examples of Asynchronous APIs\n\nNewer API architectures like gRPC support asynchronous communication.\n\nGraphQL subscriptions are also asynchronous.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "Others",
            "created_at": "2022-11-02T22:58:00.000Z"
        },
        {
            "id": 4821,
            "username": "Rapid_API",
            "tweet_id": "1587942123101380608",
            "tweet_text": "\ud83d\udccc Disadvantages of Asynchronous APIs\n\n- They are relatively difficult to design and manage.\n\n- Rate limiting, analytics, and throttling them can be complex.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "Others",
            "created_at": "2022-11-02T22:57:59.000Z"
        },
        {
            "id": 4822,
            "username": "Rapid_API",
            "tweet_id": "1587942119079137284",
            "tweet_text": "\ud83d\udccc Advantages of Asynchronous APIs\n\n- They can send multiple responses for a single request.\n\n- They offer great performance at scale.\n\n- They are efficient in terms of bandwidth usage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "Others",
            "created_at": "2022-11-02T22:57:58.000Z"
        },
        {
            "id": 4823,
            "username": "Rapid_API",
            "tweet_id": "1587942115048407040",
            "tweet_text": "\ud83d\udccc Asynchronous APIs\n\nAsynchronous APIs can process multiple requests at the same time. \n\nThey allow time-consuming requests to be processed in the background while minor requests are serviced immediately.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "Others",
            "created_at": "2022-11-02T22:57:57.000Z"
        },
        {
            "id": 4824,
            "username": "Rapid_API",
            "tweet_id": "1587942111047041027",
            "tweet_text": "\ud83d\udccc Examples of Synchronous APIs\n\nConventional API architectures are mostly synchronous.\n\nREST and SOAP APIs are synchronous APIs.\n\nGraphQL queries and mutations are also synchronous.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "Others",
            "created_at": "2022-11-02T22:57:56.000Z"
        },
        {
            "id": 4825,
            "username": "Rapid_API",
            "tweet_id": "1587942106999541765",
            "tweet_text": "\ud83d\udccc Synchronous APIs\n\nThese APIs handle requests synchronously, and users have to wait for the response from the API before they can continue.\n\nThey can only process one request at a time. \n\nTherefore, they can bottleneck performance if a request takes too long.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "Others",
            "created_at": "2022-11-02T22:57:55.000Z"
        },
        {
            "id": 4826,
            "username": "Rapid_API",
            "tweet_id": "1587942103002349575",
            "tweet_text": "Synchronous vs. Asynchronous APIs\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587942103002349575",
            "tweet_type": "API tips",
            "created_at": "2022-11-02T22:57:54.000Z"
        },
        {
            "id": 4827,
            "username": "Rapid_API",
            "tweet_id": "1587874180099444736",
            "tweet_text": "We hope you enjoyed this short tutorial.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587874163087245314",
            "tweet_type": "Others",
            "created_at": "2022-11-02T18:28:00.000Z"
        },
        {
            "id": 4828,
            "username": "Rapid_API",
            "tweet_id": "1587874175645016066",
            "tweet_text": "2\ufe0f\u20e3 Now, enter the actual variable name and the value.\n\nYou'll be able to access the environment variables in the different parts of the client, such as the request header. https://t.co/MMnXia5HWr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FglDIpkX0AEyB9U.jpg\"]",
            "tweet_conversation_id": "1587874163087245314",
            "tweet_type": "Others",
            "created_at": "2022-11-02T18:27:59.000Z"
        },
        {
            "id": 4829,
            "username": "Rapid_API",
            "tweet_id": "1587874171358437379",
            "tweet_text": "To rename the group, you can hover next to the group name and click the three dots icon. https://t.co/8xOvP2C2C2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FglDIcdXwAcPer9.jpg\"]",
            "tweet_conversation_id": "1587874163087245314",
            "tweet_type": "Others",
            "created_at": "2022-11-02T18:27:58.000Z"
        },
        {
            "id": 4830,
            "username": "Rapid_API",
            "tweet_id": "1587874167029960705",
            "tweet_text": "1\ufe0f\u20e3 Create group\n\nTo use environment variables, you have to create an environment group.\n\nClick the plus icon next to the group. The new group will be automatically created for you. https://t.co/fyoANamUWW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FglDINdWQAEXWLy.jpg\"]",
            "tweet_conversation_id": "1587874163087245314",
            "tweet_type": "Others",
            "created_at": "2022-11-02T18:27:57.000Z"
        },
        {
            "id": 4831,
            "username": "Rapid_API",
            "tweet_id": "1587874163087245314",
            "tweet_text": "How to add environment variables into the RapidAPI client for VS Code\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587874163087245314",
            "tweet_type": "API tips",
            "created_at": "2022-11-02T18:27:56.000Z"
        },
        {
            "id": 4832,
            "username": "Rapid_API",
            "tweet_id": "1587791745810661377",
            "tweet_text": "That\u2019s all for now! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:00:26.000Z"
        },
        {
            "id": 4833,
            "username": "Rapid_API",
            "tweet_id": "1587791741792526336",
            "tweet_text": "You can read this guide to learn more about REST an GraphQL APIs (https://t.co/YFhhqcGXv8).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:00:25.000Z"
        },
        {
            "id": 4834,
            "username": "Rapid_API",
            "tweet_id": "1587791737774379008",
            "tweet_text": "5\ufe0f\u20e3 Language\n\nREST API is an API type that lets you perform CRUD operations between client and server.\n\nGraphQL is a query language that allows you to read and mutate the data in APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:00:24.000Z"
        },
        {
            "id": 4835,
            "username": "Rapid_API",
            "tweet_id": "1587791733743575049",
            "tweet_text": "4\ufe0f\u20e3 Cache\n\nREST API leverages the caching feature. The different operations, like the GET, POST, etc., can be cached and stay in the browser history.\n\nGraphQL doesn't follow the HTTP specs and uses a single endpoint. It is up to developers to ensure that caching is implemented.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:00:23.000Z"
        },
        {
            "id": 4836,
            "username": "Rapid_API",
            "tweet_id": "1587791729700257793",
            "tweet_text": "3\ufe0f\u20e3 Endpoints\n\nREST API leads to fetching different data from multiple endpoints.\n\nGraphQL provides a single endpoint from where you can read and manipulate data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:00:22.000Z"
        },
        {
            "id": 4837,
            "username": "Rapid_API",
            "tweet_id": "1587791725686362119",
            "tweet_text": "2\ufe0f\u20e3 Overfetching and under fetching\n\nWith REST API, you either often fetch an unnecessary amount of data or fetch data in multiple API calls.\n\nWith GraphQL, you only get the data that you have requested.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:00:21.000Z"
        },
        {
            "id": 4838,
            "username": "Rapid_API",
            "tweet_id": "1587791721550598144",
            "tweet_text": "1\ufe0f\u20e3 Method to perform data operations\n\nWith RESTful APIs, you have different HTTP methods to perform CRUD operations.\n\nWhereas with GraphQL, you use queries and mutations to perform data operations.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "Others",
            "created_at": "2022-11-02T13:00:20.000Z"
        },
        {
            "id": 4839,
            "username": "Rapid_API",
            "tweet_id": "1587791717339643910",
            "tweet_text": "REST and GraphQL APIs. What are the differences between them?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587791717339643910",
            "tweet_type": "API tips",
            "created_at": "2022-11-02T13:00:19.000Z"
        },
        {
            "id": 4840,
            "username": "Rapid_API",
            "tweet_id": "1587547031655968768",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:48:02.000Z"
        },
        {
            "id": 4841,
            "username": "Rapid_API",
            "tweet_id": "1587547027453247488",
            "tweet_text": "Cookies are primarily used in three places:\n\n\ud83d\udc49 Session management\n\ud83d\udc49 Personalization\n\ud83d\udc49 Tracking",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:48:01.000Z"
        },
        {
            "id": 4842,
            "username": "Rapid_API",
            "tweet_id": "1587547023275958272",
            "tweet_text": "4\ufe0f\u20e3 Cookie API\n\nA cookie is data from a specific website stored on the client\u2019s computer while they browse the Internet.\n\nThe HTTP cookie or the web or browser cookies saves the data that is sent by the server to the web browser.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:48:00.000Z"
        },
        {
            "id": 4843,
            "username": "Rapid_API",
            "tweet_id": "1587547019261927424",
            "tweet_text": "3\ufe0f\u20e3 IndexedDB API\n\nIt is a Web API that provides you with a non-relational database inside your browser. \n\nIt has object stores that can be used to store almost anything from JavaScript objects to files to blobs, etc.\n\nYou can also perform transactions on IndexedDB.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:47:59.000Z"
        },
        {
            "id": 4844,
            "username": "Rapid_API",
            "tweet_id": "1587547015201832963",
            "tweet_text": "2\ufe0f\u20e3 Session Storage API\n\nIt is another type of storage that temporarily saves data in the web browser. The application data you save here gets cleared out after closing the browser or the tab.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:47:58.000Z"
        },
        {
            "id": 4845,
            "username": "Rapid_API",
            "tweet_id": "1587547011183792130",
            "tweet_text": "Although there is no expiration date with the local storage, it only stores strings.\n\nIf you are saving objects, arrays, etc., in the local storage, you will need to convert them to strings using the JSON.stringify() function.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:47:57.000Z"
        },
        {
            "id": 4846,
            "username": "Rapid_API",
            "tweet_id": "1587547007144660998",
            "tweet_text": "1\ufe0f\u20e3 Local Storage API\n\nIt is a form of Web Storage API that lets you store data for longer durations. If an application\u2019s local storage is not cleared, it can stay in your browser forever.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "Others",
            "created_at": "2022-11-01T20:47:56.000Z"
        },
        {
            "id": 4847,
            "username": "Rapid_API",
            "tweet_id": "1587547003210326016",
            "tweet_text": "Let\u2019s discuss a few Storage Web APIs.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587547003210326016",
            "tweet_type": "API tips",
            "created_at": "2022-11-01T20:47:55.000Z"
        },
        {
            "id": 4848,
            "username": "Rapid_API",
            "tweet_id": "1587503492834418688",
            "tweet_text": "We hope you liked this thread!\n\nFollow @Rapid_API for more of our exclusive content. \ud83d\udc19\ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:55:01.000Z"
        },
        {
            "id": 4849,
            "username": "Rapid_API",
            "tweet_id": "1587503488816365568",
            "tweet_text": "\ud83d\udccc Access-Control-Allow-Headers\n\nUsed in response to a preflight request that contains \u2018Access-Control-Request-Headers.\u2019 It indicates which HTTP headers can be used in the actual request.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:55:00.000Z"
        },
        {
            "id": 4850,
            "username": "Rapid_API",
            "tweet_id": "1587503484844253185",
            "tweet_text": "\ud83d\udccc Access-Control-Allow-Methods\n\nThis method defines one or more methods allowed to access the cross-origin resource and is sent in response to a preflight request. For example:\n\nAccess-Control-Allow-Methods: POST, OPTIONS",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:54:59.000Z"
        },
        {
            "id": 4851,
            "username": "Rapid_API",
            "tweet_id": "1587503480859758592",
            "tweet_text": "\ud83d\udccc Access-Control-Max-Age\n\nThis header is used to state how long the results of a preflight request can be cached in seconds.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:54:58.000Z"
        },
        {
            "id": 4852,
            "username": "Rapid_API",
            "tweet_id": "1587503476845813766",
            "tweet_text": "\ud83d\udccc Access-Control-Allow-Credentials\n\nThis header is used in preflight requests to indicate whether a request can be made with credentials (cookies, TLS client certificates, or authorization headers). Its only valid value is \u2018true.\u2019",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:54:57.000Z"
        },
        {
            "id": 4853,
            "username": "Rapid_API",
            "tweet_id": "1587503472668090368",
            "tweet_text": "Now let's move on to HTTP response headers:\n\n\ud83d\udccc Access-Control-Allow-Origin\n\nThis header defines the domain from which requests are accepted. If the value for this header is an asterisk(*), it indicates requests from any domain are accepted.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:54:56.000Z"
        },
        {
            "id": 4854,
            "username": "Rapid_API",
            "tweet_id": "1587503468452929538",
            "tweet_text": "\ud83d\udccc Access-Control-Request-Headers\n\nThis header is used when issuing a preflight request. \n\nIt is sent by the browser and defines the different HTTP headers the actual request might contain.\n\nThe server answers in a corresponding \u2018Access-Control-Allow-Headers\u2019 response header.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:54:55.000Z"
        },
        {
            "id": 4855,
            "username": "Rapid_API",
            "tweet_id": "1587503464401321991",
            "tweet_text": "\ud83d\udccc Access-Control-Request-Method\n\nSpecific CORS requests that affect user data will initiate with a preflight request. This header is added to the preflight to indicate the method used in the main request. For example:\n\nAccess-Control-Request-Method: PUT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:54:54.000Z"
        },
        {
            "id": 4856,
            "username": "Rapid_API",
            "tweet_id": "1587503460437590016",
            "tweet_text": "Let's start with HTTP request headers:\n\n\ud83d\udccc Origin\n\nThe browser adds this header to CORS requests to indicate the origin domain.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "Others",
            "created_at": "2022-11-01T17:54:54.000Z"
        },
        {
            "id": 4857,
            "username": "Rapid_API",
            "tweet_id": "1587503456482377732",
            "tweet_text": "HTTP headers for CORS explained.\n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587503456482377732",
            "tweet_type": "API tips",
            "created_at": "2022-11-01T17:54:53.000Z"
        },
        {
            "id": 4858,
            "username": "Rapid_API",
            "tweet_id": "1587429245336395776",
            "tweet_text": "That\u2019s all for now! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:59.000Z"
        },
        {
            "id": 4859,
            "username": "Rapid_API",
            "tweet_id": "1587429241146179586",
            "tweet_text": "Take a look at this guide for a more detailed explanation of API Caching techniques (https://t.co/JDjtQqS5PG).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:58.000Z"
        },
        {
            "id": 4860,
            "username": "Rapid_API",
            "tweet_id": "1587429236951973890",
            "tweet_text": "\ud83d\udccc API Caching security measures\n\nCare must be taken while caching APIs because not everything that can be cached should be cached. \n\nAPI keys, tokens, and other credentials can be a security hazard if cached improperly.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:57.000Z"
        },
        {
            "id": 4861,
            "username": "Rapid_API",
            "tweet_id": "1587429232757596161",
            "tweet_text": "2\ufe0f\u20e3 Server Caching\n\nServer Caching reduces the load on the server by storing repeated calls in a cache. As a result, the server does not have to process these requests.\n\nThe client cache caches the response on the browser level. The server cache does the same but on the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:56.000Z"
        },
        {
            "id": 4862,
            "username": "Rapid_API",
            "tweet_id": "1587429228563382273",
            "tweet_text": "Caching API responses on the client level improves both client and server efficiency.\n\nWe can store client-side caches in Cache Storage, Local Storage, Session Storage, IndexedDB, or Cookies depending on the type of data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:55.000Z"
        },
        {
            "id": 4863,
            "username": "Rapid_API",
            "tweet_id": "1587429224368971777",
            "tweet_text": "1\ufe0f\u20e3 Client Caching\n\nIf you take a good look at your API calls, you may notice several redundant requests that are called with every page load or when components are re-rendered. \n\nBesides slowing down your app, these redundant calls also put a load on the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:54.000Z"
        },
        {
            "id": 4864,
            "username": "Rapid_API",
            "tweet_id": "1587429220292218883",
            "tweet_text": "There are two techniques of caching based on where you keep the cache.\n\n\ud83d\udc49 Client Caching\n\ud83d\udc49 Server Caching",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:53.000Z"
        },
        {
            "id": 4865,
            "username": "Rapid_API",
            "tweet_id": "1587429216290742272",
            "tweet_text": "\ud83d\udccc What is API Caching?\n\nCaching enables us to store copies of frequently accessed data in several places along the request-response path. \n\nToday, APIs use caching extensively, which is also one of the architectural constraints of REST APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "Others",
            "created_at": "2022-11-01T12:59:52.000Z"
        },
        {
            "id": 4866,
            "username": "Rapid_API",
            "tweet_id": "1587429212230762497",
            "tweet_text": "API Caching Techniques to improve performance.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429212230762497",
            "tweet_type": "API tips",
            "created_at": "2022-11-01T12:59:51.000Z"
        },
        {
            "id": 4867,
            "username": "Rapid_API",
            "tweet_id": "1587186885432057857",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587186864842313733",
            "tweet_type": "Others",
            "created_at": "2022-10-31T20:56:56.000Z"
        },
        {
            "id": 4868,
            "username": "Rapid_API",
            "tweet_id": "1587186881246236675",
            "tweet_text": "4\ufe0f\u20e3 Use TLS\n\nAPI keys and authentication parameters may be compromised during server-client communication. Therefore, it is critical to use Transport layer Security (TLS) which protects the information by encrypting it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587186864842313733",
            "tweet_type": "Others",
            "created_at": "2022-10-31T20:56:55.000Z"
        },
        {
            "id": 4869,
            "username": "Rapid_API",
            "tweet_id": "1587186877060235266",
            "tweet_text": "3\ufe0f\u20e3 Implement an Auth Standard\n\nOAuth 2.0 (Open Authorization) is a standard developed to allow a user access to resources from a third-party application.\n\nIt is an authorization protocol designed only to grant access to resources, and it works by using access tokens.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587186864842313733",
            "tweet_type": "Others",
            "created_at": "2022-10-31T20:56:54.000Z"
        },
        {
            "id": 4870,
            "username": "Rapid_API",
            "tweet_id": "1587186872857534465",
            "tweet_text": "2\ufe0f\u20e3 Store API Keys Securely\n\nYou cannot rely on API keys alone for identifying the client\u2019s identity, as anyone can use them to access the service.\n\nTherefore, the client and the API provider must keep API keys secure to avoid them being compromised.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587186864842313733",
            "tweet_type": "Others",
            "created_at": "2022-10-31T20:56:53.000Z"
        },
        {
            "id": 4871,
            "username": "Rapid_API",
            "tweet_id": "1587186868789067777",
            "tweet_text": "1\ufe0f\u20e3 Use API keys\n\nUsing secret keys is a suitable way to control access to your APIs.\n\nWith API key authentication, you can verify the identity of each app or user and mitigate the risks of unauthorized access.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587186864842313733",
            "tweet_type": "Others",
            "created_at": "2022-10-31T20:56:52.000Z"
        },
        {
            "id": 4872,
            "username": "Rapid_API",
            "tweet_id": "1587186864842313733",
            "tweet_text": "Let\u2019s discuss some API Authentication best practices.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587186864842313733",
            "tweet_type": "API tips",
            "created_at": "2022-10-31T20:56:51.000Z"
        },
        {
            "id": 4873,
            "username": "Rapid_API",
            "tweet_id": "1587129280315768832",
            "tweet_text": "We hope you enjoyed this short tutorial.\n\nIf you found this thread useful, follow @Rapid_API \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587129253497298949",
            "tweet_type": "Others",
            "created_at": "2022-10-31T17:08:02.000Z"
        },
        {
            "id": 4874,
            "username": "Rapid_API",
            "tweet_id": "1587129275618041863",
            "tweet_text": "To select the actual environment variable, click on the \"Environment Variable\" tag you specified in the previous step.\n\nAnother popup menu will appear with all the environment variables defined.\n\nSelect \"x-rapid-api\" key. https://t.co/VIFTTI1dbL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgadpM-XkAId2FA.jpg\"]",
            "tweet_conversation_id": "1587129253497298949",
            "tweet_type": "Others",
            "created_at": "2022-10-31T17:08:01.000Z"
        },
        {
            "id": 4875,
            "username": "Rapid_API",
            "tweet_id": "1587129271511928832",
            "tweet_text": "To enter the environment variable, you have two options:\n\n1. Enter \"{\" into the Header value field.\n\n2. Right-click into the Header value field.\n\nIn both cases, the popup menu will appear.\n\nFrom the list, select \"Environment Variable.\u201d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587129253497298949",
            "tweet_type": "Others",
            "created_at": "2022-10-31T17:08:00.000Z"
        },
        {
            "id": 4876,
            "username": "Rapid_API",
            "tweet_id": "1587129266831085570",
            "tweet_text": "Let me show you how to use it.\n \n1\ufe0f\u20e3 Click \"Headers\" in the middle panel\n \n2\ufe0f\u20e3 For the header name, enter \"x-rapidapi-key\" https://t.co/uVpaVsJlNC",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fgado-IXoAEHTuN.jpg\"]",
            "tweet_conversation_id": "1587129253497298949",
            "tweet_type": "Others",
            "created_at": "2022-10-31T17:07:59.000Z"
        },
        {
            "id": 4877,
            "username": "Rapid_API",
            "tweet_id": "1587129261999108096",
            "tweet_text": "Of course, the environment variable must be defined before you can use it.\n\nHere is the example of the \"x-rapidapi-key\" environment variable defined. https://t.co/mNnNf7KFCm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgadovLWAAMuyfX.jpg\"]",
            "tweet_conversation_id": "1587129253497298949",
            "tweet_type": "Others",
            "created_at": "2022-10-31T17:07:58.000Z"
        },
        {
            "id": 4878,
            "username": "Rapid_API",
            "tweet_id": "1587129257590784000",
            "tweet_text": "The following small tutorial will show you how to associate an environment variable (RapidAPI API key) with the variable used in the HTTP header.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587129253497298949",
            "tweet_type": "Others",
            "created_at": "2022-10-31T17:07:57.000Z"
        },
        {
            "id": 4879,
            "username": "Rapid_API",
            "tweet_id": "1587129253497298949",
            "tweet_text": "How to set environment variables into the header inside RapidAPI Client for VS Code?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587129253497298949",
            "tweet_type": "API tips",
            "created_at": "2022-10-31T17:07:56.000Z"
        },
        {
            "id": 4880,
            "username": "Rapid_API",
            "tweet_id": "1587067138270969857",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:01:06.000Z"
        },
        {
            "id": 4881,
            "username": "Rapid_API",
            "tweet_id": "1587067134248632324",
            "tweet_text": "Take a look at this article to learn how to use RapidAPI Studio and Client to secure your REST APIs. (https://t.co/WSHtlatdyu)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:01:05.000Z"
        },
        {
            "id": 4882,
            "username": "Rapid_API",
            "tweet_id": "1587067130159185921",
            "tweet_text": "7\ufe0f\u20e3 Limit request size\n\nA user can send a huge payload to the server via your API. This can lead to slowing down your API or, worst case, crashing it.\n\nYou can prevent this by limiting the request size of your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:01:04.000Z"
        },
        {
            "id": 4883,
            "username": "Rapid_API",
            "tweet_id": "1587067126086598660",
            "tweet_text": "6\ufe0f\u20e3 Implementing API Authentication\n\nAPI authentication is a good way to secure your API against several security threats. It acts as an API gateway and provides an extra layer of security.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:01:03.000Z"
        },
        {
            "id": 4884,
            "username": "Rapid_API",
            "tweet_id": "1587067122047483906",
            "tweet_text": "5\ufe0f\u20e3 Prevention against API injections\n\nUsers can send executable commands in the request body to the server that can cause significant damage.\n\nYou can prevent it by filtering the API response against a regex to ensure there is no command or executable code in the request body.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:01:02.000Z"
        },
        {
            "id": 4885,
            "username": "Rapid_API",
            "tweet_id": "1587067117983203332",
            "tweet_text": "4\ufe0f\u20e3 Limit excessive data exposure\n\nSometimes, the API returns more data to the client-side application than it needs. This additional data can be exploited by the man-in-the-middle attack.\n\nSo, when building REST APIs, ensure that only the required data is sent to the server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:01:01.000Z"
        },
        {
            "id": 4886,
            "username": "Rapid_API",
            "tweet_id": "1587067113939898372",
            "tweet_text": "3\ufe0f\u20e3 Protection against DDoS attack\n\nIf a REST API gets too many requests simultaneously, it can overload and crash.\n\nYou can prevent it by implementing rate limiting. It is the process through which you limit the number of requests coming to your API in a certain amount of time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:01:00.000Z"
        },
        {
            "id": 4887,
            "username": "Rapid_API",
            "tweet_id": "1587067109909078018",
            "tweet_text": "2\ufe0f\u20e3 Confirm user identity before giving access\n\nYour REST API should confirm the user\u2019s auth level before giving them access to any data.\n\nOne way to take care of it is to extract the ID from an auth token rather than using the ID sent by the client.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:00:59.000Z"
        },
        {
            "id": 4888,
            "username": "Rapid_API",
            "tweet_id": "1587067105861591040",
            "tweet_text": "1\ufe0f\u20e3 Request Schema Validation\n\nA user can send more data than expected by altering the request object before sending it to the server.\n\nSo when you develop a REST API, ensure that you take out each value from the request object and save the new object in the database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "Others",
            "created_at": "2022-10-31T13:00:58.000Z"
        },
        {
            "id": 4889,
            "username": "Rapid_API",
            "tweet_id": "1587067101898018822",
            "tweet_text": "How to secure a RESTful API?\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587067101898018822",
            "tweet_type": "API tips",
            "created_at": "2022-10-31T13:00:58.000Z"
        },
        {
            "id": 4890,
            "username": "Rapid_API",
            "tweet_id": "1586449052086018048",
            "tweet_text": "Thanks for reading! Follow @Rapid_API for more of our exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "Others",
            "created_at": "2022-10-29T20:05:03.000Z"
        },
        {
            "id": 4891,
            "username": "Rapid_API",
            "tweet_id": "1586449047950397446",
            "tweet_text": "With stateful requests, previous calls can impact further calls. Because of this, stateful apps use the same servers for each request, and memory allocation is needed to store data.\n\nStateful apps also require higher security because sensitive session data is maintained.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "Others",
            "created_at": "2022-10-29T20:05:02.000Z"
        },
        {
            "id": 4892,
            "username": "Rapid_API",
            "tweet_id": "1586449043890266113",
            "tweet_text": "\ud83d\udccc Stateful\n\nStateful protocols require the server to save status and session information, such as an authentication session. \n\nThis is achieved with heavy and complicated server-side software that is difficult to scale.\n\nStateful protocol examples are FTP and SOAP.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "Others",
            "created_at": "2022-10-29T20:05:01.000Z"
        },
        {
            "id": 4893,
            "username": "Rapid_API",
            "tweet_id": "1586449039838613505",
            "tweet_text": "However, HTTP Cookies can be created using HTTP Headers to create sessions by storing resource data in the browser.\n\nTherefore HTTP by default is still stateless but not always sessionless.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "Others",
            "created_at": "2022-10-29T20:05:00.000Z"
        },
        {
            "id": 4894,
            "username": "Rapid_API",
            "tweet_id": "1586449035833090048",
            "tweet_text": "By default, HTTP is stateless, making statelessness one of the principles of REST architecture and REST APIs.\n\nIf three HTTP calls are made to the server in succession, three separate connections are opened and closed one after the other.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "Others",
            "created_at": "2022-10-29T20:04:59.000Z"
        },
        {
            "id": 4895,
            "username": "Rapid_API",
            "tweet_id": "1586449031752024067",
            "tweet_text": "Each stateless call to the server is independent of the previous and the next. Every call contains all the data it needs to be fully processed and executed independently.\n\nIf there is an error or system crash, there is no dependency on retrieving data because it is never stored.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "Others",
            "created_at": "2022-10-29T20:04:58.000Z"
        },
        {
            "id": 4896,
            "username": "Rapid_API",
            "tweet_id": "1586449027687669762",
            "tweet_text": "\ud83d\udcccStateless\n\nStateless protocols do not retain information on the server, removing the issue of server-side state synchronization and data storage.\n\nBecause of this, they are scalable and can process requests fast.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "Others",
            "created_at": "2022-10-29T20:04:57.000Z"
        },
        {
            "id": 4897,
            "username": "Rapid_API",
            "tweet_id": "1586449023686385665",
            "tweet_text": "All network protocols for web browsers can be categorized into stateful and stateless.\n\nState refers to the server\u2019s ability to maintain session information. Let's look into both state types\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "API tips",
            "created_at": "2022-10-29T20:04:56.000Z"
        },
        {
            "id": 4898,
            "username": "Rapid_API",
            "tweet_id": "1586449019659866113",
            "tweet_text": "What's the difference between stateless and stateful protocols?\n\nA thread \ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586449019659866113",
            "tweet_type": "API tips",
            "created_at": "2022-10-29T20:04:55.000Z"
        },
        {
            "id": 4899,
            "username": "Rapid_API",
            "tweet_id": "1586114827105325058",
            "tweet_text": "We hope you found this helpful! \n\nFollow @Rapid_API for more of our exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586114802828673024",
            "tweet_type": "Others",
            "created_at": "2022-10-28T21:56:58.000Z"
        },
        {
            "id": 4900,
            "username": "Rapid_API",
            "tweet_id": "1586114823061905411",
            "tweet_text": "\ud83d\udccc Parameters\n\nInclude relevant parameters in the error response.\n\nIf the error is parameter-related, it will help the developers get more context about the problem.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586114802828673024",
            "tweet_type": "Others",
            "created_at": "2022-10-28T21:56:57.000Z"
        },
        {
            "id": 4901,
            "username": "Rapid_API",
            "tweet_id": "1586114818980847621",
            "tweet_text": "\ud83d\udccc Documentation reference\n\nInclude a link to a help page in your API documentation referring to the error.\n\nIt will allow developers to fix the error quickly, massively improving the developer experience of your API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586114802828673024",
            "tweet_type": "Others",
            "created_at": "2022-10-28T21:56:56.000Z"
        },
        {
            "id": 4902,
            "username": "Rapid_API",
            "tweet_id": "1586114814912462849",
            "tweet_text": "\ud83d\udccc Human-readable messages\n\nOnly a status code is not enough to clarify the error.\n\nA clear, human-readable message goes a long way to pinpoint the actual cause of the error.\n\nFor example, \"400 Bad Request - Your request is missing the following required parameters.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586114802828673024",
            "tweet_type": "Others",
            "created_at": "2022-10-28T21:56:55.000Z"
        },
        {
            "id": 4903,
            "username": "Rapid_API",
            "tweet_id": "1586114810835599361",
            "tweet_text": "\ud83d\udccc Status code\n\nThe 4xx and 5xx HTTP status codes show the error category.\n\nIncluding an appropriate status code helps developers understand the error and where it occurred.\n\nFor example, a 500 code shows the error is on the server end.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586114802828673024",
            "tweet_type": "Others",
            "created_at": "2022-10-28T21:56:54.000Z"
        },
        {
            "id": 4904,
            "username": "Rapid_API",
            "tweet_id": "1586114806792290310",
            "tweet_text": "What happens when a request to your API doesn't go as planned? \n\nAn error response is displayed; it is the only way for developers to diagnose what went wrong.\n\nAn effective error response should have the following elements. \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586114802828673024",
            "tweet_type": "API tips",
            "created_at": "2022-10-28T21:56:53.000Z"
        },
        {
            "id": 4905,
            "username": "Rapid_API",
            "tweet_id": "1586114802828673024",
            "tweet_text": "How to create a better error response for your API? \n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586114802828673024",
            "tweet_type": "API tips",
            "created_at": "2022-10-28T21:56:52.000Z"
        },
        {
            "id": 4906,
            "username": "Rapid_API",
            "tweet_id": "1586048932140007427",
            "tweet_text": "Thanks for reading!\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:07.000Z"
        },
        {
            "id": 4907,
            "username": "Rapid_API",
            "tweet_id": "1586048928201539586",
            "tweet_text": "PUT - Bulk update of orders for the customer with ID=2\n\nDELETE - Remove all orders for the customer with ID=2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:06.000Z"
        },
        {
            "id": 4908,
            "username": "Rapid_API",
            "tweet_id": "1586048924145565698",
            "tweet_text": "3\ufe0f\u20e3 /customers/2/orders\n\nIf our API uses nested models, we can use the structure mentioned above. \n\nWe're going to manipulate orders for the customer with an ID=2\n\nPOST - Create a new order for the customer with ID=2\n\nGET - Retrieve all orders for the customer with ID=2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:05.000Z"
        },
        {
            "id": 4909,
            "username": "Rapid_API",
            "tweet_id": "1586048920064507910",
            "tweet_text": "2\ufe0f\u20e3 /customers/2 URI\n\nIn this example, we're going to manipulate a single customer with an ID of 2\n\nPOST - Not used\n\nGET - Retrieve the details for the customer with ID=2\n\nPUT - Update the details of the customer with ID=2\n\nDELETE - Remove customer with ID=2",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:04.000Z"
        },
        {
            "id": 4910,
            "username": "Rapid_API",
            "tweet_id": "1586048916012908547",
            "tweet_text": "1\ufe0f\u20e3 /customers URI\n\nPOST - Create a new customer\n\nGET - Retrieve all customers\n\nPUT - Bulk update of customers\n\nDELETE - Remove all customers",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:03.000Z"
        },
        {
            "id": 4911,
            "username": "Rapid_API",
            "tweet_id": "1586048911889817601",
            "tweet_text": "To make your API URI structure easy to follow, you should structure it meaningfully.\n\nLet's assume we have an API with endpoints that manage customers.\n\nWe'll show different URIs with HTTP methods and their meanings.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:02.000Z"
        },
        {
            "id": 4912,
            "username": "Rapid_API",
            "tweet_id": "1586048907875860484",
            "tweet_text": "PATCH - performs a partial update of a resource\n\nDELETE - Deletes the resource located at the given URI.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:01.000Z"
        },
        {
            "id": 4913,
            "username": "Rapid_API",
            "tweet_id": "1586048903815757824",
            "tweet_text": "The HTTP protocol defines several methods. Let's name the most used ones.\n\nGET - obtains a copy of the resource from the given URI.\n\nPOST - creates a new resource at the specified URI\n\nPUT - changes the resource at the given URI with a new one or creates a new one.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "Others",
            "created_at": "2022-10-28T17:35:00.000Z"
        },
        {
            "id": 4914,
            "username": "Rapid_API",
            "tweet_id": "1586048899789328387",
            "tweet_text": "API routes structure \u2014 best practices\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586048899789328387",
            "tweet_type": "API tips",
            "created_at": "2022-10-28T17:34:59.000Z"
        },
        {
            "id": 4915,
            "username": "Rapid_API",
            "tweet_id": "1585979483693146114",
            "tweet_text": "Thanks for reading!\ud83d\udc19\n\nCheck out RapidAPI Hub to play around with over 40,000 APIs! (https://t.co/2tM1EEQGY2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585979452248530944",
            "tweet_type": "Others",
            "created_at": "2022-10-28T12:59:09.000Z"
        },
        {
            "id": 4916,
            "username": "Rapid_API",
            "tweet_id": "1585979478701916162",
            "tweet_text": "{ 6 / 6 } https://t.co/Ze4ui4B1BZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKH50LWIAEeG-J.jpg\"]",
            "tweet_conversation_id": "1585979452248530944",
            "tweet_type": "Others",
            "created_at": "2022-10-28T12:59:08.000Z"
        },
        {
            "id": 4917,
            "username": "Rapid_API",
            "tweet_id": "1585979473635299328",
            "tweet_text": "{ 5 / 6 } https://t.co/Q2hZgFp02x",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKH5eyXgAEI5TZ.jpg\"]",
            "tweet_conversation_id": "1585979452248530944",
            "tweet_type": "Others",
            "created_at": "2022-10-28T12:59:07.000Z"
        },
        {
            "id": 4918,
            "username": "Rapid_API",
            "tweet_id": "1585979468170027008",
            "tweet_text": "{ 4 / 6 } https://t.co/CIiSnFGYKv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKH5JfXwAArnbb.jpg\"]",
            "tweet_conversation_id": "1585979452248530944",
            "tweet_type": "Others",
            "created_at": "2022-10-28T12:59:05.000Z"
        },
        {
            "id": 4919,
            "username": "Rapid_API",
            "tweet_id": "1585979462994239489",
            "tweet_text": "{ 3 / 6 } https://t.co/oa8ZSxjrVq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKH41TacAAnC35.jpg\"]",
            "tweet_conversation_id": "1585979452248530944",
            "tweet_type": "Others",
            "created_at": "2022-10-28T12:59:04.000Z"
        },
        {
            "id": 4920,
            "username": "Rapid_API",
            "tweet_id": "1585979457545854977",
            "tweet_text": "{ 2 / 6 } https://t.co/2EG2r36KtP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKH4eiWQAAF_eU.jpg\"]",
            "tweet_conversation_id": "1585979452248530944",
            "tweet_type": "Others",
            "created_at": "2022-10-28T12:59:03.000Z"
        },
        {
            "id": 4921,
            "username": "Rapid_API",
            "tweet_id": "1585979452248530944",
            "tweet_text": "Find out how API responses are cached\ud83d\udc47\n\n{ 1 / 6 } https://t.co/rgh9V6NHv2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgKH4JyWIAIa0fR.jpg\"]",
            "tweet_conversation_id": "1585979452248530944",
            "tweet_type": "API tips",
            "created_at": "2022-10-28T12:59:02.000Z"
        },
        {
            "id": 4922,
            "username": "Rapid_API",
            "tweet_id": "1585757292980539392",
            "tweet_text": "Thanks for reading! \n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585757256141897728",
            "tweet_type": "Others",
            "created_at": "2022-10-27T22:16:15.000Z"
        },
        {
            "id": 4923,
            "username": "Rapid_API",
            "tweet_id": "1585757288928886785",
            "tweet_text": "Furthermore, this design enables data and functionality to be encapsulated at each layer, enhancing security and avoiding unexpected behavior.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585757256141897728",
            "tweet_type": "Others",
            "created_at": "2022-10-27T22:16:14.000Z"
        },
        {
            "id": 4924,
            "username": "Rapid_API",
            "tweet_id": "1585757284872904705",
            "tweet_text": "5\ufe0f\u20e3 REST API uses a layered architecture\n\nEach layer of the architecture adds to a distinct hierarchy.\n\nThis design is advantageous because it enables loose coupling between levels, making it easier for one layer to be altered or updated without impacting the others.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585757256141897728",
            "tweet_type": "Others",
            "created_at": "2022-10-27T22:16:13.000Z"
        },
        {
            "id": 4925,
            "username": "Rapid_API",
            "tweet_id": "1585757280741597184",
            "tweet_text": "4\ufe0f\u20e3 REST API uses a client-server architecture\n\nThe client and server should not be interdependent to prevent potential conflicts.\n\nYou shouldn't expect the client to be impacted by changes you make to the server and vice versa.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585757256141897728",
            "tweet_type": "Others",
            "created_at": "2022-10-27T22:16:12.000Z"
        },
        {
            "id": 4926,
            "username": "Rapid_API",
            "tweet_id": "1585757276652158978",
            "tweet_text": "On the client, a similar method might be applied.\n\nMaking subsequent requests quicker and more effective can enhance the user experience.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585757256141897728",
            "tweet_type": "Others",
            "created_at": "2022-10-27T22:16:11.000Z"
        },
        {
            "id": 4927,
            "username": "Rapid_API",
            "tweet_id": "1585757272617230336",
            "tweet_text": "3\ufe0f\u20e3 REST API is cached\n\nCaching is a method that may be used to enhance a web application's performance.\n\nThe server can save the answer to a client's request for a resource to accommodate subsequent requests for the same resource.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585757256141897728",
            "tweet_type": "Others",
            "created_at": "2022-10-27T22:16:10.000Z"
        },
        {
            "id": 4928,
            "username": "testdrivenio",
            "tweet_id": "1606326267896176643",
            "tweet_text": "Did you know?\n\nIn Python, statements are every piece of Python code.\nThere are simple statements (e.g., Assignment statements) and compound statements (e.g., try statement).\n\nExpressions are simple statements that can be evaluated to some value or call a procedure.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606326267896176643",
            "tweet_type": "Others",
            "created_at": "2022-12-23T16:30:01.000Z"
        },
        {
            "id": 4929,
            "username": "testdrivenio",
            "tweet_id": "1606293967867244545",
            "tweet_text": "Deploying a Node App to Google Cloud with Kubernetes\n\nhttps://t.co/an2hMvttXd\n\nLooks at how to deploy a Node/Express microservice (along with Postgres) to a Kubernetes cluster on Google Kubernetes Engine (GKE).\n\n#NodeJS #Kubernetes #GCP #Docker",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606293967867244545",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:21:40.000Z"
        },
        {
            "id": 4930,
            "username": "testdrivenio",
            "tweet_id": "1605963882203607040",
            "tweet_text": "Python tip:\n\nThe walrus operator (since Python 3.8) is an operator that assigns value to a variable as a part of a larger expression.\n\nIt's useful when you need to repeat the same statement (e.g., calling len() twice).\n\nExample \ud83d\udc47 https://t.co/icopPghKJ3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkmHo4waUAEXLS9.png\"]",
            "tweet_conversation_id": "1605963882203607040",
            "tweet_type": "Python tips",
            "created_at": "2022-12-22T16:30:01.000Z"
        },
        {
            "id": 4931,
            "username": "testdrivenio",
            "tweet_id": "1605938790756847617",
            "tweet_text": "Asynchronous Tasks with Django and Celery - just updated!\n\nhttps://t.co/m0ljbv21z8\n\nObjectives:\n\n1\u20e3Integrate Celery into a Django app and create tasks\n2\u20e3Containerize Django, Celery, and Redis with Docker\n3\u20e3Test a Celery task with both unit and integration tests\n\n#Django #Python",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605938790756847617",
            "tweet_type": "Others",
            "created_at": "2022-12-22T14:50:19.000Z"
        },
        {
            "id": 4932,
            "username": "testdrivenio",
            "tweet_id": "1605601503024402433",
            "tweet_text": "foto: Jay Ruzesky on unsplash.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605601500981784577",
            "tweet_type": "Others",
            "created_at": "2022-12-21T16:30:03.000Z"
        },
        {
            "id": 4933,
            "username": "testdrivenio",
            "tweet_id": "1605601500981784577",
            "tweet_text": "Did you know?\n\nWalrus operator ( := ) gets its name from the resemblance of the eyes and tusks of a walrus. https://t.co/vvz5KJAyQq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkg-DYWVUA04P2y.jpg\"]",
            "tweet_conversation_id": "1605601500981784577",
            "tweet_type": "Others",
            "created_at": "2022-12-21T16:30:03.000Z"
        },
        {
            "id": 4934,
            "username": "testdrivenio",
            "tweet_id": "1605562298570969088",
            "tweet_text": "Deploying Django to AWS ECS with Terraform\n\nhttps://t.co/rs1BqzmzSB\n\nHow to use Terraform to spin up the required AWS infrastructure for running a Django app on Elastic Container Service (ECS).\n\n#Django #Docker #Terraform",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605562298570969088",
            "tweet_type": "Others",
            "created_at": "2022-12-21T13:54:16.000Z"
        },
        {
            "id": 4935,
            "username": "testdrivenio",
            "tweet_id": "1605239110821875712",
            "tweet_text": "Python tip:\n\nYou can call magic methods (aka dunder methods) directly - but you shouldn't.\n\nThey're meant to be called by the interpreter and calling them directly hurts readability, skips additional checks and causes undesired behaviour. https://t.co/K41VRHJCiD",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkb0doeacAEEec-.png\"]",
            "tweet_conversation_id": "1605239110821875712",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T16:30:02.000Z"
        },
        {
            "id": 4936,
            "username": "testdrivenio",
            "tweet_id": "1605217051341209602",
            "tweet_text": "Just updated the \"Developing Web Applications with Python and Flask\" course!\n\nAs always, 10% of profits go directly to @PalletsTeam! \ud83d\ude80\n\nhttps://t.co/dlfncvzqSa\n\nNice work, @patkennedy79! \ud83d\ude4f\n\n#Python #Flask \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605217051341209602",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:02:23.000Z"
        },
        {
            "id": 4937,
            "username": "testdrivenio",
            "tweet_id": "1604891818822610945",
            "tweet_text": "Python tip:\n\nPython has a built-in method for returning a (pseudo) random element from a sequence. https://t.co/U78WscfUZf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkW4ml9acAAlnux.png\"]",
            "tweet_conversation_id": "1604891818822610945",
            "tweet_type": "Python tips",
            "created_at": "2022-12-19T17:30:01.000Z"
        },
        {
            "id": 4938,
            "username": "testdrivenio",
            "tweet_id": "1604841931485446146",
            "tweet_text": "Reproducible Builds with Bazel\n\nhttps://t.co/coR7hY3sHw\n\nIn this article, we'll identify sources of non-determinism in most build processes and look at how Bazel can be used to create reproducible, hermetic builds.\n\nby @gasparevitta\n\n#Python #DevOps #Bazel @bazelbuild",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604841931485446146",
            "tweet_type": "Others",
            "created_at": "2022-12-19T14:11:47.000Z"
        },
        {
            "id": 4939,
            "username": "bbelderbos",
            "tweet_id": "1605528354454528002",
            "tweet_text": "Which axiom(s) do you particularly like from the Zen of #Python? \n\nIn this article my thoughts on some of them \ud83d\udca1\n\nhttps://t.co/8ge90TIxFg \n\nIf anything, the Zen endorses code quality and good software design principles \ud83d\ude0d \ud83d\udcaa\n\n#softwaredevelopment #designpatterns #codequality",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605528354454528002",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:39:23.000Z"
        },
        {
            "id": 4940,
            "username": "alexxubyte",
            "tweet_id": "1606347571919667200",
            "tweet_text": "How is data sent over the internet? What does that have to do with the \ud835\udc0e\ud835\udc12\ud835\udc08 \ud835\udc26\ud835\udc28\ud835\udc1d\ud835\udc1e\ud835\udc25? How does TCP/IP fit into this?\n\nWatch and subscribe here (YouTube video): https://t.co/CHAWxQBSFv https://t.co/p9KOZwr3wM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkrkmi2UEAAmBon.jpg\"]",
            "tweet_conversation_id": "1606347571919667200",
            "tweet_type": "Others",
            "created_at": "2022-12-23T17:54:40.000Z"
        },
        {
            "id": 4941,
            "username": "alexxubyte",
            "tweet_id": "1605965600802492417",
            "tweet_text": "/10 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/QExwFb9Ji5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:51.000Z"
        },
        {
            "id": 4942,
            "username": "alexxubyte",
            "tweet_id": "1605965597958754312",
            "tweet_text": "/9 \ud83d\udc49 Over to you: Did I miss anything? Please comment on what you think is necessary to learn microservices.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:50.000Z"
        },
        {
            "id": 4943,
            "username": "alexxubyte",
            "tweet_id": "1605965595458949123",
            "tweet_text": "/8 \ud83d\udd39 Management &amp; Monitoring - To manage so many microservices, the common Ops tools include Prometheus, Elastic Stack, and Kubernetes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:50.000Z"
        },
        {
            "id": 4944,
            "username": "alexxubyte",
            "tweet_id": "1605965592728440832",
            "tweet_text": "/7 \ud83d\udd39 Communications - For services to talk to each other, we can use messaging infra Kafka or RPC.\n\n\ud83d\udd39 Persistence - We can use MySQL or PostgreSQL for a relational database, and Amazon S3 for object store. We can also use Cassandra for the wide-column store if necessary.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:49.000Z"
        },
        {
            "id": 4945,
            "username": "alexxubyte",
            "tweet_id": "1605965590174126085",
            "tweet_text": "/6 \ud83d\udd39 The microservices are deployed on clouds. We have options among AWS, Microsoft Azure, or Google GCP.\n\n\ud83d\udd39 Cache and Full-text Search - Redis is a common choice for caching key-value pairs. ElasticSearch is used for full-text search.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:48.000Z"
        },
        {
            "id": 4946,
            "username": "alexxubyte",
            "tweet_id": "1605965586994843655",
            "tweet_text": "/5 \u25b6\ufe0f \ud835\udc0f\ud835\udc2b\ud835\udc28\ud835\udc1d\ud835\udc2e\ud835\udc1c\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\n\n\ud83d\udd39 NGinx is a common choice for load balancers. Cloudflare provides CDN (Content Delivery Network).\n\n\ud83d\udd39 API Gateway - We can use spring boot for the gateway, and use Eureka/Zookeeper for service discovery. https://t.co/kD5aBNRS0d",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkmJMB6UUAE1vJq.jpg\"]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:47.000Z"
        },
        {
            "id": 4947,
            "username": "alexxubyte",
            "tweet_id": "1605965580703387656",
            "tweet_text": "/4 \ud83d\udd39 Continuous Integration - JUnit and Jenkins for automated testing. The code is packaged into a Docker image and deployed as microservices.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:46.000Z"
        },
        {
            "id": 4948,
            "username": "alexxubyte",
            "tweet_id": "1605965577591214091",
            "tweet_text": "/3 \ud83d\udd39 Development - Node.js or react is popular for frontend development, and java/python/go for backend development. Also, we need to change the configurations in the API gateway according to API definitions. https://t.co/Ern9DAwMuW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkmJLfRUoAAd0iR.jpg\"]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:45.000Z"
        },
        {
            "id": 4949,
            "username": "alexxubyte",
            "tweet_id": "1605965570758692867",
            "tweet_text": "/2 \u25b6\ufe0f \ud835\udc0f\ud835\udc2b\ud835\udc1e-\ud835\udc0f\ud835\udc2b\ud835\udc28\ud835\udc1d\ud835\udc2e\ud835\udc1c\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\n\n\ud83d\udd39 Define API - This establishes a contract between frontend and backend. We can use Postman or OpenAPI for this. https://t.co/ovDEN38tNy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkmJLE6VQAEFwY4.jpg\"]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:44.000Z"
        },
        {
            "id": 4950,
            "username": "alexxubyte",
            "tweet_id": "1605965563410272263",
            "tweet_text": "/1 What tech stack is commonly used for microservices?\n\nBelow you will find a diagram showing the microservice tech stack, both for the development phase and for production. https://t.co/hFPziGW0yN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkmJKxcUUAEXMji.jpg\"]",
            "tweet_conversation_id": "1605965563410272263",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-22T16:36:42.000Z"
        },
        {
            "id": 4951,
            "username": "alexxubyte",
            "tweet_id": "1605607770245324809",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/1GrRcRGmdI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:57.000Z"
        },
        {
            "id": 4952,
            "username": "alexxubyte",
            "tweet_id": "1605607767581941762",
            "tweet_text": "/7 \n11.  Complex real-time database in 3 data centers: Sacramento, Atlanta, and Portland. It also has cloud contracts with AWS and Google Cloud.\n\n12.  Long tail of legacy code. Example: running 4 versions of API code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:57.000Z"
        },
        {
            "id": 4953,
            "username": "alexxubyte",
            "tweet_id": "1605607764939530262",
            "tweet_text": "/6 \n10.  Lack of good local dev environment. Example: some testing requires packing GBs of data. 20min to upload them to the server, and 30 min to unpack.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:56.000Z"
        },
        {
            "id": 4954,
            "username": "alexxubyte",
            "tweet_id": "1605607762360033284",
            "tweet_text": "/5 \n9.  Costingly Serializing/deserializing. Example: on Ads server, 30% CPU run ads prediction model, 70% serializing/deserializing data into four different formats.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:55.000Z"
        },
        {
            "id": 4955,
            "username": "alexxubyte",
            "tweet_id": "1605607759679918080",
            "tweet_text": "/4 \n7.  High complexity of the tech stack: a couple of weeks in Elon\u2019s time are required to understand where everything is and how things interact.\n\n8.  High dependency among microservices. Example: touch 1 service, 17 other services are affected.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:55.000Z"
        },
        {
            "id": 4956,
            "username": "alexxubyte",
            "tweet_id": "1605607757071015943",
            "tweet_text": "/3 \n5.  To cut the burn rate, Twitter headcounts reduced from 8k to 2k in the last 6 weeks.\n\n6.  Got scammed by the SMS telecommunications providers. $16 million SMS costs excluding North America. 300+ SMS providers allow bots to run 2FA repeatedly.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:54.000Z"
        },
        {
            "id": 4957,
            "username": "alexxubyte",
            "tweet_id": "1605607754390900736",
            "tweet_text": "/2 \n1.  Code complexity: 20 million lines of Scala code in Twitter codebase.\n\n2.  $1 billion in server costs per year.\n\n3.  A metric that matters most to Twitter: unregretted user minutes.\n\n4.  Like count is updated every second for celebrities.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:54.000Z"
        },
        {
            "id": 4958,
            "username": "alexxubyte",
            "tweet_id": "1605607748283949056",
            "tweet_text": "/1 My 12 bullet points TLDR on technical content from Elon Musk on a Space with @realGeorgeHotz, on the complexity of the Twitter stack, scale, metrics, ads, etc. https://t.co/J1jxvNxyDg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkhDupnUYAcEamK.jpg\"]",
            "tweet_conversation_id": "1605607748283949056",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-21T16:54:52.000Z"
        },
        {
            "id": 4959,
            "username": "alexxubyte",
            "tweet_id": "1605242893870190592",
            "tweet_text": "*BIG* announcement: we\u2019ve launched a Facebook page!\n\nFacebook supports both \ud835\udc1d\ud835\udc22\ud835\udc1a\ud835\udc20\ud835\udc2b\ud835\udc1a\ud835\udc26\ud835\udc2c \ud835\udc1a\ud835\udc27\ud835\udc1d \ud835\udc2f\ud835\udc22\ud835\udc1d\ud835\udc1e\ud835\udc28\ud835\udc2c well. Our goal is to explain complex systems in an easy-to-understand way.\n\nWe'll be posting a wide range of topics there.\n\nFollow us on FB: https://t.co/sekwCxADL9 https://t.co/fLgNOn7qwc",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkb350DUEAU8Z8J.jpg\"]",
            "tweet_conversation_id": "1605242893870190592",
            "tweet_type": "Others",
            "created_at": "2022-12-20T16:45:04.000Z"
        },
        {
            "id": 4960,
            "username": "bascodes",
            "tweet_id": "1606343897709514753",
            "tweet_text": "Don't deploy on Friday before Xmas\ud83c\udf84?\n\nBack in the day, our deployments looked like this.\n\nWho remembers? https://t.co/jGDuz3DFOB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkrhKxtWIAAarNN.png\"]",
            "tweet_conversation_id": "1606343897709514753",
            "tweet_type": "Others",
            "created_at": "2022-12-23T17:40:04.000Z"
        },
        {
            "id": 4961,
            "username": "bascodes",
            "tweet_id": "1606264352289480704",
            "tweet_text": "One of the last issues of #ThisWeekInPython\ud83d\udc0d\n\nThis is the 43rd time I share interesting projects and articles in the Python universe\n\nhttps://t.co/qd25vgCTEn",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606264352289480704",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:23:59.000Z"
        },
        {
            "id": 4962,
            "username": "bascodes",
            "tweet_id": "1606261550641201154",
            "tweet_text": "By the way, did you know I create a weekly tech newsletter with the latest buzz around the industry and ideas from other developers?\nSign up here: \nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:51.000Z"
        },
        {
            "id": 4963,
            "username": "bascodes",
            "tweet_id": "1606261546535067648",
            "tweet_text": "faqtory \u2013 A tool to generate GitHub flavoured https://t.co/fDdn6i8NrY documents \u2013 by @willmcgugan\nhttps://t.co/qhbyLdLAlN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:50.000Z"
        },
        {
            "id": 4964,
            "username": "bascodes",
            "tweet_id": "1606261542374236160",
            "tweet_text": "kglab \u2013 an abstraction layer in Python for building knowledge graphs \u2013 by @derwen_ai\nhttps://t.co/dI2KJQZ85a",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:49.000Z"
        },
        {
            "id": 4965,
            "username": "bascodes",
            "tweet_id": "1606261538150555649",
            "tweet_text": "bstruct \u2013 Simple and efficient binary (de)serialization using regular type annotations \nhttps://t.co/RATlbNVXtP",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:48.000Z"
        },
        {
            "id": 4966,
            "username": "bascodes",
            "tweet_id": "1606261534006677505",
            "tweet_text": "textual-astview \u2013 A Textual-based Python AST viewing widget library and application \u2013 by @davepdotorg\nhttps://t.co/lUsgIkIKHb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:47.000Z"
        },
        {
            "id": 4967,
            "username": "bascodes",
            "tweet_id": "1606261529862721538",
            "tweet_text": "hedra \u2013 Pure Python performance testing framework \u2013 by @sc_codeum\nhttps://t.co/JvoLWLn7xs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:46.000Z"
        },
        {
            "id": 4968,
            "username": "bascodes",
            "tweet_id": "1606261525764886530",
            "tweet_text": "suggested by @CodingComputing:\nhttps://t.co/1YIxCJiiwy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:45.000Z"
        },
        {
            "id": 4969,
            "username": "bascodes",
            "tweet_id": "1606261521688002562",
            "tweet_text": "Effective Python Async like a PRO \u2013 by @guilatrova\nhttps://t.co/kz7exs0TBt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:44.000Z"
        },
        {
            "id": 4970,
            "username": "bascodes",
            "tweet_id": "1606261517590077441",
            "tweet_text": "Django API Domain Driven Design Style Guide\nhttps://t.co/oH1XWfm513",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:43.000Z"
        },
        {
            "id": 4971,
            "username": "bascodes",
            "tweet_id": "1606261513467084801",
            "tweet_text": "Multi-Tenancy in Python, FastAPI and SqlAlchemy using Postgres Row Level Security \nhttps://t.co/PIbRtUmC39",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:42.000Z"
        },
        {
            "id": 4972,
            "username": "bascodes",
            "tweet_id": "1606261509377720321",
            "tweet_text": "Running Python inside ChatGPT \u2013 by @mathsppblog\nhttps://t.co/Dw1YqIBy25",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:41.000Z"
        },
        {
            "id": 4973,
            "username": "bascodes",
            "tweet_id": "1606261505250426880",
            "tweet_text": "Boring Python: code quality \u2013 by @ubernostrum\nhttps://t.co/4P76ruqGQj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:40.000Z"
        },
        {
            "id": 4974,
            "username": "bascodes",
            "tweet_id": "1606261501219803138",
            "tweet_text": "+++\nYou can follow #ThisWeekInPython on my blog, too \ud83d\udc47\n+++\nhttps://t.co/aMtecaVnD3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:39.000Z"
        },
        {
            "id": 4975,
            "username": "bascodes",
            "tweet_id": "1606261497340076034",
            "tweet_text": "#ThisWeekInPython",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606261497340076034",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:12:38.000Z"
        },
        {
            "id": 4976,
            "username": "bascodes",
            "tweet_id": "1606070387820752898",
            "tweet_text": "Does anyone else see view counts in their Twitter feeds?\n\nI see them on my own tweets but also on other people\u2019s tweets. \n\nBug or feature? https://t.co/aYfjxgJZFr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FknogTxWYAA7Y9W.jpg\"]",
            "tweet_conversation_id": "1606070387820752898",
            "tweet_type": "Others",
            "created_at": "2022-12-22T23:33:14.000Z"
        },
        {
            "id": 4977,
            "username": "bascodes",
            "tweet_id": "1606017613406081025",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Did you know that you can easily find out about the memory usage of a variable in Python?\n\nTry \ud83d\udc47 https://t.co/hIQLQtxgNu",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkm4gYXXEBUB0ZH.jpg\"]",
            "tweet_conversation_id": "1606017613406081025",
            "tweet_type": "Python tips",
            "created_at": "2022-12-22T20:03:32.000Z"
        },
        {
            "id": 4978,
            "username": "bascodes",
            "tweet_id": "1605964863079170049",
            "tweet_text": "By the way? Did you know about my newsletter? I share the latest buzz of the tech industry and personal reflections of fellow devs in each issue! \nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605964858880446464",
            "tweet_type": "Others",
            "created_at": "2022-12-22T16:33:55.000Z"
        },
        {
            "id": 4979,
            "username": "bascodes",
            "tweet_id": "1605964858880446464",
            "tweet_text": "What thought-provoking Python articles or projects have you found this week?\n\nI'd love to include them in tomorrow's issue of #ThisWeekInPython\ud83d\udc0d!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605964858880446464",
            "tweet_type": "Others",
            "created_at": "2022-12-22T16:33:54.000Z"
        },
        {
            "id": 4980,
            "username": "bascodes",
            "tweet_id": "1605904572999925761",
            "tweet_text": "I hope you enjoyed this thread about type hints in Python.\n\nIf you did, please retweet the first tweet in this thread to help others learn from it, too!\n\ud83d\udc47 \nhttps://t.co/AtMt3pT5TF",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:21.000Z"
        },
        {
            "id": 4981,
            "username": "bascodes",
            "tweet_id": "1605904568931459072",
            "tweet_text": "There are more type hints, you can learn about them here:\n\nhttps://t.co/yiE8fuMr6O",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:20.000Z"
        },
        {
            "id": 4982,
            "username": "bascodes",
            "tweet_id": "1605904563424432133",
            "tweet_text": "What if your variable can take one form or another?\nOr if the value of some parameter is optional?\n\nPython has \ud835\ude84\ud835\ude97\ud835\ude92\ud835\ude98\ud835\ude97 and \ud835\ude7e\ud835\ude99\ud835\ude9d\ud835\ude92\ud835\ude98\ud835\ude97\ud835\ude8a\ud835\ude95 type hints for these cases: https://t.co/EvfDmIUZE6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRpRxWQAAQ65u.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:18.000Z"
        },
        {
            "id": 4983,
            "username": "bascodes",
            "tweet_id": "1605904558261256193",
            "tweet_text": "If you want to model a more complex \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9d, you could subclass the \ud835\ude83\ud835\udea2\ud835\ude99\ud835\ude8e\ud835\ude8d\ud835\ude73\ud835\ude92\ud835\ude8c\ud835\ude9d type hint like so: https://t.co/CLfqBONU1b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRo7sXkAE1duX.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:17.000Z"
        },
        {
            "id": 4984,
            "username": "bascodes",
            "tweet_id": "1605904553664290816",
            "tweet_text": "Same for \ud835\ude8d\ud835\ude92\ud835\ude8c\ud835\ude9ds. Let's say, you map string keys to string values. The type hint would look like this: https://t.co/JRwY9A4GQo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRonVXoAAlnpt.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:16.000Z"
        },
        {
            "id": 4985,
            "username": "bascodes",
            "tweet_id": "1605904548995923968",
            "tweet_text": "Now, let's talk about more complex type hints.\n\nLet's say you have a \ud835\ude95\ud835\ude92\ud835\ude9c\ud835\ude9d. As we have seen, you can add the \ud835\ude95\ud835\ude92\ud835\ude9c\ud835\ude9d type hint.\n\nBut that does not tell us anything about the \ud835\ude95\ud835\ude92\ud835\ude9c\ud835\ude9d's content.\n\nThat's what the \ud835\ude9d\ud835\udea2\ud835\ude99\ud835\ude92\ud835\ude97\ud835\ude90 module is for: https://t.co/0LeTSgfHgI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRoSXX0AAq6wM.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:15.000Z"
        },
        {
            "id": 4986,
            "username": "bascodes",
            "tweet_id": "1605904543874695168",
            "tweet_text": "You can, of course, add type hints to functions and class attributes, too: https://t.co/zoqiaDiDgu",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRn9MWIAEOFCB.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:14.000Z"
        },
        {
            "id": 4987,
            "username": "bascodes",
            "tweet_id": "1605904539848171520",
            "tweet_text": "Why, then, should you add type hints if they are not enforced by default?\n\n1\ufe0f\u20e3 they make your code easier to read as you know which types to expect\n2\ufe0f\u20e3 they make your IDE provide better error detection and suggestions\n3\ufe0f\u20e3 they can act as some kind of inline documentation",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:13.000Z"
        },
        {
            "id": 4988,
            "username": "bascodes",
            "tweet_id": "1605904534802468865",
            "tweet_text": "However, these types are not enforced by the interpreter. You can use \ud835\ude96\ud835\udea2\ud835\ude99\ud835\udea2 to enforce them. https://t.co/fl4knL53Uq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRnbXXoAQNMwS.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:12.000Z"
        },
        {
            "id": 4989,
            "username": "bascodes",
            "tweet_id": "1605904529601581057",
            "tweet_text": "With type hinting, however, you can add types to variables.\n\nHere are some examples: https://t.co/uRo7VLFCLh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRm1yX0AApD2R.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:10.000Z"
        },
        {
            "id": 4990,
            "username": "bascodes",
            "tweet_id": "1605904524601868288",
            "tweet_text": "Python is a dynamically typed language.\n\nA variable does not need to be declared with a specific type. Also, variables can change their types during runtime. https://t.co/1qPnTX9KIV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklRmg1XgAAVG5E.jpg\"]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:34:09.000Z"
        },
        {
            "id": 4991,
            "username": "bascodes",
            "tweet_id": "1605904520688635909",
            "tweet_text": "\ud83d\udca1\ud83d\udc0d Did you hear about Type Hinting in Python?\n\nLet's have a look at these helpful additions to your code\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605904520688635909",
            "tweet_type": "Python tips",
            "created_at": "2022-12-22T12:34:08.000Z"
        },
        {
            "id": 4992,
            "username": "Rapid_API",
            "tweet_id": "1606416612193599490",
            "tweet_text": "That\u2019s all for now! Follow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606416596217520130",
            "tweet_type": "Others",
            "created_at": "2022-12-23T22:29:00.000Z"
        },
        {
            "id": 4993,
            "username": "Rapid_API",
            "tweet_id": "1606416608141926401",
            "tweet_text": "\ud83d\udccc Example \n\nWe want to get an object's ID and in the subsequent request, you want to retrieve more details about it. \n\nWe'll chain these two requests:\n\n1\ufe0f\u20e3 First request will get the object's ID from a search endpoint.\n\n2\ufe0f\u20e3 Second request will use the ID to get more details.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606416596217520130",
            "tweet_type": "Others",
            "created_at": "2022-12-23T22:28:59.000Z"
        },
        {
            "id": 4994,
            "username": "Rapid_API",
            "tweet_id": "1606416604111175682",
            "tweet_text": "\ud83d\udccc Why is it used?\n\nToday, many applications utilize more than one API to perform a function.\n\nOften the response returned from one API is used to request a different API or a different endpoint of the same API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606416596217520130",
            "tweet_type": "Others",
            "created_at": "2022-12-23T22:28:58.000Z"
        },
        {
            "id": 4995,
            "username": "Rapid_API",
            "tweet_id": "1606416600134991872",
            "tweet_text": "\ud83d\udccc Request chaining\n\nIt allows you to use the data returned from one request to make further requests.\n\nSo, we make multiple API requests, with each request feeding subsequent requests.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606416596217520130",
            "tweet_type": "Others",
            "created_at": "2022-12-23T22:28:57.000Z"
        },
        {
            "id": 4996,
            "username": "Rapid_API",
            "tweet_id": "1606416596217520130",
            "tweet_text": "What is request chaining? \n\nA thread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606416596217520130",
            "tweet_type": "API tips",
            "created_at": "2022-12-23T22:28:56.000Z"
        },
        {
            "id": 4997,
            "username": "Rapid_API",
            "tweet_id": "1606266146193301505",
            "tweet_text": "We hope you enjoyed this week\u2019s Rapid Comic! \ud83d\udc19\n\nFollow @Rapid_API for more exclusive content.\n\nPlease visit RapidAPI Hub to explore over 40,000 APIs (https://t.co/2tM1EEQGY2)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606266120570392577",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:31:06.000Z"
        },
        {
            "id": 4998,
            "username": "Rapid_API",
            "tweet_id": "1606266141139210242",
            "tweet_text": "{ 5 / 5 } https://t.co/eH5qF97pCF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkqahZxXwAU3Yzw.jpg\"]",
            "tweet_conversation_id": "1606266120570392577",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:31:05.000Z"
        },
        {
            "id": 4999,
            "username": "Rapid_API",
            "tweet_id": "1606266136072523776",
            "tweet_text": "{ 4 / 5 } https://t.co/pYT7KBg17v",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkqahIMX0AEfGkG.jpg\"]",
            "tweet_conversation_id": "1606266120570392577",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:31:04.000Z"
        },
        {
            "id": 5000,
            "username": "Rapid_API",
            "tweet_id": "1606266130879897600",
            "tweet_text": "{ 3 / 5 } https://t.co/eYKDgzILXA",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkqag2tXgAAvytk.jpg\"]",
            "tweet_conversation_id": "1606266120570392577",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:31:03.000Z"
        },
        {
            "id": 5001,
            "username": "Rapid_API",
            "tweet_id": "1606266125859307520",
            "tweet_text": "{ 2 / 5 } https://t.co/CxK0HkBZXS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkqagaVXgAABrLr.jpg\"]",
            "tweet_conversation_id": "1606266120570392577",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:31:02.000Z"
        },
        {
            "id": 5002,
            "username": "Rapid_API",
            "tweet_id": "1606266120570392577",
            "tweet_text": "Let\u2019s talk about API Specification\n\nA thread \ud83d\udc47\n\n{ 1 / 5 } https://t.co/Sltpj5jfy6",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkqagG8WIAAaWnv.jpg\"]",
            "tweet_conversation_id": "1606266120570392577",
            "tweet_type": "API tips",
            "created_at": "2022-12-23T12:31:00.000Z"
        },
        {
            "id": 5003,
            "username": "Rapid_API",
            "tweet_id": "1606099272994275328",
            "tweet_text": "We hope you found this thread helpful! \n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\ude80",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "Others",
            "created_at": "2022-12-23T01:28:01.000Z"
        },
        {
            "id": 5004,
            "username": "Rapid_API",
            "tweet_id": "1606099268967796739",
            "tweet_text": "GraphQL is most suited to apps on devices like mobiles, smartwatches, and other small devices where bandwidth is a concern.\n\nIt is also suitable for apps that need to fetch nested data in a single call, such as a social media app that fetches posts with user info and comments.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "Others",
            "created_at": "2022-12-23T01:28:00.000Z"
        },
        {
            "id": 5005,
            "username": "Rapid_API",
            "tweet_id": "1606099264991633410",
            "tweet_text": "GraphQL also allows multiple resources to be requested in a single call, which reduces bandwidth. It can be used on the frontend as well as the server side.\n\nGraphQL is open source and is attracting a growing community of developers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "Others",
            "created_at": "2022-12-23T01:27:59.000Z"
        },
        {
            "id": 5006,
            "username": "Rapid_API",
            "tweet_id": "1606099260985982976",
            "tweet_text": "\ud83d\udccc GraphQL\n\nGraphQL query language was created to combat the limitations of REST.\n\nGraphQL uses a strongly typed schema to request data, which adds validation and makes it less error-prone.\n\nClients request only the data they require, solving the issue of over/under-fetching.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "Others",
            "created_at": "2022-12-23T01:27:58.000Z"
        },
        {
            "id": 5007,
            "username": "Rapid_API",
            "tweet_id": "1606099256934277122",
            "tweet_text": "However, REST remains the dominant standard for designing web APIs because of its lightweight architecture, flexibility, and scalability.\n\nMany popular web and cloud-based companies use REST APIs like Amazon and Twitter.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "Others",
            "created_at": "2022-12-23T01:27:57.000Z"
        },
        {
            "id": 5008,
            "username": "Rapid_API",
            "tweet_id": "1606099252953944064",
            "tweet_text": "Although highly suitable for APIs and web services, REST has these limitations to consider\ud83d\udc47\n\n1\ufe0f\u20e3 Prone to over/under-fetching of data\n\n2\ufe0f\u20e3 Multiple requests are needed to fetch multiple resources",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "API tips",
            "created_at": "2022-12-23T01:27:56.000Z"
        },
        {
            "id": 5009,
            "username": "Rapid_API",
            "tweet_id": "1606099248956817408",
            "tweet_text": "\ud83d\udccc REST\n\nREST APIs adhere to several constraints that make a uniform interface.\n\nREST uses HTTP to allow CRUD operations with various HTTP methods (GET, POST, PUT, DELETE, etc.) to retrieve and deliver data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "Others",
            "created_at": "2022-12-23T01:27:55.000Z"
        },
        {
            "id": 5010,
            "username": "Rapid_API",
            "tweet_id": "1606099244984811520",
            "tweet_text": "The core difference between REST and GraohQL is that REST is an architectural style, whereas GraphQL is a query language that operates over a single endpoint.\n\nBoth have advantages and disadvantages. Whichever you decide to use in your project depends on your needs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "Others",
            "created_at": "2022-12-23T01:27:54.000Z"
        },
        {
            "id": 5011,
            "username": "Rapid_API",
            "tweet_id": "1606099241037856768",
            "tweet_text": "Let\u2019s take a look at REST and GraphQL\n\nThread \ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606099241037856768",
            "tweet_type": "API tips",
            "created_at": "2022-12-23T01:27:53.000Z"
        },
        {
            "id": 5012,
            "username": "Rapid_API",
            "tweet_id": "1605907115125706754",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605907087355256832",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:44:27.000Z"
        },
        {
            "id": 5013,
            "username": "Rapid_API",
            "tweet_id": "1605907109605933058",
            "tweet_text": "\ud83d\udccc \u200b\u200bError handling with Async/Await\n\nTo handle errors in a standard API call using Axios with Async/Await, we use a try...catch block. \n\nInside the catch, we can handle errors. Here is an example: https://t.co/LaWn2pkSH9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklT-xTWIAAUoh4.jpg\"]",
            "tweet_conversation_id": "1605907087355256832",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:44:25.000Z"
        },
        {
            "id": 5014,
            "username": "Rapid_API",
            "tweet_id": "1605907104363077633",
            "tweet_text": "Due to the await keyword, the asynchronous function pauses until the promise is resolved. https://t.co/UiPjCAKxhB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklT-R2WAAEdGqN.jpg\"]",
            "tweet_conversation_id": "1605907087355256832",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:44:24.000Z"
        },
        {
            "id": 5015,
            "username": "Rapid_API",
            "tweet_id": "1605907100319850496",
            "tweet_text": "\ud83d\udccc Axios with async/await\n\nA better and cleaner way of handling promises is through the async/await keywords. \n\nYou start by specifying the caller function as async. Then use the await keyword with the function call.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605907087355256832",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:44:23.000Z"
        },
        {
            "id": 5016,
            "username": "Rapid_API",
            "tweet_id": "1605907095307558913",
            "tweet_text": "\ud83d\udccc Installation\n\nLet\u2019s install Axios in our project by running the following command in the project terminal:\n\nnpm install axios https://t.co/7JhWfcLEJS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FklT9-5XkAALB7W.jpg\"]",
            "tweet_conversation_id": "1605907087355256832",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:44:22.000Z"
        },
        {
            "id": 5017,
            "username": "Rapid_API",
            "tweet_id": "1605907091339837441",
            "tweet_text": "\ud83d\udccc What is Axios?\n\nAxios is a promise-based HTTP client that lets you handle asynchronous HTTP requests.\n\nIt uses JavaScript\u2019s promises to send HTTP requests and manage their responses.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605907087355256832",
            "tweet_type": "Others",
            "created_at": "2022-12-22T12:44:21.000Z"
        },
        {
            "id": 5018,
            "username": "Rapid_API",
            "tweet_id": "1605907087355256832",
            "tweet_text": "Use Axios with Async/Await\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605907087355256832",
            "tweet_type": "API tips",
            "created_at": "2022-12-22T12:44:20.000Z"
        },
        {
            "id": 5019,
            "username": "Rapid_API",
            "tweet_id": "1605737133544710147",
            "tweet_text": "Thanks for reading!\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:29:00.000Z"
        },
        {
            "id": 5020,
            "username": "Rapid_API",
            "tweet_id": "1605737128826216454",
            "tweet_text": "We're using the \"-X\" command once more with the \"DELETE\" method option for DELETE. https://t.co/oAECXCsIk9",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fki5X1LXoAMu3iv.jpg\"]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:59.000Z"
        },
        {
            "id": 5021,
            "username": "Rapid_API",
            "tweet_id": "1605737123923087365",
            "tweet_text": "You may see an example of a PUT request below.\n\nThe \"-X\" command, which enables method specification, is what we're utilizing. \n\nIt is \"PUT\" in this instance. https://t.co/qcVei6oeuh",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fki5XZeXwAIOynC.jpg\"]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:58.000Z"
        },
        {
            "id": 5022,
            "username": "Rapid_API",
            "tweet_id": "1605737118919180292",
            "tweet_text": "You can use the example below to declare your payload in the file if you wish.\n\nAs you can see, we're using the \"-H\" command to define the header, so the server will know the payload is in JSON format. https://t.co/WrgVV7AjEl",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fki5XCSWIAEsPA-.jpg\"]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:56.000Z"
        },
        {
            "id": 5023,
            "username": "Rapid_API",
            "tweet_id": "1605737113928056833",
            "tweet_text": "The information we wish to send to the API must be specified in a POST request.\n\nThe \"-d\" command can be used for this.\n\nWe're utilizing \"&amp;\" to concatenate variable names and value pairs. https://t.co/3QX4mvnnv2",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fki5WqTXwAA89SI.jpg\"]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:55.000Z"
        },
        {
            "id": 5024,
            "username": "Rapid_API",
            "tweet_id": "1605737108332765185",
            "tweet_text": "By default, cURL outputs the body of the response to standard output.\n\nHowever, by utilizing the output option, the output can be directed to a file.\n\nWe'll employ the \"-o\" command for this.\n\nHere, we can see the standard GET request. https://t.co/bDGZiLtFhL",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fki5WV9XkAA66KI.jpg\"]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:54.000Z"
        },
        {
            "id": 5025,
            "username": "Rapid_API",
            "tweet_id": "1605737103488417792",
            "tweet_text": "Setting the verbose option to \"on\" is always a good idea while testing.\n\nYou can set verbose \"on\" with \"-v\" command.\n\nThe command offers important details like:\n\n- the resolved IP address\n- the port we're trying to connect to\n- headers https://t.co/DAJmke5jyJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fki5WA8XoAAnMrr.jpg\"]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:53.000Z"
        },
        {
            "id": 5026,
            "username": "Rapid_API",
            "tweet_id": "1605737099612782593",
            "tweet_text": "Over 200 options are available in cURL to let you customize your commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:52.000Z"
        },
        {
            "id": 5027,
            "username": "Rapid_API",
            "tweet_id": "1605737095607320580",
            "tweet_text": "cURL is a command line tool used for transferring data over the internet. \n\nIt supports various protocols such as HTTP, HTTPS, FTP, FTPS, SCP, SFTP, TFTP, LDAP, LDAPS, DICT, FILE, and TELNET.\n\ncURL can be used to download files from web servers and upload files to servers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "Others",
            "created_at": "2022-12-22T01:28:51.000Z"
        },
        {
            "id": 5028,
            "username": "Rapid_API",
            "tweet_id": "1605737091677184000",
            "tweet_text": "How to make API requests with cURL\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605737091677184000",
            "tweet_type": "API tips",
            "created_at": "2022-12-22T01:28:50.000Z"
        },
        {
            "id": 5029,
            "username": "Rapid_API",
            "tweet_id": "1605546367241314305",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605546346261479424",
            "tweet_type": "Others",
            "created_at": "2022-12-21T12:50:58.000Z"
        },
        {
            "id": 5030,
            "username": "Rapid_API",
            "tweet_id": "1605546363009261569",
            "tweet_text": "4\ufe0f\u20e3 Composite APIs\n\nA composite API is an API that combines multiple APIs into a single one for getting various kinds of data with a single request.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605546346261479424",
            "tweet_type": "Others",
            "created_at": "2022-12-21T12:50:57.000Z"
        },
        {
            "id": 5031,
            "username": "Rapid_API",
            "tweet_id": "1605546358848593920",
            "tweet_text": "3\ufe0f\u20e3 Partner APIs\n\nPartner APIs are exposed to and used by strategic business partners. \n\nThey are not available to the public and require specific authorization to access them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605546346261479424",
            "tweet_type": "Others",
            "created_at": "2022-12-21T12:50:56.000Z"
        },
        {
            "id": 5032,
            "username": "Rapid_API",
            "tweet_id": "1605546354608054272",
            "tweet_text": "2\ufe0f\u20e3 Public APIs\n\nPublic APIs are accessible to all developers and other users. \n\nThey are also called external APIs because external or third-party developers can access them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605546346261479424",
            "tweet_type": "Others",
            "created_at": "2022-12-21T12:50:55.000Z"
        },
        {
            "id": 5033,
            "username": "Rapid_API",
            "tweet_id": "1605546350619381760",
            "tweet_text": "1\ufe0f\u20e3 Internal APIs\n\nAlso called private APIs, they are only accessible by internal systems and are hidden from external users. \n\nOnly internal developers can access these APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605546346261479424",
            "tweet_type": "Others",
            "created_at": "2022-12-21T12:50:54.000Z"
        },
        {
            "id": 5034,
            "username": "Rapid_API",
            "tweet_id": "1605546346261479424",
            "tweet_text": "Different API types in terms of access\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605546346261479424",
            "tweet_type": "API tips",
            "created_at": "2022-12-21T12:50:53.000Z"
        },
        {
            "id": 5035,
            "username": "Rapid_API",
            "tweet_id": "1605369083876237313",
            "tweet_text": "Thanks for reading!\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:30.000Z"
        },
        {
            "id": 5036,
            "username": "Rapid_API",
            "tweet_id": "1605369078851534848",
            "tweet_text": "9\ufe0f\u20e3 API rate limiting\n\nThis technique controls the rate at which API requests are processed to prevent the overuse of resources or abuse of the API. \n\nRate limiting is often used to ensure that the API remains available and responsive to all users.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:29.000Z"
        },
        {
            "id": 5037,
            "username": "Rapid_API",
            "tweet_id": "1605369074644566017",
            "tweet_text": "8\ufe0f\u20e3 API key\n\nThis is a unique identifier used to authenticate requests to an API. \n\nAPI keys are often used to track and control access to an API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:28.000Z"
        },
        {
            "id": 5038,
            "username": "Rapid_API",
            "tweet_id": "1605369070462828546",
            "tweet_text": "7\ufe0f\u20e3 SDK\n\nThis stands for Software Development Kit, and it is a set of tools and libraries that developers can use to build applications that integrate with a particular API.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:27.000Z"
        },
        {
            "id": 5039,
            "username": "Rapid_API",
            "tweet_id": "1605369066293796864",
            "tweet_text": "6\ufe0f\u20e3 OAuth: \n\nThis is an open standard for authorization that allows users to access resources on behalf of a resource owner securely. \n\nOAuth is often used to authenticate users and authorize access to APIs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:26.000Z"
        },
        {
            "id": 5040,
            "username": "Rapid_API",
            "tweet_id": "1605369062074327040",
            "tweet_text": "5\ufe0f\u20e3 REST\n\nThis stands for Representational State Transfer, and it is an architectural style for building APIs. \n\nRESTful APIs use HTTP methods (such as GET, POST, and DELETE) to perform operations on resources.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:25.000Z"
        },
        {
            "id": 5041,
            "username": "Rapid_API",
            "tweet_id": "1605369057896701952",
            "tweet_text": "4\ufe0f\u20e3 JSON\n\nThis stands for JavaScript Object Notation, and it is a standard data format used for exchanging data between a server and a web application.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:24.000Z"
        },
        {
            "id": 5042,
            "username": "Rapid_API",
            "tweet_id": "1605369053698220032",
            "tweet_text": "3\ufe0f\u20e3 Response\n\nThis is the message sent by the server in response to a request from the client.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:23.000Z"
        },
        {
            "id": 5043,
            "username": "Rapid_API",
            "tweet_id": "1605369049478725633",
            "tweet_text": "2\ufe0f\u20e3 Request\n\nThis is a message sent by the client to the server to ask for data or information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:22.000Z"
        },
        {
            "id": 5044,
            "username": "Rapid_API",
            "tweet_id": "1605369045309706240",
            "tweet_text": "1\ufe0f\u20e3 Endpoint\n\nThis is the URL of an API that specifies where the API is located and how it can be accessed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:21.000Z"
        },
        {
            "id": 5045,
            "username": "Rapid_API",
            "tweet_id": "1605369041098514435",
            "tweet_text": "API-related terms you should know about\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369041098514435",
            "tweet_type": "API tips",
            "created_at": "2022-12-21T01:06:20.000Z"
        },
        {
            "id": 5046,
            "username": "Rapid_API",
            "tweet_id": "1605201120476930049",
            "tweet_text": "Thanks for reading!\n\nFollow us @Rapid_API for more exclusive content. \ud83d\udc19\ud83d\udc99",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605201095516721152",
            "tweet_type": "Others",
            "created_at": "2022-12-20T13:59:04.000Z"
        },
        {
            "id": 5047,
            "username": "Rapid_API",
            "tweet_id": "1605201115368366080",
            "tweet_text": "4\ufe0f\u20e3 jQuery Get\n\nIf you're still using jQuery, can it be a legacy system or a new project here is an example of GET request made in JQuery. https://t.co/SAJNK6YTG3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbR4wdXEAM81jB.jpg\"]",
            "tweet_conversation_id": "1605201095516721152",
            "tweet_type": "Others",
            "created_at": "2022-12-20T13:59:03.000Z"
        },
        {
            "id": 5048,
            "username": "Rapid_API",
            "tweet_id": "1605201110180020224",
            "tweet_text": "3\ufe0f\u20e3 Axios\n\nAxios is a promise-based HTTP client for the browser and Node.js. \n\nAxios can be used to retrieve data from a server, post data to a server, update data on a server, and much more. \n\nIt makes asynchronous HTTP requests. https://t.co/z8zUgOeoJ0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbR4Z6XgAcFbW7.jpg\"]",
            "tweet_conversation_id": "1605201095516721152",
            "tweet_type": "Others",
            "created_at": "2022-12-20T13:59:02.000Z"
        },
        {
            "id": 5049,
            "username": "Rapid_API",
            "tweet_id": "1605201105046102017",
            "tweet_text": "2\ufe0f\u20e3 Fetch function\n\nFetch is an API in JavaScript that allows you to make network requests similar to XMLHttpRequest (XHR). \n\nIt is much easier to use than XHR and has a more powerful feature set. https://t.co/PrH5Oo3wCU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbR4CYWIAEqC7p.jpg\"]",
            "tweet_conversation_id": "1605201095516721152",
            "tweet_type": "Others",
            "created_at": "2022-12-20T13:59:01.000Z"
        },
        {
            "id": 5050,
            "username": "Rapid_API",
            "tweet_id": "1605201099446689792",
            "tweet_text": "1\ufe0f\u20e3 XMLHttpRequest\n\nXMLHttpRequest (XHR) is an API available to web browsers that provides methods for transferring data between a client and a server. https://t.co/zAf9TNjm7z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbR3Y-XkAAoyl3.jpg\"]",
            "tweet_conversation_id": "1605201095516721152",
            "tweet_type": "Others",
            "created_at": "2022-12-20T13:58:59.000Z"
        },
        {
            "id": 5051,
            "username": "Rapid_API",
            "tweet_id": "1605201095516721152",
            "tweet_text": "4 ways to make an API request from JavaScript\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605201095516721152",
            "tweet_type": "API tips",
            "created_at": "2022-12-20T13:58:59.000Z"
        },
        {
            "id": 5052,
            "username": "driscollis",
            "tweet_id": "1606496385867472896",
            "tweet_text": "My #Python Countdown to Christmas is happening NOW!\n\nIt will finish tomorrow when I give away over 400 MORE eBooks! \ud83d\udc0d\ud83c\udf85\ud83c\udf84\n\nMerry Christmas! https://t.co/68CQhthRAN",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FktCtkLWIAAjdJZ.mp4\"]",
            "tweet_conversation_id": "1606496385867472896",
            "tweet_type": "Python tips",
            "created_at": "2022-12-24T03:46:00.000Z"
        },
        {
            "id": 5053,
            "username": "driscollis",
            "tweet_id": "1606449816384462849",
            "tweet_text": "On the 8th day of my Countdown to Christmas, I am giving away 100 copies of my latest book, The Python Quiz Book!\n\nThis book is in early release. You'll get the full version in March 2023\n\nGet the last 50 FREE copies now:\n\nhttps://t.co/jWmVPiKR95",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606449816384462849",
            "tweet_type": "Others",
            "created_at": "2022-12-24T00:40:57.000Z"
        },
        {
            "id": 5054,
            "username": "driscollis",
            "tweet_id": "1606393653995479040",
            "tweet_text": "Thanks for checking out my thread on the many wonderful #Python \ud83d\udc0d packages that are out there.\n\nYou can find many, many more on the Python Package Index:\n\nhttps://t.co/1h3VDvvhpE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:47.000Z"
        },
        {
            "id": 5055,
            "username": "driscollis",
            "tweet_id": "1606393649876590592",
            "tweet_text": "Need to do data visualization with #Python? You have many choices:\n\n\ud83d\udcca Matplotlib\n\ud83c\udf0a Seaborn\n\ud83d\udc0d Plotly\n\ud83c\udf08 Bokeh\n\ud83d\udca4 Altair\n\u26f3 HoloViews\n\nAnd more - https://t.co/5ANBOfoyKL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:46.000Z"
        },
        {
            "id": 5056,
            "username": "driscollis",
            "tweet_id": "1606393645795614736",
            "tweet_text": "#Python is HUGE in data science. Here are just a handful of popular packages:\n\n\ud83d\udc3c Pandas\n\ud83d\udd2c SciPy\n\ud83d\udd25 PyTorch\n\ud83d\udcca Matplotlib\n\ud83d\udc0d Theano\n\ud83e\udd16 Tensorflow\n\ud83d\udda5\ufe0f OpenCV\n\u269b\ufe0f Scikit-Learn\n\ud83d\ude80 Keras\n\u2795 NumPy\n\nand many others!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:45.000Z"
        },
        {
            "id": 5057,
            "username": "driscollis",
            "tweet_id": "1606393641651544065",
            "tweet_text": "#Python itself lets you work with common file types using the following modules:\n\n\ud83d\udc0d json\n\ud83d\udc0d ziplib\n\ud83d\udc0d tarlib\n\ud83d\udc0d xml\n\ud83d\udc0d csv\n\ud83d\udc0d text files via open()",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:44.000Z"
        },
        {
            "id": 5058,
            "username": "driscollis",
            "tweet_id": "1606393637591556110",
            "tweet_text": "Need to work with popular file types in #Python? Check out the following packages:\n\n\ud83d\udc0d OpenPyXL - Excel\n\ud83d\udc0d lxml - XML\n\ud83d\udc0d ReportLab or borb - PDF creation\n\ud83d\udc0d pdfrw / PyPDF2 - PDF manipulation\n\ud83d\udc3c Pandas - CSV and Excel \n\nand more!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:43.000Z"
        },
        {
            "id": 5059,
            "username": "driscollis",
            "tweet_id": "1606393633497825280",
            "tweet_text": "#Python is used for Automation often. You can use the language itself for a lot of tasks or you can use one of these packages:\n\n\ud83d\udc0d Selenium - Web testing automation\n\ud83e\udd16 @robotframework\n\ud83d\ude80 pywinauto\n\ud83c\udf3f Lettuce\n\ud83d\udc36 Behave\n\ud83d\udc0d Requests\n\nand more!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:42.000Z"
        },
        {
            "id": 5060,
            "username": "driscollis",
            "tweet_id": "1606393629286617088",
            "tweet_text": "There are lots of #Python web frameworks to choose from:\n\n\ud83d\udc0d Django @djangoproject\n\ud83c\udf7e Flask\n\u23e9 @FastAPI\n\ud83d\udd25 Pylons\n\ud83d\ude80 Bottle\n\ud83c\udf52 CherryPy\n\u2699\ufe0f TurboGears\n\u26a1 Nagare\n\nand lots more!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:41.000Z"
        },
        {
            "id": 5061,
            "username": "driscollis",
            "tweet_id": "1606393625058975753",
            "tweet_text": "#Python also has a couple of GUI frameworks for mobile development (i.e. iOS and Android):\n\n\ud83d\udd25 Kivy @kivyframework\n\ud83d\udc0d Toga from @PyBeeWare\n\nI have heard PyQt also supports mobile, but haven't been able to verify it",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:40.000Z"
        },
        {
            "id": 5062,
            "username": "driscollis",
            "tweet_id": "1606393620898226185",
            "tweet_text": "Python has lots of great cross-platform GUI packages:\n\n\ud83d\udc0d PySimpleGUI @PySimpleGUI\n\ud83d\udc0d PyQt / PySide\n\ud83d\udc0d wxPython\n\ud83d\udc0d Tkinter\n\ud83d\udc0d @DearPyGui\n\ud83d\udc0d EasyGUI",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Others",
            "created_at": "2022-12-23T20:57:39.000Z"
        },
        {
            "id": 5063,
            "username": "driscollis",
            "tweet_id": "1606393616808775681",
            "tweet_text": "#Python has TONS of great packages and frameworks.\n\nIn this thread, I am going to highlight just a few of the THOUSANDS that are available to you on https://t.co/1h3VDvvhpE\n\n\ud83d\udc0d\ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606393616808775681",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T20:57:38.000Z"
        },
        {
            "id": 5064,
            "username": "driscollis",
            "tweet_id": "1606326738228748289",
            "tweet_text": "Did you know you can get disk usage with #Python too? One of the nicest ways to get this information is by using the `psutil` package, which you need to install.\n\nHere are to find the total, used, and free amounts of space on your hard drive! \ud83d\udc0d\ud83d\udd25 https://t.co/k6zv0Zn18r",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkrRp7CX0AY2yiD.jpg\"]",
            "tweet_conversation_id": "1606326738228748289",
            "tweet_type": "Python tips",
            "created_at": "2022-12-23T16:31:53.000Z"
        },
        {
            "id": 5065,
            "username": "driscollis",
            "tweet_id": "1606325450979975180",
            "tweet_text": "It's a cold day here in Iowa.\n\nAlthough it was colder yesterday https://t.co/yZvMKozGzF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkrQfDlXkAIv_oL.jpg\"]",
            "tweet_conversation_id": "1606325450979975180",
            "tweet_type": "Others",
            "created_at": "2022-12-23T16:26:46.000Z"
        },
        {
            "id": 5066,
            "username": "driscollis",
            "tweet_id": "1606268635655376897",
            "tweet_text": "On the 8th day of my Countdown to Christmas, I am giving away 100 copies of my latest book, The Python Quiz Book!\n\nThis book is in early release. You'll get the full version in March 2023\n\nGet 50 FREE copies now:\n\nhttps://t.co/eodp2TgCLw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606268635655376897",
            "tweet_type": "Others",
            "created_at": "2022-12-23T12:41:00.000Z"
        },
        {
            "id": 5067,
            "username": "driscollis",
            "tweet_id": "1606043634801037325",
            "tweet_text": "On the 7th day of my Countdown to Christmas, I'm giving away 100 copies of Automating Excel with Python!\n\nI already gave away the first 50 copies. Here are your last 50 chances:\n\nhttps://t.co/uMv7YZGI8L",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606043634801037325",
            "tweet_type": "Others",
            "created_at": "2022-12-22T21:46:56.000Z"
        },
        {
            "id": 5068,
            "username": "driscollis",
            "tweet_id": "1605998355963854875",
            "tweet_text": "Follow me for more fun #Python code examples!\n\nOr buy my book on Image processing with Python and get creative!\n\nhttps://t.co/0Am2EsF2pw",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605998347084513320",
            "tweet_type": "Python tips",
            "created_at": "2022-12-22T18:47:00.000Z"
        },
        {
            "id": 5069,
            "username": "driscollis",
            "tweet_id": "1605998351626944513",
            "tweet_text": "Here is the original butterfly image and then the inverted version,\n\n#Python is amazing! https://t.co/K02LxqrwMM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkmm-nEXgAAIcf7.jpg\", \"https://pbs.twimg.com/media/Fkmm--SWQBQTzvj.jpg\"]",
            "tweet_conversation_id": "1605998347084513320",
            "tweet_type": "Python tips",
            "created_at": "2022-12-22T18:46:59.000Z"
        },
        {
            "id": 5070,
            "username": "driscollis",
            "tweet_id": "1605998347084513320",
            "tweet_text": "You can invert an image with #Python too. What does inverting do though? It creates a negative of the image, that's what!\n\nYou can do this with 4 lines of code using the #Pillow package: https://t.co/fOcWO8JONP",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkmm-XGXgAAVMcr.jpg\"]",
            "tweet_conversation_id": "1605998347084513320",
            "tweet_type": "Python tips",
            "created_at": "2022-12-22T18:46:58.000Z"
        },
        {
            "id": 5071,
            "username": "driscollis",
            "tweet_id": "1605862436418060288",
            "tweet_text": "On the 7th day of my Countdown to Christmas I'm giving away 100 copies of Automating Excel with Python!\n\nHere's a link for the first 50 copies:\n\nhttps://t.co/iwiP9Cow1M",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605862436418060288",
            "tweet_type": "Others",
            "created_at": "2022-12-22T09:46:54.000Z"
        },
        {
            "id": 5072,
            "username": "driscollis",
            "tweet_id": "1605733595435474945",
            "tweet_text": "Need to add a watermark to a PDF with #Python? \ud83d\udc0d\ud83d\udd25\n\nYou can do that with pdfrw!\n\nHere's an example: https://t.co/Ul9wWZPxHT",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fki2MZXWYAADbq4.jpg\"]",
            "tweet_conversation_id": "1605733595435474945",
            "tweet_type": "Python tips",
            "created_at": "2022-12-22T01:14:56.000Z"
        },
        {
            "id": 5073,
            "username": "driscollis",
            "tweet_id": "1605691054870634496",
            "tweet_text": "Need to resave a JPG file with different compression settings for the web or email? \n\nYou can do that with #Python \ud83d\udc0d and #Pillow in 3\ufe0f\u20e3 lines of code! https://t.co/BUOCrrQgFv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkiPgQsXoA0igOm.jpg\"]",
            "tweet_conversation_id": "1605691054870634496",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T22:25:54.000Z"
        },
        {
            "id": 5074,
            "username": "driscollis",
            "tweet_id": "1605633172552679438",
            "tweet_text": "On the 6th day of my Countdown to Christmas, I am going to give away 100 copies of Pillow: Image Processing with Python\n\nDo you want to learn how to work with images with #Python?\n\nNow's your chance! \ud83d\udc0d \ud83d\udcf7\n\nHere are the last 50 copies:\n\nhttps://t.co/ApzbuTp5Yd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605633172552679438",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T18:35:54.000Z"
        },
        {
            "id": 5075,
            "username": "driscollis",
            "tweet_id": "1605524529052233729",
            "tweet_text": "There are even more neat things you can do with #Python's `contextlib` module. Check it out when you get a chance!\n\nI hope you enjoyed this thread. Follow me for more interesting Python facts!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:24:11.000Z"
        },
        {
            "id": 5076,
            "username": "driscollis",
            "tweet_id": "1605524524262461442",
            "tweet_text": "Do you ever need to redirect stdout or stderr in #Python? Then you should check out `contextlib.redirect_stdout` or `contextlib.redirect_stderr` https://t.co/DbNI0vuyfL",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf4A4XUEAE7Anw.jpg\"]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:24:10.000Z"
        },
        {
            "id": 5077,
            "username": "driscollis",
            "tweet_id": "1605524519900291073",
            "tweet_text": "There is also the super handy `contextlib.suppress` which you can use to suppress exceptions.\n\nIn the example on the left, I show what happens when you try to open a file that doesn't exist. It raises `FileNotFoundError`\n\nIf you run it with `suppress`, you can suppress that! https://t.co/OMhmmR3aUU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf4AUEX0AEQpBN.jpg\", \"https://pbs.twimg.com/media/Fkf4AhvUUAAzYxT.jpg\"]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:24:09.000Z"
        },
        {
            "id": 5078,
            "username": "driscollis",
            "tweet_id": "1605524515324411910",
            "tweet_text": "The `contextlib` module has a handy `closing` class that you can use directly instead of as a decorator\n\nIn the example below, you use `closing` to open a URL, read the text and then close the handle to the web page https://t.co/Y5mEvGdb8z",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf3__1XkAE-vwy.jpg\"]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:24:08.000Z"
        },
        {
            "id": 5079,
            "username": "driscollis",
            "tweet_id": "1605524510396088320",
            "tweet_text": "When you exit out of the `with` context block, control returns back to the function and the code following the `yield` statement executes.\n\nThis is where you close the file in your `finally` statement and you print out an error message if an exception is raised. https://t.co/0oqT13zYjh",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf3_kgVQAAAuhZ.jpg\"]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Others",
            "created_at": "2022-12-21T11:24:07.000Z"
        },
        {
            "id": 5080,
            "username": "driscollis",
            "tweet_id": "1605524505618685957",
            "tweet_text": "Let's look at an example we you write your own context manager for opening and closing files with #Python\n\nTo make this work, you create a function and decorate it with `contextmanager` from the `contextlib` module.\n\nYou use `yield` to yield the file obj to the `with` statement https://t.co/uwaNzqR6D5",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkf3_KzXoAABLbc.jpg\"]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:24:05.000Z"
        },
        {
            "id": 5081,
            "username": "driscollis",
            "tweet_id": "1605524501571244034",
            "tweet_text": "#Python's `contextlib` module is chock-full of useful utilities. Check out its documentation if you don't believe me:\n\nhttps://t.co/ADbx9QGyea",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:24:05.000Z"
        },
        {
            "id": 5082,
            "username": "driscollis",
            "tweet_id": "1605524497452470272",
            "tweet_text": "If you'd like to review how to create your own context managers in #Python, check out my previous thread:\n\nhttps://t.co/IcPfEDlL3y",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:24:04.000Z"
        },
        {
            "id": 5083,
            "username": "driscollis",
            "tweet_id": "1605524493404979202",
            "tweet_text": "The other day, I talked about creating your own custom context managers in #Python \ud83d\udc0d\n\nBut Python has an easier way to create them by using the `contextlib` module!\n\nJoin me for a mini-thread!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605524493404979202",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T11:24:03.000Z"
        },
        {
            "id": 5084,
            "username": "driscollis",
            "tweet_id": "1605454995696279552",
            "tweet_text": "On the 6th day of my Countdown to Christmas, I am going to give away 100 copies of Pillow: Image Processing with Python\n\nDo you want to learn how to work with images with #Python?\n\nNow's your chance! \ud83d\udc0d \ud83d\udcf7\n\nHere are the first 50 copies:\n\nhttps://t.co/E3WVBmNmyy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605454995696279552",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T06:47:53.000Z"
        },
        {
            "id": 5085,
            "username": "driscollis",
            "tweet_id": "1605369218639314946",
            "tweet_text": "Thanks for checking out my mini-thread on redirecting stdout with #Python.\n\nFollow me for more great tips on tutorials on Python!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369198590443521",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T01:07:02.000Z"
        },
        {
            "id": 5086,
            "username": "driscollis",
            "tweet_id": "1605369212775665664",
            "tweet_text": "3\ufe0f\u20e3 #Python's `contextlib` module comes with a `redirect_stdout` function context manager built-in \ud83d\udc0d\ud83d\udd25\n\nHere's how you can use it to simplify your code even further! https://t.co/pKTf2sTUgH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkdqxuxWIAc8fPM.jpg\"]",
            "tweet_conversation_id": "1605369198590443521",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T01:07:01.000Z"
        },
        {
            "id": 5087,
            "username": "driscollis",
            "tweet_id": "1605369207813808128",
            "tweet_text": "2\ufe0f\u20e3 Use a context manager!\n\nHere you use `contextlib.contextmanager` to automatically redirect stdout and then revert the redirection.\n\nThis is a nice way to decorate functions that you want to write to a file without modifying all of them. https://t.co/rGnCL6TvEd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkdqxY3X0AA3VaQ.jpg\"]",
            "tweet_conversation_id": "1605369198590443521",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:07:00.000Z"
        },
        {
            "id": 5088,
            "username": "driscollis",
            "tweet_id": "1605369203166482435",
            "tweet_text": "1\ufe0f\u20e3 Re-assign `sys.stdout` to a file handle\n\nIn this example, you open a file and reassign `sys.stdout` to that file handle. \n\nNow when you call the `print()` function, it writes to a file instead of stdout!\n\nDon't forget to revert your changes at the end! https://t.co/CUJTkajn6z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkdqxBdXoAIymJc.jpg\"]",
            "tweet_conversation_id": "1605369198590443521",
            "tweet_type": "Others",
            "created_at": "2022-12-21T01:06:59.000Z"
        },
        {
            "id": 5089,
            "username": "driscollis",
            "tweet_id": "1605369198590443521",
            "tweet_text": "Do you ever need to redirect stdout with #Python?\n\nIn this mini-thread, I will show you 3\ufe0f\u20e3 different methods to redirect stdout!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605369198590443521",
            "tweet_type": "Python tips",
            "created_at": "2022-12-21T01:06:57.000Z"
        },
        {
            "id": 5090,
            "username": "driscollis",
            "tweet_id": "1605330676840005632",
            "tweet_text": "The #PyDevOfTheWeek is Robert Smallshire.\n\nLearn about how Robert creates amazing #Python video tutorials for @pluralsight and much more!\n\nhttps://t.co/50tJMmcaY6 @robsmallshire",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605330676840005632",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T22:33:53.000Z"
        },
        {
            "id": 5091,
            "username": "driscollis",
            "tweet_id": "1605311223364468736",
            "tweet_text": "The Countdown to Christmas #Python giveaway is going all week long!\n\nDon't forget to check it out and follow me if you'd like a chance to snag a free Python eBook or two\n\nhttps://t.co/mJoXXRPJXH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605311223364468736",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T21:16:35.000Z"
        },
        {
            "id": 5092,
            "username": "driscollis",
            "tweet_id": "1605298211052310534",
            "tweet_text": "On the 5th day of my Countdown to Christmas, I am giving away 100 copies of my Creating GUI Applications with wxPython ebook  \ud83d\udc0d\ud83c\udf84\n\nHere is a link that makes the last 50 copies free:\n\nhttps://t.co/rhx25QHFnA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605298211052310534",
            "tweet_type": "Others",
            "created_at": "2022-12-20T20:24:53.000Z"
        },
        {
            "id": 5093,
            "username": "driscollis",
            "tweet_id": "1605289123249528832",
            "tweet_text": "Did you miss this talk / webinar I did for @jetbrains earlier this year?\n\nCheck it out and learn about #Python's amazing functools module!\n\nhttps://t.co/k5FPQdXXas",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605289123249528832",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T19:48:46.000Z"
        },
        {
            "id": 5094,
            "username": "driscollis",
            "tweet_id": "1605276613813354496",
            "tweet_text": "I hope you enjoyed this quick review of #Python context managers.\n\nFollow me for more great content on Python!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T18:59:03.000Z"
        },
        {
            "id": 5095,
            "username": "driscollis",
            "tweet_id": "1605276609568800768",
            "tweet_text": "I also wrote up a thread on using #Python's awesome `contextlib` module which makes creating context managers even easier:\n\nhttps://t.co/fYpGk8FhPu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T18:59:02.000Z"
        },
        {
            "id": 5096,
            "username": "driscollis",
            "tweet_id": "1605276605189967877",
            "tweet_text": "When you drop out of the `with` statement's code block, the `__exit__()` method is called.\n\nHere is where you put your cleanup code. You can catch errors here too and handle them as you see fit.\n\nSome devs will log the error and then re-raise it, for example https://t.co/31AVQucJd5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkcWi2RX0A0k1zh.jpg\"]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Others",
            "created_at": "2022-12-20T18:59:01.000Z"
        },
        {
            "id": 5097,
            "username": "driscollis",
            "tweet_id": "1605276600676896783",
            "tweet_text": "When you use the `with` statement, it will take the return value from the `__enter__` method. You can assign that to a value or throw it away.\n\nIn the following example, you turn `self.conn` into `data`\n\nwith DataConn() as data:\n    pass https://t.co/qbvDW73beK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkcWin8X0A46OR7.jpg\"]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Others",
            "created_at": "2022-12-20T18:59:00.000Z"
        },
        {
            "id": 5098,
            "username": "driscollis",
            "tweet_id": "1605276595450793988",
            "tweet_text": "While there are many things in Python that are built-in context managers, you can also write your own!\n\nAll you need to do is create a class and override the following methods:\n\n\ud83d\udc0d __enter__\n\ud83d\udc0d __exit__ https://t.co/vG8njVoOiy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkcWiaYX0BUTaH2.jpg\"]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Others",
            "created_at": "2022-12-20T18:58:59.000Z"
        },
        {
            "id": 5099,
            "username": "driscollis",
            "tweet_id": "1605276591336181770",
            "tweet_text": "The beauty of a context manager is that they allow you to do some setup and teardown automatically.\n\nThe downside is that is abstracted away and can sometimes make the code less obvious when debugging",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Others",
            "created_at": "2022-12-20T18:58:58.000Z"
        },
        {
            "id": 5100,
            "username": "driscollis",
            "tweet_id": "1605276587057991686",
            "tweet_text": "The `with` statement, which is the normal way for working with context managers, was added back in Python 2.5!\n\nHere is a pretty common example of using a context manager: https://t.co/nRIUEohjj8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkcWiPPX0A44DIz.jpg\"]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Others",
            "created_at": "2022-12-20T18:58:57.000Z"
        },
        {
            "id": 5101,
            "username": "driscollis",
            "tweet_id": "1605276583069159424",
            "tweet_text": "#Python has had the concept of context managers for a loooong time!\n\nLet's talk about context managers again!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605276583069159424",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T18:58:56.000Z"
        },
        {
            "id": 5102,
            "username": "driscollis",
            "tweet_id": "1605224748434296835",
            "tweet_text": "What did you do with #Python last week?\n\nI think I prepped for my Python eBook giveaway and got a few more Python quizzes written for my latest book!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605224748434296835",
            "tweet_type": "Python tips",
            "created_at": "2022-12-20T15:32:58.000Z"
        },
        {
            "id": 5103,
            "username": "driscollis",
            "tweet_id": "1605117032365793289",
            "tweet_text": "On the 5th day of my Countdown to Christmas, I am giving away 100 copies of my Creating GUI Applications with wxPython ebook  \ud83d\udc0d\ud83c\udf84\n\nHere is a link that makes 50 copies free. I'll release the next 50 later today!\n\nhttps://t.co/QK11r0XNCC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605117032365793289",
            "tweet_type": "Others",
            "created_at": "2022-12-20T08:24:56.000Z"
        },
        {
            "id": 5104,
            "username": "driscollis",
            "tweet_id": "1604997729314344960",
            "tweet_text": "Today I am giving away 100 copies of Jupyter Notebook 101  eBook \ud83d\udc0d\ud83c\udf84\n\nIf you missed the first batch, here's your 2nd chance\n\nThe following link is good for the last 50 copies:\n\nhttps://t.co/NadsVP3iVk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604997729314344960",
            "tweet_type": "Others",
            "created_at": "2022-12-20T00:30:52.000Z"
        },
        {
            "id": 5105,
            "username": "driscollis",
            "tweet_id": "1604817926334332928",
            "tweet_text": "On the 4th day of my Countdown to Christmas, I am giving away 100 copies of Jupyter Notebook 101  \ud83d\udc0d\ud83c\udf84\n\nThe following link is good for the first 50 copies:\n\nhttps://t.co/xVieB6l9ud",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604817926334332928",
            "tweet_type": "Others",
            "created_at": "2022-12-19T12:36:24.000Z"
        },
        {
            "id": 5106,
            "username": "driscollis",
            "tweet_id": "1604541233388552197",
            "tweet_text": "Now it's time for round 2\ufe0f\u20e3 of my Countdown to Christmas for a chance to get a free copy of ReportLab: PDF Processing with Python\n\nHere's a link for 50 MORE FREE copies! When the link is no longer free, the promo is over!  \ud83d\udc0d\ud83d\udd25\n\nhttps://t.co/wUqbRZnuy3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604541233388552197",
            "tweet_type": "Others",
            "created_at": "2022-12-18T18:16:55.000Z"
        },
        {
            "id": 5107,
            "username": "driscollis",
            "tweet_id": "1604366825239748609",
            "tweet_text": "On the third day of my Countdown to Christmas, you can start learning about creating and processing PDFs with #Python today\n\nHere's a link for 50 FREE copies! When the link is no longer free, the promo is over!\n\nhttps://t.co/bWXixShfaL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604366825239748609",
            "tweet_type": "Python tips",
            "created_at": "2022-12-18T06:43:53.000Z"
        },
        {
            "id": 5108,
            "username": "driscollis",
            "tweet_id": "1604177837539328002",
            "tweet_text": "I already gave away 50 copies of Python 201 - Intermediate Python for my countdown to Christmas sale \ud83d\udc0d\ud83c\udf84\n\nIf you missed the first batch, here's a new link with another 50 FREE:\n\nhttps://t.co/ZvFfzW3jZL",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604177837539328002",
            "tweet_type": "Others",
            "created_at": "2022-12-17T18:12:55.000Z"
        },
        {
            "id": 5109,
            "username": "driscollis",
            "tweet_id": "1604164896806928385",
            "tweet_text": "What new #Python module or package did you try this week?\n\n\ud83d\udc0d\ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604164896806928385",
            "tweet_type": "Python tips",
            "created_at": "2022-12-17T17:21:29.000Z"
        },
        {
            "id": 5110,
            "username": "driscollis",
            "tweet_id": "1604001222591127553",
            "tweet_text": "On the second day of my Christmas Countdown, I am making 100 copies of Python 201 - Intermediate Python FREE\n\nThe first 50 can be claimed using the following link. If the link doesn't work for you, then all the free copies are gone!\n\nhttps://t.co/CbXe6bbdtd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604001222591127553",
            "tweet_type": "Others",
            "created_at": "2022-12-17T06:31:07.000Z"
        },
        {
            "id": 5111,
            "username": "driscollis",
            "tweet_id": "1603943068431966210",
            "tweet_text": "I hope you enjoyed learning about #Python's amazing classmethod decorator with me today.\n\nFollow me if you'd like to learn more about the Python programming language!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603943047124885504",
            "tweet_type": "Python tips",
            "created_at": "2022-12-17T02:40:01.000Z"
        },
        {
            "id": 5112,
            "username": "driscollis",
            "tweet_id": "1603943064082464768",
            "tweet_text": "You can also check out the #Python documentation for `classmethod`:\n\nhttps://t.co/2RDvIsUyBl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603943047124885504",
            "tweet_type": "Python tips",
            "created_at": "2022-12-17T02:40:00.000Z"
        },
        {
            "id": 5113,
            "username": "driscollis",
            "tweet_id": "1603943060144095232",
            "tweet_text": "There is a good explanation of what a `classmethod` is used for and why you might use it here:\n\nhttps://t.co/AsvbbqF0HG",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603943047124885504",
            "tweet_type": "Others",
            "created_at": "2022-12-17T02:40:00.000Z"
        },
        {
            "id": 5114,
            "username": "driscollis",
            "tweet_id": "1603943055693946880",
            "tweet_text": "To use `classmethod()`, you must make the method accept a class object as its first argument, which is traditionally called `cls`\n\nNow you can use the class, Animal, directly to call the `walk()` method.\n\nYou can abuse it to make an instance work too https://t.co/tYXSMoH8GI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkJZs0CXEAE4QSW.jpg\"]",
            "tweet_conversation_id": "1603943047124885504",
            "tweet_type": "Others",
            "created_at": "2022-12-17T02:39:58.000Z"
        },
        {
            "id": 5115,
            "username": "driscollis",
            "tweet_id": "1603943051189276673",
            "tweet_text": "The `classmethod` decorator will transform a regular method into a class method.\n\nLet's look at a regular class that is NOT using `classmethod`\n\nYou can see in the following that if you try to call walk() with the class instead of with an instance, you will get an error https://t.co/3psNVZSPUP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkJZsnLWQAIlCkD.jpg\"]",
            "tweet_conversation_id": "1603943047124885504",
            "tweet_type": "Others",
            "created_at": "2022-12-17T02:39:57.000Z"
        },
        {
            "id": 5116,
            "username": "driscollis",
            "tweet_id": "1603943047124885504",
            "tweet_text": "#Python includes a couple of decorators in their built-ins. One of those decorators is called `classmethod`\n\nCome along with me and learn what `classmethod` is all about!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603943047124885504",
            "tweet_type": "Python tips",
            "created_at": "2022-12-17T02:39:56.000Z"
        },
        {
            "id": 5117,
            "username": "driscollis",
            "tweet_id": "1603891789043466240",
            "tweet_text": "Van Patten Mountain Camp ruins https://t.co/W0UZbnewTV",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkIrD6FVEAAJ2So.jpg\", \"https://pbs.twimg.com/media/FkIrEnEUYAAYqkK.jpg\", \"https://pbs.twimg.com/media/FkIrFPwUcAAsxLl.jpg\"]",
            "tweet_conversation_id": "1603891789043466240",
            "tweet_type": "Others",
            "created_at": "2022-12-16T23:16:16.000Z"
        },
        {
            "id": 5118,
            "username": "driscollis",
            "tweet_id": "1603875315985571864",
            "tweet_text": "Organ mountain range in New Mexico https://t.co/9cRh4jhkfN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkIb-aqWYAEjKom.jpg\", \"https://pbs.twimg.com/media/FkIcEMsWYAw149d.jpg\", \"https://pbs.twimg.com/media/FkIcFvOWYBAA9Dv.jpg\"]",
            "tweet_conversation_id": "1603875315985571864",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:10:48.000Z"
        },
        {
            "id": 5119,
            "username": "driscollis",
            "tweet_id": "1603821697542389760",
            "tweet_text": "We are having a slow start. Only 200 copies given away so far \n\nKeep retweeting this and sharing it with your friends and learn some #Python \ud83d\udc0d\ud83d\udd25 https://t.co/WC3znPzu9r",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603821697542389760",
            "tweet_type": "Python tips",
            "created_at": "2022-12-16T18:37:44.000Z"
        },
        {
            "id": 5120,
            "username": "driscollis",
            "tweet_id": "1603748025863507968",
            "tweet_text": "My Christmas Sale starts today and goes until Christmas Day \ud83d\udc0d\ud83c\udf85\ud83c\udf84\n\nGet $10 off any of my #Python eBooks on @gumroad using the following code: https://t.co/ZeJEgOUbNP",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1602392295227129874/pu/vid/1280x720/tMaeAfppfymNxc54.mp4?tag=12\"]",
            "tweet_conversation_id": "1603748025863507968",
            "tweet_type": "Python tips",
            "created_at": "2022-12-16T13:45:00.000Z"
        },
        {
            "id": 5121,
            "username": "driscollis",
            "tweet_id": "1603691633308012544",
            "tweet_text": "Today I am starting my Countdown to Christmas sale where I will give away over 1000 #Python eBooks! \ud83d\udc0d\ud83d\udd25\n\nThe first book to go free is Python 101 - 2nd Edition which I have made completely FREE from now until Christmas Day\n\nHere's a link you can use:\n\nhttps://t.co/3g1XXo6Jb7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603691633308012544",
            "tweet_type": "Python tips",
            "created_at": "2022-12-16T10:00:55.000Z"
        },
        {
            "id": 5122,
            "username": "driscollis",
            "tweet_id": "1603505251323101184",
            "tweet_text": "Want to learn more about rotating logs with #Python?\n\nThen check out my tutorial @mousevspython here:\n\nhttps://t.co/401QFJY8TV",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603505234122252300",
            "tweet_type": "Python tips",
            "created_at": "2022-12-15T21:40:18.000Z"
        },
        {
            "id": 5123,
            "username": "driscollis",
            "tweet_id": "1603505246612889602",
            "tweet_text": "A timed rotating log in #Python requires the following information:\n\n\ud83d\udc0d when - seconds, hours, minutes, days, etc\n\ud83d\udc0d interval - The number of seconds, hours, minutes\n\ud83d\udc0d backupCount - The number of backup logs to keep\n\nTake interval * when to see when a new log is created https://t.co/FKoP22DquC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkDLgvxXkAMOyqe.jpg\"]",
            "tweet_conversation_id": "1603505234122252300",
            "tweet_type": "Python tips",
            "created_at": "2022-12-15T21:40:17.000Z"
        },
        {
            "id": 5124,
            "username": "driscollis",
            "tweet_id": "1603505242057986049",
            "tweet_text": "Rotating a log based on its file size can be accomplished with the `RotatingFileHandler` in #Python\n\nYou set the following two args:\n\n\ud83d\udc0d maxBytes - The number of bytes to reach before rotating\n\ud83d\udc0d backupCount - The number of backup logs to keep\n\nHere's an example: https://t.co/WN9RAQfIyJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkDLghrWQAAmmAA.jpg\"]",
            "tweet_conversation_id": "1603505234122252300",
            "tweet_type": "Python tips",
            "created_at": "2022-12-15T21:40:16.000Z"
        },
        {
            "id": 5125,
            "username": "driscollis",
            "tweet_id": "1603505238140395532",
            "tweet_text": "There are two types of rotated logs in #Python:\n\n\ud83d\udc0d Rotation based on log file size\n\ud83d\udc0d Rotation based on time\n\n\ud83e\uddf5\ud83d\udc47\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603505234122252300",
            "tweet_type": "Python tips",
            "created_at": "2022-12-15T21:40:15.000Z"
        },
        {
            "id": 5126,
            "username": "driscollis",
            "tweet_id": "1603505234122252300",
            "tweet_text": "Let's talk about how to rotate logs in #Python!\n\n\ud83e\uddf5\ud83d\udc47\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603505234122252300",
            "tweet_type": "Python tips",
            "created_at": "2022-12-15T21:40:14.000Z"
        },
        {
            "id": 5127,
            "username": "driscollis",
            "tweet_id": "1603314995906879488",
            "tweet_text": "PyWin32 (which works on 64-bit Windows) provides another way to get an application's version via its `win32com`  module\n\nHere's an example: https://t.co/LW5N6oKr4H",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkAefcnX0AA0tqU.jpg\"]",
            "tweet_conversation_id": "1603314995906879488",
            "tweet_type": "Others",
            "created_at": "2022-12-15T09:04:17.000Z"
        },
        {
            "id": 5128,
            "username": "driscollis",
            "tweet_id": "1603132977839570947",
            "tweet_text": "I hope you enjoyed learning about the `winsound` module.\n\nGive #Python's `winsound` a try and let me know what you come up with!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603132959867174912",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T21:01:01.000Z"
        },
        {
            "id": 5129,
            "username": "driscollis",
            "tweet_id": "1603132972894343168",
            "tweet_text": "`winsound.PlaySound()` is another fun function to play around with on Windows using #Python. https://t.co/QqNgvZYIcw",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj947juWAAAfyFt.jpg\"]",
            "tweet_conversation_id": "1603132959867174912",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T21:01:00.000Z"
        },
        {
            "id": 5130,
            "username": "driscollis",
            "tweet_id": "1603132968322703361",
            "tweet_text": "If you'd like to give `winsound` a try on your Windows machine, I would recommend trying to `Beep()` the speaker.\n\n`Beep()` takes in the frequency and the duration of the sound in milliseconds.\n\nThe code below beeps your system speaker at 3 different frequencies https://t.co/yie8z7pg8N",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj947WlX0AIbLv0.jpg\"]",
            "tweet_conversation_id": "1603132959867174912",
            "tweet_type": "Others",
            "created_at": "2022-12-14T21:00:59.000Z"
        },
        {
            "id": 5131,
            "username": "driscollis",
            "tweet_id": "1603132964157542400",
            "tweet_text": "#Python's `winsound` module is a sound-playing interface for Windows.\n\nHere's a link to the documentation:\n\nhttps://t.co/xYYAQAJvES",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603132959867174912",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T21:00:58.000Z"
        },
        {
            "id": 5132,
            "username": "driscollis",
            "tweet_id": "1603132959867174912",
            "tweet_text": "If you are a Windows user, #Python has a few special libraries just for you.\n\nOnce such module is `winsound`\n\nLet's learn more in this mini-thread!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603132959867174912",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T21:00:57.000Z"
        },
        {
            "id": 5133,
            "username": "driscollis",
            "tweet_id": "1603091431152930822",
            "tweet_text": "Want to start learning #Python this year? Give Teach Me Python a try! \ud83d\udc0d\ud83d\udd25\n\nYou can 25% off a subscription using the following coupon code: twentyfive\n\nhttps://t.co/coslkPfNDA",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603091431152930822",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T18:15:55.000Z"
        },
        {
            "id": 5134,
            "username": "driscollis",
            "tweet_id": "1603068771941470208",
            "tweet_text": "Did you know that you can use #pandas to get version info about #Python, its packages, the OS and more?\n\nYou can use the `show_versions()` function for that! \ud83d\udc0d\ud83d\udc3c\ud83d\udd25 https://t.co/k8H10Nne9F",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj8-jPNWAAQkpYe.jpg\"]",
            "tweet_conversation_id": "1603068771941470208",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T16:45:53.000Z"
        },
        {
            "id": 5135,
            "username": "driscollis",
            "tweet_id": "1603058953130229760",
            "tweet_text": "Only 2\u20e3 more days until my #Python Countdown to Christmas \ud83c\udf84 Sale / Giveaway starts!\n\n\ud83d\udc0d\ud83c\udf85\ud83c\udf84\ud83d\udc0d\ud83c\udf85\ud83c\udf84\ud83d\udc0d\ud83c\udf85\ud83c\udf84 https://t.co/OwBx1WpIqC",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/Fj81Ty0WYAEwtVf.mp4\"]",
            "tweet_conversation_id": "1603058953130229760",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T16:06:52.000Z"
        },
        {
            "id": 5136,
            "username": "driscollis",
            "tweet_id": "1603033596515815424",
            "tweet_text": "#Python (3.10+) Pop Quiz \ud83d\udc0d\u2753\n\nWhat is the value of NOT_FOUND at the end of this code?\n\nA) NameError\nB) None\nC) 200\nD) 0 https://t.co/eSBYJKkhPr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj8ejbxWIAA0wkQ.jpg\"]",
            "tweet_conversation_id": "1603033596515815424",
            "tweet_type": "Python tips",
            "created_at": "2022-12-14T14:26:06.000Z"
        },
        {
            "id": 5137,
            "username": "driscollis",
            "tweet_id": "1602858142211112961",
            "tweet_text": "Get early access The Python Quiz Book or The Python Quiz Course on Teach Me Python today\n\nStart learning about:\n\n\ud83d\udc0d Comprehensions\n\ud83d\udc0d f-strings\n\ud83d\udc0d Boolean math\n\ud83d\udc0d Generators\n\ud83d\udc0d Unpacking\n\ud83d\udc0d Lambdas\n\ud83d\udc0d Modulus operators\n\ud83d\udc0d Ternary expressions\n\nhttps://t.co/4bsu4aPqmm @TeachMePy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602858142211112961",
            "tweet_type": "Others",
            "created_at": "2022-12-14T02:48:55.000Z"
        },
        {
            "id": 5138,
            "username": "driscollis",
            "tweet_id": "1602773340493557761",
            "tweet_text": "Guido van Rossum wrote about Method Resolution Order in #Python in this great article if you'd like to dig deeper into that topic:\n\nhttps://t.co/gDpbmcHr2u",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602773330934775808",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T21:11:57.000Z"
        },
        {
            "id": 5139,
            "username": "driscollis",
            "tweet_id": "1602773335510683648",
            "tweet_text": "You'll note that when you print out `__mro__` (Method Resolution Order) for the `Liger` class, it mentions the classes in order from left to right:\n\n\ud83d\udc0d Liger\n\ud83d\udc0d Lion\n\ud83d\udc0d Tiger\n\ud83d\udc0d object\n\nThe `object` base class is inherited implicitly. All classes are based on it https://t.co/ml8lwTKMWb",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj4x2Y1X0AA3KOc.jpg\"]",
            "tweet_conversation_id": "1602773330934775808",
            "tweet_type": "Others",
            "created_at": "2022-12-13T21:11:55.000Z"
        },
        {
            "id": 5140,
            "username": "driscollis",
            "tweet_id": "1602773330934775808",
            "tweet_text": "What is multiple inheritance? The term, multiple inheritance, refers to a class that inherits from two or more other classes.\n\nYou can check what order Python uses to search for methods in its parent classes by printing out the `__mro__` attribute https://t.co/ZRRQLNrwmK",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj4x2MNXEAQmYwQ.jpg\"]",
            "tweet_conversation_id": "1602773330934775808",
            "tweet_type": "Others",
            "created_at": "2022-12-13T21:11:54.000Z"
        },
        {
            "id": 5141,
            "username": "driscollis",
            "tweet_id": "1602705853466943489",
            "tweet_text": "Which tools do you use for content creation?\n\nHere are some of mine:\n\n\ud83d\uddbc\ufe0f @canva for video and tweet art\n\ud83d\udcf9 @Camtasia for video recording\n\ud83d\udd25 @snappify_io for code screenshots\n\ud83d\udcd7 @sublimehq for writing\n\ud83d\udc0d @pythonide for #Python IDE\n\ud83e\udee7 @gumroad for selling content",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602705853466943489",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T16:43:46.000Z"
        },
        {
            "id": 5142,
            "username": "driscollis",
            "tweet_id": "1602684590728089600",
            "tweet_text": "Thanks for joining me in this thread on #Python exception handling!\n\nFollow me for more great content on the Python programming language! \ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:17.000Z"
        },
        {
            "id": 5143,
            "username": "driscollis",
            "tweet_id": "1602684586781282304",
            "tweet_text": "You can learn more about exception handling in my tutorial @mousevspython\n\nhttps://t.co/1A830yDzkl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Others",
            "created_at": "2022-12-13T15:19:16.000Z"
        },
        {
            "id": 5144,
            "username": "driscollis",
            "tweet_id": "1602684582356258818",
            "tweet_text": "Want to create your own exception in #Python? You can do that by subclassing `Exception`! \ud83d\udc0d\ud83d\udd25\n\nHere's an example: https://t.co/5BxWcemn9B",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hFZRXgAExVZl.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:15.000Z"
        },
        {
            "id": 5145,
            "username": "driscollis",
            "tweet_id": "1602684577276989441",
            "tweet_text": "#Python will do a special type of traceback when an exception is thrown during the handling of another exception.\n\nThis is what that looks like: https://t.co/XyJhS2SU9P",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hFI4WYAAZ6lf.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:14.000Z"
        },
        {
            "id": 5146,
            "username": "driscollis",
            "tweet_id": "1602684572763922432",
            "tweet_text": "You might want to catch an exception in #Python and log it and do some cleanup.\n\nBut you don't want the program to continue. In those situations, you could call `sys.exit()` or you could re-raise the exception.\n\nIn this example, you do the latter: https://t.co/0OKxsGduJY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hE6qWYAE5Atq.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:13.000Z"
        },
        {
            "id": 5147,
            "username": "driscollis",
            "tweet_id": "1602684568397561856",
            "tweet_text": "#Python lets you use `finally` to run code every time the `try/except` is run, regardless of whether or not you catch the exception.\n\nIn this example, you use the `finally` statement to close the file handler https://t.co/i9ZctniGuJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hEujXwAEbVDS.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:12.000Z"
        },
        {
            "id": 5148,
            "username": "driscollis",
            "tweet_id": "1602684564014604289",
            "tweet_text": "You can extract additional information about the exception from the `exception` argument, such as what arguments were passed to it: https://t.co/sNztENm4cY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hEhpXkAMGVd3.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Others",
            "created_at": "2022-12-13T15:19:11.000Z"
        },
        {
            "id": 5149,
            "username": "driscollis",
            "tweet_id": "1602684559568642052",
            "tweet_text": "One way to figure out which exception is thrown is to use #Python's `as` keyword to give us access to the `exception` object.\n\nThen you can print out which exception was thrown! \ud83d\udc0d\ud83d\udd25 https://t.co/5SBa9xEUW0",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hEVPXgAM-YgC.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:10.000Z"
        },
        {
            "id": 5150,
            "username": "driscollis",
            "tweet_id": "1602684555210756096",
            "tweet_text": "You can fix this problem by catching both `OSError` and `ZeroDivisionError` though!\n\nBut now you have a new problem! How do you know which exception was thrown here? https://t.co/nier1Nj70u",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hEJuXgAMkX6t.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Others",
            "created_at": "2022-12-13T15:19:09.000Z"
        },
        {
            "id": 5151,
            "username": "driscollis",
            "tweet_id": "1602684550739550208",
            "tweet_text": "Now let's rewrite the code to catch an `OSError`.\n\nDoes that catch a zero division exception? \n\nNo! Of course not!\n\nSo this time, you get a traceback and your code fails! https://t.co/UAyZWg8kXq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hD9EXgAAKFZM.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Others",
            "created_at": "2022-12-13T15:19:07.000Z"
        },
        {
            "id": 5152,
            "username": "driscollis",
            "tweet_id": "1602684546318737411",
            "tweet_text": "What happens when #Python catches an exception? That's up to you.\n\nHere you catch the `ZeroDivisionError`. You handle it by printing out that you caught it.\n\nIn a production application, you might close a database connection, log the issue or rollback a transaction https://t.co/2wBDoyql6G",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hDuKXgAIPefG.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:06.000Z"
        },
        {
            "id": 5153,
            "username": "driscollis",
            "tweet_id": "1602684541663158274",
            "tweet_text": "#Python Pro Tip: Do NOT do this! \u26a0\ufe0f\n\nWhen you catch all the exceptions, you can hide bugs that you want to actually catch!\n\nThis leads to difficult and frustrating debugging.\n\nYou should ALWAYS use specific exception types whenever possible! https://t.co/KkmduEsHrI",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hDg_XEAAdiQu.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:05.000Z"
        },
        {
            "id": 5154,
            "username": "driscollis",
            "tweet_id": "1602684537091375105",
            "tweet_text": "#Python has the concept of the \"bare except\". What that means is that you catch ALL exceptions.\n\nYou can do this by catching Exception, which is the base class of ALL other exceptions.\n\nOr you can just not specify an exception type all! https://t.co/zzIcDTsrFS",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hDUlXEAARi56.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:04.000Z"
        },
        {
            "id": 5155,
            "username": "driscollis",
            "tweet_id": "1602684532670533632",
            "tweet_text": "#Python handles exceptions using the `try/except` keywords.\n\nYou can optionally add `finally` and `else` to the mix too!\n\nHere's an example that uses all of them: https://t.co/lhWeqxDR2Y",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj3hDFnXgAEV_HR.jpg\"]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:03.000Z"
        },
        {
            "id": 5156,
            "username": "driscollis",
            "tweet_id": "1602684528476266501",
            "tweet_text": "Today is a great day to learn about exception handling in #Python!\n\nLet's find out how they work!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602684528476266501",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T15:19:02.000Z"
        },
        {
            "id": 5157,
            "username": "driscollis",
            "tweet_id": "1602559414707306498",
            "tweet_text": "The #Python programming language includes the `tuple()` class for easy casting of other data types to a tuple.\n\nIf you don't pass anything to the `tuple()` class, you will create an empty tuple\n\nHere are a few examples:\n\n#python_builtins_by_driscollis https://t.co/MnlP0x5Gi8",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fj1vS09XgAA6gBn.jpg\"]",
            "tweet_conversation_id": "1602559414707306498",
            "tweet_type": "Python tips",
            "created_at": "2022-12-13T07:01:53.000Z"
        },
        {
            "id": 5158,
            "username": "driscollis",
            "tweet_id": "1602421821613162496",
            "tweet_text": "I'm going to start giving away hundreds of #Python books later this week! Make a New Year's resolution to start learning Python with me or one of my books!\n\n\ud83d\udc0d\ud83d\udd25\ud83d\udcda https://t.co/oWHOOsFVqT",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjzyIDKXoAAdiB7.mp4\"]",
            "tweet_conversation_id": "1602421821613162496",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T21:55:08.000Z"
        },
        {
            "id": 5159,
            "username": "driscollis",
            "tweet_id": "1602379767596056587",
            "tweet_text": "Give it a try on your own Pandas \ud83d\udc3c DataFrames and see how much memory you are using!\n\nFollow me for more interesting tips on #Python!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602379749698985989",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T19:08:02.000Z"
        },
        {
            "id": 5160,
            "username": "driscollis",
            "tweet_id": "1602379763611467787",
            "tweet_text": "All of this information comes from this interesting article I stumbled across:\n\nhttps://t.co/AZxkQvs7VN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602379749698985989",
            "tweet_type": "Others",
            "created_at": "2022-12-12T19:08:01.000Z"
        },
        {
            "id": 5161,
            "username": "driscollis",
            "tweet_id": "1602379759018721281",
            "tweet_text": "You can tell Pandas to look a bit deeper at its column memory using the following:\n\n`df.memory_usage(deep=True)`\n\nThis will give you the bytes used per variable https://t.co/fLpt4tKiIK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjzL48wWAAIDdF1.jpg\"]",
            "tweet_conversation_id": "1602379749698985989",
            "tweet_type": "Others",
            "created_at": "2022-12-12T19:07:59.000Z"
        },
        {
            "id": 5162,
            "username": "driscollis",
            "tweet_id": "1602379754518331399",
            "tweet_text": "You can also get the memory of each column / variable in a Pandas DataFrame using the `memory_usage()` method https://t.co/IAfsFotUeF",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjzL4wFWAAIQXUp.jpg\"]",
            "tweet_conversation_id": "1602379749698985989",
            "tweet_type": "Others",
            "created_at": "2022-12-12T19:07:58.000Z"
        },
        {
            "id": 5163,
            "username": "driscollis",
            "tweet_id": "1602379749698985989",
            "tweet_text": "Today I wanted to talk about getting the memory usage of a Pandas data frame \ud83d\udc3c\ud83d\udc0d\n\nOne way to get that information is with `https://t.co/vekkR5qUur(memory_usage=\"deep\")`\n\nIn this example, the memory usage is about 1.1 MB\n\n\ud83e\uddf5\ud83d\udc47 https://t.co/FgNY85qy0V",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjzL4dqWABk57ED.jpg\"]",
            "tweet_conversation_id": "1602379749698985989",
            "tweet_type": "Others",
            "created_at": "2022-12-12T19:07:57.000Z"
        },
        {
            "id": 5164,
            "username": "driscollis",
            "tweet_id": "1602345726415093760",
            "tweet_text": "They are firing a lot of people at my job today.\n\nIf you have any good remote #Python jobs, let me know\n\nI may need one soon",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602345726415093760",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T16:52:45.000Z"
        },
        {
            "id": 5165,
            "username": "driscollis",
            "tweet_id": "1602327871439224834",
            "tweet_text": "This week I spoke with Iqbal Abdullah about his work in the #Python community in the East Asia and South East Asia regions\n\nYou'll also learn what @iqbalabd has been up to with Python itself!\n\nThe full interview is @mousevspython \n\nhttps://t.co/IKfftwl9Ic",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602327871439224834",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T15:41:49.000Z"
        },
        {
            "id": 5166,
            "username": "driscollis",
            "tweet_id": "1602314801451044864",
            "tweet_text": "What did you do with #Python last week? \ud83d\udc0d\ud83d\udd25\n\nI got some more quizzes done for The Python Quiz Book and a few other odds and ends",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602314801451044864",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T14:49:52.000Z"
        },
        {
            "id": 5167,
            "username": "driscollis",
            "tweet_id": "1602127358290546690",
            "tweet_text": "I really like this example from the #Python documentation that shows how to extract only Python files from a tar archive\n\nYou could modify this to extract any file type you want! \ud83d\udc0d\ud83d\udcaa https://t.co/1NLVeoXZQq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjvmV12WQAEF6xz.jpg\"]",
            "tweet_conversation_id": "1602127358290546690",
            "tweet_type": "Python tips",
            "created_at": "2022-12-12T02:25:02.000Z"
        },
        {
            "id": 5168,
            "username": "driscollis",
            "tweet_id": "1602025915621449729",
            "tweet_text": "You can get the code for this example on the book's GitHub code repo (see chapter 4):\n\nhttps://t.co/JNZeADI7B3",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602025906712764418",
            "tweet_type": "Others",
            "created_at": "2022-12-11T19:41:57.000Z"
        },
        {
            "id": 5169,
            "username": "driscollis",
            "tweet_id": "1602025911532011520",
            "tweet_text": "The code for this example is from my book, Creating GUI Applications with wxPython.\n\nYou can get it here:\nhttps://t.co/ERCFAa7eYU",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602025906712764418",
            "tweet_type": "Others",
            "created_at": "2022-12-11T19:41:56.000Z"
        },
        {
            "id": 5170,
            "username": "driscollis",
            "tweet_id": "1602025906712764418",
            "tweet_text": "You can use #wxPython to create a cross-platform #SQLite database viewer with #Python\n\n\ud83d\udc0d\ud83d\udd25\ud83d\udcaa\n\nHere's an example: https://t.co/YwmNhtiAsT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjuKELOXwAAEwAX.jpg\", \"https://pbs.twimg.com/media/FjuKElrX0AAWILx.png\"]",
            "tweet_conversation_id": "1602025906712764418",
            "tweet_type": "Python tips",
            "created_at": "2022-12-11T19:41:55.000Z"
        },
        {
            "id": 5171,
            "username": "driscollis",
            "tweet_id": "1601947868470087681",
            "tweet_text": "What's your favorite YouTube channel and why do you like it so much? \ud83d\udc0d \ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601947868470087681",
            "tweet_type": "Others",
            "created_at": "2022-12-11T14:31:49.000Z"
        },
        {
            "id": 5172,
            "username": "driscollis",
            "tweet_id": "1601694506092560386",
            "tweet_text": "Need to read a CSV file? #Python has a module for that built-in!\n\nHere's one way you can use the `csv` module: https://t.co/6yY1huVaIs",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjpcqiZXEAI2e55.jpg\"]",
            "tweet_conversation_id": "1601694506092560386",
            "tweet_type": "Python tips",
            "created_at": "2022-12-10T21:45:02.000Z"
        },
        {
            "id": 5173,
            "username": "driscollis",
            "tweet_id": "1601633993036038144",
            "tweet_text": "Want to learn how to be a better YouTuber / Video tutorial maker?\n\nThen you need to check out this up-and-coming new course from the amazing @AprilynneAlter https://t.co/mHIihKKNxv",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601633993036038144",
            "tweet_type": "Others",
            "created_at": "2022-12-10T17:44:35.000Z"
        },
        {
            "id": 5174,
            "username": "driscollis",
            "tweet_id": "1601632606449070082",
            "tweet_text": "I hope you've enjoyed this little foray into #Python escape characters.\n\nFollow me for more fun tips on the Python language!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601632579622690816",
            "tweet_type": "Python tips",
            "created_at": "2022-12-10T17:39:04.000Z"
        },
        {
            "id": 5175,
            "username": "driscollis",
            "tweet_id": "1601632602250964992",
            "tweet_text": "I have rarely had a need for the other escape characters except in weird edge cases where I needed to escape a backslash on Windows",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601632579622690816",
            "tweet_type": "Others",
            "created_at": "2022-12-10T17:39:03.000Z"
        },
        {
            "id": 5176,
            "username": "driscollis",
            "tweet_id": "1601632597884358656",
            "tweet_text": "`\\r` used to be used on old versions of Mac OS as a carriage return. \n\n`\\n` is used on current Mac and Linux for new lines\n\n`\\r\\n` is still the standard on Windows for new lines as far as I know\n\nTechnically, they all represent the end of a line\n\nhttps://t.co/5hgoULq1hR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601632579622690816",
            "tweet_type": "Others",
            "created_at": "2022-12-10T17:39:02.000Z"
        },
        {
            "id": 5177,
            "username": "driscollis",
            "tweet_id": "1601632592951799813",
            "tweet_text": "Another common escape character in #Python is `\\t` or the tab character\n\nYou can use `\\t` to add one or more tabs in your strings https://t.co/ZnFMhajUEk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjokV38WIAA8W9Y.jpg\"]",
            "tweet_conversation_id": "1601632579622690816",
            "tweet_type": "Python tips",
            "created_at": "2022-12-10T17:39:01.000Z"
        },
        {
            "id": 5178,
            "username": "driscollis",
            "tweet_id": "1601632588061642753",
            "tweet_text": "One of the most common escape characters in #Python is `\\n` or the line feed character.\n\nLine feed is not printable. It basically tells Python to add a newline on the end of your string.\n\nThe line feed is useful for formatting your output. You can add more than one too! https://t.co/V4i7aATYvy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjokVhCX0AAZeOs.jpg\", \"https://pbs.twimg.com/media/FjokVsYWYAA5OZf.jpg\"]",
            "tweet_conversation_id": "1601632579622690816",
            "tweet_type": "Python tips",
            "created_at": "2022-12-10T17:39:00.000Z"
        },
        {
            "id": 5179,
            "username": "driscollis",
            "tweet_id": "1601632583778910209",
            "tweet_text": "Here is a list of the most common escape characters in #Python\n\n\ud83d\udc0d \\n - ASCII Linefeed or Newline\n\ud83d\udc0d \\t - Horizontal tab\n\ud83d\udc0d \\r - Carriage return\n\ud83d\udc0d \\b - Backspace\n\ud83d\udc0d \\f - Form feed\n\ud83d\udc0d \\' - Single Quote\n\ud83d\udc0d \\\" - double quote\n\ud83d\udc0d \\\\ -Backslash\n\ud83d\udc0d \\v -vertical tab",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601632579622690816",
            "tweet_type": "Python tips",
            "created_at": "2022-12-10T17:38:59.000Z"
        },
        {
            "id": 5180,
            "username": "driscollis",
            "tweet_id": "1601632579622690816",
            "tweet_text": "Today I want to talk about #Python's special escape characters\n\nJoin me in another fun thread!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601632579622690816",
            "tweet_type": "Python tips",
            "created_at": "2022-12-10T17:38:58.000Z"
        },
        {
            "id": 5181,
            "username": "driscollis",
            "tweet_id": "1601265175746813952",
            "tweet_text": "Did you know that #Python strings have a method you can use to count the occurrence of a letter in the string?\n\nIt's called `count()`! A good alternative to `count()` is `collections.Counter()`! https://t.co/kldTbgiObH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjjWMIrXkAQQWd8.jpg\"]",
            "tweet_conversation_id": "1601265175746813952",
            "tweet_type": "Python tips",
            "created_at": "2022-12-09T17:19:02.000Z"
        },
        {
            "id": 5182,
            "username": "driscollis",
            "tweet_id": "1601228437603115008",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nWhich string method makes the following output?\n\nA) casefold\nB) swapcase\nC) caseswap\nD) capitalize https://t.co/GHoAhrbi1m",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fji0xo4XkAAvmqU.jpg\"]",
            "tweet_conversation_id": "1601228437603115008",
            "tweet_type": "Python tips",
            "created_at": "2022-12-09T14:53:03.000Z"
        },
        {
            "id": 5183,
            "username": "driscollis",
            "tweet_id": "1601003959082262529",
            "tweet_text": "#Python lets you play the system bell sound. \ud83d\udd14\ud83d\udc0d\n\nThis can be a useful way to get the user's attention in your program! \u26a0\ufe0f https://t.co/rxVZ7opE1z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjfonWZXoAIfsVw.png\"]",
            "tweet_conversation_id": "1601003959082262529",
            "tweet_type": "Python tips",
            "created_at": "2022-12-09T00:01:03.000Z"
        },
        {
            "id": 5184,
            "username": "driscollis",
            "tweet_id": "1600972956225753105",
            "tweet_text": "How to convert a CSV file to Excel in 3 lines of code using #Python and #Pandas \n\n\ud83d\udc0d\ud83d\udc3c\ud83d\udd25 https://t.co/aWHlgZHcFa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjfMazfWQAAL8n_.jpg\"]",
            "tweet_conversation_id": "1600972956225753105",
            "tweet_type": "Python tips",
            "created_at": "2022-12-08T21:57:52.000Z"
        },
        {
            "id": 5185,
            "username": "driscollis",
            "tweet_id": "1600926431558914049",
            "tweet_text": "I really like the power and flexibility of f-strings. \n\nI wasn't always a fan, but they have grown on me tremendously.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600926430002454528",
            "tweet_type": "Others",
            "created_at": "2022-12-08T18:52:59.000Z"
        },
        {
            "id": 5186,
            "username": "driscollis",
            "tweet_id": "1600926430002454528",
            "tweet_text": "What's your favorite feature in #Python? \ud83d\udc0d\ud83d\udd25",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600926430002454528",
            "tweet_type": "Python tips",
            "created_at": "2022-12-08T18:52:59.000Z"
        },
        {
            "id": 5187,
            "username": "driscollis",
            "tweet_id": "1600844872533118976",
            "tweet_text": "Did you know you can create your own drawings with #Python and #Pillow? \ud83d\udc0d\ud83d\udd25\n\nHere's how to draw rectangles with different colors! https://t.co/X3rPVBn7em",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjdX7LXWAAIerYW.jpg\", \"https://pbs.twimg.com/media/FjdX7XQWAAEZav5.png\"]",
            "tweet_conversation_id": "1600844872533118976",
            "tweet_type": "Python tips",
            "created_at": "2022-12-08T13:28:54.000Z"
        },
        {
            "id": 5188,
            "username": "driscollis",
            "tweet_id": "1600604078115065866",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nWhat is the output?\n\nA) Syntax Error\nB) Type Error\nC) Python is weird\nD) Python Python Python! https://t.co/t8F4MS93QU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjZ87FuXEAEzX6Z.jpg\"]",
            "tweet_conversation_id": "1600604078115065866",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T21:32:04.000Z"
        },
        {
            "id": 5189,
            "username": "driscollis",
            "tweet_id": "1600555517881073678",
            "tweet_text": "Did you know that #pandas can create output that has a hover effect? \ud83d\udc0d\ud83d\udc3c\n\nIn this example, Pandas creates a table where each row's background color turns yellow when it is moused over\n\n#Python https://t.co/slED13XvYM",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjZQvYQXwAcTICq.mp4\"]",
            "tweet_conversation_id": "1600555517881073678",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T18:19:07.000Z"
        },
        {
            "id": 5190,
            "username": "driscollis",
            "tweet_id": "1600516407703248900",
            "tweet_text": "I haven't been on a #Python podcast in a while. \n\nDoes anyone need a guest for their show? Or do you have a recommendation for one I have yet to be on?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600516407703248900",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T15:43:42.000Z"
        },
        {
            "id": 5191,
            "username": "driscollis",
            "tweet_id": "1600496689080565760",
            "tweet_text": "and here's the turtle making a graph! https://t.co/VS5DebOYOf",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjYbNBbWYAMRYCQ.mp4\"]",
            "tweet_conversation_id": "1600496678179667969",
            "tweet_type": "Others",
            "created_at": "2022-12-07T14:25:21.000Z"
        },
        {
            "id": 5192,
            "username": "driscollis",
            "tweet_id": "1600496678179667969",
            "tweet_text": "Did you know you can use #Python's `turtle` \ud83d\udc22 module to create a pie chart?\n\nI didn't either, but here we are. Check out this neat example below along with an animated GIF (in next tweet)! https://t.co/qRa4GviJOE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjYbCFrWIAYOAom.jpg\"]",
            "tweet_conversation_id": "1600496678179667969",
            "tweet_type": "Python tips",
            "created_at": "2022-12-07T14:25:18.000Z"
        },
        {
            "id": 5193,
            "username": "driscollis",
            "tweet_id": "1600257539043721216",
            "tweet_text": "I hope you enjoyed this quick review of #Python context managers.\n\nFollow me for more great content on Python!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Python tips",
            "created_at": "2022-12-06T22:35:03.000Z"
        },
        {
            "id": 5194,
            "username": "driscollis",
            "tweet_id": "1600257534744580101",
            "tweet_text": "I also wrote up a thread on using #Python's awesome `contextlib` module which makes creating context managers even easier:\n\nhttps://t.co/fYpGk8FhPu",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Python tips",
            "created_at": "2022-12-06T22:35:02.000Z"
        },
        {
            "id": 5195,
            "username": "driscollis",
            "tweet_id": "1600257530306994176",
            "tweet_text": "When you drop out of the `with` statement's code block, the `__exit__()` method is called.\n\nHere is where you put your cleanup code. You can catch errors here too and handle them as you see fit.\n\nSome devs will log the error and then re-raise it, for example https://t.co/7g4KI2NhSM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjVBuRnX0BAyTwN.jpg\"]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Others",
            "created_at": "2022-12-06T22:35:01.000Z"
        },
        {
            "id": 5196,
            "username": "driscollis",
            "tweet_id": "1600257525554860032",
            "tweet_text": "When you use the `with` statement, it will take the return value from the `__enter__` method. You can assign that to a value or throw it away.\n\nIn the following example, you turn `self.conn` into `data`\n\nwith DataConn() as data:\n    pass https://t.co/xcwdSImlrR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjVBuDPX0AE6qi0.jpg\"]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Others",
            "created_at": "2022-12-06T22:35:00.000Z"
        },
        {
            "id": 5197,
            "username": "driscollis",
            "tweet_id": "1600257521037594630",
            "tweet_text": "While there are many things in Python that are built-in context managers, you can also write your own!\n\nAll you need to do is create a class and override the following methods:\n\n\ud83d\udc0d __enter__\n\ud83d\udc0d __exit__ https://t.co/5yzCsZNhTh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjVBt0_X0Ag4Zgv.jpg\"]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Others",
            "created_at": "2022-12-06T22:34:59.000Z"
        },
        {
            "id": 5198,
            "username": "driscollis",
            "tweet_id": "1600257517065588740",
            "tweet_text": "The beauty of a context manager is that they allow you to do some setup and teardown automatically.\n\nThe downside is that is abstracted away and can sometimes make the code less obvious when debugging",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Others",
            "created_at": "2022-12-06T22:34:58.000Z"
        },
        {
            "id": 5199,
            "username": "driscollis",
            "tweet_id": "1600257512749633538",
            "tweet_text": "The `with` statement, which is the normal way for working with context managers, was added back in Python 2.5!\n\nHere is a pretty common example of using a context manager: https://t.co/MOWhwPchjf",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjVBtpUWQAAiQd9.jpg\"]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Others",
            "created_at": "2022-12-06T22:34:57.000Z"
        },
        {
            "id": 5200,
            "username": "driscollis",
            "tweet_id": "1600257508773449738",
            "tweet_text": "#Python has had the concept of context managers for a loooong time!\n\nLet's talk about context managers again!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600257508773449738",
            "tweet_type": "Python tips",
            "created_at": "2022-12-06T22:34:56.000Z"
        },
        {
            "id": 5201,
            "username": "driscollis",
            "tweet_id": "1600142780306583552",
            "tweet_text": "What's your favorite lightweight IDE?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600142780306583552",
            "tweet_type": "Others",
            "created_at": "2022-12-06T14:59:02.000Z"
        },
        {
            "id": 5202,
            "username": "driscollis",
            "tweet_id": "1600139011716169733",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nCan you make this code work?\n\nFeel free to use @snappify_io or Carbon in your responses https://t.co/HeeWfC8zcK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjTV8iDXEAUEEL-.jpg\"]",
            "tweet_conversation_id": "1600139011716169733",
            "tweet_type": "Python tips",
            "created_at": "2022-12-06T14:44:04.000Z"
        },
        {
            "id": 5203,
            "username": "driscollis",
            "tweet_id": "1599914483404505090",
            "tweet_text": "@staticmethod @property @classmethod Hmmm...looks like I introduced a typo to this quiz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599845317142355968",
            "tweet_type": "Others",
            "created_at": "2022-12-05T23:51:52.000Z"
        },
        {
            "id": 5204,
            "username": "driscollis",
            "tweet_id": "1599858768447086592",
            "tweet_text": "What did you do with #Python last week?\n\nI added multiple new Python quizzes to my book and to @TeachMePy",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599858768447086592",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T20:10:28.000Z"
        },
        {
            "id": 5205,
            "username": "driscollis",
            "tweet_id": "1599845317142355968",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nWhat do you need to do to make the `amount()` method into an attribute?\n\nA) add @staticmethod \nB) add @property \nC) add @classmethod \nD) Something else https://t.co/7ZykeG0n9Y",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjPK1bRXEDoFQZ7.jpg\"]",
            "tweet_conversation_id": "1599845317142355968",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T19:17:01.000Z"
        },
        {
            "id": 5206,
            "username": "driscollis",
            "tweet_id": "1599814620566327296",
            "tweet_text": "90,000+ Followers! \ud83e\udd2f\n\nHere's a secret I've been planning for a few weeks: I'm going to give away HUNDREDS of #Python eBooks, starting sometime next week! \ud83c\udf84\ud83c\udf85\ud83d\udc0d https://t.co/Fce59zNUVD",
            "tweet_media": "[\"https://video.twimg.com/tweet_video/FjOu6niXEAI1mJD.mp4\"]",
            "tweet_conversation_id": "1599814620566327296",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T17:15:03.000Z"
        },
        {
            "id": 5207,
            "username": "driscollis",
            "tweet_id": "1599803508823302147",
            "tweet_text": "Need to create a unique identifier? #Python has you covered with the `uuid` module! \ud83d\udc0d\ud83d\udd25 https://t.co/32haNGIAAi",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOkz8RWQAQ3OOH.jpg\"]",
            "tweet_conversation_id": "1599803508823302147",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T16:30:54.000Z"
        },
        {
            "id": 5208,
            "username": "driscollis",
            "tweet_id": "1599780483075756032",
            "tweet_text": "November was a pretty good month on Twitter, from a stats point of view.\n\nAlthough May somehow beat it slightly in the impressions category \ud83d\udc0d\ud83d\udd25 https://t.co/olQ6O33QlN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOPpAgWYAAsHyW.png\"]",
            "tweet_conversation_id": "1599780483075756032",
            "tweet_type": "Others",
            "created_at": "2022-12-05T14:59:24.000Z"
        },
        {
            "id": 5209,
            "username": "driscollis",
            "tweet_id": "1599763535621488640",
            "tweet_text": "I hope you enjoyed this thread on #Python introspection tools. If you did, please retweet to share it with your friends and give me a follow so you an learn more Python!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:52:03.000Z"
        },
        {
            "id": 5210,
            "username": "driscollis",
            "tweet_id": "1599763531070668801",
            "tweet_text": "You can use the `sys` module in #Python to learn about the following:\n\n\ud83d\udc0d sys.executable - Get the path to whiche Python exe is running\n\ud83d\udc0d sys.platform - Get which OS you're on\n\ud83d\udc0d sys.version - Get the Python version from within Python\n\ud83d\udc0d sys.path - Get the import search paths https://t.co/Vu8Hc5zPvv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOAbaZWQAI8_V9.jpg\"]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:52:02.000Z"
        },
        {
            "id": 5211,
            "username": "driscollis",
            "tweet_id": "1599763526440177665",
            "tweet_text": "The `help()` function in #Python also works on built-in objects. Here is an example of running `help()` on an empty string: https://t.co/skl0BQ3rdA",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOAbKTX0AAjwQR.jpg\"]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:52:01.000Z"
        },
        {
            "id": 5212,
            "username": "driscollis",
            "tweet_id": "1599763521746632704",
            "tweet_text": "#Python also provides the built-in `help()` function. You can use `dir()` to get the attributes of the object and then use `help()` to learn about those attributes.\n\nThis is why adding good docstrings to your code is helpful for other developers https://t.co/ah2zx5RrQI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOAa7uXwAA6R6t.jpg\"]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:52:00.000Z"
        },
        {
            "id": 5213,
            "username": "driscollis",
            "tweet_id": "1599763517296500736",
            "tweet_text": "#Python also had the built-in `dir()` function. `dir()` will attempt to return a list of valid attributes for that object. https://t.co/xLpJM1WxX2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOAauXWQAI4DhR.jpg\"]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:51:59.000Z"
        },
        {
            "id": 5214,
            "username": "driscollis",
            "tweet_id": "1599763512900952065",
            "tweet_text": "You can use the `type()` function in #Python to learn about any object's type.\n\nThis can help you figure out what is going on in your code when you are debugging.\n\nHere are some examples: https://t.co/MuKAjZsVnw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjOAaibWAAAHxmI.jpg\"]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:51:58.000Z"
        },
        {
            "id": 5215,
            "username": "driscollis",
            "tweet_id": "1599763508916375554",
            "tweet_text": "There are multiple ways to introspect #Python code. You will learn about the following tools you can use for introspection:\n\n\ud83d\udc0d type()\n\ud83d\udc0d dir()\n\ud83d\udc0d help()\n\ud83d\udc0d sys",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:51:57.000Z"
        },
        {
            "id": 5216,
            "username": "driscollis",
            "tweet_id": "1599763504814333953",
            "tweet_text": "Let's talk about #Python introspection!\n\nIntrospection is the examination of Python objects. It gives you a window into your code that lets you learn about Python using Python itself!\n\nFind out how in this mini-thread!\n\n\ud83e\uddf5\ud83d\udc47\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599763504814333953",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T13:51:56.000Z"
        },
        {
            "id": 5217,
            "username": "driscollis",
            "tweet_id": "1599716685593944064",
            "tweet_text": "#Python strings also support 3 types of justification functions:\n\n\ud83d\udc0d center()\n\ud83d\udc0d ljust() - Left justification\n\ud83d\udc0d rjust() - Right justification\n\nYou need to pass in the string width to each of these functions and it will return a justified string.\n\nHere are some examples: https://t.co/Hhgmjd3T3j",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjNV2OTWAAIHyB2.jpg\"]",
            "tweet_conversation_id": "1599716685593944064",
            "tweet_type": "Python tips",
            "created_at": "2022-12-05T10:45:53.000Z"
        },
        {
            "id": 5218,
            "username": "driscollis",
            "tweet_id": "1599601428821073921",
            "tweet_text": "Pandas lets you create plots too with as little as 4 lines of code. \ud83d\udc3c\ud83d\udc3c\ud83d\udc3c\n\nPandas also supports the following chart types:\n\n\ud83d\udc0d line\n\ud83d\udc0d barh\n\ud83d\udc0d hist\n\ud83d\udc0d box\n\ud83d\udc0d kde\n\ud83d\udc0d area\n\ud83d\udc0d scatter \n\ud83d\udc0d hexbin\n\ud83d\udc0d pie https://t.co/wnLumCHbOe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjLtBXyXkAEFP2K.jpg\"]",
            "tweet_conversation_id": "1599601428821073921",
            "tweet_type": "Others",
            "created_at": "2022-12-05T03:07:54.000Z"
        },
        {
            "id": 5219,
            "username": "driscollis",
            "tweet_id": "1599228717619888128",
            "tweet_text": "Have you ever needed to concatenate two PDFs together? \ud83d\udc0d\ud83d\udd25\n\n#Python can help with that! There are several packages that work, such as PyPDF2, pdfrw, and borb.\n\nThis example uses pdfrw: https://t.co/l4CqIzsRr3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjGaCuvXwAA17dY.jpg\"]",
            "tweet_conversation_id": "1599228717619888128",
            "tweet_type": "Python tips",
            "created_at": "2022-12-04T02:26:53.000Z"
        },
        {
            "id": 5220,
            "username": "driscollis",
            "tweet_id": "1599104752800915456",
            "tweet_text": "You can also run #Python's built-in code profiler on modules directly using the following command: https://t.co/0GIypBgB6S",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjEpSvXXEAQZc57.png\"]",
            "tweet_conversation_id": "1599104748229107719",
            "tweet_type": "Python tips",
            "created_at": "2022-12-03T18:14:17.000Z"
        },
        {
            "id": 5221,
            "username": "driscollis",
            "tweet_id": "1599104748229107719",
            "tweet_text": "#Python comes with a code profiler built-in! It's called `cProfile`\n\nHere's an example of using it: https://t.co/yLTz62OV5D",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjEpSiOXkAAsSDH.jpg\"]",
            "tweet_conversation_id": "1599104748229107719",
            "tweet_type": "Python tips",
            "created_at": "2022-12-03T18:14:16.000Z"
        },
        {
            "id": 5222,
            "username": "driscollis",
            "tweet_id": "1599038737786327041",
            "tweet_text": "Thanks for taking the time to learn about #Python's `format()` function with me. \n\nFollow me to learn more about Python!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599038724796547072",
            "tweet_type": "Python tips",
            "created_at": "2022-12-03T13:51:58.000Z"
        },
        {
            "id": 5223,
            "username": "driscollis",
            "tweet_id": "1599038733164187649",
            "tweet_text": "The `format()` function uses the Format Specification Mini-Language. You can see this documented here:\n\nhttps://t.co/Pq0A6zhJyb\n\nYou can use the Format Specification Mini-Language to specify alignment, fill, width, precision and more.\n\nHere are a couple of examples: https://t.co/1PSRmDaSOv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjDtPr8WQAAgrgL.jpg\"]",
            "tweet_conversation_id": "1599038724796547072",
            "tweet_type": "Others",
            "created_at": "2022-12-03T13:51:57.000Z"
        },
        {
            "id": 5224,
            "username": "driscollis",
            "tweet_id": "1599038728890191872",
            "tweet_text": "Here are some examples of how you might use #Python's `format()` function: https://t.co/eiItDVtnLI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjDtPhCXwAA_ncw.jpg\"]",
            "tweet_conversation_id": "1599038724796547072",
            "tweet_type": "Python tips",
            "created_at": "2022-12-03T13:51:56.000Z"
        },
        {
            "id": 5225,
            "username": "driscollis",
            "tweet_id": "1599038724796547072",
            "tweet_text": "#Python includes a `format()` function that is built-in. This function is very similar to the string's `format()` method, but is more low-level than that method\n\nhttps://t.co/9csd5kRzUF\n\n#python_builtins_by_driscollis\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599038724796547072",
            "tweet_type": "Python tips",
            "created_at": "2022-12-03T13:51:55.000Z"
        },
        {
            "id": 5226,
            "username": "driscollis",
            "tweet_id": "1598796810553696256",
            "tweet_text": "I came across one of these crazy nested ternary expressions recently in some production code and it took a while to understand what it was doing",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598795142617513986",
            "tweet_type": "Others",
            "created_at": "2022-12-02T21:50:38.000Z"
        },
        {
            "id": 5227,
            "username": "driscollis",
            "tweet_id": "1598795148158279690",
            "tweet_text": "A better solution would be to use a dictionary or a regular if/elif type construct\n\nHere's an example using a dictionary to compare to: https://t.co/yYEyYNkjfH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjAPs-4WIAYgBpr.jpg\"]",
            "tweet_conversation_id": "1598795142617513986",
            "tweet_type": "Others",
            "created_at": "2022-12-02T21:44:02.000Z"
        },
        {
            "id": 5228,
            "username": "driscollis",
            "tweet_id": "1598795142617513986",
            "tweet_text": "#Python Pro Tip \ud83d\udc0d\ud83d\udd25\n\nDon't do nested ternary expressions!\n\nThey are difficult to read \ud83e\udd2f https://t.co/P5yrENP0Ox",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjAPsfpXwAAyfh6.jpg\"]",
            "tweet_conversation_id": "1598795142617513986",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T21:44:00.000Z"
        },
        {
            "id": 5229,
            "username": "driscollis",
            "tweet_id": "1598756872135245828",
            "tweet_text": "How to gzip a file with #Python on the command line using the `gzip` module \ud83d\udc0d\ud83d\udd25 https://t.co/ldulkn6d1w",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi_s5oSXoAApduz.jpg\"]",
            "tweet_conversation_id": "1598756872135245828",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T19:11:56.000Z"
        },
        {
            "id": 5230,
            "username": "driscollis",
            "tweet_id": "1598737910454521861",
            "tweet_text": "I'm currently working on getting the Python Quiz Course and a Python 101 Video Course up on @TeachMePy \ud83d\udc0d\ud83d\udd25\n\nWhat other #Python courses would you like to see?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598737910454521861",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T17:56:35.000Z"
        },
        {
            "id": 5231,
            "username": "driscollis",
            "tweet_id": "1598731656235552775",
            "tweet_text": "Learning Python is fun too! https://t.co/80c0gjWrCr",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598731656235552775",
            "tweet_type": "Others",
            "created_at": "2022-12-02T17:31:44.000Z"
        },
        {
            "id": 5232,
            "username": "driscollis",
            "tweet_id": "1598713610838106112",
            "tweet_text": "Have you ever needed to know how many CPU cores are on your machine or server? #Python can help with that!\n\nJust use the `multiprocessing` library! \ud83d\udc0d\ud83d\udd25 https://t.co/iWBMutNRQH",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi_FjkHXgAAtnm7.jpg\"]",
            "tweet_conversation_id": "1598713610838106112",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T16:20:02.000Z"
        },
        {
            "id": 5233,
            "username": "driscollis",
            "tweet_id": "1598668278892830722",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nTrue or False? https://t.co/77ad4Em4uf",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi-cUtnWAAEPK1O.jpg\"]",
            "tweet_conversation_id": "1598668278892830722",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T13:19:54.000Z"
        },
        {
            "id": 5234,
            "username": "driscollis",
            "tweet_id": "1598597093307858945",
            "tweet_text": "Did you know you can make complex list comprehensions easier to read by adding line breaks in #Python? \ud83d\udc0d\ud83d\ude80\n\nHere is an example: https://t.co/Tyc3wa8RuY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi9blQDWAAUEcX3.jpg\"]",
            "tweet_conversation_id": "1598597093307858945",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T08:37:02.000Z"
        },
        {
            "id": 5235,
            "username": "driscollis",
            "tweet_id": "1598498923945025537",
            "tweet_text": "\ud83d\udc4b Hi! I'm Mike!\n\nIf you \u2764\ufe0f #Python, you might want to follow me\n\nI write or create videos about the following:\n\n\ud83e\udd14 Python quizzes\n\ud83d\uddbc\ufe0f Python &amp; images\n\ud83d\udd25 Python and PDFs\n\ud83d\udcc9 Python and Excel\n\ud83c\udf10 Python and web frameworks\n\ud83d\uddd1\ufe0f Python and databases\n\ud83d\ude80 Python GUIs\n\ud83d\udc0d\ud83d\udc0d\ud83d\udc0d\ud83d\udc0d\ud83d\udc0d\ud83d\udc0d\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598498923945025537",
            "tweet_type": "Python tips",
            "created_at": "2022-12-02T02:06:56.000Z"
        },
        {
            "id": 5236,
            "username": "driscollis",
            "tweet_id": "1598424236879667203",
            "tweet_text": "Do you think there's room for another #Python newsletter? I've been debating making one of those for a while",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598424236879667203",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T21:10:10.000Z"
        },
        {
            "id": 5237,
            "username": "driscollis",
            "tweet_id": "1598416888186413061",
            "tweet_text": "I usually do a few of the challenges and then quit because I don't have enough free time to finish the harder ones \ud83d\ude05",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598416744208637952",
            "tweet_type": "Others",
            "created_at": "2022-12-01T20:40:57.000Z"
        },
        {
            "id": 5238,
            "username": "driscollis",
            "tweet_id": "1598416744208637952",
            "tweet_text": "Who's doing Advent of Code this year? \ud83d\udc0d\ud83c\udf84",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598416744208637952",
            "tweet_type": "Others",
            "created_at": "2022-12-01T20:40:23.000Z"
        },
        {
            "id": 5239,
            "username": "driscollis",
            "tweet_id": "1598392490763190308",
            "tweet_text": "If you need to change a file's ownership, you can do that with #Python using the `shutil.chown()` function! \ud83d\udc0d\ud83d\udcaa https://t.co/i6cY0BwsNM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi6hf63XgBw6YAu.jpg\"]",
            "tweet_conversation_id": "1598392490763190308",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T19:04:01.000Z"
        },
        {
            "id": 5240,
            "username": "driscollis",
            "tweet_id": "1598348431801589761",
            "tweet_text": "This code is in my PyTips repository under the \"applications\" folder \ud83d\udc0d\ud83d\udd25\n\nhttps://t.co/oUluatkirE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598348426885976064",
            "tweet_type": "Others",
            "created_at": "2022-12-01T16:08:56.000Z"
        },
        {
            "id": 5241,
            "username": "driscollis",
            "tweet_id": "1598348426885976064",
            "tweet_text": "Let's create a simple MP3 player with #Python, #PySimpleGUI and VLC today!\n\nHere's the code and the GUI: https://t.co/nmRuFbQoWs",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi55a4cWQAAeuNF.jpg\", \"https://pbs.twimg.com/media/Fi55bFdXwAAsJIW.png\"]",
            "tweet_conversation_id": "1598348426885976064",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T16:08:55.000Z"
        },
        {
            "id": 5242,
            "username": "driscollis",
            "tweet_id": "1598280001127956481",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nWhat is the output of this code?\n\nA) Found C++!\nB) C++ not found!\nC) None of the above https://t.co/87LLeuy3Yt",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi47MEUXoAAZYDI.jpg\"]",
            "tweet_conversation_id": "1598280001127956481",
            "tweet_type": "Python tips",
            "created_at": "2022-12-01T11:37:01.000Z"
        },
        {
            "id": 5243,
            "username": "driscollis",
            "tweet_id": "1598147371765997569",
            "tweet_text": "Good news! I have #PyDevOfTheWeek interviews scheduled for all of December and the first week of January 2023! \ud83c\udf84\ud83d\udcc5\ud83d\udc0d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598147371765997569",
            "tweet_type": "Others",
            "created_at": "2022-12-01T02:50:00.000Z"
        },
        {
            "id": 5244,
            "username": "driscollis",
            "tweet_id": "1598101579214749696",
            "tweet_text": "#Python supports the concept of dictionary dispatch. \ud83d\udc0d\ud83d\udd25\n\nThe dictionary is a hash table of keys mapped to functions.\n\nHere's an example using some lambdas \ud83e\udd2f https://t.co/sY7DjvDhi4",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi2Y6oAX0AAzHk_.jpg\"]",
            "tweet_conversation_id": "1598101579214749696",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T23:48:02.000Z"
        },
        {
            "id": 5245,
            "username": "driscollis",
            "tweet_id": "1598028854504964098",
            "tweet_text": "When you run that code, you'll see the following #Seaborn heatmap plot in a PySimpleGUI user interface.\n\nIsn't that neat? https://t.co/OrO850GJHY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi1Wwf8WYAEZk5h.jpg\"]",
            "tweet_conversation_id": "1598028839845826580",
            "tweet_type": "Others",
            "created_at": "2022-11-30T18:59:03.000Z"
        },
        {
            "id": 5246,
            "username": "driscollis",
            "tweet_id": "1598028848628699143",
            "tweet_text": "Then I stripped out the Tkinter code and replaced it with PySimpleGUI code to come up with this: https://t.co/84QXfHT59r",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi1WwFVXEAgSST2.jpg\"]",
            "tweet_conversation_id": "1598028839845826580",
            "tweet_type": "Others",
            "created_at": "2022-11-30T18:59:02.000Z"
        },
        {
            "id": 5247,
            "username": "driscollis",
            "tweet_id": "1598028844174569473",
            "tweet_text": "The first step was finding an example of using Seaborn in Tkinter.\n\nFortunately, there are several on StackOverflow. I used this one:\n\nhttps://t.co/aXhepZbQlQ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598028839845826580",
            "tweet_type": "Others",
            "created_at": "2022-11-30T18:59:01.000Z"
        },
        {
            "id": 5248,
            "username": "driscollis",
            "tweet_id": "1598028839845826580",
            "tweet_text": "Today I am going to show you how to embed a #Seaborn plot in @PySimpleGUI\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1598028839845826580",
            "tweet_type": "Others",
            "created_at": "2022-11-30T18:59:00.000Z"
        },
        {
            "id": 5249,
            "username": "driscollis",
            "tweet_id": "1597991604303937539",
            "tweet_text": "#Python Pro Tip \ud83d\udc0d\ud83d\udd25\n\nYou can check the memory size of your objects using `sys.getsizeof()` https://t.co/5YVwuGvivM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi005S0XgAQHnv9.png\"]",
            "tweet_conversation_id": "1597991604303937539",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T16:31:02.000Z"
        },
        {
            "id": 5250,
            "username": "driscollis",
            "tweet_id": "1597942282245783552",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nTrue or False? https://t.co/uHIM0ubys7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi0ICIcWYAItwmh.jpg\"]",
            "tweet_conversation_id": "1597942282245783552",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T13:15:03.000Z"
        },
        {
            "id": 5251,
            "username": "driscollis",
            "tweet_id": "1597782230142697473",
            "tweet_text": "You can create diffs with #Python using `difflib`, which is built-in.\n\nThe following example compares two multiline strings and shows the differences using one or more \"+\" symbols\n\nNote: This will also output unchanged lines too, but without any \"+\" markings https://t.co/KkTS3lpegV",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fix2eFmXwAUxjIG.jpg\"]",
            "tweet_conversation_id": "1597782230142697473",
            "tweet_type": "Python tips",
            "created_at": "2022-11-30T02:39:03.000Z"
        },
        {
            "id": 5252,
            "username": "driscollis",
            "tweet_id": "1597717428758511616",
            "tweet_text": "The #PyDevOfTheWeek is Yeray Diaz. \n\nCome and learn about what Yeray does with #Python and @pypi. You'll also discover that Yeray has a blog and more!\n\nhttps://t.co/GIW6yR7rgP @yera_ee",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597717428758511616",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T22:21:33.000Z"
        },
        {
            "id": 5253,
            "username": "driscollis",
            "tweet_id": "1597709210006986757",
            "tweet_text": "You can use `ascii()` as a simple method of converting some Unicode characters to the ASCII format. \n\nI hope you found this short thread interesting! I'll be covering many more #Python built-in functions throughout January!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597709201685577729",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T21:48:54.000Z"
        },
        {
            "id": 5254,
            "username": "driscollis",
            "tweet_id": "1597709205716230146",
            "tweet_text": "The `ascii()` built-in function will return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using \\x, \\u, or \\U escapes. \n\n\ud83d\udc0d\ud83d\ude80\n\nHere is an example: https://t.co/YwEPX8Mo3b",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fiw0DQ7WAAMeaBM.jpg\"]",
            "tweet_conversation_id": "1597709201685577729",
            "tweet_type": "Others",
            "created_at": "2022-11-29T21:48:53.000Z"
        },
        {
            "id": 5255,
            "username": "driscollis",
            "tweet_id": "1597709201685577729",
            "tweet_text": "Another great built-in function in #Python is the `ascii()` built-in\n\nYou will learn about `ascii()` in this mini-thread!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47\n\n#python_builtins_by_driscollis",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597709201685577729",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T21:48:52.000Z"
        },
        {
            "id": 5256,
            "username": "driscollis",
            "tweet_id": "1597647816658149379",
            "tweet_text": "You can use #Python and #Pillow to add a watermark to your photos.\n\nA lot of photographers write their website name or their company name on their images as a watermark.\n\nHere's an example adding some text to a photo as a watermark \ud83d\udc0d\ud83d\udd25 https://t.co/UeNt3DDXuU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fiv8N9sXwAEtnLY.jpg\", \"https://pbs.twimg.com/media/Fiv8ON2XEAELOYi.jpg\"]",
            "tweet_conversation_id": "1597647816658149379",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T17:44:57.000Z"
        },
        {
            "id": 5257,
            "username": "driscollis",
            "tweet_id": "1597570327982350339",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nDoes the following evaluate to True or False? https://t.co/GjsiiqPZSO",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fiu1vsZXkAE1YtW.jpg\"]",
            "tweet_conversation_id": "1597570327982350339",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T12:37:02.000Z"
        },
        {
            "id": 5258,
            "username": "driscollis",
            "tweet_id": "1597512411929612288",
            "tweet_text": "Learn how to process images with #Python and #Pillow in this video tutorial on my YouTube channel:\n\n\ud83d\udc0d\ud83d\udcfa\ud83d\udd25\n\nhttps://t.co/38eq9Lzy4D",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597512411929612288",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T08:46:54.000Z"
        },
        {
            "id": 5259,
            "username": "driscollis",
            "tweet_id": "1597418130741116928",
            "tweet_text": "I hope you enjoyed learning how to create SEVEN different types of files with Python.\n\nFollow me for more on the Python programming language!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Others",
            "created_at": "2022-11-29T02:32:15.000Z"
        },
        {
            "id": 5260,
            "username": "driscollis",
            "tweet_id": "1597418126743949314",
            "tweet_text": "If you'd like to learn more about creating Excel spreadsheets with #Python, you can check out my tutorial @mousevspython\n\nhttps://t.co/n2TDJ36ySC",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:14.000Z"
        },
        {
            "id": 5261,
            "username": "driscollis",
            "tweet_id": "1597418122490912769",
            "tweet_text": "This example uses #OpenPyXL to create an empty Excel spreadsheet with Python https://t.co/g4UXULm6sH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FisrQ_oXgAAV0Zg.jpg\"]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Others",
            "created_at": "2022-11-29T02:32:13.000Z"
        },
        {
            "id": 5262,
            "username": "driscollis",
            "tweet_id": "1597418118514606080",
            "tweet_text": "7\ufe0f\u20e3 Creating an Excel file with #Python can be done with several different packages too:\n\n\ud83d\udc0d OpenPyXL\n\ud83d\udc0d xlwt\n\ud83d\udc0d XlsxWriter\n\ud83d\udc0d and more!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:12.000Z"
        },
        {
            "id": 5263,
            "username": "driscollis",
            "tweet_id": "1597418114530119684",
            "tweet_text": "You can learn more about creating PDFs with Python in my tutorial:\n\nhttps://t.co/xv75NX2mvp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Others",
            "created_at": "2022-11-29T02:32:11.000Z"
        },
        {
            "id": 5264,
            "username": "driscollis",
            "tweet_id": "1597418110247735296",
            "tweet_text": "For this example, you will use #ReportLab to create a PDF with #Python\n\nYou can do it in 4 lines of code, in fact! https://t.co/VfH3qbZ1Ob",
            "tweet_media": "[\"https://pbs.twimg.com/media/FisrQxEXkAUdmPV.jpg\"]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:10.000Z"
        },
        {
            "id": 5265,
            "username": "driscollis",
            "tweet_id": "1597418106246275073",
            "tweet_text": "6\ufe0f\u20e3 Creating PDFs with #Python requires you to use an external package. You have lots of choices:\n\n\ud83d\udc0d ReportLab\n\ud83d\udc0d WeasyPrint\n\ud83d\udc0d borb\n\ud83d\udc0d FPDF\n\ud83d\udc0d and others",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:09.000Z"
        },
        {
            "id": 5266,
            "username": "driscollis",
            "tweet_id": "1597418101812903941",
            "tweet_text": "5\ufe0f\u20e3 Creating a tar archive in #Python is also easy because Python includes the `tarfile` module!\n\nHere's an example that adds three files to a tar file: https://t.co/kmUvWHK9AX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FisrQlpXwAUQiDc.jpg\"]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:08.000Z"
        },
        {
            "id": 5267,
            "username": "driscollis",
            "tweet_id": "1597418097907990531",
            "tweet_text": "If you'd like to learn more about working with JSON in #Python, you might like this tutorial of mine:\n\nhttps://t.co/9KejfqxAFB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:07.000Z"
        },
        {
            "id": 5268,
            "username": "driscollis",
            "tweet_id": "1597418093336268800",
            "tweet_text": "4\ufe0f\u20e3 Python includes support for creating JSON files too using the `json` library\n\nHere is an example: https://t.co/fXszn6kLuH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FisrQZLWAAELLB0.jpg\"]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Others",
            "created_at": "2022-11-29T02:32:06.000Z"
        },
        {
            "id": 5269,
            "username": "driscollis",
            "tweet_id": "1597418089452290053",
            "tweet_text": "You can learn more about working with XML in Python in my tutorial:\n\nhttps://t.co/6jLHenCYqJ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Others",
            "created_at": "2022-11-29T02:32:05.000Z"
        },
        {
            "id": 5270,
            "username": "driscollis",
            "tweet_id": "1597418084683419649",
            "tweet_text": "3\ufe0f\u20e3 Create an XML file with #Python. Python actually has several different XML libraries built-in.\n\nOne of the easiest to use is ElementTree, but Python also has support for DOM if that's your thing.\n\nThe following example uses ElementTree to create a simple XML file https://t.co/M71ppLyh9r",
            "tweet_media": "[\"https://pbs.twimg.com/media/FisrQKgXgAM_oqe.jpg\"]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:04.000Z"
        },
        {
            "id": 5271,
            "username": "driscollis",
            "tweet_id": "1597418080644259842",
            "tweet_text": "You can learn more about reading and writing CSV files @mousevspython here:\n\nhttps://t.co/ltMtWHLYrk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Others",
            "created_at": "2022-11-29T02:32:03.000Z"
        },
        {
            "id": 5272,
            "username": "driscollis",
            "tweet_id": "1597418076164833280",
            "tweet_text": "2\ufe0f\u20e3 Creating a CSV file with #Python can be accomplished using the `csv` module\n\nHere's a small example: https://t.co/NKZ6QSRT6n",
            "tweet_media": "[\"https://pbs.twimg.com/media/FisrP7yWQAE-qtL.jpg\"]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:02.000Z"
        },
        {
            "id": 5273,
            "username": "driscollis",
            "tweet_id": "1597418071790166016",
            "tweet_text": "1\ufe0f\u20e3 Creating a text file with #Python is a breeze! The recommended method is to use Python's `with` statement as it will automatically close the file for you\n\nThat means you can create a text file with TWO lines of code if you want to: https://t.co/pJxPkgsJuI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FisrPwOXoAE75OL.jpg\"]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:01.000Z"
        },
        {
            "id": 5274,
            "username": "driscollis",
            "tweet_id": "1597418067751043074",
            "tweet_text": "Today I am going to show you how to create 7\ufe0f\u20e3 different file types with #Python:\n\n\ud83d\udc0d Text file\n\ud83d\udc0d CSV\n\ud83d\udc0d XML\n\ud83d\udc0d JSON\n\ud83d\udc0d Tar file\n\ud83d\udc0d PDF\n\ud83d\udc0d Excel\n\nJoin me for this fun \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597418067751043074",
            "tweet_type": "Python tips",
            "created_at": "2022-11-29T02:32:00.000Z"
        },
        {
            "id": 5275,
            "username": "driscollis",
            "tweet_id": "1597334487037362178",
            "tweet_text": "#Python includes a `float()` function as one of its built-ins. \n\nYou can use `float()` to create a float from an integer or string.\n\nStrings must be decimal numbers, can include whitespace or a sign.\n\nSee the following screenshot for examples:\n\n#python_builtins_by_driscollis https://t.co/gvtYvJZdHS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FirfQBhXgAMa2Vx.jpg\"]",
            "tweet_conversation_id": "1597334487037362178",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T20:59:53.000Z"
        },
        {
            "id": 5276,
            "username": "driscollis",
            "tweet_id": "1597298522516525058",
            "tweet_text": "What did you do with #Python last week? \ud83d\udc0d\n\nI did some more work on The Python Quiz Book",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597298522516525058",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T18:36:58.000Z"
        },
        {
            "id": 5277,
            "username": "driscollis",
            "tweet_id": "1597245432937123841",
            "tweet_text": "There are two ways to create an empty dictionary in #Python\n\nHere's how: https://t.co/hdK2mH9AVe",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiqOPjrWIAEv4fi.png\"]",
            "tweet_conversation_id": "1597245419226271744",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T15:06:01.000Z"
        },
        {
            "id": 5278,
            "username": "driscollis",
            "tweet_id": "1597245428243873792",
            "tweet_text": "You can also create a #Python dictionary by using the `dict()` function https://t.co/Hq0ke6UH75",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiqOPVSXgAAdCT-.jpg\"]",
            "tweet_conversation_id": "1597245419226271744",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T15:06:00.000Z"
        },
        {
            "id": 5279,
            "username": "driscollis",
            "tweet_id": "1597245423529340928",
            "tweet_text": "You can create a #Python dictionary in several different ways. \n\nThe following shows the most common method of dictionary creation followed by using a dictionary comprehension https://t.co/OraCOlDiww",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiqOPJCWQAAlVtO.jpg\"]",
            "tweet_conversation_id": "1597245419226271744",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T15:05:59.000Z"
        },
        {
            "id": 5280,
            "username": "driscollis",
            "tweet_id": "1597245419226271744",
            "tweet_text": "Let's talk about creating dictionaries with #Python \ud83d\udc0d\n\nA dictionary is a key / value pair. The key must be of an immutable type, such as an integer or a string. The value can be of any type\n\n\ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597245419226271744",
            "tweet_type": "Python tips",
            "created_at": "2022-11-28T15:05:57.000Z"
        },
        {
            "id": 5281,
            "username": "driscollis",
            "tweet_id": "1596969208612622343",
            "tweet_text": "Thanks for reading my fun little thread on #Python Easter eggs! \ud83d\udc0d\ud83d\udc07\ud83e\udd5a\n\nFollow me for more neat content on the Python language!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:24.000Z"
        },
        {
            "id": 5282,
            "username": "driscollis",
            "tweet_id": "1596969204493664256",
            "tweet_text": "There are a few other Easter eggs mentioned in this curated list of Easter Eggs in Python on GitHub:\n\nhttps://t.co/VDWGzbS44d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Others",
            "created_at": "2022-11-27T20:48:23.000Z"
        },
        {
            "id": 5283,
            "username": "driscollis",
            "tweet_id": "1596969199909453826",
            "tweet_text": "\ud83e\udd5a7\ufe0f\u20e3 - Barry Warsaw, a longtime #Python core developer, was nominated \"Friendly Language Uncle For Life\" or FLUFL\n\nIf you do this special import, the inequality operator \"!=\" is replaced with \"&lt;&gt;\" https://t.co/25Gg07QK4F",
            "tweet_media": "[\"https://pbs.twimg.com/media/FimS_jWXEAUDAw_.jpg\"]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:22.000Z"
        },
        {
            "id": 5284,
            "username": "driscollis",
            "tweet_id": "1596969195002019841",
            "tweet_text": "\ud83e\udd5a6\ufe0f\u20e3 - This Easter Egg is kind of tricky. It's for the math nerds in #Python\n\nIf you hash infinity in Python, you get back a representation of Pi\n\nIf you hash NAN, you will get zero https://t.co/GfoDkdnkjn",
            "tweet_media": "[\"https://pbs.twimg.com/media/FimS_VHX0AE_iHv.png\"]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:20.000Z"
        },
        {
            "id": 5285,
            "username": "driscollis",
            "tweet_id": "1596969190438551553",
            "tweet_text": "\ud83e\udd5a5\ufe0f\u20e3 - Let's try and import braces in #Python!\n\nNope! That Easter Egg won't let us! https://t.co/FdJeoPMc1j",
            "tweet_media": "[\"https://pbs.twimg.com/media/FimS_HJWAAAgxTG.jpg\"]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:19.000Z"
        },
        {
            "id": 5286,
            "username": "driscollis",
            "tweet_id": "1596969185791221760",
            "tweet_text": "\ud83e\udd5a4\ufe0f\u20e3 - Create \"Hello World\" with an import in #Python! https://t.co/yh32LXKt3A",
            "tweet_media": "[\"https://pbs.twimg.com/media/FimS-7oXkAEM8hc.png\"]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:18.000Z"
        },
        {
            "id": 5287,
            "username": "driscollis",
            "tweet_id": "1596969181517430784",
            "tweet_text": "\ud83e\udd5a3\ufe0f\u20e3 - The next most well-known Easter egg in #Python is probably \"import antigravity\"\n\nIf you type that in your Python REPL, you will be taken to this XKCD comic: https://t.co/znMLm2WGEz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:17.000Z"
        },
        {
            "id": 5288,
            "username": "driscollis",
            "tweet_id": "1596969176438296577",
            "tweet_text": "\ud83e\udd5a2\ufe0f\u20e3 - What you might not know is that Zen of Python's source is really interesting too:\n\nhttps://t.co/nRsIGBZApx https://t.co/OMypYJoWW3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FimS-tbWIAESHrx.jpg\"]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Others",
            "created_at": "2022-11-27T20:48:16.000Z"
        },
        {
            "id": 5289,
            "username": "driscollis",
            "tweet_id": "1596969171266334720",
            "tweet_text": "\ud83e\udd5a1\ufe0f\u20e3 - The most famous #Python Easter egg is probably The Zen of Python, which you will see if you \"import this\" https://t.co/Q9c5uBPtMR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FimS-d2XkAAHYaz.jpg\"]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:15.000Z"
        },
        {
            "id": 5290,
            "username": "driscollis",
            "tweet_id": "1596969166770212868",
            "tweet_text": "#Python has several Easter eggs built in! \ud83d\udc0d\ud83e\udd5a\ud83d\udc23\ud83d\udc07\n\nAn Easter egg is a fun little surprise in a programming language, video game or movie. \n\nLet's talk about some of Python's cool Easter eggs!\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596969166770212868",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T20:48:14.000Z"
        },
        {
            "id": 5291,
            "username": "driscollis",
            "tweet_id": "1596860410417872896",
            "tweet_text": "#Python's `collections` module is full of fun little tools.\n\nOne example is `deque`, which is a list-like container with fast appends and pops on either end.\n\nDeques support thread-safe, memory efficient appends and pops \ud83d\udc0d\ud83d\udd25\n\nHere are a few examples using special deque methods: https://t.co/VKekHQEEIh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FikwFCrWIAIOFlK.jpg\"]",
            "tweet_conversation_id": "1596860410417872896",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T13:36:04.000Z"
        },
        {
            "id": 5292,
            "username": "driscollis",
            "tweet_id": "1596807510287323137",
            "tweet_text": "Need to get a (key, value) pair from a #Python dictionary? Then use `popitem()`!\n\nThe pairs are returned in last-in first-out (LIFO) order. If called on an empty dictionary, you will receive a `KeyError` https://t.co/wlWlEaZ2Zb",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fij_970XwAE1Yp1.jpg\"]",
            "tweet_conversation_id": "1596807510287323137",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T10:05:52.000Z"
        },
        {
            "id": 5293,
            "username": "driscollis",
            "tweet_id": "1596692329238515712",
            "tweet_text": "Thanks for joining me on this thread about the handy `defaultdict` class in #Python's `collections` module \ud83d\udc0d\ud83d\udd25",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T02:28:11.000Z"
        },
        {
            "id": 5294,
            "username": "driscollis",
            "tweet_id": "1596692325140496384",
            "tweet_text": "You can also check out the Python docs for more information on `defaultdict`:\n\nhttps://t.co/B9eQ6YMh83",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Others",
            "created_at": "2022-11-27T02:28:10.000Z"
        },
        {
            "id": 5295,
            "username": "driscollis",
            "tweet_id": "1596692321168408578",
            "tweet_text": "You can learn more about `defaultdict` in my tutorial on @mousevspython\n\nhttps://t.co/yUNjveDlnk",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Others",
            "created_at": "2022-11-27T02:28:09.000Z"
        },
        {
            "id": 5296,
            "username": "driscollis",
            "tweet_id": "1596692316470710272",
            "tweet_text": "You can even use a #Python `lambda` as your factory in a `defaultdict`\n\nHere's an example: https://t.co/ybgGz55cs9",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiiXLqOWYAAD6lw.jpg\"]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T02:28:08.000Z"
        },
        {
            "id": 5297,
            "username": "driscollis",
            "tweet_id": "1596692310989099009",
            "tweet_text": "Let's look at another example where you use a list for your factory.\n\nThe regular `dict` example is pretty similar to the string example from before. For the `defaultdict` example, you use the `list` factory instead of an `int` to clean up the code https://t.co/7Kz0rcNeir",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiiXLQKWQAAxTM_.jpg\", \"https://pbs.twimg.com/media/FiiXLdOXkAEfl6E.jpg\"]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Others",
            "created_at": "2022-11-27T02:28:06.000Z"
        },
        {
            "id": 5298,
            "username": "driscollis",
            "tweet_id": "1596692306442199040",
            "tweet_text": "Now if you use a `defaultdict` with an `int` factory, you can get rid of the conditional statement entirely, which makes your code shorter and easier to read! \ud83d\udc0d\ud83d\udd25 https://t.co/7E4UDqTYXv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiiXK3bXEAA-WS3.jpg\", \"https://pbs.twimg.com/media/FiiXLD7XwAAQeEw.jpg\"]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Others",
            "created_at": "2022-11-27T02:28:05.000Z"
        },
        {
            "id": 5299,
            "username": "driscollis",
            "tweet_id": "1596692302046658560",
            "tweet_text": "Let's start out by creating a regular dictionary so you can see how `defaultdict` might help clean up your code.\n\nHere you create a dictionary based on words in a string using a conditional statement to add the various words.\n\nYou can also see the output in the 2nd screenshot https://t.co/ZVS9RTfnIt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FiiXKd8WAAEwPKK.jpg\", \"https://pbs.twimg.com/media/FiiXKrjWIAAbt2S.jpg\"]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Others",
            "created_at": "2022-11-27T02:28:04.000Z"
        },
        {
            "id": 5300,
            "username": "driscollis",
            "tweet_id": "1596692297940635648",
            "tweet_text": "Another great tool in #Python's `collections` module is the `defaultdict`! \ud83d\udc0d\ud83d\udd25\n\n`defaultdict` is a subclass of the built-in dict class where the first argument is a factory attribute.\n\n\ud83e\uddf5\ud83d\udc0d\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596692297940635648",
            "tweet_type": "Python tips",
            "created_at": "2022-11-27T02:28:03.000Z"
        },
        {
            "id": 5301,
            "username": "driscollis",
            "tweet_id": "1596443126083866629",
            "tweet_text": "Tony Roberts, creator of the PyXLL package, wrote up this create new article for @mousevspython on the topic of asyncio and batch APIs  \ud83d\udc0d\ud83d\udd25\n\nCheck it out! #Python\n\nhttps://t.co/uCy8ginDTH",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596443126083866629",
            "tweet_type": "Python tips",
            "created_at": "2022-11-26T09:57:56.000Z"
        },
        {
            "id": 5302,
            "username": "driscollis",
            "tweet_id": "1596334926340976640",
            "tweet_text": "I also have a Black Friday sale on my #Python eBooks on  @gumroad too. You can get $10 off any book! \ud83d\udc0d\ud83d\udcda\n\nUse this code: black2022\n\nhttps://t.co/fQLDF197Yf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596334926340976640",
            "tweet_type": "Python tips",
            "created_at": "2022-11-26T02:47:59.000Z"
        },
        {
            "id": 5303,
            "username": "driscollis",
            "tweet_id": "1596319554116149248",
            "tweet_text": "The Python Quiz Book is now in early release!\n\nGet the first 40+ quizzes and their answers today\n\nLearn about:\n\n\ud83d\udc0d f-strings\n\ud83d\udc0d data types\n\ud83d\udc0d comprehensions\n\ud83d\udc0d iterators and generators\n\ud83d\udc0d and lots more!\n\nhttps://t.co/gfBDhnm1r8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596319554116149248",
            "tweet_type": "Others",
            "created_at": "2022-11-26T01:46:54.000Z"
        },
        {
            "id": 5304,
            "username": "bascodes",
            "tweet_id": "1606530329606512642",
            "tweet_text": "Happy Holidays and a Merry Christmas to those who celebrate.\n\n\ud83c\udf84\ud83c\udf81\u2603\ufe0f\ud83c\udf85\n\nIf you do: What day do you consider \"Christmas\"? 24th? 25th?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606530329606512642",
            "tweet_type": "Others",
            "created_at": "2022-12-24T06:00:53.000Z"
        },
        {
            "id": 5305,
            "username": "driscollis",
            "tweet_id": "1606530326003589120",
            "tweet_text": "It's Christmas Eve \ud83d\udc0d\ud83c\udf84! Today I am going to attempt to give away 400 eBooks on #Python every 2.5 hours\n\nIf you'd rather support me, you can purchase a book and $10 off ANY of my books on Gumroad using the following code:\n\nchristmas22\n\nhttps://t.co/mzHfFeTcKg",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606530326003589120",
            "tweet_type": "Python tips",
            "created_at": "2022-12-24T06:00:52.000Z"
        },
        {
            "id": 5306,
            "username": "driscollis",
            "tweet_id": "1606567914684964866",
            "tweet_text": "In case you missed it, you can get Python 101: 2nd Edition for FREE today!\n\nStart learning #Python this holiday! \ud83d\udc0d\ud83c\udf84\n\nHere's a link:\n\nhttps://t.co/3g1XXo6Jb7",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606567914684964866",
            "tweet_type": "Python tips",
            "created_at": "2022-12-24T08:30:14.000Z"
        },
        {
            "id": 5307,
            "username": "driscollis",
            "tweet_id": "1606605574719905794",
            "tweet_text": "Get 50 FREE copies of Python 201: Intermediate Python as a part of my Christmas Eve promo!\n\nMerry Christmas! \ud83d\udc0d\ud83c\udf84\n\nhttps://t.co/sf35MWlxbo",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606605574719905794",
            "tweet_type": "Others",
            "created_at": "2022-12-24T10:59:52.000Z"
        },
        {
            "id": 5308,
            "username": "driscollis",
            "tweet_id": "1606643473112858625",
            "tweet_text": "Get 50 FREE copies of Jupyter Notebook 101 as a part of my Christmas Eve promo!\n\nMerry Christmas! \ud83d\udc0d\ud83c\udf84\n\nhttps://t.co/kJREOBUNuD",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606643473112858625",
            "tweet_type": "Others",
            "created_at": "2022-12-24T13:30:28.000Z"
        },
        {
            "id": 5309,
            "username": "testdrivenio",
            "tweet_id": "1606653875871571968",
            "tweet_text": "Deploying Spark on Kubernetes\n\nhttps://t.co/CS2rg2qwmk\n\nThis post details how to deploy Spark on a Kubernetes cluster.\n\n#Spark #Kubernetes #Docker @ApacheSpark",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606653875871571968",
            "tweet_type": "Others",
            "created_at": "2022-12-24T14:11:48.000Z"
        },
        {
            "id": 5310,
            "username": "driscollis",
            "tweet_id": "1606661066418683909",
            "tweet_text": "Just to be clear, this is 400 total, not 400 copies of each book",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606530326003589120",
            "tweet_type": "Others",
            "created_at": "2022-12-24T14:40:23.000Z"
        },
        {
            "id": 5311,
            "username": "bascodes",
            "tweet_id": "1606667982431715335",
            "tweet_text": "What do you call a Python which is \ud835\udc1e\ud835\udc31\ud835\udc1a\ud835\udc1c\ud835\udc2d\ud835\udc25\ud835\udc32 3.14m long?\n\nA \u03c0-thon",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606667982431715335",
            "tweet_type": "Others",
            "created_at": "2022-12-24T15:07:52.000Z"
        },
        {
            "id": 5312,
            "username": "bascodes",
            "tweet_id": "1606667044480589829",
            "tweet_text": "All I want for Christmas is\u2026?\n\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606667044480589829",
            "tweet_type": "Others",
            "created_at": "2022-12-24T15:04:08.000Z"
        },
        {
            "id": 5313,
            "username": "driscollis",
            "tweet_id": "1606681077787115521",
            "tweet_text": "Get 50 FREE copies of ReportLab: PDF Processing with Python as a part of my Christmas Eve promo!\n\nMerry Christmas! \ud83d\udc0d\ud83c\udf84\n\nhttps://t.co/yMDVwQvduz",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606681077787115521",
            "tweet_type": "Others",
            "created_at": "2022-12-24T15:59:54.000Z"
        },
        {
            "id": 5314,
            "username": "driscollis",
            "tweet_id": "1606680061221879808",
            "tweet_text": "Sorry. This link was screwed up. I re-enabled it and it should work now https://t.co/zQtH3kd0fB",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606680061221879808",
            "tweet_type": "Others",
            "created_at": "2022-12-24T15:55:51.000Z"
        },
        {
            "id": 5315,
            "username": "testdrivenio",
            "tweet_id": "1606688659935473664",
            "tweet_text": "Python tip:\n\nTuples are immutable, meaning they can not change.\nMore precisely, the tuple itself - its length and references - can't change. \n\nBut if a tuple contains (a reference to) a mutable object, that object can change. https://t.co/UsC5toD5wv",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkwa0gUaEAEs5pa.png\"]",
            "tweet_conversation_id": "1606688659935473664",
            "tweet_type": "Python tips",
            "created_at": "2022-12-24T16:30:02.000Z"
        },
        {
            "id": 5316,
            "username": "alexxubyte",
            "tweet_id": "1606691232305905665",
            "tweet_text": "Next week, we will cover:\n\n\ud83d\udd39What is cloud native\n\ud83d\udd39Git commands\n\ud83d\udd39Types of database indexes\n\ud83d\udd39CAP theorem\n\ud83d\udd39Short/long polling\n\n\ud835\udc03\ud835\udc28\ud835\udc27'\ud835\udc2d \ud835\udc26\ud835\udc22\ud835\udc2c\ud835\udc2c \ud835\udc28\ud835\udc2e\ud835\udc2d \ud835\udc28\ud835\udc27 \ud835\udc22\ud835\udc26\ud835\udc29\ud835\udc28\ud835\udc2b\ud835\udc2d\ud835\udc1a\ud835\udc27\ud835\udc2d \ud835\udc2e\ud835\udc29\ud835\udc1d\ud835\udc1a\ud835\udc2d\ud835\udc1e\ud835\udc2c \ud835\udc1a\ud835\udc27\ud835\udc1d \ud835\udc1e\ud835\udc31\ud835\udc1c\ud835\udc25\ud835\udc2e\ud835\udc2c\ud835\udc22\ud835\udc2f\ud835\udc1e \ud835\udc1c\ud835\udc28\ud835\udc27\ud835\udc2d\ud835\udc1e\ud835\udc27\ud835\udc2d \u2013 subscribe now: https://t.co/dkjDPxrTOt https://t.co/eWE1PSt7qT",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkwdKK8akAE7YsD.jpg\"]",
            "tweet_conversation_id": "1606691232305905665",
            "tweet_type": "Others",
            "created_at": "2022-12-24T16:40:15.000Z"
        },
        {
            "id": 5317,
            "username": "driscollis",
            "tweet_id": "1606718824253997056",
            "tweet_text": "Get 50 FREE copies of Creating GUI Applications with wxPython as a part of my Christmas Eve promo!\n\nMerry Christmas! \ud83d\udc0d\ud83c\udf84\n\nhttps://t.co/0M8vLY4AXb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606718824253997056",
            "tweet_type": "Others",
            "created_at": "2022-12-24T18:29:53.000Z"
        },
        {
            "id": 5318,
            "username": "driscollis",
            "tweet_id": "1606756571232493568",
            "tweet_text": "Get 50 FREE copies of Pillow: Image Processing with Python as a part of my Christmas Eve promo!\n\nMerry Christmas! \ud83d\udc0d\ud83c\udf84\n\nhttps://t.co/DhsXnsA8pa",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606756571232493568",
            "tweet_type": "Others",
            "created_at": "2022-12-24T20:59:53.000Z"
        },
        {
            "id": 5319,
            "username": "driscollis",
            "tweet_id": "1606794366848204801",
            "tweet_text": "Get 50 FREE copies of Automating Excel with Python as a part of my Christmas Eve promo!\n\nMerry Christmas! \ud83d\udc0d\ud83c\udf84\n\nhttps://t.co/plRMYzNLkT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606794366848204801",
            "tweet_type": "Others",
            "created_at": "2022-12-24T23:30:04.000Z"
        },
        {
            "id": 5320,
            "username": "driscollis",
            "tweet_id": "1606832128477597697",
            "tweet_text": "Get 50 FREE copies of The Python Quiz Book as a part of my Christmas Eve promo!\n\nMerry Christmas! \ud83d\udc0d\ud83c\udf84\n\nhttps://t.co/8uqNrBLPnl",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606832128477597697",
            "tweet_type": "Others",
            "created_at": "2022-12-25T02:00:07.000Z"
        },
        {
            "id": 5321,
            "username": "linuxopsys",
            "tweet_id": "1606566881246457858",
            "tweet_text": "Linux user using KeePassXC #LastPass https://t.co/4ewDtrRzsk",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkur6o8aYAE2Yki.png\"]",
            "tweet_conversation_id": "1606566881246457858",
            "tweet_type": "Others",
            "created_at": "2022-12-24T08:26:07.000Z"
        },
        {
            "id": 5322,
            "username": "linuxopsys",
            "tweet_id": "1606296145054953473",
            "tweet_text": "If you did found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:19.000Z"
        },
        {
            "id": 5323,
            "username": "linuxopsys",
            "tweet_id": "1606296142437789696",
            "tweet_text": "This information should be sufficient to help you understand command exist status codes and the exit command.\n\nThat's all! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:18.000Z"
        },
        {
            "id": 5324,
            "username": "linuxopsys",
            "tweet_id": "1606296139585556480",
            "tweet_text": "Always remember that if a script ends with exit without specifying a parameter, the script exit code is the last command executed in the script.\n\nThis is the same as just exit $? or leaving the script without exit at all. https://t.co/Tpegad6WBq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkq10v_UcAARTl0.png\"]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:17.000Z"
        },
        {
            "id": 5325,
            "username": "linuxopsys",
            "tweet_id": "1606296132946051072",
            "tweet_text": "Here is the syntax for the exit command:\n\n$ exit N\n\nWhen the exit command is used in shell scripts, the value passed to it as an argument is returned to the shell as an exit code.\n\nHere is an example script of using exit command in shell scritps: https://t.co/20RHcW5A1R",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkq10G5UYAEuACW.png\", \"https://pbs.twimg.com/media/Fkq10VhUoAEKoQF.png\"]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:16.000Z"
        },
        {
            "id": 5326,
            "username": "linuxopsys",
            "tweet_id": "1606296122250633222",
            "tweet_text": "The exit command is used to exit the current shell. It takes a number as a parameter and exits the shell with a status of the number your passed as a parameter value.\n\nIf no parameters were supplied, it would return the status of the most recently executed command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:13.000Z"
        },
        {
            "id": 5327,
            "username": "linuxopsys",
            "tweet_id": "1606296119645900801",
            "tweet_text": "The bash exist command:\n\nNow that you know what command exist status codes are, let's look at how to set them using the exit command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:13.000Z"
        },
        {
            "id": 5328,
            "username": "linuxopsys",
            "tweet_id": "1606296116751802368",
            "tweet_text": "In the preceding example, echo $? prints the exit code of the head command and its zero. To prove this, execute the ls command on a non-existent directory.\n\nHere you can see the ls command fails but we still get the status code of zero.\n\n$ ls -lah nulldir | head -n e https://t.co/EiJWky91XA",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkq1zZkUoAELhlT.png\"]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:12.000Z"
        },
        {
            "id": 5329,
            "username": "linuxopsys",
            "tweet_id": "1606296109961183232",
            "tweet_text": "The command's status code can be used for debugging and to determine why it failed. The man pages for each command include information about the exit codes.\n\nWhen chaining commands using pipes, the exist status code is that of the last command in the chain.\n\n$ ls -lah | head -n 3 https://t.co/SoDedQYyt1",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkq1zAvUEAAwRTL.png\"]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:10.000Z"
        },
        {
            "id": 5330,
            "username": "linuxopsys",
            "tweet_id": "1606296103179075585",
            "tweet_text": "Because the batcat command completed successfully and without error, the exit code is zero, as expected.\n\nIf you attempt to run batcat command on an not-existing file, the exit code will be non-zero as shown below:\n\n$ batcat nullfile https://t.co/Ml4Pjf10qr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkq1ynbUUAExP-8.png\"]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:09.000Z"
        },
        {
            "id": 5331,
            "username": "linuxopsys",
            "tweet_id": "1606296096325570560",
            "tweet_text": "The $?  is a special shell variable that stores the exit status of the most recently run command:\n\n$ echo $? https://t.co/TLu9R0zStE",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fkq1yODUAAACp3j.png\"]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:07.000Z"
        },
        {
            "id": 5332,
            "username": "linuxopsys",
            "tweet_id": "1606296087626625024",
            "tweet_text": "Exit Status\n\nWhen a shell command exits, whether successfully without any errors or unsuccessfully with errors , it returns an exit code.\n\nAn exit code of zero indicates that the command completed properly without any errors, while a non-zero indicates that an error occurred.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:05.000Z"
        },
        {
            "id": 5333,
            "username": "linuxopsys",
            "tweet_id": "1606296085164462080",
            "tweet_text": "In this thread I will go over the built-in bash exit command as well as the exit statuses of the commands that have been executed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:04.000Z"
        },
        {
            "id": 5334,
            "username": "linuxopsys",
            "tweet_id": "1606296082559819776",
            "tweet_text": "When writing Bash scripts, you will frequently need to stop the execution of a script when a certain condition is met or perfom some actions based on a command's exit code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Others",
            "created_at": "2022-12-23T14:30:04.000Z"
        },
        {
            "id": 5335,
            "username": "linuxopsys",
            "tweet_id": "1606296080072683520",
            "tweet_text": "What exactly are bash exit codes:\ud83e\udd14\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1606296080072683520",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-23T14:30:03.000Z"
        },
        {
            "id": 5336,
            "username": "linuxopsys",
            "tweet_id": "1605226827537993729",
            "tweet_text": "That's it! Thank you for making it this far. Hopefully, you'll find this thread useful. Any additions are welcome.\n\nCheck us out @linuxopsys if you liked this thread!! We gonna be tweeting more about Linux, sysadmin and devops.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:14.000Z"
        },
        {
            "id": 5337,
            "username": "linuxopsys",
            "tweet_id": "1605226824673333248",
            "tweet_text": "The -c option clears your current history and starts adding commands from scratch, while the -d option deletes the specified command. The -d option only works with BASH, not ZSH.\n\n$ history -c                                       $history -d  380 376 https://t.co/ufMwhQftDr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpSPFUcAEpkke.png\", \"https://pbs.twimg.com/media/FkbpSccUYAMHHAN.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:13.000Z"
        },
        {
            "id": 5338,
            "username": "linuxopsys",
            "tweet_id": "1605226815324241920",
            "tweet_text": "6. Clearing your history\n\nIf you feel there are too many commands and you no longer want them, or if you don't want people or other users to know the commands you've been using throughout your session for security reasons, you can simply clear with the option '-c' or -d.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:11.000Z"
        },
        {
            "id": 5339,
            "username": "linuxopsys",
            "tweet_id": "1605226812371374080",
            "tweet_text": "The above option gives you only the last argument of the previous command. If you want all the arguments, use this the *! https://t.co/WOZdAHCSig",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1605226804024745984/pu/vid/552x418/AbPJG0n79117Iqpk.mp4?tag=12\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:10.000Z"
        },
        {
            "id": 5340,
            "username": "linuxopsys",
            "tweet_id": "1605226802057605121",
            "tweet_text": "Assume you were reading a file with the cat command and decided you needed to edit it with vim or another editor of your choice. You use the '!$' shortcut instead of typing the entire file name. https://t.co/XxoUJFjg9r",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1605226793790607361/pu/vid/552x418/WYuOhFZEeV_VJXjp.mp4?tag=12\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:07.000Z"
        },
        {
            "id": 5341,
            "username": "linuxopsys",
            "tweet_id": "1605226792087826432",
            "tweet_text": "5. Reuse arguments from previous commands in your history\n\nAnother fantastic history shortcut is to use!$ and!*, which will substitute/place the last argument and arguments of the last command into your line, respectively.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:05.000Z"
        },
        {
            "id": 5342,
            "username": "linuxopsys",
            "tweet_id": "1605226789587992577",
            "tweet_text": "This is very handy if you want to correct typos or mistakes on long commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:04.000Z"
        },
        {
            "id": 5343,
            "username": "linuxopsys",
            "tweet_id": "1605226786727415811",
            "tweet_text": "4. Correcting typos or mistakes on previous commands:\n\nYou can use the ^foor^bar command to edit the command you ran previously and execute it again.\n\n$ sodu mkdir demo\n$ ^sodu^sudo\n\nThis will replace \"sodu\" with \"sudo\" and re-rerun the command. https://t.co/9pqCHs6WRD",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1605226778187821057/pu/vid/552x418/O1J9EpY2v_iW_bhF.mp4?tag=12\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:04.000Z"
        },
        {
            "id": 5344,
            "username": "linuxopsys",
            "tweet_id": "1605226776434614272",
            "tweet_text": "If you have any doubts about a command, rather than running it straight away, print it by appending ':p' to the end of it. So you use it like '!echo:p', '!23:p', and so on.\n\nThere is no need to do this if you are using ZSH, as it will display the command before executing it: https://t.co/bpmxZOhQib",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpPn1UAAABVfM.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:01.000Z"
        },
        {
            "id": 5345,
            "username": "linuxopsys",
            "tweet_id": "1605226770008985600",
            "tweet_text": "You can also run the last command that begins with a specific text, such as this: ! text\n\nAssume you ran echo command before and want to run it again. You can put it to use as follows:\n\n$ !echo https://t.co/pFM8IjjqUy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpPQUUUAAeVls.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:41:00.000Z"
        },
        {
            "id": 5346,
            "username": "linuxopsys",
            "tweet_id": "1605226763725914117",
            "tweet_text": "You can rerun the previous command by using '!!' or '!-1'. This is useful when you forget to run a command with sudo privileges. https://t.co/w78kzvB8EE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpO4lUEAAzy7G.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:58.000Z"
        },
        {
            "id": 5347,
            "username": "linuxopsys",
            "tweet_id": "1605226757497311233",
            "tweet_text": "# can have either a negative or positive value.\n\n$ !364 https://t.co/7Zx5mOVBpl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpOhoUUAArCHz.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:57.000Z"
        },
        {
            "id": 5348,
            "username": "linuxopsys",
            "tweet_id": "1605226751382020098",
            "tweet_text": "3. Quickly executing commands from history:\n\nAnother useful feature of bash/zsh is the ability to run commands from the history using the ! command. That is, you can execute a command by typing !#, where # is the command's position/number in the history.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:55.000Z"
        },
        {
            "id": 5349,
            "username": "linuxopsys",
            "tweet_id": "1605226748831887360",
            "tweet_text": "You can cycle through the options by pressing CTRL + R repeatedly, and once you find the command you want, press CTRL + O or simply the 'enter' key to select and run it. Simply press ESC or CTRL + G to exit the reverse search.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:55.000Z"
        },
        {
            "id": 5350,
            "username": "linuxopsys",
            "tweet_id": "1605226746088787968",
            "tweet_text": "This is a convenient method because it allows us to execute the command once you find it, as opposed to grep, which requires us to retype the command.\n\nFor example, searching the 'alias' command: https://t.co/LxhWAJLYLE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpN09UEAA73sR.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:54.000Z"
        },
        {
            "id": 5351,
            "username": "linuxopsys",
            "tweet_id": "1605226739600224256",
            "tweet_text": "- Using CTRL + R shortcut\n\nA better and more convenient way to search through history is to use the CTRL + R shortcut key to initiate a reverse search and then type the string you're looking for.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:53.000Z"
        },
        {
            "id": 5352,
            "username": "linuxopsys",
            "tweet_id": "1605226736760680449",
            "tweet_text": "- Using grep\n\nTo search a command from history using grep, run the history command and pipe the output to the command, then specify an expression to search for as a grep option.\n\n$ history | grep \"alias\" https://t.co/Q5zkG9bbGC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpNRyUcAE0ZW6.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:52.000Z"
        },
        {
            "id": 5353,
            "username": "linuxopsys",
            "tweet_id": "1605226730142121985",
            "tweet_text": "2. Searching commands  from history:\n\nThere are two or more methods for searching through the bash history. Personally, I prefer to use the history command in conjunction with the grep command or a convenient shortcut to perform a reverse search through the history.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:50.000Z"
        },
        {
            "id": 5354,
            "username": "linuxopsys",
            "tweet_id": "1605226727218610176",
            "tweet_text": "This only works in bash; I couldn't find a way to do it in zsh using history options or arguments. Please let me know in the comments if you have.\n\nbut you can combine the history command with tail as a workaround:\n\n$ history | tail -n 6 https://t.co/GSDqRFiVUU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpMvpVsAEVHrF.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:50.000Z"
        },
        {
            "id": 5355,
            "username": "linuxopsys",
            "tweet_id": "1605226720864243712",
            "tweet_text": "For instance, to display only the last six commands from the history:\n\n$ history 6 https://t.co/HB8jqKESAo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpMYmUoAIFetK.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:48.000Z"
        },
        {
            "id": 5356,
            "username": "linuxopsys",
            "tweet_id": "1605226714681946117",
            "tweet_text": "If you don't want your screen to be cluttered when viewing your history, you can limit the number of lines to display by using the history command with a numeric argument, where the value is the number of lines to display.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:47.000Z"
        },
        {
            "id": 5357,
            "username": "linuxopsys",
            "tweet_id": "1605226711884320770",
            "tweet_text": "Simply assign a new value to the variable to change the size, for example, changing the history size to 500 lines run the following command:\n\n$ HISTSIZE=500 https://t.co/tDWC1Mzp9P",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpL2EVsAMwmsL.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:46.000Z"
        },
        {
            "id": 5358,
            "username": "linuxopsys",
            "tweet_id": "1605226705269903361",
            "tweet_text": "This command will display a list of a hundred or thousand commands stored in your history. The size is determined by the $HISTSIZE variable, which can be easily changed if desired. https://t.co/OxMeYYtPDU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpLfJUAAA0Xnr.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:44.000Z"
        },
        {
            "id": 5359,
            "username": "linuxopsys",
            "tweet_id": "1605226699112583170",
            "tweet_text": "1. Viewing the history\n\nThe history bash built-in command is the simplest way to see commands you've used previously.\n\n$ history https://t.co/bZxNXPNTcR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkbpLHJUAAADuh5.png\"]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:43.000Z"
        },
        {
            "id": 5360,
            "username": "linuxopsys",
            "tweet_id": "1605226690673643521",
            "tweet_text": "Here are 6  Linux bash/zsh history shortcuts that will save you time:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:41.000Z"
        },
        {
            "id": 5361,
            "username": "linuxopsys",
            "tweet_id": "1605226688073256961",
            "tweet_text": "Using bash/zsh history effectively will save you a significant amount of time in the Linux terminal.\n\nThis will not only save you time, but it will also make your life much easier when using the LinuxtTerminal to perform day-to-day tasks as a regular user,developer or sysadmin.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Others",
            "created_at": "2022-12-20T15:40:40.000Z"
        },
        {
            "id": 5362,
            "username": "linuxopsys",
            "tweet_id": "1605226685556609024",
            "tweet_text": "6 Linux bash/zsh history shortcuts that will save you time (every Linux user should know this):",
            "tweet_media": "[]",
            "tweet_conversation_id": "1605226685556609024",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-20T15:40:40.000Z"
        },
        {
            "id": 5363,
            "username": "linuxopsys",
            "tweet_id": "1604959780249882624",
            "tweet_text": "Make a Linux user smile in 5 words or less \ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604959780249882624",
            "tweet_type": "Others",
            "created_at": "2022-12-19T22:00:04.000Z"
        },
        {
            "id": 5364,
            "username": "linuxopsys",
            "tweet_id": "1604621917020770306",
            "tweet_text": "APK is the package manager for Alpine Linux, similar to how APT is used on other Linux distributions like Debian and Ubuntu. APK is used to install, remove, and update packages and more on on Alpine Linux system. \n\nhttps://t.co/eefWlUOI6L\n\n@alpinelinux",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604621917020770306",
            "tweet_type": "Others",
            "created_at": "2022-12-18T23:37:32.000Z"
        },
        {
            "id": 5365,
            "username": "linuxopsys",
            "tweet_id": "1604451418424737793",
            "tweet_text": "Enjoyed this?\n\nFollow us (@linuxopsys) for more amazing Linux content \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1604446873535713280",
            "tweet_type": "Others",
            "created_at": "2022-12-18T12:20:02.000Z"
        },
        {
            "id": 5366,
            "username": "linuxopsys",
            "tweet_id": "1604446873535713280",
            "tweet_text": "What Linux distribution is this? \ud83e\udd14 https://t.co/2UrxK4KJgK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FkQj7aqUcAI_X1T.jpg\"]",
            "tweet_conversation_id": "1604446873535713280",
            "tweet_type": "Others",
            "created_at": "2022-12-18T12:01:58.000Z"
        },
        {
            "id": 5367,
            "username": "linuxopsys",
            "tweet_id": "1603880249090924544",
            "tweet_text": "That's it! Thank you for making it this far. Hopefully, you'll find this thread useful. Any additions are welcome.\n\nCheck us out @linuxopsys  if you liked this thread!! We gonna be tweeting more about Linux, sysadmin and devops.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:24.000Z"
        },
        {
            "id": 5368,
            "username": "linuxopsys",
            "tweet_id": "1603880246570209281",
            "tweet_text": "111. htop - a process viewer and manager that is interactive.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:24.000Z"
        },
        {
            "id": 5369,
            "username": "linuxopsys",
            "tweet_id": "1603880244032593921",
            "tweet_text": "109. coproc - spawns a subshell in background mode and executes the designated command or executes a coprocess.\n\n110. env - executes the designated program in a modified environment or displays the value of all the environment variables.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:23.000Z"
        },
        {
            "id": 5370,
            "username": "linuxopsys",
            "tweet_id": "1603880241474043906",
            "tweet_text": "106. chpasswd - reads a file of login name and password pairs and updates the passwords.\n\n107. chsh - changes the specified user account's default shell.\n\n108. continue - resumes the next iteration of a for , while , select , or until loop.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:22.000Z"
        },
        {
            "id": 5371,
            "username": "linuxopsys",
            "tweet_id": "1603880238953295872",
            "tweet_text": "103. chgrp - changes the default group of the specified file or directory.\n\n104. chmod - changes system security permissions for the specified file or directory\n\n105. chown - changes the default owner of the specified file or directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:22.000Z"
        },
        {
            "id": 5372,
            "username": "linuxopsys",
            "tweet_id": "1603880236482846721",
            "tweet_text": "100. bash - uses the Bourne Again Shell command language to interpret commands from standard input or a file, or to launch a subshell.\n\n101. bc - Performs calculations via its programming language.\n\n102. chfn - changes the specified user account's current information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:21.000Z"
        },
        {
            "id": 5373,
            "username": "linuxopsys",
            "tweet_id": "1603880234008203264",
            "tweet_text": "98. bash - uses the Bourne Again Shell command language to interpret commands from standard input or a file, or to launch a subshell.\n\n99. bc - Performs calculations via its programming language.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:21.000Z"
        },
        {
            "id": 5374,
            "username": "linuxopsys",
            "tweet_id": "1603880231344955393",
            "tweet_text": "96. atq - shows jobs in the at utility queue.\n\n97. atrm - deletes the specified job from the at utility queue.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:20.000Z"
        },
        {
            "id": 5375,
            "username": "linuxopsys",
            "tweet_id": "1603880228417175552",
            "tweet_text": "92 - umount - unmounts a previously mounted device, directory, file, or file system.\n\n93. systemctl - used to control and manage systemd and services.\n\n94. alias - defines an alias for the specified command.\n\n95. at - runs a specified script or command at a set later time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:19.000Z"
        },
        {
            "id": 5376,
            "username": "linuxopsys",
            "tweet_id": "1603880225862864896",
            "tweet_text": "90. passwd \u2014 Change the password of a user.\n\n91. clear \u2013 clears the terminal's screen. 92. env - run a command in an altered environment\n\n91. mount - used to mount the filesystem found on a device to big tree structure(Linux filesystem) rooted at '/'.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:19.000Z"
        },
        {
            "id": 5377,
            "username": "linuxopsys",
            "tweet_id": "1603880223203680256",
            "tweet_text": "87. nohup - short for no hang up is a command in Linux systems that keep processes running even after exiting the shell or terminal.\n\n88. screen \u2013 keep a remote server session open. (It also functions as a full-screen window manager.)\n\n89. tmux is a terminal multiplexer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:18.000Z"
        },
        {
            "id": 5378,
            "username": "linuxopsys",
            "tweet_id": "1603880220515176448",
            "tweet_text": "84. killall - sends a kill signal to all instances of a specific process.\n\n85. sleep \u2013 pauses program execution for a given amount of time.\n\n86. wait \u2013 suspend script execution until all background jobs have been completed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:17.000Z"
        },
        {
            "id": 5379,
            "username": "linuxopsys",
            "tweet_id": "1603880217990139905",
            "tweet_text": "80. head - used to show the first few lines of a text file or piped data.\n\n 81. dmesg \u2013 displays the kernel ring's message buffer.\n\n82. journalctl - Tused to view systemd, kernel and journal logs.\n\n83. kill - terminates a process.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:17.000Z"
        },
        {
            "id": 5380,
            "username": "linuxopsys",
            "tweet_id": "1603880215469383680",
            "tweet_text": "75. cat \u2013 displays the contents of a file.\n\n76. tac \u2013 reverse output file contents.\n\n77. more - show file contents one screen/page at a time.\n\n78. less \u2013 identical to more, but with more features\n\n79. tail \u2013 used to show the last few lines of a text file or piped data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:16.000Z"
        },
        {
            "id": 5381,
            "username": "linuxopsys",
            "tweet_id": "1603880212936019968",
            "tweet_text": "71. useradd - create a new user or alter the default information for a new user.\n\n72. userdel - used to delete a user account and all associated files.\n\n73. usermod \u2013 used to edit or change any existing user account's properties.\n\n74. vi is a text editor.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:16.000Z"
        },
        {
            "id": 5382,
            "username": "linuxopsys",
            "tweet_id": "1603880210352308226",
            "tweet_text": "67. umask - returns, or sets, the value of the system's file mode creation mask.\n\n68. chmod \u2013 alters the access rights of file system objects.\n\n69. chown \u2013 alter the owner and group of a file.\n\n70. chroot - used to change the root directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:15.000Z"
        },
        {
            "id": 5383,
            "username": "linuxopsys",
            "tweet_id": "1603880207827337216",
            "tweet_text": "63. blkid - a command-line utility for finding and printing block device attributes.\n\n64. mkfs - create a Linux file system.\n\n65. fsck - an utility for determining the consistency of a file system.\n\n66. nc - used for just about anything under the sun involving TCP or UDP.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:14.000Z"
        },
        {
            "id": 5384,
            "username": "linuxopsys",
            "tweet_id": "1603880205268897793",
            "tweet_text": "59. curl \u2013 data transport via several network protocols. (Can handle more protocols than wget)\n\n60. dd - used to convert and copy files.\n\n61. fdisk - Modify the disk partition table.\n\n62. parted \u2013 used to create and manipulate partition tables.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:14.000Z"
        },
        {
            "id": 5385,
            "username": "linuxopsys",
            "tweet_id": "1603880202622275585",
            "tweet_text": "56. ping - sends an ICMP ECHO REQUEST to network hosts. 57. traceroute - examine the path packets follow to reach a specific host.\n\n58. wget - download files through HTTP, HTTPS, FTP, and FTPS.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:13.000Z"
        },
        {
            "id": 5386,
            "username": "linuxopsys",
            "tweet_id": "1603880200034340864",
            "tweet_text": "52. nslookup - interactively query Internet name servers (NS).\n\n53. host \u2013used for DNS (Domain Name System) lookup operations.\n\n54. dig \u2013 DNS lookup tool.\n\n55. nmcli - sused to display network device status, create, edit, activate/deactivate, and delete network connections.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:12.000Z"
        },
        {
            "id": 5387,
            "username": "linuxopsys",
            "tweet_id": "1603880197467435009",
            "tweet_text": "48. locate \u2013 in Linux, search for files.\n\n49. ps \u2013 allows you to list the status of processes running on your system easily.\n\n50. cron - execute scheduled tasks.\n\n51. mtr - is a network diagnostic tool, a combination of ping and traceroute commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:12.000Z"
        },
        {
            "id": 5388,
            "username": "linuxopsys",
            "tweet_id": "1603880194971824128",
            "tweet_text": "44. tar - is an archive utility.\n\n45. gzip - use for compression and decompression of files.\n\n46. b2zip - a compression utility comparable to gzip. It employs a distinct compression algorithm.\n\n47. zip \u2013 used for file packaging and compression (archiving).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:11.000Z"
        },
        {
            "id": 5389,
            "username": "linuxopsys",
            "tweet_id": "1603880192392380417",
            "tweet_text": "38. pwd \u2013 displays the current directory path.\n\n39. cp - copy files and directories.\n\n40. mv \u2013 move file or directories.\n\n41. rm \u2013 deletes files and directories.\n\n42. mkdir - create new directories.\n\n43. rsync - remote file transfer and synchronization.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:11.000Z"
        },
        {
            "id": 5390,
            "username": "linuxopsys",
            "tweet_id": "1603880189854785536",
            "tweet_text": "35. touch \u2013 used to create, update a computer file or directory's access and modification dates.\n\n36. man \u2013 used to read system reference manuals.\n\n37. apropos \u2013 searches manual page names and descriptions for a user-supplied keyword.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:10.000Z"
        },
        {
            "id": 5391,
            "username": "linuxopsys",
            "tweet_id": "1603880187329794048",
            "tweet_text": "31. atop \u2013 a tool for monitoring system resources in Linux.\n\n32. ssh \u2013 secure protocol used as the primary means of connecting to Linux servers remotely.\n\n33. sudo - run commands with administrative privileges. 34. cd \u2013 navigate between directories.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:09.000Z"
        },
        {
            "id": 5392,
            "username": "linuxopsys",
            "tweet_id": "1603880184775442432",
            "tweet_text": "28. iostat - provides statistics on storage I/O.\n\n29. netstat -used to show network statistics.\n\n30. ss - ss command is a simpler and faster version of the now obsolete netstat command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:09.000Z"
        },
        {
            "id": 5393,
            "username": "linuxopsys",
            "tweet_id": "1603880182284029952",
            "tweet_text": "26. vmstat - used to obtain information about memory, system processes, paging, interrupts, block I/O, disk, and CPU scheduling.\n\n27. iotop - is an interactive I/O viewer. Get a snapshot of storage r/w activity.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:08.000Z"
        },
        {
            "id": 5394,
            "username": "linuxopsys",
            "tweet_id": "1603880179419426816",
            "tweet_text": "22. dstat - allows you to view all of your system resources instantly. All-in-one vmstat, iostat, netstat, and ifstat utility.\n\n 23. Iftop is a network traffic viewer.\n\n24. nethogs - is a network traffic analyzer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:08.000Z"
        },
        {
            "id": 5395,
            "username": "linuxopsys",
            "tweet_id": "1603880176890179584",
            "tweet_text": "19. diff - used to display differences in files by comparing line by line.\n\n20. uptime \u2013 displays the system uptime as well as the load average.\n\n21. top/btop++ \u2013 shows a real-time view of running processes in Linux.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:07.000Z"
        },
        {
            "id": 5396,
            "username": "linuxopsys",
            "tweet_id": "1603880174319128576",
            "tweet_text": "15. ip - used to show or manipulate routing, devices, and tunnels.\n\n16. ls - list the contents of a directory.\n\n17. df - Displays the amount of disk space used.\n\n18. du - display a list of all the files along with their respective sizes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:06.000Z"
        },
        {
            "id": 5397,
            "username": "linuxopsys",
            "tweet_id": "1603880171580248065",
            "tweet_text": "11. free - use to get a detailed report on the system's memory usage.\n\n12. scp - securely copy files or directories over ssh.\n\n13. find - locates files using user-defined criteria.\n\n14. ncdu - provides a useful and convenient way to view disk usage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:06.000Z"
        },
        {
            "id": 5398,
            "username": "linuxopsys",
            "tweet_id": "1603880168967196672",
            "tweet_text": "8. pstree - used to show running processes in a tree (data structure).\n\n9. latest - displays a list of the most recently logged-in people.\n\n10. w \u2013 display a list of the currently logged-in user sessions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:05.000Z"
        },
        {
            "id": 5399,
            "username": "linuxopsys",
            "tweet_id": "1603880166362488833",
            "tweet_text": "5 grep - searches a file for a pattern of characters and displays all lines that match.\n\n6. awk - a scripting language used for text processing.\n\n7. sed - stream editor used to perform lots of functions on files, like searching, find and replace, insertion, or deletion.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:04.000Z"
        },
        {
            "id": 5400,
            "username": "linuxopsys",
            "tweet_id": "1603880163766214659",
            "tweet_text": "1. cut - allows you to cut out sections of a specified file or piped data and print the result to standard output.\n\n2. sort - used to sort files\n\n3. uniq - used to extract uniq occurences\n\n4. tr - utility for translating or deleting characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Others",
            "created_at": "2022-12-16T22:30:04.000Z"
        },
        {
            "id": 5401,
            "username": "linuxopsys",
            "tweet_id": "1603880161228730368",
            "tweet_text": "100+ Linux commands and their explanation (bookmark this):",
            "tweet_media": "[]",
            "tweet_conversation_id": "1603880161228730368",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-16T22:30:03.000Z"
        },
        {
            "id": 5402,
            "username": "linuxopsys",
            "tweet_id": "1602434049108111362",
            "tweet_text": "If you found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:43.000Z"
        },
        {
            "id": 5403,
            "username": "linuxopsys",
            "tweet_id": "1602434046574804992",
            "tweet_text": "That concludes today's thread; be sure to experiment with these tools and be amazed. The tools provided above are only the tip of the iceberg.\n\nThe more you learn about Linux commands the more straightforward and appealing Linux becomes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:43.000Z"
        },
        {
            "id": 5404,
            "username": "linuxopsys",
            "tweet_id": "1602434043500384256",
            "tweet_text": "7. lsd\n\nThis project is a rewrite of GNU ls with many new features such as colors, icons, a tree-view, more formatting options, and so on. The super colorls project served as a major inspiration for this project. https://t.co/K35Rwt3HPy",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjz9RIlVIAAitcW.png\"]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:42.000Z"
        },
        {
            "id": 5405,
            "username": "linuxopsys",
            "tweet_id": "1602434034310598657",
            "tweet_text": "6. zoxide\n\nzoxide is a more intelligent version of the cd command inspired by z and autojump. It remembers which directories you use the most, allowing you to \"jump\" to them with a few keystrokes. Zoxide is effective on all major shells.\n\nSounds cool right? https://t.co/23K4aP55rh",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1602433999573352448/pu/vid/572x688/SaQAZ6rTtcntHzUf.mp4?tag=12\"]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:40.000Z"
        },
        {
            "id": 5406,
            "username": "linuxopsys",
            "tweet_id": "1602433997711081472",
            "tweet_text": "5. duff\n\nIf you need a good replacement for the du command, the duff command is your best bet. Duff has the following capabilities:\n\n- Colorful, user-friendly output\n- Adapts to the theme and width of your terminal\n- Sort the results based on your requirements\n- etc https://t.co/5kjaKv8C92",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjz9OemUoAEGDvS.png\"]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:31.000Z"
        },
        {
            "id": 5407,
            "username": "linuxopsys",
            "tweet_id": "1602433990417186816",
            "tweet_text": "4. btop++\n\nAn excellent replacement for top/htop written in C++. Btop++ is a resource monitor that displays statistics and usage information for the processor, memory, disks, network, and processes. https://t.co/GzM3UIaHKl",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjz9OC-UUAUv3yM.png\"]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:29.000Z"
        },
        {
            "id": 5408,
            "username": "linuxopsys",
            "tweet_id": "1602433983395995648",
            "tweet_text": "It is familiar with symlinks, extended attributes, and Git. It's also small, fast, and only has one binary.\n\nExa attempts to be a more feature-rich, user-friendly version of ls by deliberately making some decisions differently. https://t.co/QDtv2tc8dW",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjz9NnnUYAADXAO.png\"]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:28.000Z"
        },
        {
            "id": 5409,
            "username": "linuxopsys",
            "tweet_id": "1602433975921745920",
            "tweet_text": "3. exa\n\nexa is a cool replacement for the venerable file-listing command-line program ls that comes with Unix and Linux operating systems, adding features and improving defaults. It uses colors to differentiate between file types and metadata.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:26.000Z"
        },
        {
            "id": 5410,
            "username": "linuxopsys",
            "tweet_id": "1602433972906393600",
            "tweet_text": "2. batcat\n\nDid I tell you there is a modern version of cat (batcat) with syntax highlighting for many programming languages out of the box.?\ud83e\udd14 https://t.co/6LZnxFPSJ8",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjz9NCnUUAAiU-o.png\"]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:25.000Z"
        },
        {
            "id": 5411,
            "username": "linuxopsys",
            "tweet_id": "1602433966136385536",
            "tweet_text": "This tool is useful when you only want to check the syntax of a few common commands without having to scroll through a detailed manpage. https://t.co/5mLWP4PnuJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjz9MqnVsAAx6ON.png\"]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:23.000Z"
        },
        {
            "id": 5412,
            "username": "linuxopsys",
            "tweet_id": "1602433957781331968",
            "tweet_text": "1. tldr\n\nThe TLDR (Too Long; Didn't Read) pages provides a summarized practical usage of Linux commands. They simplify man pages by providing practical examples.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:21.000Z"
        },
        {
            "id": 5413,
            "username": "linuxopsys",
            "tweet_id": "1602433955222822912",
            "tweet_text": "7 command line tools that will change the way you use Linux (instantly) \ud83e\uddf5:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1602433955222822912",
            "tweet_type": "Others",
            "created_at": "2022-12-12T22:43:21.000Z"
        },
        {
            "id": 5414,
            "username": "linuxopsys",
            "tweet_id": "1601846608445861889",
            "tweet_text": "Follow us (@linuxopsys) for more byte sized Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601846594621448193",
            "tweet_type": "Others",
            "created_at": "2022-12-11T07:49:26.000Z"
        },
        {
            "id": 5415,
            "username": "linuxopsys",
            "tweet_id": "1601846605350465536",
            "tweet_text": "This only works when run from a shell prompt. If used in a shell script, it will instead display the script's name. https://t.co/oT1WpSL48V",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1601846596953526272/pu/vid/556x558/cJobBKqOyezF3bxE.mp4?tag=12\"]",
            "tweet_conversation_id": "1601846594621448193",
            "tweet_type": "Others",
            "created_at": "2022-12-11T07:49:26.000Z"
        },
        {
            "id": 5416,
            "username": "linuxopsys",
            "tweet_id": "1601846594621448193",
            "tweet_text": "Linux tip of the day \ud83d\udca1\n\nYou can quickly determine the current shell in use by running echo $0 into your terminal:\n\n$ echo $0 https://t.co/idcbcVdjik",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1601846588027990016/pu/vid/562x560/He7-Lbh12NG4gus-.mp4?tag=12\"]",
            "tweet_conversation_id": "1601846594621448193",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-11T07:49:23.000Z"
        },
        {
            "id": 5417,
            "username": "linuxopsys",
            "tweet_id": "1601562432576442368",
            "tweet_text": "Are you learning or working with Linux?\n\nSay hi \ud83d\udc4b",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601562432576442368",
            "tweet_type": "Others",
            "created_at": "2022-12-10T13:00:14.000Z"
        },
        {
            "id": 5418,
            "username": "linuxopsys",
            "tweet_id": "1601335901107343361",
            "tweet_text": "What is 'dd' command in Linux?\n\nWrong answers only.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601335901107343361",
            "tweet_type": "Others",
            "created_at": "2022-12-09T22:00:04.000Z"
        },
        {
            "id": 5419,
            "username": "linuxopsys",
            "tweet_id": "1601207616994045953",
            "tweet_text": "End of this thread.\n\nVisit @linuxopsys and check out more exciting Linux content. \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:19.000Z"
        },
        {
            "id": 5420,
            "username": "linuxopsys",
            "tweet_id": "1601207614141911040",
            "tweet_text": "That's a warp!\n\nYou should now have a better idea of how beneficial the du utility can be. There are numerous flags that I did not cover in this thread, but you can find all of the information on the command's manual page. Simply type 'man du' on terminal to get to the manpage. https://t.co/HRKOQpWeRm",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjih1kYUAAAT6Cd.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:18.000Z"
        },
        {
            "id": 5421,
            "username": "linuxopsys",
            "tweet_id": "1601207607464632321",
            "tweet_text": "--max-depth option\n\nThe \u2014max-depth option is useful if you only want to see the disk usage of n-level subdirectories. For example, to obtain a report of the second-level directories, you can use the following command: https://t.co/d9DESwTZH3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjih1MnVUAIOMHI.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:17.000Z"
        },
        {
            "id": 5422,
            "username": "linuxopsys",
            "tweet_id": "1601207601152204800",
            "tweet_text": "The -c(--total) option\n\nAnother great option is the -c option, this option instructs du to produce a grand total. This is useful when you need to calculate the total size of two or more directories: https://t.co/Ufl5Mvz4nr",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjih03EVsAExbBR.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:15.000Z"
        },
        {
            "id": 5423,
            "username": "linuxopsys",
            "tweet_id": "1601207595510861824",
            "tweet_text": "The -s(--summarize) option\n\nThe -s option is very important if you only want a summary of the total size of the specified directory, and not for subdirectories. https://t.co/pGDWITEJoW",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjih0g_UYAEs5fc.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:14.000Z"
        },
        {
            "id": 5424,
            "username": "linuxopsys",
            "tweet_id": "1601207589634654208",
            "tweet_text": "The -a (--all) option\n\nThis useful option does exactly what you'd expect. It displays the sizes of all files, not just directories. For convenience, the -a flag is frequently combined with the -h flag.\n\nNotice, Individual file sizes are listed alongside the directories. https://t.co/E99lWtnEAg",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjih0K2VQAEJWAG.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:13.000Z"
        },
        {
            "id": 5425,
            "username": "linuxopsys",
            "tweet_id": "1601207583594848256",
            "tweet_text": "For instance, to determine the total size of the /home/linuxopsys directory and all of its subdirectories, use the following command: https://t.co/2PoiuQa8ZZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjihzyLUUAALJyo.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:11.000Z"
        },
        {
            "id": 5426,
            "username": "linuxopsys",
            "tweet_id": "1601207577131393025",
            "tweet_text": "The -h option\n\nIn most cases, you'd want to show only the amount of space occupied by the specified directory in a human-readable format. To accomplish this, use the -h option.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:10.000Z"
        },
        {
            "id": 5427,
            "username": "linuxopsys",
            "tweet_id": "1601207574635823105",
            "tweet_text": "The du command options\n\nThe du command has several options that can be used to control how it displays output and what is included in the output.\n\nI'll only go over the most commonly used ones.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:09.000Z"
        },
        {
            "id": 5428,
            "username": "linuxopsys",
            "tweet_id": "1601207571926241284",
            "tweet_text": "The du command also allows you to pass multiple files and directories as arguments: https://t.co/7wRPVkvAqI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjihzI3VQAIThX6.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:08.000Z"
        },
        {
            "id": 5429,
            "username": "linuxopsys",
            "tweet_id": "1601207565932560386",
            "tweet_text": "If you don't specify any FILE du will display disk usage of the current working directory. https://t.co/SaZmwdld23",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fjihyx4VUAAE-lZ.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:07.000Z"
        },
        {
            "id": 5430,
            "username": "linuxopsys",
            "tweet_id": "1601207559649562626",
            "tweet_text": "How to Use the du command\n\nThe syntax for using this command is as follows:\n$ du [OPTION]... [FILE]...\n\nIf you provide a FILE as a directory, du will display a summary of disk usage for each file and subdirectory in that directory: https://t.co/69VGtDbe5a",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjihyaCVsAAVMKn.png\"]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:05.000Z"
        },
        {
            "id": 5431,
            "username": "linuxopsys",
            "tweet_id": "1601207550552076289",
            "tweet_text": "The du command, which stands for \"disk usage,\" returns the estimated amount of disk space used by specified files or directories.\n\nThe du command is extremely useful for locating files and directories that are taking up a lot of disk space on your system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Others",
            "created_at": "2022-12-09T13:30:03.000Z"
        },
        {
            "id": 5432,
            "username": "linuxopsys",
            "tweet_id": "1601207548064866304",
            "tweet_text": "A complete guide to the du command in Linux \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601207548064866304",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-09T13:30:03.000Z"
        },
        {
            "id": 5433,
            "username": "linuxopsys",
            "tweet_id": "1601138894568796160",
            "tweet_text": "How old were you when you started using Linux? \ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1601138894568796160",
            "tweet_type": "Others",
            "created_at": "2022-12-09T08:57:14.000Z"
        },
        {
            "id": 5434,
            "username": "linuxopsys",
            "tweet_id": "1600256289614938113",
            "tweet_text": "The nohup command also creates a file named nohup.out to store the command's output.\n\nContinue to follow us(@linuxopsys) for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600256278793592832",
            "tweet_type": "Others",
            "created_at": "2022-12-06T22:30:05.000Z"
        },
        {
            "id": 5435,
            "username": "linuxopsys",
            "tweet_id": "1600256286871867392",
            "tweet_text": "For example, to compress large amount of data using tar command and ensure that the compression continues even if you close the terminal window accidentally, use the following command:\n\n$  nohup tar -cf archive.tar file1 file2 https://t.co/o00DAgjyje",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjVAnD7VUAAdwdR.png\"]",
            "tweet_conversation_id": "1600256278793592832",
            "tweet_type": "Others",
            "created_at": "2022-12-06T22:30:04.000Z"
        },
        {
            "id": 5436,
            "username": "linuxopsys",
            "tweet_id": "1600256278793592832",
            "tweet_text": "Linux tip of the day \ud83d\udca1\n\nIf you run the program in a terminal, it will be terminated as soon as your terminal session ends. To avoid this and keep the program running, use the nohup command, which stands for \"no hangup.\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1600256278793592832",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-06T22:30:02.000Z"
        },
        {
            "id": 5437,
            "username": "linuxopsys",
            "tweet_id": "1599161621636534272",
            "tweet_text": "End of this thread.\n\nVisit @linuxopsys and check out more exciting Linux content. \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:16.000Z"
        },
        {
            "id": 5438,
            "username": "linuxopsys",
            "tweet_id": "1599161619182809088",
            "tweet_text": "[+] Force last to display IP Address and hostnames\n\nThe -i (--p) option forces last to always display IP addresses, while the -d (--dns) option displays hostnames:\n\n$ last -i\n$ last -d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:15.000Z"
        },
        {
            "id": 5439,
            "username": "linuxopsys",
            "tweet_id": "1599161616695627777",
            "tweet_text": "[+] Display fulltime\n\nLast does not display the seconds or the year by default. To view full login and logout times and dates, use the -F, --fulltimes option:\n\n$ last -F",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:15.000Z"
        },
        {
            "id": 5440,
            "username": "linuxopsys",
            "tweet_id": "1599161614141308928",
            "tweet_text": "These two options are frequently used in conjunction to specify a time interval for which the information should be retrieved. For example, to display the login records from 1 December to 3 December, run:\n\n$ last -s 2022-12-01 -u 2022-12-03",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:14.000Z"
        },
        {
            "id": 5441,
            "username": "linuxopsys",
            "tweet_id": "1599161611582726145",
            "tweet_text": "[+] Filter by since and until a specified time\n\nLast can be instructed to display lines since or until a specific time by using the -s (\u2014since) and -t (\u2014until) options.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:13.000Z"
        },
        {
            "id": 5442,
            "username": "linuxopsys",
            "tweet_id": "1599161609095503872",
            "tweet_text": "[+] Filter ouput by date\n\nYou can find out who logged into the system on a specific date by using the -p (--present) option:\n\n$ last -p yyyy-mm-dd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:13.000Z"
        },
        {
            "id": 5443,
            "username": "linuxopsys",
            "tweet_id": "1599161606545342465",
            "tweet_text": "[+] Limiting last output\n\nLast command followed by a single hyphen specifies the number of lines to be printed on the command line. To print only the last 8 login sessions, for example, enter:\n\n$ last -8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:12.000Z"
        },
        {
            "id": 5444,
            "username": "linuxopsys",
            "tweet_id": "1599161604070813696",
            "tweet_text": "[+] Last command options\n\nlast accepts a number of options for limiting, formatting, and filtering the output. Here , we'll only go over the most common options.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:12.000Z"
        },
        {
            "id": 5445,
            "username": "linuxopsys",
            "tweet_id": "1599161601684217861",
            "tweet_text": "You can also specify multiple usernames and ttys as arguments with the last command:\n\n$ last &lt;user1&gt; &lt;user2&gt; &lt;usern&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:11.000Z"
        },
        {
            "id": 5446,
            "username": "linuxopsys",
            "tweet_id": "1599161599247253505",
            "tweet_text": "To limit the output to a specific user or tty, use the following command with the user name or tty as an argument:\n\n$ last &lt;username&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:10.000Z"
        },
        {
            "id": 5447,
            "username": "linuxopsys",
            "tweet_id": "1599161596751667200",
            "tweet_text": "\u2022 The session start and stop times.\n\n\u2022 The last column shows the session's duration. If the session is still active or the user has not logged out last will diplay \"still loggd in\", otherwise it will display the duration.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:10.000Z"
        },
        {
            "id": 5448,
            "username": "linuxopsys",
            "tweet_id": "1599161594264502274",
            "tweet_text": "\u2022 If there is remote login to the machine last command will show a column which contains the the IP address or the hostname from which the user logged in.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:09.000Z"
        },
        {
            "id": 5449,
            "username": "linuxopsys",
            "tweet_id": "1599161591873777664",
            "tweet_text": "\u2022 The second column is the tty where the session occurred.:0 usually indicates that the user was logging into a desktop environment.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:09.000Z"
        },
        {
            "id": 5450,
            "username": "linuxopsys",
            "tweet_id": "1599161589357109248",
            "tweet_text": "Each line of output contains the following columns from:\n\n\u2022 The first column contains the usernamme. Last shows the special users reboot and shutdown when the system reboots or shuts down.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:08.000Z"
        },
        {
            "id": 5451,
            "username": "linuxopsys",
            "tweet_id": "1599161586500845568",
            "tweet_text": "When a user logs into the system, a record of that session is added to the /var/log/wtmp file and the last command reads the data in that file to print user login and logouts information.\n\nWhen last is called without any options or arguments, the output looks like this:\n\n$ last https://t.co/w709VNuyvD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FjFc_GzVUAUoMUn.png\"]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:07.000Z"
        },
        {
            "id": 5452,
            "username": "linuxopsys",
            "tweet_id": "1599161578640666624",
            "tweet_text": "[+] Last command usage\n\nThe last command has the following syntax:\n\n$ last [options] [username...] [tty...]",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:05.000Z"
        },
        {
            "id": 5453,
            "username": "linuxopsys",
            "tweet_id": "1599161576136708096",
            "tweet_text": "It is extremely useful when tracking user activity or investigating a possible security breach.\n\nThis thread describes how to use the last command to audit who logged into the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:05.000Z"
        },
        {
            "id": 5454,
            "username": "linuxopsys",
            "tweet_id": "1599161573582389250",
            "tweet_text": "When managing a multiuser system, you'll frequently need to know who, when, and from where people are logging in.\n\nlast is a command-line utility that displays information about system users' most recent login sessions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:04.000Z"
        },
        {
            "id": 5455,
            "username": "linuxopsys",
            "tweet_id": "1599161571095166979",
            "tweet_text": "Last command in Linux explained\ud83e\uddf5:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1599161571095166979",
            "tweet_type": "Others",
            "created_at": "2022-12-03T22:00:04.000Z"
        },
        {
            "id": 5456,
            "username": "linuxopsys",
            "tweet_id": "1598436812053041153",
            "tweet_text": "Which one do you use? https://t.co/RkmHhDpLB3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi7JzrwUUAAVXhQ.png\"]",
            "tweet_conversation_id": "1598436812053041153",
            "tweet_type": "Others",
            "created_at": "2022-12-01T22:00:08.000Z"
        },
        {
            "id": 5457,
            "username": "linuxopsys",
            "tweet_id": "1597960207270756353",
            "tweet_text": "Going to friends wedding VS Going to  install Linux on friend's PC. https://t.co/MAeJsyYnXf",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fi0YVkkUYAAad1d.png\"]",
            "tweet_conversation_id": "1597960207270756353",
            "tweet_type": "Others",
            "created_at": "2022-11-30T14:26:16.000Z"
        },
        {
            "id": 5458,
            "username": "linuxopsys",
            "tweet_id": "1597713170398736384",
            "tweet_text": "Are you interested in any of these topics?\n\n- Linux\n- Linux commands\n- Linux Tips\n- Shell Scripting\n- Bash Tips\n- Linux cheatsheets\n- Sysadmin\n- Tips for those who are unfamiliar with Linux\n- More Linux Stuff\n\nWe share about this daily, so follow us if you haven't already\u2705",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597713170398736384",
            "tweet_type": "Others",
            "created_at": "2022-11-29T22:04:38.000Z"
        },
        {
            "id": 5459,
            "username": "linuxopsys",
            "tweet_id": "1597055182533054465",
            "tweet_text": "\\v\\i\\m\n\nthat's how you escape vim\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1597055182533054465",
            "tweet_type": "Others",
            "created_at": "2022-11-28T02:30:02.000Z"
        },
        {
            "id": 5460,
            "username": "linuxopsys",
            "tweet_id": "1596994844500537345",
            "tweet_text": "If you found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 @linuxopsys\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:16.000Z"
        },
        {
            "id": 5461,
            "username": "linuxopsys",
            "tweet_id": "1596994842004815873",
            "tweet_text": "That concludes today's thread; be sure to experiment with these shortcuts and be amazed. The shortcuts listed above are only the tip of the iceberg.\n\nThe more you learn about Linux terminal commands and Bash shortcuts, the more straightforward and appealing Linux becomes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:15.000Z"
        },
        {
            "id": 5462,
            "username": "linuxopsys",
            "tweet_id": "1596994839601553411",
            "tweet_text": "\ud83d\udc27 Close Terminal\n\n\u2192 Ctrl + Shift + W - To close terminal tab.\n\n\u2192 Ctrl + Shift + Q - To close entire terminal.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:15.000Z"
        },
        {
            "id": 5463,
            "username": "linuxopsys",
            "tweet_id": "1596994837059805184",
            "tweet_text": "\ud83d\udc27 Bash Information\n\n\u2192 ~ - TAB TAB List all Linux users. \u2192 Ctrl + I - Completes the command like TAB.\n\n\u2192 Alt + ? - Display files/folders in the current path for help.\n\n\u2192 Alt + * - Display files/folders in the current path as parameter.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:14.000Z"
        },
        {
            "id": 5464,
            "username": "linuxopsys",
            "tweet_id": "1596994834555805696",
            "tweet_text": "\u2192 Tab - Auto-complete files and directory names.\n\n\u2192 Tab - Tab Shows all possibilities, when typed characters doesn't uniquely match to a file or directory name.\n\n\u2192 Ctrl + S - Gets the next most recent command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:13.000Z"
        },
        {
            "id": 5465,
            "username": "linuxopsys",
            "tweet_id": "1596994832089563136",
            "tweet_text": "\u2192 Ctrl + Z - Suspends (pause) currently running foreground process, which return shell prompt. You can then use bg command allowing that process to run in the background. To again bring that process to foreground, use fg command. To view all background processes, use jobs cmd.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:13.000Z"
        },
        {
            "id": 5466,
            "username": "linuxopsys",
            "tweet_id": "1596994829518372866",
            "tweet_text": "\u2192 Ctrl + D - Log out of the current shell session, similar to the exit or logout command. In some commands, acts as End of File signal to indicate that a file end has been reached.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:12.000Z"
        },
        {
            "id": 5467,
            "username": "linuxopsys",
            "tweet_id": "1596994827064778752",
            "tweet_text": "\u2192  Ctrl + Q - Resume output to the screen after stopping it with Ctrl+S.\n\n\u2192 Ctrl + C - End currently running process and return the prompt.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:12.000Z"
        },
        {
            "id": 5468,
            "username": "linuxopsys",
            "tweet_id": "1596994824602673152",
            "tweet_text": "\ud83d\udc27 Terminal/Process control\n\n\u2192 Ctrl + L - Clears the screen, similar to the clear command.\n\n\u2192 Ctrl + S - Stop all output to the screen. This is useful when running commands with lots of long output. But this doesn't stop the running command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:11.000Z"
        },
        {
            "id": 5469,
            "username": "linuxopsys",
            "tweet_id": "1596994822132224001",
            "tweet_text": "\u2192 !^ Substitutes first argument of last command in the current command.\n\n\u2192 ^foo^bar - Replaces foo with bar.\n\n\u2192 !n - Executes nth command from the bash history.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:10.000Z"
        },
        {
            "id": 5470,
            "username": "linuxopsys",
            "tweet_id": "1596994819582095360",
            "tweet_text": "\u2192 !n - Executes the nth command in history\n\n\u2192 !n:p - Displays the nth command and adds it as the recent command in history.\n\n\u2192 !$ - displays the forth last argument of the previous command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:10.000Z"
        },
        {
            "id": 5471,
            "username": "linuxopsys",
            "tweet_id": "1596994817120030720",
            "tweet_text": "\u2192 Ctrl + _ - Undo previous command \u2192 Ctrl + O - Executes and re-enters the command found via Ctrl + R and Ctrl + S\n\n\u2192 !! - Execute last command\n\n\u2192 !* - Execute previous command except its first word.\n\n\u2192 !*:p - displays arguments of the last command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:09.000Z"
        },
        {
            "id": 5472,
            "username": "linuxopsys",
            "tweet_id": "1596994814678966273",
            "tweet_text": "\u2192 Ctrl + P - Shows last executed command, i.e. walk back through the command history (Similar to up arrow).\n\n\u2192 Ctrl + N - Shows next executed command, i.e. walk forward through the command history (Similar to down arrow).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:09.000Z"
        },
        {
            "id": 5473,
            "username": "linuxopsys",
            "tweet_id": "1596994812200202241",
            "tweet_text": "\u2192 Ctrl + J - Lets you copy current matched command to command line without running it, allowing you to make modifications before running the command.\n\n\u2192 Alt + R - Revert any changes to a command you\u2019ve pulled from your history, if you\u2019ve edited it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:08.000Z"
        },
        {
            "id": 5474,
            "username": "linuxopsys",
            "tweet_id": "1596994809717149696",
            "tweet_text": "\ud83d\udc27 Access your History\n\n\u2192 Ctrl + R - Lets you search through previously used commands.\n\n\u2192 Ctrl + G - Leave history searching mode without running a command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:08.000Z"
        },
        {
            "id": 5475,
            "username": "linuxopsys",
            "tweet_id": "1596994807317946369",
            "tweet_text": "\u2192 Ctrl + Y - Paste the last thing from the clipboard that you cut recently (undo the last delete at the current cursor position).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:07.000Z"
        },
        {
            "id": 5476,
            "username": "linuxopsys",
            "tweet_id": "1596994804772061185",
            "tweet_text": "\u2192 Ctrl + K - Cut the line from the current position to the end of the line, adding it to the clipboard. If you are at the beginning of the line, cut the entire line.\n\n\u2192 Ctrl + W - Delete the word before the cursor, adding it to the clipboard.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:06.000Z"
        },
        {
            "id": 5477,
            "username": "linuxopsys",
            "tweet_id": "1596994802167386112",
            "tweet_text": "\ud83d\udc27 Text manipulation\n\n\u2192 Ctrl + U - Cut the line from the current position to the beginning of the line, adding it to the clipboard. If you are at the end of the line, it cuts the entire line.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:06.000Z"
        },
        {
            "id": 5478,
            "username": "linuxopsys",
            "tweet_id": "1596994799671730176",
            "tweet_text": "\u2192 Alt + F - Move cursor forward one word on the current line.\n\n\u2192 Alt + B - Move cursor backward one word on the current line.\n\n\u2192 Ctrl + F - Move cursor forward one character on the current line.\n\n\u2192 Ctrl + B - Move cursor backward one character on the current line.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:05.000Z"
        },
        {
            "id": 5479,
            "username": "linuxopsys",
            "tweet_id": "1596994797062930432",
            "tweet_text": "\ud83d\udc27 Cursor Movement\n\n\u2192 Ctrl + A - Go to the beginning of the line you are currently typing on.\n\n\u2192 Ctrl + E - Go to the end of the line you are currently typing on.\n\n\u2192 Ctrl + XX - Move between the beginning of the line and the current position of the cursor.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:05.000Z"
        },
        {
            "id": 5480,
            "username": "linuxopsys",
            "tweet_id": "1596994794508546048",
            "tweet_text": "\ud83d\udca1 I should mention that some of these shortcuts may be dependent on the Shell you're using. Because Bash is the most popular shell, this list is centered on it. I also ran the majority of them through ZSH and discovered that they were compatible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:04.000Z"
        },
        {
            "id": 5481,
            "username": "linuxopsys",
            "tweet_id": "1596994792088485888",
            "tweet_text": "To help you make better use of your time, I've compiled a list of the most frequently used Bash keyboard shortcuts \u2193\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-27T22:30:03.000Z"
        },
        {
            "id": 5482,
            "username": "linuxopsys",
            "tweet_id": "1596994789613838336",
            "tweet_text": "Bash, on the other hand, comes with a plethora of simple keyboard shortcuts and history functions to ensure efficient terminal use.\n\nHaving these terminal shortcut keyboard key combinations memorized will save you a lot of time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:03.000Z"
        },
        {
            "id": 5483,
            "username": "linuxopsys",
            "tweet_id": "1596994787084673024",
            "tweet_text": "The Linux terminal interface may be difficult for a new Linux user to grasp, especially because it relies heavily on the arrow keys to move around. Furthermore, it can be tiresome to constantly retype the commands, each with a slight variation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Others",
            "created_at": "2022-11-27T22:30:02.000Z"
        },
        {
            "id": 5484,
            "username": "linuxopsys",
            "tweet_id": "1596994784559652864",
            "tweet_text": "24+ Linux terminal shortcuts every power Linux user should know \ud83e\uddf5\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596994784559652864",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-27T22:30:02.000Z"
        },
        {
            "id": 5485,
            "username": "linuxopsys",
            "tweet_id": "1596670152245858306",
            "tweet_text": "Did everyone start their Linux journey with Ubuntu? \ud83e\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596670152245858306",
            "tweet_type": "Others",
            "created_at": "2022-11-27T01:00:03.000Z"
        },
        {
            "id": 5486,
            "username": "linuxopsys",
            "tweet_id": "1596633437716160512",
            "tweet_text": "This will return you to your previous working directory. You no longer need to type or copy and paste the long directory path.\n\nContinue to follow us(@linuxopsys) for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1596633434641702912",
            "tweet_type": "Others",
            "created_at": "2022-11-26T22:34:10.000Z"
        },
        {
            "id": 5487,
            "username": "linuxopsys",
            "tweet_id": "1596633434641702912",
            "tweet_text": "Quick Linux Tip \ud83d\udc27\ud83d\ude0e\n\nSay you you end up in a long directory path and then move to another directory in a completely different path.\n\nThen you realize you need to return to the previous directory you were in. In this case, all you need to do is type the following command:\n\n$ cd - https://t.co/JvHzSDiGJj",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1596633428035661824/pu/vid/656x532/XYuUTGtDCFQ3JRVK.mp4?tag=12\"]",
            "tweet_conversation_id": "1596633434641702912",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-26T22:34:09.000Z"
        },
        {
            "id": 5488,
            "username": "linuxopsys",
            "tweet_id": "1595552829292220416",
            "tweet_text": "If you found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192\n@linuxopsys\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:13.000Z"
        },
        {
            "id": 5489,
            "username": "linuxopsys",
            "tweet_id": "1595552826788220928",
            "tweet_text": "This information should be sufficient to help you understand the Linux basename command.\n\nThat's all! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:12.000Z"
        },
        {
            "id": 5490,
            "username": "linuxopsys",
            "tweet_id": "1595552824347148288",
            "tweet_text": "The -s option  also make it possible to strip any trailing suffix from multiple names:\n\n$ basename -s .conf /etc/resolv.conf .conf /etc/db.conf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:11.000Z"
        },
        {
            "id": 5491,
            "username": "linuxopsys",
            "tweet_id": "1595552821964730370",
            "tweet_text": "Another approach to getting rid of a trailing suffix is to use the -s (--suffix=SUFFIX) option:.\n\n$ basename -s .conf /etc/resolv.conf .conf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:11.000Z"
        },
        {
            "id": 5492,
            "username": "linuxopsys",
            "tweet_id": "1595552819573968896",
            "tweet_text": "In general, this feature is very handy if you want to strip file extensions:\n\n$ basename /etc/resolv.conf .conf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:10.000Z"
        },
        {
            "id": 5493,
            "username": "linuxopsys",
            "tweet_id": "1595552816969367552",
            "tweet_text": "[+] Removing a Trailing Suffix\n\nIf you want remove any trailing suffix from the file name, pass the suffix as a second argument:\n\n$ basename /bin/systemctl ctl\n\nthis will only output the word \"system\"",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:10.000Z"
        },
        {
            "id": 5494,
            "username": "linuxopsys",
            "tweet_id": "1595552814540894208",
            "tweet_text": "For example, to get the file names of /bin/ls and /bin/lsd you can run:\n\n$ basename /bin/ls /bin/lsd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:09.000Z"
        },
        {
            "id": 5495,
            "username": "linuxopsys",
            "tweet_id": "1595552812049440768",
            "tweet_text": "[+]  Getting the basename for multiple inputs:\n\nMultiple names may be entered as arguments for the basename command. To accomplish this, issue the command with the -a (--multiple) option and a list of files that are spaced apart.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:08.000Z"
        },
        {
            "id": 5496,
            "username": "linuxopsys",
            "tweet_id": "1595552809482539008",
            "tweet_text": "If there are any trailing characters the basename command can get rid of them.\n\n$ basename /usr/share/apps/\n$ basename /usr/share/apps\n\nBoth  of the above commands will produce the same results.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:08.000Z"
        },
        {
            "id": 5497,
            "username": "linuxopsys",
            "tweet_id": "1595552806982676481",
            "tweet_text": "The simplest example is to print the file name without the leading directories:\n\n$ basename /usr/bin/ls\n\nthis will only print the word \"ls\":",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:07.000Z"
        },
        {
            "id": 5498,
            "username": "linuxopsys",
            "tweet_id": "1595552804461891584",
            "tweet_text": "basename accepts a filename and prints its last component. It can also remove any trailing suffixes if desired. It is a straightforward command with only a few options.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:07.000Z"
        },
        {
            "id": 5499,
            "username": "linuxopsys",
            "tweet_id": "1595552802016632832",
            "tweet_text": "[+] Basename command syntax:\n\nThe basename command supports two syntaxes:\n\n$ basename NAME [SUFFIX]\n$ basename OPTION... NAME...",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:06.000Z"
        },
        {
            "id": 5500,
            "username": "linuxopsys",
            "tweet_id": "1595552799432982528",
            "tweet_text": "The \"basename\" function takes a filename and prints the last portion of it. If necessary, it can also remove any subsequent suffixes.\n\nIn this thread, we will look at various examples to help us understand the basename command in Linux.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:05.000Z"
        },
        {
            "id": 5501,
            "username": "linuxopsys",
            "tweet_id": "1595552796912209922",
            "tweet_text": "The basename command in Linux prints the last element of a file path. This is particularly helpful in bash scripts where you only want the file name from a given file path.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Others",
            "created_at": "2022-11-23T23:00:05.000Z"
        },
        {
            "id": 5502,
            "username": "linuxopsys",
            "tweet_id": "1595552794508816386",
            "tweet_text": "Basename Command in Linux  \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595552794508816386",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-23T23:00:04.000Z"
        },
        {
            "id": 5503,
            "username": "linuxopsys",
            "tweet_id": "1595200098018869248",
            "tweet_text": "So Linux folks, what advice would you give to someone who's just started learning Linux?\ud83e\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1595200098018869248",
            "tweet_type": "Others",
            "created_at": "2022-11-22T23:38:35.000Z"
        },
        {
            "id": 5504,
            "username": "linuxopsys",
            "tweet_id": "1594823809005019136",
            "tweet_text": "Is it possible that you typed the password incorrectly? Instead of pressing the backspace key all the way through, press Ctrl+U and retype the password. There are numerous other applications for these shortcuts.\n\nContinue to follow us(@linuxopsys) for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594823796329807872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T22:43:21.000Z"
        },
        {
            "id": 5505,
            "username": "linuxopsys",
            "tweet_id": "1594823806144507904",
            "tweet_text": "Similarly, pressing Ctrl+K deletes everything between your cursor position and the end of the line. https://t.co/ZKnU7EqjH7",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1594823797974003713/pu/vid/752x494/U8n-kaHkyginjQc8.mp4?tag=12\"]",
            "tweet_conversation_id": "1594823796329807872",
            "tweet_type": "Others",
            "created_at": "2022-11-21T22:43:20.000Z"
        },
        {
            "id": 5506,
            "username": "linuxopsys",
            "tweet_id": "1594823796329807872",
            "tweet_text": "Quick Linux Tip  \ud83d\udc27\ud83d\ude0e\n\nSo many people are either unaware of it or rarely use it.\n\nWhen you press Ctrl+U in the Linux terminal, it deletes everything from your current cursor position to the beginning of the line. https://t.co/M8I2qoAsFU",
            "tweet_media": "[\"https://video.twimg.com/ext_tw_video/1594823789610602497/pu/vid/752x494/6FFvmB0cWJ7v5cZs.mp4?tag=12\"]",
            "tweet_conversation_id": "1594823796329807872",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-21T22:43:18.000Z"
        },
        {
            "id": 5507,
            "username": "linuxopsys",
            "tweet_id": "1594133470724313088",
            "tweet_text": "Continue to follow us @linuxopsys for more amazing Linux cheats sheets!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1594133463174500353",
            "tweet_type": "Others",
            "created_at": "2022-11-20T01:00:11.000Z"
        },
        {
            "id": 5508,
            "username": "linuxopsys",
            "tweet_id": "1594133463174500353",
            "tweet_text": "Cron cheatsheet for Linux sysadmins \ud83d\udc47 https://t.co/r34l9K5c65",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fh9_6zgVsAAL4P4.png\"]",
            "tweet_conversation_id": "1594133463174500353",
            "tweet_type": "Others",
            "created_at": "2022-11-20T01:00:09.000Z"
        },
        {
            "id": 5509,
            "username": "linuxopsys",
            "tweet_id": "1593380868311044096",
            "tweet_text": "The difference between Windows and Linux: https://t.co/E1uv7eYXoI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhzTdIsVQAAxTqX.jpg\"]",
            "tweet_conversation_id": "1593380868311044096",
            "tweet_type": "Others",
            "created_at": "2022-11-17T23:09:37.000Z"
        },
        {
            "id": 5510,
            "username": "linuxopsys",
            "tweet_id": "1592646231909494784",
            "tweet_text": "If you found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 \r@linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:26.000Z"
        },
        {
            "id": 5511,
            "username": "linuxopsys",
            "tweet_id": "1592646229418090496",
            "tweet_text": "This information should be sufficient to help you understand the Linux booting process.\n\nThat's all! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:25.000Z"
        },
        {
            "id": 5512,
            "username": "linuxopsys",
            "tweet_id": "1592646226947678209",
            "tweet_text": "The boot process is complete when systemd loads all daemons and sets the target or run level value. At this point, you will be prompted for your username and password, after which you will gain access to your Linux system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:25.000Z"
        },
        {
            "id": 5513,
            "username": "linuxopsys",
            "tweet_id": "1592646224447868929",
            "tweet_text": "The init 6 command reboots your system, while init 0 turns it off. When switching between these two targets, make sure to use the sudo command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:24.000Z"
        },
        {
            "id": 5514,
            "username": "linuxopsys",
            "tweet_id": "1592646221876776960",
            "tweet_text": "Run the following command to determine the current target on your system:\n\n$ systemctl get-default\n\nYou can change targets by entering the following command into the terminal:\n\n$ init runlevel-value\n\nInit 3, for example, configures the system to be non-graphical.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:23.000Z"
        },
        {
            "id": 5515,
            "username": "linuxopsys",
            "tweet_id": "1592646219267919872",
            "tweet_text": "Note, the run level in Linux represents the current state of the operating system. Run levels specify which system services are active. SysVinit previously identified run levels by number.\n\nIn Systemd, however,.target files have replaced run levels.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:23.000Z"
        },
        {
            "id": 5516,
            "username": "linuxopsys",
            "tweet_id": "1592646216608669696",
            "tweet_text": "\u2022 https://t.co/83NEstfzVi (runlevel 5) - Configure the system to use a graphical multi-user interface to access network services.\n\u2022 https://t.co/hRgeHtdDO0 (runlevel 6)- reboots the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:22.000Z"
        },
        {
            "id": 5517,
            "username": "linuxopsys",
            "tweet_id": "1592646214150811648",
            "tweet_text": "\u2022 https://t.co/sUtZiVYsaS (runlevel 2,3,4) -  Configures the system to a non-graphical (console) multi-user system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:22.000Z"
        },
        {
            "id": 5518,
            "username": "linuxopsys",
            "tweet_id": "1592646211604914176",
            "tweet_text": "The systemd targets are broken down as follows:\n\n\u2022 https://t.co/Cff0U3Kv5l (runlevel 0) - Poweroff or Shutdown the system.\n\u2022 https://t.co/u192VK4d2c (runlevel 1) - launches a rescue shell session.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:21.000Z"
        },
        {
            "id": 5519,
            "username": "linuxopsys",
            "tweet_id": "1592646209033760769",
            "tweet_text": "\u2022 The default target value for a desktop workstation (with a graphical user interface) is 5, which corresponds to run level 5 in the old SystemV init.\n\n\u2022 The default target for a server is https://t.co/sUtZiVYsaS, which corresponds to run level 3 in SysV init.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:20.000Z"
        },
        {
            "id": 5520,
            "username": "linuxopsys",
            "tweet_id": "1592646206420791297",
            "tweet_text": "The /etc/systemd/system/default.target file is used by Systemd to determine the state or target into which the Linux system should boot.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:20.000Z"
        },
        {
            "id": 5521,
            "username": "linuxopsys",
            "tweet_id": "1592646203853836288",
            "tweet_text": "[4] Starting Systemd\n\nFinally, the kernel loads Systemd, which replaces the old SysV init. Systemd is the mother of all Linux processes, managing tasks such as mounting file systems and starting and stopping services, to name a few.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:19.000Z"
        },
        {
            "id": 5522,
            "username": "linuxopsys",
            "tweet_id": "1592646201333014528",
            "tweet_text": "The kernel then mounts the initial RAM disk (initrd) which is a temporary root filesystem until the real root filesystem is mounted. All kernels are located in the `/boot` directory together with the initial RAM disk image.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:18.000Z"
        },
        {
            "id": 5523,
            "username": "linuxopsys",
            "tweet_id": "1592646198841573376",
            "tweet_text": "Init is always the first program to be executed and is assigned the process ID or PID of 1. It\u2019s the init process that spawns various daemons &amp; mounts all partitions that are specified in the /etc/fstab file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:18.000Z"
        },
        {
            "id": 5524,
            "username": "linuxopsys",
            "tweet_id": "1592646196308287489",
            "tweet_text": "The Linux kernel follows a set procedure in this case:\n\n\u2022 decompress itself from its compressed version before           undertaking any task\n\u2022 perform hardware checks\n\u2022 gain access to vital peripheral hardware\n\u2022 initializes the /sbin/init program, also known as init.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:17.000Z"
        },
        {
            "id": 5525,
            "username": "linuxopsys",
            "tweet_id": "1592646193804214272",
            "tweet_text": "[3] Kernel Initialization\n\nThe operating system now controls access to our computer resources after passing through BIOS or UEFI, POST, and using a boot loader to start the kernel.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:17.000Z"
        },
        {
            "id": 5526,
            "username": "linuxopsys",
            "tweet_id": "1592646191321206784",
            "tweet_text": "In addition, in a dual-boot setup with multiple OS installations, the grub menu allows you to choose which OS to boot into. The grub2 configuration file is located in /boot/grub2/grub2.cfg.\n\nThe primary goal of GRUB is to load the Linux kernel into main memory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:16.000Z"
        },
        {
            "id": 5527,
            "username": "linuxopsys",
            "tweet_id": "1592646188787912704",
            "tweet_text": "If you've upgraded your system a few times, you might notice that different kernel versions are listed.\n\nIt also allows you to edit some kernel parameters by pressing a combination of keyboard keys.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:15.000Z"
        },
        {
            "id": 5528,
            "username": "linuxopsys",
            "tweet_id": "1592646186237759489",
            "tweet_text": "When the BIOS finds the grub2 bootloader, it executes it and loads it into main memory (RAM).\n\nYou can do a few things with the grub2 menu. It lets you choose the Linux kernel version you want to use.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:15.000Z"
        },
        {
            "id": 5529,
            "username": "linuxopsys",
            "tweet_id": "1592646183733714944",
            "tweet_text": "\u2022 allows ease of use over a serial cable\n\u2022 powerful command line interface for interactive configuration\n\u2022 booting both a graphical and a text-based interface\n\nGRUB2 has now replaced its predecessor (GRUB), which is now known as GRUB Legacy.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:14.000Z"
        },
        {
            "id": 5530,
            "username": "linuxopsys",
            "tweet_id": "1592646181263286273",
            "tweet_text": "GRUB2 is a choice for many modern Linux distributions because of:\n\n\u2022 the ability to boot several operating systems\n\u2022 network-based diskless",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:14.000Z"
        },
        {
            "id": 5531,
            "username": "linuxopsys",
            "tweet_id": "1592646178868326400",
            "tweet_text": "[+] GRUB2\n\nGRUB2 stands for GRand Unified Bootloader version 2, it is the most recent and primary bootloader in modern Linux distributions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:13.000Z"
        },
        {
            "id": 5532,
            "username": "linuxopsys",
            "tweet_id": "1592646176322383872",
            "tweet_text": "Furthermore, SYSLINUX supports the following major filesystems:\n\u2022 ext2\n\u2022 ext3\n\u2022 ext4\n\u2022 FAT\n\nWith some limitations, SYSLINUX can also support the Btrfs and XFS filesystems.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:13.000Z"
        },
        {
            "id": 5533,
            "username": "linuxopsys",
            "tweet_id": "1592646173809967107",
            "tweet_text": "[+] SYSLINUX\n\nSimilarly, SYSLINUX is a boot loader for the Linux operating system that runs on a FAT filesystem, similar to that of a Windows system. In a nutshell, its goal is to make the process of installing Linux for the first time as simple as possible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:12.000Z"
        },
        {
            "id": 5534,
            "username": "linuxopsys",
            "tweet_id": "1592646171234693120",
            "tweet_text": "It also provides limited support for new filesystems.\n\nLILO's developers officially ceased development and support in December 2015. As a result, the Linux Loader is outdated.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:11.000Z"
        },
        {
            "id": 5535,
            "username": "linuxopsys",
            "tweet_id": "1592646168680443904",
            "tweet_text": "[+] LILO\n\nLILO (Linux Loader) was once one of the most popular Linux boot loaders. However, it has fallen out of favor due to its lack of support for multi-boot environments and UEFI.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:11.000Z"
        },
        {
            "id": 5536,
            "username": "linuxopsys",
            "tweet_id": "1592646166201585664",
            "tweet_text": "In Linux, there are four main types of bootloaders: LILO, SYSLINUX, GRUB, and GRUB2.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:10.000Z"
        },
        {
            "id": 5537,
            "username": "linuxopsys",
            "tweet_id": "1592646163705913344",
            "tweet_text": "The boot loader, in particular, is a small program that loads the operating system. The boot loader's primary function is to locate the kernel on the disk, insert it into memory, and execute it with the supplied options.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:10.000Z"
        },
        {
            "id": 5538,
            "username": "linuxopsys",
            "tweet_id": "1592646161122267136",
            "tweet_text": "A UEFI system, on the other hand, stores all startup data in an.efi file. The file is located on the EFI System Partition, which also houses the boot loader.\n\nIt should be noted, however, that the MBR can sometimes be found on a Live USB or DVD installation of Linux.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:09.000Z"
        },
        {
            "id": 5539,
            "username": "linuxopsys",
            "tweet_id": "1592646158609883136",
            "tweet_text": "The boot loader in a BIOS system is located in the first sector of the boot device; this is the MBR.\n\nIt occupies the first 512 bytes of disk space which is typically /dev/sda or /dev/hda depending on the architecture of your drive.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:08.000Z"
        },
        {
            "id": 5540,
            "username": "linuxopsys",
            "tweet_id": "1592646156168765441",
            "tweet_text": "[2] Loading of the Boot loader (GRUB2)\n\nThe BIOS or UEFI has now run the POST to check the machine's status. The BIOS then searches the MBR (Master Boot Record) for information about the bootloader and disk partitioning.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:08.000Z"
        },
        {
            "id": 5541,
            "username": "linuxopsys",
            "tweet_id": "1592646153727725569",
            "tweet_text": "BIOS and UEFI are firmware interfaces used by computers to start the operating system (OS). However, the two programs differ in their approach to storing metadata on and about the drive:\n\n\u2022 BIOS uses the Master Boot Record (MBR)\n\u2022 UEFI uses the GUID Partition Table (GPT)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:07.000Z"
        },
        {
            "id": 5542,
            "username": "linuxopsys",
            "tweet_id": "1592646151269859328",
            "tweet_text": "If the test fails to detect the RAM, POST produces a beeping sound; otherwise, if the expected hardware is present and functioning properly, the booting process advances to the next stage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:07.000Z"
        },
        {
            "id": 5543,
            "username": "linuxopsys",
            "tweet_id": "1592646148858134529",
            "tweet_text": "Furthermore, if this test detects an error, it will typically display an error message on the screen, requesting your intervention.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:06.000Z"
        },
        {
            "id": 5544,
            "username": "linuxopsys",
            "tweet_id": "1592646146324766721",
            "tweet_text": "The POST process validates the hardware components and peripherals such as the HDD or SSD, keyboard, RAM, USB ports, and any other hardware. It also runs tests to ensure that the computer is in good condition.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:05.000Z"
        },
        {
            "id": 5545,
            "username": "linuxopsys",
            "tweet_id": "1592646143824887808",
            "tweet_text": "1. BIOS and UEFI Integrity check (POST)\n\nFirst, when the system boots, the BIOS (Basic Input/Output System) or UEFI (Unified Extensible Firmware Interface) program launches and performs a Power On Self Test (POST).\n\nThis is an integrity check that runs a slew of diagnostic tests.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:05.000Z"
        },
        {
            "id": 5546,
            "username": "linuxopsys",
            "tweet_id": "1592646141258084353",
            "tweet_text": "The booting process consists of four steps, which we will go over in this thread:\n\n\u2022 BIOS and UEFI Integrity check (POST)\n\u2022 Loading of the Boot loader (GRUB2)\n\u2022 Kernel initialization\n\u2022 Starting systemd, the parent of all processes",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:04.000Z"
        },
        {
            "id": 5547,
            "username": "linuxopsys",
            "tweet_id": "1592646138670170112",
            "tweet_text": "When you turn on your Linux computer, it goes through a series of phases before presenting a login screen that prompts you for your username or password.\n\nEvery Linux distribution goes through four distinct stages during the boot-up process.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Others",
            "created_at": "2022-11-15T22:30:04.000Z"
        },
        {
            "id": 5548,
            "username": "linuxopsys",
            "tweet_id": "1592646136195559424",
            "tweet_text": "A Basic Guide to Modern Linux Boot Process \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1592646136195559424",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-15T22:30:03.000Z"
        },
        {
            "id": 5549,
            "username": "linuxopsys",
            "tweet_id": "1591913873077985281",
            "tweet_text": "That's all! Thank you for getting this far. I hope you find this thread useful.\n\nIf you found this thread helpful\n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps\u2192@linuxopsys\n2. Like and RT the first tweet so that other Linux users can find it as well.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:18.000Z"
        },
        {
            "id": 5550,
            "username": "linuxopsys",
            "tweet_id": "1591913870381043712",
            "tweet_text": "A graphical representation of your real-time memory consumption, including historical data, is provided. https://t.co/NpcfbpRf4D",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhedOfVUAAAf1uA.png\"]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:17.000Z"
        },
        {
            "id": 5551,
            "username": "linuxopsys",
            "tweet_id": "1591913864282591232",
            "tweet_text": "To access memory usage on the System Monitor, follow these steps:\n\n1.  Navigate to your applications and search for system monitor\n\n2.  Open system monitor\n\n3.  Select resource tab on the system monitor app",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:16.000Z"
        },
        {
            "id": 5552,
            "username": "linuxopsys",
            "tweet_id": "1591913861786963968",
            "tweet_text": "[4] A bonus: Using GUI (system monitor):\n\nIt is uncommon to use a graphical interface for system administration. Certain data sets, on the other hand, are much clearer, providing a visual representation of memory utilization.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:15.000Z"
        },
        {
            "id": 5553,
            "username": "linuxopsys",
            "tweet_id": "1591913859152912384",
            "tweet_text": "The file contains a wealth of information regarding the system's memory and swap usage. The /proc/meminfo file contains information that can be readily parsed and used in shell scripts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:15.000Z"
        },
        {
            "id": 5554,
            "username": "linuxopsys",
            "tweet_id": "1591913856305025024",
            "tweet_text": "To read the contents of the /proc/meminfo file Linux text viewer of your choice for example cat. As for me I prefer to use batcat a modern cat version with syntax highlighting:\n\n$ batcat /proc/meminfo https://t.co/Jx4XYetFUh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhedNRsUAAAmnL-.png\", \"https://pbs.twimg.com/media/FhedNd8UAAAGoRo.png\", \"https://pbs.twimg.com/media/FhedNsQUYAAo49Y.png\"]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:14.000Z"
        },
        {
            "id": 5555,
            "username": "linuxopsys",
            "tweet_id": "1591913843482976256",
            "tweet_text": "[3] /proc/meminfo\n\nThe simplest method to check RAM memory use is to display the contents of the /proc/meminfo virtual file. This file is utilized by the free, htop, top, ps, and other system information commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:11.000Z"
        },
        {
            "id": 5556,
            "username": "linuxopsys",
            "tweet_id": "1591913841008340993",
            "tweet_text": "The output header contains information about the system's total, free, and used physical and swap memory.\n\nThe %MEM column indicates how much of the available physical memory is being used by each running process.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:10.000Z"
        },
        {
            "id": 5557,
            "username": "linuxopsys",
            "tweet_id": "1591913838277844992",
            "tweet_text": "[2] htop, top and btop++\nhtop, btop++, and top are command-line utilities that display real-time information about the processes that are running. They also display the system summary, which includes memory usage.\n\nHere's an example of htop:\n\n$ htop https://t.co/t1gQFeDLaR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhedMnkVQAEqzM0.png\"]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:10.000Z"
        },
        {
            "id": 5558,
            "username": "linuxopsys",
            "tweet_id": "1591913831944462336",
            "tweet_text": "- available - An estimate of the available memory for starting new applications without swapping.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:08.000Z"
        },
        {
            "id": 5559,
            "username": "linuxopsys",
            "tweet_id": "1591913829411061760",
            "tweet_text": "- shared - Ignore this column; it is only shown for backward compatibility.\n\n- buff/cache - the memory used by the kernel buffers, page cache, and slabs combined. This memory can be reclaimed at any time if the applications require it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:07.000Z"
        },
        {
            "id": 5560,
            "username": "linuxopsys",
            "tweet_id": "1591913826835779584",
            "tweet_text": "Here\u2019s what each column represents:\n\n- total - The total amount of memory available to applications.\n\n- use - memory that has been used. It is computed as follows: used = total - free - buffers - cache\n\n- free - unused / free memory",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:07.000Z"
        },
        {
            "id": 5561,
            "username": "linuxopsys",
            "tweet_id": "1591913824004689922",
            "tweet_text": "The free command is mostly used with the -h option which tells free to print the output in human-readable format: https://t.co/MVJnhPuGXW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhedLztVIAAciEI.png\"]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:06.000Z"
        },
        {
            "id": 5562,
            "username": "linuxopsys",
            "tweet_id": "1591913816538812417",
            "tweet_text": "[1] free command\n\nThe most commonly used command for determining a Linux system's memory usage is free. It displays total, used, and free memory information.\n\nThe free command displays information about physical memory and system swap.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:04.000Z"
        },
        {
            "id": 5563,
            "username": "linuxopsys",
            "tweet_id": "1591913814127017984",
            "tweet_text": "Here are four methods for monitoring memory usage on your Linux system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:04.000Z"
        },
        {
            "id": 5564,
            "username": "linuxopsys",
            "tweet_id": "1591913811635625985",
            "tweet_text": "As system administrators or Linux power user in some cases, we may run out of memory, resulting in very slow response times to our server or becoming completely unresponsive, and you will want to know how much memory is being used by the process.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Others",
            "created_at": "2022-11-13T22:00:03.000Z"
        },
        {
            "id": 5565,
            "username": "linuxopsys",
            "tweet_id": "1591913809131601920",
            "tweet_text": "4 Commands to check for memory usage in Linux \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591913809131601920",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-13T22:00:03.000Z"
        },
        {
            "id": 5566,
            "username": "linuxopsys",
            "tweet_id": "1591566539379003393",
            "tweet_text": "Me, when I need to run a command in the Linux terminal:\n\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Ah, there it is.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591566539379003393",
            "tweet_type": "Others",
            "created_at": "2022-11-12T23:00:07.000Z"
        },
        {
            "id": 5567,
            "username": "linuxopsys",
            "tweet_id": "1591551426970329088",
            "tweet_text": "Linux Log parsing cheat sheet https://t.co/S3e1aGfOiq",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhZTlnNUoAA0qui.jpg\"]",
            "tweet_conversation_id": "1591551426970329088",
            "tweet_type": "Others",
            "created_at": "2022-11-12T22:00:04.000Z"
        },
        {
            "id": 5568,
            "username": "linuxopsys",
            "tweet_id": "1591201322308493312",
            "tweet_text": "|\uffe3\uffe3\uffe3\uffe3\uffe3\uffe3|\n|           I           |\n|         \u2764\ufe0f         |\n|      LINUX      |\n|_____________  |\n(\\__/) ||\n(\u2022\u3145\u2022) ||\n/ __ \u3065",
            "tweet_media": "[]",
            "tweet_conversation_id": "1591201322308493312",
            "tweet_type": "Others",
            "created_at": "2022-11-11T22:48:52.000Z"
        },
        {
            "id": 5569,
            "username": "linuxopsys",
            "tweet_id": "1590834227322359809",
            "tweet_text": "Continue to follow us @linuxopsys for more amazing Linux cheats sheets!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1590834219189575680",
            "tweet_type": "Others",
            "created_at": "2022-11-10T22:30:10.000Z"
        },
        {
            "id": 5570,
            "username": "linuxopsys",
            "tweet_id": "1590834219189575680",
            "tweet_text": "New to Linux!? Here is Linux basic commands cheatsheet \ud83d\udc27 https://t.co/8mZmowH5hz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhPHRegUoAA13Lp.png\"]",
            "tweet_conversation_id": "1590834219189575680",
            "tweet_type": "Others",
            "created_at": "2022-11-10T22:30:08.000Z"
        },
        {
            "id": 5571,
            "username": "linuxopsys",
            "tweet_id": "1590102137962258434",
            "tweet_text": "Grep command cheatsheet - searches a file for a particular pattern of characters, and displays all lines that contain that pattern in Linux. \ud83d\udc27 https://t.co/opt6tRnrx8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FhEtc25VsAALN8m.png\"]",
            "tweet_conversation_id": "1590102137962258434",
            "tweet_type": "Others",
            "created_at": "2022-11-08T22:01:07.000Z"
        },
        {
            "id": 5572,
            "username": "linuxopsys",
            "tweet_id": "1589529035755122689",
            "tweet_text": "Its a reminder add \ud83d\udc27 to your name to get Linux verified. Save $8 https://t.co/hbHM8C30zR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589529035755122689",
            "tweet_type": "Others",
            "created_at": "2022-11-07T08:03:48.000Z"
        },
        {
            "id": 5573,
            "username": "linuxopsys",
            "tweet_id": "1589384676262793218",
            "tweet_text": "That's it for today's thread.\n\nThank you taking your time to read it.\n\nIf you enjoyed this thread, follow us @linuxopsys for future Linux posts, which we will be posting on a daily basis.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:10.000Z"
        },
        {
            "id": 5574,
            "username": "linuxopsys",
            "tweet_id": "1589384673699897345",
            "tweet_text": "Finally, knowing and mastering these basic Linux commands will surely aid in the management of your Linux desktop. Best regards!",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:10.000Z"
        },
        {
            "id": 5575,
            "username": "linuxopsys",
            "tweet_id": "1589384670822612992",
            "tweet_text": "Basic Linux tools allow you to execute tasks in a timely and effective manner.  Some of these commands may be difficult to remember at first, but nothing is impossible with lots of practice.\n\nIf you ever get stuck on a command, remember to refer to the man pages.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:09.000Z"
        },
        {
            "id": 5576,
            "username": "linuxopsys",
            "tweet_id": "1589384668394049536",
            "tweet_text": "\u2022 ps - List processes currently running on current shell session.\n\n\u2022 ps -u root -  List all of the processes and commands root is running.\n\n\u2022 ps aux - List all the processes by all users on the current system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:08.000Z"
        },
        {
            "id": 5577,
            "username": "linuxopsys",
            "tweet_id": "1589384665911083008",
            "tweet_text": "Peeking processes on the system \ud83d\udc27\n\n\u2022 top/htop/btop++ - list all processes sorted by their current system resource usage. Displays a continually updated  list of processes (By default 3 seconds). Use q key to exit top.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:08.000Z"
        },
        {
            "id": 5578,
            "username": "linuxopsys",
            "tweet_id": "1589384663398694912",
            "tweet_text": "\u2022 lastb - shows all bad login attempts into the system.\n\n\u2022 chmod - changing permissions - read,write,execute of a file or directory.\n\n\u2022 adduser - used to add users to the system.\n\n\u2022 usermod - used to configure users on the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:07.000Z"
        },
        {
            "id": 5579,
            "username": "linuxopsys",
            "tweet_id": "1589384660932431872",
            "tweet_text": "\u2022 hostname - used to check the system name that is assigned to a Linux machine. However, this command can also be paired up with other different flags for getting different outputs.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:07.000Z"
        },
        {
            "id": 5580,
            "username": "linuxopsys",
            "tweet_id": "1589384658449416192",
            "tweet_text": "\u2022 w -  display current system status, time, duration, list of users currently logged in on system and other  user information.\n\n\u2022 last - shows who recently used the system.\n\n\u2022 last root -  displays when was the last time root logged in as user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:06.000Z"
        },
        {
            "id": 5581,
            "username": "linuxopsys",
            "tweet_id": "1589384655911821313",
            "tweet_text": "\u2022 who - displays a list of users who are currently logged into the computer.\n\nThe who command is related to the command w, which provides the same information but also displays additional data and statistics.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:05.000Z"
        },
        {
            "id": 5582,
            "username": "linuxopsys",
            "tweet_id": "1589384653294608384",
            "tweet_text": "User identification (who is who in Linux world)\ud83d\udc27\n\n\u2022 whoami - whoami command is used both in Unix Operating System and as well as in Windows Operating System. It displays the username of the current user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:05.000Z"
        },
        {
            "id": 5583,
            "username": "linuxopsys",
            "tweet_id": "1589384650824114176",
            "tweet_text": "\u2022 man -  used to display the user manual of any command that we can run on the terminal. for more details on this command checkout it's man pages.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:04.000Z"
        },
        {
            "id": 5584,
            "username": "linuxopsys",
            "tweet_id": "1589384648219537408",
            "tweet_text": "\u2022 whatis command  - display a one-line description of the command you specify.\n\n\u2022 command -- help - display usage information about the command. Sometimes command -h also works, but not for all commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:04.000Z"
        },
        {
            "id": 5585,
            "username": "linuxopsys",
            "tweet_id": "1589384645639999488",
            "tweet_text": "Getting Help in Linux \ud83d\udc27\n\n\u2022 help - in Bash shell,  without any parameters the command  will display the list of all available built-in bash commands.\n\nIf you specify the command name as a parameter it  will display the info about the bash command you specify.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:03.000Z"
        },
        {
            "id": 5586,
            "username": "linuxopsys",
            "tweet_id": "1589384643094011904",
            "tweet_text": "Linux has a command for practically every operation, and the bulk of them are straightforward and quick to use.\n\nIn this thread, I've compiled a list of 18 helpful utilities for Linux users that you'll find useful if you use Linux on a daily basis.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Others",
            "created_at": "2022-11-06T22:30:02.000Z"
        },
        {
            "id": 5587,
            "username": "linuxopsys",
            "tweet_id": "1589384640661319680",
            "tweet_text": "Basic Linux utilities that every new user should be aware of, with explanations \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1589384640661319680",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-06T22:30:02.000Z"
        },
        {
            "id": 5588,
            "username": "linuxopsys",
            "tweet_id": "1588659905694552064",
            "tweet_text": "Check us out @linuxopsys if you liked this thread!!\n\nWe gonna be tweeting more about Linux, networking, security etc.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:12.000Z"
        },
        {
            "id": 5589,
            "username": "linuxopsys",
            "tweet_id": "1588659903198949376",
            "tweet_text": "That's it!\n\nThank you for making it this far. Hopefully you will find this thread useful.\n\nAdditions are welcomed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:11.000Z"
        },
        {
            "id": 5590,
            "username": "linuxopsys",
            "tweet_id": "1588659900636241920",
            "tweet_text": "\u2192  wget \u2013  retrieving files using HTTP, HTTPS, FTP and FTPS.\n\u2192  Wireless Tools for Linux \u2013 includes iwconfig, iwlist, iwspy, iwpriv and ifrename.\n\u2192  Wireshark \u2013 network protocol analyzer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:10.000Z"
        },
        {
            "id": 5591,
            "username": "linuxopsys",
            "tweet_id": "1588659898048425984",
            "tweet_text": "\u2192  tracepath \u2013 very similar function to traceroute.\n\u2192  traceroute \u2013 print the route packets trace to network host.\n\u2192  vnStat \u2013 network traffic monitor.\n\u2192  websocat \u2013 Connection forwarder from/to web sockets to/from usual sockets, in style of socat.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:10.000Z"
        },
        {
            "id": 5592,
            "username": "linuxopsys",
            "tweet_id": "1588659895477207040",
            "tweet_text": "\u2192 ssh \u2013  secure system administration and file transfers over insecure networks.\n\u2192 tcpdump \u2013 command-line packet analyzer.\n\u2192 tcptrack \u2013 Displays information about tcp connections on a network interface.\n\u2192 telnet \u2013 user interface to the TELNET protocol.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:09.000Z"
        },
        {
            "id": 5593,
            "username": "linuxopsys",
            "tweet_id": "1588659892948123649",
            "tweet_text": "\u2192 socat \u2013 establishes two bidirectional byte streams and transfers data between them.\n\u2192 speedometer \u2013 Measure and display the rate of data across a network.\n\u2192 speedtest-cli \u2013 test internet bandwidth using https://t.co/Ofqjli7Adn\n\u2192 ss \u2013 utility to investigate sockets.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:09.000Z"
        },
        {
            "id": 5594,
            "username": "linuxopsys",
            "tweet_id": "1588659890418917377",
            "tweet_text": "\u2192 ping \u2013 send icmp echo_request to network hosts to test connectivity.\n\u2192 route \u2013 show / manipulate the IP routing table.\n\u2192 slurm \u2013 network load monitor.\n\u2192 snort \u2013 Network Intrusion Detection and Prevention System.\n\u2192 smokeping \u2013  keeps track of your network latency.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:08.000Z"
        },
        {
            "id": 5595,
            "username": "linuxopsys",
            "tweet_id": "1588659887717785600",
            "tweet_text": "\u2192 nmcli \u2013 a command-line tool for controlling NetworkManager and reporting network status.\n\u2192 nmtui \u2013 provides a text interface to configure networking by controlling NetworkManager.\n\u2192 nslookup \u2013 query Internet name servers interactively.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:07.000Z"
        },
        {
            "id": 5596,
            "username": "linuxopsys",
            "tweet_id": "1588659885217964032",
            "tweet_text": "\u2192 networking on a linux system.\n\u2192 netsniff-ng \u2013 Swiss army knife for daily Linux network plumbing.\n\u2192 netwatch \u2013 monitoring Network Connections.\n\u2192 ngrep \u2013 grep applied to the network layer.\n\u2192 nload \u2013 display network usage.\n\u2192 nmap \u2013 network discovery and security auditing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:07.000Z"
        },
        {
            "id": 5597,
            "username": "linuxopsys",
            "tweet_id": "1588659882290335744",
            "tweet_text": "\u2192 ncat \u2013 improved re-implementation of the venerable netcat.\n\u2192 netcat \u2013 networking utility for reading/writing network connections.\n\u2192 nethogs \u2013 a small \u2018net top\u2019 tool.\n\u2192 Netperf \u2013 Network bandwidth Testing.\n\u2192 netplan \u2013 Netplan is a utility for easily configuring",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:06.000Z"
        },
        {
            "id": 5598,
            "username": "linuxopsys",
            "tweet_id": "1588659879798919168",
            "tweet_text": "\u2192 lsof -i \u2013 reveal information about your network sockets.\n\u2192 mtr \u2013 network diagnostic tool.\n\u2192 net-tools \u2013 utilities include: arp, hostname, ifconfig, netstat, rarp, route, plipconfig, slattach, mii-tool, iptunnel and ipmaddr.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:05.000Z"
        },
        {
            "id": 5599,
            "username": "linuxopsys",
            "tweet_id": "1588659877336870913",
            "tweet_text": "\u2192 iptables \u2013 take control of network traffic.\n\u2192 IPTraf \u2013 An IP Network Monitor.\n\u2192 iputils \u2013 set of small useful utilities for Linux networking.\n\u2192 iw \u2013 a new nl80211 based CLI configuration utility \u2192 for wireless devices.\n\u2192 jwhois (whois) \u2013 client for the whois service.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:05.000Z"
        },
        {
            "id": 5600,
            "username": "linuxopsys",
            "tweet_id": "1588659874845446144",
            "tweet_text": "\u2192 ifstat \u2013  report network interfaces bandwidth.\n\u2192 iftop \u2013 display bandwidth usage.\n\u2192 ip  \u2013 a command with more features than ifconfig.\n\u2192 iperf3 \u2013 network bandwidth measurement tool.\n\u2192 iproute2 \u2013 collection of utilities for controlling TCP/IP.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:04.000Z"
        },
        {
            "id": 5601,
            "username": "linuxopsys",
            "tweet_id": "1588659872312094722",
            "tweet_text": "\u2192 ethtool \u2013 utility for controlling network drivers and hardware.\n\u2192 gated \u2013 gateway routing daemon.\n\u2192 host \u2013 DNS lookup utility.\n\u2192 hping \u2013 TCP/IP packet assembler/analyzer.\n\u2192 ibmonitor \u2013 shows bandwidth and total data transferred.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:04.000Z"
        },
        {
            "id": 5602,
            "username": "linuxopsys",
            "tweet_id": "1588659869829038080",
            "tweet_text": "\u2192 darkstat \u2013 captures network traffic, usage statistics.\n\u2192 dhclient \u2013 Dynamic Host Configuration Protocol Client\n\u2192 dig \u2013 query DNS servers for information.\n\u2192 dstat \u2013 replacement for vmstat, iostat, mpstat, netstat and ifstat.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:03.000Z"
        },
        {
            "id": 5603,
            "username": "linuxopsys",
            "tweet_id": "1588659867350233088",
            "tweet_text": "\u2192 arp - see your arp table.\n\u2192 aria2 \u2013 downloading just about everything. Torrents included.\n\u2192 arpwatch \u2013 Ethernet Activity Monitor.\n\u2192 bmon \u2013 bandwidth monitor and rate estimator.\n\u2192 bwm-ng \u2013 live network bandwidth monitor.\n\u2192 curl \u2013 transferring data with URLs.(or try httpie)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Others",
            "created_at": "2022-11-04T22:30:02.000Z"
        },
        {
            "id": 5604,
            "username": "linuxopsys",
            "tweet_id": "1588659864930177024",
            "tweet_text": "50+ Linux networking commands and their explanation \ud83e\uddf5\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588659864930177024",
            "tweet_type": "Linux tips",
            "created_at": "2022-11-04T22:30:02.000Z"
        },
        {
            "id": 5605,
            "username": "linuxopsys",
            "tweet_id": "1588516976543948801",
            "tweet_text": "What's the reason that is stoping you from using Linux?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1588516976543948801",
            "tweet_type": "Others",
            "created_at": "2022-11-04T13:02:15.000Z"
        },
        {
            "id": 5606,
            "username": "linuxopsys",
            "tweet_id": "1587821850645516289",
            "tweet_text": "People who feel superior:\n\n- Linux users\n- VIM users\n- Dark theme users\n- Mac users",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587821850645516289",
            "tweet_type": "Others",
            "created_at": "2022-11-02T15:00:04.000Z"
        },
        {
            "id": 5607,
            "username": "linuxopsys",
            "tweet_id": "1587429262075650048",
            "tweet_text": "Why are people from Norway so good at editing files in Linux?\n\nTheir ancestors are vi-kings.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587429262075650048",
            "tweet_type": "Others",
            "created_at": "2022-11-01T13:00:03.000Z"
        },
        {
            "id": 5608,
            "username": "linuxopsys",
            "tweet_id": "1587383959779889154",
            "tweet_text": "Linux folks, what text editor do you prefer to use? \ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587383959779889154",
            "tweet_type": "Others",
            "created_at": "2022-11-01T10:00:02.000Z"
        },
        {
            "id": 5609,
            "username": "linuxopsys",
            "tweet_id": "1587210402802200576",
            "tweet_text": "That's it!\n\nThank you for making it this far. Hopefully, you'll find this thread useful.\n\nAny additions are welcome.\n\nFollow us @linuxopsys if you liked this thread!!\n\nWe gonna be tweeting more about Linux, sysadmin and devops.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:23.000Z"
        },
        {
            "id": 5610,
            "username": "linuxopsys",
            "tweet_id": "1587210400331808768",
            "tweet_text": "110. env - executes the designated program in a modified environment or displays the value of all the environment variables.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:23.000Z"
        },
        {
            "id": 5611,
            "username": "linuxopsys",
            "tweet_id": "1587210397773225984",
            "tweet_text": "108. continue - resumes the next iteration of a for , while , select , or until loop.\n109. coproc - spawns a subshell in background mode and executes the designated command or executes a coprocess.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:22.000Z"
        },
        {
            "id": 5612,
            "username": "linuxopsys",
            "tweet_id": "1587210395239866368",
            "tweet_text": "105. chown - changes the default owner of the specified file or directory.\n106. chpasswd - reads a file of login name and password pairs and updates the passwords.\n107. chsh - changes the specified user account's default shell.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:21.000Z"
        },
        {
            "id": 5613,
            "username": "linuxopsys",
            "tweet_id": "1587210392727482368",
            "tweet_text": "102. chfn - changes the specified user account's current information.\n103. chgrp - changes the default group of the specified file or directory.\n104. chmod - changes system security permissions for the specified file or directory",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:21.000Z"
        },
        {
            "id": 5614,
            "username": "linuxopsys",
            "tweet_id": "1587210390189928450",
            "tweet_text": "100. bash - uses the Bourne Again Shell command language to interpret commands from standard input or a file, or to launch a subshell.\n101. bc - Performs calculations via its programming language.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:20.000Z"
        },
        {
            "id": 5615,
            "username": "linuxopsys",
            "tweet_id": "1587210387660734466",
            "tweet_text": "97. atrm - deletes the specified job from the at utility queue.\n98. bash - uses the Bourne Again Shell command language to interpret commands from standard input or a file, or to launch a subshell.\n99. bc - Performs calculations via its programming language.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:20.000Z"
        },
        {
            "id": 5616,
            "username": "linuxopsys",
            "tweet_id": "1587210385194504192",
            "tweet_text": "93.  systemctl - used to control and manage systemd and services.\n94. alias - defines an alias for the specified command.\n95. at - runs a specified script or command at a set later time. 96. atq - shows jobs in the at utility queue.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:19.000Z"
        },
        {
            "id": 5617,
            "username": "linuxopsys",
            "tweet_id": "1587210382673747969",
            "tweet_text": "91. mount - used to mount the filesystem found on a device to big tree structure(Linux filesystem) rooted at '/'.\n92 - umount - unmounts a previously mounted device, directory, file, or file system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:18.000Z"
        },
        {
            "id": 5618,
            "username": "linuxopsys",
            "tweet_id": "1587210380152958976",
            "tweet_text": "88. screen \u2013 keep a remote server session open. (It also functions as a full-screen window manager.)\n89. tmux is a terminal multiplexer.\n90. passwd \u2014 Change the password of a user.\n91. clear \u2013 clears the terminal's screen.\n92. env - run a command in an altered environment",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:18.000Z"
        },
        {
            "id": 5619,
            "username": "linuxopsys",
            "tweet_id": "1587210377539952641",
            "tweet_text": "86. wait \u2013 suspend script execution until all background jobs have been completed.\n87. nohup - short for no hang up is a command in Linux systems that keep processes running even after exiting the shell or terminal.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:17.000Z"
        },
        {
            "id": 5620,
            "username": "linuxopsys",
            "tweet_id": "1587210374977241088",
            "tweet_text": "82. journalctl - Tused to view systemd, kernel and journal logs.\n83. kill - terminates a process.\n84. killall - sends a kill signal to all instances of a specific process.\n85. sleep \u2013 pauses program execution for a given amount of time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:16.000Z"
        },
        {
            "id": 5621,
            "username": "linuxopsys",
            "tweet_id": "1587210372418658304",
            "tweet_text": "78. less \u2013 identical to more, but with more features\n79. tail \u2013 used to show the last few lines of a text file or piped data.\n80. head - used to show the first few lines of a text file or piped data.\n81. dmesg \u2013 displays the kernel ring's message buffer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:16.000Z"
        },
        {
            "id": 5622,
            "username": "linuxopsys",
            "tweet_id": "1587210369847525376",
            "tweet_text": "73. usermod \u2013 used to edit or change any existing user account's properties.\n74. vi is a text editor.\n75. cat \u2013 displays the contents of a file.\n76. tac \u2013 reverse output file contents.\n77. more - show file contents one screen/page at a time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:15.000Z"
        },
        {
            "id": 5623,
            "username": "linuxopsys",
            "tweet_id": "1587210367322628096",
            "tweet_text": "70. chroot - used to change the root directory.\n71. useradd - create a new user or alter the default information for a new user.\n72. userdel - used to delete a user account and all associated files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:15.000Z"
        },
        {
            "id": 5624,
            "username": "linuxopsys",
            "tweet_id": "1587210364244045824",
            "tweet_text": "66. nc -  used for just about anything under the sun involving TCP or UDP.\n67. umask - returns, or sets, the value of the system's file mode creation mask.\n68. chmod \u2013 alters the access rights of file system objects.\n69. chown \u2013 alter the owner and group of a file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:14.000Z"
        },
        {
            "id": 5625,
            "username": "linuxopsys",
            "tweet_id": "1587210361463152640",
            "tweet_text": "62. parted \u2013 used to create and manipulate partition tables.\n63. blkid - a command-line utility for finding and printing block device attributes.\n64. mkfs - create a Linux file system.\n65. fsck - an utility for determining the consistency of a file system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:13.000Z"
        },
        {
            "id": 5626,
            "username": "linuxopsys",
            "tweet_id": "1587210358954917888",
            "tweet_text": "58. wget - download files through HTTP, HTTPS, FTP, and FTPS.\n59. curl \u2013 data transport via several network protocols. (Can handle more protocols than wget)\n60. dd - used to convert and copy files.\n61. fdisk - Modify the disk partition table.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:13.000Z"
        },
        {
            "id": 5627,
            "username": "linuxopsys",
            "tweet_id": "1587210356476194816",
            "tweet_text": "55. nmcli - sused to display network device status, create, edit, activate/deactivate, and delete network connections.\n56. ping - sends an ICMP ECHO REQUEST to network hosts.\n57. traceroute - examine the path packets follow to reach a specific host.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:12.000Z"
        },
        {
            "id": 5628,
            "username": "linuxopsys",
            "tweet_id": "1587210353946918913",
            "tweet_text": "51. mtr - is a network diagnostic tool, a combination of ping and traceroute commands.\n52. nslookup - interactively query Internet name servers (NS).\n53. host \u2013used for DNS (Domain Name System) lookup operations.\n54. dig \u2013 DNS lookup tool.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:11.000Z"
        },
        {
            "id": 5629,
            "username": "linuxopsys",
            "tweet_id": "1587210351401086976",
            "tweet_text": "47. zip \u2013 used for file packaging and compression (archiving).\n48. locate \u2013 in Linux, search for files.\n49. ps \u2013 allows you to list the status of processes running on your system easily.\n50. cron - execute scheduled tasks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:11.000Z"
        },
        {
            "id": 5630,
            "username": "linuxopsys",
            "tweet_id": "1587210348884422657",
            "tweet_text": "43. rsync - remote file transfer and synchronization.\n44. tar - is an archive utility.\n45. gzip - use for compression and decompression of files.\n46. b2zip - a compression utility comparable to gzip. It employs a distinct compression algorithm.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:10.000Z"
        },
        {
            "id": 5631,
            "username": "linuxopsys",
            "tweet_id": "1587210346401394688",
            "tweet_text": "38. pwd \u2013 displays the current directory path.\n39. cp - copy files and directories.\n40. mv \u2013 move file or directories.\n41. rm \u2013 deletes files and directories.\n42. mkdir - create new directories.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:10.000Z"
        },
        {
            "id": 5632,
            "username": "linuxopsys",
            "tweet_id": "1587210343880613890",
            "tweet_text": "35. touch \u2013 used to create, update a computer file or directory's access and modification dates.\n36. man \u2013 used to read system reference manuals.\n37. apropos \u2013 searches manual page names and descriptions for a user-supplied keyword.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:09.000Z"
        },
        {
            "id": 5633,
            "username": "linuxopsys",
            "tweet_id": "1587210340948844544",
            "tweet_text": "31. atop \u2013 a tool for monitoring system resources in Linux.\n32. ssh \u2013  secure protocol used as the primary means of connecting to Linux servers remotely.\n33. sudo - run commands with administrative privileges.\n34. cd \u2013 navigate between directories.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:08.000Z"
        },
        {
            "id": 5634,
            "username": "linuxopsys",
            "tweet_id": "1587210338432299008",
            "tweet_text": "27. iotop - is an interactive I/O viewer. Get a snapshot of storage r/w activity.\n28. iostat - provides statistics on storage I/O.\n29. netstat -used to show network statistics.\n30. ss - ss command is a simpler and faster version of the now obsolete netstat command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:08.000Z"
        },
        {
            "id": 5635,
            "username": "linuxopsys",
            "tweet_id": "1587210335940812800",
            "tweet_text": "25. vmstat - used to obtain information about memory, system processes, paging, interrupts, block I/O, disk, and CPU scheduling.\n26. htop - a process viewer and manager that is interactive.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:07.000Z"
        },
        {
            "id": 5636,
            "username": "linuxopsys",
            "tweet_id": "1587210332694421504",
            "tweet_text": "22. dstat - allows you to view all of your system resources instantly. All-in-one vmstat, iostat, netstat, and ifstat utility.\n23. Iftop is a network traffic viewer.\n24. nethogs - is a network traffic analyzer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:06.000Z"
        },
        {
            "id": 5637,
            "username": "linuxopsys",
            "tweet_id": "1587210330173644800",
            "tweet_text": "19. diff - used to display differences in files by comparing line by line.\n20. uptime \u2013 displays the system uptime as well as the load average.\n21. top \u2013 shows a real-time view of running processes in Linux.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:06.000Z"
        },
        {
            "id": 5638,
            "username": "linuxopsys",
            "tweet_id": "1587210327556427776",
            "tweet_text": "15. ip - used to show or manipulate routing, devices, and tunnels.\n16. ls - list the contents of a directory.\n17. df - Displays the amount of disk space used.\n18. du - display a list of all the files along with their respective sizes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:05.000Z"
        },
        {
            "id": 5639,
            "username": "linuxopsys",
            "tweet_id": "1587210324960104448",
            "tweet_text": "11. free - use to get a detailed report on the system's memory usage.\n12. scp - securely copy files or directories over ssh.\n13. find - locates files using user-defined criteria.\n14. ncdu - provides a useful and convenient way to view disk usage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:05.000Z"
        },
        {
            "id": 5640,
            "username": "linuxopsys",
            "tweet_id": "1587210322397388800",
            "tweet_text": "8. pstree - used to show running processes in a tree (data structure).\n9. latest - displays a list of the most recently logged-in people.\n10. w \u2013 display a list of the currently logged-in user sessions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:04.000Z"
        },
        {
            "id": 5641,
            "username": "linuxopsys",
            "tweet_id": "1587210319910182912",
            "tweet_text": "5 grep - searches a file for a pattern of characters and displays all lines that match.\n6. awk - a scripting language used for text processing.\n7. sed - stream editor used to perform lots of functions on files, like searching, find and replace, insertion, or deletion.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:03.000Z"
        },
        {
            "id": 5642,
            "username": "linuxopsys",
            "tweet_id": "1587210317343248384",
            "tweet_text": "1. cut - allows you to cut out sections of a specified file or piped data and print the result to standard output.\n2. sort - used to sort files\n3. uniq - used to extract uniq occurences\n4. tr - utility for translating or deleting characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Others",
            "created_at": "2022-10-31T22:30:03.000Z"
        },
        {
            "id": 5643,
            "username": "linuxopsys",
            "tweet_id": "1587210314797395968",
            "tweet_text": "100+ Linux commands that Linux Sysadmins regularly use, with explanation\ud83e\uddf5\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1587210314797395968",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-31T22:30:02.000Z"
        },
        {
            "id": 5644,
            "username": "linuxopsys",
            "tweet_id": "1586493990366457856",
            "tweet_text": "By default, it will display only one result. To see more results that match your search term, press CTRL + R several times. To exit the reverse search, press CTRL + C.\n\nContinue to follow us(@linuxopsys) for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586493979104681984",
            "tweet_type": "Others",
            "created_at": "2022-10-29T23:03:37.000Z"
        },
        {
            "id": 5645,
            "username": "linuxopsys",
            "tweet_id": "1586493986755137536",
            "tweet_text": "Reverse search is your savior in this situation. You can use a search term to find the command in the history.\n\nSimply press CTRL + R to start a reverse search and type some of the command. It will search the history and display the commands that match the search term. https://t.co/JWy8WoVMmy",
            "tweet_media": "[\"https://pbs.twimg.com/media/FgRb3wIVsAAcpFJ.png\"]",
            "tweet_conversation_id": "1586493979104681984",
            "tweet_type": "Others",
            "created_at": "2022-10-29T23:03:36.000Z"
        },
        {
            "id": 5646,
            "username": "linuxopsys",
            "tweet_id": "1586493979104681984",
            "tweet_text": "Quick Linux Tip  \ud83d\udc27\ud83d\ude0e\n\nConsider the following scenario: you used a long command a few minutes or hours ago and now you need to use it again. The issue is that you no longer remember the exact command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1586493979104681984",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-29T23:03:34.000Z"
        },
        {
            "id": 5647,
            "username": "linuxopsys",
            "tweet_id": "1585813612135796737",
            "tweet_text": "43+ Linux commands every Linux user should know \ud83d\udc27\u2193\n\nhttps://t.co/xx7s3azaTZ",
            "tweet_media": "[]",
            "tweet_conversation_id": "1585813612135796737",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-28T02:00:02.000Z"
        },
        {
            "id": 5648,
            "username": "linuxopsys",
            "tweet_id": "1584927799613063168",
            "tweet_text": "Continue to follow us(@linuxopsys) for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584927794475126784",
            "tweet_type": "Others",
            "created_at": "2022-10-25T15:20:08.000Z"
        },
        {
            "id": 5649,
            "username": "linuxopsys",
            "tweet_id": "1584927797063036928",
            "tweet_text": "Instead of using the above shortcuts to get to the beginning of the line, you would have pressed the left arrow key several times. Likewise, going to the end of the line. This way of doing it can be boring and inconvenient.\n\nAlternatively, you can use the HOME and END keys.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584927794475126784",
            "tweet_type": "Others",
            "created_at": "2022-10-25T15:20:08.000Z"
        },
        {
            "id": 5650,
            "username": "linuxopsys",
            "tweet_id": "1584927794475126784",
            "tweet_text": "Quick Linux Tip  \ud83d\udc27\ud83d\ude0e\n\nOn your Linux terminal, you can use Ctrl+A to go to the beginning of the line and Ctrl+E to go to the end.\n\nThis is very useful if you are typing a long command and realize halfway through that you need to change something at the beginning.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1584927794475126784",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-25T15:20:07.000Z"
        },
        {
            "id": 5651,
            "username": "linuxopsys",
            "tweet_id": "1583835642852622338",
            "tweet_text": "Hello everyone\ud83d\udc4b\n\nWe are an independent portal that publishes Linux, Sysadmin, and DevOps content.\n\nWe tweet about Linux, Linux tips, SysAdmin, and DevOps related topics.\n\nOur tweets can help you improve your Linux knowledge.\n\nFollow us and learn Linux right here on Twitter\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583835642852622338",
            "tweet_type": "Others",
            "created_at": "2022-10-22T15:00:18.000Z"
        },
        {
            "id": 5652,
            "username": "linuxopsys",
            "tweet_id": "1583747690629779456",
            "tweet_text": "What advice would you give to someone who's just started learning Linux?\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1583747690629779456",
            "tweet_type": "Others",
            "created_at": "2022-10-22T09:10:48.000Z"
        },
        {
            "id": 5653,
            "username": "linuxopsys",
            "tweet_id": "1582861219265802242",
            "tweet_text": "That's all! Thank you for getting this far. I hope you find this thread useful.\n\nIf you found this thread helpful\n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps\u2192@linuxopsys\n2. Like and RT the first tweet so that other Linux users can find it as well.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:17.000Z"
        },
        {
            "id": 5654,
            "username": "linuxopsys",
            "tweet_id": "1582861216644362240",
            "tweet_text": "For a more in-depth guide on how to use command line redirections, check out this article on our website.\n\nBash Command Line Chain Operators in Linux with Examples:\nhttps://t.co/WBdy2lRBOR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-19T22:28:16.000Z"
        },
        {
            "id": 5655,
            "username": "linuxopsys",
            "tweet_id": "1582861214085918720",
            "tweet_text": "Many people would, for example, use the preceding example with cat and then pipe the output of cat to the second command to act as in the input. To be honest, there is no need to use the cat command here.\n\n$ cat file.txt | wc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:16.000Z"
        },
        {
            "id": 5656,
            "username": "linuxopsys",
            "tweet_id": "1582861211531476992",
            "tweet_text": "Here is an example of input redirection in use:\n\n$ wc &lt; file.txt\n\nThough stdin is rarely used, it is preferable to pipe, especially to avoid the needless use of the cat command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:15.000Z"
        },
        {
            "id": 5657,
            "username": "linuxopsys",
            "tweet_id": "1582861209019170816",
            "tweet_text": "The input redirection\n\nYou can use stdin redirection to pass the contents of a text file to a command.\nStdin is rarely used. Because most Linux commands accept filenames as arguments, stdin redirection is often unnecessary.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:15.000Z"
        },
        {
            "id": 5658,
            "username": "linuxopsys",
            "tweet_id": "1582861206515109888",
            "tweet_text": "The &amp;&gt; construct can also be used to redirect stderr to stdout. &amp;&gt; has the same meaning in Bash as 2&gt;&amp;1:\n\n$ cmd &amp;&gt; file.txt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:14.000Z"
        },
        {
            "id": 5659,
            "username": "linuxopsys",
            "tweet_id": "1582861203910451200",
            "tweet_text": "It is important to note that the order of redirection is crucial. The following example, for example, redirects only stdout to the file. This occurs because STDERR is redirected to STDOUT before STDOUT is redirected to the file.\n\n$ cmd 2&gt;&amp;1 &gt; file",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:13.000Z"
        },
        {
            "id": 5660,
            "username": "linuxopsys",
            "tweet_id": "1582861201351970816",
            "tweet_text": "Use the following command to redirect stderr to stdout and have error messages written to the same file as the standard output:\n\n$ cmd &gt; file.txt 2&gt;&amp;1\n\n&gt; file redirects stdout to file.txt, and 2&gt;&amp;1 redirects stderr to the current stdout location.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:13.000Z"
        },
        {
            "id": 5661,
            "username": "linuxopsys",
            "tweet_id": "1582861198860505089",
            "tweet_text": "Redirecting stderr to stdout\n\nWhen storing the program's output to a file, it's usual practice to redirect stderr to stdout so that everything goes into a single file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:12.000Z"
        },
        {
            "id": 5662,
            "username": "linuxopsys",
            "tweet_id": "1582861196381675521",
            "tweet_text": "In most cases, you may not want to log the error messages to a file or standard error; instead, redirect stderr to a special location on your Linux system called /dev/null:\n\nHere is an example of how you can do it:\n\n$ cmd 2&gt;/dev/null",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:12.000Z"
        },
        {
            "id": 5663,
            "username": "linuxopsys",
            "tweet_id": "1582861193860984833",
            "tweet_text": "Both stderr and stdout can be written into separate files. Here is an example:\n\n$ cmd 2&gt; error.txt &gt; output.txt\n\nThis will redirect the errors produced by the cmd command to the error.txt file and the output produced to the output.txt file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:11.000Z"
        },
        {
            "id": 5664,
            "username": "linuxopsys",
            "tweet_id": "1582861191247851520",
            "tweet_text": "If you want to redirect the standard error (stderr) to a file using the file descriptor of 2 and the &gt;. Here is an example:\n\n$ ping https://t.co/mEMVF2YH3P 2&gt; error.txt\n\nThis will redirect the errors produced by the above command to a file called error.txt.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:10.000Z"
        },
        {
            "id": 5665,
            "username": "linuxopsys",
            "tweet_id": "1582861188739653632",
            "tweet_text": "When n is not specified, the standard output stream is used. The following two commands, for example, are identical; both will redirect the command output (stdout) to a file.\n\n$ echo \"Linux is the future\" &gt; linux.txt\n$ echo \"Linux is the future\" 1&gt; linux.txt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:10.000Z"
        },
        {
            "id": 5666,
            "username": "linuxopsys",
            "tweet_id": "1582861186214768640",
            "tweet_text": "Redirecting Standard Output (STDOUT)\n\nRedirection is a method of capturing a program's output and sending it as input to another program or file.\n\nThe n&gt; operator, where n is the file descriptor number, can be used to redirect streams.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:09.000Z"
        },
        {
            "id": 5667,
            "username": "linuxopsys",
            "tweet_id": "1582861183719133184",
            "tweet_text": "Both the input and error streams are printed on the terminal screen by default.\n\nUsing the piping technique, the output of another program can be directed to the input stream of another program and act as the standard input.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:08.000Z"
        },
        {
            "id": 5668,
            "username": "linuxopsys",
            "tweet_id": "1582861181202505730",
            "tweet_text": "The input stream sends data to the program, typically by typing on the keyboard.\n\nThe program output is directed to the standard output stream, while program error messages are directed to the standard error stream.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:08.000Z"
        },
        {
            "id": 5669,
            "username": "linuxopsys",
            "tweet_id": "1582861178627248129",
            "tweet_text": "Here are the standard Linux I/O streams:\n\n\u2022 0 - stdin, the standard input stream.\n\u2022 1 - stdout, the standard output stream.\n\u2022 2 - stderr, the standard error stream.\n\nA file descriptor is basically a number that uniquely identifies an open file in a computer's operating system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:07.000Z"
        },
        {
            "id": 5670,
            "username": "linuxopsys",
            "tweet_id": "1582861176085434368",
            "tweet_text": "When a program is executed in Bash or other Linux shells, it uses 3 different I/O streams. Each stream is represented by a numerical file descriptor.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:07.000Z"
        },
        {
            "id": 5671,
            "username": "linuxopsys",
            "tweet_id": "1582861173556322304",
            "tweet_text": "Similarly, by default, a command writes its output to standard output, which is your terminal.\n\nThe concept of redirection refers to the ability to redirect stdin, stdout, and stderr from their usual output locations to another file or command (or even peripheral devices).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:06.000Z"
        },
        {
            "id": 5672,
            "username": "linuxopsys",
            "tweet_id": "1582861170783854592",
            "tweet_text": "Most Unix/Linux system commands accept input from your terminal and return the resulting output to it.\n\nA command normally reads its input from the standard input, which is usually your terminal.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Others",
            "created_at": "2022-10-19T22:28:05.000Z"
        },
        {
            "id": 5673,
            "username": "linuxopsys",
            "tweet_id": "1582861168250540032",
            "tweet_text": "Input, Output, and Error Redirection in Linux explained (Beginners' guide)  \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1582861168250540032",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-19T22:28:05.000Z"
        },
        {
            "id": 5674,
            "username": "linuxopsys",
            "tweet_id": "1581789598102958080",
            "tweet_text": "This is very useful if you make a mistake on a long command because it saves you from having to retype the entire command or using the arrow keys to move back to the misspelled command to make changes.\n\nContinue to follow us(@linuxopsys) for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581789595464654848",
            "tweet_type": "Others",
            "created_at": "2022-10-16T23:30:03.000Z"
        },
        {
            "id": 5675,
            "username": "linuxopsys",
            "tweet_id": "1581789595464654848",
            "tweet_text": "Quick Linux Tip  \ud83d\udc27\ud83d\ude0e\n\nYou can use the ^foor^bar command to edit the command you ran previously and execute it again.\n\n$ sodu mkdir demo\n$ ^sodu^sudo\n\nThis will replace \"sodu\" with \"sudo\" and re-rerun the command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1581789595464654848",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-16T23:30:02.000Z"
        },
        {
            "id": 5676,
            "username": "linuxopsys",
            "tweet_id": "1580687409024376833",
            "tweet_text": "That's all! Thank you for getting this far. I hope you find this thread useful.\n\nIf you found this thread helpful\n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps\u2192@linuxopsys\n2. Like and RT the first tweet so that other Linux users can find it as well.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:20.000Z"
        },
        {
            "id": 5677,
            "username": "linuxopsys",
            "tweet_id": "1580687406126096384",
            "tweet_text": "If you are having trouble calculating the permissions of your files, here is an online website that can assist you.\n\nChmod Calculator:\nAn awesome Chmod Calculator to convert Linux file permissions between different formats.\n\nhttps://t.co/pYHPgs9hpY",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:20.000Z"
        },
        {
            "id": 5678,
            "username": "linuxopsys",
            "tweet_id": "1580687403596931075",
            "tweet_text": "When using a four-digit number, the first digit has the following meaning:\n\n\u2022 setuid=4\n\u2022 setgid=2\n\u2022 sticky=1\n\u2022 no changes = 0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:19.000Z"
        },
        {
            "id": 5679,
            "username": "linuxopsys",
            "tweet_id": "1580687401080344576",
            "tweet_text": "Owner: rwx=4+2+1=7\nGroup: r-x=4+0+1=5\nOthers: r-x=4+0+1=5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:18.000Z"
        },
        {
            "id": 5680,
            "username": "linuxopsys",
            "tweet_id": "1580687398517633024",
            "tweet_text": "For example, if the permission number is set to 755 it means that the file\u2019s owner has read, write and execute permission, file\u2019s group has read and execute permissions, and other users have also read and execute permissions:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:18.000Z"
        },
        {
            "id": 5681,
            "username": "linuxopsys",
            "tweet_id": "1580687395569049601",
            "tweet_text": "\u2022 4 (4+0+0) - Read-only permission.\n\u2022 5 (4+0+1) - Permission to read and execute.\n\u2022 6 (4+2+0) - Read and write access permissions.\n\u2022 7 (4+2+1) - Permission to read, write, and execute.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:17.000Z"
        },
        {
            "id": 5682,
            "username": "linuxopsys",
            "tweet_id": "1580687392884674560",
            "tweet_text": "\u2022 0 (0+0+0) - There is no permission.\n\u2022 1 (0+0+1) - Execute permission only.\n\u2022 2 (0+2+0) - Only write access permissions.\n\u2022 3 (0+2+1) - Permission to write and execute.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:16.000Z"
        },
        {
            "id": 5683,
            "username": "linuxopsys",
            "tweet_id": "1580687390334590980",
            "tweet_text": "The permissions digit of a particular user class is the sum of the permissions values for that class.\n\nEach digit of the permissions number can be an addition of 4, 2, 1, or 0:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:16.000Z"
        },
        {
            "id": 5684,
            "username": "linuxopsys",
            "tweet_id": "1580687387784450048",
            "tweet_text": "The following numbers represent the write, read, and execute permissions:\n\n\u2022 r (read) = 4\n\u2022 w  (write) = 2\n\u2022 x (execute) = 1\n\u2022 no permissions = 0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:15.000Z"
        },
        {
            "id": 5685,
            "username": "linuxopsys",
            "tweet_id": "1580687385209077760",
            "tweet_text": "The permission number might be three or four digits in length, ranging from 0 to 7.\n\nWhen a three-digit number is used, the first digit denotes the file's owner's permissions, the second the file's group, and the last all other users.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:15.000Z"
        },
        {
            "id": 5686,
            "username": "linuxopsys",
            "tweet_id": "1580687382675718145",
            "tweet_text": "[+] File permissions numerical representations:\n\nFile permissions can be represented numerically or symbolically. In this thread I will only concentrate on the numerical format.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:14.000Z"
        },
        {
            "id": 5687,
            "username": "linuxopsys",
            "tweet_id": "1580687380079464448",
            "tweet_text": "In the example above, (`-rwxr-xr-x`) means that the file owner has read, write and execute permissions (`rwx`), and the group and others have only read and execute permissions (`r-x`).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:13.000Z"
        },
        {
            "id": 5688,
            "username": "linuxopsys",
            "tweet_id": "1580687377441296388",
            "tweet_text": "The first group indicates the owner's permissions, the second group indicates group permissions, and the third is everyone else's permissions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:13.000Z"
        },
        {
            "id": 5689,
            "username": "linuxopsys",
            "tweet_id": "1580687374811418625",
            "tweet_text": "The file type is indicated by the first character. It could be a normal file (-), a directory (d), a symbolic link (l), or any other form of file. The file permissions are represented by nine characters, three groups of three characters each.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:12.000Z"
        },
        {
            "id": 5690,
            "username": "linuxopsys",
            "tweet_id": "1580687371883814912",
            "tweet_text": "A breakdown of the ls command output: https://t.co/5eEE0BhgDu",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe-6yR_VUAAFOH_.jpg\"]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:11.000Z"
        },
        {
            "id": 5691,
            "username": "linuxopsys",
            "tweet_id": "1580687365449732096",
            "tweet_text": "As I have mentioned, file permissions or attributes can be viewed using the ls command. Here is an example: https://t.co/5cuFSYSHcM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fe-6x5JVsAA23Nv.png\"]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:10.000Z"
        },
        {
            "id": 5692,
            "username": "linuxopsys",
            "tweet_id": "1580687357300260865",
            "tweet_text": "[+] Execute permission (x)\n\n\u2022 The file can be run, such as a bash script.\n\u2022 The directory can be entered using the cd command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:08.000Z"
        },
        {
            "id": 5693,
            "username": "linuxopsys",
            "tweet_id": "1580687354653614080",
            "tweet_text": "[+] Write Permission (w)\n\n\u2022 A file that has write permissions can be changed or modified.\n\n\u2022 If a directory has write permissions, its contents can be modified. The user can create new files, delete existing files, move files, rename files, etc.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:07.000Z"
        },
        {
            "id": 5694,
            "username": "linuxopsys",
            "tweet_id": "1580687352137031680",
            "tweet_text": "[+] Read Permission (r)\n\n\u2022 When the read permission is set, the file can be read; for example, the user can open the file in a text editor (nano, vim, and so on).\n\n\u2022 The contents of the directory can be viewed. The ls command allows the user to list files within a directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:07.000Z"
        },
        {
            "id": 5695,
            "username": "linuxopsys",
            "tweet_id": "1580687349477826561",
            "tweet_text": "Here are three types of file permissions that apply to each user class:\n\n\u2022 The read permission.\n\u2022 The write permission.\n\u2022 The execute permission.\n\nBoth files and directories have identical permission properties. However, they have different meanings.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:06.000Z"
        },
        {
            "id": 5696,
            "username": "linuxopsys",
            "tweet_id": "1580687346902523904",
            "tweet_text": "There are three types of file permissions that apply to each user class and let you determine which users can read, write to, or execute the file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:05.000Z"
        },
        {
            "id": 5697,
            "username": "linuxopsys",
            "tweet_id": "1580687344255979520",
            "tweet_text": "In Linux, each file is owned by a specific user and a group, and authorization access rights are assigned to three different types of users:\n\n\u2022 The owner of the file.\n\u2022 The group members.\n\u2022 Others users (everybody else).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:05.000Z"
        },
        {
            "id": 5698,
            "username": "linuxopsys",
            "tweet_id": "1580687341659648000",
            "tweet_text": "Having knowledge of the Linux file system permissions structure enables you to restrict access to files and directories to only authorized users and processes, hence increasing the level of security of your system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:04.000Z"
        },
        {
            "id": 5699,
            "username": "linuxopsys",
            "tweet_id": "1580687339168276480",
            "tweet_text": "This ensures that only particular directories and files are accessible to authorized users and processes only.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:04.000Z"
        },
        {
            "id": 5700,
            "username": "linuxopsys",
            "tweet_id": "1580687336630722560",
            "tweet_text": "The operating system controls file access in Linux by utilizing file permissions, attributes, and ownership. In Linux, file permissions, attributes, and ownership determine the level of access that system programs and users have to files .",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Others",
            "created_at": "2022-10-13T22:30:03.000Z"
        },
        {
            "id": 5701,
            "username": "linuxopsys",
            "tweet_id": "1580687334160277505",
            "tweet_text": "Understanding Linux File Permissions (easy-to-follow thread) \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1580687334160277505",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-13T22:30:02.000Z"
        },
        {
            "id": 5702,
            "username": "linuxopsys",
            "tweet_id": "1579962563617382400",
            "tweet_text": "sudo rm -fr /\n\nDeletes all French language packs from the Linux server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579962563617382400",
            "tweet_type": "Others",
            "created_at": "2022-10-11T22:30:04.000Z"
        },
        {
            "id": 5703,
            "username": "linuxopsys",
            "tweet_id": "1579456729821065216",
            "tweet_text": "Linux folks, how old were you when you started using Linux? \ud83d\udc27\ud83e\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1579456729821065216",
            "tweet_type": "Others",
            "created_at": "2022-10-10T13:00:03.000Z"
        },
        {
            "id": 5704,
            "username": "linuxopsys",
            "tweet_id": "1578522000938500096",
            "tweet_text": "That's all! Thank you for getting this far. I hope you find this thread useful.\n\nIf you found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps \u2192\n@linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:47.000Z"
        },
        {
            "id": 5705,
            "username": "linuxopsys",
            "tweet_id": "1578521998317101056",
            "tweet_text": "Its primary function is to scan patterns and process data. Awk can perform multiple file searches in a single statement.\n\nHere is an example of using awk to print all the user names in the /etc/passwd file:\n\n$ awk -F : '{print $1}' /etc/passwd",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:46.000Z"
        },
        {
            "id": 5706,
            "username": "linuxopsys",
            "tweet_id": "1578521995708223489",
            "tweet_text": "Awk does not require compilation and offers advanced text processing capabilities. Awk can be used to create small statement programs that search files for matching patterns.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:45.000Z"
        },
        {
            "id": 5707,
            "username": "linuxopsys",
            "tweet_id": "1578521993120391168",
            "tweet_text": "[+] awk/Gawk\n\nAwk is a command-line utility and scripting language for manipulating data and formatting output reports. To achieve the desired result, this command supports a number of variables, functions, and logical operators.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:45.000Z"
        },
        {
            "id": 5708,
            "username": "linuxopsys",
            "tweet_id": "1578521990498963456",
            "tweet_text": "The distinctions between the files are indicated. This is a convenient way to check changes and move modifications from one version of the same file to another.\n\n$ vimdiff log1.txt log2.txt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:44.000Z"
        },
        {
            "id": 5709,
            "username": "linuxopsys",
            "tweet_id": "1578521987990724608",
            "tweet_text": "The vimdiff command is also another great command for comparing files. vimdiff launches Vim on two to eight files. Each file is given its own window.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:44.000Z"
        },
        {
            "id": 5710,
            "username": "linuxopsys",
            "tweet_id": "1578521985415462912",
            "tweet_text": "[+] Diff\n\nThe diff command simply compares two text sources/text files and outputs their differences. It compares the files line by line to find the differences.\n\n$ diff log1.txt log2.txt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:43.000Z"
        },
        {
            "id": 5711,
            "username": "linuxopsys",
            "tweet_id": "1578521982848536576",
            "tweet_text": "Here is an example of using uniq to remove duplicates:\n\nsort log.txt | uniq\n\nThe preceding example is simply equivalent to the'sort -u' command; it is up to you to choose which one you prefer. As for me, I tend to use both, depending on which comes to mind first.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:42.000Z"
        },
        {
            "id": 5712,
            "username": "linuxopsys",
            "tweet_id": "1578521980357050370",
            "tweet_text": "[+] Uniq\n\nThe uniq (unique) command is another useful tool for parsing logs. It's used to omit/remove duplicates from a file, hence the name uniq. Uniq only remove adjacent duplicates, so we have to sort our file before we use it against uniq otherwise it won't work.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:42.000Z"
        },
        {
            "id": 5713,
            "username": "linuxopsys",
            "tweet_id": "1578521977601503233",
            "tweet_text": "Here is how you can sort a file:\n\n$ sort log.txt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:41.000Z"
        },
        {
            "id": 5714,
            "username": "linuxopsys",
            "tweet_id": "1578521975080656896",
            "tweet_text": "[+] Sort\n\nThe sort command is used to sort file contents and output the results to standard output. Rearranging the contents of a file numerically or alphabetically, as well as putting data in ascending or descending order, increases readability.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:41.000Z"
        },
        {
            "id": 5715,
            "username": "linuxopsys",
            "tweet_id": "1578521972664770562",
            "tweet_text": "Here is the basic usage of the sed command:\n\n$ sed 's/pattern/replace/g' syslog.txt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:40.000Z"
        },
        {
            "id": 5716,
            "username": "linuxopsys",
            "tweet_id": "1578521970143948800",
            "tweet_text": "[+] Sed\n\nSED is a text stream editor that is used on Unix systems to swiftly and efficiently edit files. The program searches through a text file, and replaces, inserts, and deletes lines without opening the file in a full-fledged text editor.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:39.000Z"
        },
        {
            "id": 5717,
            "username": "linuxopsys",
            "tweet_id": "1578521967719686144",
            "tweet_text": "The basic usage of the cut command is very simple:\n\n$ cut -d \" \" -f 3 file.log",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:39.000Z"
        },
        {
            "id": 5718,
            "username": "linuxopsys",
            "tweet_id": "1578521965211439104",
            "tweet_text": "[+] Cat\n\nThe cut is a Linux/Unix command line utility that removes sections of lines from files as well as piped data and prints the selected parts of lines to standard output (stdout) that is your terminal screen.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:38.000Z"
        },
        {
            "id": 5719,
            "username": "linuxopsys",
            "tweet_id": "1578521962602631168",
            "tweet_text": "The only difference is that ngrep parses text in network packets by using regular or hexadecimal expressions to match against data payloads (the actual information or message in sent data, but not auto-generated metadata) of packets.\n\nHere is the basic syntax\n\n$ ngrep -I file.cap",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:38.000Z"
        },
        {
            "id": 5720,
            "username": "linuxopsys",
            "tweet_id": "1578521960039927810",
            "tweet_text": "[+] Ngrep\n\nNgrep (network grep) is a straightforward yet effective network packet analyzer. It is a network layer grep-like tool that matches traffic passing through a network interface.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:37.000Z"
        },
        {
            "id": 5721,
            "username": "linuxopsys",
            "tweet_id": "1578521957548507136",
            "tweet_text": "If you want to search through compressed files, zgrep is your best friend.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:36.000Z"
        },
        {
            "id": 5722,
            "username": "linuxopsys",
            "tweet_id": "1578521954935484417",
            "tweet_text": "When it finds a match, it prints the result on the terminal screen.\n\nWhen you want to search through large log files, the grep command comes in handy.\n\nHere is the basic syntax for grep:\n\n$ grep &lt;options&gt; &lt;pattern&gt; filename",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:36.000Z"
        },
        {
            "id": 5723,
            "username": "linuxopsys",
            "tweet_id": "1578521952376877056",
            "tweet_text": "[+] Grep\n\n\"Grep\" is an abbreviation for \"Global Regular Expression Print.\" Grep is a Linux/Unix command-line tool that searches a file for a string of characters. The pattern that is searched in the file is referred to as the regular expression.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:35.000Z"
        },
        {
            "id": 5724,
            "username": "linuxopsys",
            "tweet_id": "1578521949952622592",
            "tweet_text": "In this thread, I'll go over a few tools that can help you parse and analyze logs more effectively from the command line.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:35.000Z"
        },
        {
            "id": 5725,
            "username": "linuxopsys",
            "tweet_id": "1578521947377258497",
            "tweet_text": "They record a timeline of events on a Linux system, such as operating system events, application activity, and user activities and actions (for example log-in attempts).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:34.000Z"
        },
        {
            "id": 5726,
            "username": "linuxopsys",
            "tweet_id": "1578521944965537794",
            "tweet_text": "Linux logs are a valuable resource for system administrators, network administrators, developers, and security professionals.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Others",
            "created_at": "2022-10-07T23:05:33.000Z"
        },
        {
            "id": 5727,
            "username": "linuxopsys",
            "tweet_id": "1578521942503567360",
            "tweet_text": "Linux command line tools for parsing and analyzing logs \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1578521942503567360",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-07T23:05:33.000Z"
        },
        {
            "id": 5728,
            "username": "linuxopsys",
            "tweet_id": "1577788244871114752",
            "tweet_text": "Do you have an audio problem on your Linux desktop? https://t.co/kt28QrfMgl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FeVuC8bUAAIG-bd.jpg\"]",
            "tweet_conversation_id": "1577788244871114752",
            "tweet_type": "Others",
            "created_at": "2022-10-05T22:30:06.000Z"
        },
        {
            "id": 5729,
            "username": "linuxopsys",
            "tweet_id": "1577063465633558528",
            "tweet_text": "Follow us here on Twitter (@linuxopsys) for more daily byte-size Linux tips \ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577063463007813632",
            "tweet_type": "Others",
            "created_at": "2022-10-03T22:30:05.000Z"
        },
        {
            "id": 5730,
            "username": "linuxopsys",
            "tweet_id": "1577063463007813632",
            "tweet_text": "Quick Linux tip \ud83d\udca1\n\nHow often has this happened to you? After entering and running a lengthy command, you realize you forgot to include sudo at the start. You can simply type\n\n$  sudo !!\n\nand the command line will replace !! with the last command, you attempted to execute.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1577063463007813632",
            "tweet_type": "Linux tips",
            "created_at": "2022-10-03T22:30:04.000Z"
        },
        {
            "id": 5731,
            "username": "linuxopsys",
            "tweet_id": "1576557633003089920",
            "tweet_text": "\ud83d\udc4b Hello everyone\n\nWe tweet about the following:\n\n\ud83d\udc27 Linux\n\ud83d\udc27 Linux commands\n\ud83d\udc27 Linux Tips\n\ud83d\udc27 Shell Scripting\n\ud83d\udc27 Bash Tips\n\ud83d\udc27 Linux cheatsheets\n\ud83d\udc27 Sysadmin\n\ud83d\udc27Tips for those who are unfamiliar with Linux\n\ud83d\udc27 More Linux Stuff and resources\n\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1576557633003089920",
            "tweet_type": "Others",
            "created_at": "2022-10-02T13:00:05.000Z"
        },
        {
            "id": 5732,
            "username": "linuxopsys",
            "tweet_id": "1575613945636745216",
            "tweet_text": "You can freely download the pdf version here:\n\nhttps://t.co/IPfmf02enf",
            "tweet_media": "[]",
            "tweet_conversation_id": "1575613936837140481",
            "tweet_type": "Others",
            "created_at": "2022-09-29T22:30:12.000Z"
        },
        {
            "id": 5733,
            "username": "linuxopsys",
            "tweet_id": "1575613936837140481",
            "tweet_text": "We created this amazing Linux commands cheat sheet that will save you hours of googling \ud83d\udc27. https://t.co/gtJaOYE7mp",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fd20gSTUAAAharj.png\"]",
            "tweet_conversation_id": "1575613936837140481",
            "tweet_type": "Others",
            "created_at": "2022-09-29T22:30:10.000Z"
        },
        {
            "id": 5734,
            "username": "linuxopsys",
            "tweet_id": "1574889203459969024",
            "tweet_text": "That's all! Thank you for getting this far. I hope you find this thread useful.\n\nIf you found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps \u2192\n@linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:20.000Z"
        },
        {
            "id": 5735,
            "username": "linuxopsys",
            "tweet_id": "1574889200779898880",
            "tweet_text": "In my experience as a Linux power user, adduser is far superior at creating new users in Linux. I use it more frequently when I need to create users. As a result, I recommend that everyone use it.\n\nSo how about you? Which do you prefer, adduser or useradd?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:20.000Z"
        },
        {
            "id": 5736,
            "username": "linuxopsys",
            "tweet_id": "1574889198300995584",
            "tweet_text": "\u2022 Default shell\n\u2022 Home directory\n\u2022 Extra groups\n\u2022 Add extra groups",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:19.000Z"
        },
        {
            "id": 5737,
            "username": "linuxopsys",
            "tweet_id": "1574889195759292416",
            "tweet_text": "The configuration file for Adduser allows you to specify the default values that will be used when creating the account. The file is well documented and allows you to configure default values such as:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:18.000Z"
        },
        {
            "id": 5738,
            "username": "linuxopsys",
            "tweet_id": "1574889193238499328",
            "tweet_text": "\u2022 shell SHELL - Instead of the default, use SHELL.\n\n\u2022 ingroup GROUP: Change the primary group of the user to GROUP.\n\n\u2022 add_extra_groups: Add a new user to a configuration-defined extra group.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:18.000Z"
        },
        {
            "id": 5739,
            "username": "linuxopsys",
            "tweet_id": "1574889190801559552",
            "tweet_text": "\u2022 home DIR -  Instead of the default home directory, use DIR. If necessary, a directory will be created and skeleton files copied.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:17.000Z"
        },
        {
            "id": 5740,
            "username": "linuxopsys",
            "tweet_id": "1574889188272373761",
            "tweet_text": "\u2022 system - Create a new system user. System users are automatically assigned to the nogroup group. Use the -gid or -ingroup options to add a system user to an existing group.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:17.000Z"
        },
        {
            "id": 5741,
            "username": "linuxopsys",
            "tweet_id": "1574889185479204875",
            "tweet_text": "It is also important to know that you can omit the -c option if you don't wish to add user infomation.\n\nThe Adduser command provides you with a number of options. Here is a short list of the most important ones. For more information, see the help or man pages.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:16.000Z"
        },
        {
            "id": 5742,
            "username": "linuxopsys",
            "tweet_id": "1574889182832447488",
            "tweet_text": "To achieve nearly the same result as adduser by using the low-level utility useradd, the command would look like this:\n\n$ sudo useradd -d /home/coffeaddicts -m -s/bin/zsh -p secretpass  -c FullName,Phone,Other Information",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:15.000Z"
        },
        {
            "id": 5743,
            "username": "linuxopsys",
            "tweet_id": "1574889180085112833",
            "tweet_text": "If you check the /home directory you will notice that this command has also created the home directory of the new user upon creation. https://t.co/y84Eu5lBTW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdshXF2VQAAx33s.png\"]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:15.000Z"
        },
        {
            "id": 5744,
            "username": "linuxopsys",
            "tweet_id": "1574889173927878656",
            "tweet_text": "The above command will add a new user to your Linux system. It will ask for some details and after entering those details a new user account would be created.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:13.000Z"
        },
        {
            "id": 5745,
            "username": "linuxopsys",
            "tweet_id": "1574889171172270080",
            "tweet_text": "To add a user using this command simply type the following command:\n\n$ adduser username https://t.co/vjLIlQZdT0",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdshWk8UAAA6osT.png\"]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:13.000Z"
        },
        {
            "id": 5746,
            "username": "linuxopsys",
            "tweet_id": "1574889164734025728",
            "tweet_text": "When using the adduser command, the settings in /etc/login.defs will be used. Even the man page on Debian-based distributions recommends it over the useradd command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:11.000Z"
        },
        {
            "id": 5747,
            "username": "linuxopsys",
            "tweet_id": "1574889162221633538",
            "tweet_text": "Adduser is an interactive high-level utility. This command is less interactive than the adduser command. As a backend, it employs the low-level utility useradd.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:10.000Z"
        },
        {
            "id": 5748,
            "username": "linuxopsys",
            "tweet_id": "1574889159654748162",
            "tweet_text": "Adduser command\n\nSome Linux distributions do not include the Adduser command. Others have a soft link to useradd. For some, it is a Perl script.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:10.000Z"
        },
        {
            "id": 5749,
            "username": "linuxopsys",
            "tweet_id": "1574889156831981568",
            "tweet_text": "Looking at the /home directory after successfully executing the above command you will notice that the home directory for the user coffescripts hasn't been created. https://t.co/OMV8hO1vvk",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdshVxIUYAA49kJ.png\"]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:09.000Z"
        },
        {
            "id": 5750,
            "username": "linuxopsys",
            "tweet_id": "1574889150943092736",
            "tweet_text": "Useradd\n\nLet's start with a look at the useradd command's default behavior. Execute the below command.\n\n$ useradd username https://t.co/KE15N4UdtU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdshVbEUUAETzgl.png\"]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:08.000Z"
        },
        {
            "id": 5751,
            "username": "linuxopsys",
            "tweet_id": "1574889143900856320",
            "tweet_text": "Now that you understand the differences between the useradd and adduser commands, let's look at how to use these commands to create users in Linux.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:06.000Z"
        },
        {
            "id": 5752,
            "username": "linuxopsys",
            "tweet_id": "1574889141388513280",
            "tweet_text": "This high-level utility is more effective at creating new Linux users, as it allows you to create a home directory, set a password, and configure a few other settings upon user creation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:05.000Z"
        },
        {
            "id": 5753,
            "username": "linuxopsys",
            "tweet_id": "1574889138800578560",
            "tweet_text": "On the other hand, adduser is not a standard command in Linux. It's purely a Perl script that runs in the background and employs the useradd command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:05.000Z"
        },
        {
            "id": 5754,
            "username": "linuxopsys",
            "tweet_id": "1574889136074260480",
            "tweet_text": "Useradd is a built-in Linux command that is available on all Linux systems. However, creating new users with this low-level (limited) command is a time-consuming task because it does not automatically create the home directory and user password.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Others",
            "created_at": "2022-09-27T22:30:04.000Z"
        },
        {
            "id": 5755,
            "username": "linuxopsys",
            "tweet_id": "1574889133473878016",
            "tweet_text": "In most Linux systems, when you want to create a new user, you have two options: adduser or useradd.\n\nSo, what exactly is the difference between the two? Is one of them superior to the other? Which should you choose? Is it useradd or adduser?\n\nMore in this thread\ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1574889133473878016",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-27T22:30:04.000Z"
        },
        {
            "id": 5756,
            "username": "linuxopsys",
            "tweet_id": "1573802826169344002",
            "tweet_text": "Quick Linux tip \ud83d\udca1\n\nYou can use the semi-colon \u2018;\u2019 character to run multiple commands in one line\n\n$ cmd1 ; cmd2 ; cmdn\n\nThis is useful when you don't want to wait for the first command to finish running and then execute the next one.\n\nFollow @linuxopsys for more such useful tips",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573802826169344002",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-24T22:33:28.000Z"
        },
        {
            "id": 5757,
            "username": "linuxopsys",
            "tweet_id": "1573077248797655040",
            "tweet_text": "If you found this thread valuable:\n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps \u2192\n@linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:17.000Z"
        },
        {
            "id": 5758,
            "username": "linuxopsys",
            "tweet_id": "1573077246213955584",
            "tweet_text": "This information should be enough to help you find the process IDs of programs using the pidof command and terminate them when necessary.\n\nThat's all! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:16.000Z"
        },
        {
            "id": 5759,
            "username": "linuxopsys",
            "tweet_id": "1573077243609219073",
            "tweet_text": "If you want to learn more about the kill command we have written a detailed article on that, so feel free to check it out:\n\nkill Command in Linux Explained\n\nhttps://t.co/CRJ9kuNvag",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:15.000Z"
        },
        {
            "id": 5760,
            "username": "linuxopsys",
            "tweet_id": "1573077240677486592",
            "tweet_text": "Alternatively, you can use the command-line substitution $(...) or '.....' to find the process IDs and then terminate them in a simple one-liner.\n\n$ kill -9 `pidof flameshot`\n\n$ kill -9 $(pidof flameshot) https://t.co/gWh7TMlbDY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdSxaXhUcAAGLVQ.png\"]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:15.000Z"
        },
        {
            "id": 5761,
            "username": "linuxopsys",
            "tweet_id": "1573077234805444608",
            "tweet_text": "The above command will display all the process IDs associated with the flameshot program.\n\nOnce you've identified the flameshot process IDs, use the kill command to send a signal (SIGTERM) to terminate the processes.\n\n$ kill 539569 https://t.co/tmNMkO8KoP",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdSxaBfVEAA6TfD.png\"]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:13.000Z"
        },
        {
            "id": 5762,
            "username": "linuxopsys",
            "tweet_id": "1573077228799242240",
            "tweet_text": "Assume the flameshot program is consuming excessive memory and has become unresponsive, and you need to terminate the flameshot processes. To begin, use pidof to find the PIDs:\n\n$ pidof flameshot https://t.co/eZxtNIl2Xo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdSxZngVIAA9msO.png\"]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:12.000Z"
        },
        {
            "id": 5763,
            "username": "linuxopsys",
            "tweet_id": "1573077222272868352",
            "tweet_text": "Now that you understand what the pidof command does and how to use it, let's look at a practical example of using pidof in conjunction with other commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:10.000Z"
        },
        {
            "id": 5764,
            "username": "linuxopsys",
            "tweet_id": "1573077219408109568",
            "tweet_text": "By default, all PIDs of matching running applications are displayed. To force pidof to display only one process ID use the -s option. Here is an example: https://t.co/DXIyxnns4J",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdSxZCYVEAA6hXQ.png\"]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:10.000Z"
        },
        {
            "id": 5765,
            "username": "linuxopsys",
            "tweet_id": "1573077212210659329",
            "tweet_text": "If any processes with names that match bash are running, their PIDs will be shown on the screen. The output will be empty if no matches are detected.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:08.000Z"
        },
        {
            "id": 5766,
            "username": "linuxopsys",
            "tweet_id": "1573077209283117056",
            "tweet_text": "pidof will show the PIDs of all running programs that match the given name when executed without any options. For example, to find the PID of bash shell:\n\n$ pidof bash https://t.co/q2c6g6SWGY",
            "tweet_media": "[\"https://pbs.twimg.com/media/FdSxYhnUAAEhsMi.png\"]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:07.000Z"
        },
        {
            "id": 5767,
            "username": "linuxopsys",
            "tweet_id": "1573077202140217344",
            "tweet_text": "The pidof command takes zero or more program names as parameters, but usually, only one program name is passed to it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:06.000Z"
        },
        {
            "id": 5768,
            "username": "linuxopsys",
            "tweet_id": "1573077199732604928",
            "tweet_text": "The basic sysntax of pidof is as follows:\n\n$ pidof [OPTIONS] PROGRAM_NAME",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:05.000Z"
        },
        {
            "id": 5769,
            "username": "linuxopsys",
            "tweet_id": "1573077197224484865",
            "tweet_text": "pidof is a Linux command-line utility that returns the process IDs of a specific running program by its name.\n\nThose IDs are printed on the standard output. A process ID is a unique identifier assigned to each process when it is created on the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Others",
            "created_at": "2022-09-22T22:30:04.000Z"
        },
        {
            "id": 5770,
            "username": "linuxopsys",
            "tweet_id": "1573077194737217536",
            "tweet_text": "pidof command in Linux explained (with a practical example) \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1573077194737217536",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-22T22:30:04.000Z"
        },
        {
            "id": 5771,
            "username": "linuxopsys",
            "tweet_id": "1572352414149398530",
            "tweet_text": "Linux tip of the day \ud83d\udc27\ud83d\udca1\n\nTo find a list of all files that contain a specific word or string, use:\n\n$ grep -rl string\n\n-r for recursive\n-l to display a list of matching files\n\nfollow (@linuxopsys) us for more Linux tips \ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1572352414149398530",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-20T22:30:03.000Z"
        },
        {
            "id": 5772,
            "username": "linuxopsys",
            "tweet_id": "1570902869779550208",
            "tweet_text": "A cool infographic to help you remember the Linux file system structure\ud83d\udc27\u2193 https://t.co/E9vLAubO7d",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fcz31TuagAEU6CM.jpg\"]",
            "tweet_conversation_id": "1570902869779550208",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-16T22:30:04.000Z"
        },
        {
            "id": 5773,
            "username": "linuxopsys",
            "tweet_id": "1569817696711372801",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps \u2192 @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:59.000Z"
        },
        {
            "id": 5774,
            "username": "linuxopsys",
            "tweet_id": "1569817693745979392",
            "tweet_text": "This information should be sufficient to help you save time by starting to search for files like a pro on your Linux system.\n\nThat's all! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:58.000Z"
        },
        {
            "id": 5775,
            "username": "linuxopsys",
            "tweet_id": "1569817690868699136",
            "tweet_text": "This database can be updated using the updatedb command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:57.000Z"
        },
        {
            "id": 5776,
            "username": "linuxopsys",
            "tweet_id": "1569817688087855106",
            "tweet_text": "But, it is more efficient and faster than find because, instead of looking through the file system when a user performs a file search operation (like find does), locate searches a database that stores bits and sections of files and their respective file system paths.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:57.000Z"
        },
        {
            "id": 5777,
            "username": "linuxopsys",
            "tweet_id": "1569817685369958400",
            "tweet_text": "[7] locate\n\nLike the find command, the locate command is a commonly used command-line tool for quickly searching files by their names.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:56.000Z"
        },
        {
            "id": 5778,
            "username": "linuxopsys",
            "tweet_id": "1569817682652057600",
            "tweet_text": "It is typically used to locate program executables, man pages, and configuration files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:56.000Z"
        },
        {
            "id": 5779,
            "username": "linuxopsys",
            "tweet_id": "1569817679724433408",
            "tweet_text": "[6] whereis\n\nIn Linux, the whereis command is used to locate a program's binary, source, and manual page files. This command looks for files in a certain list of places (binary file directories, man page directories, and library directories).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:55.000Z"
        },
        {
            "id": 5780,
            "username": "linuxopsys",
            "tweet_id": "1569817676587073536",
            "tweet_text": "It accomplishes this by searching the PATH for executable files that match the names of the inputs. Path names are not canonicalized.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:54.000Z"
        },
        {
            "id": 5781,
            "username": "linuxopsys",
            "tweet_id": "1569817673890152449",
            "tweet_text": "[5] which\n\nwhich returns the pathnames of the files (or links) that would be run in the current environment if its inputs were supplied as commands in a POSIX-compliant shell.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:53.000Z"
        },
        {
            "id": 5782,
            "username": "linuxopsys",
            "tweet_id": "1569817671281315841",
            "tweet_text": "if the action is requested, for example, deleting the found items or listing its permissions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:53.000Z"
        },
        {
            "id": 5783,
            "username": "linuxopsys",
            "tweet_id": "1569817668580155393",
            "tweet_text": "[4] find\n\nfind is a powerful, frequently used command-line utility that locates files based on some user-specified criteria and either outputs the pathname of each found item or performs an action on each matched object .....",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:52.000Z"
        },
        {
            "id": 5784,
            "username": "linuxopsys",
            "tweet_id": "1569817665581232128",
            "tweet_text": "[3] plocate\n\nplocate is a newer, much faster locate.\n\nIt searches the system for all files that match the specified pattern (or all of the patterns if multiple are given). This is accomplished through the use of an index created by the updatedb command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:51.000Z"
        },
        {
            "id": 5785,
            "username": "linuxopsys",
            "tweet_id": "1569817662934614018",
            "tweet_text": "It is portable, has no dependencies, and has a flexible layout with a Vim/Neovim plugin, key bindings, and fuzzy auto-completion support.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:51.000Z"
        },
        {
            "id": 5786,
            "username": "linuxopsys",
            "tweet_id": "1569817660195745793",
            "tweet_text": "[2] fzf\n\nfzf is an abbreviation for fuzzy finder. Fzf is a tiny, lightning-fast command-line tool that allows you to quickly search for and open files in Linux.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:50.000Z"
        },
        {
            "id": 5787,
            "username": "linuxopsys",
            "tweet_id": "1569817657511378947",
            "tweet_text": "[1] fd\n\nfd is a program that searches your filesystem for entries. It is an easy, quick, and user-friendly alternative to find. While it does not intend to support all of the find's powerful functionality, it does provide reasonable defaults for the vast majority of use cases.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Others",
            "created_at": "2022-09-13T22:37:50.000Z"
        },
        {
            "id": 5788,
            "username": "linuxopsys",
            "tweet_id": "1569817654713778178",
            "tweet_text": "Knowing how to locate files in your filesystem is crucial for a Linux user.\n\nHere are 7 Linux command-line tools to help you quickly and easily locate files on your system: \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569817654713778178",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-13T22:37:49.000Z"
        },
        {
            "id": 5789,
            "username": "linuxopsys",
            "tweet_id": "1569097353579339776",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 \r@linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:36.000Z"
        },
        {
            "id": 5790,
            "username": "linuxopsys",
            "tweet_id": "1569097350865637378",
            "tweet_text": "This information should be sufficient to help you understand the Linux booting process.\n\nThat's all! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:35.000Z"
        },
        {
            "id": 5791,
            "username": "linuxopsys",
            "tweet_id": "1569097348181262336",
            "tweet_text": "Startup programs are run during system startup, and kill programs on system shutdown.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:34.000Z"
        },
        {
            "id": 5792,
            "username": "linuxopsys",
            "tweet_id": "1569097345442410498",
            "tweet_text": "It should be noted that the actual location of these directories vary from distribution to distribution.\n\nYou'll find programs that begin with a \"S\" or \"K\" for startup or kill in the various run level directories.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:34.000Z"
        },
        {
            "id": 5793,
            "username": "linuxopsys",
            "tweet_id": "1569097342493806594",
            "tweet_text": "\u2022 Run level 0 \u2013 /etc/rc.d/rc0.d/\n\u2022 Run level 1 \u2013 /etc/rc.d/rc1.d/\n\u2022 Run level 2 \u2013 /etc/rc.d/rc2.d/\n\u2022 Run level 3 \u2013 /etc/rc.d/rc3.d/\n\u2022 Run level 4 \u2013 /etc/rc.d/rc4.d/\n\u2022 Run level 5 \u2013 /etc/rc.d/rc5.d/\n\u2022 Run level 6 \u2013 /etc/rc.d/rc6.d/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:33.000Z"
        },
        {
            "id": 5794,
            "username": "linuxopsys",
            "tweet_id": "1569097339591360516",
            "tweet_text": "Stage 6: Runlevel\n\nThere is only one default run level; it will execute all essential programs for that run level.\n\nThe system will examine and execute run-level programs from the folders listed below:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:32.000Z"
        },
        {
            "id": 5795,
            "username": "linuxopsys",
            "tweet_id": "1569097336852475904",
            "tweet_text": "Init will examine and identify the default initlevel from the file \"/etc/inittab\" in order to load all appropriate programs for the run level.\n\nYou may determine your system's default run level by running the following command:\n\n$ grep initdefault /etc/inittab",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:32.000Z"
        },
        {
            "id": 5796,
            "username": "linuxopsys",
            "tweet_id": "1569097334134554624",
            "tweet_text": "Instead, modern Linux systems use systemd to select a run level. The Linux operating system includes seven (7) different run levels.\n\n\u2022 0 \u2013 halt\n\u2022 1 \u2013 single-user mode\n\u2022 2 \u2013 Multiuser, without NFS\n\u2022 3 \u2013 Full multiuser mode\n\u2022 4 \u2013 unused\n\u2022 5 \u2013 X11\n\u2022 6 \u2013 reboot",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:31.000Z"
        },
        {
            "id": 5797,
            "username": "linuxopsys",
            "tweet_id": "1569097331362123776",
            "tweet_text": "Stage 5: Init\n\nAt this moment, your system executes runlevel applications. To determine the Linux run level, it would look for an init file, normally found at /etc/inittab.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:30.000Z"
        },
        {
            "id": 5798,
            "username": "linuxopsys",
            "tweet_id": "1569097328740679681",
            "tweet_text": "The kernel then uses Initial RAM Disk (initrd) to create a temporary root file system until the real file system is mounted.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:30.000Z"
        },
        {
            "id": 5799,
            "username": "linuxopsys",
            "tweet_id": "1569097326102446081",
            "tweet_text": "During this stage of the boot process, the GRUB-selected kernel initially mounts the root file system defined in the grub.conf file. Then it runs the /sbin/init program, which is always the first one to run. This is confirmed by its process id (PID), which should always be 1.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:29.000Z"
        },
        {
            "id": 5800,
            "username": "linuxopsys",
            "tweet_id": "1569097323304878081",
            "tweet_text": "Stage 4: Kernel\n\nThe kernel is frequently referred to as the heart of every operating system, including Linux. It has complete control over your entire system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:28.000Z"
        },
        {
            "id": 5801,
            "username": "linuxopsys",
            "tweet_id": "1569097320691830792",
            "tweet_text": "The GRUB configuration file can be found in \"/boot/grub/grub.conf.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:28.000Z"
        },
        {
            "id": 5802,
            "username": "linuxopsys",
            "tweet_id": "1569097317999058944",
            "tweet_text": "On system boot, GRUB displays a splash screen and waits for user input to select an operating system; if you do not type anything, it loads the default kernel image supplied in the grub configuration file.\n\nGrub is familiar with your operating system's filesystem.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:27.000Z"
        },
        {
            "id": 5803,
            "username": "linuxopsys",
            "tweet_id": "1569097315134353409",
            "tweet_text": "If you have more than one operating system, all of them will be listed in this GRUB file, and you can choose which one to use as the default.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:27.000Z"
        },
        {
            "id": 5804,
            "username": "linuxopsys",
            "tweet_id": "1569097312319963139",
            "tweet_text": "Stage 3: GRUB\n\nGRUB is an abbreviation for Grand Unified Bootloader.\n\nIt contains all information about the operating system image that will be loaded and executed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:26.000Z"
        },
        {
            "id": 5805,
            "username": "linuxopsys",
            "tweet_id": "1569097309631430656",
            "tweet_text": "In older systems, the MBR also stores information about GRUB, or LILO.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:25.000Z"
        },
        {
            "id": 5806,
            "username": "linuxopsys",
            "tweet_id": "1569097306863194113",
            "tweet_text": "MBR is 512 bytes in size and consists of three components.\nThe primary boot loader information is stored in the first 446 bytes.\nThe next 64 bytes include partition table information.\nThe last two bytes contain an MBR validation check.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:25.000Z"
        },
        {
            "id": 5807,
            "username": "linuxopsys",
            "tweet_id": "1569097304153686017",
            "tweet_text": "Stage 2: MBR\n\nMBR is an abbreviation for Master Boot Record. It's responsibility is to load and run the GRUB boot loader.\n\nMBR is found in the first sector of the bootable drive. In most cases, /dev/had or /dev/sda.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:24.000Z"
        },
        {
            "id": 5808,
            "username": "linuxopsys",
            "tweet_id": "1569097301402202114",
            "tweet_text": "When the boot loader program is detected, it is loaded into memory and the BIOS gives it control of the computer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:23.000Z"
        },
        {
            "id": 5809,
            "username": "linuxopsys",
            "tweet_id": "1569097298717851649",
            "tweet_text": "The BIOS then searches for, loads, and runs the boot loader program stored in the Master Boot Record (MBR). The MBR is sometimes kept on a USB stick or CD-ROM, such as during a live Linux installation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:23.000Z"
        },
        {
            "id": 5810,
            "username": "linuxopsys",
            "tweet_id": "1569097295999959041",
            "tweet_text": "Stage 1: BIOS\n\nBIOS is an abbreviation for Basic Input/Output System. In layman's terms, the BIOS's responsibilities are to locate and execute a boot loader (GRUB, LILO) program.\n\nWhen you initially power on your computer, the BIOS examines the HDD or SSD for integrity.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:22.000Z"
        },
        {
            "id": 5811,
            "username": "linuxopsys",
            "tweet_id": "1569097293294628864",
            "tweet_text": "\u2022 Kernel \u2013 Kernel executes /sbin/init\n\u2022 Init \u2013 Init executes runlevel programs\n\u2022 Runlevel \u2013 Runlevel programs are executed from /etc/rc.d/rc*.d/",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:21.000Z"
        },
        {
            "id": 5812,
            "username": "linuxopsys",
            "tweet_id": "1569097290639634435",
            "tweet_text": "In this thread, we'll go through the Linux boot process step by step.\n\nThe Linux boot process is divided into six high-level stages:\n\n\u2022 BIOS \u2013 Basic Input/Output System executes MBR\n\u2022 MBR \u2013 Master Boot Record execute GRUB\n\u2022 GRUB \u2013 Grand Unified Bootloader executes Kernel",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:21.000Z"
        },
        {
            "id": 5813,
            "username": "linuxopsys",
            "tweet_id": "1569097287737184258",
            "tweet_text": "For any operating system, there is a boot process that is executed one by one until you reach the operating system's login screen.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:20.000Z"
        },
        {
            "id": 5814,
            "username": "linuxopsys",
            "tweet_id": "1569097285044436997",
            "tweet_text": "When you press the system's power button, you will see the login screen on your screen and the system will begin working.\n\nHave you ever wondered what happens between pressing the power button and seeing the login screen show up?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Others",
            "created_at": "2022-09-11T22:55:19.000Z"
        },
        {
            "id": 5815,
            "username": "linuxopsys",
            "tweet_id": "1569097282330722304",
            "tweet_text": "The Linux Booting Process Explained \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1569097282330722304",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-11T22:55:19.000Z"
        },
        {
            "id": 5816,
            "username": "linuxopsys",
            "tweet_id": "1568366163784257537",
            "tweet_text": "Linux Tip of the day \ud83d\udca1\ud83d\udc27\n\nIf you want to prevent accidental overwriting of existing files, enable the \"noclobber\" option with the set builtin.\n\n$ set -o noclobber\n\nfollow us(@linuxopsys) for more daily useful Linux tips \ud83d\udc27 https://t.co/DZ7wi8qIvL",
            "tweet_media": "[\"https://pbs.twimg.com/media/FcP0tiaaUAAmwG1.png\"]",
            "tweet_conversation_id": "1568366163784257537",
            "tweet_type": "Linux tips",
            "created_at": "2022-09-09T22:30:06.000Z"
        },
        {
            "id": 5817,
            "username": "linuxopsys",
            "tweet_id": "1567641378020261889",
            "tweet_text": "Linux never gets easier.\nYou just get better at it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1567641378020261889",
            "tweet_type": "Others",
            "created_at": "2022-09-07T22:30:04.000Z"
        },
        {
            "id": 5818,
            "username": "linuxopsys",
            "tweet_id": "1566954357169348608",
            "tweet_text": "- Managing Filesystems\n- Advanced Shell Scripting\n- Introduction to sed and gawk for text manipulation and log parsing.\n- Linux Regular Expressions\n\nThank us later \ud83d\ude03\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566954351460945920",
            "tweet_type": "Others",
            "created_at": "2022-09-06T01:00:06.000Z"
        },
        {
            "id": 5819,
            "username": "linuxopsys",
            "tweet_id": "1566954354594131968",
            "tweet_text": "This book is jam-packed with useful practical tips and it includes content that covers:\n\n- Understanding the Shell and Writing Simple Script Utilities\n- Creating Database, Web, and Email Scripts\n- Creating Fun Little Shell Scripts",
            "tweet_media": "[]",
            "tweet_conversation_id": "1566954351460945920",
            "tweet_type": "Others",
            "created_at": "2022-09-06T01:00:05.000Z"
        },
        {
            "id": 5820,
            "username": "linuxopsys",
            "tweet_id": "1566954351460945920",
            "tweet_text": "Do you want to start learning Linux and become familiar with it? Great! This is the book for you. https://t.co/N4gQbcvioM",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fb7wrWqUEAEvReG.jpg\"]",
            "tweet_conversation_id": "1566954351460945920",
            "tweet_type": "Others",
            "created_at": "2022-09-06T01:00:04.000Z"
        },
        {
            "id": 5821,
            "username": "linuxopsys",
            "tweet_id": "1565882292676898816",
            "tweet_text": "New achievement unlocked\ud83d\udd25\n15K Followers!\n\nThank you everyone for supporting us \ud83d\udc27\ud83d\udc99. https://t.co/cptGGdJpP2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbshpV3UYAAR7_S.jpg\"]",
            "tweet_conversation_id": "1565882292676898816",
            "tweet_type": "Others",
            "created_at": "2022-09-03T02:00:05.000Z"
        },
        {
            "id": 5822,
            "username": "linuxopsys",
            "tweet_id": "1565257439561129984",
            "tweet_text": "Hello everyone,\ud83d\udc4b\n\nWe are an independent portal that publishes Linux, Sysadmin, and DevOps content.\n\nWe tweet about Linux, Sysadmin, and DevOps related topics.\n\nOur tweets can help you improve your Linux knowledge.\n\nFollow us and learn Linux right here on Twitter\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1565257439561129984",
            "tweet_type": "Others",
            "created_at": "2022-09-01T08:37:09.000Z"
        },
        {
            "id": 5823,
            "username": "linuxopsys",
            "tweet_id": "1564994662300938244",
            "tweet_text": "The rmdir command ensures that the directory is empty before deleting it.\n\nAlternatively, you can also use this command to complete the same task:\n\n$ find / -type d -empty -delete\n\nfollow us(@linuxopsys) for more useful Linux tips \ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564994659788603392",
            "tweet_type": "Others",
            "created_at": "2022-08-31T15:12:58.000Z"
        },
        {
            "id": 5824,
            "username": "linuxopsys",
            "tweet_id": "1564994659788603392",
            "tweet_text": "Linux Tip of the day \ud83d\udca1\ud83d\udc27\n\nIf you want to clean empty directories, find command can make the job easy:\n\n$ find / -type d -empty -exec rmdir {} +\n\nThe -type d option searches for directories, -empty select empty ones and -exec rmdir {} executes the rmdir command to delete them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564994659788603392",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-31T15:12:57.000Z"
        },
        {
            "id": 5825,
            "username": "linuxopsys",
            "tweet_id": "1564272564448333824",
            "tweet_text": "If you were teaching someone Linux, what's the first thing you would tell them?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1564272564448333824",
            "tweet_type": "Others",
            "created_at": "2022-08-29T15:23:36.000Z"
        },
        {
            "id": 5826,
            "username": "linuxopsys",
            "tweet_id": "1563498531670724610",
            "tweet_text": "A great infographic to help you understand Linux file permissions. https://t.co/uTvbC3QWmW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbKpoJcVsAAf-1i.jpg\"]",
            "tweet_conversation_id": "1563498531670724610",
            "tweet_type": "Others",
            "created_at": "2022-08-27T12:07:53.000Z"
        },
        {
            "id": 5827,
            "username": "linuxopsys",
            "tweet_id": "1563032997003005952",
            "tweet_text": "Linux folks, \n\nWhen creating a new user do you prefer",
            "tweet_media": "[]",
            "tweet_conversation_id": "1563032997003005952",
            "tweet_type": "Others",
            "created_at": "2022-08-26T05:18:00.000Z"
        },
        {
            "id": 5828,
            "username": "linuxopsys",
            "tweet_id": "1562820900520529923",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin and DevOps \u2192 @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:13.000Z"
        },
        {
            "id": 5829,
            "username": "linuxopsys",
            "tweet_id": "1562820898012270598",
            "tweet_text": "That's all for this thread! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:12.000Z"
        },
        {
            "id": 5830,
            "username": "linuxopsys",
            "tweet_id": "1562820895051091968",
            "tweet_text": "To unlock a locked account, specify the user name after the usermod -U option: https://t.co/AhEQE2uDM5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBUclUEAIEInL.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:11.000Z"
        },
        {
            "id": 5831,
            "username": "linuxopsys",
            "tweet_id": "1562820888436699136",
            "tweet_text": "[10] Locking and Unlocking a User Account\n\nTo lock out a user account use the -L option. If the account is locked with -L, the user's login attempt will fail when entering the password. https://t.co/buj627N4Rx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBUB8UYAI6c5H.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:10.000Z"
        },
        {
            "id": 5832,
            "username": "linuxopsys",
            "tweet_id": "1562820881306357768",
            "tweet_text": "[9] Setting user password\n\nusermod also has a dedicated -p option for creating passwords.\nHowever, passwords are stored in clear text (unencrypted) in the /etc/shadow file, so creating passwords this way is not recommended. It is recommended to use the passwd command: https://t.co/Rw4htDOWak",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBTnNUUAMgwB7.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:08.000Z"
        },
        {
            "id": 5833,
            "username": "linuxopsys",
            "tweet_id": "1562820874197118978",
            "tweet_text": "To change the user UID, run the usermod command with the -u option followed by her new UID and username: https://t.co/oVNa6Yt41I",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBTMvUsAYoOYL.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:06.000Z"
        },
        {
            "id": 5834,
            "username": "linuxopsys",
            "tweet_id": "1562820867414847488",
            "tweet_text": "[8]  Changing the User ID\n\nA UID (User Identifier) \u200b\u200bis a number assigned to each user by the system. This is used by the operating system to track and manage each user's activities.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:05.000Z"
        },
        {
            "id": 5835,
            "username": "linuxopsys",
            "tweet_id": "1562820864323637249",
            "tweet_text": "[7] Changing the User Name\n\nThough it is uncommon, you may want to change the name of an existing user on occasion. To change the username, use the -l option: https://t.co/qWXohjchhz",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBSoVUIAQ9kYy.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:04.000Z"
        },
        {
            "id": 5836,
            "username": "linuxopsys",
            "tweet_id": "1562820857239441408",
            "tweet_text": "To change the user's default shell, issue the usermod command with the -s option, followed by the absolute path of the shell and the user's name. Most shells are located in the /usr/bin/directory. https://t.co/CJw4ymeIby",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBSO_UUAEg3Au.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:02.000Z"
        },
        {
            "id": 5837,
            "username": "linuxopsys",
            "tweet_id": "1562820850654461952",
            "tweet_text": "[6] Changing a User Default Login Shell\n\nThe default shell is the one that is invoked when you log in to the system. The default shell on most Linux systems these days is ZSH Shell rather than Bash Shell.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:01.000Z"
        },
        {
            "id": 5838,
            "username": "linuxopsys",
            "tweet_id": "1562820847542214662",
            "tweet_text": "The command does not, by default, migrate the contents of the user's home directory to the new one. Use the -m option to move the contents. If the new directory does not exist already, the usermod command will create it: https://t.co/CXTcu1RYhH",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBRpGVQAE_Mxx.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:15:00.000Z"
        },
        {
            "id": 5839,
            "username": "linuxopsys",
            "tweet_id": "1562820840256811008",
            "tweet_text": "[5] Changing a User Home Directory\n\nWhen you create a user in Linux, the system creates a home directory for the user in /home/ and name it after the user by default. To change the location of the user's home directory Use the -d option : https://t.co/smIQkgWEc3",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBRORVUAIOPHe.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:58.000Z"
        },
        {
            "id": 5840,
            "username": "linuxopsys",
            "tweet_id": "1562820833403318274",
            "tweet_text": "When adding a user to a new group, always use the -a (append) option. If the -a option is not used, the user will be removed from all groups that are not included after the -G option.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:57.000Z"
        },
        {
            "id": 5841,
            "username": "linuxopsys",
            "tweet_id": "1562820830832185346",
            "tweet_text": "If you wish to add the user to multiple groups at the same time, provide the groups following the -G option, separated by, (commas), with no whitespace in between.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:56.000Z"
        },
        {
            "id": 5842,
            "username": "linuxopsys",
            "tweet_id": "1562820827610943488",
            "tweet_text": "[4] Add a User to a secondary Group\n\nTo add a user to a supplementary(secondary) group, use the -a -G options followed by the name of the group and the username.\n\nHere is an example of adding the user tom to a secondary group sudo: https://t.co/qiA4q88bJw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBQgAUcAE6w2S.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:55.000Z"
        },
        {
            "id": 5843,
            "username": "linuxopsys",
            "tweet_id": "1562820820728131587",
            "tweet_text": "Here's an example of changing the user Tom's main group to managers: https://t.co/jfeJoJjQ2e",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBQGzUsAIARtF.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:54.000Z"
        },
        {
            "id": 5844,
            "username": "linuxopsys",
            "tweet_id": "1562820814101106688",
            "tweet_text": "[3] Change User Primary Group\n\nTo modify a user's primary group, use the usermod command with the -g option, preceded by the name of the group and the username. Each system user can be assigned to precisely one primary group and zero or more secondary groups.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:52.000Z"
        },
        {
            "id": 5845,
            "username": "linuxopsys",
            "tweet_id": "1562820811223810049",
            "tweet_text": "The account in the preceding example is set to never expire. This can be changed by running usermod with the -e option. It allows you to define the account's expiry year, month, and day. Use this format YYYY-MM-DD when setting the expiry time: https://t.co/Wx53R6VVCB",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBPhpVsAAcXjN.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:51.000Z"
        },
        {
            "id": 5846,
            "username": "linuxopsys",
            "tweet_id": "1562820803787255808",
            "tweet_text": "[2] Set User\u2019s Account Expiry Date\n\nIn Linux, user accounts never expire by default. To find out how old a user's accounts are, use the \"chage -l command\": https://t.co/3xVJgN25Wt",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBPE8UsAQx8Tu.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:50.000Z"
        },
        {
            "id": 5847,
            "username": "linuxopsys",
            "tweet_id": "1562820795943899137",
            "tweet_text": "[1] Add Information about user\n\nTo add descriptive information about the user such name, room number, work phone, home phone, email address, and so on use the usermod -c option: https://t.co/Yg9fDZpm79",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBOrmUEAA0eTo.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:48.000Z"
        },
        {
            "id": 5848,
            "username": "linuxopsys",
            "tweet_id": "1562820789501497350",
            "tweet_text": "Usermod command examples\n\nNow that you understand the usermod command's basic syntax and what it does, let's look at some usermod practical examples.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:46.000Z"
        },
        {
            "id": 5849,
            "username": "linuxopsys",
            "tweet_id": "1562820786703896576",
            "tweet_text": "usermod syntax\n\nHere is the basic syntax for the usermod command: https://t.co/uDsHsHqS4o",
            "tweet_media": "[\"https://pbs.twimg.com/media/FbBBOIwUEAUl0Hm.jpg\"]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:46.000Z"
        },
        {
            "id": 5850,
            "username": "linuxopsys",
            "tweet_id": "1562820778235637762",
            "tweet_text": "Though you can manually edit these files with any text editor of your choosing, you should avoid doing so unless you are sure what you are doing. Always use the command for this purpose. For example, to alter a user account's details, use the usermod or groupmod command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:43.000Z"
        },
        {
            "id": 5851,
            "username": "linuxopsys",
            "tweet_id": "1562820775685435392",
            "tweet_text": "\u2022 /etc/gshadow - information related to group security\n\u2022 /etc/login.defs - default user configuration information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:43.000Z"
        },
        {
            "id": 5852,
            "username": "linuxopsys",
            "tweet_id": "1562820772954984449",
            "tweet_text": "The usermod command modifies the user information stored in the following configuration files.\n\n\u2022 /etc/passwd - user information\n\u2022 /etc/shadow - user security information\n\u2022 /etc/group - user group information",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:42.000Z"
        },
        {
            "id": 5853,
            "username": "linuxopsys",
            "tweet_id": "1562820770312491010",
            "tweet_text": "It is used to change the information of an existing user account, such as the username, user ID, home directory location, user groups, password, default login shell, and so on.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:42.000Z"
        },
        {
            "id": 5854,
            "username": "linuxopsys",
            "tweet_id": "1562820767842045953",
            "tweet_text": "usermod is a command-line tool for modifying a user's login details.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Others",
            "created_at": "2022-08-25T15:14:41.000Z"
        },
        {
            "id": 5855,
            "username": "linuxopsys",
            "tweet_id": "1562820765296144384",
            "tweet_text": "The usermod command in Linux explained with 10 practical examples. \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562820765296144384",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-25T15:14:40.000Z"
        },
        {
            "id": 5856,
            "username": "linuxopsys",
            "tweet_id": "1562056990599159809",
            "tweet_text": "That's it for today's thread! \n\nThank you for taking the time to read my brief Linux thread! \n\nIf you enjoyed this thread, follow us at @linuxopsys for future Linux posts, which we will be posting on a daily basis.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:42.000Z"
        },
        {
            "id": 5857,
            "username": "linuxopsys",
            "tweet_id": "1562056988019736576",
            "tweet_text": "Feel free to check the useradd command help (useradd --help) or manual (man useradd)for more options you can use with.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:42.000Z"
        },
        {
            "id": 5858,
            "username": "linuxopsys",
            "tweet_id": "1562056985532542976",
            "tweet_text": "\u2022-u uid - Specifies a unique UID for the account",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:41.000Z"
        },
        {
            "id": 5859,
            "username": "linuxopsys",
            "tweet_id": "1562056982772711426",
            "tweet_text": "\u2022-N - do not create a group with the same name as\nthe user\n\u2022 -p pass - encrypted password of the new account.\n\u2022-U-  create a group with the same name as the user.\n\u2022 -s SHELL - login shell of the new account.\n\u2022 -r - Creates a system account.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:40.000Z"
        },
        {
            "id": 5860,
            "username": "linuxopsys",
            "tweet_id": "1562056980025356289",
            "tweet_text": "\u2022 -d dir_name - Specifies a name other than the login name for the HOME directory.\n\u2022 -m - Creates the user\u2019s HOME directory.\n\u2022 -M - Disables the creation of a user's HOME directory (used if the default setting is to create one).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:40.000Z"
        },
        {
            "id": 5861,
            "username": "linuxopsys",
            "tweet_id": "1562056977412268032",
            "tweet_text": "You can use the useradd command-line options to alter a default value or behavior when creating a new user. Here are some of the options you should be aware of:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:39.000Z"
        },
        {
            "id": 5862,
            "username": "linuxopsys",
            "tweet_id": "1562056974765678592",
            "tweet_text": "The useradd program does not by default create a $HOME directory in many Linux distributions, but the -m command-line option instructs it to do so. That behavior may be modified in the /etc/login.defs file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:39.000Z"
        },
        {
            "id": 5863,
            "username": "linuxopsys",
            "tweet_id": "1562056972307820544",
            "tweet_text": "You can check this by making a new user account with the system's default settings and then checking the new user's $HOME directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:38.000Z"
        },
        {
            "id": 5864,
            "username": "linuxopsys",
            "tweet_id": "1562056969824772097",
            "tweet_text": "These are the default startup files for your login shell environment (such as zsh, bash, fsh, and so on). When a user is created, the system automatically copies these default files into their $HOME directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:37.000Z"
        },
        {
            "id": 5865,
            "username": "linuxopsys",
            "tweet_id": "1562056966930722817",
            "tweet_text": "The files can be found in the /etc/skel directory on many Linux systems: https://t.co/JNyWLavD9j",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa2Kh9SVEAA74TT.jpg\"]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:37.000Z"
        },
        {
            "id": 5866,
            "username": "linuxopsys",
            "tweet_id": "1562056960266031105",
            "tweet_text": "An administrator can create a default $HOME directory configuration using the useradd command, and the new user's $HOME directory is then created using that configuration as a template. This enables you to automatically add system default files to each new user's $HOME directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:35.000Z"
        },
        {
            "id": 5867,
            "username": "linuxopsys",
            "tweet_id": "1562056957736865793",
            "tweet_text": "\u2022 The contents of the /etc/skel directory will be copied to the user's $HOME directory.\n\u2022 For the user account to receive mail, the system will create a file in the mail directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:34.000Z"
        },
        {
            "id": 5868,
            "username": "linuxopsys",
            "tweet_id": "1562056955220221952",
            "tweet_text": "\u2022 When the password expires, the account will not be terminated.\n\u2022 The new account will not have a set expiration date.\n\u2022 The bash shell will be the new account's default shell.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:34.000Z"
        },
        {
            "id": 5869,
            "username": "linuxopsys",
            "tweet_id": "1562056952670085120",
            "tweet_text": "Here are the default values that the useradd command uses if you don't specify them on the command line when creating a new user on the system:\n\n\u2022 The new user will be assigned to a group with the ID 100.\n\u2022 The $HOME directory /home/username will be created for the new user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:33.000Z"
        },
        {
            "id": 5870,
            "username": "linuxopsys",
            "tweet_id": "1562056950065479680",
            "tweet_text": "Important\n\nThe /etc/default/useradd file is used to set the default settings for the useradd command. In addition, additional security settings are defined in the /etc/login.defs file. You can change the default security behavior on your Linux system by editing these files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:33.000Z"
        },
        {
            "id": 5871,
            "username": "linuxopsys",
            "tweet_id": "1562056946894548992",
            "tweet_text": "The useradd command creates a user account by combining system default settings and command-line parameters.\n\nTo see the system default values on your Linux distribution, use the useradd command with the -D option: https://t.co/MoAJ0QyBTF",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fa2Kgy3UIAAvQQG.jpg\"]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:32.000Z"
        },
        {
            "id": 5872,
            "username": "linuxopsys",
            "tweet_id": "1562056938573013000",
            "tweet_text": "The useradd command is the main tool for adding new users to a Linux system. This command allows you to quickly create a new user account and configure the user's $HOME directory structure.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Others",
            "created_at": "2022-08-23T12:39:30.000Z"
        },
        {
            "id": 5873,
            "username": "linuxopsys",
            "tweet_id": "1562056936077422592",
            "tweet_text": "Linux user management - how to add users in Linux \ud83e\uddf5\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1562056936077422592",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-23T12:39:29.000Z"
        },
        {
            "id": 5874,
            "username": "linuxopsys",
            "tweet_id": "1561858416972218368",
            "tweet_text": "Quick Linux Tip \ud83d\udca1\n\nBy default, the shell logs every command you type on your terminal in a file called a history file (for example .zsh_history).\n\nIf you don't want the shell to log your commands, prefix them with a space.\n\nContinue to follow us for more useful Linux tips.\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561858416972218368",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-22T23:30:39.000Z"
        },
        {
            "id": 5875,
            "username": "linuxopsys",
            "tweet_id": "1561171304455081984",
            "tweet_text": "That's it for today's thread! \n\nThank you for taking the time to read my brief Linux thread! \n\nIf you enjoyed this thread, follow us @linuxopsys for future Linux posts, which we will be posting on a daily basis.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:18.000Z"
        },
        {
            "id": 5876,
            "username": "linuxopsys",
            "tweet_id": "1561171301791723521",
            "tweet_text": "Differences, soft link &amp; hard link:\n\n\u2022 Soft links, like shortcuts, can point to any file or\ndirectory in any file system.\n\n\u2022 Hard links are similar to shortcuts for files and\nfolders, but they cannot be created for directories or\nfiles in a different file systems.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:18.000Z"
        },
        {
            "id": 5877,
            "username": "linuxopsys",
            "tweet_id": "1561171299229003776",
            "tweet_text": "It's worth noting that both hard-linked files have the same inode number. This is due to the fact that they are physically the same file. Their file sizes are also identical.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:17.000Z"
        },
        {
            "id": 5878,
            "username": "linuxopsys",
            "tweet_id": "1561171296678858752",
            "tweet_text": "Following the creation of the hard link file, we used the ls -li command to display both the inode numbers and a long listing for the logs.txt and hl_logs.txt files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:16.000Z"
        },
        {
            "id": 5879,
            "username": "linuxopsys",
            "tweet_id": "1561171293877047298",
            "tweet_text": "To create a hard link, the original file must still exist, but no options are required on the ln command this time. https://t.co/x8x6qMQke1",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaplBA8VsAIpFs5.png\"]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:16.000Z"
        },
        {
            "id": 5880,
            "username": "linuxopsys",
            "tweet_id": "1561171287656898560",
            "tweet_text": "Hard Link \n\nA hard link creates a separate virtual file with information about the original file and where to find it. The two files, however, are the same physical file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:14.000Z"
        },
        {
            "id": 5881,
            "username": "linuxopsys",
            "tweet_id": "1561171284708405249",
            "tweet_text": "A nice example of utilizing symbolic links is to link third-party binaries downloaded from the internet to the /bin directory so you can execute them anywhere from your command line, rather than navigating to where the binaries are. https://t.co/UO6L1t4met",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaplAgNUIAEgzFW.png\"]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:14.000Z"
        },
        {
            "id": 5882,
            "username": "linuxopsys",
            "tweet_id": "1561171278282702848",
            "tweet_text": "To view the inode number of a file or directory, use the -i option with the ls command:\n\nThe below example shows that the inode number of the logs.txt file is 2097212, whereas the inode number of the sl_logs.txt file is 2097193. Which clearly shows that these files are different. https://t.co/LybQI8VjSa",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaplAH0VEAAJZ4A.png\"]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:12.000Z"
        },
        {
            "id": 5883,
            "username": "linuxopsys",
            "tweet_id": "1561171272259686400",
            "tweet_text": "Viewing their inode numbers is another way to tell that these linked files are separate physical files.\n\nIncase you don't know \n\nThe inode number of a file or directory is a unique identification number assigned by the kernel to each object in the filesystem.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:11.000Z"
        },
        {
            "id": 5884,
            "username": "linuxopsys",
            "tweet_id": "1561171269784989696",
            "tweet_text": "This is because the sl_logs.txt file is only pointing to logs.txt . They do not share contents and they are two physically separate files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:10.000Z"
        },
        {
            "id": 5885,
            "username": "linuxopsys",
            "tweet_id": "1561171267222269953",
            "tweet_text": "Also, compare the file size of the symbolic link with that of logs.txt file. The symbolic link, sl_logs.txt file, is just 8 bytes long, while the file logs.txt is 46 bytes long.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:09.000Z"
        },
        {
            "id": 5886,
            "username": "linuxopsys",
            "tweet_id": "1561171264726634496",
            "tweet_text": "You can use ls -l to see if the files are linked together, the -&gt; sign displayed after the symbolic link filename indicates that it is symbolically linked to the file backup.tar",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:09.000Z"
        },
        {
            "id": 5887,
            "username": "linuxopsys",
            "tweet_id": "1561171262264598528",
            "tweet_text": "In the preceding example, the name of the symbolic link, sl_logs.txt, is listed second in the ln command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:08.000Z"
        },
        {
            "id": 5888,
            "username": "linuxopsys",
            "tweet_id": "1561171259383173120",
            "tweet_text": "To create a symbolic link, the original file must already exist. The ln command, when combined with the -s option, allows you to create a symbolic link. https://t.co/kzGPZHqXSN",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fapk_BtVsAAVk1D.png\"]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:08.000Z"
        },
        {
            "id": 5889,
            "username": "linuxopsys",
            "tweet_id": "1561171251883675649",
            "tweet_text": "Symbolic link \n\nA symbolic link, also known as a soft link, is a physical file that points to another file in the virtual directory structure.\n\nThe contents of the two files that are symbolically linked together are not the same.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:06.000Z"
        },
        {
            "id": 5890,
            "username": "linuxopsys",
            "tweet_id": "1561171249295855616",
            "tweet_text": "A link is a placeholder in a directory that points to the file's actual location. In Linux, there are two types of file links:\n\n\u2022 symbolic link \n\u2022 hard link",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:05.000Z"
        },
        {
            "id": 5891,
            "username": "linuxopsys",
            "tweet_id": "1561171246812844032",
            "tweet_text": "Links are extremely useful, especially if you need to have two (or more) versions of the same file on the system.\n\nInstead of having multiple physical copies of the same file on the system, you can have one physical copy and numerous virtual copies, known as links.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:05.000Z"
        },
        {
            "id": 5892,
            "username": "linuxopsys",
            "tweet_id": "1561171244237500421",
            "tweet_text": "The ability to link files is a fantastic feature of the Linux filesystem. Consider linking files in Linux to be similar to creating Windows shortcuts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Others",
            "created_at": "2022-08-21T02:00:04.000Z"
        },
        {
            "id": 5893,
            "username": "linuxopsys",
            "tweet_id": "1561171241746083840",
            "tweet_text": "Linux basics- Linking files or creating shortcuts in Linux. \ud83e\uddf5\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1561171241746083840",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-21T02:00:03.000Z"
        },
        {
            "id": 5894,
            "username": "linuxopsys",
            "tweet_id": "1560280599692095492",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin and DevOps \u2192 @linuxopsys\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:58.000Z"
        },
        {
            "id": 5895,
            "username": "linuxopsys",
            "tweet_id": "1560280597167099904",
            "tweet_text": "That's it! \n\nThank you for making it this far. Hopefully, you will find this thread useful. \n\nAdditions are welcomed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:57.000Z"
        },
        {
            "id": 5896,
            "username": "linuxopsys",
            "tweet_id": "1560280594239463424",
            "tweet_text": "EXAMPLE\n       List initramfs content of current running kernel:\n\n       lsinitramfs /boot/initrd.img-$(uname -r) https://t.co/abLV1pxwRN",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac67d8VUAEhX1_.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:56.000Z"
        },
        {
            "id": 5897,
            "username": "linuxopsys",
            "tweet_id": "1560280587604111361",
            "tweet_text": "Incase you don't know:\n\ninitramfs is a root filesystem embedded in the kernel and loaded early in the boot process. It is the heir to initrd. It provides early userspace, which can perform tasks that the kernel cannot easily perform during the boot process.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:55.000Z"
        },
        {
            "id": 5898,
            "username": "linuxopsys",
            "tweet_id": "1560280585037180928",
            "tweet_text": "[19] lsinitramfs\n\nlists the content of given initramfs images. It allows one to quickly check the content of one (or multiple) specified initramfs files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:54.000Z"
        },
        {
            "id": 5899,
            "username": "linuxopsys",
            "tweet_id": "1560280581815930880",
            "tweet_text": "[18] lsblk\n\nLsblk is used to display information about block devices, which are basically files that represent devices connected to the computer (except ram disk). Hard disks, flash drives, optical media, and other block devices are examples of block devices. https://t.co/os0SeIHHBd",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac66wKUYAAnhpd.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:53.000Z"
        },
        {
            "id": 5900,
            "username": "linuxopsys",
            "tweet_id": "1560280575302197252",
            "tweet_text": "[17] lsattr\n\nlists the file attributes on a second extended file system. https://t.co/1SG71GEY2E",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac66YOVsAA6bW4.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:52.000Z"
        },
        {
            "id": 5901,
            "username": "linuxopsys",
            "tweet_id": "1560280568629116929",
            "tweet_text": "[16] lstopo\n\nlstopo command is used to show the topology of the system. It gives information about the NUMA memory nodes, shared caches, CPU packages, processor cores and threads, and much more. https://t.co/AipeZF959s",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac657EUEAMBvR4.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:50.000Z"
        },
        {
            "id": 5902,
            "username": "linuxopsys",
            "tweet_id": "1560280560760528898",
            "tweet_text": "[15] lsns\n\nThe lsns command lists information about all currently accessible namespaces or a given namespace. A namespace identifier is an inode number. https://t.co/hOW2DA2lGC",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac65fzVUAAK4hk.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:48.000Z"
        },
        {
            "id": 5903,
            "username": "linuxopsys",
            "tweet_id": "1560280553395343368",
            "tweet_text": "[14] lsirq\n\nUtility to display kernel interrupt information. https://t.co/4E6TqqvYBI",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac65E_UYAAAXEw.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:47.000Z"
        },
        {
            "id": 5904,
            "username": "linuxopsys",
            "tweet_id": "1560280546126602242",
            "tweet_text": "[13] lsmod\n\nShow the status of modules in the Linux Kernel. lsmod is a simple program that nicely formats the contents of the /proc/modules directory, displaying which kernel modules are currently loaded. https://t.co/FigLPwssqb",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac64piUYAAgFcZ.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:45.000Z"
        },
        {
            "id": 5905,
            "username": "linuxopsys",
            "tweet_id": "1560280538681790466",
            "tweet_text": "It is worth noting that lslocks also list OFD (Open File Description) locks, which are not associated with any process (PID is -1). OFD locks are linked to the open file description from which they were obtained. https://t.co/ywXWgZOhVn",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac64MlVsAA6pDW.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:43.000Z"
        },
        {
            "id": 5906,
            "username": "linuxopsys",
            "tweet_id": "1560280531727572992",
            "tweet_text": "[12] lslocks\n\nlists information about all the currently held file locks in a Linux system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:42.000Z"
        },
        {
            "id": 5907,
            "username": "linuxopsys",
            "tweet_id": "1560280528778981378",
            "tweet_text": "[11] lsipc\n\nshows the information on the System V inter-process communication facilities for which the calling process has read access. https://t.co/bemLWPeWgL",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac63qSUEAIlYUm.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:41.000Z"
        },
        {
            "id": 5908,
            "username": "linuxopsys",
            "tweet_id": "1560280521803907072",
            "tweet_text": "[10] lspci\n\nA utility for displaying information about PCI buses in the system and devices connected to them. By default, it shows a brief list of devices. But you can use different options to request either a more verbose output or output intended for parsing by other programs. https://t.co/erQTy0ktmL",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac63PxVEAEYz5n.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:39.000Z"
        },
        {
            "id": 5909,
            "username": "linuxopsys",
            "tweet_id": "1560280514136645632",
            "tweet_text": "[9] lslogins\n\nDisplays information about known users in the system. It examines the wtmp and btmp logs, /etc/shadow (if necessary), and /passwd and outputs the desired data. https://t.co/7AqIcAswvH",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac62yaVEAA1S8V.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:37.000Z"
        },
        {
            "id": 5910,
            "username": "linuxopsys",
            "tweet_id": "1560280506620555266",
            "tweet_text": "The data includes the number of CPUs, threads, cores, sockets, and Non-Uniform Memory Access (NUMA) nodes, among other things. There is also information about CPU caches and cache sharing, as well as the family, model, bogoMIPS, byte order, and stepping. https://t.co/vblBy6bdiv",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac62V2VUAIq9ad.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:36.000Z"
        },
        {
            "id": 5911,
            "username": "linuxopsys",
            "tweet_id": "1560280499657986049",
            "tweet_text": "[8] lscpu\n\ngathers CPU architecture information from sysfs, /proc/cpuinfo, and any architecture-specific libraries that are applicable (e.g. librtas on Powerpc). The command output can be optimized for parsing or human readability.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:34.000Z"
        },
        {
            "id": 5912,
            "username": "linuxopsys",
            "tweet_id": "1560280496797454336",
            "tweet_text": "It can list a directory, a block special file, a shared library, a character special file, a regular pipe, a named pipe, an internet socket, a UNIX domain socket, and many other things. Here is an example listing LISTENING sockets. https://t.co/EvpRFwiiVx",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac61zyUEAAD_-P.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:33.000Z"
        },
        {
            "id": 5913,
            "username": "linuxopsys",
            "tweet_id": "1560280490568912896",
            "tweet_text": "[7] lsof\n\nThe command lsof stands for List Of Open Files. This command displays a list of files that have been opened. Essentially, it provides information to determine which files are opened by which process.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:32.000Z"
        },
        {
            "id": 5914,
            "username": "linuxopsys",
            "tweet_id": "1560280487708409858",
            "tweet_text": "lsfd is not a drop-in replacement for lsof; their command line interface and output formats differ. https://t.co/EnZo1BuVPW",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac61QDUUAELisX.jpg\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:31.000Z"
        },
        {
            "id": 5915,
            "username": "linuxopsys",
            "tweet_id": "1560280480968167424",
            "tweet_text": "[6] lsfd\n\nlist the file descriptors On Linux systems, lsfd is intended to be a modern replacement for lsof. Unlike lsof, lsfd is tailored to the Linux kernel; it supports Linux-specific features such as namespaces while using less code.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:29.000Z"
        },
        {
            "id": 5916,
            "username": "linuxopsys",
            "tweet_id": "1560280478464106499",
            "tweet_text": "[5] lsb_release\n\nprovides certain LSB (Linux Standard Base) and distribution-specific information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:29.000Z"
        },
        {
            "id": 5917,
            "username": "linuxopsys",
            "tweet_id": "1560280475402244097",
            "tweet_text": "[4] lsusb\n\nlsusb is a utility for displaying information about USB buses in the system and the devices connected to them. It uses udev's hardware database to associate a full human-readable name to the vendor ID and the product ID. https://t.co/dXHoEhzHkL",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac60j0UYAETxYb.png\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:28.000Z"
        },
        {
            "id": 5918,
            "username": "linuxopsys",
            "tweet_id": "1560280468389474304",
            "tweet_text": "The command also displays the memory block size as well as the amount of memory in both the online and offline states. https://t.co/okU9pyoP5d",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac60H8UEAg0-M5.png\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:26.000Z"
        },
        {
            "id": 5919,
            "username": "linuxopsys",
            "tweet_id": "1560280461514944512",
            "tweet_text": "[3] lsmem\n\nThe lsmem command displays the available memory ranges as well as their online status. The memory blocks listed correspond to the sysfs memory block representation.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:25.000Z"
        },
        {
            "id": 5920,
            "username": "linuxopsys",
            "tweet_id": "1560280458448949248",
            "tweet_text": "[2] exa\n\nexa is a modern replacement for the venerable file-listing command-line program ls that comes with Unix and Linux operating systems, adding features and improving defaults. https://t.co/eV2F2161Ca",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac6zlIUcAAAaD_.png\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:24.000Z"
        },
        {
            "id": 5921,
            "username": "linuxopsys",
            "tweet_id": "1560280451842920450",
            "tweet_text": "[1] lsd\n\nThe next gen ls command. https://t.co/x9lrKxY4P3",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fac6zImVsAEBK9-.png\"]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Others",
            "created_at": "2022-08-18T15:00:22.000Z"
        },
        {
            "id": 5922,
            "username": "linuxopsys",
            "tweet_id": "1560280444519649285",
            "tweet_text": "Useful Linux Listing Commands 98% of you might not know about.\ud83e\uddf5\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1560280444519649285",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-18T15:00:21.000Z"
        },
        {
            "id": 5923,
            "username": "linuxopsys",
            "tweet_id": "1559563714696597507",
            "tweet_text": "Note: This will only work when issued at a shell prompt. If used in scripts, it can print the name of a Bash script.\n\nStay tuned for more tips.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559563712112955392",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:32:19.000Z"
        },
        {
            "id": 5924,
            "username": "linuxopsys",
            "tweet_id": "1559563712112955392",
            "tweet_text": "The $0 variable in Linux.\n\nThis expands to the shell you are currently using or the name of the script.\n\nTo quickly determine which shell, you can use $0 bash special variable in conjunction with the echo command. \n\n$ echo $0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1559563712112955392",
            "tweet_type": "Others",
            "created_at": "2022-08-16T15:32:18.000Z"
        },
        {
            "id": 5925,
            "username": "linuxopsys",
            "tweet_id": "1558830900992831488",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:23.000Z"
        },
        {
            "id": 5926,
            "username": "linuxopsys",
            "tweet_id": "1558830898249748481",
            "tweet_text": "That's all for this thread! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:22.000Z"
        },
        {
            "id": 5927,
            "username": "linuxopsys",
            "tweet_id": "1558830895779352576",
            "tweet_text": "{ 9 } Unused\n\nThis  field is reserved for future use.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:21.000Z"
        },
        {
            "id": 5928,
            "username": "linuxopsys",
            "tweet_id": "1558830893245943808",
            "tweet_text": "{ 8 } Expiration date\n\nThe date (stored as the number of days since January 1, 1970) since the user account was disabled",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:21.000Z"
        },
        {
            "id": 5929,
            "username": "linuxopsys",
            "tweet_id": "1558830890716839938",
            "tweet_text": "{ 7 } Inactivity period\n\nThe number of days after a password expires before the account will be disabled.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:20.000Z"
        },
        {
            "id": 5930,
            "username": "linuxopsys",
            "tweet_id": "1558830888003112960",
            "tweet_text": "{ 6 } Warning period\n\nThe number of days before password expiration that the user is warned to change the password.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:20.000Z"
        },
        {
            "id": 5931,
            "username": "linuxopsys",
            "tweet_id": "1558830885461377028",
            "tweet_text": "{ 5 } Maximum password age\n\nThe number of days before the password must be changed. By default, this number is set to `99999`",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:19.000Z"
        },
        {
            "id": 5932,
            "username": "linuxopsys",
            "tweet_id": "1558830882605019137",
            "tweet_text": "{ 4 } Minimum password age\n\nThis field stores the minimum number of days before the password can be changed. It is usually set to zero, indicating that there is no minimum password age.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:18.000Z"
        },
        {
            "id": 5933,
            "username": "linuxopsys",
            "tweet_id": "1558830879513817089",
            "tweet_text": "{ 3 } Last password change\n\nThe third field stores the last time the password was changed, which is represented as the number of days since January 1, 1970.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:18.000Z"
        },
        {
            "id": 5934,
            "username": "linuxopsys",
            "tweet_id": "1558830876443627520",
            "tweet_text": "If the password field contains an asterisk (*) or an exclamation point (! ), the user will be unable to log in using password authentication. https://t.co/94fco6grFX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaIUawqUYAEDEMV.jpg\"]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:17.000Z"
        },
        {
            "id": 5935,
            "username": "linuxopsys",
            "tweet_id": "1558830869342666753",
            "tweet_text": "\u2022 $2y$ \u2013 Eksblowfish\n\u2022 $5$ \u2013 SHA-256\n\u2022 $6$ \u2013 SHA-512",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:15.000Z"
        },
        {
            "id": 5936,
            "username": "linuxopsys",
            "tweet_id": "1558830866654105600",
            "tweet_text": "{ 2 } Encrypted Password\n\nThe second field contains the encrypted password in the $type$salt$hashed format. The method cryptographic hash algorithm is represented by $type, which can take the following values:\n\u2022 $1$ \u2013 MD5\n\u2022 $2a$ \u2013 Blowfish",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:14.000Z"
        },
        {
            "id": 5937,
            "username": "linuxopsys",
            "tweet_id": "1558830863726432256",
            "tweet_text": "{ 1 } Username or Login name\n\nThe first field stores a username or unique login name. The login process compares the value stored in this field with the value we entered into the Username field at the login prompt.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:14.000Z"
        },
        {
            "id": 5938,
            "username": "linuxopsys",
            "tweet_id": "1558830860790419456",
            "tweet_text": "Each /etc/shadow file record includes nine fields which are separated by collons: https://t.co/dY8FQOA1KZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaIUZ1hVsAUKB6x.jpg\"]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:13.000Z"
        },
        {
            "id": 5939,
            "username": "linuxopsys",
            "tweet_id": "1558830853504921603",
            "tweet_text": "\ud83d\udc27 Understanding /etc/shadow format\n\nEach line in the /etc/shadow file represents a different user account. The root user is generally described on the first line, followed by the system accounts and normal user accounts.\n\nAny new entry is always append at the end of the file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:11.000Z"
        },
        {
            "id": 5940,
            "username": "linuxopsys",
            "tweet_id": "1558830850300473348",
            "tweet_text": "Here is an example of what the contents of the /etc/shadow file looks like: https://t.co/ckeYPN7bNX",
            "tweet_media": "[\"https://pbs.twimg.com/media/FaIUZMrUcAAbwrX.jpg\"]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:11.000Z"
        },
        {
            "id": 5941,
            "username": "linuxopsys",
            "tweet_id": "1558830839944790016",
            "tweet_text": "This file is only readable by the root user, so you must be root or have root privileges to view its contents.\n\nAny file viewer on Linux can be used to view the contents of this file, such as cat, more, less, etc. Alternatively, you can use the \"sudo getent shadow\" command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:08.000Z"
        },
        {
            "id": 5942,
            "username": "linuxopsys",
            "tweet_id": "1558830837046468609",
            "tweet_text": "As a Linux super user understanding the /etc/shadow file is very crucial for managing Linux users.\n\n/etc/shadow is a plain text file that stores information about the passwords of the system's users. It has 640 permissions and is owned by user root and group shadow.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Others",
            "created_at": "2022-08-14T15:00:07.000Z"
        },
        {
            "id": 5943,
            "username": "linuxopsys",
            "tweet_id": "1558830834324361217",
            "tweet_text": "Understanding the /etc/shadow file in Linux \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1558830834324361217",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-14T15:00:07.000Z"
        },
        {
            "id": 5944,
            "username": "linuxopsys",
            "tweet_id": "1557368850223472640",
            "tweet_text": "That's all for this thread! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:43.000Z"
        },
        {
            "id": 5945,
            "username": "linuxopsys",
            "tweet_id": "1557368847698575365",
            "tweet_text": "Keep in mind that, aside from the ones I've mentioned, there are numerous other cp command options.\n\nRemember that you can see all of the different parameters available for the cp command by typing 'man cp' or 'cp --help'.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:42.000Z"
        },
        {
            "id": 5946,
            "username": "linuxopsys",
            "tweet_id": "1557368845089722368",
            "tweet_text": "Notice, If the destination directory does not already exist, the cp -R command will create it before copying the contents of the source directory into it.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:41.000Z"
        },
        {
            "id": 5947,
            "username": "linuxopsys",
            "tweet_id": "1557368842052964352",
            "tweet_text": "The -R options on the cp command are extremely powerful. This option allows you to recursively copy the contents of an entire directory in a single command: https://t.co/WcMSEKBbK2",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZzitNGVUAEyByt.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:41.000Z"
        },
        {
            "id": 5948,
            "username": "linuxopsys",
            "tweet_id": "1557368835694419970",
            "tweet_text": "cp can also be used with a single dot (.). Remember that the single dot represents your current working directory. The single dot can be useful when copying a file with a long source object name to your current working directory. https://t.co/eKY7EZHYzd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZzis0yVEAEnzDU.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:39.000Z"
        },
        {
            "id": 5949,
            "username": "linuxopsys",
            "tweet_id": "1557368829277220865",
            "tweet_text": "We used absolute directory paths in the previous examples, but we can also use relative paths. https://t.co/vMOnNyiErD",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZzisd1VsAESGZd.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:38.000Z"
        },
        {
            "id": 5950,
            "username": "linuxopsys",
            "tweet_id": "1557368822763442181",
            "tweet_text": "It's also worth noting that in Linux, you can copy a file while changing its name. https://t.co/inwMgg5Lhm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZzisFZUYAE8xfG.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:36.000Z"
        },
        {
            "id": 5951,
            "username": "linuxopsys",
            "tweet_id": "1557368816941670400",
            "tweet_text": "If there is no forward slash and the subdirectory /home/linuxopsys/demo/logs does not exist, a project file is created in the current directory and no error message is displayed.\n\nAs a result, forward slashes should always be used to denote directory names.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:35.000Z"
        },
        {
            "id": 5952,
            "username": "linuxopsys",
            "tweet_id": "1557368814286737411",
            "tweet_text": "A quick tip \ud83d\udca1\n\nAt the end of the directory name, add a trailing forward slash (/). The slash denotes that the project is a directory rather than a filename. This is beneficial for clarity and is required when copying single files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:34.000Z"
        },
        {
            "id": 5953,
            "username": "linuxopsys",
            "tweet_id": "1557368811333906432",
            "tweet_text": "Like in any other operating systems, a file can also be copied into a directory that already exists. Here is a quick example to demonstrate that: https://t.co/xjuLg4CMgR",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZzirbRUUAITpvH.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:33.000Z"
        },
        {
            "id": 5954,
            "username": "linuxopsys",
            "tweet_id": "1557368805659070468",
            "tweet_text": "If you answer y, the file copy will continue and replace the contents of the file; if you answer n, it will stop the copying.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:32.000Z"
        },
        {
            "id": 5955,
            "username": "linuxopsys",
            "tweet_id": "1557368802756571137",
            "tweet_text": "If the destination file already exists, the cp command may not notify you; this can be dangerous because you may replace the contents of an important file by mistake. Use the -i option to force the shell to ask if you want to overwrite a file: https://t.co/RRJf5erd11",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZziq4MVsAY-zYC.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:31.000Z"
        },
        {
            "id": 5956,
            "username": "linuxopsys",
            "tweet_id": "1557368795651379201",
            "tweet_text": "If the source and destination parameters are both filenames rather than directories, the cp command copies the source file to a new destination file. Following that, the destination file modification time is updated. https://t.co/K4Jgiv2G4c",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZziqgzUIAAGXQ_.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:30.000Z"
        },
        {
            "id": 5957,
            "username": "linuxopsys",
            "tweet_id": "1557368789171261441",
            "tweet_text": "As a system administrator, you will frequently need to copy files and directories from one location in the filesystem to another. The cp command makes this possible.\n\nIn its most basic form, the cp command accepts two parameters: the source object and the destination object: https://t.co/qSNnpnTc0Z",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZziqGvUsAArn4w.png\"]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Others",
            "created_at": "2022-08-10T14:10:28.000Z"
        },
        {
            "id": 5958,
            "username": "linuxopsys",
            "tweet_id": "1557368781525041152",
            "tweet_text": "Everything you need to know about copying files in Linux (Linux basics) \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557368781525041152",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-10T14:10:26.000Z"
        },
        {
            "id": 5959,
            "username": "linuxopsys",
            "tweet_id": "1557018976139390976",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:26.000Z"
        },
        {
            "id": 5960,
            "username": "linuxopsys",
            "tweet_id": "1557018973681528833",
            "tweet_text": "That's all for this thread! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:25.000Z"
        },
        {
            "id": 5961,
            "username": "linuxopsys",
            "tweet_id": "1557018971097821184",
            "tweet_text": "Some special accounts do not require shell access. Administrators typically assign false shells such as /bin/false or set this field to empty in these accounts. This prevents hackers from accessing your system through these accounts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:25.000Z"
        },
        {
            "id": 5962,
            "username": "linuxopsys",
            "tweet_id": "1557018968426106881",
            "tweet_text": "\ud83d\udc27 Login shell\n\nThe last field stores information about the user's default shell. If no shell information is provided when creating a normal user account, the shell uses /bin/bash by default. You can leave this field blank if no shell is required.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:24.000Z"
        },
        {
            "id": 5963,
            "username": "linuxopsys",
            "tweet_id": "1557018965817192449",
            "tweet_text": "In other words, this is the default directory that the user gets right after the login process. When creating a user, if this information is omitted, the shell automatically sets it to /home/username or ~/.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:24.000Z"
        },
        {
            "id": 5964,
            "username": "linuxopsys",
            "tweet_id": "1557018963204222976",
            "tweet_text": "\ud83d\udc27 User\u2019s home directory\n\nThe sixth field contains information about the user's home directory. The login process uses this information to decide where to place the user immediately after they log in.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:23.000Z"
        },
        {
            "id": 5965,
            "username": "linuxopsys",
            "tweet_id": "1557018960586895360",
            "tweet_text": "work phone, home phone, email address and so on.\n\nGenerally, the chfn command is used to record user information and the finger command is used to read this information.home directory",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:22.000Z"
        },
        {
            "id": 5966,
            "username": "linuxopsys",
            "tweet_id": "1557018957931900928",
            "tweet_text": "\ud83d\udc27 User description (GECOS)\n\nThe fifth field stores descriptive information about the user. In a multi-user environment where the system is used by multiple users, this field contains all required information about a user, such as full name, room number,.......",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:22.000Z"
        },
        {
            "id": 5967,
            "username": "linuxopsys",
            "tweet_id": "1557018955289571328",
            "tweet_text": "Once a user account has been created, it can be added to other groups as needed. The other groups are considered the user's secondary groups. Usually the group name is the same as the user's name. The user's subgroups are listed in /etc/groups file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:21.000Z"
        },
        {
            "id": 5968,
            "username": "linuxopsys",
            "tweet_id": "1557018952705794049",
            "tweet_text": "In Linux, each user belongs to one or more groups. If we do not specify the group name when creating a user account, the shell will automatically create a new group and add a user account in this group. This group is called the primary group or the user's default group.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:20.000Z"
        },
        {
            "id": 5969,
            "username": "linuxopsys",
            "tweet_id": "1557018950130552832",
            "tweet_text": "This task is made easier by grouping. For example, you may be asked to grant access to a specific service to twenty users from a specific group.\n\nYou must set the permission twenty times without grouping.\nHowever, grouping allows you to complete the task in a single step.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:20.000Z"
        },
        {
            "id": 5970,
            "username": "linuxopsys",
            "tweet_id": "1557018946716389376",
            "tweet_text": "\ud83d\udc27 Group ID\n\nA group is a collection of user accounts that are similar or require access to the same resource. Linux is a network operating system that supports multiple users. The most time-consuming task is managing individual user accounts based on services.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:19.000Z"
        },
        {
            "id": 5971,
            "username": "linuxopsys",
            "tweet_id": "1557018944199729152",
            "tweet_text": "A typical user account UID usually starts at 500.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:18.000Z"
        },
        {
            "id": 5972,
            "username": "linuxopsys",
            "tweet_id": "1557018941674770432",
            "tweet_text": "The system use UIDs to track and manage each of our activities: The first UID (0) is always assigned to the user root. Besides 0, other low UIDs (usually less than 500) are   assigned to the following service accounts for example: news,  mail games, and so on.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:18.000Z"
        },
        {
            "id": 5973,
            "username": "linuxopsys",
            "tweet_id": "1557018939116244992",
            "tweet_text": "\ud83d\udc27 User ID\n\nThe third field stores the user's UID. In Linux, each user has a unique identifier called a User ID (UID). UIDs are 32-bit integers. Linux allows users to create files, change system properties, start applications and processes, and more.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:17.000Z"
        },
        {
            "id": 5974,
            "username": "linuxopsys",
            "tweet_id": "1557018936520036352",
            "tweet_text": "To use a more secure algorithm, Linux moved user passwords to a separate /etc/shadow file. The user's password is no longer stored in this field, so a temporary value of x is used to indicate that the actual password is stored elsewhere.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:17.000Z"
        },
        {
            "id": 5975,
            "username": "linuxopsys",
            "tweet_id": "1557018933743341568",
            "tweet_text": "\ud83d\udc27 Encrypted password\n\nThe second field stores the encrypted password. Historically, this field was used to store user passwords encrypted with the DES algorithm. Over time, computing power improved and the DES algorithm became easier to crack.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:16.000Z"
        },
        {
            "id": 5976,
            "username": "linuxopsys",
            "tweet_id": "1557018931176411136",
            "tweet_text": "The maximum username length is limited to 32 characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:15.000Z"
        },
        {
            "id": 5977,
            "username": "linuxopsys",
            "tweet_id": "1557018928542412806",
            "tweet_text": "During username comparison, the login process begins by searching for the specified username in the first field of each line, starting with the first line, and continues searching until a match is found or all rows have been checked.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:15.000Z"
        },
        {
            "id": 5978,
            "username": "linuxopsys",
            "tweet_id": "1557018926017499137",
            "tweet_text": "If the two values \u200b\u200bmatch, the login process assumes that the username is valid.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:14.000Z"
        },
        {
            "id": 5979,
            "username": "linuxopsys",
            "tweet_id": "1557018923467362308",
            "tweet_text": "\ud83d\udc27 Username or Login name\n\nThe first field stores a username or unique login name. The login process compares the value stored in this field with the value we entered into the Username field at the login prompt.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:14.000Z"
        },
        {
            "id": 5980,
            "username": "linuxopsys",
            "tweet_id": "1557018920833277953",
            "tweet_text": "Now that we know the fields of /etc/password, let's understand what they are and what they are used for in the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:13.000Z"
        },
        {
            "id": 5981,
            "username": "linuxopsys",
            "tweet_id": "1557018918304096256",
            "tweet_text": "Typically, the first line describes the root user, followed by the regular system or service and user accounts. A new entry is appended to the end of the file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:12.000Z"
        },
        {
            "id": 5982,
            "username": "linuxopsys",
            "tweet_id": "1557018915351306242",
            "tweet_text": "\u2022 User description (GECOS)\n\u2022 User\u2019s home directory\n\u2022 User\u2019s login shell https://t.co/1fjLg6Aq8T",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZukcudUYAAe2p3.jpg\"]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:12.000Z"
        },
        {
            "id": 5983,
            "username": "linuxopsys",
            "tweet_id": "1557018908132986880",
            "tweet_text": "\ud83d\udc27 Understanding /etc/passwd file fields\n\nEach line in the /etc/passwd file represents a single user account on the system and contains the following seven fields, separated by a colon (:):\n\n\u2022 Username or login name\n\u2022 Encrypted password\n\u2022 User ID\n\u2022 Group ID",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:10.000Z"
        },
        {
            "id": 5984,
            "username": "linuxopsys",
            "tweet_id": "1557018905494769664",
            "tweet_text": "You should avoid manually modifying /etc/passwd unless you know what you are doing. Always use the command for this purpose. For example, use the usermod or groupmod command to modify a user account information and use the useradd or adduser command to add a new user account.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:09.000Z"
        },
        {
            "id": 5985,
            "username": "linuxopsys",
            "tweet_id": "1557018902462222336",
            "tweet_text": "Here is an example of what the contents of the /etc/passwd file looks like: https://t.co/RaoNRYWnCC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZukb-CVEAE-_pv.jpg\"]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:09.000Z"
        },
        {
            "id": 5986,
            "username": "linuxopsys",
            "tweet_id": "1557018892798636033",
            "tweet_text": "Any file viewer on Linux can be used to view the contents of this file, such as cat, more, less, etc. Alternatively, you can use the \"getent passwd\" command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:06.000Z"
        },
        {
            "id": 5987,
            "username": "linuxopsys",
            "tweet_id": "1557018890122563584",
            "tweet_text": "This file is owned by the root user and has 644 (rw-r--r--) access rights or permissions. This file can only be modified by the root user or users with sudo privileges and is readable by all users of the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:06.000Z"
        },
        {
            "id": 5988,
            "username": "linuxopsys",
            "tweet_id": "1557018887501230080",
            "tweet_text": "Understanding the /etc/passwd file is important for managing users in Linux. The /etc/passwd is a plain text file that contains all the crucial information for all system user accounts needed when logging in.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Others",
            "created_at": "2022-08-09T15:00:05.000Z"
        },
        {
            "id": 5989,
            "username": "linuxopsys",
            "tweet_id": "1557018884976230406",
            "tweet_text": "Everything you need to know about the /etc/passwd file in Linux \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1557018884976230406",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-09T15:00:04.000Z"
        },
        {
            "id": 5990,
            "username": "linuxopsys",
            "tweet_id": "1556633697511567360",
            "tweet_text": "Curious, what's the first thing you do when you deploy a new Linux server?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556633697511567360",
            "tweet_type": "Others",
            "created_at": "2022-08-08T13:29:28.000Z"
        },
        {
            "id": 5991,
            "username": "linuxopsys",
            "tweet_id": "1556279082102296576",
            "tweet_text": "That's a wrap! \n\nThank you for taking your time to read our thread.\n\nIf you know of any other commands that I have missed, please leave them in the comments. \n\nAnd be sure to rt, like and follow us (@linuxopsys) for more future Linux content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:22.000Z"
        },
        {
            "id": 5992,
            "username": "linuxopsys",
            "tweet_id": "1556279079527010304",
            "tweet_text": "93.  systemctl - used to control and manage systemd and services.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:21.000Z"
        },
        {
            "id": 5993,
            "username": "linuxopsys",
            "tweet_id": "1556279076976939009",
            "tweet_text": "88. screen \u2013 keep a remote server session open. (It also functions as a full-screen window manager.)\n89. tmux is a terminal multiplexer.\n90. passwd \u2014 Change the password of a user.\n91. clear \u2013 clears the terminal's screen.\n92. env - run a command in an altered environment.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:20.000Z"
        },
        {
            "id": 5994,
            "username": "linuxopsys",
            "tweet_id": "1556279074376392704",
            "tweet_text": "88. screen \u2013 keep a remote server session open. (It also functions as a full-screen window manager.)\n89. tmux is a terminal multiplexer.\n90. passwd \u2014 Change the password of a user.\n91. clear \u2013 clears the terminal's screen.\n92. env - run a command in an altered environment.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:20.000Z"
        },
        {
            "id": 5995,
            "username": "linuxopsys",
            "tweet_id": "1556279071721472000",
            "tweet_text": "86. wait \u2013 suspend script execution until all background jobs have been completed.\n87. nohup - short for no hang up is a command in Linux systems that keep processes running even after exiting the shell or terminal.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:19.000Z"
        },
        {
            "id": 5996,
            "username": "linuxopsys",
            "tweet_id": "1556279069037080576",
            "tweet_text": "82. journalctl - Tused to view systemd, kernel and journal logs.\n83. kill - terminates a process.\n84. killall - sends a kill signal to all instances of a specific process.\n85. sleep \u2013 pauses program execution for a given amount of time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:18.000Z"
        },
        {
            "id": 5997,
            "username": "linuxopsys",
            "tweet_id": "1556279066457583616",
            "tweet_text": "78. less \u2013 identical to more, but with more features\n79. tail \u2013 used to show the last few lines of a text file or piped data.\n80. head - used to show the first few lines of a text file or piped data.\n81. dmesg \u2013 displays the kernel ring's message buffer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:18.000Z"
        },
        {
            "id": 5998,
            "username": "linuxopsys",
            "tweet_id": "1556279063852883975",
            "tweet_text": "73. usermod \u2013 used to edit or change any existing user account's properties.\n74. vi is a text editor.\n75. cat \u2013 displays the contents of a file.\n76. tac \u2013 reverse output file contents.\n77. more - show file contents one screen/page at a time.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:17.000Z"
        },
        {
            "id": 5999,
            "username": "linuxopsys",
            "tweet_id": "1556279061298569216",
            "tweet_text": "70. chroot - used to change the root directory.\n71. useradd - create a new user or alter the default information for a new user.\n72. userdel - used to delete a user account and all associated files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:17.000Z"
        },
        {
            "id": 6000,
            "username": "linuxopsys",
            "tweet_id": "1556279058471612416",
            "tweet_text": "66. nc -  used for just about anything under the sun involving TCP or UDP.\n67. umask - returns, or sets, the value of the system's file mode creation mask.\n68. chmod \u2013 alters the access rights of file system objects.\n69. chown \u2013 alter the owner and group of a file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:16.000Z"
        },
        {
            "id": 6001,
            "username": "linuxopsys",
            "tweet_id": "1556279055887937536",
            "tweet_text": "62. parted \u2013 used to create and manipulate partition tables.\n63. blkid - a command-line utility for finding and printing block device attributes.\n64. mkfs - create a Linux file system.\n65. fsck - an utility for determining the consistency of a file system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:15.000Z"
        },
        {
            "id": 6002,
            "username": "linuxopsys",
            "tweet_id": "1556279053341995010",
            "tweet_text": "58. wget - download files through HTTP, HTTPS, FTP, and FTPS.\n59. curl \u2013 data transport via several network protocols. (Can handle more protocols than wget)\n60. dd - used to convert and copy files.\n61. fdisk - Modify the disk partition table.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:15.000Z"
        },
        {
            "id": 6003,
            "username": "linuxopsys",
            "tweet_id": "1556279050867392512",
            "tweet_text": "54. mtr - is a network diagnostic tool, a combination of ping and traceroute commands.\n55. nslookup - interactively query Internet name servers (NS).\n56. host \u2013used for DNS (Domain Name System) lookup operations.\n57. dig \u2013 DNS lookup tool.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:14.000Z"
        },
        {
            "id": 6004,
            "username": "linuxopsys",
            "tweet_id": "1556279048396890112",
            "tweet_text": "51. nmcli - sused to display network device status, create, edit, activate/deactivate, and delete network connections.\n52. ping - sends an ICMP ECHO REQUEST to network hosts.\n53. traceroute - examine the path packets follow to reach a specific host.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:14.000Z"
        },
        {
            "id": 6005,
            "username": "linuxopsys",
            "tweet_id": "1556279045884506112",
            "tweet_text": "47. zip \u2013 used for file packaging and compression (archiving).\n48. locate \u2013 in Linux, search for files.\n49. ps \u2013 allows you to list the status of processes running on your system easily.\n50. cron - execute scheduled tasks.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:13.000Z"
        },
        {
            "id": 6006,
            "username": "linuxopsys",
            "tweet_id": "1556279043309182977",
            "tweet_text": "43. rsync - remote file transfer and synchronization.\n44. tar - is an archive utility.\n45. gzip - use for compression and decompression of files.\n46. b2zip - a compression utility comparable to gzip. It employs a distinct compression algorithm.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:12.000Z"
        },
        {
            "id": 6007,
            "username": "linuxopsys",
            "tweet_id": "1556279040809377792",
            "tweet_text": "43. rsync - remote file transfer and synchronization.\n44. tar - is an archive utility.\n45. gzip - use for compression and decompression of files.\n46. b2zip - a compression utility comparable to gzip. It employs a distinct compression algorithm.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:12.000Z"
        },
        {
            "id": 6008,
            "username": "linuxopsys",
            "tweet_id": "1556279038154383362",
            "tweet_text": "40. touch \u2013 used to create, update a computer file or directory's access and modification dates.\n41. man \u2013 used to read system reference manuals.\n42. apropos \u2013 searches manual page names and descriptions for a user-supplied keyword.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:11.000Z"
        },
        {
            "id": 6009,
            "username": "linuxopsys",
            "tweet_id": "1556279035696537601",
            "tweet_text": "35. pwd \u2013 displays the current directory path.\n36. cp - copy files and directories.\n37. mv \u2013 move file or directories.\n38. rm \u2013 deletes files and directories.\n39. mkdir - create new directories.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:11.000Z"
        },
        {
            "id": 6010,
            "username": "linuxopsys",
            "tweet_id": "1556279033184145411",
            "tweet_text": "31. atop \u2013 a tool for monitoring system resources in Linux. \n32. ssh \u2013  secure protocol used as the primary means of connecting to Linux servers remotely.\n33. sudo - run commands with administrative privileges.\n34. cd \u2013 navigate between directories.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:10.000Z"
        },
        {
            "id": 6011,
            "username": "linuxopsys",
            "tweet_id": "1556279030667546624",
            "tweet_text": "27. iotop - is an interactive I/O viewer. Get a snapshot of storage r/w activity.\n28. iostat - provides statistics on storage I/O.\n29. netstat -used to show network statistics.\n30. ss - ss command is a simpler and faster version of the now obsolete netstat command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:09.000Z"
        },
        {
            "id": 6012,
            "username": "linuxopsys",
            "tweet_id": "1556279027991687168",
            "tweet_text": "24. dstat - allows you to view all of your system resources instantly. All-in-one vmstat, iostat, netstat, and ifstat utility.\n25.. Iftop is a network traffic viewer.\n26. nethogs - is a network traffic analyzer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:09.000Z"
        },
        {
            "id": 6013,
            "username": "linuxopsys",
            "tweet_id": "1556279025475104768",
            "tweet_text": "22. vmstat - used to obtain information about memory, system processes, paging, interrupts, block I/O, disk, and CPU scheduling. \n23. htop - a process viewer and manager that is interactive.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:08.000Z"
        },
        {
            "id": 6014,
            "username": "linuxopsys",
            "tweet_id": "1556279022954299392",
            "tweet_text": "19. diff - used to display differences in files by comparing line by line.\n20. uptime \u2013 displays the system uptime as well as the load average.\n21. top \u2013 shows a real-time view of running processes in Linux.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:07.000Z"
        },
        {
            "id": 6015,
            "username": "linuxopsys",
            "tweet_id": "1556279020412579841",
            "tweet_text": "15. cut - allows you to cut out sections of a specified file or piped data and print the result to standard output.\n16. sort - used to sort files\n17. uniq - used to extract uniq occurences\n18. tr - utility for translating or deleting characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:07.000Z"
        },
        {
            "id": 6016,
            "username": "linuxopsys",
            "tweet_id": "1556279017740779520",
            "tweet_text": "12. grep - searches a file for a pattern of characters and displays all lines that match.\n13. awk - a scripting language used for text processing.\n14. sed - stream editor used to perform lots of functions on files, like searching, find and replace, insertion, or deletion.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:06.000Z"
        },
        {
            "id": 6017,
            "username": "linuxopsys",
            "tweet_id": "1556279014796365824",
            "tweet_text": "9. pstree - used to show running processes in a tree (data structure).\n10. latest - displays a list of the most recently logged-in people.\n11. w \u2013 display a list of the currently logged-in user sessions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:06.000Z"
        },
        {
            "id": 6018,
            "username": "linuxopsys",
            "tweet_id": "1556279012116217857",
            "tweet_text": "5. free - use to get a detailed report on the system's memory usage.\n6. scp - securely copy files or directories over ssh.\n7. find - locates files using user-defined criteria.\n8. ncdu - provides a useful and convenient way to view disk usage.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:05.000Z"
        },
        {
            "id": 6019,
            "username": "linuxopsys",
            "tweet_id": "1556279009436061696",
            "tweet_text": "1. ip - used to show or manipulate routing, devices, and tunnels. \n2. ls - list the contents of a directory.\n3. df - Displays the amount of disk space used.\n4. du - display a list of all the files along with their respective sizes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Others",
            "created_at": "2022-08-07T14:00:04.000Z"
        },
        {
            "id": 6020,
            "username": "linuxopsys",
            "tweet_id": "1556279006781005830",
            "tweet_text": "90+ Linux commands that Linux sysadmins and power Linux users regularly use. (with explanation) \u2193\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556279006781005830",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-07T14:00:04.000Z"
        },
        {
            "id": 6021,
            "username": "linuxopsys",
            "tweet_id": "1556203229075034113",
            "tweet_text": "Why do developers favor Linux or Mac over Windows?\ud83e\udd14",
            "tweet_media": "[]",
            "tweet_conversation_id": "1556203229075034113",
            "tweet_type": "Others",
            "created_at": "2022-08-07T08:58:57.000Z"
        },
        {
            "id": 6022,
            "username": "linuxopsys",
            "tweet_id": "1555509052355928065",
            "tweet_text": "That's a wrap!\n\nThank you for taking your time to read our thread.\n\nIf you know of any other dangerous Linux commands that I have missed, please leave them in the comments.\n\nAnd be sure to rt, like and follow us (@linuxopsys) for more future Linux content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:32.000Z"
        },
        {
            "id": 6023,
            "username": "linuxopsys",
            "tweet_id": "1555509049893875712",
            "tweet_text": "Any inconsistency or data loss caused by the execution of the preceding command will bring your system to a halt.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:32.000Z"
        },
        {
            "id": 6024,
            "username": "linuxopsys",
            "tweet_id": "1555509047410827266",
            "tweet_text": "Please DO NOT run any of the above commands in your Linux terminal or shell, or on the computers of your friends or coworkers. Run them in a virtual machine if you want to test them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:31.000Z"
        },
        {
            "id": 6025,
            "username": "linuxopsys",
            "tweet_id": "1555509044495785984",
            "tweet_text": "it can also cause problems if you don't thoroughly check the changes you make before running it.\n\nThe command changes the first occurrence of foo to bar. https://t.co/zpNE9PVefd",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHOt1VsAMEq-7.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:30.000Z"
        },
        {
            "id": 6026,
            "username": "linuxopsys",
            "tweet_id": "1555509037764005890",
            "tweet_text": "11. The ^foo^bar Command \ud83d\udcdc\n\nThe ^foo^bar command has the potential to be both helpful and dangerous. While the command saves time by allowing you to edit a previously run command and re-run it,",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:29.000Z"
        },
        {
            "id": 6027,
            "username": "linuxopsys",
            "tweet_id": "1555509034844753920",
            "tweet_text": "10. Re-running all the history commands \ud83d\udd01\ud83d\udcdc\n\nBecause it executes every command from that you have already executed, the history | sh command can be dangerous. The action may cause system instability and the execution of commands that you do not want to repeat. https://t.co/FOQMMHdFOm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHOMJVQAEfMIw.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:28.000Z"
        },
        {
            "id": 6028,
            "username": "linuxopsys",
            "tweet_id": "1555509028532281344",
            "tweet_text": "9. Write random junk to hard drive \ud83c\ude33\ud83d\udcc0\n\nThis command will write random garbage data to your hard drive.\nYour system will not be recovered as a result of this command. https://t.co/LqiKLJfyzg",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHNzzVQAAzZDV.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:27.000Z"
        },
        {
            "id": 6029,
            "username": "linuxopsys",
            "tweet_id": "1555509021964005376",
            "tweet_text": "8. Unknowingly format a hard drive \ud83e\uddf9\ud83d\udcc0\n\nThis command will erase your hard drive and recreate it.\nThese should only be used when you have a backup of your data on the cloud or an external device. https://t.co/CbSr2cvGjb",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHNapUUAAu5m4.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:25.000Z"
        },
        {
            "id": 6030,
            "username": "linuxopsys",
            "tweet_id": "1555509015249006592",
            "tweet_text": "Running the code below in your terminal will delete your root partition leaving your system unusable. https://t.co/nf1NdINkaZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHNA5VEAAxras.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:23.000Z"
        },
        {
            "id": 6031,
            "username": "linuxopsys",
            "tweet_id": "1555509008462581760",
            "tweet_text": "7. The hidden recursive deletion (rm -rf /) \ud83d\udd01\ud83d\uddd1\ufe0f\n\nThe following command is the same as the previously mentioned rm -rf / command. The codes are hidden in hex here to fool an unsuspecting user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:22.000Z"
        },
        {
            "id": 6032,
            "username": "linuxopsys",
            "tweet_id": "1555509005979594752",
            "tweet_text": "The chmod command changes file permissions to configure user access to a specific file or directory.\n\nBy running this command, you grant all system users the ability to read, write, and execute data on your system. In terms of security, this is risky and dangerous.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:21.000Z"
        },
        {
            "id": 6033,
            "username": "linuxopsys",
            "tweet_id": "1555509003492265990",
            "tweet_text": "6. Breach the System \ud83d\udd13\n\nThis command does not physically affect your system in the same way that the other commands do, but it does provide a security breach on the system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:21.000Z"
        },
        {
            "id": 6034,
            "username": "linuxopsys",
            "tweet_id": "1555509000958926848",
            "tweet_text": "Please keep in mind the source from which you are downloading packages and scripts. Use only scripts or applications downloaded from a reputable source.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:20.000Z"
        },
        {
            "id": 6035,
            "username": "linuxopsys",
            "tweet_id": "1555508998140411904",
            "tweet_text": "5. Blindly download and execute malicious script \u2620\ufe0f\ud83d\udcdc\n\nWget and curl are useful Linux commands for retrieving and downloading files from the internet. However, if we blindly download and execute a malicious script, these commands can be dangerous. https://t.co/2OW3vGjA1T",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHMCvVQAAUYML.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:19.000Z"
        },
        {
            "id": 6036,
            "username": "linuxopsys",
            "tweet_id": "1555508991765016576",
            "tweet_text": "4. Overwrite the hard drive \u270d\ufe0f\ud83d\udcbf\n\nThis command writes raw data (command output) to the specified partition. This causes data loss on the hard drive or specified partition.\n\ncommand - this could be any Linux command. https://t.co/67BDPoFmLE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHLrKUIAAKUtw.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:18.000Z"
        },
        {
            "id": 6037,
            "username": "linuxopsys",
            "tweet_id": "1555508985565888512",
            "tweet_text": "3. The fork bomb \ud83c\udf74\ud83d\udca3\n\nThis is my personal best, a simple bash recursive function that, when executed, creates copies of itself, which in turn creates another set of copies of itself. This takes up CPU time and memory. As a result, it loops until the system freezes.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:16.000Z"
        },
        {
            "id": 6038,
            "username": "linuxopsys",
            "tweet_id": "1555508982688538624",
            "tweet_text": "Everything that is moved to this location is destroyed.\nAs a result, if you accidentally move your data to this folder, it will not be recovered https://t.co/8vuQc0Jp5b",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHK6KUsAAQXwq.jpg\", \"https://pbs.twimg.com/media/FZZHLI6UEAES9Ah.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:16.000Z"
        },
        {
            "id": 6039,
            "username": "linuxopsys",
            "tweet_id": "1555508972685119489",
            "tweet_text": "2. Implode hard drive \ud83d\udd73\ufe0f\n\nThis command will move all data to a special location in Linux known as the black hole, which is located in your system at /dev/null.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:13.000Z"
        },
        {
            "id": 6040,
            "username": "linuxopsys",
            "tweet_id": "1555508969845641217",
            "tweet_text": "1. Recursive deletion \ud83d\udd01\ud83d\uddd1\ufe0f \n\nThis is one of the scariest commands. When you run this command, it deletes everything in the root directory forcibly and recursively. As a result, all of your directories and subdirectories will be deleted, and all of your data will be lost. https://t.co/bl2XkcxQuK",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZZHKZ-UUAI6di7.jpg\"]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:13.000Z"
        },
        {
            "id": 6041,
            "username": "linuxopsys",
            "tweet_id": "1555508963914813441",
            "tweet_text": "11 dangerous Linux terminal commands every Linux user must be aware of (don't run).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1555508963914813441",
            "tweet_type": "Others",
            "created_at": "2022-08-05T11:00:11.000Z"
        },
        {
            "id": 6042,
            "username": "linuxopsys",
            "tweet_id": "1554119838687080449",
            "tweet_text": "Here's a quick Linux tip  \ud83d\udc27\ud83d\udca1\n\nYou can also Re-run last executed commands in Linux using the \"r\" command. \n\nThis is will also save you a couple of keystrokes as compared to other alternative ways.\n\nr is a ZSH builtin, so this only works with ZSH. https://t.co/FSnU194tV7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FZFXwaQUsAEwRhu.jpg\"]",
            "tweet_conversation_id": "1554119838687080449",
            "tweet_type": "Linux tips",
            "created_at": "2022-08-01T15:00:18.000Z"
        },
        {
            "id": 6043,
            "username": "linuxopsys",
            "tweet_id": "1554104697996201984",
            "tweet_text": "What was your very first Linux book that you read?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1554104697996201984",
            "tweet_type": "Others",
            "created_at": "2022-08-01T14:00:08.000Z"
        },
        {
            "id": 6044,
            "username": "linuxopsys",
            "tweet_id": "1553745444273917952",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 @linuxopsys \n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:35.000Z"
        },
        {
            "id": 6045,
            "username": "linuxopsys",
            "tweet_id": "1553745441723797505",
            "tweet_text": "This information should be sufficient to help you understand the Linux wildcard characters, character classes  and how to use them. \n\nThat's all! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:35.000Z"
        },
        {
            "id": 6046,
            "username": "linuxopsys",
            "tweet_id": "1553745439131705349",
            "tweet_text": "Wildcards and character classes can be used with any Linux command that takes filenames as arguments, such as ls, grep, and others. So feel free to experiment with various Linux commands.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:34.000Z"
        },
        {
            "id": 6047,
            "username": "linuxopsys",
            "tweet_id": "1553745436707434503",
            "tweet_text": "[[:digit:]]* - this will match any file beginning with a numeral.\n[![:digit:]]* - this will match any file not beginning with a numeral.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:33.000Z"
        },
        {
            "id": 6048,
            "username": "linuxopsys",
            "tweet_id": "1553745434211786752",
            "tweet_text": "[abc]* - this will match any file beginning with either an a, b or c.\n[[:upper:]]* - this will match any file beginning with an uppercase letter.\n[[:lower:]]* - this will match any file beginning with an lowercase letter.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:33.000Z"
        },
        {
            "id": 6049,
            "username": "linuxopsys",
            "tweet_id": "1553745431649128448",
            "tweet_text": "* - this will match all the files\nb* - this will match any file beginning with b\nd*.png - this will match any file beginning with d followed by any characters and ending with .png\nlog???? - this will match any file beginning with log followed by exactly four characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:32.000Z"
        },
        {
            "id": 6050,
            "username": "linuxopsys",
            "tweet_id": "1553745429107421184",
            "tweet_text": "[:lower:]- matches any lowercase letter.\n[:upper:] - matches any uppercase letter.\n\nUsing wildcards allows you to create advanced and powerful filename selection criteria. Here are some examples of patterns and what they match. \u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-31T14:12:32.000Z"
        },
        {
            "id": 6051,
            "username": "linuxopsys",
            "tweet_id": "1553745426632675334",
            "tweet_text": "[[:class:]] - Matches any character that is a member of the specified class.\n[:alnum:] - matches any alphanumeric character.\n[:alpha:] - matches any alphabetic character.\n[:digit:] - matches any numeral.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:31.000Z"
        },
        {
            "id": 6052,
            "username": "linuxopsys",
            "tweet_id": "1553745424061607936",
            "tweet_text": "\ud83d\udc27 Character classes that are frequently used:\n\n[characters] - matches any character that is a member of the set characters.\n[!characters]- matches any character that is not a member of the set characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:30.000Z"
        },
        {
            "id": 6053,
            "username": "linuxopsys",
            "tweet_id": "1553745421624782849",
            "tweet_text": "\ud83d\udc27 Wildcards that are frequently used:\n\n* - matches any characters.\n? - Matches any single character.\n[] - matches a range of characters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:30.000Z"
        },
        {
            "id": 6054,
            "username": "linuxopsys",
            "tweet_id": "1553745419204567041",
            "tweet_text": "Here is the fundamental set of wildcards, characters classes and what they do: \u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-31T14:12:29.000Z"
        },
        {
            "id": 6055,
            "username": "linuxopsys",
            "tweet_id": "1553745416776077313",
            "tweet_text": "The list of characters is surrounded by square bracket metacharacters ([]), each of which can only occupy one position.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:29.000Z"
        },
        {
            "id": 6056,
            "username": "linuxopsys",
            "tweet_id": "1553745414246912000",
            "tweet_text": "\ud83d\udc27 What are character classes? \nA character class is an improvement to the wildcard concept. Instead of matching any character at any position, we can list the characters to be matched.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:28.000Z"
        },
        {
            "id": 6057,
            "username": "linuxopsys",
            "tweet_id": "1553745411860340736",
            "tweet_text": "Using wildcards (also known as globbing) allows you to select filenames or directory names based on character patterns.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:28.000Z"
        },
        {
            "id": 6058,
            "username": "linuxopsys",
            "tweet_id": "1553745409347948545",
            "tweet_text": "\ud83d\udc27 What are wildcards? \n\nWildcards are characters or groups of characters that enable you to create a pattern for searching or matching text on strings, filenames, or directories. Wildcards are a cool shell feature that makes most Linux commands extremely powerful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Others",
            "created_at": "2022-07-31T14:12:27.000Z"
        },
        {
            "id": 6059,
            "username": "linuxopsys",
            "tweet_id": "1553745406919446529",
            "tweet_text": "Wildcards and character classes in Linux explained \u2193\ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553745406919446529",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-31T14:12:26.000Z"
        },
        {
            "id": 6060,
            "username": "linuxopsys",
            "tweet_id": "1553379906620235776",
            "tweet_text": "A quick Linux tip \ud83d\udc27\ud83d\udca1\n\nIf you can't remember the name of a command, you can use keywords to search the man pages.\nThe syntax is:\n\n$ man -k  keyword\n\nFor example, to find commands related to zip, type:\n$ man -k zip\n\nContinue to follow us for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553379906620235776",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-30T14:00:04.000Z"
        },
        {
            "id": 6061,
            "username": "linuxopsys",
            "tweet_id": "1553364803841732608",
            "tweet_text": "Hey there \ud83d\udc4b\n\nIf you are interested in\n\n\ud83d\udc27 Linux\n\ud83d\udda5 Sysadmin\n#\ufe0f\u20e3 Shell scripting\n\ud83d\udcbb DevOps\n\ud83d\udc27 Linux tips\n\ud83d\udc40 Learning in public\n\ud83d\udc27 and more Linux,\n\nFollow us. \u2705\n\nWe share daily \ud83d\udcc5 content that you won't want to miss.\n\n(\u26a0\ufe0f DISCLAIMER: We occasionally tweet about \ud83d\udc27 Linux.)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553364803841732608",
            "tweet_type": "Others",
            "created_at": "2022-07-30T13:00:04.000Z"
        },
        {
            "id": 6062,
            "username": "linuxopsys",
            "tweet_id": "1553319507845795840",
            "tweet_text": "Bash is not the only shell in Linux  \nHere are some more:\n  \n\u2192 Z Shell (zsh) \n\u2192 Tcsh/Csh Shell (csh) \n\u2192 Korn Shell (ksh) \n\u2192 Fish Shell (fish) \n\nHowever, I use zshell. Which one is your favorite and why?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553319507845795840",
            "tweet_type": "Others",
            "created_at": "2022-07-30T10:00:04.000Z"
        },
        {
            "id": 6063,
            "username": "linuxopsys",
            "tweet_id": "1553113386333786113",
            "tweet_text": "What's your favorite productivity tool or tip on Linux? \ud83d\udc27",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553113386333786113",
            "tweet_type": "Others",
            "created_at": "2022-07-29T20:21:01.000Z"
        },
        {
            "id": 6064,
            "username": "linuxopsys",
            "tweet_id": "1553017638804004864",
            "tweet_text": "Check us out @linuxopsys if you liked this thread!!\n\nAs we will be tweeting more about Linux, sysadmin and devops on a daily basis.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:33.000Z"
        },
        {
            "id": 6065,
            "username": "linuxopsys",
            "tweet_id": "1553017636325556225",
            "tweet_text": "Thank you for making it this far &amp; hopefully you found this thread helpful Feedback is really appreciated",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:32.000Z"
        },
        {
            "id": 6066,
            "username": "linuxopsys",
            "tweet_id": "1553017633695444992",
            "tweet_text": "To begin, we discovered that running a shell script initiates its own process. Finally, we looked at how functions and the alias command could help us improve our Bash scripts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:32.000Z"
        },
        {
            "id": 6067,
            "username": "linuxopsys",
            "tweet_id": "1553017631203987457",
            "tweet_text": "That's it! In this thread, we've seen several ways to use the cd command from within Bash scripts.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:31.000Z"
        },
        {
            "id": 6068,
            "username": "linuxopsys",
            "tweet_id": "1553017628737712129",
            "tweet_text": "When compared to the previous bash functions, we can see how concise this is. Furthermore, the alias can be used in the same manner as the functions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:31.000Z"
        },
        {
            "id": 6069,
            "username": "linuxopsys",
            "tweet_id": "1553017625776496641",
            "tweet_text": "\ud83d\udc27 Using Aliases\n\nUsing the built-in alias command, we can improve our Bash functions even further. Because it requires less typing, an alias is more convenient to use than a function.\n\nLet's convert our functions into their alias variants: https://t.co/ogIPAcGRTr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tTEkUIAIB2yC.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:30.000Z"
        },
        {
            "id": 6070,
            "username": "linuxopsys",
            "tweet_id": "1553017619292164099",
            "tweet_text": "Now, if we source the file, we can use the script's functions in our current terminal. https://t.co/RpE3MwaxWm",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tStpUUAEWCQo.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:28.000Z"
        },
        {
            "id": 6071,
            "username": "linuxopsys",
            "tweet_id": "1553017612921032705",
            "tweet_text": "\ud83d\udc27 Making Use of Bash Functions\n\nIt's a pain to write a Bash script for each directory. Instead, we could combine several Bash commands into a single script: https://t.co/Qetb2fECPv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tSTqUYAAZAdL.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:27.000Z"
        },
        {
            "id": 6072,
            "username": "linuxopsys",
            "tweet_id": "1553017606054879237",
            "tweet_text": "Nice! So far, we've shown that we can run shell scripts in the current shell by using source. \n\nAlternatively, we could have used the short-form . operator. https://t.co/kZPEEu1jpI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tR8EUcAAxW43.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:25.000Z"
        },
        {
            "id": 6073,
            "username": "linuxopsys",
            "tweet_id": "1553017600048631809",
            "tweet_text": "The above snippet clearly shows that the script's PID is that of the parent shell that executed it, and our parent shell's current directory is now ~/Documents.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:24.000Z"
        },
        {
            "id": 6074,
            "username": "linuxopsys",
            "tweet_id": "1553017597070716929",
            "tweet_text": "The source command executes commands within the current shell context rather than starting a new shell to do so. The dot operator is a shortcut alias for the source command (.).\n\nGreat! As a result, we can execute bash script in the current shell.\nLet's try this: https://t.co/80NxlhomP7",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tRX8UYAAsHdH.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:23.000Z"
        },
        {
            "id": 6075,
            "username": "linuxopsys",
            "tweet_id": "1553017590305288192",
            "tweet_text": "\ud83d\udc27 Running scripts in parent shell\n\nWe can use the source command to allow our script to execute commands in the current shell (parent shell).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:21.000Z"
        },
        {
            "id": 6076,
            "username": "linuxopsys",
            "tweet_id": "1553017587868438528",
            "tweet_text": "The question now is, how do we solve this problem? So, continue reading.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:21.000Z"
        },
        {
            "id": 6077,
            "username": "linuxopsys",
            "tweet_id": "1553017585288953856",
            "tweet_text": "This is common behavior. The script is run in its own independent shell (subshell/childshell). At the end of the script, this separate shell exits, leaving the parent shell, which we are currently in and it's not affected.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:20.000Z"
        },
        {
            "id": 6078,
            "username": "linuxopsys",
            "tweet_id": "1553017582772293632",
            "tweet_text": "We can clearly see that the process ID of the shell we're in (PID 4504) and the shell script (PID 4574) are totally different.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:20.000Z"
        },
        {
            "id": 6079,
            "username": "linuxopsys",
            "tweet_id": "1553017579853082625",
            "tweet_text": "You can clearly see that our directory has not changed. We weren't expecting this because the current directory had not been changed to /home/linuxopsys/Documents. So, what could be the issue?\n\nLet's take a look at the process ID of our shell: https://t.co/bpahG963Wx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tQa4UYAIrkkW.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:19.000Z"
        },
        {
            "id": 6080,
            "username": "linuxopsys",
            "tweet_id": "1553017573775536128",
            "tweet_text": "Checking to see where we are now that the script has been run. https://t.co/TE0bgVxdxE",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tQDcUcAA8tYq.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:17.000Z"
        },
        {
            "id": 6081,
            "username": "linuxopsys",
            "tweet_id": "1553017567433801728",
            "tweet_text": "\ud83d\udc27 Running our script\n\nAs we can see, running our script results in the expected output of /home/linuxopsys/Documents as well as the process ID of the shell. https://t.co/apyVFInq7Y",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tPsMVQAAYfE8.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:16.000Z"
        },
        {
            "id": 6082,
            "username": "linuxopsys",
            "tweet_id": "1553017561360388099",
            "tweet_text": "\ud83d\udc27 Breaking down our code:\n\n\u2022 cd /home/linuxopsys/Documents - changes the current working directory to ~/Documents.\n\n\u2022 pwd - prints the working directory.\n\n\u2022 echo $$ - $$ is a Bash internal variable containing the Process ID (PID) of the shell that is executing your script.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:14.000Z"
        },
        {
            "id": 6083,
            "username": "linuxopsys",
            "tweet_id": "1553017558424399872",
            "tweet_text": "\ud83d\udc27 A Common Problem\n\nLet's begin with a script that navigates to the ~/Documents directory. I'll refer to it as https://t.co/C30eEhxKsc: https://t.co/npB8vsAC19",
            "tweet_media": "[\"https://pbs.twimg.com/media/FY1tPJ8VsAEvxw7.jpg\"]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:14.000Z"
        },
        {
            "id": 6084,
            "username": "linuxopsys",
            "tweet_id": "1553017550400679936",
            "tweet_text": "In this thread, I will show you how to do it with the cd command. Along the way, I will explain some of the complexities of how cd behaves.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:12.000Z"
        },
        {
            "id": 6085,
            "username": "linuxopsys",
            "tweet_id": "1553017547875688453",
            "tweet_text": "For instance, if you frequently visit your documents directory (~/Documents) and want to navigate there quickly, you can write a Bash script to do so.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:11.000Z"
        },
        {
            "id": 6086,
            "username": "linuxopsys",
            "tweet_id": "1553017545476562944",
            "tweet_text": "You may want to run a shell script that changes your current working directory to another directory for convenience.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Others",
            "created_at": "2022-07-29T14:00:11.000Z"
        },
        {
            "id": 6087,
            "username": "linuxopsys",
            "tweet_id": "1553017543014486016",
            "tweet_text": "Linux shell scripting basic - changing directory in shell scripts \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1553017543014486016",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-29T14:00:10.000Z"
        },
        {
            "id": 6088,
            "username": "linuxopsys",
            "tweet_id": "1552655171137593352",
            "tweet_text": "A quick Linux tip \ud83d\udca1\n\nIn Linux, you can use the pgrep command to find the PID of a certain process based on its name, pattern, or other criteria.\n\n$ pgrep name\n\nContinue to follow us for more great Linux tips \ud83d\udc27\ud83d\ude0e",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552655171137593352",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-28T14:00:14.000Z"
        },
        {
            "id": 6089,
            "username": "linuxopsys",
            "tweet_id": "1552292744898301953",
            "tweet_text": "The more you learn about Linux \ud83d\udc27, the more you fall in love with it.\u2764\ufe0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552292744898301953",
            "tweet_type": "Others",
            "created_at": "2022-07-27T14:00:05.000Z"
        },
        {
            "id": 6090,
            "username": "linuxopsys",
            "tweet_id": "1552262608488583168",
            "tweet_text": "If you found this thread valuable: \n\n1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192 @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:20.000Z"
        },
        {
            "id": 6091,
            "username": "linuxopsys",
            "tweet_id": "1552262606047457283",
            "tweet_text": "That's all for this thread! Thank you for getting this far. I hope you find this thread useful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:19.000Z"
        },
        {
            "id": 6092,
            "username": "linuxopsys",
            "tweet_id": "1552262603514056704",
            "tweet_text": "\u2022 cd ~username - changes the working directory to the home directory of the specified username. For example, typing \n\n$ cd ~linuxopsys\n\nwill change the directory to the home directory of user \u201clinuxopsys.\u201d",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:18.000Z"
        },
        {
            "id": 6093,
            "username": "linuxopsys",
            "tweet_id": "1552262601043611649",
            "tweet_text": "\u2022 cd - - changes the working directory to the previous working directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:18.000Z"
        },
        {
            "id": 6094,
            "username": "linuxopsys",
            "tweet_id": "1552262598556413952",
            "tweet_text": "\ud83d\udc27 Some handy cd command shortcuts\n\nAs an added bonus, here are some useful shortcuts for quickly changing the current working directory with the cd command.\n\n\u2022 cd or cd - changes the working directory to your home directory.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:17.000Z"
        },
        {
            "id": 6095,
            "username": "linuxopsys",
            "tweet_id": "1552262596060794881",
            "tweet_text": "It's worth noting that if we don't specify a path name to something when using the cd command, the current user's home directory is assumed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:17.000Z"
        },
        {
            "id": 6096,
            "username": "linuxopsys",
            "tweet_id": "1552262593317720064",
            "tweet_text": "or we can simply do it using a relative path name as shown below: https://t.co/uyxLeY46w5",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYq-mN5UUAE0ygy.png\", \"https://pbs.twimg.com/media/FYq-mZ1UUAANSgx.png\"]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:16.000Z"
        },
        {
            "id": 6097,
            "username": "linuxopsys",
            "tweet_id": "1552262583763120129",
            "tweet_text": "Assume we wanted to change the working directory to the parent directory of /home/linuxopsys, which is /home/. We could do it in two ways: first, with an absolute path name, as shown below: https://t.co/X8Q57KC1Lv",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYq-l26UcAMwufG.png\"]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:14.000Z"
        },
        {
            "id": 6098,
            "username": "linuxopsys",
            "tweet_id": "1552262577622634496",
            "tweet_text": "The . notation refers to the current working directory, and the .. notation refers to the parent directory of the working directory. This is how it works: Let's change the working directory back to /home/linuxopsys. https://t.co/SzSYD0NVyG",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYq-lg3UcAAzEuU.png\"]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:12.000Z"
        },
        {
            "id": 6099,
            "username": "linuxopsys",
            "tweet_id": "1552262571876487178",
            "tweet_text": "It accomplishes this by employing a couple of special notations to represent relative positions in the file system tree. These are the special notations:\n\n. (dot) and .. (dot dot).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:11.000Z"
        },
        {
            "id": 6100,
            "username": "linuxopsys",
            "tweet_id": "1552262569259253765",
            "tweet_text": "\ud83d\udc27 Relative Path\n\nA relative path name begins in the working directory and leads to the destination, whereas an absolute path name begins in the root directory (/) and leads to the destination.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:10.000Z"
        },
        {
            "id": 6101,
            "username": "linuxopsys",
            "tweet_id": "1552262566612676610",
            "tweet_text": "Have you noticed how the shell prompt has as changed? It is usually set up to automatically display the name of the working directory as a convenience.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:10.000Z"
        },
        {
            "id": 6102,
            "username": "linuxopsys",
            "tweet_id": "1552262564205117440",
            "tweet_text": "We can see from the preceding example that we have changed the current working directory to /home/linuxopsys, which is full of files.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:09.000Z"
        },
        {
            "id": 6103,
            "username": "linuxopsys",
            "tweet_id": "1552262561290002433",
            "tweet_text": "This means that from the root directory (represented by the leading forward slash in the path name), there is a directory called home, which contains a directory called linuxopsys. https://t.co/410iCYzwp8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FYq-kjVVsAIxz-4.png\"]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:08.000Z"
        },
        {
            "id": 6104,
            "username": "linuxopsys",
            "tweet_id": "1552262555086704643",
            "tweet_text": "Assume there is a directory on your system where you save personal files, install programs, and save documents.\nThe path name for the directory is /home/linuxopsys.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:07.000Z"
        },
        {
            "id": 6105,
            "username": "linuxopsys",
            "tweet_id": "1552262552532295680",
            "tweet_text": "\ud83d\udc27 Absolute Path\n\nAn absolute path name is one that starts at the root directory and works its way up the tree, branch by branch, until it reaches the desired directory or file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Others",
            "created_at": "2022-07-27T12:00:06.000Z"
        },
        {
            "id": 6106,
            "username": "linuxopsys",
            "tweet_id": "1552262550003232770",
            "tweet_text": "Linux absolute path  and relative path names explained. A small and easy to follow thread \ud83d\udc27\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1552262550003232770",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-27T12:00:06.000Z"
        },
        {
            "id": 6107,
            "username": "linuxopsys",
            "tweet_id": "1551930566345474049",
            "tweet_text": "If you found this thread valuable: 1. Toss us a follow for more daily threads on Linux, sysadmin and devops \u2192\n\n@linuxopsys @linuxopsys\n\n2. Like and RT the first tweet so other Linux folks can find it too.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:55.000Z"
        },
        {
            "id": 6108,
            "username": "linuxopsys",
            "tweet_id": "1551930563572924417",
            "tweet_text": "That's it for today's thread! \n\nThank you for making it this far. Hopefully you will find this thread useful. \n\nAdditions are welcomed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:54.000Z"
        },
        {
            "id": 6109,
            "username": "linuxopsys",
            "tweet_id": "1551930560897073158",
            "tweet_text": "78. UFW (Uncomplicated Firewall)- used to enable/disable system firewall, add/delete/modify/reset packet filtering rules, and much more.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:53.000Z"
        },
        {
            "id": 6110,
            "username": "linuxopsys",
            "tweet_id": "1551930558158077958",
            "tweet_text": "75. ifup - bring a network interface up.\n76. ifdown - take a network interface down.\n77. ifquery - parse interface configuration.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:53.000Z"
        },
        {
            "id": 6111,
            "username": "linuxopsys",
            "tweet_id": "1551930555348008962",
            "tweet_text": "73. wget \u2013 a free utility for non-interactive download of files from the Web. It supports HTTP, HTTPS, and FTP protocols, as well as retrieval through HTTP proxies.\n74. Wireshark \u2013 network protocol analyzer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:52.000Z"
        },
        {
            "id": 6112,
            "username": "linuxopsys",
            "tweet_id": "1551930552462213124",
            "tweet_text": "70. traceroute \u2013 print the route packets trace to network host. \n71. vnStat \u2013 network traffic monitor. \n72. websocat \u2013 Connection forwarder from/to web sockets to/from usual sockets, in style of socat.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:51.000Z"
        },
        {
            "id": 6113,
            "username": "linuxopsys",
            "tweet_id": "1551930549735923714",
            "tweet_text": "66. ftp - allows a user to transfer files to and from a remote network site. \n67. scp - copies files between hosts on a network.\n68. rsync - a fast, versatile, remote (and local) file-copying tool.\n69. tracepath \u2013 very similar function to traceroute.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:51.000Z"
        },
        {
            "id": 6114,
            "username": "linuxopsys",
            "tweet_id": "1551930546850332674",
            "tweet_text": "62. ssh \u2013 secure system administration and file transfers over insecure networks. \n63. tcpdump \u2013 command-line packet analyzer. \n64. tcptrack \u2013 Displays information about tcp connections on a network interface. \n65. telnet \u2013 user interface to the TELNET protocol.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:50.000Z"
        },
        {
            "id": 6115,
            "username": "linuxopsys",
            "tweet_id": "1551930544035880965",
            "tweet_text": "60. speedtest-cli \u2013 test internet bandwidth using https://t.co/OfqjlhPZlP\n61. ss \u2013 is used to dump socket statistics. It allows showing information similar to netstat. It can display more TCP and state information than other tools.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:49.000Z"
        },
        {
            "id": 6116,
            "username": "linuxopsys",
            "tweet_id": "1551930541271912448",
            "tweet_text": "57. smokeping \u2013 keeps track of your network latency.\n58. socat \u2013 Multipurpose relay (SOcket CAT), establishes two bidirectional byte streams and transfers data between them. \n59. speedometer \u2013 Measure and display the rate of data across a network.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:49.000Z"
        },
        {
            "id": 6117,
            "username": "linuxopsys",
            "tweet_id": "1551930538423877634",
            "tweet_text": "52. nmtui \u2013 provides a text interface to configure networking by controlling NetworkManager. \n53. nslookup \u2013 a program to query Internet domain name servers.\n54. slurm \u2013 network load monitor. \n56. snort \u2013 Network Intrusion Detection and Prevention System.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:48.000Z"
        },
        {
            "id": 6118,
            "username": "linuxopsys",
            "tweet_id": "1551930535559266304",
            "tweet_text": "49. nload \u2013 display network usage. \n50. nmap \u2013 an open source tool for network exploration andsecurity auditing.\n51. nmcli \u2013 a command-line tool for controlling NetworkManager and reporting network status.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:47.000Z"
        },
        {
            "id": 6119,
            "username": "linuxopsys",
            "tweet_id": "1551930532656734209",
            "tweet_text": "45. netplan \u2013 Netplan is a utility for easily configuring networking on a linux system.\n46. netsniff-ng \u2013 Swiss army knife for daily Linux network plumbing. \n47, netwatch \u2013 monitoring Network Connections. \n48. ngrep \u2013 grep applied to the network layer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:47.000Z"
        },
        {
            "id": 6120,
            "username": "linuxopsys",
            "tweet_id": "1551930529834012674",
            "tweet_text": "41. ncat \u2013 improved re-implementation of the venerable netcat. \n42. netcat \u2013 networking utility for reading/writing network connections. \n43. nethogs \u2013 a small \u2018net top\u2019 tool. \n44. Netperf \u2013 Network bandwidth Testing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:46.000Z"
        },
        {
            "id": 6121,
            "username": "linuxopsys",
            "tweet_id": "1551930527053217795",
            "tweet_text": "38. netstat - print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.\n39. ipmaddr - adds, changes, deletes, and displays multicast\naddresses.\n40. plipconfig - fine tune PLIP device parameters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:45.000Z"
        },
        {
            "id": 6122,
            "username": "linuxopsys",
            "tweet_id": "1551930524238811136",
            "tweet_text": "34. route - show or manipulate the IP routing table.\n35. iptunnel - create and manage IP tunnels.\n36. slattach - attach a network interface to a serial line.\n37. mii-tool - view, manipulate media-independent interface status",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:45.000Z"
        },
        {
            "id": 6123,
            "username": "linuxopsys",
            "tweet_id": "1551930521441210371",
            "tweet_text": "30. mtr \u2013 network diagnostic tool.\n31. net-tools \u2013 utilities include: arp, hostname, ifconfig, netstat, rarp, route, plipconfig, slattach, mii-tool, iptunnel and ipmaddr.\n32. hostname - show or set the system's host name.\n33. rarp - manipulate the system RARP table.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:44.000Z"
        },
        {
            "id": 6124,
            "username": "linuxopsys",
            "tweet_id": "1551930518605897736",
            "tweet_text": "27. iw \u2013 ashow / manipulate wireless devices and their configuration\n28. jwhois (whois) \u2013 client for the whois service.\n29. lsof -i \u2013 reveal information about your network sockets.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:43.000Z"
        },
        {
            "id": 6125,
            "username": "linuxopsys",
            "tweet_id": "1551930515640434694",
            "tweet_text": "22. iperf3 \u2013 network bandwidth measurement tool. \n23. iproute2 \u2013 collection of utilities for controlling TCP/IP.\n24. iptables \u2013 take control of network traffic. \n25. IPTraf \u2013 An IP Network Monitor. \n26. iputils \u2013 set of small useful utilities for Linux networking.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:43.000Z"
        },
        {
            "id": 6126,
            "username": "linuxopsys",
            "tweet_id": "1551930512842887168",
            "tweet_text": "18. ibmonitor \u2013 shows bandwidth and total data transferred.\n19. ifstat \u2013 report network interfaces bandwidth. \n20. iftop \u2013 display bandwidth usage. \n21. ip \u2013 show or manipulate routing, network devices, interfaces and tunnels. ip command has more features than ifconfig.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:42.000Z"
        },
        {
            "id": 6127,
            "username": "linuxopsys",
            "tweet_id": "1551930509969788928",
            "tweet_text": "17. fping - like ping, but fping differs from ping in that you can specify any number of targets on the command line, or specify a file containing the lists of targets to ping.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:41.000Z"
        },
        {
            "id": 6128,
            "username": "linuxopsys",
            "tweet_id": "1551930507033731072",
            "tweet_text": "15. hping3 \u2013 send custom TCP/IP packets and to display target replies like ping program does with ICMP replies.\n16. ping - used to check for connectivity between end hosts",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:41.000Z"
        },
        {
            "id": 6129,
            "username": "linuxopsys",
            "tweet_id": "1551930504139743234",
            "tweet_text": "11. dstat \u2013 replacement for vmstat, iostat, mpstat, netstat and ifstat.\n12. ethtool \u2013 utility for controlling network drivers and hardware. 13. gated \u2013 gateway routing daemon. 14. \n14. host \u2013 DNS lookup utility.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:40.000Z"
        },
        {
            "id": 6130,
            "username": "linuxopsys",
            "tweet_id": "1551930501358919681",
            "tweet_text": "7. curl \u2013 transferring data from or to a server.\n8. darkstat \u2013 captures network traffic, usage statistics. \n9. dhclient \u2013 Dynamic Host Configuration Protocol Client \n10. dig \u2013 query DNS servers for information.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:39.000Z"
        },
        {
            "id": 6131,
            "username": "linuxopsys",
            "tweet_id": "1551930498469036032",
            "tweet_text": "1. arp - manipulate the system ARP cache \n2. aria2 \u2013 downloading just about everything. Torrents included. \n3. arpwatch \u2013 Ethernet Activity Monitor. \n5. bmon \u2013 bandwidth monitor and rate estimator. \n6. bwm-ng \u2013 live network bandwidth monitor.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:38.000Z"
        },
        {
            "id": 6132,
            "username": "linuxopsys",
            "tweet_id": "1551930495574966272",
            "tweet_text": "75. ifdown - \n50+ Linux networking commands and their explanation \ud83e\uddf5\u2193",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Linux tips",
            "created_at": "2022-07-26T14:00:38.000Z"
        },
        {
            "id": 6133,
            "username": "linuxopsys",
            "tweet_id": "1551930492873805827",
            "tweet_text": "73.  wget \u2013 retrieving files using HTTP, HTTPS, FTP and FTPS. \n74. Wireshark \u2013 network protocol analyzer.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:37.000Z"
        },
        {
            "id": 6134,
            "username": "linuxopsys",
            "tweet_id": "1551930489992355840",
            "tweet_text": "70. traceroute \u2013 print the route packets trace to network host. \n71. vnStat \u2013 network traffic monitor. \n72. websocat \u2013 Connection forwarder from/to web sockets to/from usual sockets, in style of socat.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:36.000Z"
        },
        {
            "id": 6135,
            "username": "linuxopsys",
            "tweet_id": "1551930487043678208",
            "tweet_text": "66. ftp - allows a user to transfer files to and from a remote network site. \n67. scp - copies files between hosts on a network.\n68. rsync - a fast, versatile, remote (and local) file-copying tool.\n69. tracepath \u2013 very similar function to traceroute.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:36.000Z"
        },
        {
            "id": 6136,
            "username": "linuxopsys",
            "tweet_id": "1551930484162273282",
            "tweet_text": "62. ssh \u2013 secure system administration and file transfers over insecure networks. \n63. tcpdump \u2013 command-line packet analyzer. \n64. tcptrack \u2013 Displays information about tcp connections on a network interface. \n65. telnet \u2013 user interface to the TELNET protocol.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:35.000Z"
        },
        {
            "id": 6137,
            "username": "linuxopsys",
            "tweet_id": "1551930481125507072",
            "tweet_text": "58. socat \u2013 establishes two bidirectional byte streams and transfers data between them. \n59. speedometer \u2013 Measure and display the rate of data across a network. \n60. speedtest-cli \u2013 test internet bandwidth using https://t.co/OfqjlhPZlP\n61. ss \u2013 utility to investigate sockets.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:34.000Z"
        },
        {
            "id": 6138,
            "username": "linuxopsys",
            "tweet_id": "1551930478214746117",
            "tweet_text": "53. nslookup \u2013 query Internet name servers interactively.\n54. slurm \u2013 network load monitor. \n56. snort \u2013 Network Intrusion Detection and Prevention System. 57. smokeping \u2013 keeps track of your network latency.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:34.000Z"
        },
        {
            "id": 6139,
            "username": "linuxopsys",
            "tweet_id": "1551930475316404224",
            "tweet_text": "51. nmcli \u2013 a command-line tool for controlling NetworkManager and reporting network status. \n52. nmtui \u2013 provides a text interface to configure networking by controlling NetworkManager.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:33.000Z"
        },
        {
            "id": 6140,
            "username": "linuxopsys",
            "tweet_id": "1551930472485322754",
            "tweet_text": "48. ngrep \u2013 grep applied to the network layer. It allow you to specify extended regular expressions to match against data payloads of packets.\n49. nload \u2013 display network usage. \n50. nmap \u2013 network discovery and security auditing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:32.000Z"
        },
        {
            "id": 6141,
            "username": "linuxopsys",
            "tweet_id": "1551930469746343941",
            "tweet_text": "45. netplan \u2013 Netplan is a utility for easily configuring networking on a linux system.\n46. netsniff-ng \u2013 Swiss army knife for daily Linux network plumbing. \n47, netwatch \u2013 monitoring Network Connections.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:32.000Z"
        },
        {
            "id": 6142,
            "username": "linuxopsys",
            "tweet_id": "1551930466961444864",
            "tweet_text": "41. ncat or nc \u2013command-line tool for reading, writing, redirecting, and encrypting data across a network\n42. netcat \u2013 networking utility for reading/writing network connections. \n43. nethogs \u2013 a small \u2018net top\u2019 tool. \n44. Netperf \u2013 Network bandwidth Testing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:31.000Z"
        },
        {
            "id": 6143,
            "username": "linuxopsys",
            "tweet_id": "1551930464180518912",
            "tweet_text": "38. netstat - print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.\n39. ipmaddr - adds, changes, deletes, and displays multicast\naddresses.\n40. plipconfig - fine tune PLIP device parameters.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:30.000Z"
        },
        {
            "id": 6144,
            "username": "linuxopsys",
            "tweet_id": "1551930461328392198",
            "tweet_text": "34. route - show or manipulate the IP routing table.\n35. iptunnel - create and manage IP tunnels.\n36. slattach - attach a network interface to a serial line.\n37. mii-tool - view, manipulate media-independent interface status",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:30.000Z"
        },
        {
            "id": 6145,
            "username": "linuxopsys",
            "tweet_id": "1551930458409164800",
            "tweet_text": "30. mtr \u2013 network diagnostic tool.\n31. net-tools \u2013 utilities include: arp, hostname, ifconfig, netstat, rarp, route, plipconfig, slattach, mii-tool, iptunnel and ipmaddr.\n32. hostname - show or set the system's host name.\n33. rarp - manipulate the system RARP table.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:29.000Z"
        },
        {
            "id": 6146,
            "username": "linuxopsys",
            "tweet_id": "1551930455661989901",
            "tweet_text": "28. jwhois (whois) \u2013 searches Whois servers for the object on the command line.\n29. lsof -i \u2013 reveal information about your network sockets.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:28.000Z"
        },
        {
            "id": 6147,
            "username": "linuxopsys",
            "tweet_id": "1551930452793069572",
            "tweet_text": "26. iputils \u2013 set of small useful utilities for Linux networking. \n27. iw \u2013 a new nl80211 based CLI configuration utility for wireless devices.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:28.000Z"
        },
        {
            "id": 6148,
            "username": "linuxopsys",
            "tweet_id": "1551930450029019137",
            "tweet_text": "22. iperf3 \u2013 network bandwidth measurement tool. \n23. iproute2 \u2013 collection of utilities for controlling TCP/IP.\n24.iptables / ip6tables \u2014 administration tool for IPv4/IPv6 packet filtering and NAT.\n25. IPTraf \u2013 An IP Network Monitor.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:27.000Z"
        },
        {
            "id": 6149,
            "username": "linuxopsys",
            "tweet_id": "1551930447290048512",
            "tweet_text": "18. ibmonitor \u2013 shows bandwidth and total data transferred.\n19. ifstat \u2013 report network interfaces bandwidth. \n20. iftop \u2013 display bandwidth usage. \n21. ip \u2013 show or manipulate routing, network devices, interfaces and tunnels. ip command has more features than ifconfig.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:26.000Z"
        },
        {
            "id": 6150,
            "username": "linuxopsys",
            "tweet_id": "1551930444467380227",
            "tweet_text": "17. fping - like ping, but fping differs from ping in that you can specify any number of targets on the command line, or specify a file containing the lists of targets to ping.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:26.000Z"
        },
        {
            "id": 6151,
            "username": "linuxopsys",
            "tweet_id": "1551930441682280450",
            "tweet_text": "15. hping3 \u2013 send custom TCP/IP packets and to display target replies like ping program does with ICMP replies.\n16. ping - used to check for connectivity between end hosts",
            "tweet_media": "[]",
            "tweet_conversation_id": "1551930427694370817",
            "tweet_type": "Others",
            "created_at": "2022-07-26T14:00:25.000Z"
        },
        {
            "id": 6152,
            "username": "bascodes",
            "tweet_id": "1607000984340897793",
            "tweet_text": "Does anyone have a @TextsHQ invite?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607000984340897793",
            "tweet_type": "Others",
            "created_at": "2022-12-25T13:11:05.000Z"
        },
        {
            "id": 6153,
            "username": "bascodes",
            "tweet_id": "1607020898141306881",
            "tweet_text": "That's a wrap. If you liked this thread, RT it to help others discover descriptors in Python.\n\nRemember to follow me @bascodes to never miss interesting Python stuff!\n\n https://t.co/n9kk4ekWrs",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:13.000Z"
        },
        {
            "id": 6154,
            "username": "bascodes",
            "tweet_id": "1607020891916886016",
            "tweet_text": "Putting it all together, we now have a descriptor class and a rectangle class that uses the descriptor to store values.\n\nIn the __\ud835\ude90\ud835\ude8e\ud835\ude9d__ and __\ud835\ude9c\ud835\ude8e\ud835\ude9d__ methods, we can now put type conversions, validators and other parts of our business logic. https://t.co/VHpwnTnsPa",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I8RSXwAEjcBZ.jpg\"]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:12.000Z"
        },
        {
            "id": 6155,
            "username": "bascodes",
            "tweet_id": "1607020886770565120",
            "tweet_text": "Luckily, Python will call a __\ud835\ude9c\ud835\ude8e\ud835\ude9d_\ud835\ude97\ud835\ude8a\ud835\ude96\ud835\ude8e__ method in the background for us.\n\nWe could leverage that like so: https://t.co/jei26jx34f",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I78EXkAAFLKP.jpg\"]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:11.000Z"
        },
        {
            "id": 6156,
            "username": "bascodes",
            "tweet_id": "1607020882769199105",
            "tweet_text": "If we just put the value to the \ud835\ude9f\ud835\ude8a\ud835\ude95\ud835\ude9e\ud835\ude8e attribute of the \ud835\ude81\ud835\ude8e\ud835\ude8c\ud835\ude9d\ud835\ude8a\ud835\ude97\ud835\ude90\ud835\ude95\ud835\ude8e instance, we'd overwrite \ud835\udea0\ud835\ude92\ud835\ude8d\ud835\ude9d\ud835\ude91 with the value of \ud835\ude91\ud835\ude8e\ud835\ude92\ud835\ude90\ud835\ude91\ud835\ude9d.\n\nSo, we need to give a name to the value on an attribute of the \ud835\ude81\ud835\ude8e\ud835\ude8c\ud835\ude9d\ud835\ude8a\ud835\ude97\ud835\ude90\ud835\ude95\ud835\ude8e instance.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:10.000Z"
        },
        {
            "id": 6157,
            "username": "bascodes",
            "tweet_id": "1607020877278855169",
            "tweet_text": "For now, we store the values in the descriptor instance itself. However, it belongs to the Rectangle instance semantically.\n\nHow could we do that? https://t.co/3gM2IWKOlV",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I7oNXkAAPNqO.jpg\"]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:08.000Z"
        },
        {
            "id": 6158,
            "username": "bascodes",
            "tweet_id": "1607020873206173700",
            "tweet_text": "The __\ud835\ude90\ud835\ude8e\ud835\ude9d__ method accepts three parameters: \ud835\ude9c\ud835\ude8e\ud835\ude95\ud835\ude8f, \ud835\ude92\ud835\ude97\ud835\ude9c\ud835\ude9d\ud835\ude8a\ud835\ude97\ud835\ude8c\ud835\ude8e, \ud835\ude98\ud835\udea0\ud835\ude97\ud835\ude8e\ud835\ude9b.\n\n\ud835\ude92\ud835\ude97\ud835\ude9c\ud835\ude9d\ud835\ude8a\ud835\ude97\ud835\ude8c\ud835\ude8e is the object that contains the descriptor (\ud835\ude9b\ud835\ude8e\ud835\ude8c\ud835\ude9d in our case)\n\ud835\ude98\ud835\udea0\ud835\ude97\ud835\ude8e\ud835\ude9b is the class of the owner object (\ud835\ude81\ud835\ude8e\ud835\ude8c\ud835\ude9d\ud835\ude8a\ud835\ude97\ud835\ude90\ud835\ude95\ud835\ude8e in our case)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:07.000Z"
        },
        {
            "id": 6159,
            "username": "bascodes",
            "tweet_id": "1607020869280305152",
            "tweet_text": "\ud835\ude9c\ud835\ude8e\ud835\ude95\ud835\ude8f is the descriptor class itself\n\ud835\ude92\ud835\ude97\ud835\ude9c\ud835\ude9d\ud835\ude8a\ud835\ude97\ud835\ude8c\ud835\ude8e is the object that contains the descriptor (\ud835\ude9b\ud835\ude8e\ud835\ude8c\ud835\ude9d in our case)\n\ud835\ude9f\ud835\ude8a\ud835\ude95\ud835\ude9e\ud835\ude8e is the value we want to set",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:06.000Z"
        },
        {
            "id": 6160,
            "username": "bascodes",
            "tweet_id": "1607020865253679111",
            "tweet_text": "Great, it works! Let's have a look at the __\ud835\ude90\ud835\ude8e\ud835\ude9d__ and __\ud835\ude9c\ud835\ude8e\ud835\ude9d__ methods.\n\nThe __\ud835\ude9c\ud835\ude8e\ud835\ude9d__ method accepts three parameters: \ud835\ude9c\ud835\ude8e\ud835\ude95\ud835\ude8f, \ud835\ude92\ud835\ude97\ud835\ude9c\ud835\ude9d\ud835\ude8a\ud835\ude97\ud835\ude8c\ud835\ude8e, \ud835\ude9f\ud835\ude8a\ud835\ude95\ud835\ude9e\ud835\ude8e.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:05.000Z"
        },
        {
            "id": 6161,
            "username": "bascodes",
            "tweet_id": "1607020860224802817",
            "tweet_text": "We could use our \ud835\ude80\ud835\ude9e\ud835\ude8a\ud835\ude97\ud835\ude9d\ud835\ude92\ud835\ude9d\ud835\udea2 descriptor class like this: https://t.co/ShW0CwRxGR",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I7UYWIAIm1jg.jpg\"]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:04.000Z"
        },
        {
            "id": 6162,
            "username": "bascodes",
            "tweet_id": "1607020854801465345",
            "tweet_text": "A descriptor is a class. If it implements a __\ud835\ude90\ud835\ude8e\ud835\ude9d__, a __\ud835\ude9c\ud835\ude8e\ud835\ude9d__, or a __\ud835\ude8d\ud835\ude8e\ud835\ude95\ud835\ude8e\ud835\ude9d\ud835\ude8e__ method, it is a valid descriptor.\n\nHere is an example: https://t.co/W646UxJgRG",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I66iXoAELESn.jpg\"]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:03.000Z"
        },
        {
            "id": 6163,
            "username": "bascodes",
            "tweet_id": "1607020849764220928",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Ever wondered how these magical Field classes work in Django?\n\nThey are descriptors in Python.\n\nAnd it's possible to create your own. How? \ud83d\udc47 https://t.co/p7s7DjsxgL",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I6jbXgAEhGRB.jpg\"]",
            "tweet_conversation_id": "1607020849764220928",
            "tweet_type": "Python tips",
            "created_at": "2022-12-25T14:30:02.000Z"
        },
        {
            "id": 6164,
            "username": "linuxopsys",
            "tweet_id": "1607020986335133698",
            "tweet_text": "That's a wrap!\n\nThank you for taking your time to read our thread.\n\nIf you know of any other dangerous Linux commands that I have missed, please leave them in the comments.\n\nAnd be sure to rt, like and follow us (@linuxopsys) for more future Linux content.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:34.000Z"
        },
        {
            "id": 6165,
            "username": "linuxopsys",
            "tweet_id": "1607020983709499395",
            "tweet_text": "Any inconsistency or data loss caused by the execution of the preceding command will bring your system to a halt.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:34.000Z"
        },
        {
            "id": 6166,
            "username": "linuxopsys",
            "tweet_id": "1607020980958023681",
            "tweet_text": "Please DO NOT run any of the above commands in your Linux terminal or shell, or on the computers of your friends or coworkers. Run them in a virtual machine if you want to test them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:33.000Z"
        },
        {
            "id": 6167,
            "username": "linuxopsys",
            "tweet_id": "1607020977803923456",
            "tweet_text": "This can happen if you want to specify the -e flag but accidentally type -r. There is no yes/no prompt before removing the file, so be cautious.\n\nMake a backup of your crontab file because there aren't many recovery options if it gets deleted. https://t.co/ajneIKVgiZ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1JDzeaMAICLlW.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:32.000Z"
        },
        {
            "id": 6168,
            "username": "linuxopsys",
            "tweet_id": "1607020970199625728",
            "tweet_text": "12. Blindly deleting the crontabs \ud83e\udd16\ud83d\udcdc\n\nThe crontab command aids in the automation of routine tasks. All commands and instructions, however, are saved in a single crontab file, which can be removed by using the -r option and the crontab command.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:30.000Z"
        },
        {
            "id": 6169,
            "username": "linuxopsys",
            "tweet_id": "1607020966928093185",
            "tweet_text": "it can also cause problems if you don't thoroughly check the changes you make before running it.\n\nThe command changes the first occurrence of foo to bar. https://t.co/5SErqVSVNU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1JDMdaAAAh62U.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:30.000Z"
        },
        {
            "id": 6170,
            "username": "linuxopsys",
            "tweet_id": "1607020959739047937",
            "tweet_text": "11. The ^foo^bar Command \ud83d\udcdc\n\nThe ^foo^bar command has the potential to be both helpful and dangerous. While the command saves time by allowing you to edit a previously run command and re-run it,",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:28.000Z"
        },
        {
            "id": 6171,
            "username": "linuxopsys",
            "tweet_id": "1607020956387799043",
            "tweet_text": "10. Re-running all the history commands \ud83d\udd01\ud83d\udcdc\n\nBecause it executes every command from that you have already executed, the history | sh command can be dangerous. The action may cause system instability and the execution of commands that you do not want to repeat. https://t.co/OsQZOfOyqJ",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1JCmFaUAAviYW.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:27.000Z"
        },
        {
            "id": 6172,
            "username": "linuxopsys",
            "tweet_id": "1607020949106462722",
            "tweet_text": "9. Write random junk to hard drive \ud83c\ude33\ud83d\udcc0\n\nThis command will write random garbage data to your hard drive.\nYour system will not be recovered as a result of this command. https://t.co/GBarqeekL2",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1JCJeakAEdGOH.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:25.000Z"
        },
        {
            "id": 6173,
            "username": "linuxopsys",
            "tweet_id": "1607020941313470467",
            "tweet_text": "8. Unknowingly format a hard drive \ud83e\uddf9\ud83d\udcc0\n\nThis command will erase your hard drive and recreate it.\nThese should only be used when you have a backup of your data on the cloud or an external device. https://t.co/R4grnMaJkD",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1JBr1aAAUSIUq.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:24.000Z"
        },
        {
            "id": 6174,
            "username": "linuxopsys",
            "tweet_id": "1607020933101031429",
            "tweet_text": "Running the code below in your terminal will delete your root partition leaving your system unusable. https://t.co/9tYxnADH7R",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1JBJ_akAAtCT7.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:22.000Z"
        },
        {
            "id": 6175,
            "username": "linuxopsys",
            "tweet_id": "1607020924448157696",
            "tweet_text": "7. The hidden recursive deletion (rm -rf /) \ud83d\udd01\ud83d\uddd1\ufe0f\n\nThe following command is the same as the previously mentioned rm -rf / command. The codes are hidden in hex here to fool an unsuspecting user.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:20.000Z"
        },
        {
            "id": 6176,
            "username": "linuxopsys",
            "tweet_id": "1607020921692512257",
            "tweet_text": "The chmod command changes file permissions to configure user access to a specific file or directory.\n\nBy running this command, you grant all system users the ability to read, write, and execute data on your system. In terms of security, this is risky and dangerous.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:19.000Z"
        },
        {
            "id": 6177,
            "username": "linuxopsys",
            "tweet_id": "1607020918483877888",
            "tweet_text": "6. Breach the System \ud83d\udd13\n\nThis command does not physically affect your system in the same way that the other commands do, but it does provide a security breach on the system. https://t.co/vErFdPZUoI",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1JAWwaEAA6sZJ.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:18.000Z"
        },
        {
            "id": 6178,
            "username": "linuxopsys",
            "tweet_id": "1607020910971875330",
            "tweet_text": "Please keep in mind the source from which you are downloading packages and scripts. Use only scripts or applications downloaded from a reputable source.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:16.000Z"
        },
        {
            "id": 6179,
            "username": "linuxopsys",
            "tweet_id": "1607020907733876736",
            "tweet_text": "5. Blindly download and execute malicious script \u2620\ufe0f\ud83d\udcdc\n\nWget and curl are useful Linux commands for retrieving and downloading files from the internet. However, if we blindly download and execute a malicious script, these commands can be dangerous. https://t.co/cGdIAOBQIU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I_vQaYAAFF6_.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:16.000Z"
        },
        {
            "id": 6180,
            "username": "linuxopsys",
            "tweet_id": "1607020899936632834",
            "tweet_text": "4. Overwrite the hard drive \u270d\ufe0f\ud83d\udcbf\n\nThis command writes raw data (command output) to the specified partition. This causes data loss on the hard drive or specified partition.\n\ncommand - this could be any Linux command. https://t.co/htouzv96d7",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I_SnaEAAKZgI.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:14.000Z"
        },
        {
            "id": 6181,
            "username": "linuxopsys",
            "tweet_id": "1607020892227502081",
            "tweet_text": "Fortunately, you can defend against this attack by limiting the number of processes run by users to around 4000.\n\nYou can accomplish this by issuing the following command:\n\n$ ulimit -S -u 4000 https://t.co/l6x6CAJRgX",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I-0HaEAMUgHB.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:12.000Z"
        },
        {
            "id": 6182,
            "username": "linuxopsys",
            "tweet_id": "1607020884061212672",
            "tweet_text": "3. The fork bomb \ud83c\udf74\ud83d\udca3\n\nThis is my personal best, a simple bash recursive function that, when executed, creates copies of itself, which in turn creates another set of copies of itself. This takes up CPU time and memory. As a result, it loops until the system freezes. https://t.co/SiNaeLMsvU",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I-XmaUAUtW3p.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:10.000Z"
        },
        {
            "id": 6183,
            "username": "linuxopsys",
            "tweet_id": "1607020876259786753",
            "tweet_text": "Everything that is moved to this location is destroyed.\nAs a result, if you accidentally move your data to this folder, it will not be recovered https://t.co/zlyVNGKz3R",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I93naEAE3uxz.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:08.000Z"
        },
        {
            "id": 6184,
            "username": "linuxopsys",
            "tweet_id": "1607020867804069890",
            "tweet_text": "2. Implode hard drive \ud83d\udd73\ufe0f\n\nThis command will move all data to a special location in Linux known as the black hole, which is located in your system at /dev/null.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:06.000Z"
        },
        {
            "id": 6185,
            "username": "linuxopsys",
            "tweet_id": "1607020864717090817",
            "tweet_text": "1. Recursive deletion \ud83d\udd01\ud83d\uddd1\ufe0f\n\nThis is one of the scariest commands. When you run this command, it deletes everything in the root directory forcibly and recursively. As a result, all of your directories and subdirectories will be deleted, and all of your data will be lost. https://t.co/gkXMuWElSX",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1I9NVaEAAZKzY.jpg\"]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:05.000Z"
        },
        {
            "id": 6186,
            "username": "linuxopsys",
            "tweet_id": "1607020852083830785",
            "tweet_text": "12 destructive Linux terminal commands every Linux user must be aware of (don't run these):",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607020852083830785",
            "tweet_type": "Others",
            "created_at": "2022-12-25T14:30:02.000Z"
        },
        {
            "id": 6187,
            "username": "testdrivenio",
            "tweet_id": "1607051049814331392",
            "tweet_text": "Python tip:\n\nBecause tuples are immutable, there's no need to copy them (they can't be copied).\ntuple(my_tuple) returns itself.\n\nOn the other hand, lists are mutable, so copying them makes sense.\nlist(my_list) returns a new list. https://t.co/mMBS9dkTNv",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk1kaWEaYAIHpYK.png\"]",
            "tweet_conversation_id": "1607051049814331392",
            "tweet_type": "Python tips",
            "created_at": "2022-12-25T16:30:02.000Z"
        },
        {
            "id": 6188,
            "username": "bascodes",
            "tweet_id": "1607052415374606337",
            "tweet_text": "If you're celebrating today:\n\nMerry Christmas to all of you! \n\ud83c\udf85\ud83c\udf84\ud83c\udf81\u2603\ufe0f\u2728",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607052415374606337",
            "tweet_type": "Others",
            "created_at": "2022-12-25T16:35:28.000Z"
        },
        {
            "id": 6189,
            "username": "driscollis",
            "tweet_id": "1607047084607258631",
            "tweet_text": "Merry Christmas to all my friends here!\n\nI hope you have a wonderful and blessed holiday\n\n\ud83c\udf84\u2603\ufe0f\u2744\ufe0f",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607047084607258631",
            "tweet_type": "Others",
            "created_at": "2022-12-25T16:14:17.000Z"
        },
        {
            "id": 6190,
            "username": "bascodes",
            "tweet_id": "1607075740318564356",
            "tweet_text": "Last week of 2022!\n\nIf you look back, what is something you're proud of in 2022?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607075740318564356",
            "tweet_type": "Others",
            "created_at": "2022-12-25T18:08:09.000Z"
        },
        {
            "id": 6191,
            "username": "driscollis",
            "tweet_id": "1607207326250844160",
            "tweet_text": "If you are working with strings in #Python and want to turn it into a list of words, use the `split()` method. \ud83d\udc0d\u26a1\n\nIt's simple and works wonderfully! https://t.co/LhWFIFAeDF",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk3yi4uWIAEh0iq.jpg\"]",
            "tweet_conversation_id": "1607207326250844160",
            "tweet_type": "Python tips",
            "created_at": "2022-12-26T02:51:01.000Z"
        },
        {
            "id": 6192,
            "username": "driscollis",
            "tweet_id": "1607327351393615873",
            "tweet_text": "If you pip install the `qrcode` package for #Python, you can also create QR codes on the command line using the `qr` script, like this: https://t.co/6rJ4EBV8S5",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk5ftA9WYAIcvGz.jpg\"]",
            "tweet_conversation_id": "1607327346968633344",
            "tweet_type": "Python tips",
            "created_at": "2022-12-26T10:47:57.000Z"
        },
        {
            "id": 6193,
            "username": "driscollis",
            "tweet_id": "1607327346968633344",
            "tweet_text": "Did you know you can use #Python to create QR codes? \ud83d\udc0d\ud83d\udd25\n\nYou only need 3 lines of code with the `qrcode` package:\n\nhttps://t.co/G6QSBXLIi4 https://t.co/LTyQl9hd0e",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk5fszRXEAE7ND9.jpg\"]",
            "tweet_conversation_id": "1607327346968633344",
            "tweet_type": "Python tips",
            "created_at": "2022-12-26T10:47:56.000Z"
        },
        {
            "id": 6194,
            "username": "bascodes",
            "tweet_id": "1607345083170390021",
            "tweet_text": "Thanks, 5k! \ud83e\udd73",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607345083170390021",
            "tweet_type": "Others",
            "created_at": "2022-12-26T11:58:25.000Z"
        },
        {
            "id": 6195,
            "username": "Rapid_API",
            "tweet_id": "1607357347101294593",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:09.000Z"
        },
        {
            "id": 6196,
            "username": "Rapid_API",
            "tweet_id": "1607357343045492736",
            "tweet_text": "3. OAuth\n\nOAuth is an open standard for authorization that provides a way for users to grant third-party access to their web resources without sharing their passwords.\n\nIt also allows for secure access to those resources by ensuring that only authorized users can access them.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:08.000Z"
        },
        {
            "id": 6197,
            "username": "Rapid_API",
            "tweet_id": "1607357339035746304",
            "tweet_text": "2. API Keys\n\nAn API key is a unique string/code used to access APIs.\n\nUsually, it is a lengthy list of letters and numbers.\n\nUsers' identities and use patterns are tracked via API keys.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:07.000Z"
        },
        {
            "id": 6198,
            "username": "Rapid_API",
            "tweet_id": "1607357335084621824",
            "tweet_text": "Additional details, such as the expiration date and the user's ID, are possible.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:06.000Z"
        },
        {
            "id": 6199,
            "username": "Rapid_API",
            "tweet_id": "1607357331053985793",
            "tweet_text": "1.3 JWT - Json Web Token\n\nOnly application-level security is provided via the API key (described below). It provides equal access to all users.\n\nThe JWT token, on the other hand, offers user-level access.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:05.000Z"
        },
        {
            "id": 6200,
            "username": "Rapid_API",
            "tweet_id": "1607357327069282307",
            "tweet_text": "1.2 Bearer HTTP Auth\n\nTo access a resource, the user must first authenticate using a bearer authentication, which often takes the form of a card or key.\n\nA username or other identity is often embedded within the token.\n\nAuthorization: Bearer &lt;token&gt;",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:04.000Z"
        },
        {
            "id": 6201,
            "username": "Rapid_API",
            "tweet_id": "1607357323105689600",
            "tweet_text": "It lessens the security of HTTP Basic authentication in comparison to the other techniques mentioned above.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:03.000Z"
        },
        {
            "id": 6202,
            "username": "Rapid_API",
            "tweet_id": "1607357319058264065",
            "tweet_text": "1.1. Basic HTTP Auth\n\nSending login information to a server may be done using HTTP Basic authentication.\n\nThe credentials are sent in an HTTP header, making them easily interceptable.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:02.000Z"
        },
        {
            "id": 6203,
            "username": "Rapid_API",
            "tweet_id": "1607357314989694977",
            "tweet_text": "Here, we'll discuss the three most commonly used API authentication techniques:\n\n- HTTP Authentication\n- API Keys (Bearer token, JSON Web Token)\n- OAuth",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "Others",
            "created_at": "2022-12-26T12:47:01.000Z"
        },
        {
            "id": 6204,
            "username": "Rapid_API",
            "tweet_id": "1607357310875193350",
            "tweet_text": "API Authentication methods\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607357310875193350",
            "tweet_type": "API tips",
            "created_at": "2022-12-26T12:47:00.000Z"
        },
        {
            "id": 6205,
            "username": "driscollis",
            "tweet_id": "1607357566631256065",
            "tweet_text": "#Python Pop Quiz \ud83d\udc0d\u2753\n\nWhat is the output of this REPL session?\n\nA) 'Mike'\nB) 'Driscoll'\nC) ('Mike', 'Driscoll')\nD) ['Mike', 'Driscoll'] https://t.co/DHrF2o4NzY",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk57L56XgAARlLq.jpg\"]",
            "tweet_conversation_id": "1607357566631256065",
            "tweet_type": "Python tips",
            "created_at": "2022-12-26T12:48:01.000Z"
        },
        {
            "id": 6206,
            "username": "bascodes",
            "tweet_id": "1607365972549308417",
            "tweet_text": "Check it out here:\nhttps://t.co/X4p38jI9vN",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607365970456190976",
            "tweet_type": "Others",
            "created_at": "2022-12-26T13:21:25.000Z"
        },
        {
            "id": 6207,
            "username": "bascodes",
            "tweet_id": "1607365970456190976",
            "tweet_text": "If you're using bookmarks on Twitter, have you checked out my little side project @bookmarksemail?\n\nYou get a daily digest of all your Twitter bookmarks without needing to publicly tag a bot",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607365970456190976",
            "tweet_type": "Others",
            "created_at": "2022-12-26T13:21:25.000Z"
        },
        {
            "id": 6208,
            "username": "bascodes",
            "tweet_id": "1607384968392544262",
            "tweet_text": "\"Any sufficiently complicated C or Fortran program contains an ad hoc, informally specified, bug-ridden, slow implementation of half of Common Lisp\"\n\u2013 Philip Greenspun",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607384968392544262",
            "tweet_type": "Others",
            "created_at": "2022-12-26T14:36:54.000Z"
        },
        {
            "id": 6209,
            "username": "driscollis",
            "tweet_id": "1607403357387325441",
            "tweet_text": "You can access #Python enums in a couple of different ways. \ud83d\udc0d\ud83d\udd25\n\nThe following demonstrates how to access by number. It also shows how to access an Enum using attributes.\n\nWhile not shown here, you also have dictionary-like access:\n\nLanguages[\"Python\"] https://t.co/JMc8BA7WkW",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk6k1Y3WAAAmTFj.jpg\"]",
            "tweet_conversation_id": "1607403357387325441",
            "tweet_type": "Python tips",
            "created_at": "2022-12-26T15:49:59.000Z"
        },
        {
            "id": 6210,
            "username": "testdrivenio",
            "tweet_id": "1607413437277278208",
            "tweet_text": "Python tip:\n\nYou can see all attributes and methods that a Python object has with dir().\nThe method returns a sorted list of attributes and methods (including dunder methods).\n\nCalling it on an instance of a class will produce the same result as with the class itself. https://t.co/3mUhj1bj4G",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk6uACIaYAQMaId.png\"]",
            "tweet_conversation_id": "1607413437277278208",
            "tweet_type": "Python tips",
            "created_at": "2022-12-26T16:30:02.000Z"
        },
        {
            "id": 6211,
            "username": "alexxubyte",
            "tweet_id": "1607417272657915904",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/V8Cgw1WIwE",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:16.000Z"
        },
        {
            "id": 6212,
            "username": "alexxubyte",
            "tweet_id": "1607417269919047684",
            "tweet_text": "/7 Subscribe to our weekly newsletter to learn something new every week:\n\nhttps://t.co/dkjDPxaQMt",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:16.000Z"
        },
        {
            "id": 6213,
            "username": "alexxubyte",
            "tweet_id": "1607417267272421377",
            "tweet_text": "/6 \ud83d\udc49 Over to you: what comes into your mind when people talk about \u201ccloud native\u201d?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:15.000Z"
        },
        {
            "id": 6214,
            "username": "alexxubyte",
            "tweet_id": "1607417264609046528",
            "tweet_text": "/5 \ud83d\udd39 4. Application infrastructure\nThe applications are massively deployed on cloud infrastructure instead of self-hosted servers.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:14.000Z"
        },
        {
            "id": 6215,
            "username": "alexxubyte",
            "tweet_id": "1607417260347621377",
            "tweet_text": "/4 \ud83d\udd39 3. Deployment &amp; packaging\nThe applications used to be deployed on physical servers. Then around 2000, the apps not sensitive to latency were usually deployed on virtual servers. With cloud-native, apps are packaged into docker images and deployed in containers https://t.co/WSXTIsQFA6",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk6xeVKagAAnf56.jpg\"]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:13.000Z"
        },
        {
            "id": 6216,
            "username": "alexxubyte",
            "tweet_id": "1607417248016379909",
            "tweet_text": "/3 \ud83d\udd39 2. Application architecture\nThe architecture has gone from monolithic to microservices. Each service is designed to be small, adaptive to the limited resources in cloud containers. https://t.co/Ohn8zYYRjP",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk6xdolaMAIll51.jpg\"]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:10.000Z"
        },
        {
            "id": 6217,
            "username": "alexxubyte",
            "tweet_id": "1607417236482060290",
            "tweet_text": "/2 This means the applications are designed to leverage cloud features, so they are resilient to load and easy to scale.\n\nCloud-native includes 4 aspects:\n\n\ud83d\udd39 1. Development process\nThis has progressed from waterfall to agile to DevOps. https://t.co/YI103DCgrt",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk6xc7YacAAviQO.jpg\"]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:08.000Z"
        },
        {
            "id": 6218,
            "username": "alexxubyte",
            "tweet_id": "1607417223840411652",
            "tweet_text": "/1 What is cloud-native?\n\nBelow is a diagram showing the evolution of architecture and processes since the 1980s.\n\nOrganizations can build and run scalable applications on public, private, and hybrid clouds using cloud-native technologies. https://t.co/B9nFW1rVS6",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk6xcSnaEAA-qBg.jpg\"]",
            "tweet_conversation_id": "1607417223840411652",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-26T16:45:05.000Z"
        },
        {
            "id": 6219,
            "username": "driscollis",
            "tweet_id": "1607412616720224264",
            "tweet_text": "What did you do with #Python last week? \ud83d\udc0d\n\nI didn't get much done with Python because I was sick and trying to keep up with a blizzard",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607412616720224264",
            "tweet_type": "Python tips",
            "created_at": "2022-12-26T16:26:46.000Z"
        },
        {
            "id": 6220,
            "username": "bascodes",
            "tweet_id": "1607482608295854080",
            "tweet_text": "Make sure to subscribe here \ud83d\udc47\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607482604239953921",
            "tweet_type": "Others",
            "created_at": "2022-12-26T21:04:54.000Z"
        },
        {
            "id": 6221,
            "username": "bascodes",
            "tweet_id": "1607482604239953921",
            "tweet_text": "Newsletter goes out tomorrow!\n\nThis is the last newsletter of this year. It will include\n\ud83d\udcbb State of the tech industry\n\ud83c\udf86 My reflections on 2022 and a 2023 outlook\n\ud83d\udcdd Reflections on technical writing by @BhavaniRavi_",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607482604239953921",
            "tweet_type": "Others",
            "created_at": "2022-12-26T21:04:53.000Z"
        },
        {
            "id": 6222,
            "username": "Rapid_API",
            "tweet_id": "1607542559592554497",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:07.000Z"
        },
        {
            "id": 6223,
            "username": "Rapid_API",
            "tweet_id": "1607542555566030849",
            "tweet_text": "405 - Method Not Allowed\n\nThe HTTP response code 405 indicates that the request method is not allowed for the requested resource.\n\nIt is usually due to a problem with the server configuration.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:06.000Z"
        },
        {
            "id": 6224,
            "username": "Rapid_API",
            "tweet_id": "1607542551619174400",
            "tweet_text": "404 - Not Found\n\nIt is an error message that means the page you are looking for could not be found.\n\nThis can be due to several reasons, such as a typo in the URL or the page being moved or deleted.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:05.000Z"
        },
        {
            "id": 6225,
            "username": "Rapid_API",
            "tweet_id": "1607542547668242433",
            "tweet_text": "403 - Forbidden\n\nIt indicates that the client is not authorized to access the requested resource.\n\nIt is usually due to a lack of permissions.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:04.000Z"
        },
        {
            "id": 6226,
            "username": "Rapid_API",
            "tweet_id": "1607542543419416577",
            "tweet_text": "401 - Unauthorized\n\nIt indicates that the client is not authorized to access the requested resource.\n\nIt is usually due to an invalid or missing authorization header.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:03.000Z"
        },
        {
            "id": 6227,
            "username": "Rapid_API",
            "tweet_id": "1607542539422154753",
            "tweet_text": "400 - Bad request\n\nThis HTTP response code means that the server could not understand the request due to invalid syntax.\n\nIt is often caused by a client error, such as a malformed URL.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:02.000Z"
        },
        {
            "id": 6228,
            "username": "Rapid_API",
            "tweet_id": "1607542535416684544",
            "tweet_text": "304 - Not Modified\n\nIt indicates that previously cached response can be reused, as the requested resource has not been modified.\n\nThis can improve performance, as the client does not need to re-download the resource.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:01.000Z"
        },
        {
            "id": 6229,
            "username": "Rapid_API",
            "tweet_id": "1607542531415330820",
            "tweet_text": "302 - Found\n\nThe HTTP response status code 302 is similar to status 301, showing that the resource has been moved.\n\nHowever, unlike status 301, the 302 status code indicates that the redirect is only temporary.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:03:00.000Z"
        },
        {
            "id": 6230,
            "username": "Rapid_API",
            "tweet_id": "1607542527472664578",
            "tweet_text": "301 - Moved Permanently\n\nIt means that the resource you are trying to access has been moved permanently. It is usually the result of a website redesign or change in URL.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:02:59.000Z"
        },
        {
            "id": 6231,
            "username": "Rapid_API",
            "tweet_id": "1607542523513262080",
            "tweet_text": "204 - No Content\n\nHTTP response status code 204 indicates that the server has successfully processed the request and that there is no content to return.\n\nThis is often used when a request is made to update an existing resource, such as when updating a record in a database.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:02:58.000Z"
        },
        {
            "id": 6232,
            "username": "Rapid_API",
            "tweet_id": "1607542519536943107",
            "tweet_text": "202 - Accepted\n\nIt means that the server has accepted the request, but the processing has not been completed.\n\nIt is used when the client does not need to wait for the processing to finish before continuing.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:02:58.000Z"
        },
        {
            "id": 6233,
            "username": "Rapid_API",
            "tweet_id": "1607542515581714435",
            "tweet_text": "201 - Created\n\nThe HTTP response code 201 means that the request is successful and that a new resource has been created.\n\nIt is often the case when a new file or directory is uploaded to a web server.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:02:57.000Z"
        },
        {
            "id": 6234,
            "username": "Rapid_API",
            "tweet_id": "1607542511550996483",
            "tweet_text": "200 - OK\n\nThe HTTP response status code 200 is the standard response for successful HTTP requests.\n\nThe server responded with \"OK\" to indicate that the request was successful.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:02:56.000Z"
        },
        {
            "id": 6235,
            "username": "Rapid_API",
            "tweet_id": "1607542507532963841",
            "tweet_text": "Five categories are used to group the responses:\n\n1. Informational responses (100\u2013199)\n2. Successful responses (200\u2013299)\n3. Redirection messages (300\u2013399)\n4. Client error responses (400\u2013499)\n5. Server error responses (500\u2013599)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "Others",
            "created_at": "2022-12-27T01:02:55.000Z"
        },
        {
            "id": 6236,
            "username": "Rapid_API",
            "tweet_id": "1607542503623860224",
            "tweet_text": "HTTP Status codes worth knowing about\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607542503623860224",
            "tweet_type": "API tips",
            "created_at": "2022-12-27T01:02:54.000Z"
        },
        {
            "id": 6237,
            "username": "Rapid_API",
            "tweet_id": "1607718439904333825",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "Others",
            "created_at": "2022-12-27T12:42:00.000Z"
        },
        {
            "id": 6238,
            "username": "Rapid_API",
            "tweet_id": "1607718435919728643",
            "tweet_text": "The response may also include an \u2018Access-Control-Max-Age\u2019 header specifying the time the response must be cached within.\n\nWith this, the client won\u2019t need the preflight request whenever it wants to access the CORS resource.\n\nThe actual CORS request can now be made as usual.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "Others",
            "created_at": "2022-12-27T12:41:59.000Z"
        },
        {
            "id": 6239,
            "username": "Rapid_API",
            "tweet_id": "1607718431918366720",
            "tweet_text": "Preflight requests start by sending an HTTP OPTIONS request to the server.\n\nThe server responds with an \u2018Access-Control-Allow-Methods\u2019 header which states the HTTP Methods permitted to be used by the origin.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "Others",
            "created_at": "2022-12-27T12:41:58.000Z"
        },
        {
            "id": 6240,
            "username": "Rapid_API",
            "tweet_id": "1607718427933687809",
            "tweet_text": "That's the basics of a CORS request. However, some HTTP methods (Methods that are not GET, POST, or HEAD) require a preflight request before the actual request is made.\n\nDetails of Preflight requests \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "API tips",
            "created_at": "2022-12-27T12:41:57.000Z"
        },
        {
            "id": 6241,
            "username": "Rapid_API",
            "tweet_id": "1607718423949107200",
            "tweet_text": "Next, the server responds and adds an \u2018Access-Control-Allow-Origin\u2019 header in the response.\n\nIf this header\u2019s origin is the same as the origin sent in the request, access to the resource will be allowed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "Others",
            "created_at": "2022-12-27T12:41:56.000Z"
        },
        {
            "id": 6242,
            "username": "Rapid_API",
            "tweet_id": "1607718420039999488",
            "tweet_text": "When the browser makes a cross-origin request, it will add an \u2018Origin\u2019 header that states the scheme(protocol), domain, and port number.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "Others",
            "created_at": "2022-12-27T12:41:55.000Z"
        },
        {
            "id": 6243,
            "username": "Rapid_API",
            "tweet_id": "1607718416038727681",
            "tweet_text": "However, using CORS adds flexibility to Same-Origin Policy. A typical example is making a request to an API on a different domain.\n\nBelow is a breakdown of how CORS functions\ud83d\udc47\ud83c\udffc",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "API tips",
            "created_at": "2022-12-27T12:41:55.000Z"
        },
        {
            "id": 6244,
            "username": "Rapid_API",
            "tweet_id": "1607718411974447104",
            "tweet_text": "As a standard, browsers implement Same-Origin Policy, which means requesting data from the same origin is allowed but requesting data from another URL will throw an error.\n\nThis is implemented for security reasons.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "Others",
            "created_at": "2022-12-27T12:41:54.000Z"
        },
        {
            "id": 6245,
            "username": "Rapid_API",
            "tweet_id": "1607718407960510465",
            "tweet_text": "CORS (Cross-Origin Resource Sharing) is an HTTP-based mechanism that enables the browser to access resources outside a given domain.\n\nIn other words, resources can be requested from one URL to another.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "Others",
            "created_at": "2022-12-27T12:41:53.000Z"
        },
        {
            "id": 6246,
            "username": "Rapid_API",
            "tweet_id": "1607718404038840320",
            "tweet_text": "What exactly is CORS, and how does it work?\n\nThread \ud83e\uddf5",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607718404038840320",
            "tweet_type": "API tips",
            "created_at": "2022-12-27T12:41:52.000Z"
        },
        {
            "id": 6247,
            "username": "bascodes",
            "tweet_id": "1607738098871373826",
            "tweet_text": "Newsletter goes out in two hours!\n\nThis is the last newsletter of this year. It will include\n\ud83d\udcbb State of the tech industry\n\ud83c\udf86 My reflections on 2022 and a 2023 outlook\n\ud83d\udcdd Reflections on technical writing by @BhavaniRavi_\n\nSubscribe here \ud83d\udc47\nhttps://t.co/TdYEGPVZ43",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607738098871373826",
            "tweet_type": "Others",
            "created_at": "2022-12-27T14:00:07.000Z"
        },
        {
            "id": 6248,
            "username": "testdrivenio",
            "tweet_id": "1607739424129048577",
            "tweet_text": "Dynamic Secret Generation with Vault and Flask\n\nhttps://t.co/uZBztCRw2K\n\nReal-world example of using Hashicorp's Vault and Consul to create dynamic Postgres credentials for a Flask web app.\n\n#Vault #Flask #DevOps @HashiCorp",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607739424129048577",
            "tweet_type": "Others",
            "created_at": "2022-12-27T14:05:23.000Z"
        },
        {
            "id": 6249,
            "username": "alexxubyte",
            "tweet_id": "1607779643310080001",
            "tweet_text": "/8 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/aWbAFdnfGj",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:12.000Z"
        },
        {
            "id": 6250,
            "username": "alexxubyte",
            "tweet_id": "1607779640642502657",
            "tweet_text": "/7 Applying these strict accounting rules makes reconciliation much easier!\n\nWhy is a credit card called a \u201c\ud835\udc1c\ud835\udc2b\ud835\udc1e\ud835\udc1d\ud835\udc22\ud835\udc2d\u201d card?\nWhy is a debit card called a \u201c\ud835\udc1d\ud835\udc1e\ud835\udc1b\ud835\udc22\ud835\udc2d\u201d card? \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:12.000Z"
        },
        {
            "id": 6251,
            "username": "alexxubyte",
            "tweet_id": "1607779637337419776",
            "tweet_text": "/6 Bob\u2019s card is called a \u201cdebit\u201d card because it is a \ud835\udc1d\ud835\udc1e\ud835\udc1b\ud835\udc22\ud835\udc2d \ud835\udc2b\ud835\udc1e\ud835\udc1c\ud835\udc28\ud835\udc2b\ud835\udc1d when paying with a debit card.\n\n\ud83d\udc49 Why is this important?\n\nThis is how a ledger system is designed, only a real ledger is more complicated. https://t.co/eJG2jJvKJF",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk_7DmraMAA2SON.jpg\"]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:11.000Z"
        },
        {
            "id": 6252,
            "username": "alexxubyte",
            "tweet_id": "1607779629355642881",
            "tweet_text": "/5 This is a \ud835\udc1d\ud835\udc1e\ud835\udc1b\ud835\udc22\ud835\udc2d record.\n\n2. Journal line 2 - Bank\u2019s cash is an \ud835\udc1a\ud835\udc2c\ud835\udc2c\ud835\udc1e\ud835\udc2d and the bank\u2019s cash is deducted by $100.\n\nThis is a \ud835\udc1c\ud835\udc2b\ud835\udc1e\ud835\udc1d\ud835\udc22\ud835\udc2d record.\n\nThe balance sheet equation still balances with the two journal lines recorded in the ledger. https://t.co/b064f20Lsz",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk_7DJOaMAggupx.jpg\"]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:09.000Z"
        },
        {
            "id": 6253,
            "username": "alexxubyte",
            "tweet_id": "1607779621302603777",
            "tweet_text": "/4 Bob pays $100 to the merchant with a debit card. We have two accounts involved in this transaction:\n\n1. Journal line 1 - From the issuing bank\u2019s point of view, Bob\u2019s bank account is a \ud835\udc25\ud835\udc22\ud835\udc1a\ud835\udc1b\ud835\udc22\ud835\udc25\ud835\udc22\ud835\udc2d\ud835\udc32 (because the bank owes Bob money). Bob\u2019s bank account is deducted by $100. https://t.co/n0HoEhX5Cq",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk_7Cs2aMAEXcUY.jpg\"]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:07.000Z"
        },
        {
            "id": 6254,
            "username": "alexxubyte",
            "tweet_id": "1607779614155501569",
            "tweet_text": "/3 \n\ud83d\udd38 Each journal line is booked to an account.\n\ud83d\udd38 Each account belongs to one of the three components in the balance sheet:\n\n\ud83d\udca1Asset = Liability + Equity\n\nLet\u2019s look at the issuing bank\u2019s ledger as an example:",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:05.000Z"
        },
        {
            "id": 6255,
            "username": "alexxubyte",
            "tweet_id": "1607779611563413504",
            "tweet_text": "/2 \n\ud83d\udd38 Each transaction in the business system is transformed into at least two journal lines in the ledger system. This is called \ud835\udc1d\ud835\udc28\ud835\udc2e\ud835\udc1b\ud835\udc25\ud835\udc1e-\ud835\udc1e\ud835\udc27\ud835\udc2d\ud835\udc2b\ud835\udc32 accounting, where every transaction must have a \ud835\udc2c\ud835\udc28\ud835\udc2e\ud835\udc2b\ud835\udc1c\ud835\udc1e account and a \ud835\udc2d\ud835\udc1a\ud835\udc2b\ud835\udc20\ud835\udc1e\ud835\udc2d account.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:05.000Z"
        },
        {
            "id": 6256,
            "username": "alexxubyte",
            "tweet_id": "1607779608346374146",
            "tweet_text": "/1 Why is a credit card called a \u201c\ud835\udc1c\ud835\udc2b\ud835\udc1e\ud835\udc1d\ud835\udc22\ud835\udc2d\u201d card?\n\nWhy is a debit card called a \u201c\ud835\udc1d\ud835\udc1e\ud835\udc1b\ud835\udc22\ud835\udc2d\u201d card?\n\nAn example of a debit card payment is shown in the diagram below. \ud83d\udc47 https://t.co/t0nmXOZI6C",
            "tweet_media": "[\"https://pbs.twimg.com/media/Fk_7CCSaUAADTpp.jpg\"]",
            "tweet_conversation_id": "1607779608346374146",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-27T16:45:04.000Z"
        },
        {
            "id": 6257,
            "username": "testdrivenio",
            "tweet_id": "1607798471033237504",
            "tweet_text": "Python tip:\n\nA list comprehension can be used strictly for building a list.\n\nIf you're using it for anything else (e.g., its side effects), you're doing it wrong. https://t.co/afZJA2C5Ij",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlAMMAaaYAAXutc.png\"]",
            "tweet_conversation_id": "1607798471033237504",
            "tweet_type": "Python tips",
            "created_at": "2022-12-27T18:00:01.000Z"
        },
        {
            "id": 6258,
            "username": "bascodes",
            "tweet_id": "1607812803590496279",
            "tweet_text": "What did you do before working in the tech industry?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607812803590496279",
            "tweet_type": "Others",
            "created_at": "2022-12-27T18:56:58.000Z"
        },
        {
            "id": 6259,
            "username": "driscollis",
            "tweet_id": "1607852461326311426",
            "tweet_text": "I've been busy working on The Python Quiz Book today and contemplating how and what I want to write in a potential Python newsletter.\n\nWhat have you been working on?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607852461326311426",
            "tweet_type": "Others",
            "created_at": "2022-12-27T21:34:33.000Z"
        },
        {
            "id": 6260,
            "username": "linuxopsys",
            "tweet_id": "1607858997289451523",
            "tweet_text": "That's all! Thank you for getting this far. I hope you find this thread useful.\n\nIf you found this thread helpful\n\n1. Toss us a follow for more daily threads on Linux, sysadmin, and DevOps\u2192@linuxopsys\n2. Like and RT the first tweet so that other Linux users can find it as well.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:32.000Z"
        },
        {
            "id": 6261,
            "username": "linuxopsys",
            "tweet_id": "1607858994496016384",
            "tweet_text": "For a more in-depth guide on how to use command line redirections, check out this article on our website.\n\nBash Command Line Chain Operators in Linux with Examples:\nhttps://t.co/WBdy2lAyMR",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-27T22:00:31.000Z"
        },
        {
            "id": 6262,
            "username": "linuxopsys",
            "tweet_id": "1607858991413219329",
            "tweet_text": "Many people would, for example, use the preceding example with cat and then pipe the output of cat to the second command to act as in the input. To be honest, there is no need to use the cat command here.\n\n$ cat file.txt | wc https://t.co/q2GJti1CnU",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDOo8agAAKccn.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:30.000Z"
        },
        {
            "id": 6263,
            "username": "linuxopsys",
            "tweet_id": "1607858983846674433",
            "tweet_text": "Here is an example of input redirection in use:\n\n$ wc &lt; file.txt\n\nThough stdin is rarely used, it is preferable to pipe, especially to avoid the needless use of the cat command. https://t.co/YuiAx6ujOo",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDOKoagAAJT3P.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:28.000Z"
        },
        {
            "id": 6264,
            "username": "linuxopsys",
            "tweet_id": "1607858976057851904",
            "tweet_text": "The input redirection\n\nYou can use stdin redirection to pass the contents of a text file to a command.\nStdin is rarely used. Because most Linux commands accept filenames as arguments, stdin redirection is often unnecessary.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:27.000Z"
        },
        {
            "id": 6265,
            "username": "linuxopsys",
            "tweet_id": "1607858972660486144",
            "tweet_text": "The &amp;&gt; construct can also be used to redirect stderr to stdout. &amp;&gt; has the same meaning in Bash as 2&gt;&amp;1:\n\n$ cmd &amp;&gt; file.txt https://t.co/QjJPW5qObx",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDNigaYAAYpNY.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:26.000Z"
        },
        {
            "id": 6266,
            "username": "linuxopsys",
            "tweet_id": "1607858964838109184",
            "tweet_text": "It is important to note that the order of redirection is crucial. The following example, for example, redirects only stdout to the file. This occurs because STDERR is redirected to STDOUT before STDOUT is redirected to the file.\n\n$ cmd 2&gt;&amp;1 &gt; file https://t.co/Q0uKIe311q",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDNE0aEAAGfBJ.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:24.000Z"
        },
        {
            "id": 6267,
            "username": "linuxopsys",
            "tweet_id": "1607858956806017024",
            "tweet_text": "Use the following command to redirect stderr to stdout and have error messages written to the same file as the standard output:\n\n$ cmd &gt; file.txt 2&gt;&amp;1\n\n&gt; file redirects stdout to file.txt, and 2&gt;&amp;1 redirects stderr to the current stdout location. https://t.co/2DtOOkLYS8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDMlnakAArjUN.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:22.000Z"
        },
        {
            "id": 6268,
            "username": "linuxopsys",
            "tweet_id": "1607858948950065152",
            "tweet_text": "Redirecting stderr to stdout\n\nWhen storing the program's output to a file, it's usual practice to redirect stderr to stdout so that everything goes into a single file.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:20.000Z"
        },
        {
            "id": 6269,
            "username": "linuxopsys",
            "tweet_id": "1607858945800155136",
            "tweet_text": "In most cases, you may not want to log the error messages to a file or standard error; instead, redirect stderr to a special location on your Linux system called /dev/null:\n\nHere is an example of how you can do it:\n\n$ cmd 2&gt;/dev/null https://t.co/039aRuHVKw",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDL_VagAENH02.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:19.000Z"
        },
        {
            "id": 6270,
            "username": "linuxopsys",
            "tweet_id": "1607858938242019329",
            "tweet_text": "Both stderr and stdout can be written into separate files. Here is an example:\n\n$ cmd 2&gt; error.txt &gt; output.txt\n\nThis will redirect the errors produced by the cmd command to the error.txt file and the output produced to the output.txt file. https://t.co/qeuZFWWN44",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDLiKaEAA2hcS.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:18.000Z"
        },
        {
            "id": 6271,
            "username": "linuxopsys",
            "tweet_id": "1607858930323165184",
            "tweet_text": "If you want to redirect the standard error (stderr) to a file using the file descriptor of 2 and the &gt;. Here is an example:\n\n$ ping https://t.co/mEMVF2HE1P 2&gt; error.txt\n\nThis will redirect the errors produced by the above command to a file called error.txt. https://t.co/FgM82cK18n",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDLDMaEAI5SFY.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:16.000Z"
        },
        {
            "id": 6272,
            "username": "linuxopsys",
            "tweet_id": "1607858921854898177",
            "tweet_text": "When n is not specified, the standard output stream is used. The following two commands, for example, are identical; both will redirect the command output (stdout) to a file.\n\n$ echo \"Linux is the future\" &gt; linux.txt\n$ echo \"Linux is the future\" 1&gt; linux.txt https://t.co/w7jNEcET9c",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBDKldaAAADh_i.jpg\"]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:14.000Z"
        },
        {
            "id": 6273,
            "username": "linuxopsys",
            "tweet_id": "1607858912107319296",
            "tweet_text": "Redirecting Standard Output (STDOUT)\n\nRedirection is a method of capturing a program's output and sending it as input to another program or file.\n\nThe n&gt; operator, where n is the file descriptor number, can be used to redirect streams.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:11.000Z"
        },
        {
            "id": 6274,
            "username": "linuxopsys",
            "tweet_id": "1607858909372616704",
            "tweet_text": "Both the input and error streams are printed on the terminal screen by default.\n\nUsing the piping technique, the output of another program can be directed to the input stream of another program and act as the standard input.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:11.000Z"
        },
        {
            "id": 6275,
            "username": "linuxopsys",
            "tweet_id": "1607858906692452352",
            "tweet_text": "The input stream sends data to the program, typically by typing on the keyboard.\n\nThe program output is directed to the standard output stream, while program error messages are directed to the standard error stream.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:10.000Z"
        },
        {
            "id": 6276,
            "username": "linuxopsys",
            "tweet_id": "1607858904012320768",
            "tweet_text": "Here are the standard Linux I/O streams:\n\n\u2022 0 - stdin, the standard input stream.\n\u2022 1 - stdout, the standard output stream.\n\u2022 2 - stderr, the standard error stream.\n\nA file descriptor is basically a number that uniquely identifies an open file in a computer's operating system.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:09.000Z"
        },
        {
            "id": 6277,
            "username": "linuxopsys",
            "tweet_id": "1607858901348913153",
            "tweet_text": "When a program is executed in Bash or other Linux shells, it uses 3 different I/O streams. Each stream is represented by a numerical file descriptor.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:09.000Z"
        },
        {
            "id": 6278,
            "username": "linuxopsys",
            "tweet_id": "1607858898647781376",
            "tweet_text": "Similarly, by default, a command writes its output to standard output, which is your terminal.\n\nThe concept of redirection refers to the ability to redirect stdin, stdout, and stderr from their usual output locations to another file or command (or even peripheral devices).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:08.000Z"
        },
        {
            "id": 6279,
            "username": "linuxopsys",
            "tweet_id": "1607858895971848193",
            "tweet_text": "Most Unix/Linux system commands accept input from your terminal and return the resulting output to it.\n\nA command normally reads its input from the standard input, which is usually your terminal.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Others",
            "created_at": "2022-12-27T22:00:08.000Z"
        },
        {
            "id": 6280,
            "username": "linuxopsys",
            "tweet_id": "1607858893262303233",
            "tweet_text": "Input, Output, and Error Redirection in Linux explained (with examples):",
            "tweet_media": "[]",
            "tweet_conversation_id": "1607858893262303233",
            "tweet_type": "Linux tips",
            "created_at": "2022-12-27T22:00:07.000Z"
        },
        {
            "id": 6281,
            "username": "driscollis",
            "tweet_id": "1607894877991276545",
            "tweet_text": "You can also create QR Codes in PDFs with #Python and #ReportLab!\n\n\ud83d\udc0d\ud83d\udd25\n\nHere's a short example: https://t.co/DGxA2B4IWN",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlBj3YLWYAIhFBl.jpg\", \"https://pbs.twimg.com/media/FlBj3nwX0AAOMKg.jpg\"]",
            "tweet_conversation_id": "1607894877991276545",
            "tweet_type": "Python tips",
            "created_at": "2022-12-28T00:23:06.000Z"
        },
        {
            "id": 6282,
            "username": "Rapid_API",
            "tweet_id": "1607913741215207424",
            "tweet_text": "What is an API? https://t.co/FBQfcGDsdh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlB1BlbWIAAPr2B.jpg\"]",
            "tweet_conversation_id": "1607913741215207424",
            "tweet_type": "Others",
            "created_at": "2022-12-28T01:38:04.000Z"
        },
        {
            "id": 6283,
            "username": "Rapid_API",
            "tweet_id": "1608077143040212992",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:22.000Z"
        },
        {
            "id": 6284,
            "username": "Rapid_API",
            "tweet_id": "1608077139017973763",
            "tweet_text": "Attributes can be anything that can be used to describe a user, such as their role, department, or location. \n\nABAC is often used with other access control methods, such as role-based access control (RBAC).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:21.000Z"
        },
        {
            "id": 6285,
            "username": "Rapid_API",
            "tweet_id": "1608077135050149890",
            "tweet_text": "2. Attribute-based access control (ABAC)\n\nAttribute-based access control (ABAC) is a type of access control that uses attributes to determine whether a user has access to a resource.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:20.000Z"
        },
        {
            "id": 6286,
            "username": "Rapid_API",
            "tweet_id": "1608077131086499843",
            "tweet_text": "In RBAC, each user is assigned a role, and the role determines the user's permissions. \n\nFor example, a user with the role of \"manager\" may have access to all resources, while a user with the role of \"employee\" may only have access to specific resources.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:19.000Z"
        },
        {
            "id": 6287,
            "username": "Rapid_API",
            "tweet_id": "1608077127047315458",
            "tweet_text": "1. Role-based access control (RBAC) \n\nIt is a security model that defines roles and permissions for users. \n\nRBAC controls access to resources, such as files, applications, and database records.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:18.000Z"
        },
        {
            "id": 6288,
            "username": "Rapid_API",
            "tweet_id": "1608077123142434817",
            "tweet_text": "Let's describe the two most common access models.\n\n1. Role-based access control (RBAC) \n\n2. Attribute-based access control (ABAC)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:17.000Z"
        },
        {
            "id": 6289,
            "username": "Rapid_API",
            "tweet_id": "1608077119178899460",
            "tweet_text": "Authorization rules for the user are predefined, and the user cannot change them.\n\nThe organization's settings determine how authorization works (access rules settings).",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:16.000Z"
        },
        {
            "id": 6290,
            "username": "Rapid_API",
            "tweet_id": "1608077115156561926",
            "tweet_text": "2. API Authorization\n\nAPI authorization is the process of authorizing an application to access a user's data. \n\nThe authorization's purpose is to ensure the user has access to information.\n\nAuthorization always comes after authentication.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:15.000Z"
        },
        {
            "id": 6291,
            "username": "Rapid_API",
            "tweet_id": "1608077111226499072",
            "tweet_text": "In contrast with authorization, the user can see and change some aspects of the authentication process (e.g. email or password)",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:14.000Z"
        },
        {
            "id": 6292,
            "username": "Rapid_API",
            "tweet_id": "1608077107258703872",
            "tweet_text": "There are various methods of API authentication, such as OAuth, API Keys, and Basic Authentication.\n\nThe access management process always starts with authentication.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:13.000Z"
        },
        {
            "id": 6293,
            "username": "Rapid_API",
            "tweet_id": "1608077103240560645",
            "tweet_text": "1. API Authentication\n\nAPI authentication is the process of authenticating an application or user before making API calls.\n\nThis process ensures that only authorized applications or users can access the API and its data.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:12.000Z"
        },
        {
            "id": 6294,
            "username": "Rapid_API",
            "tweet_id": "1608077098916134913",
            "tweet_text": "There is a common misconception that authentication and authorization are the same when, in fact, they are two very different processes used to protect an API from cyber-attacks.\n\nLet's talk about the differences and understand them better.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "Others",
            "created_at": "2022-12-28T12:27:11.000Z"
        },
        {
            "id": 6295,
            "username": "Rapid_API",
            "tweet_id": "1608077094952607746",
            "tweet_text": "Difference between API Authentication and API Authorization.\n\nThread \ud83e\uddf5\ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608077094952607746",
            "tweet_type": "API tips",
            "created_at": "2022-12-28T12:27:10.000Z"
        },
        {
            "id": 6296,
            "username": "testdrivenio",
            "tweet_id": "1608098923255562243",
            "tweet_text": "Django Stripe Tutorial\n\nhttps://t.co/8Bz6p6GIo8\n\nConfigure a new Django website from scratch to accept one-time payments with Stripe Checkout.\n\n#Django #Stripe #Python @StripeDev",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608098923255562243",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:53:54.000Z"
        },
        {
            "id": 6297,
            "username": "bascodes",
            "tweet_id": "1608100029960445953",
            "tweet_text": "With \ud835\ude8a\ud835\ude9c\ud835\udea2\ud835\ude97\ud835\ude8c coroutines, you can run these download tasks simultaneously. So the second download does not need to wait for the first one.\n\nSo, downloading two files just takes approx the time for the slower URL. https://t.co/wsPjry1BQ8",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEeaOCX0AIb0Es.jpg\"]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:18.000Z"
        },
        {
            "id": 6298,
            "username": "bascodes",
            "tweet_id": "1608100025929695232",
            "tweet_text": "No! \ud835\ude8a\ud835\ude9c\ud835\udea2\ud835\ude97\ud835\ude8c/\ud835\ude8a\ud835\udea0\ud835\ude8a\ud835\ude92\ud835\ude9d really shines when you would otherwise wait for I/O (network or disk operations).\n\nLet's say you want to download two files from the internet. \nEach download takes 5 seconds. Total time will be 10 seconds if you process the files synchronously.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:17.000Z"
        },
        {
            "id": 6299,
            "username": "bascodes",
            "tweet_id": "1608100021865439232",
            "tweet_text": "Okay, that works, but what's the benefit?\n\nFor now, it looks like a very complicated way to write code.\n\nDid we just introduce a solution to a non-existing problem?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:16.000Z"
        },
        {
            "id": 6300,
            "username": "bascodes",
            "tweet_id": "1608100016937132033",
            "tweet_text": "What we need is an event loop. The event loop manages the \ud835\ude8a\ud835\udea0\ud835\ude8a\ud835\ude92\ud835\ude9d statements and your coroutines. https://t.co/vW0liq040V",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEeZ8ZXgAEKt9X.jpg\"]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:15.000Z"
        },
        {
            "id": 6301,
            "username": "bascodes",
            "tweet_id": "1608100011614543873",
            "tweet_text": "Note, that our \ud835\ude96\ud835\ude8a\ud835\ude92\ud835\ude97() function itself is a coroutine. So, how do we run it in the first place? https://t.co/JaKYbENxAl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEeZnJXwAA30mJ.jpg\"]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:14.000Z"
        },
        {
            "id": 6302,
            "username": "bascodes",
            "tweet_id": "1608100006984130561",
            "tweet_text": "This is the point where we need to understand \ud835\ude8a\ud835\ude9c\ud835\udea2\ud835\ude97\ud835\ude8c/\ud835\ude8a\ud835\udea0\ud835\ude8a\ud835\ude92\ud835\ude9d.\n\nA coroutine does not *run* immediately. Instead, it gets executed if and when it gets \ud835\ude8a\ud835\udea0\ud835\ude8a\ud835\ude92\ud835\ude9ded. https://t.co/Hc45gzmSHM",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEeZXeX0AAB_I4.jpg\"]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:13.000Z"
        },
        {
            "id": 6303,
            "username": "bascodes",
            "tweet_id": "1608100003012124672",
            "tweet_text": "If we call that function, we get back something like \n\n&lt;\ud835\ude8c\ud835\ude98\ud835\ude9b\ud835\ude98\ud835\ude9e\ud835\ude9d\ud835\ude92\ud835\ude97\ud835\ude8e \ud835\ude98\ud835\ude8b\ud835\ude93\ud835\ude8e\ud835\ude8c\ud835\ude9d \ud835\ude9d\ud835\ude8a\ud835\ude9c\ud835\ude94 \ud835\ude8a\ud835\ude9d \ud835\udff6\ud835\udea1\ud835\udff7\ud835\udff6\ud835\udffa\ud835\udff7\ud835\udff9\ud835\ude8e\ud835\udfff\ud835\udffa\ud835\udff6&gt;\n\nbut it never gets executed.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:12.000Z"
        },
        {
            "id": 6304,
            "username": "bascodes",
            "tweet_id": "1608099997647777793",
            "tweet_text": "Coroutines\n\nIn a similar way, we can create a coroutine, or, an async function. https://t.co/E94PcMUuma",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEeZEaWIAArKxS.jpg\"]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:11.000Z"
        },
        {
            "id": 6305,
            "username": "bascodes",
            "tweet_id": "1608099992333438982",
            "tweet_text": "Another way of writing generators is using the \ud835\udea2\ud835\ude92\ud835\ude8e\ud835\ude95\ud835\ude8d keyword.\n\nThe code does not run if you call the function unless you iterate over the result in a loop. https://t.co/2Wy0TKGk17",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEeYrDWYAE442B.jpg\"]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:09.000Z"
        },
        {
            "id": 6306,
            "username": "bascodes",
            "tweet_id": "1608099987530940416",
            "tweet_text": "Generators\n\nGenerators are expressions in Python that are \"lazy\", i.e. the code is only executed when needed in the context of an iteration.\n\nThe most prominent examples are list comprehensions: https://t.co/G7CZU8TaIh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEeYaoXoAA-7qQ.jpg\"]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Others",
            "created_at": "2022-12-28T13:58:08.000Z"
        },
        {
            "id": 6307,
            "username": "bascodes",
            "tweet_id": "1608099983483445248",
            "tweet_text": "\ud83d\udc0d\ud83d\udca1 Running tasks in parallel is a common requirement in software. How can we do that in Python?\n\nLet's have a look at \ud835\udea2\ud835\ude92\ud835\ude8e\ud835\ude95\ud835\ude8d, \ud835\ude8a\ud835\ude9c\ud835\udea2\ud835\ude97\ud835\ude8c, and generator objects \ud83d\udc47",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608099983483445248",
            "tweet_type": "Python tips",
            "created_at": "2022-12-28T13:58:07.000Z"
        },
        {
            "id": 6308,
            "username": "driscollis",
            "tweet_id": "1608112865910611974",
            "tweet_text": "What are you looking forward to doing with #Python in 2023?  \ud83d\udc0d\ud83e\uddd0",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608112865910611974",
            "tweet_type": "Python tips",
            "created_at": "2022-12-28T14:49:19.000Z"
        },
        {
            "id": 6309,
            "username": "bascodes",
            "tweet_id": "1608136071388303361",
            "tweet_text": "Are you currently learning about ML/AI in Python?\n\nWhere do you struggle?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608136071388303361",
            "tweet_type": "Others",
            "created_at": "2022-12-28T16:21:31.000Z"
        },
        {
            "id": 6310,
            "username": "driscollis",
            "tweet_id": "1608122571970547713",
            "tweet_text": "#Python 101 Tip\n\nThere are lots of different ways to add items to a #Python list. One of the most common is to use the `append()` method: https://t.co/n76JvenJiI",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlEy9NUXEAA_QAS.png\"]",
            "tweet_conversation_id": "1608122571970547713",
            "tweet_type": "Python tips",
            "created_at": "2022-12-28T15:27:53.000Z"
        },
        {
            "id": 6311,
            "username": "testdrivenio",
            "tweet_id": "1608160858332618752",
            "tweet_text": "Python tip: \n\nDictionary comprehension works similarly to list comprehension, except the result is a dictionary. \n\nThe pattern for dict comprehension from dict: \n{ key: value for (key, value) in dict.items() if condition }\n\nYou can use any iterable as the source (not just dict). https://t.co/9VA3NIwSHr",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlFVxuCagAAnfaP.png\"]",
            "tweet_conversation_id": "1608160858332618752",
            "tweet_type": "Python tips",
            "created_at": "2022-12-28T18:00:01.000Z"
        },
        {
            "id": 6312,
            "username": "alexxubyte",
            "tweet_id": "1608142017787486210",
            "tweet_text": "/7 I hope you've found this thread helpful.\n\nFollow me @alexxubyte for more.\n\nLike/Retweet the first tweet below if you can: https://t.co/4yvvFyJaBT",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608141999940726784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-28T16:45:09.000Z"
        },
        {
            "id": 6313,
            "username": "alexxubyte",
            "tweet_id": "1608142015291850752",
            "tweet_text": "/6 \ud83d\udc49 Over to you: of the 4 solutions (long polling, short polling, SSE, WebSocket), which ones are commonly used, for what use cases?",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608141999940726784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-28T16:45:08.000Z"
        },
        {
            "id": 6314,
            "username": "alexxubyte",
            "tweet_id": "1608142012708159489",
            "tweet_text": "/5 The difference is that SSE is uni-directional so the browser cannot send new request to server, while WebSocket is fully-duplex so the browser could keep sending new requests.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608141999940726784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-28T16:45:08.000Z"
        },
        {
            "id": 6315,
            "username": "alexxubyte",
            "tweet_id": "1608142010095136770",
            "tweet_text": "/4 \ud83d\udd39HTTP server and web browser cooperate: WebSocket or SSE (server-sent event). In both cases, the HTTP server could directly send the latest data to the browser after the connection is established.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608141999940726784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-28T16:45:07.000Z"
        },
        {
            "id": 6316,
            "username": "alexxubyte",
            "tweet_id": "1608142007440113665",
            "tweet_text": "/3 \ud83d\udd39Web browsers do the heavy lifting: short polling or long polling. With short polling, the browser will retry until it gets the latest data. With long polling, the HTTP server doesn\u2019t return results until new data has arrived.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608141999940726784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-28T16:45:07.000Z"
        },
        {
            "id": 6317,
            "username": "alexxubyte",
            "tweet_id": "1608142004889976833",
            "tweet_text": "/2 Both the web browser and the HTTP server could be responsible for this task.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608141999940726784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-28T16:45:06.000Z"
        },
        {
            "id": 6318,
            "username": "alexxubyte",
            "tweet_id": "1608141999940726784",
            "tweet_text": "/1 Can a web server provide real-time updates?\n\nAn HTTP server cannot automatically initiate a connection to a browser. As a result, the web browser is the initiator. What should we do next to get real-time updates from the HTTP server? https://t.co/gI05i1o8yS",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlFEnvpaMAUncs6.jpg\"]",
            "tweet_conversation_id": "1608141999940726784",
            "tweet_type": "Systems Design",
            "created_at": "2022-12-28T16:45:05.000Z"
        },
        {
            "id": 6319,
            "username": "driscollis",
            "tweet_id": "1608203611498070017",
            "tweet_text": "#Python has another handy string method called `endswith()`\n\nYou can use `endswith()` to find sub-strings at the end of the target string.\n\nHere's an example: https://t.co/nHooodUnvl",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlF8qV3X0AI5bAr.jpg\"]",
            "tweet_conversation_id": "1608203611498070017",
            "tweet_type": "Python tips",
            "created_at": "2022-12-28T20:49:54.000Z"
        },
        {
            "id": 6320,
            "username": "driscollis",
            "tweet_id": "1608160827646906375",
            "tweet_text": "Have you ever needed to `zip()` uneven lists in #Python? You can either accept that one list will be truncated or you can use `https://t.co/PHXhHZtF4Q_longest()` \ud83d\udc0d\ud83d\udd25\n\nCheck it out: https://t.co/Ad0TZH37FC",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlFVv8iX0AEnyDE.jpg\"]",
            "tweet_conversation_id": "1608160827646906375",
            "tweet_type": "Python tips",
            "created_at": "2022-12-28T17:59:54.000Z"
        },
        {
            "id": 6321,
            "username": "driscollis",
            "tweet_id": "1608263513461653508",
            "tweet_text": "If you need to know your computer's RAM amount, you can do that with #Python too.\n\nOne of the most convenient ways to get this information is with psutil, which can get you a lot more system info besides RAM\n\nhttps://t.co/QtSR4vODSg https://t.co/lcThmjE62e",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlGzI-yWAAESFiF.jpg\"]",
            "tweet_conversation_id": "1608263513461653508",
            "tweet_type": "Python tips",
            "created_at": "2022-12-29T00:47:56.000Z"
        },
        {
            "id": 6322,
            "username": "Rapid_API",
            "tweet_id": "1608267348359909376",
            "tweet_text": "That\u2019s all for now!\n\nFollow @Rapid_API for more exclusive content. \ud83d\udc19",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "Others",
            "created_at": "2022-12-29T01:03:10.000Z"
        },
        {
            "id": 6323,
            "username": "Rapid_API",
            "tweet_id": "1608267342479527936",
            "tweet_text": "4\ufe0f\u20e3 Request verification + resources sent\n\nIn the last step, the resource server receives the request with the JWT.\n\nIt verifies the JSON web token authenticity.\n\nIf it's correct, it will read the resource and return it to the user. https://t.co/qhqbspAdNW",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlG2mEhWYAA03rx.png\"]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "Others",
            "created_at": "2022-12-29T01:03:09.000Z"
        },
        {
            "id": 6324,
            "username": "Rapid_API",
            "tweet_id": "1608267335789604866",
            "tweet_text": "3\ufe0f\u20e3 Access data\n\nThe client can use the generated and stored JWT to access protected data on the server.\n\nThe client will do this by including the JWT into the HTTP authorization header of every upcoming request it will make to the protected resource. https://t.co/LCDmnWbxab",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlG2lwFXkAE3Ls5.png\"]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "Others",
            "created_at": "2022-12-29T01:03:07.000Z"
        },
        {
            "id": 6325,
            "username": "Rapid_API",
            "tweet_id": "1608267331121328128",
            "tweet_text": "The JWT is usually stored on the client in the session data.\n\nFor this, cookies or databases can be used.\n\nIn the following, let's use a GET request as an example.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "Others",
            "created_at": "2022-12-29T01:03:06.000Z"
        },
        {
            "id": 6326,
            "username": "Rapid_API",
            "tweet_id": "1608267325668745217",
            "tweet_text": "2\ufe0f\u20e3 Verify + Generate JWT\n\nThe authentication server verifies the email/password combination.\n\nIf the combination is correct, it will generate the JSON web token.\n\nFor this, the secret salt or private key can be used.\n\nThe JWT is returned to the user. https://t.co/MxZZwiksOh",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlG2le1XwAUm2fo.png\"]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "Others",
            "created_at": "2022-12-29T01:03:05.000Z"
        },
        {
            "id": 6327,
            "username": "Rapid_API",
            "tweet_id": "1608267320211959808",
            "tweet_text": "1\ufe0f\u20e3 User signs up\n\nThe user will sign up with their email/password. \n\nThis information is received by the Authentication Server. https://t.co/fEw4zyKA7i",
            "tweet_media": "[\"https://pbs.twimg.com/media/FlG2lN3XoAAj9AG.png\"]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "Others",
            "created_at": "2022-12-29T01:03:03.000Z"
        },
        {
            "id": 6328,
            "username": "Rapid_API",
            "tweet_id": "1608267315631771649",
            "tweet_text": "A JWT is a JSON Web Token, which is used to securely transmit information between parties.\n\nIn one of our previous tweets, we talked about the structure of the JWT and how it is generated.\n\nLet's explain now how the authentication process works.",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "Others",
            "created_at": "2022-12-29T01:03:02.000Z"
        },
        {
            "id": 6329,
            "username": "Rapid_API",
            "tweet_id": "1608267311022211074",
            "tweet_text": "How does JSON web token (JWT) authentication work?\n\nThread \ud83e\uddf5\ud83d\udc47\ud83c\udffb",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608267311022211074",
            "tweet_type": "API tips",
            "created_at": "2022-12-29T01:03:01.000Z"
        },
        {
            "id": 6330,
            "username": "raymondh",
            "tweet_id": "1608342883685535745",
            "tweet_text": "Oh no! Matthew just created a new rounding mode: \n\n      ROUND_RANDOM_PROPORTIONAL\n\n7.4 has a 40% chance of rounding up to 8\n7.6 has a 60% chance of rounding up to 8",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608342883685535745",
            "tweet_type": "Others",
            "created_at": "2022-12-29T06:03:19.000Z"
        },
        {
            "id": 6331,
            "username": "raymondh",
            "tweet_id": "1608356566255955969",
            "tweet_text": "def round(x: float) -&gt; int:\n    \"Round randomly based on proportional distance.\"\n    p = ceil(x) - x\n    return floor(x) if random() &lt; p else ceil(x)\n\n&gt;&gt;&gt; Counter(round(7.2) for i in range(100))\nCounter({7: 80, 8: 20})",
            "tweet_media": "[]",
            "tweet_conversation_id": "1608342883685535745",
            "tweet_type": "Others",
            "created_at": "2022-12-29T06:57:41.000Z"
        }
    ]
}